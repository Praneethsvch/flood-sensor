
lora-e5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a730  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008ec  0800a870  0800a870  0001a870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b15c  0800b15c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800b15c  0800b15c  0001b15c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b164  0800b164  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b164  0800b164  0001b164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b168  0800b168  0001b168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800b16c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019f4  20000074  0800b1e0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a68  0800b1e0  00021a68  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000296aa  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000051f9  00000000  00000000  00049748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002500  00000000  00000000  0004e948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002308  00000000  00000000  00050e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021d38  00000000  00000000  00053150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002865f  00000000  00000000  00074e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c947c  00000000  00000000  0009d4e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00166963  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a940  00000000  00000000  001669b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000074 	.word	0x20000074
 800015c:	00000000 	.word	0x00000000
 8000160:	0800a858 	.word	0x0800a858

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000078 	.word	0x20000078
 800017c:	0800a858 	.word	0x0800a858

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b974 	b.w	8000530 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9e08      	ldr	r6, [sp, #32]
 8000266:	460d      	mov	r5, r1
 8000268:	4604      	mov	r4, r0
 800026a:	4688      	mov	r8, r1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d14d      	bne.n	800030c <__udivmoddi4+0xac>
 8000270:	428a      	cmp	r2, r1
 8000272:	4694      	mov	ip, r2
 8000274:	d968      	bls.n	8000348 <__udivmoddi4+0xe8>
 8000276:	fab2 f282 	clz	r2, r2
 800027a:	b152      	cbz	r2, 8000292 <__udivmoddi4+0x32>
 800027c:	fa01 f302 	lsl.w	r3, r1, r2
 8000280:	f1c2 0120 	rsb	r1, r2, #32
 8000284:	fa20 f101 	lsr.w	r1, r0, r1
 8000288:	fa0c fc02 	lsl.w	ip, ip, r2
 800028c:	ea41 0803 	orr.w	r8, r1, r3
 8000290:	4094      	lsls	r4, r2
 8000292:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000296:	0c21      	lsrs	r1, r4, #16
 8000298:	fbb8 fef5 	udiv	lr, r8, r5
 800029c:	fa1f f78c 	uxth.w	r7, ip
 80002a0:	fb05 831e 	mls	r3, r5, lr, r8
 80002a4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002a8:	fb0e f107 	mul.w	r1, lr, r7
 80002ac:	4299      	cmp	r1, r3
 80002ae:	d90b      	bls.n	80002c8 <__udivmoddi4+0x68>
 80002b0:	eb1c 0303 	adds.w	r3, ip, r3
 80002b4:	f10e 30ff 	add.w	r0, lr, #4294967295
 80002b8:	f080 811e 	bcs.w	80004f8 <__udivmoddi4+0x298>
 80002bc:	4299      	cmp	r1, r3
 80002be:	f240 811b 	bls.w	80004f8 <__udivmoddi4+0x298>
 80002c2:	f1ae 0e02 	sub.w	lr, lr, #2
 80002c6:	4463      	add	r3, ip
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f5 	udiv	r0, r3, r5
 80002d0:	fb05 3310 	mls	r3, r5, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 f707 	mul.w	r7, r0, r7
 80002dc:	42a7      	cmp	r7, r4
 80002de:	d90a      	bls.n	80002f6 <__udivmoddi4+0x96>
 80002e0:	eb1c 0404 	adds.w	r4, ip, r4
 80002e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e8:	f080 8108 	bcs.w	80004fc <__udivmoddi4+0x29c>
 80002ec:	42a7      	cmp	r7, r4
 80002ee:	f240 8105 	bls.w	80004fc <__udivmoddi4+0x29c>
 80002f2:	4464      	add	r4, ip
 80002f4:	3802      	subs	r0, #2
 80002f6:	1be4      	subs	r4, r4, r7
 80002f8:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80002fc:	2100      	movs	r1, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa8>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	428b      	cmp	r3, r1
 800030e:	d908      	bls.n	8000322 <__udivmoddi4+0xc2>
 8000310:	2e00      	cmp	r6, #0
 8000312:	f000 80ee 	beq.w	80004f2 <__udivmoddi4+0x292>
 8000316:	2100      	movs	r1, #0
 8000318:	e9c6 0500 	strd	r0, r5, [r6]
 800031c:	4608      	mov	r0, r1
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d14a      	bne.n	80003c0 <__udivmoddi4+0x160>
 800032a:	42ab      	cmp	r3, r5
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xd4>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80f9 	bhi.w	8000526 <__udivmoddi4+0x2c6>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb65 0303 	sbc.w	r3, r5, r3
 800033a:	2001      	movs	r0, #1
 800033c:	4698      	mov	r8, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d0e2      	beq.n	8000308 <__udivmoddi4+0xa8>
 8000342:	e9c6 4800 	strd	r4, r8, [r6]
 8000346:	e7df      	b.n	8000308 <__udivmoddi4+0xa8>
 8000348:	b902      	cbnz	r2, 800034c <__udivmoddi4+0xec>
 800034a:	deff      	udf	#255	; 0xff
 800034c:	fab2 f282 	clz	r2, r2
 8000350:	2a00      	cmp	r2, #0
 8000352:	f040 8091 	bne.w	8000478 <__udivmoddi4+0x218>
 8000356:	eba1 050c 	sub.w	r5, r1, ip
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2101      	movs	r1, #1
 8000364:	fbb5 f3f7 	udiv	r3, r5, r7
 8000368:	fb07 5013 	mls	r0, r7, r3, r5
 800036c:	0c25      	lsrs	r5, r4, #16
 800036e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000372:	fb0e f003 	mul.w	r0, lr, r3
 8000376:	42a8      	cmp	r0, r5
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x12c>
 800037a:	eb1c 0505 	adds.w	r5, ip, r5
 800037e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x12a>
 8000384:	42a8      	cmp	r0, r5
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2c0>
 800038a:	4643      	mov	r3, r8
 800038c:	1a2d      	subs	r5, r5, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb5 f0f7 	udiv	r0, r5, r7
 8000394:	fb07 5510 	mls	r5, r7, r0, r5
 8000398:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x156>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 35ff 	add.w	r5, r0, #4294967295
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x154>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2ca>
 80003b4:	4628      	mov	r0, r5
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003be:	e79e      	b.n	80002fe <__udivmoddi4+0x9e>
 80003c0:	f1c1 0720 	rsb	r7, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa20 f407 	lsr.w	r4, r0, r7
 80003d2:	fa05 f301 	lsl.w	r3, r5, r1
 80003d6:	431c      	orrs	r4, r3
 80003d8:	40fd      	lsrs	r5, r7
 80003da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003de:	fa00 f301 	lsl.w	r3, r0, r1
 80003e2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003e6:	0c20      	lsrs	r0, r4, #16
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	fb09 5518 	mls	r5, r9, r8, r5
 80003f0:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 80003f4:	fb08 f00e 	mul.w	r0, r8, lr
 80003f8:	42a8      	cmp	r0, r5
 80003fa:	fa02 f201 	lsl.w	r2, r2, r1
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b8>
 8000400:	eb1c 0505 	adds.w	r5, ip, r5
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2bc>
 800040c:	42a8      	cmp	r0, r5
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2bc>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4465      	add	r5, ip
 8000418:	1a2d      	subs	r5, r5, r0
 800041a:	b2a4      	uxth	r4, r4
 800041c:	fbb5 f0f9 	udiv	r0, r5, r9
 8000420:	fb09 5510 	mls	r5, r9, r0, r5
 8000424:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000428:	fb00 fe0e 	mul.w	lr, r0, lr
 800042c:	45ae      	cmp	lr, r5
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1e2>
 8000430:	eb1c 0505 	adds.w	r5, ip, r5
 8000434:	f100 34ff 	add.w	r4, r0, #4294967295
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2b4>
 800043a:	45ae      	cmp	lr, r5
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2b4>
 800043e:	3802      	subs	r0, #2
 8000440:	4465      	add	r5, ip
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	fba0 9402 	umull	r9, r4, r0, r2
 800044a:	eba5 050e 	sub.w	r5, r5, lr
 800044e:	42a5      	cmp	r5, r4
 8000450:	46c8      	mov	r8, r9
 8000452:	46a6      	mov	lr, r4
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x2a4>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x2a0>
 8000458:	b15e      	cbz	r6, 8000472 <__udivmoddi4+0x212>
 800045a:	ebb3 0208 	subs.w	r2, r3, r8
 800045e:	eb65 050e 	sbc.w	r5, r5, lr
 8000462:	fa05 f707 	lsl.w	r7, r5, r7
 8000466:	fa22 f301 	lsr.w	r3, r2, r1
 800046a:	40cd      	lsrs	r5, r1
 800046c:	431f      	orrs	r7, r3
 800046e:	e9c6 7500 	strd	r7, r5, [r6]
 8000472:	2100      	movs	r1, #0
 8000474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f103 	lsr.w	r1, r0, r3
 8000480:	fa0c fc02 	lsl.w	ip, ip, r2
 8000484:	fa25 f303 	lsr.w	r3, r5, r3
 8000488:	4095      	lsls	r5, r2
 800048a:	430d      	orrs	r5, r1
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb3 f1f7 	udiv	r1, r3, r7
 8000498:	fb07 3011 	mls	r0, r7, r1, r3
 800049c:	0c2b      	lsrs	r3, r5, #16
 800049e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80004a2:	fb01 f00e 	mul.w	r0, r1, lr
 80004a6:	4298      	cmp	r0, r3
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x260>
 80004ae:	eb1c 0303 	adds.w	r3, ip, r3
 80004b2:	f101 38ff 	add.w	r8, r1, #4294967295
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b8>
 80004b8:	4298      	cmp	r0, r3
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b8>
 80004bc:	3902      	subs	r1, #2
 80004be:	4463      	add	r3, ip
 80004c0:	1a1b      	subs	r3, r3, r0
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004c8:	fb07 3310 	mls	r3, r7, r0, r3
 80004cc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004d0:	fb00 f30e 	mul.w	r3, r0, lr
 80004d4:	42ab      	cmp	r3, r5
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x28a>
 80004d8:	eb1c 0505 	adds.w	r5, ip, r5
 80004dc:	f100 38ff 	add.w	r8, r0, #4294967295
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004e2:	42ab      	cmp	r3, r5
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4465      	add	r5, ip
 80004ea:	1aed      	subs	r5, r5, r3
 80004ec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0x104>
 80004f2:	4631      	mov	r1, r6
 80004f4:	4630      	mov	r0, r6
 80004f6:	e707      	b.n	8000308 <__udivmoddi4+0xa8>
 80004f8:	4686      	mov	lr, r0
 80004fa:	e6e5      	b.n	80002c8 <__udivmoddi4+0x68>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e6fa      	b.n	80002f6 <__udivmoddi4+0x96>
 8000500:	454b      	cmp	r3, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f8>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb64 0e0c 	sbc.w	lr, r4, ip
 800050c:	3801      	subs	r0, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f8>
 8000510:	4640      	mov	r0, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x28a>
 8000514:	4620      	mov	r0, r4
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1e2>
 8000518:	4641      	mov	r1, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x260>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b8>
 8000520:	3b02      	subs	r3, #2
 8000522:	4465      	add	r5, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x12c>
 8000526:	4608      	mov	r0, r1
 8000528:	e709      	b.n	800033e <__udivmoddi4+0xde>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x156>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr

08000540 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000540:	b480      	push	{r7}
 8000542:	b085      	sub	sp, #20
 8000544:	af00      	add	r7, sp, #0
 8000546:	60f8      	str	r0, [r7, #12]
 8000548:	60b9      	str	r1, [r7, #8]
 800054a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	4a06      	ldr	r2, [pc, #24]	; (8000568 <vApplicationGetIdleTaskMemory+0x28>)
 8000550:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000552:	68bb      	ldr	r3, [r7, #8]
 8000554:	4a05      	ldr	r2, [pc, #20]	; (800056c <vApplicationGetIdleTaskMemory+0x2c>)
 8000556:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	2280      	movs	r2, #128	; 0x80
 800055c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800055e:	bf00      	nop
 8000560:	3714      	adds	r7, #20
 8000562:	46bd      	mov	sp, r7
 8000564:	bc80      	pop	{r7}
 8000566:	4770      	bx	lr
 8000568:	20000090 	.word	0x20000090
 800056c:	20000144 	.word	0x20000144

08000570 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	4a07      	ldr	r2, [pc, #28]	; (800059c <vApplicationGetTimerTaskMemory+0x2c>)
 8000580:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000582:	68bb      	ldr	r3, [r7, #8]
 8000584:	4a06      	ldr	r2, [pc, #24]	; (80005a0 <vApplicationGetTimerTaskMemory+0x30>)
 8000586:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800058e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000590:	bf00      	nop
 8000592:	3714      	adds	r7, #20
 8000594:	46bd      	mov	sp, r7
 8000596:	bc80      	pop	{r7}
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	20000344 	.word	0x20000344
 80005a0:	200003f8 	.word	0x200003f8

080005a4 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80005ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005b4:	f023 0218 	bic.w	r2, r3, #24
 80005b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	4313      	orrs	r3, r2
 80005c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80005c4:	bf00      	nop
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bc80      	pop	{r7}
 80005cc:	4770      	bx	lr

080005ce <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005ce:	b480      	push	{r7}
 80005d0:	b085      	sub	sp, #20
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80005d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	4313      	orrs	r3, r2
 80005e4:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80005e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4013      	ands	r3, r2
 80005f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005f2:	68fb      	ldr	r3, [r7, #12]
}
 80005f4:	bf00      	nop
 80005f6:	3714      	adds	r7, #20
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bc80      	pop	{r7}
 80005fc:	4770      	bx	lr
	...

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b5b0      	push	{r4, r5, r7, lr}
 8000602:	b094      	sub	sp, #80	; 0x50
 8000604:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000606:	f000 fed7 	bl	80013b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060a:	f000 f871 	bl	80006f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060e:	f000 fac9 	bl	8000ba4 <MX_GPIO_Init>
  MX_ADC_Init();
 8000612:	f000 f8cf 	bl	80007b4 <MX_ADC_Init>
  MX_LPUART1_UART_Init();
 8000616:	f000 f95b 	bl	80008d0 <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 800061a:	f000 f9a3 	bl	8000964 <MX_USART2_UART_Init>
  MX_RTC_Init();
 800061e:	f000 f9ed 	bl	80009fc <MX_RTC_Init>
  MX_SPI2_Init();
 8000622:	f000 fa81 	bl	8000b28 <MX_SPI2_Init>
  MX_I2C2_Init();
 8000626:	f000 f913 	bl	8000850 <MX_I2C2_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of UartMutex */
  osMutexDef(UartMutex);
 800062a:	2300      	movs	r3, #0
 800062c:	64bb      	str	r3, [r7, #72]	; 0x48
 800062e:	2300      	movs	r3, #0
 8000630:	64fb      	str	r3, [r7, #76]	; 0x4c
  UartMutexHandle = osMutexCreate(osMutex(UartMutex));
 8000632:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000636:	4618      	mov	r0, r3
 8000638:	f006 f98e 	bl	8006958 <osMutexCreate>
 800063c:	4603      	mov	r3, r0
 800063e:	4a24      	ldr	r2, [pc, #144]	; (80006d0 <main+0xd0>)
 8000640:	6013      	str	r3, [r2, #0]

  /* definition and creation of SpiMutex */
  osMutexDef(SpiMutex);
 8000642:	2300      	movs	r3, #0
 8000644:	643b      	str	r3, [r7, #64]	; 0x40
 8000646:	2300      	movs	r3, #0
 8000648:	647b      	str	r3, [r7, #68]	; 0x44
  SpiMutexHandle = osMutexCreate(osMutex(SpiMutex));
 800064a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800064e:	4618      	mov	r0, r3
 8000650:	f006 f982 	bl	8006958 <osMutexCreate>
 8000654:	4603      	mov	r3, r0
 8000656:	4a1f      	ldr	r2, [pc, #124]	; (80006d4 <main+0xd4>)
 8000658:	6013      	str	r3, [r2, #0]

  /* definition and creation of I2cMutex */
  osMutexDef(I2cMutex);
 800065a:	2300      	movs	r3, #0
 800065c:	63bb      	str	r3, [r7, #56]	; 0x38
 800065e:	2300      	movs	r3, #0
 8000660:	63fb      	str	r3, [r7, #60]	; 0x3c
  I2cMutexHandle = osMutexCreate(osMutex(I2cMutex));
 8000662:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000666:	4618      	mov	r0, r3
 8000668:	f006 f976 	bl	8006958 <osMutexCreate>
 800066c:	4603      	mov	r3, r0
 800066e:	4a1a      	ldr	r2, [pc, #104]	; (80006d8 <main+0xd8>)
 8000670:	6013      	str	r3, [r2, #0]

  /* definition and creation of RtcMutex */
  osMutexDef(RtcMutex);
 8000672:	2300      	movs	r3, #0
 8000674:	633b      	str	r3, [r7, #48]	; 0x30
 8000676:	2300      	movs	r3, #0
 8000678:	637b      	str	r3, [r7, #52]	; 0x34
  RtcMutexHandle = osMutexCreate(osMutex(RtcMutex));
 800067a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800067e:	4618      	mov	r0, r3
 8000680:	f006 f96a 	bl	8006958 <osMutexCreate>
 8000684:	4603      	mov	r3, r0
 8000686:	4a15      	ldr	r2, [pc, #84]	; (80006dc <main+0xdc>)
 8000688:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of xQueue1 */
  osMessageQDef(xQueue1, 100, uint16_t);
 800068a:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <main+0xe0>)
 800068c:	f107 0420 	add.w	r4, r7, #32
 8000690:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000692:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  xQueue1Handle = osMessageCreate(osMessageQ(xQueue1), NULL);
 8000696:	f107 0320 	add.w	r3, r7, #32
 800069a:	2100      	movs	r1, #0
 800069c:	4618      	mov	r0, r3
 800069e:	f006 f973 	bl	8006988 <osMessageCreate>
 80006a2:	4603      	mov	r3, r0
 80006a4:	4a0f      	ldr	r2, [pc, #60]	; (80006e4 <main+0xe4>)
 80006a6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of terminalTask */
  osThreadDef(terminalTask, terminalTaskHandler, osPriorityNormal, 0, 128);
 80006a8:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <main+0xe8>)
 80006aa:	1d3c      	adds	r4, r7, #4
 80006ac:	461d      	mov	r5, r3
 80006ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  terminalTaskHandle = osThreadCreate(osThread(terminalTask), NULL);
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f006 f8ea 	bl	8006898 <osThreadCreate>
 80006c4:	4603      	mov	r3, r0
 80006c6:	4a09      	ldr	r2, [pc, #36]	; (80006ec <main+0xec>)
 80006c8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006ca:	f006 f8de 	bl	800688a <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006ce:	e7fe      	b.n	80006ce <main+0xce>
 80006d0:	20000a7c 	.word	0x20000a7c
 80006d4:	20000a80 	.word	0x20000a80
 80006d8:	20000a84 	.word	0x20000a84
 80006dc:	20000a88 	.word	0x20000a88
 80006e0:	0800a880 	.word	0x0800a880
 80006e4:	20000a78 	.word	0x20000a78
 80006e8:	0800a890 	.word	0x0800a890
 80006ec:	20000a74 	.word	0x20000a74

080006f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b09a      	sub	sp, #104	; 0x68
 80006f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f6:	f107 0320 	add.w	r3, r7, #32
 80006fa:	2248      	movs	r2, #72	; 0x48
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f008 feed 	bl	80094de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000704:	f107 0308 	add.w	r3, r7, #8
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
 8000712:	611a      	str	r2, [r3, #16]
 8000714:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000716:	f001 fcd5 	bl	80020c4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800071a:	2000      	movs	r0, #0
 800071c:	f7ff ff42 	bl	80005a4 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000720:	4b23      	ldr	r3, [pc, #140]	; (80007b0 <SystemClock_Config+0xc0>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000728:	4a21      	ldr	r2, [pc, #132]	; (80007b0 <SystemClock_Config+0xc0>)
 800072a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800072e:	6013      	str	r3, [r2, #0]
 8000730:	4b1f      	ldr	r3, [pc, #124]	; (80007b0 <SystemClock_Config+0xc0>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 800073c:	232e      	movs	r3, #46	; 0x2e
 800073e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000740:	2381      	movs	r3, #129	; 0x81
 8000742:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000744:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000748:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800074a:	2301      	movs	r3, #1
 800074c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800074e:	2340      	movs	r3, #64	; 0x40
 8000750:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000752:	2300      	movs	r3, #0
 8000754:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000756:	23b0      	movs	r3, #176	; 0xb0
 8000758:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 800075a:	2300      	movs	r3, #0
 800075c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800075e:	2301      	movs	r3, #1
 8000760:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000762:	2300      	movs	r3, #0
 8000764:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000766:	f107 0320 	add.w	r3, r7, #32
 800076a:	4618      	mov	r0, r3
 800076c:	f001 ff54 	bl	8002618 <HAL_RCC_OscConfig>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000776:	f000 fa7b 	bl	8000c70 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 800077a:	234f      	movs	r3, #79	; 0x4f
 800077c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800077e:	2300      	movs	r3, #0
 8000780:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000782:	2300      	movs	r3, #0
 8000784:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000786:	2300      	movs	r3, #0
 8000788:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800078a:	2300      	movs	r3, #0
 800078c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800078e:	2300      	movs	r3, #0
 8000790:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000792:	f107 0308 	add.w	r3, r7, #8
 8000796:	2102      	movs	r1, #2
 8000798:	4618      	mov	r0, r3
 800079a:	f002 fabf 	bl	8002d1c <HAL_RCC_ClockConfig>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80007a4:	f000 fa64 	bl	8000c70 <Error_Handler>
  }
}
 80007a8:	bf00      	nop
 80007aa:	3768      	adds	r7, #104	; 0x68
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	58000400 	.word	0x58000400

080007b4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 80007b8:	4b23      	ldr	r3, [pc, #140]	; (8000848 <MX_ADC_Init+0x94>)
 80007ba:	4a24      	ldr	r2, [pc, #144]	; (800084c <MX_ADC_Init+0x98>)
 80007bc:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80007be:	4b22      	ldr	r3, [pc, #136]	; (8000848 <MX_ADC_Init+0x94>)
 80007c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007c4:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80007c6:	4b20      	ldr	r3, [pc, #128]	; (8000848 <MX_ADC_Init+0x94>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007cc:	4b1e      	ldr	r3, [pc, #120]	; (8000848 <MX_ADC_Init+0x94>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007d2:	4b1d      	ldr	r3, [pc, #116]	; (8000848 <MX_ADC_Init+0x94>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007d8:	4b1b      	ldr	r3, [pc, #108]	; (8000848 <MX_ADC_Init+0x94>)
 80007da:	2204      	movs	r2, #4
 80007dc:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80007de:	4b1a      	ldr	r3, [pc, #104]	; (8000848 <MX_ADC_Init+0x94>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80007e4:	4b18      	ldr	r3, [pc, #96]	; (8000848 <MX_ADC_Init+0x94>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80007ea:	4b17      	ldr	r3, [pc, #92]	; (8000848 <MX_ADC_Init+0x94>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 80007f0:	4b15      	ldr	r3, [pc, #84]	; (8000848 <MX_ADC_Init+0x94>)
 80007f2:	2201      	movs	r2, #1
 80007f4:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80007f6:	4b14      	ldr	r3, [pc, #80]	; (8000848 <MX_ADC_Init+0x94>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007fe:	4b12      	ldr	r3, [pc, #72]	; (8000848 <MX_ADC_Init+0x94>)
 8000800:	2200      	movs	r2, #0
 8000802:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000804:	4b10      	ldr	r3, [pc, #64]	; (8000848 <MX_ADC_Init+0x94>)
 8000806:	2200      	movs	r2, #0
 8000808:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 800080a:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <MX_ADC_Init+0x94>)
 800080c:	2200      	movs	r2, #0
 800080e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000812:	4b0d      	ldr	r3, [pc, #52]	; (8000848 <MX_ADC_Init+0x94>)
 8000814:	2200      	movs	r2, #0
 8000816:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000818:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <MX_ADC_Init+0x94>)
 800081a:	2200      	movs	r2, #0
 800081c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800081e:	4b0a      	ldr	r3, [pc, #40]	; (8000848 <MX_ADC_Init+0x94>)
 8000820:	2200      	movs	r2, #0
 8000822:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8000824:	4b08      	ldr	r3, [pc, #32]	; (8000848 <MX_ADC_Init+0x94>)
 8000826:	2200      	movs	r2, #0
 8000828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <MX_ADC_Init+0x94>)
 800082e:	2200      	movs	r2, #0
 8000830:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000832:	4805      	ldr	r0, [pc, #20]	; (8000848 <MX_ADC_Init+0x94>)
 8000834:	f000 fe7c 	bl	8001530 <HAL_ADC_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_ADC_Init+0x8e>
  {
    Error_Handler();
 800083e:	f000 fa17 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	200007f8 	.word	0x200007f8
 800084c:	40012400 	.word	0x40012400

08000850 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000854:	4b1b      	ldr	r3, [pc, #108]	; (80008c4 <MX_I2C2_Init+0x74>)
 8000856:	4a1c      	ldr	r2, [pc, #112]	; (80008c8 <MX_I2C2_Init+0x78>)
 8000858:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 800085a:	4b1a      	ldr	r3, [pc, #104]	; (80008c4 <MX_I2C2_Init+0x74>)
 800085c:	4a1b      	ldr	r2, [pc, #108]	; (80008cc <MX_I2C2_Init+0x7c>)
 800085e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000860:	4b18      	ldr	r3, [pc, #96]	; (80008c4 <MX_I2C2_Init+0x74>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000866:	4b17      	ldr	r3, [pc, #92]	; (80008c4 <MX_I2C2_Init+0x74>)
 8000868:	2201      	movs	r2, #1
 800086a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800086c:	4b15      	ldr	r3, [pc, #84]	; (80008c4 <MX_I2C2_Init+0x74>)
 800086e:	2200      	movs	r2, #0
 8000870:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000872:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <MX_I2C2_Init+0x74>)
 8000874:	2200      	movs	r2, #0
 8000876:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000878:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <MX_I2C2_Init+0x74>)
 800087a:	2200      	movs	r2, #0
 800087c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800087e:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <MX_I2C2_Init+0x74>)
 8000880:	2200      	movs	r2, #0
 8000882:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000884:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <MX_I2C2_Init+0x74>)
 8000886:	2200      	movs	r2, #0
 8000888:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800088a:	480e      	ldr	r0, [pc, #56]	; (80008c4 <MX_I2C2_Init+0x74>)
 800088c:	f001 faf5 	bl	8001e7a <HAL_I2C_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000896:	f000 f9eb 	bl	8000c70 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800089a:	2100      	movs	r1, #0
 800089c:	4809      	ldr	r0, [pc, #36]	; (80008c4 <MX_I2C2_Init+0x74>)
 800089e:	f001 fb7b 	bl	8001f98 <HAL_I2CEx_ConfigAnalogFilter>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80008a8:	f000 f9e2 	bl	8000c70 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008ac:	2100      	movs	r1, #0
 80008ae:	4805      	ldr	r0, [pc, #20]	; (80008c4 <MX_I2C2_Init+0x74>)
 80008b0:	f001 fbbc 	bl	800202c <HAL_I2CEx_ConfigDigitalFilter>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80008ba:	f000 f9d9 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	2000085c 	.word	0x2000085c
 80008c8:	40005800 	.word	0x40005800
 80008cc:	20303e5d 	.word	0x20303e5d

080008d0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80008d4:	4b20      	ldr	r3, [pc, #128]	; (8000958 <MX_LPUART1_UART_Init+0x88>)
 80008d6:	4a21      	ldr	r2, [pc, #132]	; (800095c <MX_LPUART1_UART_Init+0x8c>)
 80008d8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80008da:	4b1f      	ldr	r3, [pc, #124]	; (8000958 <MX_LPUART1_UART_Init+0x88>)
 80008dc:	4a20      	ldr	r2, [pc, #128]	; (8000960 <MX_LPUART1_UART_Init+0x90>)
 80008de:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008e0:	4b1d      	ldr	r3, [pc, #116]	; (8000958 <MX_LPUART1_UART_Init+0x88>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80008e6:	4b1c      	ldr	r3, [pc, #112]	; (8000958 <MX_LPUART1_UART_Init+0x88>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80008ec:	4b1a      	ldr	r3, [pc, #104]	; (8000958 <MX_LPUART1_UART_Init+0x88>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80008f2:	4b19      	ldr	r3, [pc, #100]	; (8000958 <MX_LPUART1_UART_Init+0x88>)
 80008f4:	220c      	movs	r2, #12
 80008f6:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008f8:	4b17      	ldr	r3, [pc, #92]	; (8000958 <MX_LPUART1_UART_Init+0x88>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008fe:	4b16      	ldr	r3, [pc, #88]	; (8000958 <MX_LPUART1_UART_Init+0x88>)
 8000900:	2200      	movs	r2, #0
 8000902:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000904:	4b14      	ldr	r3, [pc, #80]	; (8000958 <MX_LPUART1_UART_Init+0x88>)
 8000906:	2200      	movs	r2, #0
 8000908:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800090a:	4b13      	ldr	r3, [pc, #76]	; (8000958 <MX_LPUART1_UART_Init+0x88>)
 800090c:	2200      	movs	r2, #0
 800090e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&hlpuart1) != HAL_OK)
 8000910:	4811      	ldr	r0, [pc, #68]	; (8000958 <MX_LPUART1_UART_Init+0x88>)
 8000912:	f003 fe0d 	bl	8004530 <HAL_HalfDuplex_Init>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 800091c:	f000 f9a8 	bl	8000c70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000920:	2100      	movs	r1, #0
 8000922:	480d      	ldr	r0, [pc, #52]	; (8000958 <MX_LPUART1_UART_Init+0x88>)
 8000924:	f005 fdd1 	bl	80064ca <HAL_UARTEx_SetTxFifoThreshold>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 800092e:	f000 f99f 	bl	8000c70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000932:	2100      	movs	r1, #0
 8000934:	4808      	ldr	r0, [pc, #32]	; (8000958 <MX_LPUART1_UART_Init+0x88>)
 8000936:	f005 fe06 	bl	8006546 <HAL_UARTEx_SetRxFifoThreshold>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8000940:	f000 f996 	bl	8000c70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000944:	4804      	ldr	r0, [pc, #16]	; (8000958 <MX_LPUART1_UART_Init+0x88>)
 8000946:	f005 fd88 	bl	800645a <HAL_UARTEx_DisableFifoMode>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8000950:	f000 f98e 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}
 8000958:	200008b0 	.word	0x200008b0
 800095c:	40008000 	.word	0x40008000
 8000960:	00033324 	.word	0x00033324

08000964 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000968:	4b22      	ldr	r3, [pc, #136]	; (80009f4 <MX_USART2_UART_Init+0x90>)
 800096a:	4a23      	ldr	r2, [pc, #140]	; (80009f8 <MX_USART2_UART_Init+0x94>)
 800096c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800096e:	4b21      	ldr	r3, [pc, #132]	; (80009f4 <MX_USART2_UART_Init+0x90>)
 8000970:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000974:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000976:	4b1f      	ldr	r3, [pc, #124]	; (80009f4 <MX_USART2_UART_Init+0x90>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800097c:	4b1d      	ldr	r3, [pc, #116]	; (80009f4 <MX_USART2_UART_Init+0x90>)
 800097e:	2200      	movs	r2, #0
 8000980:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000982:	4b1c      	ldr	r3, [pc, #112]	; (80009f4 <MX_USART2_UART_Init+0x90>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000988:	4b1a      	ldr	r3, [pc, #104]	; (80009f4 <MX_USART2_UART_Init+0x90>)
 800098a:	220c      	movs	r2, #12
 800098c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800098e:	4b19      	ldr	r3, [pc, #100]	; (80009f4 <MX_USART2_UART_Init+0x90>)
 8000990:	2200      	movs	r2, #0
 8000992:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000994:	4b17      	ldr	r3, [pc, #92]	; (80009f4 <MX_USART2_UART_Init+0x90>)
 8000996:	2200      	movs	r2, #0
 8000998:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800099a:	4b16      	ldr	r3, [pc, #88]	; (80009f4 <MX_USART2_UART_Init+0x90>)
 800099c:	2200      	movs	r2, #0
 800099e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009a0:	4b14      	ldr	r3, [pc, #80]	; (80009f4 <MX_USART2_UART_Init+0x90>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009a6:	4b13      	ldr	r3, [pc, #76]	; (80009f4 <MX_USART2_UART_Init+0x90>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009ac:	4811      	ldr	r0, [pc, #68]	; (80009f4 <MX_USART2_UART_Init+0x90>)
 80009ae:	f003 fd6f 	bl	8004490 <HAL_UART_Init>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80009b8:	f000 f95a 	bl	8000c70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009bc:	2100      	movs	r1, #0
 80009be:	480d      	ldr	r0, [pc, #52]	; (80009f4 <MX_USART2_UART_Init+0x90>)
 80009c0:	f005 fd83 	bl	80064ca <HAL_UARTEx_SetTxFifoThreshold>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80009ca:	f000 f951 	bl	8000c70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ce:	2100      	movs	r1, #0
 80009d0:	4808      	ldr	r0, [pc, #32]	; (80009f4 <MX_USART2_UART_Init+0x90>)
 80009d2:	f005 fdb8 	bl	8006546 <HAL_UARTEx_SetRxFifoThreshold>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80009dc:	f000 f948 	bl	8000c70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80009e0:	4804      	ldr	r0, [pc, #16]	; (80009f4 <MX_USART2_UART_Init+0x90>)
 80009e2:	f005 fd3a 	bl	800645a <HAL_UARTEx_DisableFifoMode>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80009ec:	f000 f940 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	20000944 	.word	0x20000944
 80009f8:	40004400 	.word	0x40004400

080009fc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b092      	sub	sp, #72	; 0x48
 8000a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000a02:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]
 8000a0c:	609a      	str	r2, [r3, #8]
 8000a0e:	60da      	str	r2, [r3, #12]
 8000a10:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000a12:	2300      	movs	r3, #0
 8000a14:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	222c      	movs	r2, #44	; 0x2c
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f008 fd5e 	bl	80094de <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a22:	4b3f      	ldr	r3, [pc, #252]	; (8000b20 <MX_RTC_Init+0x124>)
 8000a24:	4a3f      	ldr	r2, [pc, #252]	; (8000b24 <MX_RTC_Init+0x128>)
 8000a26:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a28:	4b3d      	ldr	r3, [pc, #244]	; (8000b20 <MX_RTC_Init+0x124>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a2e:	4b3c      	ldr	r3, [pc, #240]	; (8000b20 <MX_RTC_Init+0x124>)
 8000a30:	227f      	movs	r2, #127	; 0x7f
 8000a32:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a34:	4b3a      	ldr	r3, [pc, #232]	; (8000b20 <MX_RTC_Init+0x124>)
 8000a36:	22ff      	movs	r2, #255	; 0xff
 8000a38:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a3a:	4b39      	ldr	r3, [pc, #228]	; (8000b20 <MX_RTC_Init+0x124>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000a40:	4b37      	ldr	r3, [pc, #220]	; (8000b20 <MX_RTC_Init+0x124>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a46:	4b36      	ldr	r3, [pc, #216]	; (8000b20 <MX_RTC_Init+0x124>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a4c:	4b34      	ldr	r3, [pc, #208]	; (8000b20 <MX_RTC_Init+0x124>)
 8000a4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a52:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000a54:	4b32      	ldr	r3, [pc, #200]	; (8000b20 <MX_RTC_Init+0x124>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8000a5a:	4b31      	ldr	r3, [pc, #196]	; (8000b20 <MX_RTC_Init+0x124>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a60:	482f      	ldr	r0, [pc, #188]	; (8000b20 <MX_RTC_Init+0x124>)
 8000a62:	f002 fe55 	bl	8003710 <HAL_RTC_Init>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8000a6c:	f000 f900 	bl	8000c70 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000a70:	2300      	movs	r3, #0
 8000a72:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000a82:	2300      	movs	r3, #0
 8000a84:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000a86:	2300      	movs	r3, #0
 8000a88:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000a8a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a8e:	2201      	movs	r2, #1
 8000a90:	4619      	mov	r1, r3
 8000a92:	4823      	ldr	r0, [pc, #140]	; (8000b20 <MX_RTC_Init+0x124>)
 8000a94:	f002 febe 	bl	8003814 <HAL_RTC_SetTime>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_RTC_Init+0xa6>
  {
    Error_Handler();
 8000a9e:	f000 f8e7 	bl	8000c70 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x1;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000aba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000abe:	2201      	movs	r2, #1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4817      	ldr	r0, [pc, #92]	; (8000b20 <MX_RTC_Init+0x124>)
 8000ac4:	f002 ff42 	bl	800394c <HAL_RTC_SetDate>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_RTC_Init+0xd6>
  {
    Error_Handler();
 8000ace:	f000 f8cf 	bl	8000c70 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000ada:	2300      	movs	r3, #0
 8000adc:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000aea:	2300      	movs	r3, #0
 8000aec:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000af2:	2300      	movs	r3, #0
 8000af4:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 8000af6:	2301      	movs	r3, #1
 8000af8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8000afc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b00:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000b02:	1d3b      	adds	r3, r7, #4
 8000b04:	2201      	movs	r2, #1
 8000b06:	4619      	mov	r1, r3
 8000b08:	4805      	ldr	r0, [pc, #20]	; (8000b20 <MX_RTC_Init+0x124>)
 8000b0a:	f002 ffa5 	bl	8003a58 <HAL_RTC_SetAlarm>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_RTC_Init+0x11c>
  {
    Error_Handler();
 8000b14:	f000 f8ac 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b18:	bf00      	nop
 8000b1a:	3748      	adds	r7, #72	; 0x48
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	200009d8 	.word	0x200009d8
 8000b24:	40002800 	.word	0x40002800

08000b28 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000b2c:	4b1b      	ldr	r3, [pc, #108]	; (8000b9c <MX_SPI2_Init+0x74>)
 8000b2e:	4a1c      	ldr	r2, [pc, #112]	; (8000ba0 <MX_SPI2_Init+0x78>)
 8000b30:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b32:	4b1a      	ldr	r3, [pc, #104]	; (8000b9c <MX_SPI2_Init+0x74>)
 8000b34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b38:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b3a:	4b18      	ldr	r3, [pc, #96]	; (8000b9c <MX_SPI2_Init+0x74>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000b40:	4b16      	ldr	r3, [pc, #88]	; (8000b9c <MX_SPI2_Init+0x74>)
 8000b42:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000b46:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b48:	4b14      	ldr	r3, [pc, #80]	; (8000b9c <MX_SPI2_Init+0x74>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b4e:	4b13      	ldr	r3, [pc, #76]	; (8000b9c <MX_SPI2_Init+0x74>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b54:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <MX_SPI2_Init+0x74>)
 8000b56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b5a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <MX_SPI2_Init+0x74>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b62:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <MX_SPI2_Init+0x74>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b68:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <MX_SPI2_Init+0x74>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b6e:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <MX_SPI2_Init+0x74>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000b74:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <MX_SPI2_Init+0x74>)
 8000b76:	2207      	movs	r2, #7
 8000b78:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b7a:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <MX_SPI2_Init+0x74>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <MX_SPI2_Init+0x74>)
 8000b82:	2208      	movs	r2, #8
 8000b84:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b86:	4805      	ldr	r0, [pc, #20]	; (8000b9c <MX_SPI2_Init+0x74>)
 8000b88:	f003 f91f 	bl	8003dca <HAL_SPI_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000b92:	f000 f86d 	bl	8000c70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000a10 	.word	0x20000a10
 8000ba0:	40003800 	.word	0x40003800

08000ba4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b086      	sub	sp, #24
 8000ba8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000baa:	1d3b      	adds	r3, r7, #4
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb8:	2001      	movs	r0, #1
 8000bba:	f7ff fd08 	bl	80005ce <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bbe:	2002      	movs	r0, #2
 8000bc0:	f7ff fd05 	bl	80005ce <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc4:	2004      	movs	r0, #4
 8000bc6:	f7ff fd02 	bl	80005ce <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ADC_SW_Pin|MB_OC_Pin|LED_Pin, GPIO_PIN_RESET);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	21e0      	movs	r1, #224	; 0xe0
 8000bce:	4813      	ldr	r0, [pc, #76]	; (8000c1c <MX_GPIO_Init+0x78>)
 8000bd0:	f001 f93c 	bl	8001e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MB_CTL_GPIO_Port, MB_CTL_Pin, GPIO_PIN_RESET);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2101      	movs	r1, #1
 8000bd8:	4811      	ldr	r0, [pc, #68]	; (8000c20 <MX_GPIO_Init+0x7c>)
 8000bda:	f001 f937 	bl	8001e4c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADC_SW_Pin MB_OC_Pin LED_Pin */
  GPIO_InitStruct.Pin = ADC_SW_Pin|MB_OC_Pin|LED_Pin;
 8000bde:	23e0      	movs	r3, #224	; 0xe0
 8000be0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be2:	2301      	movs	r3, #1
 8000be4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bea:	2300      	movs	r3, #0
 8000bec:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	480a      	ldr	r0, [pc, #40]	; (8000c1c <MX_GPIO_Init+0x78>)
 8000bf4:	f000 ffca 	bl	8001b8c <HAL_GPIO_Init>

  /*Configure GPIO pin : MB_CTL_Pin */
  GPIO_InitStruct.Pin = MB_CTL_Pin;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c04:	2300      	movs	r3, #0
 8000c06:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(MB_CTL_GPIO_Port, &GPIO_InitStruct);
 8000c08:	1d3b      	adds	r3, r7, #4
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4804      	ldr	r0, [pc, #16]	; (8000c20 <MX_GPIO_Init+0x7c>)
 8000c0e:	f000 ffbd 	bl	8001b8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c12:	bf00      	nop
 8000c14:	3718      	adds	r7, #24
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	48000400 	.word	0x48000400
 8000c20:	48000800 	.word	0x48000800

08000c24 <Get_DebugHandle>:
  osDelay(Delay);
}


UART_HandleTypeDef *Get_DebugHandle(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  return &huart2;
 8000c28:	4b02      	ldr	r3, [pc, #8]	; (8000c34 <Get_DebugHandle+0x10>)
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bc80      	pop	{r7}
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	20000944 	.word	0x20000944

08000c38 <Get_TerminalQueueHandle>:




osMessageQId Get_TerminalQueueHandle(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  return xQueue1Handle;;
 8000c3c:	4b02      	ldr	r3, [pc, #8]	; (8000c48 <Get_TerminalQueueHandle+0x10>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bc80      	pop	{r7}
 8000c46:	4770      	bx	lr
 8000c48:	20000a78 	.word	0x20000a78

08000c4c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a04      	ldr	r2, [pc, #16]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d101      	bne.n	8000c62 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c5e:	f000 fbcb 	bl	80013f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40012c00 	.word	0x40012c00

08000c70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c74:	b672      	cpsid	i
}
 8000c76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c78:	e7fe      	b.n	8000c78 <Error_Handler+0x8>

08000c7a <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000c7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000c8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000c92:	bf00      	nop
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bc80      	pop	{r7}
 8000c98:	4770      	bx	lr

08000c9a <LL_AHB2_GRP1_EnableClock>:
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	b085      	sub	sp, #20
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000ca2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ca6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ca8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000cb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	4013      	ands	r3, r2
 8000cbc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
}
 8000cc0:	bf00      	nop
 8000cc2:	3714      	adds	r7, #20
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bc80      	pop	{r7}
 8000cc8:	4770      	bx	lr

08000cca <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	b085      	sub	sp, #20
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000cd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cd6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000cd8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000ce2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ce6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	4013      	ands	r3, r2
 8000cec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cee:	68fb      	ldr	r3, [r7, #12]
}
 8000cf0:	bf00      	nop
 8000cf2:	3714      	adds	r7, #20
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bc80      	pop	{r7}
 8000cf8:	4770      	bx	lr

08000cfa <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM3

  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	b085      	sub	sp, #20
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000d02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d06:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000d08:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000d12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d16:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
}
 8000d20:	bf00      	nop
 8000d22:	3714      	adds	r7, #20
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bc80      	pop	{r7}
 8000d28:	4770      	bx	lr

08000d2a <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	b085      	sub	sp, #20
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000d32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d36:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000d38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000d42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d46:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d4e:	68fb      	ldr	r3, [r7, #12]
}
 8000d50:	bf00      	nop
 8000d52:	3714      	adds	r7, #20
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bc80      	pop	{r7}
 8000d58:	4770      	bx	lr

08000d5a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	210f      	movs	r1, #15
 8000d62:	f06f 0001 	mvn.w	r0, #1
 8000d66:	f000 fe2c 	bl	80019c2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
	...

08000d70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b088      	sub	sp, #32
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d78:	f107 030c 	add.w	r3, r7, #12
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a0c      	ldr	r2, [pc, #48]	; (8000dc0 <HAL_ADC_MspInit+0x50>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d112      	bne.n	8000db8 <HAL_ADC_MspInit+0x48>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000d92:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d96:	f7ff ffc8 	bl	8000d2a <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d9a:	2002      	movs	r0, #2
 8000d9c:	f7ff ff7d 	bl	8000c9a <LL_AHB2_GRP1_EnableClock>
    /**ADC GPIO Configuration
    PB3     ------> ADC_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000da0:	2308      	movs	r3, #8
 8000da2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000da4:	2303      	movs	r3, #3
 8000da6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dac:	f107 030c 	add.w	r3, r7, #12
 8000db0:	4619      	mov	r1, r3
 8000db2:	4804      	ldr	r0, [pc, #16]	; (8000dc4 <HAL_ADC_MspInit+0x54>)
 8000db4:	f000 feea 	bl	8001b8c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }

}
 8000db8:	bf00      	nop
 8000dba:	3720      	adds	r7, #32
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40012400 	.word	0x40012400
 8000dc4:	48000400 	.word	0x48000400

08000dc8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b096      	sub	sp, #88	; 0x58
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000de0:	f107 030c 	add.w	r3, r7, #12
 8000de4:	2238      	movs	r2, #56	; 0x38
 8000de6:	2100      	movs	r1, #0
 8000de8:	4618      	mov	r0, r3
 8000dea:	f008 fb78 	bl	80094de <memset>
  if(hi2c->Instance==I2C2)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a21      	ldr	r2, [pc, #132]	; (8000e78 <HAL_I2C_MspInit+0xb0>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d13b      	bne.n	8000e70 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000df8:	2380      	movs	r3, #128	; 0x80
 8000dfa:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000dfc:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8000e00:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e02:	f107 030c 	add.w	r3, r7, #12
 8000e06:	4618      	mov	r0, r3
 8000e08:	f002 fb68 	bl	80034dc <HAL_RCCEx_PeriphCLKConfig>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000e12:	f7ff ff2d 	bl	8000c70 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e16:	2001      	movs	r0, #1
 8000e18:	f7ff ff3f 	bl	8000c9a <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1c:	2002      	movs	r0, #2
 8000e1e:	f7ff ff3c 	bl	8000c9a <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA15     ------> I2C2_SDA
    PB15     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000e22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e26:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e28:	2312      	movs	r3, #18
 8000e2a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e30:	2300      	movs	r3, #0
 8000e32:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e34:	2304      	movs	r3, #4
 8000e36:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e38:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e42:	f000 fea3 	bl	8001b8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000e46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e4a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e4c:	2312      	movs	r3, #18
 8000e4e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e54:	2300      	movs	r3, #0
 8000e56:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e58:	2304      	movs	r3, #4
 8000e5a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e5c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000e60:	4619      	mov	r1, r3
 8000e62:	4806      	ldr	r0, [pc, #24]	; (8000e7c <HAL_I2C_MspInit+0xb4>)
 8000e64:	f000 fe92 	bl	8001b8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e68:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000e6c:	f7ff ff2d 	bl	8000cca <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000e70:	bf00      	nop
 8000e72:	3758      	adds	r7, #88	; 0x58
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40005800 	.word	0x40005800
 8000e7c:	48000400 	.word	0x48000400

08000e80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b096      	sub	sp, #88	; 0x58
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e88:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]
 8000e96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e98:	f107 030c 	add.w	r3, r7, #12
 8000e9c:	2238      	movs	r2, #56	; 0x38
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f008 fb1c 	bl	80094de <memset>
  if(huart->Instance==LPUART1)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a30      	ldr	r2, [pc, #192]	; (8000f6c <HAL_UART_MspInit+0xec>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d124      	bne.n	8000efa <HAL_UART_MspInit+0x7a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000eb0:	2320      	movs	r3, #32
 8000eb2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eb8:	f107 030c 	add.w	r3, r7, #12
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f002 fb0d 	bl	80034dc <HAL_RCCEx_PeriphCLKConfig>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ec8:	f7ff fed2 	bl	8000c70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000ecc:	2001      	movs	r0, #1
 8000ece:	f7ff ff14 	bl	8000cfa <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ed2:	2004      	movs	r0, #4
 8000ed4:	f7ff fee1 	bl	8000c9a <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000edc:	2312      	movs	r3, #18
 8000ede:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000ee8:	2308      	movs	r3, #8
 8000eea:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	481f      	ldr	r0, [pc, #124]	; (8000f70 <HAL_UART_MspInit+0xf0>)
 8000ef4:	f000 fe4a 	bl	8001b8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ef8:	e033      	b.n	8000f62 <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART2)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a1d      	ldr	r2, [pc, #116]	; (8000f74 <HAL_UART_MspInit+0xf4>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d12e      	bne.n	8000f62 <HAL_UART_MspInit+0xe2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f04:	2302      	movs	r3, #2
 8000f06:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f08:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8000f0c:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f0e:	f107 030c 	add.w	r3, r7, #12
 8000f12:	4618      	mov	r0, r3
 8000f14:	f002 fae2 	bl	80034dc <HAL_RCCEx_PeriphCLKConfig>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <HAL_UART_MspInit+0xa2>
      Error_Handler();
 8000f1e:	f7ff fea7 	bl	8000c70 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f22:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000f26:	f7ff fed0 	bl	8000cca <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2a:	2001      	movs	r0, #1
 8000f2c:	f7ff feb5 	bl	8000c9a <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8000f30:	230c      	movs	r3, #12
 8000f32:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f34:	2302      	movs	r3, #2
 8000f36:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f40:	2307      	movs	r3, #7
 8000f42:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f44:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000f48:	4619      	mov	r1, r3
 8000f4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f4e:	f000 fe1d 	bl	8001b8c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000f52:	2200      	movs	r2, #0
 8000f54:	2105      	movs	r1, #5
 8000f56:	2025      	movs	r0, #37	; 0x25
 8000f58:	f000 fd33 	bl	80019c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f5c:	2025      	movs	r0, #37	; 0x25
 8000f5e:	f000 fd4a 	bl	80019f6 <HAL_NVIC_EnableIRQ>
}
 8000f62:	bf00      	nop
 8000f64:	3758      	adds	r7, #88	; 0x58
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40008000 	.word	0x40008000
 8000f70:	48000800 	.word	0x48000800
 8000f74:	40004400 	.word	0x40004400

08000f78 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b090      	sub	sp, #64	; 0x40
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f80:	f107 0308 	add.w	r3, r7, #8
 8000f84:	2238      	movs	r2, #56	; 0x38
 8000f86:	2100      	movs	r1, #0
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f008 faa8 	bl	80094de <memset>
  if(hrtc->Instance==RTC)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a0e      	ldr	r2, [pc, #56]	; (8000fcc <HAL_RTC_MspInit+0x54>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d115      	bne.n	8000fc4 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000f98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f9c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000f9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fa2:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fa4:	f107 0308 	add.w	r3, r7, #8
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f002 fa97 	bl	80034dc <HAL_RCCEx_PeriphCLKConfig>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000fb4:	f7ff fe5c 	bl	8000c70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000fb8:	f7ff fe5f 	bl	8000c7a <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000fbc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000fc0:	f7ff fe83 	bl	8000cca <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000fc4:	bf00      	nop
 8000fc6:	3740      	adds	r7, #64	; 0x40
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40002800 	.word	0x40002800

08000fd0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b096      	sub	sp, #88	; 0x58
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fe8:	f107 030c 	add.w	r3, r7, #12
 8000fec:	2238      	movs	r2, #56	; 0x38
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f008 fa74 	bl	80094de <memset>
  if(hspi->Instance==SPI2)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a21      	ldr	r2, [pc, #132]	; (8001080 <HAL_SPI_MspInit+0xb0>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d13b      	bne.n	8001078 <HAL_SPI_MspInit+0xa8>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S2;
 8001000:	2310      	movs	r3, #16
 8001002:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2s2ClockSelection = RCC_I2S2CLKSOURCE_HSI;
 8001004:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001008:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800100a:	f107 030c 	add.w	r3, r7, #12
 800100e:	4618      	mov	r0, r3
 8001010:	f002 fa64 	bl	80034dc <HAL_RCCEx_PeriphCLKConfig>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 800101a:	f7ff fe29 	bl	8000c70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800101e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001022:	f7ff fe52 	bl	8000cca <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001026:	2002      	movs	r0, #2
 8001028:	f7ff fe37 	bl	8000c9a <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800102c:	2001      	movs	r0, #1
 800102e:	f7ff fe34 	bl	8000c9a <LL_AHB2_GRP1_EnableClock>
    /**SPI2 GPIO Configuration
    PB14     ------> SPI2_MISO
    PA10     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13;
 8001032:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001036:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001038:	2302      	movs	r3, #2
 800103a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001040:	2300      	movs	r3, #0
 8001042:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001044:	2305      	movs	r3, #5
 8001046:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001048:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800104c:	4619      	mov	r1, r3
 800104e:	480d      	ldr	r0, [pc, #52]	; (8001084 <HAL_SPI_MspInit+0xb4>)
 8001050:	f000 fd9c 	bl	8001b8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001054:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001058:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105a:	2302      	movs	r3, #2
 800105c:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001062:	2300      	movs	r3, #0
 8001064:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001066:	2305      	movs	r3, #5
 8001068:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800106a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800106e:	4619      	mov	r1, r3
 8001070:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001074:	f000 fd8a 	bl	8001b8c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001078:	bf00      	nop
 800107a:	3758      	adds	r7, #88	; 0x58
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	40003800 	.word	0x40003800
 8001084:	48000400 	.word	0x48000400

08001088 <LL_APB2_GRP1_EnableClock>:
{
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001090:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001094:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001096:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4313      	orrs	r3, r2
 800109e:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80010a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010a4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4013      	ands	r3, r2
 80010aa:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010ac:	68fb      	ldr	r3, [r7, #12]
}
 80010ae:	bf00      	nop
 80010b0:	3714      	adds	r7, #20
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bc80      	pop	{r7}
 80010b6:	4770      	bx	lr

080010b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b08c      	sub	sp, #48	; 0x30
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80010c8:	2300      	movs	r3, #0
 80010ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80010ce:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80010d2:	f7ff ffd9 	bl	8001088 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010d6:	f107 0208 	add.w	r2, r7, #8
 80010da:	f107 030c 	add.w	r3, r7, #12
 80010de:	4611      	mov	r1, r2
 80010e0:	4618      	mov	r0, r3
 80010e2:	f002 f817 	bl	8003114 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80010e6:	f002 f803 	bl	80030f0 <HAL_RCC_GetPCLK2Freq>
 80010ea:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010ee:	4a21      	ldr	r2, [pc, #132]	; (8001174 <HAL_InitTick+0xbc>)
 80010f0:	fba2 2303 	umull	r2, r3, r2, r3
 80010f4:	0c9b      	lsrs	r3, r3, #18
 80010f6:	3b01      	subs	r3, #1
 80010f8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80010fa:	4b1f      	ldr	r3, [pc, #124]	; (8001178 <HAL_InitTick+0xc0>)
 80010fc:	4a1f      	ldr	r2, [pc, #124]	; (800117c <HAL_InitTick+0xc4>)
 80010fe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001100:	4b1d      	ldr	r3, [pc, #116]	; (8001178 <HAL_InitTick+0xc0>)
 8001102:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001106:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001108:	4a1b      	ldr	r2, [pc, #108]	; (8001178 <HAL_InitTick+0xc0>)
 800110a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800110e:	4b1a      	ldr	r3, [pc, #104]	; (8001178 <HAL_InitTick+0xc0>)
 8001110:	2200      	movs	r2, #0
 8001112:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001114:	4b18      	ldr	r3, [pc, #96]	; (8001178 <HAL_InitTick+0xc0>)
 8001116:	2200      	movs	r2, #0
 8001118:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 800111a:	4817      	ldr	r0, [pc, #92]	; (8001178 <HAL_InitTick+0xc0>)
 800111c:	f002 ff29 	bl	8003f72 <HAL_TIM_Base_Init>
 8001120:	4603      	mov	r3, r0
 8001122:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001126:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800112a:	2b00      	cmp	r3, #0
 800112c:	d11b      	bne.n	8001166 <HAL_InitTick+0xae>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800112e:	4812      	ldr	r0, [pc, #72]	; (8001178 <HAL_InitTick+0xc0>)
 8001130:	f002 ff80 	bl	8004034 <HAL_TIM_Base_Start_IT>
 8001134:	4603      	mov	r3, r0
 8001136:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800113a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800113e:	2b00      	cmp	r3, #0
 8001140:	d111      	bne.n	8001166 <HAL_InitTick+0xae>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001142:	2018      	movs	r0, #24
 8001144:	f000 fc57 	bl	80019f6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2b0f      	cmp	r3, #15
 800114c:	d808      	bhi.n	8001160 <HAL_InitTick+0xa8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 800114e:	2200      	movs	r2, #0
 8001150:	6879      	ldr	r1, [r7, #4]
 8001152:	2018      	movs	r0, #24
 8001154:	f000 fc35 	bl	80019c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001158:	4a09      	ldr	r2, [pc, #36]	; (8001180 <HAL_InitTick+0xc8>)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6013      	str	r3, [r2, #0]
 800115e:	e002      	b.n	8001166 <HAL_InitTick+0xae>
      }
      else
      {
        status = HAL_ERROR;
 8001160:	2301      	movs	r3, #1
 8001162:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001166:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800116a:	4618      	mov	r0, r3
 800116c:	3730      	adds	r7, #48	; 0x30
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	431bde83 	.word	0x431bde83
 8001178:	20000a8c 	.word	0x20000a8c
 800117c:	40012c00 	.word	0x40012c00
 8001180:	20000004 	.word	0x20000004

08001184 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001188:	e7fe      	b.n	8001188 <NMI_Handler+0x4>

0800118a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800118a:	b480      	push	{r7}
 800118c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800118e:	e7fe      	b.n	800118e <HardFault_Handler+0x4>

08001190 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001194:	e7fe      	b.n	8001194 <MemManage_Handler+0x4>

08001196 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001196:	b480      	push	{r7}
 8001198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800119a:	e7fe      	b.n	800119a <BusFault_Handler+0x4>

0800119c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a0:	e7fe      	b.n	80011a0 <UsageFault_Handler+0x4>

080011a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011a2:	b480      	push	{r7}
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bc80      	pop	{r7}
 80011ac:	4770      	bx	lr
	...

080011b0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update Interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011b4:	4802      	ldr	r0, [pc, #8]	; (80011c0 <TIM1_UP_IRQHandler+0x10>)
 80011b6:	f002 ff89 	bl	80040cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	20000a8c 	.word	0x20000a8c

080011c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80011c8:	4802      	ldr	r0, [pc, #8]	; (80011d4 <USART2_IRQHandler+0x10>)
 80011ca:	f003 fadb 	bl	8004784 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	20000944 	.word	0x20000944

080011d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  return 1;
 80011dc:	2301      	movs	r3, #1
}
 80011de:	4618      	mov	r0, r3
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bc80      	pop	{r7}
 80011e4:	4770      	bx	lr

080011e6 <_kill>:

int _kill(int pid, int sig)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b082      	sub	sp, #8
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
 80011ee:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80011f0:	f008 f844 	bl	800927c <__errno>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2216      	movs	r2, #22
 80011f8:	601a      	str	r2, [r3, #0]
  return -1;
 80011fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <_exit>:

void _exit (int status)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	b082      	sub	sp, #8
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800120e:	f04f 31ff 	mov.w	r1, #4294967295
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f7ff ffe7 	bl	80011e6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001218:	e7fe      	b.n	8001218 <_exit+0x12>

0800121a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b086      	sub	sp, #24
 800121e:	af00      	add	r7, sp, #0
 8001220:	60f8      	str	r0, [r7, #12]
 8001222:	60b9      	str	r1, [r7, #8]
 8001224:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001226:	2300      	movs	r3, #0
 8001228:	617b      	str	r3, [r7, #20]
 800122a:	e00a      	b.n	8001242 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800122c:	f3af 8000 	nop.w
 8001230:	4601      	mov	r1, r0
 8001232:	68bb      	ldr	r3, [r7, #8]
 8001234:	1c5a      	adds	r2, r3, #1
 8001236:	60ba      	str	r2, [r7, #8]
 8001238:	b2ca      	uxtb	r2, r1
 800123a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	3301      	adds	r3, #1
 8001240:	617b      	str	r3, [r7, #20]
 8001242:	697a      	ldr	r2, [r7, #20]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	429a      	cmp	r2, r3
 8001248:	dbf0      	blt.n	800122c <_read+0x12>
  }

  return len;
 800124a:	687b      	ldr	r3, [r7, #4]
}
 800124c:	4618      	mov	r0, r3
 800124e:	3718      	adds	r7, #24
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]
 8001264:	e009      	b.n	800127a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	1c5a      	adds	r2, r3, #1
 800126a:	60ba      	str	r2, [r7, #8]
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	4618      	mov	r0, r3
 8001270:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	3301      	adds	r3, #1
 8001278:	617b      	str	r3, [r7, #20]
 800127a:	697a      	ldr	r2, [r7, #20]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	429a      	cmp	r2, r3
 8001280:	dbf1      	blt.n	8001266 <_write+0x12>
  }
  return len;
 8001282:	687b      	ldr	r3, [r7, #4]
}
 8001284:	4618      	mov	r0, r3
 8001286:	3718      	adds	r7, #24
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <_close>:

int _close(int file)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001294:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001298:	4618      	mov	r0, r3
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	bc80      	pop	{r7}
 80012a0:	4770      	bx	lr

080012a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012a2:	b480      	push	{r7}
 80012a4:	b083      	sub	sp, #12
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
 80012aa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012b2:	605a      	str	r2, [r3, #4]
  return 0;
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	370c      	adds	r7, #12
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr

080012c0 <_isatty>:

int _isatty(int file)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012c8:	2301      	movs	r3, #1
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bc80      	pop	{r7}
 80012d2:	4770      	bx	lr

080012d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3714      	adds	r7, #20
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr

080012ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012f4:	4a14      	ldr	r2, [pc, #80]	; (8001348 <_sbrk+0x5c>)
 80012f6:	4b15      	ldr	r3, [pc, #84]	; (800134c <_sbrk+0x60>)
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001300:	4b13      	ldr	r3, [pc, #76]	; (8001350 <_sbrk+0x64>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d102      	bne.n	800130e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001308:	4b11      	ldr	r3, [pc, #68]	; (8001350 <_sbrk+0x64>)
 800130a:	4a12      	ldr	r2, [pc, #72]	; (8001354 <_sbrk+0x68>)
 800130c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800130e:	4b10      	ldr	r3, [pc, #64]	; (8001350 <_sbrk+0x64>)
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4413      	add	r3, r2
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	429a      	cmp	r2, r3
 800131a:	d207      	bcs.n	800132c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800131c:	f007 ffae 	bl	800927c <__errno>
 8001320:	4603      	mov	r3, r0
 8001322:	220c      	movs	r2, #12
 8001324:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001326:	f04f 33ff 	mov.w	r3, #4294967295
 800132a:	e009      	b.n	8001340 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800132c:	4b08      	ldr	r3, [pc, #32]	; (8001350 <_sbrk+0x64>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001332:	4b07      	ldr	r3, [pc, #28]	; (8001350 <_sbrk+0x64>)
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4413      	add	r3, r2
 800133a:	4a05      	ldr	r2, [pc, #20]	; (8001350 <_sbrk+0x64>)
 800133c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800133e:	68fb      	ldr	r3, [r7, #12]
}
 8001340:	4618      	mov	r0, r3
 8001342:	3718      	adds	r7, #24
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	20010000 	.word	0x20010000
 800134c:	00000400 	.word	0x00000400
 8001350:	20000ad8 	.word	0x20000ad8
 8001354:	20001a68 	.word	0x20001a68

08001358 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	bc80      	pop	{r7}
 8001362:	4770      	bx	lr

08001364 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001364:	480d      	ldr	r0, [pc, #52]	; (800139c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001366:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001368:	f7ff fff6 	bl	8001358 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800136c:	480c      	ldr	r0, [pc, #48]	; (80013a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800136e:	490d      	ldr	r1, [pc, #52]	; (80013a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001370:	4a0d      	ldr	r2, [pc, #52]	; (80013a8 <LoopForever+0xe>)
  movs r3, #0
 8001372:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001374:	e002      	b.n	800137c <LoopCopyDataInit>

08001376 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001376:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001378:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800137a:	3304      	adds	r3, #4

0800137c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800137c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800137e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001380:	d3f9      	bcc.n	8001376 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001382:	4a0a      	ldr	r2, [pc, #40]	; (80013ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001384:	4c0a      	ldr	r4, [pc, #40]	; (80013b0 <LoopForever+0x16>)
  movs r3, #0
 8001386:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001388:	e001      	b.n	800138e <LoopFillZerobss>

0800138a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800138a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800138c:	3204      	adds	r2, #4

0800138e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800138e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001390:	d3fb      	bcc.n	800138a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001392:	f008 f86f 	bl	8009474 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001396:	f7ff f933 	bl	8000600 <main>

0800139a <LoopForever>:

LoopForever:
    b LoopForever
 800139a:	e7fe      	b.n	800139a <LoopForever>
  ldr   r0, =_estack
 800139c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80013a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013a4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80013a8:	0800b16c 	.word	0x0800b16c
  ldr r2, =_sbss
 80013ac:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80013b0:	20001a68 	.word	0x20001a68

080013b4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013b4:	e7fe      	b.n	80013b4 <ADC_IRQHandler>
	...

080013b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013be:	2300      	movs	r3, #0
 80013c0:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013c2:	2003      	movs	r0, #3
 80013c4:	f000 faf2 	bl	80019ac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80013c8:	f001 fe6c 	bl	80030a4 <HAL_RCC_GetHCLKFreq>
 80013cc:	4603      	mov	r3, r0
 80013ce:	4a09      	ldr	r2, [pc, #36]	; (80013f4 <HAL_Init+0x3c>)
 80013d0:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013d2:	200f      	movs	r0, #15
 80013d4:	f7ff fe70 	bl	80010b8 <HAL_InitTick>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d002      	beq.n	80013e4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	71fb      	strb	r3, [r7, #7]
 80013e2:	e001      	b.n	80013e8 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013e4:	f7ff fcb9 	bl	8000d5a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013e8:	79fb      	ldrb	r3, [r7, #7]
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000000 	.word	0x20000000

080013f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013fc:	4b05      	ldr	r3, [pc, #20]	; (8001414 <HAL_IncTick+0x1c>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	461a      	mov	r2, r3
 8001402:	4b05      	ldr	r3, [pc, #20]	; (8001418 <HAL_IncTick+0x20>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4413      	add	r3, r2
 8001408:	4a03      	ldr	r2, [pc, #12]	; (8001418 <HAL_IncTick+0x20>)
 800140a:	6013      	str	r3, [r2, #0]
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr
 8001414:	20000008 	.word	0x20000008
 8001418:	20000adc 	.word	0x20000adc

0800141c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  return uwTick;
 8001420:	4b02      	ldr	r3, [pc, #8]	; (800142c <HAL_GetTick+0x10>)
 8001422:	681b      	ldr	r3, [r3, #0]
}
 8001424:	4618      	mov	r0, r3
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr
 800142c:	20000adc 	.word	0x20000adc

08001430 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	695a      	ldr	r2, [r3, #20]
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	f003 0304 	and.w	r3, r3, #4
 8001446:	2107      	movs	r1, #7
 8001448:	fa01 f303 	lsl.w	r3, r1, r3
 800144c:	43db      	mvns	r3, r3
 800144e:	401a      	ands	r2, r3
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	f003 0304 	and.w	r3, r3, #4
 8001456:	6879      	ldr	r1, [r7, #4]
 8001458:	fa01 f303 	lsl.w	r3, r1, r3
 800145c:	431a      	orrs	r2, r3
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001462:	bf00      	nop
 8001464:	3714      	adds	r7, #20
 8001466:	46bd      	mov	sp, r7
 8001468:	bc80      	pop	{r7}
 800146a:	4770      	bx	lr

0800146c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	695a      	ldr	r2, [r3, #20]
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	f003 0304 	and.w	r3, r3, #4
 8001480:	2107      	movs	r1, #7
 8001482:	fa01 f303 	lsl.w	r3, r1, r3
 8001486:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800148e:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001492:	4618      	mov	r0, r3
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	bc80      	pop	{r7}
 800149a:	4770      	bx	lr

0800149c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80014ac:	f023 0317 	bic.w	r3, r3, #23
 80014b0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	bc80      	pop	{r7}
 80014c0:	4770      	bx	lr

080014c2 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80014c2:	b480      	push	{r7}
 80014c4:	b083      	sub	sp, #12
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80014d6:	d101      	bne.n	80014dc <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80014d8:	2301      	movs	r3, #1
 80014da:	e000      	b.n	80014de <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	370c      	adds	r7, #12
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr

080014e8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	f003 0301 	and.w	r3, r3, #1
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d101      	bne.n	8001500 <LL_ADC_IsEnabled+0x18>
 80014fc:	2301      	movs	r3, #1
 80014fe:	e000      	b.n	8001502 <LL_ADC_IsEnabled+0x1a>
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	bc80      	pop	{r7}
 800150a:	4770      	bx	lr

0800150c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800150c:	b480      	push	{r7}
 800150e:	b083      	sub	sp, #12
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	f003 0304 	and.w	r3, r3, #4
 800151c:	2b04      	cmp	r3, #4
 800151e:	d101      	bne.n	8001524 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001520:	2301      	movs	r3, #1
 8001522:	e000      	b.n	8001526 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr

08001530 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b088      	sub	sp, #32
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001538:	2300      	movs	r3, #0
 800153a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 800153c:	2300      	movs	r3, #0
 800153e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001544:	2300      	movs	r3, #0
 8001546:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d101      	bne.n	8001552 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e17e      	b.n	8001850 <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	691b      	ldr	r3, [r3, #16]
 8001556:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800155c:	2b00      	cmp	r3, #0
 800155e:	d109      	bne.n	8001574 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f7ff fc05 	bl	8000d70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2200      	movs	r2, #0
 800156a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2200      	movs	r2, #0
 8001570:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff ffa2 	bl	80014c2 <LL_ADC_IsInternalRegulatorEnabled>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d115      	bne.n	80015b0 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff ff87 	bl	800149c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800158e:	4b9e      	ldr	r3, [pc, #632]	; (8001808 <HAL_ADC_Init+0x2d8>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	099b      	lsrs	r3, r3, #6
 8001594:	4a9d      	ldr	r2, [pc, #628]	; (800180c <HAL_ADC_Init+0x2dc>)
 8001596:	fba2 2303 	umull	r2, r3, r2, r3
 800159a:	099b      	lsrs	r3, r3, #6
 800159c:	3301      	adds	r3, #1
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80015a2:	e002      	b.n	80015aa <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	3b01      	subs	r3, #1
 80015a8:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d1f9      	bne.n	80015a4 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff ff84 	bl	80014c2 <LL_ADC_IsInternalRegulatorEnabled>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d10d      	bne.n	80015dc <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c4:	f043 0210 	orr.w	r2, r3, #16
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015d0:	f043 0201 	orr.w	r2, r3, #1
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
 80015da:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff ff93 	bl	800150c <LL_ADC_REG_IsConversionOngoing>
 80015e6:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ec:	f003 0310 	and.w	r3, r3, #16
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	f040 8124 	bne.w	800183e <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	f040 8120 	bne.w	800183e <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001602:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001606:	f043 0202 	orr.w	r2, r3, #2
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff ff68 	bl	80014e8 <LL_ADC_IsEnabled>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	f040 80a7 	bne.w	800176e <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	7e1b      	ldrb	r3, [r3, #24]
 8001628:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800162a:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	7e5b      	ldrb	r3, [r3, #25]
 8001630:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001632:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	7e9b      	ldrb	r3, [r3, #26]
 8001638:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800163a:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001640:	2a00      	cmp	r2, #0
 8001642:	d002      	beq.n	800164a <HAL_ADC_Init+0x11a>
 8001644:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001648:	e000      	b.n	800164c <HAL_ADC_Init+0x11c>
 800164a:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800164c:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001652:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	691b      	ldr	r3, [r3, #16]
 8001658:	2b00      	cmp	r3, #0
 800165a:	da04      	bge.n	8001666 <HAL_ADC_Init+0x136>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	691b      	ldr	r3, [r3, #16]
 8001660:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001664:	e001      	b.n	800166a <HAL_ADC_Init+0x13a>
 8001666:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 800166a:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8001672:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001674:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	4313      	orrs	r3, r2
 800167a:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d114      	bne.n	80016b0 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	7e9b      	ldrb	r3, [r3, #26]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d104      	bne.n	8001698 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001694:	61bb      	str	r3, [r7, #24]
 8001696:	e00b      	b.n	80016b0 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800169c:	f043 0220 	orr.w	r2, r3, #32
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016a8:	f043 0201 	orr.w	r2, r3, #1
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d009      	beq.n	80016cc <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016bc:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80016c4:	4313      	orrs	r3, r2
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 80016d6:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	6812      	ldr	r2, [r2, #0]
 80016de:	69b9      	ldr	r1, [r7, #24]
 80016e0:	430b      	orrs	r3, r1
 80016e2:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80016f0:	4313      	orrs	r3, r2
 80016f2:	697a      	ldr	r2, [r7, #20]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d111      	bne.n	8001726 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800170e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001714:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800171a:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	4313      	orrs	r3, r2
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	691a      	ldr	r2, [r3, #16]
 800172c:	4b38      	ldr	r3, [pc, #224]	; (8001810 <HAL_ADC_Init+0x2e0>)
 800172e:	4013      	ands	r3, r2
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	6812      	ldr	r2, [r2, #0]
 8001734:	6979      	ldr	r1, [r7, #20]
 8001736:	430b      	orrs	r3, r1
 8001738:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001742:	d014      	beq.n	800176e <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001748:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800174c:	d00f      	beq.n	800176e <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001752:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001756:	d00a      	beq.n	800176e <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8001758:	4b2e      	ldr	r3, [pc, #184]	; (8001814 <HAL_ADC_Init+0x2e4>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001768:	492a      	ldr	r1, [pc, #168]	; (8001814 <HAL_ADC_Init+0x2e4>)
 800176a:	4313      	orrs	r3, r2
 800176c:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6818      	ldr	r0, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001776:	461a      	mov	r2, r3
 8001778:	2100      	movs	r1, #0
 800177a:	f7ff fe59 	bl	8001430 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6818      	ldr	r0, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001786:	461a      	mov	r2, r3
 8001788:	4923      	ldr	r1, [pc, #140]	; (8001818 <HAL_ADC_Init+0x2e8>)
 800178a:	f7ff fe51 	bl	8001430 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	691b      	ldr	r3, [r3, #16]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d108      	bne.n	80017a8 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f062 020f 	orn	r2, r2, #15
 80017a4:	629a      	str	r2, [r3, #40]	; 0x28
 80017a6:	e017      	b.n	80017d8 <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	691b      	ldr	r3, [r3, #16]
 80017ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80017b0:	d112      	bne.n	80017d8 <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	69db      	ldr	r3, [r3, #28]
 80017bc:	3b01      	subs	r3, #1
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	f003 031c 	and.w	r3, r3, #28
 80017c4:	f06f 020f 	mvn.w	r2, #15
 80017c8:	fa02 f103 	lsl.w	r1, r2, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	430a      	orrs	r2, r1
 80017d6:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2100      	movs	r1, #0
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff fe44 	bl	800146c <LL_ADC_GetSamplingTimeCommonChannels>
 80017e4:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d116      	bne.n	800181c <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2200      	movs	r2, #0
 80017f2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f8:	f023 0303 	bic.w	r3, r3, #3
 80017fc:	f043 0201 	orr.w	r2, r3, #1
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001804:	e023      	b.n	800184e <HAL_ADC_Init+0x31e>
 8001806:	bf00      	nop
 8001808:	20000000 	.word	0x20000000
 800180c:	053e2d63 	.word	0x053e2d63
 8001810:	1ffffc02 	.word	0x1ffffc02
 8001814:	40012708 	.word	0x40012708
 8001818:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001820:	f023 0312 	bic.w	r3, r3, #18
 8001824:	f043 0210 	orr.w	r2, r3, #16
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001830:	f043 0201 	orr.w	r2, r3, #1
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800183c:	e007      	b.n	800184e <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001842:	f043 0210 	orr.w	r2, r3, #16
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 800184e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001850:	4618      	mov	r0, r3
 8001852:	3720      	adds	r7, #32
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001858:	b480      	push	{r7}
 800185a:	b085      	sub	sp, #20
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001868:	4b0c      	ldr	r3, [pc, #48]	; (800189c <__NVIC_SetPriorityGrouping+0x44>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800186e:	68ba      	ldr	r2, [r7, #8]
 8001870:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001874:	4013      	ands	r3, r2
 8001876:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001880:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001884:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001888:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800188a:	4a04      	ldr	r2, [pc, #16]	; (800189c <__NVIC_SetPriorityGrouping+0x44>)
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	60d3      	str	r3, [r2, #12]
}
 8001890:	bf00      	nop
 8001892:	3714      	adds	r7, #20
 8001894:	46bd      	mov	sp, r7
 8001896:	bc80      	pop	{r7}
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	e000ed00 	.word	0xe000ed00

080018a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018a4:	4b04      	ldr	r3, [pc, #16]	; (80018b8 <__NVIC_GetPriorityGrouping+0x18>)
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	0a1b      	lsrs	r3, r3, #8
 80018aa:	f003 0307 	and.w	r3, r3, #7
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bc80      	pop	{r7}
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	e000ed00 	.word	0xe000ed00

080018bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	db0b      	blt.n	80018e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	f003 021f 	and.w	r2, r3, #31
 80018d4:	4906      	ldr	r1, [pc, #24]	; (80018f0 <__NVIC_EnableIRQ+0x34>)
 80018d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018da:	095b      	lsrs	r3, r3, #5
 80018dc:	2001      	movs	r0, #1
 80018de:	fa00 f202 	lsl.w	r2, r0, r2
 80018e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018e6:	bf00      	nop
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bc80      	pop	{r7}
 80018ee:	4770      	bx	lr
 80018f0:	e000e100 	.word	0xe000e100

080018f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	4603      	mov	r3, r0
 80018fc:	6039      	str	r1, [r7, #0]
 80018fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001904:	2b00      	cmp	r3, #0
 8001906:	db0a      	blt.n	800191e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	b2da      	uxtb	r2, r3
 800190c:	490c      	ldr	r1, [pc, #48]	; (8001940 <__NVIC_SetPriority+0x4c>)
 800190e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001912:	0112      	lsls	r2, r2, #4
 8001914:	b2d2      	uxtb	r2, r2
 8001916:	440b      	add	r3, r1
 8001918:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800191c:	e00a      	b.n	8001934 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	b2da      	uxtb	r2, r3
 8001922:	4908      	ldr	r1, [pc, #32]	; (8001944 <__NVIC_SetPriority+0x50>)
 8001924:	79fb      	ldrb	r3, [r7, #7]
 8001926:	f003 030f 	and.w	r3, r3, #15
 800192a:	3b04      	subs	r3, #4
 800192c:	0112      	lsls	r2, r2, #4
 800192e:	b2d2      	uxtb	r2, r2
 8001930:	440b      	add	r3, r1
 8001932:	761a      	strb	r2, [r3, #24]
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	bc80      	pop	{r7}
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	e000e100 	.word	0xe000e100
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001948:	b480      	push	{r7}
 800194a:	b089      	sub	sp, #36	; 0x24
 800194c:	af00      	add	r7, sp, #0
 800194e:	60f8      	str	r0, [r7, #12]
 8001950:	60b9      	str	r1, [r7, #8]
 8001952:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	f003 0307 	and.w	r3, r3, #7
 800195a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	f1c3 0307 	rsb	r3, r3, #7
 8001962:	2b04      	cmp	r3, #4
 8001964:	bf28      	it	cs
 8001966:	2304      	movcs	r3, #4
 8001968:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	3304      	adds	r3, #4
 800196e:	2b06      	cmp	r3, #6
 8001970:	d902      	bls.n	8001978 <NVIC_EncodePriority+0x30>
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	3b03      	subs	r3, #3
 8001976:	e000      	b.n	800197a <NVIC_EncodePriority+0x32>
 8001978:	2300      	movs	r3, #0
 800197a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800197c:	f04f 32ff 	mov.w	r2, #4294967295
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	43da      	mvns	r2, r3
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	401a      	ands	r2, r3
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001990:	f04f 31ff 	mov.w	r1, #4294967295
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	fa01 f303 	lsl.w	r3, r1, r3
 800199a:	43d9      	mvns	r1, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a0:	4313      	orrs	r3, r2
         );
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3724      	adds	r7, #36	; 0x24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr

080019ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f7ff ff4f 	bl	8001858 <__NVIC_SetPriorityGrouping>
}
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b086      	sub	sp, #24
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	4603      	mov	r3, r0
 80019ca:	60b9      	str	r1, [r7, #8]
 80019cc:	607a      	str	r2, [r7, #4]
 80019ce:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019d0:	f7ff ff66 	bl	80018a0 <__NVIC_GetPriorityGrouping>
 80019d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	68b9      	ldr	r1, [r7, #8]
 80019da:	6978      	ldr	r0, [r7, #20]
 80019dc:	f7ff ffb4 	bl	8001948 <NVIC_EncodePriority>
 80019e0:	4602      	mov	r2, r0
 80019e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019e6:	4611      	mov	r1, r2
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff ff83 	bl	80018f4 <__NVIC_SetPriority>
}
 80019ee:	bf00      	nop
 80019f0:	3718      	adds	r7, #24
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b082      	sub	sp, #8
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	4603      	mov	r3, r0
 80019fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff ff59 	bl	80018bc <__NVIC_EnableIRQ>
}
 8001a0a:	bf00      	nop
 8001a0c:	3708      	adds	r7, #8
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a12:	b480      	push	{r7}
 8001a14:	b083      	sub	sp, #12
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d101      	bne.n	8001a24 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e04f      	b.n	8001ac4 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d008      	beq.n	8001a42 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2204      	movs	r2, #4
 8001a34:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e040      	b.n	8001ac4 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f022 020e 	bic.w	r2, r2, #14
 8001a50:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a60:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f022 0201 	bic.w	r2, r2, #1
 8001a70:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a76:	f003 021c 	and.w	r2, r3, #28
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	2101      	movs	r1, #1
 8001a80:	fa01 f202 	lsl.w	r2, r1, r2
 8001a84:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001a8e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d00c      	beq.n	8001ab2 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aa2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001aa6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001ab0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bc80      	pop	{r7}
 8001acc:	4770      	bx	lr

08001ace <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	b084      	sub	sp, #16
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d005      	beq.n	8001af2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2204      	movs	r2, #4
 8001aea:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	73fb      	strb	r3, [r7, #15]
 8001af0:	e047      	b.n	8001b82 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f022 020e 	bic.w	r2, r2, #14
 8001b00:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	681a      	ldr	r2, [r3, #0]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f022 0201 	bic.w	r2, r2, #1
 8001b10:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b20:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b26:	f003 021c 	and.w	r2, r3, #28
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2e:	2101      	movs	r1, #1
 8001b30:	fa01 f202 	lsl.w	r2, r1, r2
 8001b34:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b3a:	687a      	ldr	r2, [r7, #4]
 8001b3c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001b3e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d00c      	beq.n	8001b62 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b52:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b56:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001b60:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2201      	movs	r2, #1
 8001b66:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d003      	beq.n	8001b82 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	4798      	blx	r3
    }
  }
  return status;
 8001b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	3710      	adds	r7, #16
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b087      	sub	sp, #28
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b96:	2300      	movs	r3, #0
 8001b98:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b9a:	e140      	b.n	8001e1e <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	2101      	movs	r1, #1
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba8:	4013      	ands	r3, r2
 8001baa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	f000 8132 	beq.w	8001e18 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f003 0303 	and.w	r3, r3, #3
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d005      	beq.n	8001bcc <HAL_GPIO_Init+0x40>
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f003 0303 	and.w	r3, r3, #3
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d130      	bne.n	8001c2e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	2203      	movs	r2, #3
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	4013      	ands	r3, r2
 8001be2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	68da      	ldr	r2, [r3, #12]
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf0:	693a      	ldr	r2, [r7, #16]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c02:	2201      	movs	r2, #1
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	43db      	mvns	r3, r3
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	091b      	lsrs	r3, r3, #4
 8001c18:	f003 0201 	and.w	r2, r3, #1
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	693a      	ldr	r2, [r7, #16]
 8001c2c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f003 0303 	and.w	r3, r3, #3
 8001c36:	2b03      	cmp	r3, #3
 8001c38:	d017      	beq.n	8001c6a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	2203      	movs	r2, #3
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	43db      	mvns	r3, r3
 8001c4c:	693a      	ldr	r2, [r7, #16]
 8001c4e:	4013      	ands	r3, r2
 8001c50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	689a      	ldr	r2, [r3, #8]
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	005b      	lsls	r3, r3, #1
 8001c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5e:	693a      	ldr	r2, [r7, #16]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f003 0303 	and.w	r3, r3, #3
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d123      	bne.n	8001cbe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	08da      	lsrs	r2, r3, #3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	3208      	adds	r2, #8
 8001c7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	220f      	movs	r2, #15
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	43db      	mvns	r3, r3
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	4013      	ands	r3, r2
 8001c98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	691a      	ldr	r2, [r3, #16]
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	f003 0307 	and.w	r3, r3, #7
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	08da      	lsrs	r2, r3, #3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	3208      	adds	r2, #8
 8001cb8:	6939      	ldr	r1, [r7, #16]
 8001cba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	2203      	movs	r2, #3
 8001cca:	fa02 f303 	lsl.w	r3, r2, r3
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f003 0203 	and.w	r2, r3, #3
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	f000 808c 	beq.w	8001e18 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001d00:	4a4e      	ldr	r2, [pc, #312]	; (8001e3c <HAL_GPIO_Init+0x2b0>)
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	089b      	lsrs	r3, r3, #2
 8001d06:	3302      	adds	r3, #2
 8001d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	f003 0303 	and.w	r3, r3, #3
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	2207      	movs	r2, #7
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	4013      	ands	r3, r2
 8001d22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d2a:	d00d      	beq.n	8001d48 <HAL_GPIO_Init+0x1bc>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4a44      	ldr	r2, [pc, #272]	; (8001e40 <HAL_GPIO_Init+0x2b4>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d007      	beq.n	8001d44 <HAL_GPIO_Init+0x1b8>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4a43      	ldr	r2, [pc, #268]	; (8001e44 <HAL_GPIO_Init+0x2b8>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d101      	bne.n	8001d40 <HAL_GPIO_Init+0x1b4>
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	e004      	b.n	8001d4a <HAL_GPIO_Init+0x1be>
 8001d40:	2307      	movs	r3, #7
 8001d42:	e002      	b.n	8001d4a <HAL_GPIO_Init+0x1be>
 8001d44:	2301      	movs	r3, #1
 8001d46:	e000      	b.n	8001d4a <HAL_GPIO_Init+0x1be>
 8001d48:	2300      	movs	r3, #0
 8001d4a:	697a      	ldr	r2, [r7, #20]
 8001d4c:	f002 0203 	and.w	r2, r2, #3
 8001d50:	0092      	lsls	r2, r2, #2
 8001d52:	4093      	lsls	r3, r2
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d5a:	4938      	ldr	r1, [pc, #224]	; (8001e3c <HAL_GPIO_Init+0x2b0>)
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	089b      	lsrs	r3, r3, #2
 8001d60:	3302      	adds	r3, #2
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d68:	4b37      	ldr	r3, [pc, #220]	; (8001e48 <HAL_GPIO_Init+0x2bc>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	43db      	mvns	r3, r3
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	4013      	ands	r3, r2
 8001d76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d003      	beq.n	8001d8c <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d8c:	4a2e      	ldr	r2, [pc, #184]	; (8001e48 <HAL_GPIO_Init+0x2bc>)
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001d92:	4b2d      	ldr	r3, [pc, #180]	; (8001e48 <HAL_GPIO_Init+0x2bc>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d003      	beq.n	8001db6 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001db6:	4a24      	ldr	r2, [pc, #144]	; (8001e48 <HAL_GPIO_Init+0x2bc>)
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001dbc:	4b22      	ldr	r3, [pc, #136]	; (8001e48 <HAL_GPIO_Init+0x2bc>)
 8001dbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001dc2:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8001de2:	4a19      	ldr	r2, [pc, #100]	; (8001e48 <HAL_GPIO_Init+0x2bc>)
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8001dea:	4b17      	ldr	r3, [pc, #92]	; (8001e48 <HAL_GPIO_Init+0x2bc>)
 8001dec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001df0:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	43db      	mvns	r3, r3
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d003      	beq.n	8001e10 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001e08:	693a      	ldr	r2, [r7, #16]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001e10:	4a0d      	ldr	r2, [pc, #52]	; (8001e48 <HAL_GPIO_Init+0x2bc>)
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	fa22 f303 	lsr.w	r3, r2, r3
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f47f aeb7 	bne.w	8001b9c <HAL_GPIO_Init+0x10>
  }
}
 8001e2e:	bf00      	nop
 8001e30:	bf00      	nop
 8001e32:	371c      	adds	r7, #28
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bc80      	pop	{r7}
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	40010000 	.word	0x40010000
 8001e40:	48000400 	.word	0x48000400
 8001e44:	48000800 	.word	0x48000800
 8001e48:	58000800 	.word	0x58000800

08001e4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	460b      	mov	r3, r1
 8001e56:	807b      	strh	r3, [r7, #2]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e5c:	787b      	ldrb	r3, [r7, #1]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d003      	beq.n	8001e6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e62:	887a      	ldrh	r2, [r7, #2]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e68:	e002      	b.n	8001e70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e6a:	887a      	ldrh	r2, [r7, #2]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bc80      	pop	{r7}
 8001e78:	4770      	bx	lr

08001e7a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b082      	sub	sp, #8
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d101      	bne.n	8001e8c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e081      	b.n	8001f90 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d106      	bne.n	8001ea6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f7fe ff91 	bl	8000dc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2224      	movs	r2, #36	; 0x24
 8001eaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f022 0201 	bic.w	r2, r2, #1
 8001ebc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685a      	ldr	r2, [r3, #4]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001eca:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	689a      	ldr	r2, [r3, #8]
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001eda:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d107      	bne.n	8001ef4 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689a      	ldr	r2, [r3, #8]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ef0:	609a      	str	r2, [r3, #8]
 8001ef2:	e006      	b.n	8001f02 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001f00:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d104      	bne.n	8001f14 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f12:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	6812      	ldr	r2, [r2, #0]
 8001f1e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f26:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	68da      	ldr	r2, [r3, #12]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f36:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	691a      	ldr	r2, [r3, #16]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	695b      	ldr	r3, [r3, #20]
 8001f40:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	699b      	ldr	r3, [r3, #24]
 8001f48:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	69d9      	ldr	r1, [r3, #28]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a1a      	ldr	r2, [r3, #32]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f042 0201 	orr.w	r2, r2, #1
 8001f70:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2220      	movs	r2, #32
 8001f7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001f8e:	2300      	movs	r3, #0
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	2b20      	cmp	r3, #32
 8001fac:	d138      	bne.n	8002020 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d101      	bne.n	8001fbc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001fb8:	2302      	movs	r3, #2
 8001fba:	e032      	b.n	8002022 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2224      	movs	r2, #36	; 0x24
 8001fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f022 0201 	bic.w	r2, r2, #1
 8001fda:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001fea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6819      	ldr	r1, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	683a      	ldr	r2, [r7, #0]
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f042 0201 	orr.w	r2, r2, #1
 800200a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2220      	movs	r2, #32
 8002010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800201c:	2300      	movs	r3, #0
 800201e:	e000      	b.n	8002022 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002020:	2302      	movs	r3, #2
  }
}
 8002022:	4618      	mov	r0, r3
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	bc80      	pop	{r7}
 800202a:	4770      	bx	lr

0800202c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b20      	cmp	r3, #32
 8002040:	d139      	bne.n	80020b6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002048:	2b01      	cmp	r3, #1
 800204a:	d101      	bne.n	8002050 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800204c:	2302      	movs	r3, #2
 800204e:	e033      	b.n	80020b8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2201      	movs	r2, #1
 8002054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2224      	movs	r2, #36	; 0x24
 800205c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f022 0201 	bic.w	r2, r2, #1
 800206e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800207e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	021b      	lsls	r3, r3, #8
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	4313      	orrs	r3, r2
 8002088:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	68fa      	ldr	r2, [r7, #12]
 8002090:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f042 0201 	orr.w	r2, r2, #1
 80020a0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2220      	movs	r2, #32
 80020a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020b2:	2300      	movs	r3, #0
 80020b4:	e000      	b.n	80020b8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80020b6:	2302      	movs	r3, #2
  }
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3714      	adds	r7, #20
 80020bc:	46bd      	mov	sp, r7
 80020be:	bc80      	pop	{r7}
 80020c0:	4770      	bx	lr
	...

080020c4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020c8:	4b04      	ldr	r3, [pc, #16]	; (80020dc <HAL_PWR_EnableBkUpAccess+0x18>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a03      	ldr	r2, [pc, #12]	; (80020dc <HAL_PWR_EnableBkUpAccess+0x18>)
 80020ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020d2:	6013      	str	r3, [r2, #0]
}
 80020d4:	bf00      	nop
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bc80      	pop	{r7}
 80020da:	4770      	bx	lr
 80020dc:	58000400 	.word	0x58000400

080020e0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80020e4:	4b03      	ldr	r3, [pc, #12]	; (80020f4 <HAL_PWREx_GetVoltageRange+0x14>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bc80      	pop	{r7}
 80020f2:	4770      	bx	lr
 80020f4:	58000400 	.word	0x58000400

080020f8 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80020fc:	4b06      	ldr	r3, [pc, #24]	; (8002118 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002104:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002108:	d101      	bne.n	800210e <LL_PWR_IsEnabledBkUpAccess+0x16>
 800210a:	2301      	movs	r3, #1
 800210c:	e000      	b.n	8002110 <LL_PWR_IsEnabledBkUpAccess+0x18>
 800210e:	2300      	movs	r3, #0
}
 8002110:	4618      	mov	r0, r3
 8002112:	46bd      	mov	sp, r7
 8002114:	bc80      	pop	{r7}
 8002116:	4770      	bx	lr
 8002118:	58000400 	.word	0x58000400

0800211c <LL_RCC_HSE_EnableTcxo>:
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002120:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800212a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800212e:	6013      	str	r3, [r2, #0]
}
 8002130:	bf00      	nop
 8002132:	46bd      	mov	sp, r7
 8002134:	bc80      	pop	{r7}
 8002136:	4770      	bx	lr

08002138 <LL_RCC_HSE_DisableTcxo>:
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800213c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002146:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800214a:	6013      	str	r3, [r2, #0]
}
 800214c:	bf00      	nop
 800214e:	46bd      	mov	sp, r7
 8002150:	bc80      	pop	{r7}
 8002152:	4770      	bx	lr

08002154 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002158:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002162:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002166:	d101      	bne.n	800216c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002168:	2301      	movs	r3, #1
 800216a:	e000      	b.n	800216e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800216c:	2300      	movs	r3, #0
}
 800216e:	4618      	mov	r0, r3
 8002170:	46bd      	mov	sp, r7
 8002172:	bc80      	pop	{r7}
 8002174:	4770      	bx	lr

08002176 <LL_RCC_HSE_Enable>:
{
 8002176:	b480      	push	{r7}
 8002178:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800217a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002184:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002188:	6013      	str	r3, [r2, #0]
}
 800218a:	bf00      	nop
 800218c:	46bd      	mov	sp, r7
 800218e:	bc80      	pop	{r7}
 8002190:	4770      	bx	lr

08002192 <LL_RCC_HSE_Disable>:
{
 8002192:	b480      	push	{r7}
 8002194:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002196:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021a4:	6013      	str	r3, [r2, #0]
}
 80021a6:	bf00      	nop
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bc80      	pop	{r7}
 80021ac:	4770      	bx	lr

080021ae <LL_RCC_HSE_IsReady>:
{
 80021ae:	b480      	push	{r7}
 80021b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80021b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80021c0:	d101      	bne.n	80021c6 <LL_RCC_HSE_IsReady+0x18>
 80021c2:	2301      	movs	r3, #1
 80021c4:	e000      	b.n	80021c8 <LL_RCC_HSE_IsReady+0x1a>
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bc80      	pop	{r7}
 80021ce:	4770      	bx	lr

080021d0 <LL_RCC_HSI_Enable>:
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80021d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021e2:	6013      	str	r3, [r2, #0]
}
 80021e4:	bf00      	nop
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bc80      	pop	{r7}
 80021ea:	4770      	bx	lr

080021ec <LL_RCC_HSI_Disable>:
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80021f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021fe:	6013      	str	r3, [r2, #0]
}
 8002200:	bf00      	nop
 8002202:	46bd      	mov	sp, r7
 8002204:	bc80      	pop	{r7}
 8002206:	4770      	bx	lr

08002208 <LL_RCC_HSI_IsReady>:
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800220c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002216:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800221a:	d101      	bne.n	8002220 <LL_RCC_HSI_IsReady+0x18>
 800221c:	2301      	movs	r3, #1
 800221e:	e000      	b.n	8002222 <LL_RCC_HSI_IsReady+0x1a>
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	46bd      	mov	sp, r7
 8002226:	bc80      	pop	{r7}
 8002228:	4770      	bx	lr

0800222a <LL_RCC_HSI_SetCalibTrimming>:
{
 800222a:	b480      	push	{r7}
 800222c:	b083      	sub	sp, #12
 800222e:	af00      	add	r7, sp, #0
 8002230:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002232:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	061b      	lsls	r3, r3, #24
 8002240:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002244:	4313      	orrs	r3, r2
 8002246:	604b      	str	r3, [r1, #4]
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	bc80      	pop	{r7}
 8002250:	4770      	bx	lr

08002252 <LL_RCC_LSE_IsReady>:
{
 8002252:	b480      	push	{r7}
 8002254:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002256:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800225a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b02      	cmp	r3, #2
 8002264:	d101      	bne.n	800226a <LL_RCC_LSE_IsReady+0x18>
 8002266:	2301      	movs	r3, #1
 8002268:	e000      	b.n	800226c <LL_RCC_LSE_IsReady+0x1a>
 800226a:	2300      	movs	r3, #0
}
 800226c:	4618      	mov	r0, r3
 800226e:	46bd      	mov	sp, r7
 8002270:	bc80      	pop	{r7}
 8002272:	4770      	bx	lr

08002274 <LL_RCC_LSI_Enable>:
{
 8002274:	b480      	push	{r7}
 8002276:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8002278:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800227c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002280:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002284:	f043 0301 	orr.w	r3, r3, #1
 8002288:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800228c:	bf00      	nop
 800228e:	46bd      	mov	sp, r7
 8002290:	bc80      	pop	{r7}
 8002292:	4770      	bx	lr

08002294 <LL_RCC_LSI_Disable>:
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002298:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800229c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022a4:	f023 0301 	bic.w	r3, r3, #1
 80022a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80022ac:	bf00      	nop
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bc80      	pop	{r7}
 80022b2:	4770      	bx	lr

080022b4 <LL_RCC_LSI_IsReady>:
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80022b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022c0:	f003 0302 	and.w	r3, r3, #2
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d101      	bne.n	80022cc <LL_RCC_LSI_IsReady+0x18>
 80022c8:	2301      	movs	r3, #1
 80022ca:	e000      	b.n	80022ce <LL_RCC_LSI_IsReady+0x1a>
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bc80      	pop	{r7}
 80022d4:	4770      	bx	lr

080022d6 <LL_RCC_MSI_Enable>:
{
 80022d6:	b480      	push	{r7}
 80022d8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80022da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022e4:	f043 0301 	orr.w	r3, r3, #1
 80022e8:	6013      	str	r3, [r2, #0]
}
 80022ea:	bf00      	nop
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bc80      	pop	{r7}
 80022f0:	4770      	bx	lr

080022f2 <LL_RCC_MSI_Disable>:
{
 80022f2:	b480      	push	{r7}
 80022f4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80022f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002300:	f023 0301 	bic.w	r3, r3, #1
 8002304:	6013      	str	r3, [r2, #0]
}
 8002306:	bf00      	nop
 8002308:	46bd      	mov	sp, r7
 800230a:	bc80      	pop	{r7}
 800230c:	4770      	bx	lr

0800230e <LL_RCC_MSI_IsReady>:
{
 800230e:	b480      	push	{r7}
 8002310:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002312:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	2b02      	cmp	r3, #2
 800231e:	d101      	bne.n	8002324 <LL_RCC_MSI_IsReady+0x16>
 8002320:	2301      	movs	r3, #1
 8002322:	e000      	b.n	8002326 <LL_RCC_MSI_IsReady+0x18>
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	46bd      	mov	sp, r7
 800232a:	bc80      	pop	{r7}
 800232c:	4770      	bx	lr

0800232e <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 800232e:	b480      	push	{r7}
 8002330:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8002332:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0308 	and.w	r3, r3, #8
 800233c:	2b08      	cmp	r3, #8
 800233e:	d101      	bne.n	8002344 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002340:	2301      	movs	r3, #1
 8002342:	e000      	b.n	8002346 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	46bd      	mov	sp, r7
 800234a:	bc80      	pop	{r7}
 800234c:	4770      	bx	lr

0800234e <LL_RCC_MSI_GetRange>:
{
 800234e:	b480      	push	{r7}
 8002350:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8002352:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800235c:	4618      	mov	r0, r3
 800235e:	46bd      	mov	sp, r7
 8002360:	bc80      	pop	{r7}
 8002362:	4770      	bx	lr

08002364 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8002364:	b480      	push	{r7}
 8002366:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002368:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800236c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002370:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8002374:	4618      	mov	r0, r3
 8002376:	46bd      	mov	sp, r7
 8002378:	bc80      	pop	{r7}
 800237a:	4770      	bx	lr

0800237c <LL_RCC_MSI_SetCalibTrimming>:
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002384:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	021b      	lsls	r3, r3, #8
 8002392:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002396:	4313      	orrs	r3, r2
 8002398:	604b      	str	r3, [r1, #4]
}
 800239a:	bf00      	nop
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	bc80      	pop	{r7}
 80023a2:	4770      	bx	lr

080023a4 <LL_RCC_SetSysClkSource>:
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80023ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f023 0203 	bic.w	r2, r3, #3
 80023b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4313      	orrs	r3, r2
 80023be:	608b      	str	r3, [r1, #8]
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bc80      	pop	{r7}
 80023c8:	4770      	bx	lr

080023ca <LL_RCC_GetSysClkSource>:
{
 80023ca:	b480      	push	{r7}
 80023cc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80023ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f003 030c 	and.w	r3, r3, #12
}
 80023d8:	4618      	mov	r0, r3
 80023da:	46bd      	mov	sp, r7
 80023dc:	bc80      	pop	{r7}
 80023de:	4770      	bx	lr

080023e0 <LL_RCC_SetAHBPrescaler>:
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80023e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	608b      	str	r3, [r1, #8]
}
 80023fc:	bf00      	nop
 80023fe:	370c      	adds	r7, #12
 8002400:	46bd      	mov	sp, r7
 8002402:	bc80      	pop	{r7}
 8002404:	4770      	bx	lr

08002406 <LL_RCC_SetAHB3Prescaler>:
{
 8002406:	b480      	push	{r7}
 8002408:	b083      	sub	sp, #12
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800240e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002412:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002416:	f023 020f 	bic.w	r2, r3, #15
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	091b      	lsrs	r3, r3, #4
 800241e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002422:	4313      	orrs	r3, r2
 8002424:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002428:	bf00      	nop
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	bc80      	pop	{r7}
 8002430:	4770      	bx	lr

08002432 <LL_RCC_SetAPB1Prescaler>:
{
 8002432:	b480      	push	{r7}
 8002434:	b083      	sub	sp, #12
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800243a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002444:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4313      	orrs	r3, r2
 800244c:	608b      	str	r3, [r1, #8]
}
 800244e:	bf00      	nop
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	bc80      	pop	{r7}
 8002456:	4770      	bx	lr

08002458 <LL_RCC_SetAPB2Prescaler>:
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002460:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800246a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4313      	orrs	r3, r2
 8002472:	608b      	str	r3, [r1, #8]
}
 8002474:	bf00      	nop
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	bc80      	pop	{r7}
 800247c:	4770      	bx	lr

0800247e <LL_RCC_GetAHBPrescaler>:
{
 800247e:	b480      	push	{r7}
 8002480:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002482:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800248c:	4618      	mov	r0, r3
 800248e:	46bd      	mov	sp, r7
 8002490:	bc80      	pop	{r7}
 8002492:	4770      	bx	lr

08002494 <LL_RCC_GetAHB3Prescaler>:
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002498:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800249c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80024a0:	011b      	lsls	r3, r3, #4
 80024a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bc80      	pop	{r7}
 80024ac:	4770      	bx	lr

080024ae <LL_RCC_GetAPB1Prescaler>:
{
 80024ae:	b480      	push	{r7}
 80024b0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80024b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80024bc:	4618      	mov	r0, r3
 80024be:	46bd      	mov	sp, r7
 80024c0:	bc80      	pop	{r7}
 80024c2:	4770      	bx	lr

080024c4 <LL_RCC_GetAPB2Prescaler>:
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80024c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bc80      	pop	{r7}
 80024d8:	4770      	bx	lr

080024da <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80024da:	b480      	push	{r7}
 80024dc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80024de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024ec:	6013      	str	r3, [r2, #0]
}
 80024ee:	bf00      	nop
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bc80      	pop	{r7}
 80024f4:	4770      	bx	lr

080024f6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80024f6:	b480      	push	{r7}
 80024f8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80024fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002504:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002508:	6013      	str	r3, [r2, #0]
}
 800250a:	bf00      	nop
 800250c:	46bd      	mov	sp, r7
 800250e:	bc80      	pop	{r7}
 8002510:	4770      	bx	lr

08002512 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002512:	b480      	push	{r7}
 8002514:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002516:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002520:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002524:	d101      	bne.n	800252a <LL_RCC_PLL_IsReady+0x18>
 8002526:	2301      	movs	r3, #1
 8002528:	e000      	b.n	800252c <LL_RCC_PLL_IsReady+0x1a>
 800252a:	2300      	movs	r3, #0
}
 800252c:	4618      	mov	r0, r3
 800252e:	46bd      	mov	sp, r7
 8002530:	bc80      	pop	{r7}
 8002532:	4770      	bx	lr

08002534 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002538:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	0a1b      	lsrs	r3, r3, #8
 8002540:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002544:	4618      	mov	r0, r3
 8002546:	46bd      	mov	sp, r7
 8002548:	bc80      	pop	{r7}
 800254a:	4770      	bx	lr

0800254c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002550:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800255a:	4618      	mov	r0, r3
 800255c:	46bd      	mov	sp, r7
 800255e:	bc80      	pop	{r7}
 8002560:	4770      	bx	lr

08002562 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002562:	b480      	push	{r7}
 8002564:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002566:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002570:	4618      	mov	r0, r3
 8002572:	46bd      	mov	sp, r7
 8002574:	bc80      	pop	{r7}
 8002576:	4770      	bx	lr

08002578 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800257c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	f003 0303 	and.w	r3, r3, #3
}
 8002586:	4618      	mov	r0, r3
 8002588:	46bd      	mov	sp, r7
 800258a:	bc80      	pop	{r7}
 800258c:	4770      	bx	lr

0800258e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800258e:	b480      	push	{r7}
 8002590:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002592:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800259c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025a0:	d101      	bne.n	80025a6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80025a2:	2301      	movs	r3, #1
 80025a4:	e000      	b.n	80025a8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bc80      	pop	{r7}
 80025ae:	4770      	bx	lr

080025b0 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80025b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025b8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80025bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025c4:	d101      	bne.n	80025ca <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80025c6:	2301      	movs	r3, #1
 80025c8:	e000      	b.n	80025cc <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bc80      	pop	{r7}
 80025d2:	4770      	bx	lr

080025d4 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80025d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80025e6:	d101      	bne.n	80025ec <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80025e8:	2301      	movs	r3, #1
 80025ea:	e000      	b.n	80025ee <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bc80      	pop	{r7}
 80025f4:	4770      	bx	lr

080025f6 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80025f6:	b480      	push	{r7}
 80025f8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80025fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002604:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002608:	d101      	bne.n	800260e <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800260a:	2301      	movs	r3, #1
 800260c:	e000      	b.n	8002610 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800260e:	2300      	movs	r3, #0
}
 8002610:	4618      	mov	r0, r3
 8002612:	46bd      	mov	sp, r7
 8002614:	bc80      	pop	{r7}
 8002616:	4770      	bx	lr

08002618 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b088      	sub	sp, #32
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e36f      	b.n	8002d0a <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800262a:	f7ff fece 	bl	80023ca <LL_RCC_GetSysClkSource>
 800262e:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002630:	f7ff ffa2 	bl	8002578 <LL_RCC_PLL_GetMainSource>
 8002634:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0320 	and.w	r3, r3, #32
 800263e:	2b00      	cmp	r3, #0
 8002640:	f000 80c4 	beq.w	80027cc <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d005      	beq.n	8002656 <HAL_RCC_OscConfig+0x3e>
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	2b0c      	cmp	r3, #12
 800264e:	d176      	bne.n	800273e <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002650:	69bb      	ldr	r3, [r7, #24]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d173      	bne.n	800273e <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a1b      	ldr	r3, [r3, #32]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e353      	b.n	8002d0a <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002666:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0308 	and.w	r3, r3, #8
 8002670:	2b00      	cmp	r3, #0
 8002672:	d005      	beq.n	8002680 <HAL_RCC_OscConfig+0x68>
 8002674:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800267e:	e006      	b.n	800268e <HAL_RCC_OscConfig+0x76>
 8002680:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002684:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002688:	091b      	lsrs	r3, r3, #4
 800268a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800268e:	4293      	cmp	r3, r2
 8002690:	d222      	bcs.n	80026d8 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002696:	4618      	mov	r0, r3
 8002698:	f000 fd7a 	bl	8003190 <RCC_SetFlashLatencyFromMSIRange>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e331      	b.n	8002d0a <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026b0:	f043 0308 	orr.w	r3, r3, #8
 80026b4:	6013      	str	r3, [r2, #0]
 80026b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026c8:	4313      	orrs	r3, r2
 80026ca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff fe53 	bl	800237c <LL_RCC_MSI_SetCalibTrimming>
 80026d6:	e021      	b.n	800271c <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026e2:	f043 0308 	orr.w	r3, r3, #8
 80026e6:	6013      	str	r3, [r2, #0]
 80026e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026fa:	4313      	orrs	r3, r2
 80026fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002702:	4618      	mov	r0, r3
 8002704:	f7ff fe3a 	bl	800237c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800270c:	4618      	mov	r0, r3
 800270e:	f000 fd3f 	bl	8003190 <RCC_SetFlashLatencyFromMSIRange>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e2f6      	b.n	8002d0a <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800271c:	f000 fcc2 	bl	80030a4 <HAL_RCC_GetHCLKFreq>
 8002720:	4603      	mov	r3, r0
 8002722:	4aa7      	ldr	r2, [pc, #668]	; (80029c0 <HAL_RCC_OscConfig+0x3a8>)
 8002724:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8002726:	4ba7      	ldr	r3, [pc, #668]	; (80029c4 <HAL_RCC_OscConfig+0x3ac>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4618      	mov	r0, r3
 800272c:	f7fe fcc4 	bl	80010b8 <HAL_InitTick>
 8002730:	4603      	mov	r3, r0
 8002732:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002734:	7cfb      	ldrb	r3, [r7, #19]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d047      	beq.n	80027ca <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 800273a:	7cfb      	ldrb	r3, [r7, #19]
 800273c:	e2e5      	b.n	8002d0a <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a1b      	ldr	r3, [r3, #32]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d02c      	beq.n	80027a0 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002746:	f7ff fdc6 	bl	80022d6 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800274a:	f7fe fe67 	bl	800141c <HAL_GetTick>
 800274e:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002750:	e008      	b.n	8002764 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002752:	f7fe fe63 	bl	800141c <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e2d2      	b.n	8002d0a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002764:	f7ff fdd3 	bl	800230e <LL_RCC_MSI_IsReady>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d0f1      	beq.n	8002752 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800276e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002778:	f043 0308 	orr.w	r3, r3, #8
 800277c:	6013      	str	r3, [r2, #0]
 800277e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800278c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002790:	4313      	orrs	r3, r2
 8002792:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002798:	4618      	mov	r0, r3
 800279a:	f7ff fdef 	bl	800237c <LL_RCC_MSI_SetCalibTrimming>
 800279e:	e015      	b.n	80027cc <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80027a0:	f7ff fda7 	bl	80022f2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027a4:	f7fe fe3a 	bl	800141c <HAL_GetTick>
 80027a8:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027ac:	f7fe fe36 	bl	800141c <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e2a5      	b.n	8002d0a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 80027be:	f7ff fda6 	bl	800230e <LL_RCC_MSI_IsReady>
 80027c2:	4603      	mov	r3, r0
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d1f1      	bne.n	80027ac <HAL_RCC_OscConfig+0x194>
 80027c8:	e000      	b.n	80027cc <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80027ca:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0301 	and.w	r3, r3, #1
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d058      	beq.n	800288a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	2b08      	cmp	r3, #8
 80027dc:	d005      	beq.n	80027ea <HAL_RCC_OscConfig+0x1d2>
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	2b0c      	cmp	r3, #12
 80027e2:	d108      	bne.n	80027f6 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	2b03      	cmp	r3, #3
 80027e8:	d105      	bne.n	80027f6 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d14b      	bne.n	800288a <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e289      	b.n	8002d0a <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80027f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002808:	4313      	orrs	r3, r2
 800280a:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002814:	d102      	bne.n	800281c <HAL_RCC_OscConfig+0x204>
 8002816:	f7ff fcae 	bl	8002176 <LL_RCC_HSE_Enable>
 800281a:	e00d      	b.n	8002838 <HAL_RCC_OscConfig+0x220>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002824:	d104      	bne.n	8002830 <HAL_RCC_OscConfig+0x218>
 8002826:	f7ff fc79 	bl	800211c <LL_RCC_HSE_EnableTcxo>
 800282a:	f7ff fca4 	bl	8002176 <LL_RCC_HSE_Enable>
 800282e:	e003      	b.n	8002838 <HAL_RCC_OscConfig+0x220>
 8002830:	f7ff fcaf 	bl	8002192 <LL_RCC_HSE_Disable>
 8002834:	f7ff fc80 	bl	8002138 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d012      	beq.n	8002866 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002840:	f7fe fdec 	bl	800141c <HAL_GetTick>
 8002844:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002846:	e008      	b.n	800285a <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002848:	f7fe fde8 	bl	800141c <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b64      	cmp	r3, #100	; 0x64
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e257      	b.n	8002d0a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 800285a:	f7ff fca8 	bl	80021ae <LL_RCC_HSE_IsReady>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d0f1      	beq.n	8002848 <HAL_RCC_OscConfig+0x230>
 8002864:	e011      	b.n	800288a <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002866:	f7fe fdd9 	bl	800141c <HAL_GetTick>
 800286a:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800286c:	e008      	b.n	8002880 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800286e:	f7fe fdd5 	bl	800141c <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	2b64      	cmp	r3, #100	; 0x64
 800287a:	d901      	bls.n	8002880 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e244      	b.n	8002d0a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002880:	f7ff fc95 	bl	80021ae <LL_RCC_HSE_IsReady>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1f1      	bne.n	800286e <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d046      	beq.n	8002924 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	2b04      	cmp	r3, #4
 800289a:	d005      	beq.n	80028a8 <HAL_RCC_OscConfig+0x290>
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	2b0c      	cmp	r3, #12
 80028a0:	d10e      	bne.n	80028c0 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80028a2:	69bb      	ldr	r3, [r7, #24]
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d10b      	bne.n	80028c0 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d101      	bne.n	80028b4 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e22a      	b.n	8002d0a <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	695b      	ldr	r3, [r3, #20]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7ff fcb6 	bl	800222a <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80028be:	e031      	b.n	8002924 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	691b      	ldr	r3, [r3, #16]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d019      	beq.n	80028fc <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028c8:	f7ff fc82 	bl	80021d0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028cc:	f7fe fda6 	bl	800141c <HAL_GetTick>
 80028d0:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028d4:	f7fe fda2 	bl	800141c <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e211      	b.n	8002d0a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 80028e6:	f7ff fc8f 	bl	8002208 <LL_RCC_HSI_IsReady>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d0f1      	beq.n	80028d4 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	695b      	ldr	r3, [r3, #20]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7ff fc98 	bl	800222a <LL_RCC_HSI_SetCalibTrimming>
 80028fa:	e013      	b.n	8002924 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028fc:	f7ff fc76 	bl	80021ec <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002900:	f7fe fd8c 	bl	800141c <HAL_GetTick>
 8002904:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002908:	f7fe fd88 	bl	800141c <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e1f7      	b.n	8002d0a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 800291a:	f7ff fc75 	bl	8002208 <LL_RCC_HSI_IsReady>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1f1      	bne.n	8002908 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0308 	and.w	r3, r3, #8
 800292c:	2b00      	cmp	r3, #0
 800292e:	d06e      	beq.n	8002a0e <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d056      	beq.n	80029e6 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8002938:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800293c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002940:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	69da      	ldr	r2, [r3, #28]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f003 0310 	and.w	r3, r3, #16
 800294c:	429a      	cmp	r2, r3
 800294e:	d031      	beq.n	80029b4 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d006      	beq.n	8002968 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002960:	2b00      	cmp	r3, #0
 8002962:	d101      	bne.n	8002968 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e1d0      	b.n	8002d0a <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	2b00      	cmp	r3, #0
 8002970:	d013      	beq.n	800299a <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8002972:	f7ff fc8f 	bl	8002294 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002976:	f7fe fd51 	bl	800141c <HAL_GetTick>
 800297a:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 800297c:	e008      	b.n	8002990 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800297e:	f7fe fd4d 	bl	800141c <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b11      	cmp	r3, #17
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e1bc      	b.n	8002d0a <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8002990:	f7ff fc90 	bl	80022b4 <LL_RCC_LSI_IsReady>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1f1      	bne.n	800297e <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800299a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800299e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029a2:	f023 0210 	bic.w	r2, r3, #16
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	69db      	ldr	r3, [r3, #28]
 80029aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029ae:	4313      	orrs	r3, r2
 80029b0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029b4:	f7ff fc5e 	bl	8002274 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029b8:	f7fe fd30 	bl	800141c <HAL_GetTick>
 80029bc:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80029be:	e00c      	b.n	80029da <HAL_RCC_OscConfig+0x3c2>
 80029c0:	20000000 	.word	0x20000000
 80029c4:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029c8:	f7fe fd28 	bl	800141c <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b11      	cmp	r3, #17
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e197      	b.n	8002d0a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 80029da:	f7ff fc6b 	bl	80022b4 <LL_RCC_LSI_IsReady>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d0f1      	beq.n	80029c8 <HAL_RCC_OscConfig+0x3b0>
 80029e4:	e013      	b.n	8002a0e <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029e6:	f7ff fc55 	bl	8002294 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ea:	f7fe fd17 	bl	800141c <HAL_GetTick>
 80029ee:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80029f0:	e008      	b.n	8002a04 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029f2:	f7fe fd13 	bl	800141c <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	2b11      	cmp	r3, #17
 80029fe:	d901      	bls.n	8002a04 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e182      	b.n	8002d0a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8002a04:	f7ff fc56 	bl	80022b4 <LL_RCC_LSI_IsReady>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1f1      	bne.n	80029f2 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0304 	and.w	r3, r3, #4
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f000 80d8 	beq.w	8002bcc <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002a1c:	f7ff fb6c 	bl	80020f8 <LL_PWR_IsEnabledBkUpAccess>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d113      	bne.n	8002a4e <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002a26:	f7ff fb4d 	bl	80020c4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a2a:	f7fe fcf7 	bl	800141c <HAL_GetTick>
 8002a2e:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002a30:	e008      	b.n	8002a44 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a32:	f7fe fcf3 	bl	800141c <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d901      	bls.n	8002a44 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e162      	b.n	8002d0a <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002a44:	f7ff fb58 	bl	80020f8 <LL_PWR_IsEnabledBkUpAccess>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d0f1      	beq.n	8002a32 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d07b      	beq.n	8002b4e <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	2b85      	cmp	r3, #133	; 0x85
 8002a5c:	d003      	beq.n	8002a66 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	2b05      	cmp	r3, #5
 8002a64:	d109      	bne.n	8002a7a <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002a66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a72:	f043 0304 	orr.w	r3, r3, #4
 8002a76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a7a:	f7fe fccf 	bl	800141c <HAL_GetTick>
 8002a7e:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002a80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a8c:	f043 0301 	orr.w	r3, r3, #1
 8002a90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002a94:	e00a      	b.n	8002aac <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a96:	f7fe fcc1 	bl	800141c <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d901      	bls.n	8002aac <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e12e      	b.n	8002d0a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002aac:	f7ff fbd1 	bl	8002252 <LL_RCC_LSE_IsReady>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d0ef      	beq.n	8002a96 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	2b81      	cmp	r3, #129	; 0x81
 8002abc:	d003      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	2b85      	cmp	r3, #133	; 0x85
 8002ac4:	d121      	bne.n	8002b0a <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac6:	f7fe fca9 	bl	800141c <HAL_GetTick>
 8002aca:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002acc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ad0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002adc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002ae0:	e00a      	b.n	8002af8 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ae2:	f7fe fc9b 	bl	800141c <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d901      	bls.n	8002af8 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e108      	b.n	8002d0a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002af8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0ec      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002b08:	e060      	b.n	8002bcc <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b0a:	f7fe fc87 	bl	800141c <HAL_GetTick>
 8002b0e:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002b10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002b24:	e00a      	b.n	8002b3c <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b26:	f7fe fc79 	bl	800141c <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d901      	bls.n	8002b3c <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e0e6      	b.n	8002d0a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002b3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1ec      	bne.n	8002b26 <HAL_RCC_OscConfig+0x50e>
 8002b4c:	e03e      	b.n	8002bcc <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b4e:	f7fe fc65 	bl	800141c <HAL_GetTick>
 8002b52:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002b54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002b68:	e00a      	b.n	8002b80 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b6a:	f7fe fc57 	bl	800141c <HAL_GetTick>
 8002b6e:	4602      	mov	r2, r0
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d901      	bls.n	8002b80 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e0c4      	b.n	8002d0a <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002b80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d1ec      	bne.n	8002b6a <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b90:	f7fe fc44 	bl	800141c <HAL_GetTick>
 8002b94:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002b96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b9e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ba2:	f023 0301 	bic.w	r3, r3, #1
 8002ba6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002baa:	e00a      	b.n	8002bc2 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bac:	f7fe fc36 	bl	800141c <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e0a3      	b.n	8002d0a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002bc2:	f7ff fb46 	bl	8002252 <LL_RCC_LSE_IsReady>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d1ef      	bne.n	8002bac <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f000 8099 	beq.w	8002d08 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	2b0c      	cmp	r3, #12
 8002bda:	d06c      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d14b      	bne.n	8002c7c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002be4:	f7ff fc87 	bl	80024f6 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be8:	f7fe fc18 	bl	800141c <HAL_GetTick>
 8002bec:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bf0:	f7fe fc14 	bl	800141c <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b0a      	cmp	r3, #10
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e083      	b.n	8002d0a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002c02:	f7ff fc86 	bl	8002512 <LL_RCC_PLL_IsReady>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d1f1      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c10:	68da      	ldr	r2, [r3, #12]
 8002c12:	4b40      	ldr	r3, [pc, #256]	; (8002d14 <HAL_RCC_OscConfig+0x6fc>)
 8002c14:	4013      	ands	r3, r2
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c1e:	4311      	orrs	r1, r2
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c24:	0212      	lsls	r2, r2, #8
 8002c26:	4311      	orrs	r1, r2
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002c2c:	4311      	orrs	r1, r2
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c32:	4311      	orrs	r1, r2
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c42:	f7ff fc4a 	bl	80024da <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c54:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c56:	f7fe fbe1 	bl	800141c <HAL_GetTick>
 8002c5a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8002c5c:	e008      	b.n	8002c70 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c5e:	f7fe fbdd 	bl	800141c <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b0a      	cmp	r3, #10
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e04c      	b.n	8002d0a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8002c70:	f7ff fc4f 	bl	8002512 <LL_RCC_PLL_IsReady>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d0f1      	beq.n	8002c5e <HAL_RCC_OscConfig+0x646>
 8002c7a:	e045      	b.n	8002d08 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c7c:	f7ff fc3b 	bl	80024f6 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c80:	f7fe fbcc 	bl	800141c <HAL_GetTick>
 8002c84:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c88:	f7fe fbc8 	bl	800141c <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b0a      	cmp	r3, #10
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e037      	b.n	8002d0a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002c9a:	f7ff fc3a 	bl	8002512 <LL_RCC_PLL_IsReady>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d1f1      	bne.n	8002c88 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002ca4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ca8:	68da      	ldr	r2, [r3, #12]
 8002caa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cae:	4b1a      	ldr	r3, [pc, #104]	; (8002d18 <HAL_RCC_OscConfig+0x700>)
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	60cb      	str	r3, [r1, #12]
 8002cb4:	e028      	b.n	8002d08 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d101      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e023      	b.n	8002d0a <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	f003 0203 	and.w	r2, r3, #3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d115      	bne.n	8002d04 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d10e      	bne.n	8002d04 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf0:	021b      	lsls	r3, r3, #8
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d106      	bne.n	8002d04 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d001      	beq.n	8002d08 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e000      	b.n	8002d0a <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3720      	adds	r7, #32
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	11c1808c 	.word	0x11c1808c
 8002d18:	eefefffc 	.word	0xeefefffc

08002d1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d101      	bne.n	8002d30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e10f      	b.n	8002f50 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d30:	4b89      	ldr	r3, [pc, #548]	; (8002f58 <HAL_RCC_ClockConfig+0x23c>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0307 	and.w	r3, r3, #7
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d91b      	bls.n	8002d76 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d3e:	4b86      	ldr	r3, [pc, #536]	; (8002f58 <HAL_RCC_ClockConfig+0x23c>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f023 0207 	bic.w	r2, r3, #7
 8002d46:	4984      	ldr	r1, [pc, #528]	; (8002f58 <HAL_RCC_ClockConfig+0x23c>)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d4e:	f7fe fb65 	bl	800141c <HAL_GetTick>
 8002d52:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d54:	e008      	b.n	8002d68 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002d56:	f7fe fb61 	bl	800141c <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d901      	bls.n	8002d68 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e0f3      	b.n	8002f50 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d68:	4b7b      	ldr	r3, [pc, #492]	; (8002f58 <HAL_RCC_ClockConfig+0x23c>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0307 	and.w	r3, r3, #7
 8002d70:	683a      	ldr	r2, [r7, #0]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d1ef      	bne.n	8002d56 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d016      	beq.n	8002db0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7ff fb2a 	bl	80023e0 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002d8c:	f7fe fb46 	bl	800141c <HAL_GetTick>
 8002d90:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002d92:	e008      	b.n	8002da6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002d94:	f7fe fb42 	bl	800141c <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e0d4      	b.n	8002f50 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002da6:	f7ff fbf2 	bl	800258e <LL_RCC_IsActiveFlag_HPRE>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d0f1      	beq.n	8002d94 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d016      	beq.n	8002dea <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	695b      	ldr	r3, [r3, #20]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7ff fb20 	bl	8002406 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002dc6:	f7fe fb29 	bl	800141c <HAL_GetTick>
 8002dca:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002dcc:	e008      	b.n	8002de0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002dce:	f7fe fb25 	bl	800141c <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d901      	bls.n	8002de0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e0b7      	b.n	8002f50 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002de0:	f7ff fbe6 	bl	80025b0 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d0f1      	beq.n	8002dce <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0304 	and.w	r3, r3, #4
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d016      	beq.n	8002e24 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7ff fb19 	bl	8002432 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002e00:	f7fe fb0c 	bl	800141c <HAL_GetTick>
 8002e04:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002e06:	e008      	b.n	8002e1a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002e08:	f7fe fb08 	bl	800141c <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e09a      	b.n	8002f50 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002e1a:	f7ff fbdb 	bl	80025d4 <LL_RCC_IsActiveFlag_PPRE1>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d0f1      	beq.n	8002e08 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 0308 	and.w	r3, r3, #8
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d017      	beq.n	8002e60 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7ff fb0e 	bl	8002458 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002e3c:	f7fe faee 	bl	800141c <HAL_GetTick>
 8002e40:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002e44:	f7fe faea 	bl	800141c <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e07c      	b.n	8002f50 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002e56:	f7ff fbce 	bl	80025f6 <LL_RCC_IsActiveFlag_PPRE2>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d0f1      	beq.n	8002e44 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0301 	and.w	r3, r3, #1
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d043      	beq.n	8002ef4 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d106      	bne.n	8002e82 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002e74:	f7ff f99b 	bl	80021ae <LL_RCC_HSE_IsReady>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d11e      	bne.n	8002ebc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e066      	b.n	8002f50 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	2b03      	cmp	r3, #3
 8002e88:	d106      	bne.n	8002e98 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002e8a:	f7ff fb42 	bl	8002512 <LL_RCC_PLL_IsReady>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d113      	bne.n	8002ebc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e05b      	b.n	8002f50 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d106      	bne.n	8002eae <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002ea0:	f7ff fa35 	bl	800230e <LL_RCC_MSI_IsReady>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d108      	bne.n	8002ebc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e050      	b.n	8002f50 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002eae:	f7ff f9ab 	bl	8002208 <LL_RCC_HSI_IsReady>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d101      	bne.n	8002ebc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e049      	b.n	8002f50 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7ff fa6f 	bl	80023a4 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ec6:	f7fe faa9 	bl	800141c <HAL_GetTick>
 8002eca:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ecc:	e00a      	b.n	8002ee4 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ece:	f7fe faa5 	bl	800141c <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d901      	bls.n	8002ee4 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e035      	b.n	8002f50 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ee4:	f7ff fa71 	bl	80023ca <LL_RCC_GetSysClkSource>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d1ec      	bne.n	8002ece <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ef4:	4b18      	ldr	r3, [pc, #96]	; (8002f58 <HAL_RCC_ClockConfig+0x23c>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0307 	and.w	r3, r3, #7
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d21b      	bcs.n	8002f3a <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f02:	4b15      	ldr	r3, [pc, #84]	; (8002f58 <HAL_RCC_ClockConfig+0x23c>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f023 0207 	bic.w	r2, r3, #7
 8002f0a:	4913      	ldr	r1, [pc, #76]	; (8002f58 <HAL_RCC_ClockConfig+0x23c>)
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f12:	f7fe fa83 	bl	800141c <HAL_GetTick>
 8002f16:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f18:	e008      	b.n	8002f2c <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002f1a:	f7fe fa7f 	bl	800141c <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d901      	bls.n	8002f2c <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e011      	b.n	8002f50 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f2c:	4b0a      	ldr	r3, [pc, #40]	; (8002f58 <HAL_RCC_ClockConfig+0x23c>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0307 	and.w	r3, r3, #7
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d1ef      	bne.n	8002f1a <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002f3a:	f000 f8b3 	bl	80030a4 <HAL_RCC_GetHCLKFreq>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	4a06      	ldr	r2, [pc, #24]	; (8002f5c <HAL_RCC_ClockConfig+0x240>)
 8002f42:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8002f44:	4b06      	ldr	r3, [pc, #24]	; (8002f60 <HAL_RCC_ClockConfig+0x244>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7fe f8b5 	bl	80010b8 <HAL_InitTick>
 8002f4e:	4603      	mov	r3, r0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3710      	adds	r7, #16
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	58004000 	.word	0x58004000
 8002f5c:	20000000 	.word	0x20000000
 8002f60:	20000004 	.word	0x20000004

08002f64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f64:	b590      	push	{r4, r7, lr}
 8002f66:	b087      	sub	sp, #28
 8002f68:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f72:	f7ff fa2a 	bl	80023ca <LL_RCC_GetSysClkSource>
 8002f76:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f78:	f7ff fafe 	bl	8002578 <LL_RCC_PLL_GetMainSource>
 8002f7c:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d005      	beq.n	8002f90 <HAL_RCC_GetSysClockFreq+0x2c>
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	2b0c      	cmp	r3, #12
 8002f88:	d139      	bne.n	8002ffe <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d136      	bne.n	8002ffe <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002f90:	f7ff f9cd 	bl	800232e <LL_RCC_MSI_IsEnabledRangeSelect>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d115      	bne.n	8002fc6 <HAL_RCC_GetSysClockFreq+0x62>
 8002f9a:	f7ff f9c8 	bl	800232e <LL_RCC_MSI_IsEnabledRangeSelect>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d106      	bne.n	8002fb2 <HAL_RCC_GetSysClockFreq+0x4e>
 8002fa4:	f7ff f9d3 	bl	800234e <LL_RCC_MSI_GetRange>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	0a1b      	lsrs	r3, r3, #8
 8002fac:	f003 030f 	and.w	r3, r3, #15
 8002fb0:	e005      	b.n	8002fbe <HAL_RCC_GetSysClockFreq+0x5a>
 8002fb2:	f7ff f9d7 	bl	8002364 <LL_RCC_MSI_GetRangeAfterStandby>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	0a1b      	lsrs	r3, r3, #8
 8002fba:	f003 030f 	and.w	r3, r3, #15
 8002fbe:	4a36      	ldr	r2, [pc, #216]	; (8003098 <HAL_RCC_GetSysClockFreq+0x134>)
 8002fc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fc4:	e014      	b.n	8002ff0 <HAL_RCC_GetSysClockFreq+0x8c>
 8002fc6:	f7ff f9b2 	bl	800232e <LL_RCC_MSI_IsEnabledRangeSelect>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d106      	bne.n	8002fde <HAL_RCC_GetSysClockFreq+0x7a>
 8002fd0:	f7ff f9bd 	bl	800234e <LL_RCC_MSI_GetRange>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	091b      	lsrs	r3, r3, #4
 8002fd8:	f003 030f 	and.w	r3, r3, #15
 8002fdc:	e005      	b.n	8002fea <HAL_RCC_GetSysClockFreq+0x86>
 8002fde:	f7ff f9c1 	bl	8002364 <LL_RCC_MSI_GetRangeAfterStandby>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	091b      	lsrs	r3, r3, #4
 8002fe6:	f003 030f 	and.w	r3, r3, #15
 8002fea:	4a2b      	ldr	r2, [pc, #172]	; (8003098 <HAL_RCC_GetSysClockFreq+0x134>)
 8002fec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ff0:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d115      	bne.n	8003024 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002ffc:	e012      	b.n	8003024 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	2b04      	cmp	r3, #4
 8003002:	d102      	bne.n	800300a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003004:	4b25      	ldr	r3, [pc, #148]	; (800309c <HAL_RCC_GetSysClockFreq+0x138>)
 8003006:	617b      	str	r3, [r7, #20]
 8003008:	e00c      	b.n	8003024 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	2b08      	cmp	r3, #8
 800300e:	d109      	bne.n	8003024 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003010:	f7ff f8a0 	bl	8002154 <LL_RCC_HSE_IsEnabledDiv2>
 8003014:	4603      	mov	r3, r0
 8003016:	2b01      	cmp	r3, #1
 8003018:	d102      	bne.n	8003020 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800301a:	4b20      	ldr	r3, [pc, #128]	; (800309c <HAL_RCC_GetSysClockFreq+0x138>)
 800301c:	617b      	str	r3, [r7, #20]
 800301e:	e001      	b.n	8003024 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003020:	4b1f      	ldr	r3, [pc, #124]	; (80030a0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003022:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003024:	f7ff f9d1 	bl	80023ca <LL_RCC_GetSysClkSource>
 8003028:	4603      	mov	r3, r0
 800302a:	2b0c      	cmp	r3, #12
 800302c:	d12f      	bne.n	800308e <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800302e:	f7ff faa3 	bl	8002578 <LL_RCC_PLL_GetMainSource>
 8003032:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b02      	cmp	r3, #2
 8003038:	d003      	beq.n	8003042 <HAL_RCC_GetSysClockFreq+0xde>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2b03      	cmp	r3, #3
 800303e:	d003      	beq.n	8003048 <HAL_RCC_GetSysClockFreq+0xe4>
 8003040:	e00d      	b.n	800305e <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003042:	4b16      	ldr	r3, [pc, #88]	; (800309c <HAL_RCC_GetSysClockFreq+0x138>)
 8003044:	60fb      	str	r3, [r7, #12]
        break;
 8003046:	e00d      	b.n	8003064 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003048:	f7ff f884 	bl	8002154 <LL_RCC_HSE_IsEnabledDiv2>
 800304c:	4603      	mov	r3, r0
 800304e:	2b01      	cmp	r3, #1
 8003050:	d102      	bne.n	8003058 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003052:	4b12      	ldr	r3, [pc, #72]	; (800309c <HAL_RCC_GetSysClockFreq+0x138>)
 8003054:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003056:	e005      	b.n	8003064 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8003058:	4b11      	ldr	r3, [pc, #68]	; (80030a0 <HAL_RCC_GetSysClockFreq+0x13c>)
 800305a:	60fb      	str	r3, [r7, #12]
        break;
 800305c:	e002      	b.n	8003064 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	60fb      	str	r3, [r7, #12]
        break;
 8003062:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003064:	f7ff fa66 	bl	8002534 <LL_RCC_PLL_GetN>
 8003068:	4602      	mov	r2, r0
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	fb03 f402 	mul.w	r4, r3, r2
 8003070:	f7ff fa77 	bl	8002562 <LL_RCC_PLL_GetDivider>
 8003074:	4603      	mov	r3, r0
 8003076:	091b      	lsrs	r3, r3, #4
 8003078:	3301      	adds	r3, #1
 800307a:	fbb4 f4f3 	udiv	r4, r4, r3
 800307e:	f7ff fa65 	bl	800254c <LL_RCC_PLL_GetR>
 8003082:	4603      	mov	r3, r0
 8003084:	0f5b      	lsrs	r3, r3, #29
 8003086:	3301      	adds	r3, #1
 8003088:	fbb4 f3f3 	udiv	r3, r4, r3
 800308c:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800308e:	697b      	ldr	r3, [r7, #20]
}
 8003090:	4618      	mov	r0, r3
 8003092:	371c      	adds	r7, #28
 8003094:	46bd      	mov	sp, r7
 8003096:	bd90      	pop	{r4, r7, pc}
 8003098:	0800a96c 	.word	0x0800a96c
 800309c:	00f42400 	.word	0x00f42400
 80030a0:	01e84800 	.word	0x01e84800

080030a4 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030a4:	b598      	push	{r3, r4, r7, lr}
 80030a6:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80030a8:	f7ff ff5c 	bl	8002f64 <HAL_RCC_GetSysClockFreq>
 80030ac:	4604      	mov	r4, r0
 80030ae:	f7ff f9e6 	bl	800247e <LL_RCC_GetAHBPrescaler>
 80030b2:	4603      	mov	r3, r0
 80030b4:	091b      	lsrs	r3, r3, #4
 80030b6:	f003 030f 	and.w	r3, r3, #15
 80030ba:	4a03      	ldr	r2, [pc, #12]	; (80030c8 <HAL_RCC_GetHCLKFreq+0x24>)
 80030bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030c0:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	bd98      	pop	{r3, r4, r7, pc}
 80030c8:	0800a90c 	.word	0x0800a90c

080030cc <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030cc:	b598      	push	{r3, r4, r7, lr}
 80030ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80030d0:	f7ff ffe8 	bl	80030a4 <HAL_RCC_GetHCLKFreq>
 80030d4:	4604      	mov	r4, r0
 80030d6:	f7ff f9ea 	bl	80024ae <LL_RCC_GetAPB1Prescaler>
 80030da:	4603      	mov	r3, r0
 80030dc:	0a1b      	lsrs	r3, r3, #8
 80030de:	4a03      	ldr	r2, [pc, #12]	; (80030ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80030e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030e4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	bd98      	pop	{r3, r4, r7, pc}
 80030ec:	0800a94c 	.word	0x0800a94c

080030f0 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030f0:	b598      	push	{r3, r4, r7, lr}
 80030f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80030f4:	f7ff ffd6 	bl	80030a4 <HAL_RCC_GetHCLKFreq>
 80030f8:	4604      	mov	r4, r0
 80030fa:	f7ff f9e3 	bl	80024c4 <LL_RCC_GetAPB2Prescaler>
 80030fe:	4603      	mov	r3, r0
 8003100:	0adb      	lsrs	r3, r3, #11
 8003102:	4a03      	ldr	r2, [pc, #12]	; (8003110 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003108:	fa24 f303 	lsr.w	r3, r4, r3
}
 800310c:	4618      	mov	r0, r3
 800310e:	bd98      	pop	{r3, r4, r7, pc}
 8003110:	0800a94c 	.word	0x0800a94c

08003114 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer to the Flash Latency variable.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003114:	b480      	push	{r7}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  uint32_t regvalue;

  /* Check the parameters */
  if ((RCC_ClkInitStruct != NULL) && (pFLatency != NULL))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d02d      	beq.n	8003180 <HAL_RCC_GetClockConfig+0x6c>
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d02a      	beq.n	8003180 <HAL_RCC_GetClockConfig+0x6c>
  {
    /* Set all possible values for the Clock type parameter --------------------*/
    RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 \
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	224f      	movs	r2, #79	; 0x4f
 800312e:	601a      	str	r2, [r3, #0]
#if defined(DUAL_CORE)
    RCC_ClkInitStruct->ClockType |= RCC_CLOCKTYPE_HCLK2;
#endif  /* DUAL_CORE */

    /* Get Clock Configuration Register */
    regvalue = RCC->CFGR;
 8003130:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	60fb      	str	r3, [r7, #12]

    /* Get the SYSCLK configuration --------------------------------------------*/
    RCC_ClkInitStruct->SYSCLKSource = (regvalue & RCC_CFGR_SWS);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f003 020c 	and.w	r2, r3, #12
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	605a      	str	r2, [r3, #4]

    /* Get the HCLK configuration ----------------------------------------------*/
    RCC_ClkInitStruct->AHBCLKDivider = (regvalue & RCC_CFGR_HPRE);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	609a      	str	r2, [r3, #8]

    /* Get the APB1 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB1CLKDivider = (regvalue & RCC_CFGR_PPRE1);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	60da      	str	r2, [r3, #12]

    /* Get the APB2 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB2CLKDivider = (regvalue & RCC_CFGR_PPRE2);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	611a      	str	r2, [r3, #16]

    /* Get Extended Clock Recovery Register */
    regvalue = RCC->EXTCFGR;
 8003160:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003164:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003168:	60fb      	str	r3, [r7, #12]
    /* Get the AHBCLK2Divider configuration ------------------------------------*/
    RCC_ClkInitStruct->AHBCLK2Divider =  (regvalue & RCC_EXTCFGR_C2HPRE);
#endif  /* DUAL_CORE */

    /* Get the AHBCLK3Divider configuration ------------------------------------*/
    RCC_ClkInitStruct->AHBCLK3Divider = ((regvalue & RCC_EXTCFGR_SHDHPRE) << 4);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	011b      	lsls	r3, r3, #4
 800316e:	b2da      	uxtb	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	615a      	str	r2, [r3, #20]

    /* Get the Flash Wait State (Latency) configuration ------------------------*/
    *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003174:	4b05      	ldr	r3, [pc, #20]	; (800318c <HAL_RCC_GetClockConfig+0x78>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0207 	and.w	r2, r3, #7
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	601a      	str	r2, [r3, #0]
  }
}
 8003180:	bf00      	nop
 8003182:	3714      	adds	r7, #20
 8003184:	46bd      	mov	sp, r7
 8003186:	bc80      	pop	{r7}
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	58004000 	.word	0x58004000

08003190 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003190:	b590      	push	{r4, r7, lr}
 8003192:	b085      	sub	sp, #20
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	091b      	lsrs	r3, r3, #4
 800319c:	f003 030f 	and.w	r3, r3, #15
 80031a0:	4a10      	ldr	r2, [pc, #64]	; (80031e4 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80031a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031a6:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80031a8:	f7ff f974 	bl	8002494 <LL_RCC_GetAHB3Prescaler>
 80031ac:	4603      	mov	r3, r0
 80031ae:	091b      	lsrs	r3, r3, #4
 80031b0:	f003 030f 	and.w	r3, r3, #15
 80031b4:	4a0c      	ldr	r2, [pc, #48]	; (80031e8 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80031b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031ba:	68fa      	ldr	r2, [r7, #12]
 80031bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c0:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	4a09      	ldr	r2, [pc, #36]	; (80031ec <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80031c6:	fba2 2303 	umull	r2, r3, r2, r3
 80031ca:	0c9c      	lsrs	r4, r3, #18
 80031cc:	f7fe ff88 	bl	80020e0 <HAL_PWREx_GetVoltageRange>
 80031d0:	4603      	mov	r3, r0
 80031d2:	4619      	mov	r1, r3
 80031d4:	4620      	mov	r0, r4
 80031d6:	f000 f80b 	bl	80031f0 <RCC_SetFlashLatency>
 80031da:	4603      	mov	r3, r0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3714      	adds	r7, #20
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd90      	pop	{r4, r7, pc}
 80031e4:	0800a96c 	.word	0x0800a96c
 80031e8:	0800a90c 	.word	0x0800a90c
 80031ec:	431bde83 	.word	0x431bde83

080031f0 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b08e      	sub	sp, #56	; 0x38
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80031fa:	4a3a      	ldr	r2, [pc, #232]	; (80032e4 <RCC_SetFlashLatency+0xf4>)
 80031fc:	f107 0320 	add.w	r3, r7, #32
 8003200:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003204:	6018      	str	r0, [r3, #0]
 8003206:	3304      	adds	r3, #4
 8003208:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800320a:	4a37      	ldr	r2, [pc, #220]	; (80032e8 <RCC_SetFlashLatency+0xf8>)
 800320c:	f107 0318 	add.w	r3, r7, #24
 8003210:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003214:	6018      	str	r0, [r3, #0]
 8003216:	3304      	adds	r3, #4
 8003218:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800321a:	4a34      	ldr	r2, [pc, #208]	; (80032ec <RCC_SetFlashLatency+0xfc>)
 800321c:	f107 030c 	add.w	r3, r7, #12
 8003220:	ca07      	ldmia	r2, {r0, r1, r2}
 8003222:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003226:	2300      	movs	r3, #0
 8003228:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003230:	d11b      	bne.n	800326a <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003232:	2300      	movs	r3, #0
 8003234:	633b      	str	r3, [r7, #48]	; 0x30
 8003236:	e014      	b.n	8003262 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800323a:	005b      	lsls	r3, r3, #1
 800323c:	3338      	adds	r3, #56	; 0x38
 800323e:	443b      	add	r3, r7
 8003240:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003244:	461a      	mov	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4293      	cmp	r3, r2
 800324a:	d807      	bhi.n	800325c <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800324c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	3338      	adds	r3, #56	; 0x38
 8003252:	443b      	add	r3, r7
 8003254:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003258:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800325a:	e021      	b.n	80032a0 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800325c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800325e:	3301      	adds	r3, #1
 8003260:	633b      	str	r3, [r7, #48]	; 0x30
 8003262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003264:	2b02      	cmp	r3, #2
 8003266:	d9e7      	bls.n	8003238 <RCC_SetFlashLatency+0x48>
 8003268:	e01a      	b.n	80032a0 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800326a:	2300      	movs	r3, #0
 800326c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800326e:	e014      	b.n	800329a <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	3338      	adds	r3, #56	; 0x38
 8003276:	443b      	add	r3, r7
 8003278:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 800327c:	461a      	mov	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4293      	cmp	r3, r2
 8003282:	d807      	bhi.n	8003294 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	3338      	adds	r3, #56	; 0x38
 800328a:	443b      	add	r3, r7
 800328c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003290:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003292:	e005      	b.n	80032a0 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003296:	3301      	adds	r3, #1
 8003298:	62fb      	str	r3, [r7, #44]	; 0x2c
 800329a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800329c:	2b02      	cmp	r3, #2
 800329e:	d9e7      	bls.n	8003270 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80032a0:	4b13      	ldr	r3, [pc, #76]	; (80032f0 <RCC_SetFlashLatency+0x100>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f023 0207 	bic.w	r2, r3, #7
 80032a8:	4911      	ldr	r1, [pc, #68]	; (80032f0 <RCC_SetFlashLatency+0x100>)
 80032aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032ac:	4313      	orrs	r3, r2
 80032ae:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80032b0:	f7fe f8b4 	bl	800141c <HAL_GetTick>
 80032b4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80032b6:	e008      	b.n	80032ca <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80032b8:	f7fe f8b0 	bl	800141c <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d901      	bls.n	80032ca <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e007      	b.n	80032da <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80032ca:	4b09      	ldr	r3, [pc, #36]	; (80032f0 <RCC_SetFlashLatency+0x100>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0307 	and.w	r3, r3, #7
 80032d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d1ef      	bne.n	80032b8 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3738      	adds	r7, #56	; 0x38
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	0800a8ac 	.word	0x0800a8ac
 80032e8:	0800a8b4 	.word	0x0800a8b4
 80032ec:	0800a8bc 	.word	0x0800a8bc
 80032f0:	58004000 	.word	0x58004000

080032f4 <LL_RCC_LSE_IsReady>:
{
 80032f4:	b480      	push	{r7}
 80032f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80032f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003300:	f003 0302 	and.w	r3, r3, #2
 8003304:	2b02      	cmp	r3, #2
 8003306:	d101      	bne.n	800330c <LL_RCC_LSE_IsReady+0x18>
 8003308:	2301      	movs	r3, #1
 800330a:	e000      	b.n	800330e <LL_RCC_LSE_IsReady+0x1a>
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	46bd      	mov	sp, r7
 8003312:	bc80      	pop	{r7}
 8003314:	4770      	bx	lr

08003316 <LL_RCC_SetUSARTClockSource>:
{
 8003316:	b480      	push	{r7}
 8003318:	b083      	sub	sp, #12
 800331a:	af00      	add	r7, sp, #0
 800331c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800331e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003322:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	0c1b      	lsrs	r3, r3, #16
 800332a:	43db      	mvns	r3, r3
 800332c:	401a      	ands	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	b29b      	uxth	r3, r3
 8003332:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003336:	4313      	orrs	r3, r2
 8003338:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	bc80      	pop	{r7}
 8003344:	4770      	bx	lr

08003346 <LL_RCC_SetI2SClockSource>:
{
 8003346:	b480      	push	{r7}
 8003348:	b083      	sub	sp, #12
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800334e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003356:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800335a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4313      	orrs	r3, r2
 8003362:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003366:	bf00      	nop
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	bc80      	pop	{r7}
 800336e:	4770      	bx	lr

08003370 <LL_RCC_SetLPUARTClockSource>:
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003378:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800337c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003380:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003384:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4313      	orrs	r3, r2
 800338c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	bc80      	pop	{r7}
 8003398:	4770      	bx	lr

0800339a <LL_RCC_SetI2CClockSource>:
{
 800339a:	b480      	push	{r7}
 800339c:	b083      	sub	sp, #12
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80033a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033a6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	091b      	lsrs	r3, r3, #4
 80033ae:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80033b2:	43db      	mvns	r3, r3
 80033b4:	401a      	ands	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	011b      	lsls	r3, r3, #4
 80033ba:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80033be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033c2:	4313      	orrs	r3, r2
 80033c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bc80      	pop	{r7}
 80033d0:	4770      	bx	lr

080033d2 <LL_RCC_SetLPTIMClockSource>:
{
 80033d2:	b480      	push	{r7}
 80033d4:	b083      	sub	sp, #12
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80033da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033de:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	0c1b      	lsrs	r3, r3, #16
 80033e6:	041b      	lsls	r3, r3, #16
 80033e8:	43db      	mvns	r3, r3
 80033ea:	401a      	ands	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	041b      	lsls	r3, r3, #16
 80033f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033f4:	4313      	orrs	r3, r2
 80033f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80033fa:	bf00      	nop
 80033fc:	370c      	adds	r7, #12
 80033fe:	46bd      	mov	sp, r7
 8003400:	bc80      	pop	{r7}
 8003402:	4770      	bx	lr

08003404 <LL_RCC_SetRNGClockSource>:
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800340c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003414:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003418:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4313      	orrs	r3, r2
 8003420:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	bc80      	pop	{r7}
 800342c:	4770      	bx	lr

0800342e <LL_RCC_SetADCClockSource>:
{
 800342e:	b480      	push	{r7}
 8003430:	b083      	sub	sp, #12
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003436:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800343a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800343e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003442:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4313      	orrs	r3, r2
 800344a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800344e:	bf00      	nop
 8003450:	370c      	adds	r7, #12
 8003452:	46bd      	mov	sp, r7
 8003454:	bc80      	pop	{r7}
 8003456:	4770      	bx	lr

08003458 <LL_RCC_SetRTCClockSource>:
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003460:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003468:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800346c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4313      	orrs	r3, r2
 8003474:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	bc80      	pop	{r7}
 8003480:	4770      	bx	lr

08003482 <LL_RCC_GetRTCClockSource>:
{
 8003482:	b480      	push	{r7}
 8003484:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003486:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800348a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800348e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003492:	4618      	mov	r0, r3
 8003494:	46bd      	mov	sp, r7
 8003496:	bc80      	pop	{r7}
 8003498:	4770      	bx	lr

0800349a <LL_RCC_ForceBackupDomainReset>:
{
 800349a:	b480      	push	{r7}
 800349c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800349e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80034b2:	bf00      	nop
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bc80      	pop	{r7}
 80034b8:	4770      	bx	lr

080034ba <LL_RCC_ReleaseBackupDomainReset>:
{
 80034ba:	b480      	push	{r7}
 80034bc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80034be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80034d2:	bf00      	nop
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bc80      	pop	{r7}
 80034d8:	4770      	bx	lr
	...

080034dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b086      	sub	sp, #24
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80034e4:	2300      	movs	r3, #0
 80034e6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80034e8:	2300      	movs	r3, #0
 80034ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80034ec:	2300      	movs	r3, #0
 80034ee:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d058      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80034fc:	f7fe fde2 	bl	80020c4 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003500:	f7fd ff8c 	bl	800141c <HAL_GetTick>
 8003504:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003506:	e009      	b.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003508:	f7fd ff88 	bl	800141c <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d902      	bls.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	74fb      	strb	r3, [r7, #19]
        break;
 800351a:	e006      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800351c:	4b7b      	ldr	r3, [pc, #492]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003524:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003528:	d1ee      	bne.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 800352a:	7cfb      	ldrb	r3, [r7, #19]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d13c      	bne.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8003530:	f7ff ffa7 	bl	8003482 <LL_RCC_GetRTCClockSource>
 8003534:	4602      	mov	r2, r0
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800353a:	429a      	cmp	r2, r3
 800353c:	d00f      	beq.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800353e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003546:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800354a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800354c:	f7ff ffa5 	bl	800349a <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003550:	f7ff ffb3 	bl	80034ba <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003554:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	f003 0302 	and.w	r3, r3, #2
 8003564:	2b00      	cmp	r3, #0
 8003566:	d014      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003568:	f7fd ff58 	bl	800141c <HAL_GetTick>
 800356c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800356e:	e00b      	b.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003570:	f7fd ff54 	bl	800141c <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	f241 3288 	movw	r2, #5000	; 0x1388
 800357e:	4293      	cmp	r3, r2
 8003580:	d902      	bls.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	74fb      	strb	r3, [r7, #19]
            break;
 8003586:	e004      	b.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003588:	f7ff feb4 	bl	80032f4 <LL_RCC_LSE_IsReady>
 800358c:	4603      	mov	r3, r0
 800358e:	2b01      	cmp	r3, #1
 8003590:	d1ee      	bne.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8003592:	7cfb      	ldrb	r3, [r7, #19]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d105      	bne.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800359c:	4618      	mov	r0, r3
 800359e:	f7ff ff5b 	bl	8003458 <LL_RCC_SetRTCClockSource>
 80035a2:	e004      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80035a4:	7cfb      	ldrb	r3, [r7, #19]
 80035a6:	74bb      	strb	r3, [r7, #18]
 80035a8:	e001      	b.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035aa:	7cfb      	ldrb	r3, [r7, #19]
 80035ac:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d004      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	4618      	mov	r0, r3
 80035c0:	f7ff fea9 	bl	8003316 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d004      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	4618      	mov	r0, r3
 80035d6:	f7ff fe9e 	bl	8003316 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0320 	and.w	r3, r3, #32
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d004      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7ff fec0 	bl	8003370 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d004      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a1b      	ldr	r3, [r3, #32]
 8003600:	4618      	mov	r0, r3
 8003602:	f7ff fee6 	bl	80033d2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800360e:	2b00      	cmp	r3, #0
 8003610:	d004      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003616:	4618      	mov	r0, r3
 8003618:	f7ff fedb 	bl	80033d2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003624:	2b00      	cmp	r3, #0
 8003626:	d004      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800362c:	4618      	mov	r0, r3
 800362e:	f7ff fed0 	bl	80033d2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800363a:	2b00      	cmp	r3, #0
 800363c:	d004      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	4618      	mov	r0, r3
 8003644:	f7ff fea9 	bl	800339a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003650:	2b00      	cmp	r3, #0
 8003652:	d004      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	4618      	mov	r0, r3
 800365a:	f7ff fe9e 	bl	800339a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003666:	2b00      	cmp	r3, #0
 8003668:	d004      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	69db      	ldr	r3, [r3, #28]
 800366e:	4618      	mov	r0, r3
 8003670:	f7ff fe93 	bl	800339a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0310 	and.w	r3, r3, #16
 800367c:	2b00      	cmp	r3, #0
 800367e:	d011      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	4618      	mov	r0, r3
 8003686:	f7ff fe5e 	bl	8003346 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003692:	d107      	bne.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8003694:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800369e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036a2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d010      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b4:	4618      	mov	r0, r3
 80036b6:	f7ff fea5 	bl	8003404 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d107      	bne.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80036c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036d0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d011      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e2:	4618      	mov	r0, r3
 80036e4:	f7ff fea3 	bl	800342e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036f0:	d107      	bne.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80036f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003700:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8003702:	7cbb      	ldrb	r3, [r7, #18]
}
 8003704:	4618      	mov	r0, r3
 8003706:	3718      	adds	r7, #24
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	58000400 	.word	0x58000400

08003710 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d071      	beq.n	8003806 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d106      	bne.n	800373c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f7fd fc1e 	bl	8000f78 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2202      	movs	r2, #2
 8003740:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003744:	4b32      	ldr	r3, [pc, #200]	; (8003810 <HAL_RTC_Init+0x100>)
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	f003 0310 	and.w	r3, r3, #16
 800374c:	2b10      	cmp	r3, #16
 800374e:	d051      	beq.n	80037f4 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003750:	4b2f      	ldr	r3, [pc, #188]	; (8003810 <HAL_RTC_Init+0x100>)
 8003752:	22ca      	movs	r2, #202	; 0xca
 8003754:	625a      	str	r2, [r3, #36]	; 0x24
 8003756:	4b2e      	ldr	r3, [pc, #184]	; (8003810 <HAL_RTC_Init+0x100>)
 8003758:	2253      	movs	r2, #83	; 0x53
 800375a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 faa3 	bl	8003ca8 <RTC_EnterInitMode>
 8003762:	4603      	mov	r3, r0
 8003764:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8003766:	7bfb      	ldrb	r3, [r7, #15]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d13f      	bne.n	80037ec <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800376c:	4b28      	ldr	r3, [pc, #160]	; (8003810 <HAL_RTC_Init+0x100>)
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	4a27      	ldr	r2, [pc, #156]	; (8003810 <HAL_RTC_Init+0x100>)
 8003772:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8003776:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800377a:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800377c:	4b24      	ldr	r3, [pc, #144]	; (8003810 <HAL_RTC_Init+0x100>)
 800377e:	699a      	ldr	r2, [r3, #24]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6859      	ldr	r1, [r3, #4]
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	691b      	ldr	r3, [r3, #16]
 8003788:	4319      	orrs	r1, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	430b      	orrs	r3, r1
 8003790:	491f      	ldr	r1, [pc, #124]	; (8003810 <HAL_RTC_Init+0x100>)
 8003792:	4313      	orrs	r3, r2
 8003794:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	68da      	ldr	r2, [r3, #12]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	041b      	lsls	r3, r3, #16
 80037a0:	491b      	ldr	r1, [pc, #108]	; (8003810 <HAL_RTC_Init+0x100>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80037a6:	4b1a      	ldr	r3, [pc, #104]	; (8003810 <HAL_RTC_Init+0x100>)
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b6:	430b      	orrs	r3, r1
 80037b8:	4915      	ldr	r1, [pc, #84]	; (8003810 <HAL_RTC_Init+0x100>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 faa6 	bl	8003d10 <RTC_ExitInitMode>
 80037c4:	4603      	mov	r3, r0
 80037c6:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 80037c8:	7bfb      	ldrb	r3, [r7, #15]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10e      	bne.n	80037ec <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 80037ce:	4b10      	ldr	r3, [pc, #64]	; (8003810 <HAL_RTC_Init+0x100>)
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a19      	ldr	r1, [r3, #32]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	69db      	ldr	r3, [r3, #28]
 80037de:	4319      	orrs	r1, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	695b      	ldr	r3, [r3, #20]
 80037e4:	430b      	orrs	r3, r1
 80037e6:	490a      	ldr	r1, [pc, #40]	; (8003810 <HAL_RTC_Init+0x100>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037ec:	4b08      	ldr	r3, [pc, #32]	; (8003810 <HAL_RTC_Init+0x100>)
 80037ee:	22ff      	movs	r2, #255	; 0xff
 80037f0:	625a      	str	r2, [r3, #36]	; 0x24
 80037f2:	e001      	b.n	80037f8 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 80037f4:	2300      	movs	r3, #0
 80037f6:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80037f8:	7bfb      	ldrb	r3, [r7, #15]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d103      	bne.n	8003806 <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2201      	movs	r2, #1
 8003802:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8003806:	7bfb      	ldrb	r3, [r7, #15]
}
 8003808:	4618      	mov	r0, r3
 800380a:	3710      	adds	r7, #16
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	40002800 	.word	0x40002800

08003814 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003814:	b590      	push	{r4, r7, lr}
 8003816:	b087      	sub	sp, #28
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003826:	2b01      	cmp	r3, #1
 8003828:	d101      	bne.n	800382e <HAL_RTC_SetTime+0x1a>
 800382a:	2302      	movs	r3, #2
 800382c:	e088      	b.n	8003940 <HAL_RTC_SetTime+0x12c>
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2201      	movs	r2, #1
 8003832:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2202      	movs	r2, #2
 800383a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800383e:	4b42      	ldr	r3, [pc, #264]	; (8003948 <HAL_RTC_SetTime+0x134>)
 8003840:	22ca      	movs	r2, #202	; 0xca
 8003842:	625a      	str	r2, [r3, #36]	; 0x24
 8003844:	4b40      	ldr	r3, [pc, #256]	; (8003948 <HAL_RTC_SetTime+0x134>)
 8003846:	2253      	movs	r2, #83	; 0x53
 8003848:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800384a:	68f8      	ldr	r0, [r7, #12]
 800384c:	f000 fa2c 	bl	8003ca8 <RTC_EnterInitMode>
 8003850:	4603      	mov	r3, r0
 8003852:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003854:	7cfb      	ldrb	r3, [r7, #19]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d15e      	bne.n	8003918 <HAL_RTC_SetTime+0x104>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800385a:	4b3b      	ldr	r3, [pc, #236]	; (8003948 <HAL_RTC_SetTime+0x134>)
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003862:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003866:	d057      	beq.n	8003918 <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d125      	bne.n	80038ba <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800386e:	4b36      	ldr	r3, [pc, #216]	; (8003948 <HAL_RTC_SetTime+0x134>)
 8003870:	699b      	ldr	r3, [r3, #24]
 8003872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003876:	2b00      	cmp	r3, #0
 8003878:	d102      	bne.n	8003880 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	2200      	movs	r2, #0
 800387e:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	4618      	mov	r0, r3
 8003886:	f000 fa81 	bl	8003d8c <RTC_ByteToBcd2>
 800388a:	4603      	mov	r3, r0
 800388c:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	785b      	ldrb	r3, [r3, #1]
 8003892:	4618      	mov	r0, r3
 8003894:	f000 fa7a 	bl	8003d8c <RTC_ByteToBcd2>
 8003898:	4603      	mov	r3, r0
 800389a:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800389c:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	789b      	ldrb	r3, [r3, #2]
 80038a2:	4618      	mov	r0, r3
 80038a4:	f000 fa72 	bl	8003d8c <RTC_ByteToBcd2>
 80038a8:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80038aa:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	78db      	ldrb	r3, [r3, #3]
 80038b2:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80038b4:	4313      	orrs	r3, r2
 80038b6:	617b      	str	r3, [r7, #20]
 80038b8:	e017      	b.n	80038ea <HAL_RTC_SetTime+0xd6>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80038ba:	4b23      	ldr	r3, [pc, #140]	; (8003948 <HAL_RTC_SetTime+0x134>)
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d102      	bne.n	80038cc <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	2200      	movs	r2, #0
 80038ca:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	785b      	ldrb	r3, [r3, #1]
 80038d6:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80038d8:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80038da:	68ba      	ldr	r2, [r7, #8]
 80038dc:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80038de:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	78db      	ldrb	r3, [r3, #3]
 80038e4:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80038e6:	4313      	orrs	r3, r2
 80038e8:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 80038ea:	4a17      	ldr	r2, [pc, #92]	; (8003948 <HAL_RTC_SetTime+0x134>)
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80038f2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80038f6:	6013      	str	r3, [r2, #0]
      
      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 80038f8:	4b13      	ldr	r3, [pc, #76]	; (8003948 <HAL_RTC_SetTime+0x134>)
 80038fa:	699b      	ldr	r3, [r3, #24]
 80038fc:	4a12      	ldr	r2, [pc, #72]	; (8003948 <HAL_RTC_SetTime+0x134>)
 80038fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003902:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8003904:	4b10      	ldr	r3, [pc, #64]	; (8003948 <HAL_RTC_SetTime+0x134>)
 8003906:	699a      	ldr	r2, [r3, #24]
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	68d9      	ldr	r1, [r3, #12]
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	691b      	ldr	r3, [r3, #16]
 8003910:	430b      	orrs	r3, r1
 8003912:	490d      	ldr	r1, [pc, #52]	; (8003948 <HAL_RTC_SetTime+0x134>)
 8003914:	4313      	orrs	r3, r2
 8003916:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 8003918:	68f8      	ldr	r0, [r7, #12]
 800391a:	f000 f9f9 	bl	8003d10 <RTC_ExitInitMode>
 800391e:	4603      	mov	r3, r0
 8003920:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003922:	4b09      	ldr	r3, [pc, #36]	; (8003948 <HAL_RTC_SetTime+0x134>)
 8003924:	22ff      	movs	r2, #255	; 0xff
 8003926:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003928:	7cfb      	ldrb	r3, [r7, #19]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d103      	bne.n	8003936 <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2201      	movs	r2, #1
 8003932:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 800393e:	7cfb      	ldrb	r3, [r7, #19]
}
 8003940:	4618      	mov	r0, r3
 8003942:	371c      	adds	r7, #28
 8003944:	46bd      	mov	sp, r7
 8003946:	bd90      	pop	{r4, r7, pc}
 8003948:	40002800 	.word	0x40002800

0800394c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800394c:	b590      	push	{r4, r7, lr}
 800394e:	b087      	sub	sp, #28
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800395e:	2b01      	cmp	r3, #1
 8003960:	d101      	bne.n	8003966 <HAL_RTC_SetDate+0x1a>
 8003962:	2302      	movs	r3, #2
 8003964:	e071      	b.n	8003a4a <HAL_RTC_SetDate+0xfe>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2201      	movs	r2, #1
 800396a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2202      	movs	r2, #2
 8003972:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d10e      	bne.n	800399a <HAL_RTC_SetDate+0x4e>
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	785b      	ldrb	r3, [r3, #1]
 8003980:	f003 0310 	and.w	r3, r3, #16
 8003984:	2b00      	cmp	r3, #0
 8003986:	d008      	beq.n	800399a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	785b      	ldrb	r3, [r3, #1]
 800398c:	f023 0310 	bic.w	r3, r3, #16
 8003990:	b2db      	uxtb	r3, r3
 8003992:	330a      	adds	r3, #10
 8003994:	b2da      	uxtb	r2, r3
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d11c      	bne.n	80039da <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	78db      	ldrb	r3, [r3, #3]
 80039a4:	4618      	mov	r0, r3
 80039a6:	f000 f9f1 	bl	8003d8c <RTC_ByteToBcd2>
 80039aa:	4603      	mov	r3, r0
 80039ac:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	785b      	ldrb	r3, [r3, #1]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f000 f9ea 	bl	8003d8c <RTC_ByteToBcd2>
 80039b8:	4603      	mov	r3, r0
 80039ba:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80039bc:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	789b      	ldrb	r3, [r3, #2]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f000 f9e2 	bl	8003d8c <RTC_ByteToBcd2>
 80039c8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80039ca:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80039d4:	4313      	orrs	r3, r2
 80039d6:	617b      	str	r3, [r7, #20]
 80039d8:	e00e      	b.n	80039f8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	78db      	ldrb	r3, [r3, #3]
 80039de:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	785b      	ldrb	r3, [r3, #1]
 80039e4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80039e6:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80039e8:	68ba      	ldr	r2, [r7, #8]
 80039ea:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80039ec:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80039f4:	4313      	orrs	r3, r2
 80039f6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80039f8:	4b16      	ldr	r3, [pc, #88]	; (8003a54 <HAL_RTC_SetDate+0x108>)
 80039fa:	22ca      	movs	r2, #202	; 0xca
 80039fc:	625a      	str	r2, [r3, #36]	; 0x24
 80039fe:	4b15      	ldr	r3, [pc, #84]	; (8003a54 <HAL_RTC_SetDate+0x108>)
 8003a00:	2253      	movs	r2, #83	; 0x53
 8003a02:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f000 f94f 	bl	8003ca8 <RTC_EnterInitMode>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003a0e:	7cfb      	ldrb	r3, [r7, #19]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d10b      	bne.n	8003a2c <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8003a14:	4a0f      	ldr	r2, [pc, #60]	; (8003a54 <HAL_RTC_SetDate+0x108>)
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003a1c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003a20:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	f000 f974 	bl	8003d10 <RTC_ExitInitMode>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a2c:	4b09      	ldr	r3, [pc, #36]	; (8003a54 <HAL_RTC_SetDate+0x108>)
 8003a2e:	22ff      	movs	r2, #255	; 0xff
 8003a30:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003a32:	7cfb      	ldrb	r3, [r7, #19]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d103      	bne.n	8003a40 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8003a48:	7cfb      	ldrb	r3, [r7, #19]
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	371c      	adds	r7, #28
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd90      	pop	{r4, r7, pc}
 8003a52:	bf00      	nop
 8003a54:	40002800 	.word	0x40002800

08003a58 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003a58:	b590      	push	{r4, r7, lr}
 8003a5a:	b087      	sub	sp, #28
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8003a64:	2300      	movs	r3, #0
 8003a66:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  __HAL_LOCK(hrtc);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d101      	bne.n	8003a76 <HAL_RTC_SetAlarm+0x1e>
 8003a72:	2302      	movs	r3, #2
 8003a74:	e0eb      	b.n	8003c4e <HAL_RTC_SetAlarm+0x1f6>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2202      	movs	r2, #2
 8003a82:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8003a86:	4b74      	ldr	r3, [pc, #464]	; (8003c58 <HAL_RTC_SetAlarm+0x200>)
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a8e:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a96:	d06a      	beq.n	8003b6e <HAL_RTC_SetAlarm+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d13a      	bne.n	8003b14 <HAL_RTC_SetAlarm+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003a9e:	4b6e      	ldr	r3, [pc, #440]	; (8003c58 <HAL_RTC_SetAlarm+0x200>)
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d102      	bne.n	8003ab0 <HAL_RTC_SetAlarm+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	2200      	movs	r2, #0
 8003aae:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	695b      	ldr	r3, [r3, #20]
 8003ab4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f000 f965 	bl	8003d8c <RTC_ByteToBcd2>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	785b      	ldrb	r3, [r3, #1]
 8003aca:	4618      	mov	r0, r3
 8003acc:	f000 f95e 	bl	8003d8c <RTC_ByteToBcd2>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003ad4:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	789b      	ldrb	r3, [r3, #2]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f000 f956 	bl	8003d8c <RTC_ByteToBcd2>
 8003ae0:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003ae2:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	78db      	ldrb	r3, [r3, #3]
 8003aea:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003aec:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003af6:	4618      	mov	r0, r3
 8003af8:	f000 f948 	bl	8003d8c <RTC_ByteToBcd2>
 8003afc:	4603      	mov	r3, r0
 8003afe:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003b00:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003b08:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	617b      	str	r3, [r7, #20]
 8003b12:	e02c      	b.n	8003b6e <HAL_RTC_SetAlarm+0x116>
    }
    else /* format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	695b      	ldr	r3, [r3, #20]
 8003b18:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8003b1c:	d00d      	beq.n	8003b3a <HAL_RTC_SetAlarm+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b26:	d008      	beq.n	8003b3a <HAL_RTC_SetAlarm+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003b28:	4b4b      	ldr	r3, [pc, #300]	; (8003c58 <HAL_RTC_SetAlarm+0x200>)
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d102      	bne.n	8003b3a <HAL_RTC_SetAlarm+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	2200      	movs	r2, #0
 8003b38:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	785b      	ldrb	r3, [r3, #1]
 8003b44:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003b46:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003b48:	68ba      	ldr	r2, [r7, #8]
 8003b4a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003b4c:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	78db      	ldrb	r3, [r3, #3]
 8003b52:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003b54:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b5c:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003b5e:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003b64:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	617b      	str	r3, [r7, #20]
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b6e:	4b3a      	ldr	r3, [pc, #232]	; (8003c58 <HAL_RTC_SetAlarm+0x200>)
 8003b70:	22ca      	movs	r2, #202	; 0xca
 8003b72:	625a      	str	r2, [r3, #36]	; 0x24
 8003b74:	4b38      	ldr	r3, [pc, #224]	; (8003c58 <HAL_RTC_SetAlarm+0x200>)
 8003b76:	2253      	movs	r2, #83	; 0x53
 8003b78:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b82:	d12c      	bne.n	8003bde <HAL_RTC_SetAlarm+0x186>
  {
    /* Disable the Alarm A interrupt */
    /* In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, (RTC_CR_ALRAE | RTC_CR_ALRAIE));
 8003b84:	4b34      	ldr	r3, [pc, #208]	; (8003c58 <HAL_RTC_SetAlarm+0x200>)
 8003b86:	699b      	ldr	r3, [r3, #24]
 8003b88:	4a33      	ldr	r2, [pc, #204]	; (8003c58 <HAL_RTC_SetAlarm+0x200>)
 8003b8a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003b8e:	6193      	str	r3, [r2, #24]

    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8003b90:	4b31      	ldr	r3, [pc, #196]	; (8003c58 <HAL_RTC_SetAlarm+0x200>)
 8003b92:	2201      	movs	r2, #1
 8003b94:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b9c:	d107      	bne.n	8003bae <HAL_RTC_SetAlarm+0x156>
    {
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	699a      	ldr	r2, [r3, #24]
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	69db      	ldr	r3, [r3, #28]
 8003ba6:	492c      	ldr	r1, [pc, #176]	; (8003c58 <HAL_RTC_SetAlarm+0x200>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	644b      	str	r3, [r1, #68]	; 0x44
 8003bac:	e006      	b.n	8003bbc <HAL_RTC_SetAlarm+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8003bae:	4a2a      	ldr	r2, [pc, #168]	; (8003c58 <HAL_RTC_SetAlarm+0x200>)
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8003bb4:	4a28      	ldr	r2, [pc, #160]	; (8003c58 <HAL_RTC_SetAlarm+0x200>)
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	699b      	ldr	r3, [r3, #24]
 8003bba:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8003bbc:	4a26      	ldr	r2, [pc, #152]	; (8003c58 <HAL_RTC_SetAlarm+0x200>)
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc8:	f043 0201 	orr.w	r2, r3, #1
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm state: Enable Alarm */
    SET_BIT(RTC->CR, RTC_CR_ALRAE);
 8003bd0:	4b21      	ldr	r3, [pc, #132]	; (8003c58 <HAL_RTC_SetAlarm+0x200>)
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	4a20      	ldr	r2, [pc, #128]	; (8003c58 <HAL_RTC_SetAlarm+0x200>)
 8003bd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bda:	6193      	str	r3, [r2, #24]
 8003bdc:	e02b      	b.n	8003c36 <HAL_RTC_SetAlarm+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    /* In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, (RTC_CR_ALRBE | RTC_CR_ALRBIE));
 8003bde:	4b1e      	ldr	r3, [pc, #120]	; (8003c58 <HAL_RTC_SetAlarm+0x200>)
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	4a1d      	ldr	r2, [pc, #116]	; (8003c58 <HAL_RTC_SetAlarm+0x200>)
 8003be4:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8003be8:	6193      	str	r3, [r2, #24]

    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8003bea:	4b1b      	ldr	r3, [pc, #108]	; (8003c58 <HAL_RTC_SetAlarm+0x200>)
 8003bec:	2202      	movs	r2, #2
 8003bee:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bf6:	d107      	bne.n	8003c08 <HAL_RTC_SetAlarm+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	699a      	ldr	r2, [r3, #24]
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	69db      	ldr	r3, [r3, #28]
 8003c00:	4915      	ldr	r1, [pc, #84]	; (8003c58 <HAL_RTC_SetAlarm+0x200>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003c06:	e006      	b.n	8003c16 <HAL_RTC_SetAlarm+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8003c08:	4a13      	ldr	r2, [pc, #76]	; (8003c58 <HAL_RTC_SetAlarm+0x200>)
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8003c0e:	4a12      	ldr	r2, [pc, #72]	; (8003c58 <HAL_RTC_SetAlarm+0x200>)
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	699b      	ldr	r3, [r3, #24]
 8003c14:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8003c16:	4a10      	ldr	r2, [pc, #64]	; (8003c58 <HAL_RTC_SetAlarm+0x200>)
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c22:	f043 0202 	orr.w	r2, r3, #2
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm state: Enable Alarm */
    SET_BIT(RTC->CR, RTC_CR_ALRBE);
 8003c2a:	4b0b      	ldr	r3, [pc, #44]	; (8003c58 <HAL_RTC_SetAlarm+0x200>)
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	4a0a      	ldr	r2, [pc, #40]	; (8003c58 <HAL_RTC_SetAlarm+0x200>)
 8003c30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c34:	6193      	str	r3, [r2, #24]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c36:	4b08      	ldr	r3, [pc, #32]	; (8003c58 <HAL_RTC_SetAlarm+0x200>)
 8003c38:	22ff      	movs	r2, #255	; 0xff
 8003c3a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	371c      	adds	r7, #28
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd90      	pop	{r4, r7, pc}
 8003c56:	bf00      	nop
 8003c58:	40002800 	.word	0x40002800

08003c5c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8003c64:	4b0f      	ldr	r3, [pc, #60]	; (8003ca4 <HAL_RTC_WaitForSynchro+0x48>)
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	4a0e      	ldr	r2, [pc, #56]	; (8003ca4 <HAL_RTC_WaitForSynchro+0x48>)
 8003c6a:	f023 0320 	bic.w	r3, r3, #32
 8003c6e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8003c70:	f7fd fbd4 	bl	800141c <HAL_GetTick>
 8003c74:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8003c76:	e009      	b.n	8003c8c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003c78:	f7fd fbd0 	bl	800141c <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c86:	d901      	bls.n	8003c8c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e006      	b.n	8003c9a <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8003c8c:	4b05      	ldr	r3, [pc, #20]	; (8003ca4 <HAL_RTC_WaitForSynchro+0x48>)
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	f003 0320 	and.w	r3, r3, #32
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d0ef      	beq.n	8003c78 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3710      	adds	r7, #16
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	40002800 	.word	0x40002800

08003ca8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8003cb4:	4b15      	ldr	r3, [pc, #84]	; (8003d0c <RTC_EnterInitMode+0x64>)
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d120      	bne.n	8003d02 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003cc0:	4b12      	ldr	r3, [pc, #72]	; (8003d0c <RTC_EnterInitMode+0x64>)
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	4a11      	ldr	r2, [pc, #68]	; (8003d0c <RTC_EnterInitMode+0x64>)
 8003cc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cca:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8003ccc:	f7fd fba6 	bl	800141c <HAL_GetTick>
 8003cd0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003cd2:	e00d      	b.n	8003cf0 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003cd4:	f7fd fba2 	bl	800141c <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ce2:	d905      	bls.n	8003cf0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2203      	movs	r2, #3
 8003cec:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003cf0:	4b06      	ldr	r3, [pc, #24]	; (8003d0c <RTC_EnterInitMode+0x64>)
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d102      	bne.n	8003d02 <RTC_EnterInitMode+0x5a>
 8003cfc:	7bfb      	ldrb	r3, [r7, #15]
 8003cfe:	2b03      	cmp	r3, #3
 8003d00:	d1e8      	bne.n	8003cd4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8003d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3710      	adds	r7, #16
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	40002800 	.word	0x40002800

08003d10 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003d1c:	4b1a      	ldr	r3, [pc, #104]	; (8003d88 <RTC_ExitInitMode+0x78>)
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	4a19      	ldr	r2, [pc, #100]	; (8003d88 <RTC_ExitInitMode+0x78>)
 8003d22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d26:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003d28:	4b17      	ldr	r3, [pc, #92]	; (8003d88 <RTC_ExitInitMode+0x78>)
 8003d2a:	699b      	ldr	r3, [r3, #24]
 8003d2c:	f003 0320 	and.w	r3, r3, #32
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d10c      	bne.n	8003d4e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f7ff ff91 	bl	8003c5c <HAL_RTC_WaitForSynchro>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d01e      	beq.n	8003d7e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2203      	movs	r2, #3
 8003d44:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	73fb      	strb	r3, [r7, #15]
 8003d4c:	e017      	b.n	8003d7e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003d4e:	4b0e      	ldr	r3, [pc, #56]	; (8003d88 <RTC_ExitInitMode+0x78>)
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	4a0d      	ldr	r2, [pc, #52]	; (8003d88 <RTC_ExitInitMode+0x78>)
 8003d54:	f023 0320 	bic.w	r3, r3, #32
 8003d58:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f7ff ff7e 	bl	8003c5c <HAL_RTC_WaitForSynchro>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d005      	beq.n	8003d72 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2203      	movs	r2, #3
 8003d6a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003d72:	4b05      	ldr	r3, [pc, #20]	; (8003d88 <RTC_ExitInitMode+0x78>)
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	4a04      	ldr	r2, [pc, #16]	; (8003d88 <RTC_ExitInitMode+0x78>)
 8003d78:	f043 0320 	orr.w	r3, r3, #32
 8003d7c:	6193      	str	r3, [r2, #24]
  }

  return status;
 8003d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3710      	adds	r7, #16
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	40002800 	.word	0x40002800

08003d8c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b085      	sub	sp, #20
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	4603      	mov	r3, r0
 8003d94:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003d96:	2300      	movs	r3, #0
 8003d98:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8003d9a:	79fb      	ldrb	r3, [r7, #7]
 8003d9c:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8003d9e:	e005      	b.n	8003dac <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	3301      	adds	r3, #1
 8003da4:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8003da6:	7afb      	ldrb	r3, [r7, #11]
 8003da8:	3b0a      	subs	r3, #10
 8003daa:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8003dac:	7afb      	ldrb	r3, [r7, #11]
 8003dae:	2b09      	cmp	r3, #9
 8003db0:	d8f6      	bhi.n	8003da0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	011b      	lsls	r3, r3, #4
 8003db8:	b2da      	uxtb	r2, r3
 8003dba:	7afb      	ldrb	r3, [r7, #11]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	b2db      	uxtb	r3, r3
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3714      	adds	r7, #20
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bc80      	pop	{r7}
 8003dc8:	4770      	bx	lr

08003dca <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b084      	sub	sp, #16
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d101      	bne.n	8003ddc <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e0c6      	b.n	8003f6a <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d108      	bne.n	8003df6 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dec:	d009      	beq.n	8003e02 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	61da      	str	r2, [r3, #28]
 8003df4:	e005      	b.n	8003e02 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d106      	bne.n	8003e1c <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f7fd f8da 	bl	8000fd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2202      	movs	r2, #2
 8003e20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e32:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e3c:	d902      	bls.n	8003e44 <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	60fb      	str	r3, [r7, #12]
 8003e42:	e002      	b.n	8003e4a <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003e44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e48:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003e52:	d007      	beq.n	8003e64 <HAL_SPI_Init+0x9a>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e5c:	d002      	beq.n	8003e64 <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003e74:	431a      	orrs	r2, r3
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	431a      	orrs	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	695b      	ldr	r3, [r3, #20]
 8003e84:	f003 0301 	and.w	r3, r3, #1
 8003e88:	431a      	orrs	r2, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e92:	431a      	orrs	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	69db      	ldr	r3, [r3, #28]
 8003e98:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e9c:	431a      	orrs	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a1b      	ldr	r3, [r3, #32]
 8003ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ea6:	ea42 0103 	orr.w	r1, r2, r3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eae:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ebe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ec2:	d11b      	bne.n	8003efc <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d10b      	bne.n	8003ee4 <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ed4:	d903      	bls.n	8003ede <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2202      	movs	r2, #2
 8003eda:	631a      	str	r2, [r3, #48]	; 0x30
 8003edc:	e002      	b.n	8003ee4 <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	d107      	bne.n	8003efc <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003efa:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	0c1b      	lsrs	r3, r3, #16
 8003f02:	f003 0204 	and.w	r2, r3, #4
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0a:	f003 0310 	and.w	r3, r3, #16
 8003f0e:	431a      	orrs	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f14:	f003 0308 	and.w	r3, r3, #8
 8003f18:	431a      	orrs	r2, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003f22:	ea42 0103 	orr.w	r1, r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	430a      	orrs	r2, r1
 8003f32:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f3c:	d105      	bne.n	8003f4a <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	b292      	uxth	r2, r2
 8003f48:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	69da      	ldr	r2, [r3, #28]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f58:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3710      	adds	r7, #16
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f72:	b580      	push	{r7, lr}
 8003f74:	b082      	sub	sp, #8
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d101      	bne.n	8003f84 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e049      	b.n	8004018 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d106      	bne.n	8003f9e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f000 f841 	bl	8004020 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2202      	movs	r2, #2
 8003fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	3304      	adds	r3, #4
 8003fae:	4619      	mov	r1, r3
 8003fb0:	4610      	mov	r0, r2
 8003fb2:	f000 f9cf 	bl	8004354 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2201      	movs	r2, #1
 8003fc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3708      	adds	r7, #8
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004028:	bf00      	nop
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	bc80      	pop	{r7}
 8004030:	4770      	bx	lr
	...

08004034 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004034:	b480      	push	{r7}
 8004036:	b085      	sub	sp, #20
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004042:	b2db      	uxtb	r3, r3
 8004044:	2b01      	cmp	r3, #1
 8004046:	d001      	beq.n	800404c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e036      	b.n	80040ba <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2202      	movs	r2, #2
 8004050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68da      	ldr	r2, [r3, #12]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f042 0201 	orr.w	r2, r2, #1
 8004062:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a16      	ldr	r2, [pc, #88]	; (80040c4 <HAL_TIM_Base_Start_IT+0x90>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d004      	beq.n	8004078 <HAL_TIM_Base_Start_IT+0x44>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004076:	d115      	bne.n	80040a4 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	689a      	ldr	r2, [r3, #8]
 800407e:	4b12      	ldr	r3, [pc, #72]	; (80040c8 <HAL_TIM_Base_Start_IT+0x94>)
 8004080:	4013      	ands	r3, r2
 8004082:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2b06      	cmp	r3, #6
 8004088:	d015      	beq.n	80040b6 <HAL_TIM_Base_Start_IT+0x82>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004090:	d011      	beq.n	80040b6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f042 0201 	orr.w	r2, r2, #1
 80040a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040a2:	e008      	b.n	80040b6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f042 0201 	orr.w	r2, r2, #1
 80040b2:	601a      	str	r2, [r3, #0]
 80040b4:	e000      	b.n	80040b8 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3714      	adds	r7, #20
 80040be:	46bd      	mov	sp, r7
 80040c0:	bc80      	pop	{r7}
 80040c2:	4770      	bx	lr
 80040c4:	40012c00 	.word	0x40012c00
 80040c8:	00010007 	.word	0x00010007

080040cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	f003 0302 	and.w	r3, r3, #2
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d122      	bne.n	8004128 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	f003 0302 	and.w	r3, r3, #2
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d11b      	bne.n	8004128 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f06f 0202 	mvn.w	r2, #2
 80040f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2201      	movs	r2, #1
 80040fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	f003 0303 	and.w	r3, r3, #3
 800410a:	2b00      	cmp	r3, #0
 800410c:	d003      	beq.n	8004116 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 f904 	bl	800431c <HAL_TIM_IC_CaptureCallback>
 8004114:	e005      	b.n	8004122 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 f8f7 	bl	800430a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 f906 	bl	800432e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	f003 0304 	and.w	r3, r3, #4
 8004132:	2b04      	cmp	r3, #4
 8004134:	d122      	bne.n	800417c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	f003 0304 	and.w	r3, r3, #4
 8004140:	2b04      	cmp	r3, #4
 8004142:	d11b      	bne.n	800417c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f06f 0204 	mvn.w	r2, #4
 800414c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2202      	movs	r2, #2
 8004152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800415e:	2b00      	cmp	r3, #0
 8004160:	d003      	beq.n	800416a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 f8da 	bl	800431c <HAL_TIM_IC_CaptureCallback>
 8004168:	e005      	b.n	8004176 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f8cd 	bl	800430a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f000 f8dc 	bl	800432e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	f003 0308 	and.w	r3, r3, #8
 8004186:	2b08      	cmp	r3, #8
 8004188:	d122      	bne.n	80041d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	f003 0308 	and.w	r3, r3, #8
 8004194:	2b08      	cmp	r3, #8
 8004196:	d11b      	bne.n	80041d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f06f 0208 	mvn.w	r2, #8
 80041a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2204      	movs	r2, #4
 80041a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	69db      	ldr	r3, [r3, #28]
 80041ae:	f003 0303 	and.w	r3, r3, #3
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d003      	beq.n	80041be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 f8b0 	bl	800431c <HAL_TIM_IC_CaptureCallback>
 80041bc:	e005      	b.n	80041ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 f8a3 	bl	800430a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f000 f8b2 	bl	800432e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	f003 0310 	and.w	r3, r3, #16
 80041da:	2b10      	cmp	r3, #16
 80041dc:	d122      	bne.n	8004224 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	f003 0310 	and.w	r3, r3, #16
 80041e8:	2b10      	cmp	r3, #16
 80041ea:	d11b      	bne.n	8004224 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f06f 0210 	mvn.w	r2, #16
 80041f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2208      	movs	r2, #8
 80041fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	69db      	ldr	r3, [r3, #28]
 8004202:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004206:	2b00      	cmp	r3, #0
 8004208:	d003      	beq.n	8004212 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 f886 	bl	800431c <HAL_TIM_IC_CaptureCallback>
 8004210:	e005      	b.n	800421e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 f879 	bl	800430a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 f888 	bl	800432e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	2b01      	cmp	r3, #1
 8004230:	d10e      	bne.n	8004250 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	f003 0301 	and.w	r3, r3, #1
 800423c:	2b01      	cmp	r3, #1
 800423e:	d107      	bne.n	8004250 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f06f 0201 	mvn.w	r2, #1
 8004248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f7fc fcfe 	bl	8000c4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800425a:	2b80      	cmp	r3, #128	; 0x80
 800425c:	d10e      	bne.n	800427c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004268:	2b80      	cmp	r3, #128	; 0x80
 800426a:	d107      	bne.n	800427c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 f8d7 	bl	800442a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004286:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800428a:	d10e      	bne.n	80042aa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	68db      	ldr	r3, [r3, #12]
 8004292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004296:	2b80      	cmp	r3, #128	; 0x80
 8004298:	d107      	bne.n	80042aa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80042a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f000 f8c9 	bl	800443c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b4:	2b40      	cmp	r3, #64	; 0x40
 80042b6:	d10e      	bne.n	80042d6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c2:	2b40      	cmp	r3, #64	; 0x40
 80042c4:	d107      	bne.n	80042d6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 f835 	bl	8004340 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	f003 0320 	and.w	r3, r3, #32
 80042e0:	2b20      	cmp	r3, #32
 80042e2:	d10e      	bne.n	8004302 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	f003 0320 	and.w	r3, r3, #32
 80042ee:	2b20      	cmp	r3, #32
 80042f0:	d107      	bne.n	8004302 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f06f 0220 	mvn.w	r2, #32
 80042fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f000 f88b 	bl	8004418 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004302:	bf00      	nop
 8004304:	3708      	adds	r7, #8
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800430a:	b480      	push	{r7}
 800430c:	b083      	sub	sp, #12
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004312:	bf00      	nop
 8004314:	370c      	adds	r7, #12
 8004316:	46bd      	mov	sp, r7
 8004318:	bc80      	pop	{r7}
 800431a:	4770      	bx	lr

0800431c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004324:	bf00      	nop
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	bc80      	pop	{r7}
 800432c:	4770      	bx	lr

0800432e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800432e:	b480      	push	{r7}
 8004330:	b083      	sub	sp, #12
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004336:	bf00      	nop
 8004338:	370c      	adds	r7, #12
 800433a:	46bd      	mov	sp, r7
 800433c:	bc80      	pop	{r7}
 800433e:	4770      	bx	lr

08004340 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004348:	bf00      	nop
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	bc80      	pop	{r7}
 8004350:	4770      	bx	lr
	...

08004354 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004354:	b480      	push	{r7}
 8004356:	b085      	sub	sp, #20
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a29      	ldr	r2, [pc, #164]	; (800440c <TIM_Base_SetConfig+0xb8>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d003      	beq.n	8004374 <TIM_Base_SetConfig+0x20>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004372:	d108      	bne.n	8004386 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800437a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	68fa      	ldr	r2, [r7, #12]
 8004382:	4313      	orrs	r3, r2
 8004384:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a20      	ldr	r2, [pc, #128]	; (800440c <TIM_Base_SetConfig+0xb8>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d00b      	beq.n	80043a6 <TIM_Base_SetConfig+0x52>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004394:	d007      	beq.n	80043a6 <TIM_Base_SetConfig+0x52>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a1d      	ldr	r2, [pc, #116]	; (8004410 <TIM_Base_SetConfig+0xbc>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d003      	beq.n	80043a6 <TIM_Base_SetConfig+0x52>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a1c      	ldr	r2, [pc, #112]	; (8004414 <TIM_Base_SetConfig+0xc0>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d108      	bne.n	80043b8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	689a      	ldr	r2, [r3, #8]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a0b      	ldr	r2, [pc, #44]	; (800440c <TIM_Base_SetConfig+0xb8>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d007      	beq.n	80043f4 <TIM_Base_SetConfig+0xa0>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	4a0a      	ldr	r2, [pc, #40]	; (8004410 <TIM_Base_SetConfig+0xbc>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d003      	beq.n	80043f4 <TIM_Base_SetConfig+0xa0>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	4a09      	ldr	r2, [pc, #36]	; (8004414 <TIM_Base_SetConfig+0xc0>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d103      	bne.n	80043fc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	691a      	ldr	r2, [r3, #16]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	615a      	str	r2, [r3, #20]
}
 8004402:	bf00      	nop
 8004404:	3714      	adds	r7, #20
 8004406:	46bd      	mov	sp, r7
 8004408:	bc80      	pop	{r7}
 800440a:	4770      	bx	lr
 800440c:	40012c00 	.word	0x40012c00
 8004410:	40014400 	.word	0x40014400
 8004414:	40014800 	.word	0x40014800

08004418 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004418:	b480      	push	{r7}
 800441a:	b083      	sub	sp, #12
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004420:	bf00      	nop
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	bc80      	pop	{r7}
 8004428:	4770      	bx	lr

0800442a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800442a:	b480      	push	{r7}
 800442c:	b083      	sub	sp, #12
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004432:	bf00      	nop
 8004434:	370c      	adds	r7, #12
 8004436:	46bd      	mov	sp, r7
 8004438:	bc80      	pop	{r7}
 800443a:	4770      	bx	lr

0800443c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004444:	bf00      	nop
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	bc80      	pop	{r7}
 800444c:	4770      	bx	lr

0800444e <LL_RCC_GetUSARTClockSource>:
{
 800444e:	b480      	push	{r7}
 8004450:	b083      	sub	sp, #12
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8004456:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800445a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	401a      	ands	r2, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	041b      	lsls	r3, r3, #16
 8004466:	4313      	orrs	r3, r2
}
 8004468:	4618      	mov	r0, r3
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	bc80      	pop	{r7}
 8004470:	4770      	bx	lr

08004472 <LL_RCC_GetLPUARTClockSource>:
{
 8004472:	b480      	push	{r7}
 8004474:	b083      	sub	sp, #12
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800447a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800447e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4013      	ands	r3, r2
}
 8004486:	4618      	mov	r0, r3
 8004488:	370c      	adds	r7, #12
 800448a:	46bd      	mov	sp, r7
 800448c:	bc80      	pop	{r7}
 800448e:	4770      	bx	lr

08004490 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d101      	bne.n	80044a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e042      	b.n	8004528 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d106      	bne.n	80044ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f7fc fce3 	bl	8000e80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2224      	movs	r2, #36	; 0x24
 80044be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f022 0201 	bic.w	r2, r2, #1
 80044d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 fc98 	bl	8004e08 <UART_SetConfig>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d101      	bne.n	80044e2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e022      	b.n	8004528 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d002      	beq.n	80044f0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 ff00 	bl	80052f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	685a      	ldr	r2, [r3, #4]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	689a      	ldr	r2, [r3, #8]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800450e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f042 0201 	orr.w	r2, r2, #1
 800451e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f000 ff86 	bl	8005432 <UART_CheckIdleState>
 8004526:	4603      	mov	r3, r0
}
 8004528:	4618      	mov	r0, r3
 800452a:	3708      	adds	r7, #8
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d101      	bne.n	8004542 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e04a      	b.n	80045d8 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004548:	2b00      	cmp	r3, #0
 800454a:	d106      	bne.n	800455a <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f7fc fc93 	bl	8000e80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2224      	movs	r2, #36	; 0x24
 800455e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f022 0201 	bic.w	r2, r2, #1
 8004570:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 fc48 	bl	8004e08 <UART_SetConfig>
 8004578:	4603      	mov	r3, r0
 800457a:	2b01      	cmp	r3, #1
 800457c:	d101      	bne.n	8004582 <HAL_HalfDuplex_Init+0x52>
  {
    return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e02a      	b.n	80045d8 <HAL_HalfDuplex_Init+0xa8>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004586:	2b00      	cmp	r3, #0
 8004588:	d002      	beq.n	8004590 <HAL_HalfDuplex_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 feb0 	bl	80052f0 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	685a      	ldr	r2, [r3, #4]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800459e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	689a      	ldr	r2, [r3, #8]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80045ae:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	689a      	ldr	r2, [r3, #8]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f042 0208 	orr.w	r2, r2, #8
 80045be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f042 0201 	orr.w	r2, r2, #1
 80045ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 ff2e 	bl	8005432 <UART_CheckIdleState>
 80045d6:	4603      	mov	r3, r0
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3708      	adds	r7, #8
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b08a      	sub	sp, #40	; 0x28
 80045e4:	af02      	add	r7, sp, #8
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	603b      	str	r3, [r7, #0]
 80045ec:	4613      	mov	r3, r2
 80045ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f6:	2b20      	cmp	r3, #32
 80045f8:	d173      	bne.n	80046e2 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d002      	beq.n	8004606 <HAL_UART_Transmit+0x26>
 8004600:	88fb      	ldrh	r3, [r7, #6]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d101      	bne.n	800460a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e06c      	b.n	80046e4 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2200      	movs	r2, #0
 800460e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2221      	movs	r2, #33	; 0x21
 8004616:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800461a:	f7fc feff 	bl	800141c <HAL_GetTick>
 800461e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	88fa      	ldrh	r2, [r7, #6]
 8004624:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	88fa      	ldrh	r2, [r7, #6]
 800462c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004638:	d108      	bne.n	800464c <HAL_UART_Transmit+0x6c>
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d104      	bne.n	800464c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004642:	2300      	movs	r3, #0
 8004644:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	61bb      	str	r3, [r7, #24]
 800464a:	e003      	b.n	8004654 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004650:	2300      	movs	r3, #0
 8004652:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004654:	e02c      	b.n	80046b0 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	9300      	str	r3, [sp, #0]
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	2200      	movs	r2, #0
 800465e:	2180      	movs	r1, #128	; 0x80
 8004660:	68f8      	ldr	r0, [r7, #12]
 8004662:	f000 ff34 	bl	80054ce <UART_WaitOnFlagUntilTimeout>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d001      	beq.n	8004670 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e039      	b.n	80046e4 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d10b      	bne.n	800468e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	881b      	ldrh	r3, [r3, #0]
 800467a:	461a      	mov	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004684:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	3302      	adds	r3, #2
 800468a:	61bb      	str	r3, [r7, #24]
 800468c:	e007      	b.n	800469e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	781a      	ldrb	r2, [r3, #0]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	3301      	adds	r3, #1
 800469c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	3b01      	subs	r3, #1
 80046a8:	b29a      	uxth	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1cc      	bne.n	8004656 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	9300      	str	r3, [sp, #0]
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	2200      	movs	r2, #0
 80046c4:	2140      	movs	r1, #64	; 0x40
 80046c6:	68f8      	ldr	r0, [r7, #12]
 80046c8:	f000 ff01 	bl	80054ce <UART_WaitOnFlagUntilTimeout>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d001      	beq.n	80046d6 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e006      	b.n	80046e4 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2220      	movs	r2, #32
 80046da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80046de:	2300      	movs	r3, #0
 80046e0:	e000      	b.n	80046e4 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 80046e2:	2302      	movs	r3, #2
  }
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3720      	adds	r7, #32
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b08a      	sub	sp, #40	; 0x28
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	4613      	mov	r3, r2
 80046f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004700:	2b20      	cmp	r3, #32
 8004702:	d137      	bne.n	8004774 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d002      	beq.n	8004710 <HAL_UART_Receive_IT+0x24>
 800470a:	88fb      	ldrh	r3, [r7, #6]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d101      	bne.n	8004714 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e030      	b.n	8004776 <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2200      	movs	r2, #0
 8004718:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a18      	ldr	r2, [pc, #96]	; (8004780 <HAL_UART_Receive_IT+0x94>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d01f      	beq.n	8004764 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d018      	beq.n	8004764 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	e853 3f00 	ldrex	r3, [r3]
 800473e:	613b      	str	r3, [r7, #16]
   return(result);
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004746:	627b      	str	r3, [r7, #36]	; 0x24
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	461a      	mov	r2, r3
 800474e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004750:	623b      	str	r3, [r7, #32]
 8004752:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004754:	69f9      	ldr	r1, [r7, #28]
 8004756:	6a3a      	ldr	r2, [r7, #32]
 8004758:	e841 2300 	strex	r3, r2, [r1]
 800475c:	61bb      	str	r3, [r7, #24]
   return(result);
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d1e6      	bne.n	8004732 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004764:	88fb      	ldrh	r3, [r7, #6]
 8004766:	461a      	mov	r2, r3
 8004768:	68b9      	ldr	r1, [r7, #8]
 800476a:	68f8      	ldr	r0, [r7, #12]
 800476c:	f000 ff78 	bl	8005660 <UART_Start_Receive_IT>
 8004770:	4603      	mov	r3, r0
 8004772:	e000      	b.n	8004776 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004774:	2302      	movs	r3, #2
  }
}
 8004776:	4618      	mov	r0, r3
 8004778:	3728      	adds	r7, #40	; 0x28
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	40008000 	.word	0x40008000

08004784 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b0ba      	sub	sp, #232	; 0xe8
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	69db      	ldr	r3, [r3, #28]
 8004792:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80047aa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80047ae:	f640 030f 	movw	r3, #2063	; 0x80f
 80047b2:	4013      	ands	r3, r2
 80047b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80047b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d11b      	bne.n	80047f8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80047c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047c4:	f003 0320 	and.w	r3, r3, #32
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d015      	beq.n	80047f8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80047cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047d0:	f003 0320 	and.w	r3, r3, #32
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d105      	bne.n	80047e4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80047d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d009      	beq.n	80047f8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	f000 82e3 	beq.w	8004db4 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	4798      	blx	r3
      }
      return;
 80047f6:	e2dd      	b.n	8004db4 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80047f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	f000 8123 	beq.w	8004a48 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004802:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004806:	4b8d      	ldr	r3, [pc, #564]	; (8004a3c <HAL_UART_IRQHandler+0x2b8>)
 8004808:	4013      	ands	r3, r2
 800480a:	2b00      	cmp	r3, #0
 800480c:	d106      	bne.n	800481c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800480e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004812:	4b8b      	ldr	r3, [pc, #556]	; (8004a40 <HAL_UART_IRQHandler+0x2bc>)
 8004814:	4013      	ands	r3, r2
 8004816:	2b00      	cmp	r3, #0
 8004818:	f000 8116 	beq.w	8004a48 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800481c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004820:	f003 0301 	and.w	r3, r3, #1
 8004824:	2b00      	cmp	r3, #0
 8004826:	d011      	beq.n	800484c <HAL_UART_IRQHandler+0xc8>
 8004828:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800482c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004830:	2b00      	cmp	r3, #0
 8004832:	d00b      	beq.n	800484c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2201      	movs	r2, #1
 800483a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004842:	f043 0201 	orr.w	r2, r3, #1
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800484c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004850:	f003 0302 	and.w	r3, r3, #2
 8004854:	2b00      	cmp	r3, #0
 8004856:	d011      	beq.n	800487c <HAL_UART_IRQHandler+0xf8>
 8004858:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800485c:	f003 0301 	and.w	r3, r3, #1
 8004860:	2b00      	cmp	r3, #0
 8004862:	d00b      	beq.n	800487c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	2202      	movs	r2, #2
 800486a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004872:	f043 0204 	orr.w	r2, r3, #4
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800487c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004880:	f003 0304 	and.w	r3, r3, #4
 8004884:	2b00      	cmp	r3, #0
 8004886:	d011      	beq.n	80048ac <HAL_UART_IRQHandler+0x128>
 8004888:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800488c:	f003 0301 	and.w	r3, r3, #1
 8004890:	2b00      	cmp	r3, #0
 8004892:	d00b      	beq.n	80048ac <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2204      	movs	r2, #4
 800489a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a2:	f043 0202 	orr.w	r2, r3, #2
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80048ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048b0:	f003 0308 	and.w	r3, r3, #8
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d017      	beq.n	80048e8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80048b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048bc:	f003 0320 	and.w	r3, r3, #32
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d105      	bne.n	80048d0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80048c4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80048c8:	4b5c      	ldr	r3, [pc, #368]	; (8004a3c <HAL_UART_IRQHandler+0x2b8>)
 80048ca:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00b      	beq.n	80048e8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2208      	movs	r2, #8
 80048d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048de:	f043 0208 	orr.w	r2, r3, #8
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80048e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d012      	beq.n	800491a <HAL_UART_IRQHandler+0x196>
 80048f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d00c      	beq.n	800491a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004908:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004910:	f043 0220 	orr.w	r2, r3, #32
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004920:	2b00      	cmp	r3, #0
 8004922:	f000 8249 	beq.w	8004db8 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800492a:	f003 0320 	and.w	r3, r3, #32
 800492e:	2b00      	cmp	r3, #0
 8004930:	d013      	beq.n	800495a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004932:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004936:	f003 0320 	and.w	r3, r3, #32
 800493a:	2b00      	cmp	r3, #0
 800493c:	d105      	bne.n	800494a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800493e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d007      	beq.n	800495a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800494e:	2b00      	cmp	r3, #0
 8004950:	d003      	beq.n	800495a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004960:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800496e:	2b40      	cmp	r3, #64	; 0x40
 8004970:	d005      	beq.n	800497e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004972:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004976:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800497a:	2b00      	cmp	r3, #0
 800497c:	d054      	beq.n	8004a28 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 ff8e 	bl	80058a0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800498e:	2b40      	cmp	r3, #64	; 0x40
 8004990:	d146      	bne.n	8004a20 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	3308      	adds	r3, #8
 8004998:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800499c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80049a0:	e853 3f00 	ldrex	r3, [r3]
 80049a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80049a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80049ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	3308      	adds	r3, #8
 80049ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80049be:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80049c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80049ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80049ce:	e841 2300 	strex	r3, r2, [r1]
 80049d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80049d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d1d9      	bne.n	8004992 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d017      	beq.n	8004a18 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049ee:	4a15      	ldr	r2, [pc, #84]	; (8004a44 <HAL_UART_IRQHandler+0x2c0>)
 80049f0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049f8:	4618      	mov	r0, r3
 80049fa:	f7fd f868 	bl	8001ace <HAL_DMA_Abort_IT>
 80049fe:	4603      	mov	r3, r0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d019      	beq.n	8004a38 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8004a12:	4610      	mov	r0, r2
 8004a14:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a16:	e00f      	b.n	8004a38 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 f9e0 	bl	8004dde <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a1e:	e00b      	b.n	8004a38 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 f9dc 	bl	8004dde <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a26:	e007      	b.n	8004a38 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a28:	6878      	ldr	r0, [r7, #4]
 8004a2a:	f000 f9d8 	bl	8004dde <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8004a36:	e1bf      	b.n	8004db8 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a38:	bf00      	nop
    return;
 8004a3a:	e1bd      	b.n	8004db8 <HAL_UART_IRQHandler+0x634>
 8004a3c:	10000001 	.word	0x10000001
 8004a40:	04000120 	.word	0x04000120
 8004a44:	0800596b 	.word	0x0800596b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	f040 8153 	bne.w	8004cf8 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a56:	f003 0310 	and.w	r3, r3, #16
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	f000 814c 	beq.w	8004cf8 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004a60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a64:	f003 0310 	and.w	r3, r3, #16
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f000 8145 	beq.w	8004cf8 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	2210      	movs	r2, #16
 8004a74:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a80:	2b40      	cmp	r3, #64	; 0x40
 8004a82:	f040 80bb 	bne.w	8004bfc <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004a94:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	f000 818f 	beq.w	8004dbc <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004aa4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	f080 8187 	bcs.w	8004dbc <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004ab4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0320 	and.w	r3, r3, #32
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	f040 8087 	bne.w	8004bda <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ad8:	e853 3f00 	ldrex	r3, [r3]
 8004adc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004ae0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ae4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ae8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	461a      	mov	r2, r3
 8004af2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004af6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004afa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004afe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004b02:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004b06:	e841 2300 	strex	r3, r2, [r1]
 8004b0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004b0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d1da      	bne.n	8004acc <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	3308      	adds	r3, #8
 8004b1c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b20:	e853 3f00 	ldrex	r3, [r3]
 8004b24:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004b26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b28:	f023 0301 	bic.w	r3, r3, #1
 8004b2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	3308      	adds	r3, #8
 8004b36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004b3a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004b3e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b40:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004b42:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004b46:	e841 2300 	strex	r3, r2, [r1]
 8004b4a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004b4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d1e1      	bne.n	8004b16 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	3308      	adds	r3, #8
 8004b58:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b5c:	e853 3f00 	ldrex	r3, [r3]
 8004b60:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004b62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	3308      	adds	r3, #8
 8004b72:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004b76:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004b78:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b7a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004b7c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004b7e:	e841 2300 	strex	r3, r2, [r1]
 8004b82:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004b84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d1e3      	bne.n	8004b52 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2220      	movs	r2, #32
 8004b8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ba0:	e853 3f00 	ldrex	r3, [r3]
 8004ba4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004ba6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ba8:	f023 0310 	bic.w	r3, r3, #16
 8004bac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004bba:	65bb      	str	r3, [r7, #88]	; 0x58
 8004bbc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bbe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004bc0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004bc2:	e841 2300 	strex	r3, r2, [r1]
 8004bc6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004bc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1e4      	bne.n	8004b98 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f7fc ff1c 	bl	8001a12 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2202      	movs	r2, #2
 8004bde:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f000 f8fb 	bl	8004df0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004bfa:	e0df      	b.n	8004dbc <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	f000 80d1 	beq.w	8004dc0 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8004c1e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	f000 80cc 	beq.w	8004dc0 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c30:	e853 3f00 	ldrex	r3, [r3]
 8004c34:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c3c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	461a      	mov	r2, r3
 8004c46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004c4a:	647b      	str	r3, [r7, #68]	; 0x44
 8004c4c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c52:	e841 2300 	strex	r3, r2, [r1]
 8004c56:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1e4      	bne.n	8004c28 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	3308      	adds	r3, #8
 8004c64:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c68:	e853 3f00 	ldrex	r3, [r3]
 8004c6c:	623b      	str	r3, [r7, #32]
   return(result);
 8004c6e:	6a3b      	ldr	r3, [r7, #32]
 8004c70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c74:	f023 0301 	bic.w	r3, r3, #1
 8004c78:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	3308      	adds	r3, #8
 8004c82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004c86:	633a      	str	r2, [r7, #48]	; 0x30
 8004c88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c8e:	e841 2300 	strex	r3, r2, [r1]
 8004c92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1e1      	bne.n	8004c5e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2220      	movs	r2, #32
 8004c9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	e853 3f00 	ldrex	r3, [r3]
 8004cba:	60fb      	str	r3, [r7, #12]
   return(result);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f023 0310 	bic.w	r3, r3, #16
 8004cc2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	461a      	mov	r2, r3
 8004ccc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004cd0:	61fb      	str	r3, [r7, #28]
 8004cd2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd4:	69b9      	ldr	r1, [r7, #24]
 8004cd6:	69fa      	ldr	r2, [r7, #28]
 8004cd8:	e841 2300 	strex	r3, r2, [r1]
 8004cdc:	617b      	str	r3, [r7, #20]
   return(result);
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d1e4      	bne.n	8004cae <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2202      	movs	r2, #2
 8004ce8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004cea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004cee:	4619      	mov	r1, r3
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f000 f87d 	bl	8004df0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004cf6:	e063      	b.n	8004dc0 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004cf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d00e      	beq.n	8004d22 <HAL_UART_IRQHandler+0x59e>
 8004d04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d008      	beq.n	8004d22 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004d18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f001 fb82 	bl	8006424 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004d20:	e051      	b.n	8004dc6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d014      	beq.n	8004d58 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004d2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d105      	bne.n	8004d46 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004d3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d3e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d008      	beq.n	8004d58 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d03a      	beq.n	8004dc4 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	4798      	blx	r3
    }
    return;
 8004d56:	e035      	b.n	8004dc4 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004d58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d009      	beq.n	8004d78 <HAL_UART_IRQHandler+0x5f4>
 8004d64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d003      	beq.n	8004d78 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f000 fe10 	bl	8005996 <UART_EndTransmit_IT>
    return;
 8004d76:	e026      	b.n	8004dc6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004d78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d009      	beq.n	8004d98 <HAL_UART_IRQHandler+0x614>
 8004d84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d88:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d003      	beq.n	8004d98 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f001 fb59 	bl	8006448 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004d96:	e016      	b.n	8004dc6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004d98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d010      	beq.n	8004dc6 <HAL_UART_IRQHandler+0x642>
 8004da4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	da0c      	bge.n	8004dc6 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f001 fb42 	bl	8006436 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004db2:	e008      	b.n	8004dc6 <HAL_UART_IRQHandler+0x642>
      return;
 8004db4:	bf00      	nop
 8004db6:	e006      	b.n	8004dc6 <HAL_UART_IRQHandler+0x642>
    return;
 8004db8:	bf00      	nop
 8004dba:	e004      	b.n	8004dc6 <HAL_UART_IRQHandler+0x642>
      return;
 8004dbc:	bf00      	nop
 8004dbe:	e002      	b.n	8004dc6 <HAL_UART_IRQHandler+0x642>
      return;
 8004dc0:	bf00      	nop
 8004dc2:	e000      	b.n	8004dc6 <HAL_UART_IRQHandler+0x642>
    return;
 8004dc4:	bf00      	nop
  }
}
 8004dc6:	37e8      	adds	r7, #232	; 0xe8
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004dd4:	bf00      	nop
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bc80      	pop	{r7}
 8004ddc:	4770      	bx	lr

08004dde <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004dde:	b480      	push	{r7}
 8004de0:	b083      	sub	sp, #12
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004de6:	bf00      	nop
 8004de8:	370c      	adds	r7, #12
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bc80      	pop	{r7}
 8004dee:	4770      	bx	lr

08004df0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	460b      	mov	r3, r1
 8004dfa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004dfc:	bf00      	nop
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bc80      	pop	{r7}
 8004e04:	4770      	bx	lr
	...

08004e08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e0c:	b08c      	sub	sp, #48	; 0x30
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e12:	2300      	movs	r3, #0
 8004e14:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	689a      	ldr	r2, [r3, #8]
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	431a      	orrs	r2, r3
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	431a      	orrs	r2, r3
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	69db      	ldr	r3, [r3, #28]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	4b94      	ldr	r3, [pc, #592]	; (8005088 <UART_SetConfig+0x280>)
 8004e38:	4013      	ands	r3, r2
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	6812      	ldr	r2, [r2, #0]
 8004e3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e40:	430b      	orrs	r3, r1
 8004e42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	68da      	ldr	r2, [r3, #12]
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	430a      	orrs	r2, r1
 8004e58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a89      	ldr	r2, [pc, #548]	; (800508c <UART_SetConfig+0x284>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d004      	beq.n	8004e74 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	6a1b      	ldr	r3, [r3, #32]
 8004e6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e70:	4313      	orrs	r3, r2
 8004e72:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e74:	697b      	ldr	r3, [r7, #20]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004e7e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004e82:	697a      	ldr	r2, [r7, #20]
 8004e84:	6812      	ldr	r2, [r2, #0]
 8004e86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e88:	430b      	orrs	r3, r1
 8004e8a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e92:	f023 010f 	bic.w	r1, r3, #15
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	430a      	orrs	r2, r1
 8004ea0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a7a      	ldr	r2, [pc, #488]	; (8005090 <UART_SetConfig+0x288>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d127      	bne.n	8004efc <UART_SetConfig+0xf4>
 8004eac:	2003      	movs	r0, #3
 8004eae:	f7ff face 	bl	800444e <LL_RCC_GetUSARTClockSource>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8004eb8:	2b03      	cmp	r3, #3
 8004eba:	d81b      	bhi.n	8004ef4 <UART_SetConfig+0xec>
 8004ebc:	a201      	add	r2, pc, #4	; (adr r2, 8004ec4 <UART_SetConfig+0xbc>)
 8004ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec2:	bf00      	nop
 8004ec4:	08004ed5 	.word	0x08004ed5
 8004ec8:	08004ee5 	.word	0x08004ee5
 8004ecc:	08004edd 	.word	0x08004edd
 8004ed0:	08004eed 	.word	0x08004eed
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004eda:	e080      	b.n	8004fde <UART_SetConfig+0x1d6>
 8004edc:	2302      	movs	r3, #2
 8004ede:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ee2:	e07c      	b.n	8004fde <UART_SetConfig+0x1d6>
 8004ee4:	2304      	movs	r3, #4
 8004ee6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004eea:	e078      	b.n	8004fde <UART_SetConfig+0x1d6>
 8004eec:	2308      	movs	r3, #8
 8004eee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ef2:	e074      	b.n	8004fde <UART_SetConfig+0x1d6>
 8004ef4:	2310      	movs	r3, #16
 8004ef6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004efa:	e070      	b.n	8004fde <UART_SetConfig+0x1d6>
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a64      	ldr	r2, [pc, #400]	; (8005094 <UART_SetConfig+0x28c>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d138      	bne.n	8004f78 <UART_SetConfig+0x170>
 8004f06:	200c      	movs	r0, #12
 8004f08:	f7ff faa1 	bl	800444e <LL_RCC_GetUSARTClockSource>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8004f12:	2b0c      	cmp	r3, #12
 8004f14:	d82c      	bhi.n	8004f70 <UART_SetConfig+0x168>
 8004f16:	a201      	add	r2, pc, #4	; (adr r2, 8004f1c <UART_SetConfig+0x114>)
 8004f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f1c:	08004f51 	.word	0x08004f51
 8004f20:	08004f71 	.word	0x08004f71
 8004f24:	08004f71 	.word	0x08004f71
 8004f28:	08004f71 	.word	0x08004f71
 8004f2c:	08004f61 	.word	0x08004f61
 8004f30:	08004f71 	.word	0x08004f71
 8004f34:	08004f71 	.word	0x08004f71
 8004f38:	08004f71 	.word	0x08004f71
 8004f3c:	08004f59 	.word	0x08004f59
 8004f40:	08004f71 	.word	0x08004f71
 8004f44:	08004f71 	.word	0x08004f71
 8004f48:	08004f71 	.word	0x08004f71
 8004f4c:	08004f69 	.word	0x08004f69
 8004f50:	2300      	movs	r3, #0
 8004f52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f56:	e042      	b.n	8004fde <UART_SetConfig+0x1d6>
 8004f58:	2302      	movs	r3, #2
 8004f5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f5e:	e03e      	b.n	8004fde <UART_SetConfig+0x1d6>
 8004f60:	2304      	movs	r3, #4
 8004f62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f66:	e03a      	b.n	8004fde <UART_SetConfig+0x1d6>
 8004f68:	2308      	movs	r3, #8
 8004f6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f6e:	e036      	b.n	8004fde <UART_SetConfig+0x1d6>
 8004f70:	2310      	movs	r3, #16
 8004f72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f76:	e032      	b.n	8004fde <UART_SetConfig+0x1d6>
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a43      	ldr	r2, [pc, #268]	; (800508c <UART_SetConfig+0x284>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d12a      	bne.n	8004fd8 <UART_SetConfig+0x1d0>
 8004f82:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8004f86:	f7ff fa74 	bl	8004472 <LL_RCC_GetLPUARTClockSource>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f90:	d01a      	beq.n	8004fc8 <UART_SetConfig+0x1c0>
 8004f92:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f96:	d81b      	bhi.n	8004fd0 <UART_SetConfig+0x1c8>
 8004f98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f9c:	d00c      	beq.n	8004fb8 <UART_SetConfig+0x1b0>
 8004f9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fa2:	d815      	bhi.n	8004fd0 <UART_SetConfig+0x1c8>
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d003      	beq.n	8004fb0 <UART_SetConfig+0x1a8>
 8004fa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fac:	d008      	beq.n	8004fc0 <UART_SetConfig+0x1b8>
 8004fae:	e00f      	b.n	8004fd0 <UART_SetConfig+0x1c8>
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fb6:	e012      	b.n	8004fde <UART_SetConfig+0x1d6>
 8004fb8:	2302      	movs	r3, #2
 8004fba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fbe:	e00e      	b.n	8004fde <UART_SetConfig+0x1d6>
 8004fc0:	2304      	movs	r3, #4
 8004fc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fc6:	e00a      	b.n	8004fde <UART_SetConfig+0x1d6>
 8004fc8:	2308      	movs	r3, #8
 8004fca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fce:	e006      	b.n	8004fde <UART_SetConfig+0x1d6>
 8004fd0:	2310      	movs	r3, #16
 8004fd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fd6:	e002      	b.n	8004fde <UART_SetConfig+0x1d6>
 8004fd8:	2310      	movs	r3, #16
 8004fda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a2a      	ldr	r2, [pc, #168]	; (800508c <UART_SetConfig+0x284>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	f040 80a4 	bne.w	8005132 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004fea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004fee:	2b08      	cmp	r3, #8
 8004ff0:	d823      	bhi.n	800503a <UART_SetConfig+0x232>
 8004ff2:	a201      	add	r2, pc, #4	; (adr r2, 8004ff8 <UART_SetConfig+0x1f0>)
 8004ff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ff8:	0800501d 	.word	0x0800501d
 8004ffc:	0800503b 	.word	0x0800503b
 8005000:	08005025 	.word	0x08005025
 8005004:	0800503b 	.word	0x0800503b
 8005008:	0800502b 	.word	0x0800502b
 800500c:	0800503b 	.word	0x0800503b
 8005010:	0800503b 	.word	0x0800503b
 8005014:	0800503b 	.word	0x0800503b
 8005018:	08005033 	.word	0x08005033
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800501c:	f7fe f856 	bl	80030cc <HAL_RCC_GetPCLK1Freq>
 8005020:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005022:	e010      	b.n	8005046 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005024:	4b1c      	ldr	r3, [pc, #112]	; (8005098 <UART_SetConfig+0x290>)
 8005026:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005028:	e00d      	b.n	8005046 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800502a:	f7fd ff9b 	bl	8002f64 <HAL_RCC_GetSysClockFreq>
 800502e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005030:	e009      	b.n	8005046 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005032:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005036:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005038:	e005      	b.n	8005046 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800503a:	2300      	movs	r3, #0
 800503c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005044:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005048:	2b00      	cmp	r3, #0
 800504a:	f000 8137 	beq.w	80052bc <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005052:	4a12      	ldr	r2, [pc, #72]	; (800509c <UART_SetConfig+0x294>)
 8005054:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005058:	461a      	mov	r2, r3
 800505a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005060:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	685a      	ldr	r2, [r3, #4]
 8005066:	4613      	mov	r3, r2
 8005068:	005b      	lsls	r3, r3, #1
 800506a:	4413      	add	r3, r2
 800506c:	69ba      	ldr	r2, [r7, #24]
 800506e:	429a      	cmp	r2, r3
 8005070:	d305      	bcc.n	800507e <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005078:	69ba      	ldr	r2, [r7, #24]
 800507a:	429a      	cmp	r2, r3
 800507c:	d910      	bls.n	80050a0 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005084:	e11a      	b.n	80052bc <UART_SetConfig+0x4b4>
 8005086:	bf00      	nop
 8005088:	cfff69f3 	.word	0xcfff69f3
 800508c:	40008000 	.word	0x40008000
 8005090:	40013800 	.word	0x40013800
 8005094:	40004400 	.word	0x40004400
 8005098:	00f42400 	.word	0x00f42400
 800509c:	0800a9ac 	.word	0x0800a9ac
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80050a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a2:	2200      	movs	r2, #0
 80050a4:	60bb      	str	r3, [r7, #8]
 80050a6:	60fa      	str	r2, [r7, #12]
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ac:	4a8e      	ldr	r2, [pc, #568]	; (80052e8 <UART_SetConfig+0x4e0>)
 80050ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	2200      	movs	r2, #0
 80050b6:	603b      	str	r3, [r7, #0]
 80050b8:	607a      	str	r2, [r7, #4]
 80050ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80050c2:	f7fb f8b5 	bl	8000230 <__aeabi_uldivmod>
 80050c6:	4602      	mov	r2, r0
 80050c8:	460b      	mov	r3, r1
 80050ca:	4610      	mov	r0, r2
 80050cc:	4619      	mov	r1, r3
 80050ce:	f04f 0200 	mov.w	r2, #0
 80050d2:	f04f 0300 	mov.w	r3, #0
 80050d6:	020b      	lsls	r3, r1, #8
 80050d8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80050dc:	0202      	lsls	r2, r0, #8
 80050de:	6979      	ldr	r1, [r7, #20]
 80050e0:	6849      	ldr	r1, [r1, #4]
 80050e2:	0849      	lsrs	r1, r1, #1
 80050e4:	2000      	movs	r0, #0
 80050e6:	460c      	mov	r4, r1
 80050e8:	4605      	mov	r5, r0
 80050ea:	eb12 0804 	adds.w	r8, r2, r4
 80050ee:	eb43 0905 	adc.w	r9, r3, r5
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	469a      	mov	sl, r3
 80050fa:	4693      	mov	fp, r2
 80050fc:	4652      	mov	r2, sl
 80050fe:	465b      	mov	r3, fp
 8005100:	4640      	mov	r0, r8
 8005102:	4649      	mov	r1, r9
 8005104:	f7fb f894 	bl	8000230 <__aeabi_uldivmod>
 8005108:	4602      	mov	r2, r0
 800510a:	460b      	mov	r3, r1
 800510c:	4613      	mov	r3, r2
 800510e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005110:	6a3b      	ldr	r3, [r7, #32]
 8005112:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005116:	d308      	bcc.n	800512a <UART_SetConfig+0x322>
 8005118:	6a3b      	ldr	r3, [r7, #32]
 800511a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800511e:	d204      	bcs.n	800512a <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	6a3a      	ldr	r2, [r7, #32]
 8005126:	60da      	str	r2, [r3, #12]
 8005128:	e0c8      	b.n	80052bc <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005130:	e0c4      	b.n	80052bc <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	69db      	ldr	r3, [r3, #28]
 8005136:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800513a:	d167      	bne.n	800520c <UART_SetConfig+0x404>
  {
    switch (clocksource)
 800513c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005140:	2b08      	cmp	r3, #8
 8005142:	d828      	bhi.n	8005196 <UART_SetConfig+0x38e>
 8005144:	a201      	add	r2, pc, #4	; (adr r2, 800514c <UART_SetConfig+0x344>)
 8005146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800514a:	bf00      	nop
 800514c:	08005171 	.word	0x08005171
 8005150:	08005179 	.word	0x08005179
 8005154:	08005181 	.word	0x08005181
 8005158:	08005197 	.word	0x08005197
 800515c:	08005187 	.word	0x08005187
 8005160:	08005197 	.word	0x08005197
 8005164:	08005197 	.word	0x08005197
 8005168:	08005197 	.word	0x08005197
 800516c:	0800518f 	.word	0x0800518f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005170:	f7fd ffac 	bl	80030cc <HAL_RCC_GetPCLK1Freq>
 8005174:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005176:	e014      	b.n	80051a2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005178:	f7fd ffba 	bl	80030f0 <HAL_RCC_GetPCLK2Freq>
 800517c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800517e:	e010      	b.n	80051a2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005180:	4b5a      	ldr	r3, [pc, #360]	; (80052ec <UART_SetConfig+0x4e4>)
 8005182:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005184:	e00d      	b.n	80051a2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005186:	f7fd feed 	bl	8002f64 <HAL_RCC_GetSysClockFreq>
 800518a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800518c:	e009      	b.n	80051a2 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800518e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005192:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005194:	e005      	b.n	80051a2 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8005196:	2300      	movs	r3, #0
 8005198:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80051a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80051a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	f000 8089 	beq.w	80052bc <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ae:	4a4e      	ldr	r2, [pc, #312]	; (80052e8 <UART_SetConfig+0x4e0>)
 80051b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051b4:	461a      	mov	r2, r3
 80051b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80051bc:	005a      	lsls	r2, r3, #1
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	085b      	lsrs	r3, r3, #1
 80051c4:	441a      	add	r2, r3
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ce:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051d0:	6a3b      	ldr	r3, [r7, #32]
 80051d2:	2b0f      	cmp	r3, #15
 80051d4:	d916      	bls.n	8005204 <UART_SetConfig+0x3fc>
 80051d6:	6a3b      	ldr	r3, [r7, #32]
 80051d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051dc:	d212      	bcs.n	8005204 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80051de:	6a3b      	ldr	r3, [r7, #32]
 80051e0:	b29b      	uxth	r3, r3
 80051e2:	f023 030f 	bic.w	r3, r3, #15
 80051e6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051e8:	6a3b      	ldr	r3, [r7, #32]
 80051ea:	085b      	lsrs	r3, r3, #1
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	f003 0307 	and.w	r3, r3, #7
 80051f2:	b29a      	uxth	r2, r3
 80051f4:	8bfb      	ldrh	r3, [r7, #30]
 80051f6:	4313      	orrs	r3, r2
 80051f8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	8bfa      	ldrh	r2, [r7, #30]
 8005200:	60da      	str	r2, [r3, #12]
 8005202:	e05b      	b.n	80052bc <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800520a:	e057      	b.n	80052bc <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800520c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005210:	2b08      	cmp	r3, #8
 8005212:	d828      	bhi.n	8005266 <UART_SetConfig+0x45e>
 8005214:	a201      	add	r2, pc, #4	; (adr r2, 800521c <UART_SetConfig+0x414>)
 8005216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800521a:	bf00      	nop
 800521c:	08005241 	.word	0x08005241
 8005220:	08005249 	.word	0x08005249
 8005224:	08005251 	.word	0x08005251
 8005228:	08005267 	.word	0x08005267
 800522c:	08005257 	.word	0x08005257
 8005230:	08005267 	.word	0x08005267
 8005234:	08005267 	.word	0x08005267
 8005238:	08005267 	.word	0x08005267
 800523c:	0800525f 	.word	0x0800525f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005240:	f7fd ff44 	bl	80030cc <HAL_RCC_GetPCLK1Freq>
 8005244:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005246:	e014      	b.n	8005272 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005248:	f7fd ff52 	bl	80030f0 <HAL_RCC_GetPCLK2Freq>
 800524c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800524e:	e010      	b.n	8005272 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005250:	4b26      	ldr	r3, [pc, #152]	; (80052ec <UART_SetConfig+0x4e4>)
 8005252:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005254:	e00d      	b.n	8005272 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005256:	f7fd fe85 	bl	8002f64 <HAL_RCC_GetSysClockFreq>
 800525a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800525c:	e009      	b.n	8005272 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800525e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005262:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005264:	e005      	b.n	8005272 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8005266:	2300      	movs	r3, #0
 8005268:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005270:	bf00      	nop
    }

    if (pclk != 0U)
 8005272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005274:	2b00      	cmp	r3, #0
 8005276:	d021      	beq.n	80052bc <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527c:	4a1a      	ldr	r2, [pc, #104]	; (80052e8 <UART_SetConfig+0x4e0>)
 800527e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005282:	461a      	mov	r2, r3
 8005284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005286:	fbb3 f2f2 	udiv	r2, r3, r2
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	085b      	lsrs	r3, r3, #1
 8005290:	441a      	add	r2, r3
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	fbb2 f3f3 	udiv	r3, r2, r3
 800529a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800529c:	6a3b      	ldr	r3, [r7, #32]
 800529e:	2b0f      	cmp	r3, #15
 80052a0:	d909      	bls.n	80052b6 <UART_SetConfig+0x4ae>
 80052a2:	6a3b      	ldr	r3, [r7, #32]
 80052a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052a8:	d205      	bcs.n	80052b6 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80052aa:	6a3b      	ldr	r3, [r7, #32]
 80052ac:	b29a      	uxth	r2, r3
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	60da      	str	r2, [r3, #12]
 80052b4:	e002      	b.n	80052bc <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	2201      	movs	r2, #1
 80052c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	2200      	movs	r2, #0
 80052d0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	2200      	movs	r2, #0
 80052d6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80052d8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3730      	adds	r7, #48	; 0x30
 80052e0:	46bd      	mov	sp, r7
 80052e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052e6:	bf00      	nop
 80052e8:	0800a9ac 	.word	0x0800a9ac
 80052ec:	00f42400 	.word	0x00f42400

080052f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052fc:	f003 0301 	and.w	r3, r3, #1
 8005300:	2b00      	cmp	r3, #0
 8005302:	d00a      	beq.n	800531a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	430a      	orrs	r2, r1
 8005318:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800531e:	f003 0302 	and.w	r3, r3, #2
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00a      	beq.n	800533c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	430a      	orrs	r2, r1
 800533a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005340:	f003 0304 	and.w	r3, r3, #4
 8005344:	2b00      	cmp	r3, #0
 8005346:	d00a      	beq.n	800535e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	430a      	orrs	r2, r1
 800535c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005362:	f003 0308 	and.w	r3, r3, #8
 8005366:	2b00      	cmp	r3, #0
 8005368:	d00a      	beq.n	8005380 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	430a      	orrs	r2, r1
 800537e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005384:	f003 0310 	and.w	r3, r3, #16
 8005388:	2b00      	cmp	r3, #0
 800538a:	d00a      	beq.n	80053a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	430a      	orrs	r2, r1
 80053a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a6:	f003 0320 	and.w	r3, r3, #32
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d00a      	beq.n	80053c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	430a      	orrs	r2, r1
 80053c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d01a      	beq.n	8005406 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	430a      	orrs	r2, r1
 80053e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053ee:	d10a      	bne.n	8005406 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	430a      	orrs	r2, r1
 8005404:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800540a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00a      	beq.n	8005428 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	430a      	orrs	r2, r1
 8005426:	605a      	str	r2, [r3, #4]
  }
}
 8005428:	bf00      	nop
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	bc80      	pop	{r7}
 8005430:	4770      	bx	lr

08005432 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005432:	b580      	push	{r7, lr}
 8005434:	b086      	sub	sp, #24
 8005436:	af02      	add	r7, sp, #8
 8005438:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005442:	f7fb ffeb 	bl	800141c <HAL_GetTick>
 8005446:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f003 0308 	and.w	r3, r3, #8
 8005452:	2b08      	cmp	r3, #8
 8005454:	d10e      	bne.n	8005474 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005456:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800545a:	9300      	str	r3, [sp, #0]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2200      	movs	r2, #0
 8005460:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f000 f832 	bl	80054ce <UART_WaitOnFlagUntilTimeout>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d001      	beq.n	8005474 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005470:	2303      	movs	r3, #3
 8005472:	e028      	b.n	80054c6 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0304 	and.w	r3, r3, #4
 800547e:	2b04      	cmp	r3, #4
 8005480:	d10e      	bne.n	80054a0 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005482:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005486:	9300      	str	r3, [sp, #0]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2200      	movs	r2, #0
 800548c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f000 f81c 	bl	80054ce <UART_WaitOnFlagUntilTimeout>
 8005496:	4603      	mov	r3, r0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d001      	beq.n	80054a0 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800549c:	2303      	movs	r3, #3
 800549e:	e012      	b.n	80054c6 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2220      	movs	r2, #32
 80054a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2220      	movs	r2, #32
 80054ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2200      	movs	r2, #0
 80054b4:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80054c4:	2300      	movs	r3, #0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3710      	adds	r7, #16
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}

080054ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80054ce:	b580      	push	{r7, lr}
 80054d0:	b09c      	sub	sp, #112	; 0x70
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	60f8      	str	r0, [r7, #12]
 80054d6:	60b9      	str	r1, [r7, #8]
 80054d8:	603b      	str	r3, [r7, #0]
 80054da:	4613      	mov	r3, r2
 80054dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054de:	e0a9      	b.n	8005634 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e6:	f000 80a5 	beq.w	8005634 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054ea:	f7fb ff97 	bl	800141c <HAL_GetTick>
 80054ee:	4602      	mov	r2, r0
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d302      	bcc.n	8005500 <UART_WaitOnFlagUntilTimeout+0x32>
 80054fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d140      	bne.n	8005582 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005506:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005508:	e853 3f00 	ldrex	r3, [r3]
 800550c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800550e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005510:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005514:	667b      	str	r3, [r7, #100]	; 0x64
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	461a      	mov	r2, r3
 800551c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800551e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005520:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005522:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005524:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005526:	e841 2300 	strex	r3, r2, [r1]
 800552a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800552c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1e6      	bne.n	8005500 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	3308      	adds	r3, #8
 8005538:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800553a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800553c:	e853 3f00 	ldrex	r3, [r3]
 8005540:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005544:	f023 0301 	bic.w	r3, r3, #1
 8005548:	663b      	str	r3, [r7, #96]	; 0x60
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	3308      	adds	r3, #8
 8005550:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005552:	64ba      	str	r2, [r7, #72]	; 0x48
 8005554:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005556:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005558:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800555a:	e841 2300 	strex	r3, r2, [r1]
 800555e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005560:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005562:	2b00      	cmp	r3, #0
 8005564:	d1e5      	bne.n	8005532 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2220      	movs	r2, #32
 800556a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2220      	movs	r2, #32
 8005572:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e069      	b.n	8005656 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 0304 	and.w	r3, r3, #4
 800558c:	2b00      	cmp	r3, #0
 800558e:	d051      	beq.n	8005634 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	69db      	ldr	r3, [r3, #28]
 8005596:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800559a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800559e:	d149      	bne.n	8005634 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055a8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b2:	e853 3f00 	ldrex	r3, [r3]
 80055b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80055be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	461a      	mov	r2, r3
 80055c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055c8:	637b      	str	r3, [r7, #52]	; 0x34
 80055ca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80055ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055d0:	e841 2300 	strex	r3, r2, [r1]
 80055d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80055d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d1e6      	bne.n	80055aa <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	3308      	adds	r3, #8
 80055e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	e853 3f00 	ldrex	r3, [r3]
 80055ea:	613b      	str	r3, [r7, #16]
   return(result);
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	f023 0301 	bic.w	r3, r3, #1
 80055f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	3308      	adds	r3, #8
 80055fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80055fc:	623a      	str	r2, [r7, #32]
 80055fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005600:	69f9      	ldr	r1, [r7, #28]
 8005602:	6a3a      	ldr	r2, [r7, #32]
 8005604:	e841 2300 	strex	r3, r2, [r1]
 8005608:	61bb      	str	r3, [r7, #24]
   return(result);
 800560a:	69bb      	ldr	r3, [r7, #24]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d1e5      	bne.n	80055dc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2220      	movs	r2, #32
 8005614:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2220      	movs	r2, #32
 800561c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	2220      	movs	r2, #32
 8005624:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005630:	2303      	movs	r3, #3
 8005632:	e010      	b.n	8005656 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	69da      	ldr	r2, [r3, #28]
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	4013      	ands	r3, r2
 800563e:	68ba      	ldr	r2, [r7, #8]
 8005640:	429a      	cmp	r2, r3
 8005642:	bf0c      	ite	eq
 8005644:	2301      	moveq	r3, #1
 8005646:	2300      	movne	r3, #0
 8005648:	b2db      	uxtb	r3, r3
 800564a:	461a      	mov	r2, r3
 800564c:	79fb      	ldrb	r3, [r7, #7]
 800564e:	429a      	cmp	r2, r3
 8005650:	f43f af46 	beq.w	80054e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	3770      	adds	r7, #112	; 0x70
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
	...

08005660 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005660:	b480      	push	{r7}
 8005662:	b0a3      	sub	sp, #140	; 0x8c
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	4613      	mov	r3, r2
 800566c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	68ba      	ldr	r2, [r7, #8]
 8005672:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	88fa      	ldrh	r2, [r7, #6]
 8005678:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	88fa      	ldrh	r2, [r7, #6]
 8005680:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	2200      	movs	r2, #0
 8005688:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005692:	d10e      	bne.n	80056b2 <UART_Start_Receive_IT+0x52>
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d105      	bne.n	80056a8 <UART_Start_Receive_IT+0x48>
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f240 12ff 	movw	r2, #511	; 0x1ff
 80056a2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80056a6:	e02d      	b.n	8005704 <UART_Start_Receive_IT+0xa4>
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	22ff      	movs	r2, #255	; 0xff
 80056ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80056b0:	e028      	b.n	8005704 <UART_Start_Receive_IT+0xa4>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d10d      	bne.n	80056d6 <UART_Start_Receive_IT+0x76>
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d104      	bne.n	80056cc <UART_Start_Receive_IT+0x6c>
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	22ff      	movs	r2, #255	; 0xff
 80056c6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80056ca:	e01b      	b.n	8005704 <UART_Start_Receive_IT+0xa4>
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	227f      	movs	r2, #127	; 0x7f
 80056d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80056d4:	e016      	b.n	8005704 <UART_Start_Receive_IT+0xa4>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056de:	d10d      	bne.n	80056fc <UART_Start_Receive_IT+0x9c>
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	691b      	ldr	r3, [r3, #16]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d104      	bne.n	80056f2 <UART_Start_Receive_IT+0x92>
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	227f      	movs	r2, #127	; 0x7f
 80056ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80056f0:	e008      	b.n	8005704 <UART_Start_Receive_IT+0xa4>
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	223f      	movs	r2, #63	; 0x3f
 80056f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80056fa:	e003      	b.n	8005704 <UART_Start_Receive_IT+0xa4>
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2200      	movs	r2, #0
 8005700:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2200      	movs	r2, #0
 8005708:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2222      	movs	r2, #34	; 0x22
 8005710:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	3308      	adds	r3, #8
 800571a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800571c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800571e:	e853 3f00 	ldrex	r3, [r3]
 8005722:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005724:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005726:	f043 0301 	orr.w	r3, r3, #1
 800572a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	3308      	adds	r3, #8
 8005734:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005738:	673a      	str	r2, [r7, #112]	; 0x70
 800573a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800573c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800573e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005740:	e841 2300 	strex	r3, r2, [r1]
 8005744:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8005746:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1e3      	bne.n	8005714 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005750:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005754:	d14f      	bne.n	80057f6 <UART_Start_Receive_IT+0x196>
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800575c:	88fa      	ldrh	r2, [r7, #6]
 800575e:	429a      	cmp	r2, r3
 8005760:	d349      	bcc.n	80057f6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800576a:	d107      	bne.n	800577c <UART_Start_Receive_IT+0x11c>
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d103      	bne.n	800577c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	4a46      	ldr	r2, [pc, #280]	; (8005890 <UART_Start_Receive_IT+0x230>)
 8005778:	675a      	str	r2, [r3, #116]	; 0x74
 800577a:	e002      	b.n	8005782 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	4a45      	ldr	r2, [pc, #276]	; (8005894 <UART_Start_Receive_IT+0x234>)
 8005780:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d01a      	beq.n	80057c0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005790:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005792:	e853 3f00 	ldrex	r3, [r3]
 8005796:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005798:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800579a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800579e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	461a      	mov	r2, r3
 80057a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80057ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057ae:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80057b2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80057b4:	e841 2300 	strex	r3, r2, [r1]
 80057b8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80057ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d1e4      	bne.n	800578a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	3308      	adds	r3, #8
 80057c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057ca:	e853 3f00 	ldrex	r3, [r3]
 80057ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80057d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057d6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	3308      	adds	r3, #8
 80057de:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80057e0:	64ba      	str	r2, [r7, #72]	; 0x48
 80057e2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80057e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057e8:	e841 2300 	strex	r3, r2, [r1]
 80057ec:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80057ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d1e5      	bne.n	80057c0 <UART_Start_Receive_IT+0x160>
 80057f4:	e046      	b.n	8005884 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057fe:	d107      	bne.n	8005810 <UART_Start_Receive_IT+0x1b0>
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d103      	bne.n	8005810 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	4a23      	ldr	r2, [pc, #140]	; (8005898 <UART_Start_Receive_IT+0x238>)
 800580c:	675a      	str	r2, [r3, #116]	; 0x74
 800580e:	e002      	b.n	8005816 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	4a22      	ldr	r2, [pc, #136]	; (800589c <UART_Start_Receive_IT+0x23c>)
 8005814:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d019      	beq.n	8005852 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005826:	e853 3f00 	ldrex	r3, [r3]
 800582a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800582c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005832:	677b      	str	r3, [r7, #116]	; 0x74
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	461a      	mov	r2, r3
 800583a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800583c:	637b      	str	r3, [r7, #52]	; 0x34
 800583e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005840:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005842:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005844:	e841 2300 	strex	r3, r2, [r1]
 8005848:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800584a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800584c:	2b00      	cmp	r3, #0
 800584e:	d1e6      	bne.n	800581e <UART_Start_Receive_IT+0x1be>
 8005850:	e018      	b.n	8005884 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	e853 3f00 	ldrex	r3, [r3]
 800585e:	613b      	str	r3, [r7, #16]
   return(result);
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	f043 0320 	orr.w	r3, r3, #32
 8005866:	67bb      	str	r3, [r7, #120]	; 0x78
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	461a      	mov	r2, r3
 800586e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005870:	623b      	str	r3, [r7, #32]
 8005872:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005874:	69f9      	ldr	r1, [r7, #28]
 8005876:	6a3a      	ldr	r2, [r7, #32]
 8005878:	e841 2300 	strex	r3, r2, [r1]
 800587c:	61bb      	str	r3, [r7, #24]
   return(result);
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d1e6      	bne.n	8005852 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	378c      	adds	r7, #140	; 0x8c
 800588a:	46bd      	mov	sp, r7
 800588c:	bc80      	pop	{r7}
 800588e:	4770      	bx	lr
 8005890:	080060bd 	.word	0x080060bd
 8005894:	08005d5d 	.word	0x08005d5d
 8005898:	08005ba5 	.word	0x08005ba5
 800589c:	080059ed 	.word	0x080059ed

080058a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b095      	sub	sp, #84	; 0x54
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058b0:	e853 3f00 	ldrex	r3, [r3]
 80058b4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80058b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80058bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	461a      	mov	r2, r3
 80058c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058c6:	643b      	str	r3, [r7, #64]	; 0x40
 80058c8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80058cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80058ce:	e841 2300 	strex	r3, r2, [r1]
 80058d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80058d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d1e6      	bne.n	80058a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	3308      	adds	r3, #8
 80058e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e2:	6a3b      	ldr	r3, [r7, #32]
 80058e4:	e853 3f00 	ldrex	r3, [r3]
 80058e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058f0:	f023 0301 	bic.w	r3, r3, #1
 80058f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	3308      	adds	r3, #8
 80058fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005900:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005902:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005904:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005906:	e841 2300 	strex	r3, r2, [r1]
 800590a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800590c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590e:	2b00      	cmp	r3, #0
 8005910:	d1e3      	bne.n	80058da <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005916:	2b01      	cmp	r3, #1
 8005918:	d118      	bne.n	800594c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	e853 3f00 	ldrex	r3, [r3]
 8005926:	60bb      	str	r3, [r7, #8]
   return(result);
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	f023 0310 	bic.w	r3, r3, #16
 800592e:	647b      	str	r3, [r7, #68]	; 0x44
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	461a      	mov	r2, r3
 8005936:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005938:	61bb      	str	r3, [r7, #24]
 800593a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800593c:	6979      	ldr	r1, [r7, #20]
 800593e:	69ba      	ldr	r2, [r7, #24]
 8005940:	e841 2300 	strex	r3, r2, [r1]
 8005944:	613b      	str	r3, [r7, #16]
   return(result);
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d1e6      	bne.n	800591a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2220      	movs	r2, #32
 8005950:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005960:	bf00      	nop
 8005962:	3754      	adds	r7, #84	; 0x54
 8005964:	46bd      	mov	sp, r7
 8005966:	bc80      	pop	{r7}
 8005968:	4770      	bx	lr

0800596a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800596a:	b580      	push	{r7, lr}
 800596c:	b084      	sub	sp, #16
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005976:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2200      	movs	r2, #0
 800597c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2200      	movs	r2, #0
 8005984:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005988:	68f8      	ldr	r0, [r7, #12]
 800598a:	f7ff fa28 	bl	8004dde <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800598e:	bf00      	nop
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}

08005996 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005996:	b580      	push	{r7, lr}
 8005998:	b088      	sub	sp, #32
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	e853 3f00 	ldrex	r3, [r3]
 80059aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059b2:	61fb      	str	r3, [r7, #28]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	461a      	mov	r2, r3
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	61bb      	str	r3, [r7, #24]
 80059be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c0:	6979      	ldr	r1, [r7, #20]
 80059c2:	69ba      	ldr	r2, [r7, #24]
 80059c4:	e841 2300 	strex	r3, r2, [r1]
 80059c8:	613b      	str	r3, [r7, #16]
   return(result);
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d1e6      	bne.n	800599e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2220      	movs	r2, #32
 80059d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f7ff f9f4 	bl	8004dcc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059e4:	bf00      	nop
 80059e6:	3720      	adds	r7, #32
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}

080059ec <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b09c      	sub	sp, #112	; 0x70
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80059fa:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a04:	2b22      	cmp	r3, #34	; 0x22
 8005a06:	f040 80be 	bne.w	8005b86 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a10:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005a14:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005a18:	b2d9      	uxtb	r1, r3
 8005a1a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005a1e:	b2da      	uxtb	r2, r3
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a24:	400a      	ands	r2, r1
 8005a26:	b2d2      	uxtb	r2, r2
 8005a28:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a2e:	1c5a      	adds	r2, r3, #1
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	3b01      	subs	r3, #1
 8005a3e:	b29a      	uxth	r2, r3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005a4c:	b29b      	uxth	r3, r3
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	f040 80a1 	bne.w	8005b96 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a5c:	e853 3f00 	ldrex	r3, [r3]
 8005a60:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005a62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a68:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	461a      	mov	r2, r3
 8005a70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a72:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a74:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a76:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005a78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a7a:	e841 2300 	strex	r3, r2, [r1]
 8005a7e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005a80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d1e6      	bne.n	8005a54 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	3308      	adds	r3, #8
 8005a8c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a90:	e853 3f00 	ldrex	r3, [r3]
 8005a94:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005a96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a98:	f023 0301 	bic.w	r3, r3, #1
 8005a9c:	667b      	str	r3, [r7, #100]	; 0x64
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	3308      	adds	r3, #8
 8005aa4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005aa6:	647a      	str	r2, [r7, #68]	; 0x44
 8005aa8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aaa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005aac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005aae:	e841 2300 	strex	r3, r2, [r1]
 8005ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005ab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d1e5      	bne.n	8005a86 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2220      	movs	r2, #32
 8005abe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a33      	ldr	r2, [pc, #204]	; (8005ba0 <UART_RxISR_8BIT+0x1b4>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d01f      	beq.n	8005b18 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d018      	beq.n	8005b18 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aee:	e853 3f00 	ldrex	r3, [r3]
 8005af2:	623b      	str	r3, [r7, #32]
   return(result);
 8005af4:	6a3b      	ldr	r3, [r7, #32]
 8005af6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005afa:	663b      	str	r3, [r7, #96]	; 0x60
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	461a      	mov	r2, r3
 8005b02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b04:	633b      	str	r3, [r7, #48]	; 0x30
 8005b06:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b0c:	e841 2300 	strex	r3, r2, [r1]
 8005b10:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d1e6      	bne.n	8005ae6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d12e      	bne.n	8005b7e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	e853 3f00 	ldrex	r3, [r3]
 8005b32:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f023 0310 	bic.w	r3, r3, #16
 8005b3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	461a      	mov	r2, r3
 8005b42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b44:	61fb      	str	r3, [r7, #28]
 8005b46:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b48:	69b9      	ldr	r1, [r7, #24]
 8005b4a:	69fa      	ldr	r2, [r7, #28]
 8005b4c:	e841 2300 	strex	r3, r2, [r1]
 8005b50:	617b      	str	r3, [r7, #20]
   return(result);
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d1e6      	bne.n	8005b26 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	69db      	ldr	r3, [r3, #28]
 8005b5e:	f003 0310 	and.w	r3, r3, #16
 8005b62:	2b10      	cmp	r3, #16
 8005b64:	d103      	bne.n	8005b6e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	2210      	movs	r2, #16
 8005b6c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005b74:	4619      	mov	r1, r3
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f7ff f93a 	bl	8004df0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005b7c:	e00b      	b.n	8005b96 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 fe44 	bl	800680c <HAL_UART_RxCpltCallback>
}
 8005b84:	e007      	b.n	8005b96 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	699a      	ldr	r2, [r3, #24]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f042 0208 	orr.w	r2, r2, #8
 8005b94:	619a      	str	r2, [r3, #24]
}
 8005b96:	bf00      	nop
 8005b98:	3770      	adds	r7, #112	; 0x70
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	40008000 	.word	0x40008000

08005ba4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b09c      	sub	sp, #112	; 0x70
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005bb2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bbc:	2b22      	cmp	r3, #34	; 0x22
 8005bbe:	f040 80be 	bne.w	8005d3e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bd0:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005bd2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8005bd6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005bda:	4013      	ands	r3, r2
 8005bdc:	b29a      	uxth	r2, r3
 8005bde:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005be0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005be6:	1c9a      	adds	r2, r3, #2
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	3b01      	subs	r3, #1
 8005bf6:	b29a      	uxth	r2, r3
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	f040 80a1 	bne.w	8005d4e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c14:	e853 3f00 	ldrex	r3, [r3]
 8005c18:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005c1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c20:	667b      	str	r3, [r7, #100]	; 0x64
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	461a      	mov	r2, r3
 8005c28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c2a:	657b      	str	r3, [r7, #84]	; 0x54
 8005c2c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c2e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005c30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005c32:	e841 2300 	strex	r3, r2, [r1]
 8005c36:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005c38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d1e6      	bne.n	8005c0c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	3308      	adds	r3, #8
 8005c44:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c48:	e853 3f00 	ldrex	r3, [r3]
 8005c4c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c50:	f023 0301 	bic.w	r3, r3, #1
 8005c54:	663b      	str	r3, [r7, #96]	; 0x60
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	3308      	adds	r3, #8
 8005c5c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005c5e:	643a      	str	r2, [r7, #64]	; 0x40
 8005c60:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c62:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c64:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c66:	e841 2300 	strex	r3, r2, [r1]
 8005c6a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d1e5      	bne.n	8005c3e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2220      	movs	r2, #32
 8005c76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a33      	ldr	r2, [pc, #204]	; (8005d58 <UART_RxISR_16BIT+0x1b4>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d01f      	beq.n	8005cd0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d018      	beq.n	8005cd0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca4:	6a3b      	ldr	r3, [r7, #32]
 8005ca6:	e853 3f00 	ldrex	r3, [r3]
 8005caa:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005cb2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	461a      	mov	r2, r3
 8005cba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cbe:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cc4:	e841 2300 	strex	r3, r2, [r1]
 8005cc8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d1e6      	bne.n	8005c9e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d12e      	bne.n	8005d36 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	e853 3f00 	ldrex	r3, [r3]
 8005cea:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	f023 0310 	bic.w	r3, r3, #16
 8005cf2:	65bb      	str	r3, [r7, #88]	; 0x58
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005cfc:	61bb      	str	r3, [r7, #24]
 8005cfe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d00:	6979      	ldr	r1, [r7, #20]
 8005d02:	69ba      	ldr	r2, [r7, #24]
 8005d04:	e841 2300 	strex	r3, r2, [r1]
 8005d08:	613b      	str	r3, [r7, #16]
   return(result);
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d1e6      	bne.n	8005cde <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	69db      	ldr	r3, [r3, #28]
 8005d16:	f003 0310 	and.w	r3, r3, #16
 8005d1a:	2b10      	cmp	r3, #16
 8005d1c:	d103      	bne.n	8005d26 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	2210      	movs	r2, #16
 8005d24:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f7ff f85e 	bl	8004df0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005d34:	e00b      	b.n	8005d4e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 fd68 	bl	800680c <HAL_UART_RxCpltCallback>
}
 8005d3c:	e007      	b.n	8005d4e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	699a      	ldr	r2, [r3, #24]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f042 0208 	orr.w	r2, r2, #8
 8005d4c:	619a      	str	r2, [r3, #24]
}
 8005d4e:	bf00      	nop
 8005d50:	3770      	adds	r7, #112	; 0x70
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	40008000 	.word	0x40008000

08005d5c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b0ac      	sub	sp, #176	; 0xb0
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005d6a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	69db      	ldr	r3, [r3, #28]
 8005d74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d92:	2b22      	cmp	r3, #34	; 0x22
 8005d94:	f040 8182 	bne.w	800609c <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005d9e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005da2:	e125      	b.n	8005ff0 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005daa:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005dae:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8005db2:	b2d9      	uxtb	r1, r3
 8005db4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005db8:	b2da      	uxtb	r2, r3
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dbe:	400a      	ands	r2, r1
 8005dc0:	b2d2      	uxtb	r2, r2
 8005dc2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dc8:	1c5a      	adds	r2, r3, #1
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	b29a      	uxth	r2, r3
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	69db      	ldr	r3, [r3, #28]
 8005de6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005dea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005dee:	f003 0307 	and.w	r3, r3, #7
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d053      	beq.n	8005e9e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005df6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005dfa:	f003 0301 	and.w	r3, r3, #1
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d011      	beq.n	8005e26 <UART_RxISR_8BIT_FIFOEN+0xca>
 8005e02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d00b      	beq.n	8005e26 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2201      	movs	r2, #1
 8005e14:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e1c:	f043 0201 	orr.w	r2, r3, #1
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e2a:	f003 0302 	and.w	r3, r3, #2
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d011      	beq.n	8005e56 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8005e32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005e36:	f003 0301 	and.w	r3, r3, #1
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d00b      	beq.n	8005e56 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	2202      	movs	r2, #2
 8005e44:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e4c:	f043 0204 	orr.w	r2, r3, #4
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e5a:	f003 0304 	and.w	r3, r3, #4
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d011      	beq.n	8005e86 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8005e62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005e66:	f003 0301 	and.w	r3, r3, #1
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00b      	beq.n	8005e86 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	2204      	movs	r2, #4
 8005e74:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e7c:	f043 0202 	orr.w	r2, r3, #2
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d006      	beq.n	8005e9e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f7fe ffa4 	bl	8004dde <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	f040 80a2 	bne.w	8005ff0 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005eb4:	e853 3f00 	ldrex	r3, [r3]
 8005eb8:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8005eba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ebc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ec0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	461a      	mov	r2, r3
 8005eca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ece:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005ed0:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8005ed4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005ed6:	e841 2300 	strex	r3, r2, [r1]
 8005eda:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8005edc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d1e4      	bne.n	8005eac <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	3308      	adds	r3, #8
 8005ee8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005eec:	e853 3f00 	ldrex	r3, [r3]
 8005ef0:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8005ef2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ef4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ef8:	f023 0301 	bic.w	r3, r3, #1
 8005efc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	3308      	adds	r3, #8
 8005f06:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005f0a:	66ba      	str	r2, [r7, #104]	; 0x68
 8005f0c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f0e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8005f10:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005f12:	e841 2300 	strex	r3, r2, [r1]
 8005f16:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005f18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d1e1      	bne.n	8005ee2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2220      	movs	r2, #32
 8005f22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a5f      	ldr	r2, [pc, #380]	; (80060b4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d021      	beq.n	8005f80 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d01a      	beq.n	8005f80 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f52:	e853 3f00 	ldrex	r3, [r3]
 8005f56:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005f58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f5a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005f5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	461a      	mov	r2, r3
 8005f68:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005f6c:	657b      	str	r3, [r7, #84]	; 0x54
 8005f6e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f70:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005f72:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005f74:	e841 2300 	strex	r3, r2, [r1]
 8005f78:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005f7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d1e4      	bne.n	8005f4a <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d130      	bne.n	8005fea <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f96:	e853 3f00 	ldrex	r3, [r3]
 8005f9a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f9e:	f023 0310 	bic.w	r3, r3, #16
 8005fa2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	461a      	mov	r2, r3
 8005fac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005fb0:	643b      	str	r3, [r7, #64]	; 0x40
 8005fb2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005fb6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005fb8:	e841 2300 	strex	r3, r2, [r1]
 8005fbc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d1e4      	bne.n	8005f8e <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	69db      	ldr	r3, [r3, #28]
 8005fca:	f003 0310 	and.w	r3, r3, #16
 8005fce:	2b10      	cmp	r3, #16
 8005fd0:	d103      	bne.n	8005fda <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	2210      	movs	r2, #16
 8005fd8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f7fe ff04 	bl	8004df0 <HAL_UARTEx_RxEventCallback>
 8005fe8:	e002      	b.n	8005ff0 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f000 fc0e 	bl	800680c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005ff0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d006      	beq.n	8006006 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8005ff8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ffc:	f003 0320 	and.w	r3, r3, #32
 8006000:	2b00      	cmp	r3, #0
 8006002:	f47f aecf 	bne.w	8005da4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800600c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006010:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006014:	2b00      	cmp	r3, #0
 8006016:	d049      	beq.n	80060ac <UART_RxISR_8BIT_FIFOEN+0x350>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800601e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8006022:	429a      	cmp	r2, r3
 8006024:	d242      	bcs.n	80060ac <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	3308      	adds	r3, #8
 800602c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800602e:	6a3b      	ldr	r3, [r7, #32]
 8006030:	e853 3f00 	ldrex	r3, [r3]
 8006034:	61fb      	str	r3, [r7, #28]
   return(result);
 8006036:	69fb      	ldr	r3, [r7, #28]
 8006038:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800603c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	3308      	adds	r3, #8
 8006046:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800604a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800604c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800604e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006050:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006052:	e841 2300 	strex	r3, r2, [r1]
 8006056:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605a:	2b00      	cmp	r3, #0
 800605c:	d1e3      	bne.n	8006026 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a15      	ldr	r2, [pc, #84]	; (80060b8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8006062:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	e853 3f00 	ldrex	r3, [r3]
 8006070:	60bb      	str	r3, [r7, #8]
   return(result);
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	f043 0320 	orr.w	r3, r3, #32
 8006078:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	461a      	mov	r2, r3
 8006082:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006086:	61bb      	str	r3, [r7, #24]
 8006088:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608a:	6979      	ldr	r1, [r7, #20]
 800608c:	69ba      	ldr	r2, [r7, #24]
 800608e:	e841 2300 	strex	r3, r2, [r1]
 8006092:	613b      	str	r3, [r7, #16]
   return(result);
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d1e4      	bne.n	8006064 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800609a:	e007      	b.n	80060ac <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	699a      	ldr	r2, [r3, #24]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f042 0208 	orr.w	r2, r2, #8
 80060aa:	619a      	str	r2, [r3, #24]
}
 80060ac:	bf00      	nop
 80060ae:	37b0      	adds	r7, #176	; 0xb0
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}
 80060b4:	40008000 	.word	0x40008000
 80060b8:	080059ed 	.word	0x080059ed

080060bc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b0ae      	sub	sp, #184	; 0xb8
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80060ca:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	69db      	ldr	r3, [r3, #28]
 80060d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80060f2:	2b22      	cmp	r3, #34	; 0x22
 80060f4:	f040 8186 	bne.w	8006404 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80060fe:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006102:	e129      	b.n	8006358 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006112:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8006116:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800611a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800611e:	4013      	ands	r3, r2
 8006120:	b29a      	uxth	r2, r3
 8006122:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006126:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800612c:	1c9a      	adds	r2, r3, #2
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006138:	b29b      	uxth	r3, r3
 800613a:	3b01      	subs	r3, #1
 800613c:	b29a      	uxth	r2, r3
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	69db      	ldr	r3, [r3, #28]
 800614a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800614e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006152:	f003 0307 	and.w	r3, r3, #7
 8006156:	2b00      	cmp	r3, #0
 8006158:	d053      	beq.n	8006202 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800615a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800615e:	f003 0301 	and.w	r3, r3, #1
 8006162:	2b00      	cmp	r3, #0
 8006164:	d011      	beq.n	800618a <UART_RxISR_16BIT_FIFOEN+0xce>
 8006166:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800616a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00b      	beq.n	800618a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	2201      	movs	r2, #1
 8006178:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006180:	f043 0201 	orr.w	r2, r3, #1
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800618a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800618e:	f003 0302 	and.w	r3, r3, #2
 8006192:	2b00      	cmp	r3, #0
 8006194:	d011      	beq.n	80061ba <UART_RxISR_16BIT_FIFOEN+0xfe>
 8006196:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800619a:	f003 0301 	and.w	r3, r3, #1
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d00b      	beq.n	80061ba <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	2202      	movs	r2, #2
 80061a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061b0:	f043 0204 	orr.w	r2, r3, #4
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80061ba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80061be:	f003 0304 	and.w	r3, r3, #4
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d011      	beq.n	80061ea <UART_RxISR_16BIT_FIFOEN+0x12e>
 80061c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80061ca:	f003 0301 	and.w	r3, r3, #1
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d00b      	beq.n	80061ea <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	2204      	movs	r2, #4
 80061d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061e0:	f043 0202 	orr.w	r2, r3, #2
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d006      	beq.n	8006202 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f7fe fdf2 	bl	8004dde <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006208:	b29b      	uxth	r3, r3
 800620a:	2b00      	cmp	r3, #0
 800620c:	f040 80a4 	bne.w	8006358 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006216:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006218:	e853 3f00 	ldrex	r3, [r3]
 800621c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800621e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006220:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006224:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	461a      	mov	r2, r3
 800622e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006232:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006236:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006238:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800623a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800623e:	e841 2300 	strex	r3, r2, [r1]
 8006242:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006244:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006246:	2b00      	cmp	r3, #0
 8006248:	d1e2      	bne.n	8006210 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	3308      	adds	r3, #8
 8006250:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006252:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006254:	e853 3f00 	ldrex	r3, [r3]
 8006258:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800625a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800625c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006260:	f023 0301 	bic.w	r3, r3, #1
 8006264:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	3308      	adds	r3, #8
 800626e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8006272:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006274:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006276:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006278:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800627a:	e841 2300 	strex	r3, r2, [r1]
 800627e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006280:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006282:	2b00      	cmp	r3, #0
 8006284:	d1e1      	bne.n	800624a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2220      	movs	r2, #32
 800628a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2200      	movs	r2, #0
 8006298:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a5f      	ldr	r2, [pc, #380]	; (800641c <UART_RxISR_16BIT_FIFOEN+0x360>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d021      	beq.n	80062e8 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d01a      	beq.n	80062e8 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062ba:	e853 3f00 	ldrex	r3, [r3]
 80062be:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80062c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80062c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	461a      	mov	r2, r3
 80062d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80062d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80062d6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80062da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80062dc:	e841 2300 	strex	r3, r2, [r1]
 80062e0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80062e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d1e4      	bne.n	80062b2 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d130      	bne.n	8006352 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062fe:	e853 3f00 	ldrex	r3, [r3]
 8006302:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006306:	f023 0310 	bic.w	r3, r3, #16
 800630a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	461a      	mov	r2, r3
 8006314:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006318:	647b      	str	r3, [r7, #68]	; 0x44
 800631a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800631c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800631e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006320:	e841 2300 	strex	r3, r2, [r1]
 8006324:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006328:	2b00      	cmp	r3, #0
 800632a:	d1e4      	bne.n	80062f6 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	69db      	ldr	r3, [r3, #28]
 8006332:	f003 0310 	and.w	r3, r3, #16
 8006336:	2b10      	cmp	r3, #16
 8006338:	d103      	bne.n	8006342 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	2210      	movs	r2, #16
 8006340:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006348:	4619      	mov	r1, r3
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f7fe fd50 	bl	8004df0 <HAL_UARTEx_RxEventCallback>
 8006350:	e002      	b.n	8006358 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 fa5a 	bl	800680c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006358:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800635c:	2b00      	cmp	r3, #0
 800635e:	d006      	beq.n	800636e <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8006360:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006364:	f003 0320 	and.w	r3, r3, #32
 8006368:	2b00      	cmp	r3, #0
 800636a:	f47f aecb 	bne.w	8006104 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006374:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006378:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800637c:	2b00      	cmp	r3, #0
 800637e:	d049      	beq.n	8006414 <UART_RxISR_16BIT_FIFOEN+0x358>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006386:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800638a:	429a      	cmp	r2, r3
 800638c:	d242      	bcs.n	8006414 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	3308      	adds	r3, #8
 8006394:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006398:	e853 3f00 	ldrex	r3, [r3]
 800639c:	623b      	str	r3, [r7, #32]
   return(result);
 800639e:	6a3b      	ldr	r3, [r7, #32]
 80063a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	3308      	adds	r3, #8
 80063ae:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80063b2:	633a      	str	r2, [r7, #48]	; 0x30
 80063b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063ba:	e841 2300 	strex	r3, r2, [r1]
 80063be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80063c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d1e3      	bne.n	800638e <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	4a15      	ldr	r2, [pc, #84]	; (8006420 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80063ca:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	e853 3f00 	ldrex	r3, [r3]
 80063d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f043 0320 	orr.w	r3, r3, #32
 80063e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	461a      	mov	r2, r3
 80063ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063ee:	61fb      	str	r3, [r7, #28]
 80063f0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f2:	69b9      	ldr	r1, [r7, #24]
 80063f4:	69fa      	ldr	r2, [r7, #28]
 80063f6:	e841 2300 	strex	r3, r2, [r1]
 80063fa:	617b      	str	r3, [r7, #20]
   return(result);
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d1e4      	bne.n	80063cc <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006402:	e007      	b.n	8006414 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	699a      	ldr	r2, [r3, #24]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f042 0208 	orr.w	r2, r2, #8
 8006412:	619a      	str	r2, [r3, #24]
}
 8006414:	bf00      	nop
 8006416:	37b8      	adds	r7, #184	; 0xb8
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}
 800641c:	40008000 	.word	0x40008000
 8006420:	08005ba5 	.word	0x08005ba5

08006424 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800642c:	bf00      	nop
 800642e:	370c      	adds	r7, #12
 8006430:	46bd      	mov	sp, r7
 8006432:	bc80      	pop	{r7}
 8006434:	4770      	bx	lr

08006436 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006436:	b480      	push	{r7}
 8006438:	b083      	sub	sp, #12
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800643e:	bf00      	nop
 8006440:	370c      	adds	r7, #12
 8006442:	46bd      	mov	sp, r7
 8006444:	bc80      	pop	{r7}
 8006446:	4770      	bx	lr

08006448 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006448:	b480      	push	{r7}
 800644a:	b083      	sub	sp, #12
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006450:	bf00      	nop
 8006452:	370c      	adds	r7, #12
 8006454:	46bd      	mov	sp, r7
 8006456:	bc80      	pop	{r7}
 8006458:	4770      	bx	lr

0800645a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800645a:	b480      	push	{r7}
 800645c:	b085      	sub	sp, #20
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006468:	2b01      	cmp	r3, #1
 800646a:	d101      	bne.n	8006470 <HAL_UARTEx_DisableFifoMode+0x16>
 800646c:	2302      	movs	r3, #2
 800646e:	e027      	b.n	80064c0 <HAL_UARTEx_DisableFifoMode+0x66>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2224      	movs	r2, #36	; 0x24
 800647c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f022 0201 	bic.w	r2, r2, #1
 8006496:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800649e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	68fa      	ldr	r2, [r7, #12]
 80064ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2220      	movs	r2, #32
 80064b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80064be:	2300      	movs	r3, #0
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3714      	adds	r7, #20
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bc80      	pop	{r7}
 80064c8:	4770      	bx	lr

080064ca <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80064ca:	b580      	push	{r7, lr}
 80064cc:	b084      	sub	sp, #16
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6078      	str	r0, [r7, #4]
 80064d2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d101      	bne.n	80064e2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80064de:	2302      	movs	r3, #2
 80064e0:	e02d      	b.n	800653e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2201      	movs	r2, #1
 80064e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2224      	movs	r2, #36	; 0x24
 80064ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f022 0201 	bic.w	r2, r2, #1
 8006508:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	683a      	ldr	r2, [r7, #0]
 800651a:	430a      	orrs	r2, r1
 800651c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 f850 	bl	80065c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	68fa      	ldr	r2, [r7, #12]
 800652a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2220      	movs	r2, #32
 8006530:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800653c:	2300      	movs	r3, #0
}
 800653e:	4618      	mov	r0, r3
 8006540:	3710      	adds	r7, #16
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}

08006546 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006546:	b580      	push	{r7, lr}
 8006548:	b084      	sub	sp, #16
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
 800654e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006556:	2b01      	cmp	r3, #1
 8006558:	d101      	bne.n	800655e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800655a:	2302      	movs	r3, #2
 800655c:	e02d      	b.n	80065ba <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2201      	movs	r2, #1
 8006562:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2224      	movs	r2, #36	; 0x24
 800656a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	681a      	ldr	r2, [r3, #0]
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f022 0201 	bic.w	r2, r2, #1
 8006584:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	689b      	ldr	r3, [r3, #8]
 800658c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	683a      	ldr	r2, [r7, #0]
 8006596:	430a      	orrs	r2, r1
 8006598:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 f812 	bl	80065c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68fa      	ldr	r2, [r7, #12]
 80065a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	2220      	movs	r2, #32
 80065ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80065b8:	2300      	movs	r3, #0
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3710      	adds	r7, #16
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
	...

080065c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b085      	sub	sp, #20
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d108      	bne.n	80065e6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2201      	movs	r2, #1
 80065d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80065e4:	e031      	b.n	800664a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80065e6:	2308      	movs	r3, #8
 80065e8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80065ea:	2308      	movs	r3, #8
 80065ec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	0e5b      	lsrs	r3, r3, #25
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	f003 0307 	and.w	r3, r3, #7
 80065fc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	0f5b      	lsrs	r3, r3, #29
 8006606:	b2db      	uxtb	r3, r3
 8006608:	f003 0307 	and.w	r3, r3, #7
 800660c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800660e:	7bbb      	ldrb	r3, [r7, #14]
 8006610:	7b3a      	ldrb	r2, [r7, #12]
 8006612:	4910      	ldr	r1, [pc, #64]	; (8006654 <UARTEx_SetNbDataToProcess+0x90>)
 8006614:	5c8a      	ldrb	r2, [r1, r2]
 8006616:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800661a:	7b3a      	ldrb	r2, [r7, #12]
 800661c:	490e      	ldr	r1, [pc, #56]	; (8006658 <UARTEx_SetNbDataToProcess+0x94>)
 800661e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006620:	fb93 f3f2 	sdiv	r3, r3, r2
 8006624:	b29a      	uxth	r2, r3
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800662c:	7bfb      	ldrb	r3, [r7, #15]
 800662e:	7b7a      	ldrb	r2, [r7, #13]
 8006630:	4908      	ldr	r1, [pc, #32]	; (8006654 <UARTEx_SetNbDataToProcess+0x90>)
 8006632:	5c8a      	ldrb	r2, [r1, r2]
 8006634:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006638:	7b7a      	ldrb	r2, [r7, #13]
 800663a:	4907      	ldr	r1, [pc, #28]	; (8006658 <UARTEx_SetNbDataToProcess+0x94>)
 800663c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800663e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006642:	b29a      	uxth	r2, r3
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800664a:	bf00      	nop
 800664c:	3714      	adds	r7, #20
 800664e:	46bd      	mov	sp, r7
 8006650:	bc80      	pop	{r7}
 8006652:	4770      	bx	lr
 8006654:	0800a9c4 	.word	0x0800a9c4
 8006658:	0800a9cc 	.word	0x0800a9cc

0800665c <serialPutStr>:

#include "Uart.h"


void serialPutStr(const char *data)
{
 800665c:	b590      	push	{r4, r7, lr}
 800665e:	b083      	sub	sp, #12
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
   //Get exclusive access
  //osAcquireMutex(&uartMutex);
  HAL_UART_Transmit(Get_DebugHandle(),(uint8_t *)data, strlen(data),DEBUG_UART_TIMEOUT);
 8006664:	f7fa fade 	bl	8000c24 <Get_DebugHandle>
 8006668:	4604      	mov	r4, r0
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f7f9 fd88 	bl	8000180 <strlen>
 8006670:	4603      	mov	r3, r0
 8006672:	b29a      	uxth	r2, r3
 8006674:	230a      	movs	r3, #10
 8006676:	6879      	ldr	r1, [r7, #4]
 8006678:	4620      	mov	r0, r4
 800667a:	f7fd ffb1 	bl	80045e0 <HAL_UART_Transmit>
  //osReleaseMutex(&uartMutex);

}
 800667e:	bf00      	nop
 8006680:	370c      	adds	r7, #12
 8006682:	46bd      	mov	sp, r7
 8006684:	bd90      	pop	{r4, r7, pc}
	...

08006688 <terminalTaskHandler>:



/* USER CODE END Header_terminalTaskHandler */
void terminalTaskHandler(void const * argument)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	int tCommandReady = 0;
 8006690:	2300      	movs	r3, #0
 8006692:	60fb      	str	r3, [r7, #12]
	char tRxedChar;
	HAL_UART_Receive_IT(Get_DebugHandle(),(uint8_t*)uartData,UART_RECEIVE_SIZE);
 8006694:	f7fa fac6 	bl	8000c24 <Get_DebugHandle>
 8006698:	4603      	mov	r3, r0
 800669a:	2201      	movs	r2, #1
 800669c:	490f      	ldr	r1, [pc, #60]	; (80066dc <terminalTaskHandler+0x54>)
 800669e:	4618      	mov	r0, r3
 80066a0:	f7fe f824 	bl	80046ec <HAL_UART_Receive_IT>
	/* Infinite loop */
	for(;;)
	{
		/* Process Terminal Commands */
		if(xQueueReceive(Get_TerminalQueueHandle(),&tRxedChar,QUEUE_TIMEOUT))
 80066a4:	f7fa fac8 	bl	8000c38 <Get_TerminalQueueHandle>
 80066a8:	f107 030b 	add.w	r3, r7, #11
 80066ac:	220a      	movs	r2, #10
 80066ae:	4619      	mov	r1, r3
 80066b0:	f000 fd64 	bl	800717c <xQueueReceive>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d00c      	beq.n	80066d4 <terminalTaskHandler+0x4c>
		{
			tCommandReady = CommandLineBuildCommand(tRxedChar);
 80066ba:	7afb      	ldrb	r3, [r7, #11]
 80066bc:	4618      	mov	r0, r3
 80066be:	f000 f811 	bl	80066e4 <CommandLineBuildCommand>
 80066c2:	60f8      	str	r0, [r7, #12]
			if(tCommandReady)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d004      	beq.n	80066d4 <terminalTaskHandler+0x4c>
			{
				CommandLineProcessCommand(gCommandBuffer);
 80066ca:	4805      	ldr	r0, [pc, #20]	; (80066e0 <terminalTaskHandler+0x58>)
 80066cc:	f000 f852 	bl	8006774 <CommandLineProcessCommand>
				tCommandReady = 0;
 80066d0:	2300      	movs	r3, #0
 80066d2:	60fb      	str	r3, [r7, #12]
			}
		}
		osDelay(1);
 80066d4:	2001      	movs	r0, #1
 80066d6:	f000 f92b 	bl	8006930 <osDelay>
		if(xQueueReceive(Get_TerminalQueueHandle(),&tRxedChar,QUEUE_TIMEOUT))
 80066da:	e7e3      	b.n	80066a4 <terminalTaskHandler+0x1c>
 80066dc:	20000ae4 	.word	0x20000ae4
 80066e0:	20000ae8 	.word	0x20000ae8

080066e4 <CommandLineBuildCommand>:
}


static uint16_t commandBuilderIdx = 0;
int CommandLineBuildCommand(char nextChar)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b083      	sub	sp, #12
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	4603      	mov	r3, r0
 80066ec:	71fb      	strb	r3, [r7, #7]
	/* Don't store any new line characters or spaces. */
	if ((nextChar == '\n') || (nextChar == ' ') || (nextChar == '\t'))
 80066ee:	79fb      	ldrb	r3, [r7, #7]
 80066f0:	2b0a      	cmp	r3, #10
 80066f2:	d005      	beq.n	8006700 <CommandLineBuildCommand+0x1c>
 80066f4:	79fb      	ldrb	r3, [r7, #7]
 80066f6:	2b20      	cmp	r3, #32
 80066f8:	d002      	beq.n	8006700 <CommandLineBuildCommand+0x1c>
 80066fa:	79fb      	ldrb	r3, [r7, #7]
 80066fc:	2b09      	cmp	r3, #9
 80066fe:	d101      	bne.n	8006704 <CommandLineBuildCommand+0x20>
	{
		return false;
 8006700:	2300      	movs	r3, #0
 8006702:	e02d      	b.n	8006760 <CommandLineBuildCommand+0x7c>
	}
	/* The completed command has been received. Replace the final carriage
	 * return character with a NULL character to help with processing the
	 * command. */
	if (nextChar == '\r')
 8006704:	79fb      	ldrb	r3, [r7, #7]
 8006706:	2b0d      	cmp	r3, #13
 8006708:	d10a      	bne.n	8006720 <CommandLineBuildCommand+0x3c>
	{
		gCommandBuffer[commandBuilderIdx] = '\0';
 800670a:	4b18      	ldr	r3, [pc, #96]	; (800676c <CommandLineBuildCommand+0x88>)
 800670c:	881b      	ldrh	r3, [r3, #0]
 800670e:	461a      	mov	r2, r3
 8006710:	4b17      	ldr	r3, [pc, #92]	; (8006770 <CommandLineBuildCommand+0x8c>)
 8006712:	2100      	movs	r1, #0
 8006714:	5499      	strb	r1, [r3, r2]
		commandBuilderIdx = 0;
 8006716:	4b15      	ldr	r3, [pc, #84]	; (800676c <CommandLineBuildCommand+0x88>)
 8006718:	2200      	movs	r2, #0
 800671a:	801a      	strh	r2, [r3, #0]
		return true;
 800671c:	2301      	movs	r3, #1
 800671e:	e01f      	b.n	8006760 <CommandLineBuildCommand+0x7c>
	}
	/* Convert the incoming character to uppercase. This matches the case
	 * of commands in the command table. Then store the received character
	 * in the command buffer. */
	gCommandBuffer[commandBuilderIdx] = TO_UPPER(nextChar);
 8006720:	79fb      	ldrb	r3, [r7, #7]
 8006722:	2b60      	cmp	r3, #96	; 0x60
 8006724:	d906      	bls.n	8006734 <CommandLineBuildCommand+0x50>
 8006726:	79fb      	ldrb	r3, [r7, #7]
 8006728:	2b7a      	cmp	r3, #122	; 0x7a
 800672a:	d803      	bhi.n	8006734 <CommandLineBuildCommand+0x50>
 800672c:	79fb      	ldrb	r3, [r7, #7]
 800672e:	3b20      	subs	r3, #32
 8006730:	b2db      	uxtb	r3, r3
 8006732:	e000      	b.n	8006736 <CommandLineBuildCommand+0x52>
 8006734:	79fb      	ldrb	r3, [r7, #7]
 8006736:	4a0d      	ldr	r2, [pc, #52]	; (800676c <CommandLineBuildCommand+0x88>)
 8006738:	8812      	ldrh	r2, [r2, #0]
 800673a:	4611      	mov	r1, r2
 800673c:	4a0c      	ldr	r2, [pc, #48]	; (8006770 <CommandLineBuildCommand+0x8c>)
 800673e:	5453      	strb	r3, [r2, r1]
	commandBuilderIdx++;
 8006740:	4b0a      	ldr	r3, [pc, #40]	; (800676c <CommandLineBuildCommand+0x88>)
 8006742:	881b      	ldrh	r3, [r3, #0]
 8006744:	3301      	adds	r3, #1
 8006746:	b29a      	uxth	r2, r3
 8006748:	4b08      	ldr	r3, [pc, #32]	; (800676c <CommandLineBuildCommand+0x88>)
 800674a:	801a      	strh	r2, [r3, #0]
	/* If the command is too long, reset the index and process
	 * the current command buffer. */
	if (commandBuilderIdx >= MAX_COMMAND_LEN)
 800674c:	4b07      	ldr	r3, [pc, #28]	; (800676c <CommandLineBuildCommand+0x88>)
 800674e:	881b      	ldrh	r3, [r3, #0]
 8006750:	2b77      	cmp	r3, #119	; 0x77
 8006752:	d904      	bls.n	800675e <CommandLineBuildCommand+0x7a>
	{
		commandBuilderIdx = 0;
 8006754:	4b05      	ldr	r3, [pc, #20]	; (800676c <CommandLineBuildCommand+0x88>)
 8006756:	2200      	movs	r2, #0
 8006758:	801a      	strh	r2, [r3, #0]
		return true;
 800675a:	2301      	movs	r3, #1
 800675c:	e000      	b.n	8006760 <CommandLineBuildCommand+0x7c>
	}

	return false;
 800675e:	2300      	movs	r3, #0

}
 8006760:	4618      	mov	r0, r3
 8006762:	370c      	adds	r7, #12
 8006764:	46bd      	mov	sp, r7
 8006766:	bc80      	pop	{r7}
 8006768:	4770      	bx	lr
 800676a:	bf00      	nop
 800676c:	20000bcc 	.word	0x20000bcc
 8006770:	20000ae8 	.word	0x20000ae8

08006774 <CommandLineProcessCommand>:

void CommandLineProcessCommand(char * buffer)
{
 8006774:	b590      	push	{r4, r7, lr}
 8006776:	b087      	sub	sp, #28
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]

	int idx;
	int CommandFound = false;
 800677c:	2300      	movs	r3, #0
 800677e:	613b      	str	r3, [r7, #16]
	//char *Com= strtok(buffer,"+");
	char *Arg = strtok(NULL,"+");
 8006780:	491e      	ldr	r1, [pc, #120]	; (80067fc <CommandLineProcessCommand+0x88>)
 8006782:	2000      	movs	r0, #0
 8006784:	f003 f84e 	bl	8009824 <strtok>
 8006788:	60f8      	str	r0, [r7, #12]

	/* Search for the command in the command table until it is found or
	 * the end of the table is reached. If the command is found, break
	 * out of the loop. */
	for (idx = 0; gCommandTable[idx].name != NULL; idx++)
 800678a:	2300      	movs	r3, #0
 800678c:	617b      	str	r3, [r7, #20]
 800678e:	e020      	b.n	80067d2 <CommandLineProcessCommand+0x5e>
	{
		if (strncmp(gCommandTable[idx].name, buffer,strlen(gCommandTable[idx].name)) == 0)
 8006790:	4a1b      	ldr	r2, [pc, #108]	; (8006800 <CommandLineProcessCommand+0x8c>)
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 8006798:	4a19      	ldr	r2, [pc, #100]	; (8006800 <CommandLineProcessCommand+0x8c>)
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80067a0:	4618      	mov	r0, r3
 80067a2:	f7f9 fced 	bl	8000180 <strlen>
 80067a6:	4603      	mov	r3, r0
 80067a8:	461a      	mov	r2, r3
 80067aa:	6879      	ldr	r1, [r7, #4]
 80067ac:	4620      	mov	r0, r4
 80067ae:	f003 f824 	bl	80097fa <strncmp>
 80067b2:	4603      	mov	r3, r0
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d109      	bne.n	80067cc <CommandLineProcessCommand+0x58>
		{
			CommandFound = true;
 80067b8:	2301      	movs	r3, #1
 80067ba:	613b      	str	r3, [r7, #16]
			(*gCommandTable[idx].function)(Arg);
 80067bc:	4a10      	ldr	r2, [pc, #64]	; (8006800 <CommandLineProcessCommand+0x8c>)
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	00db      	lsls	r3, r3, #3
 80067c2:	4413      	add	r3, r2
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	68f8      	ldr	r0, [r7, #12]
 80067c8:	4798      	blx	r3
			break;
 80067ca:	e008      	b.n	80067de <CommandLineProcessCommand+0x6a>
	for (idx = 0; gCommandTable[idx].name != NULL; idx++)
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	3301      	adds	r3, #1
 80067d0:	617b      	str	r3, [r7, #20]
 80067d2:	4a0b      	ldr	r2, [pc, #44]	; (8006800 <CommandLineProcessCommand+0x8c>)
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d1d8      	bne.n	8006790 <CommandLineProcessCommand+0x1c>
		}
	}
	/* If the command was found, call the command function. Otherwise,
	 * output an error message. */
	if (CommandFound==false)
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d107      	bne.n	80067f4 <CommandLineProcessCommand+0x80>
	{
		snprintf(TerminalMsgBuffer, sizeof(TerminalMsgBuffer), "ERROR,Command not found\n");
 80067e4:	4a07      	ldr	r2, [pc, #28]	; (8006804 <CommandLineProcessCommand+0x90>)
 80067e6:	2164      	movs	r1, #100	; 0x64
 80067e8:	4807      	ldr	r0, [pc, #28]	; (8006808 <CommandLineProcessCommand+0x94>)
 80067ea:	f002 ff8f 	bl	800970c <sniprintf>
		serialPutStr(TerminalMsgBuffer);
 80067ee:	4806      	ldr	r0, [pc, #24]	; (8006808 <CommandLineProcessCommand+0x94>)
 80067f0:	f7ff ff34 	bl	800665c <serialPutStr>
	}
}
 80067f4:	bf00      	nop
 80067f6:	371c      	adds	r7, #28
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd90      	pop	{r4, r7, pc}
 80067fc:	0800a8d4 	.word	0x0800a8d4
 8006800:	0800a9d4 	.word	0x0800a9d4
 8006804:	0800a8d8 	.word	0x0800a8d8
 8006808:	20000b64 	.word	0x20000b64

0800680c <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b082      	sub	sp, #8
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]

	if(huart->Instance==USART2)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a0c      	ldr	r2, [pc, #48]	; (800684c <HAL_UART_RxCpltCallback+0x40>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d112      	bne.n	8006844 <HAL_UART_RxCpltCallback+0x38>
	{
		HAL_UART_Receive_IT(Get_DebugHandle(),(uint8_t*)uartData,UART_RECEIVE_SIZE);
 800681e:	f7fa fa01 	bl	8000c24 <Get_DebugHandle>
 8006822:	4603      	mov	r3, r0
 8006824:	2201      	movs	r2, #1
 8006826:	490a      	ldr	r1, [pc, #40]	; (8006850 <HAL_UART_RxCpltCallback+0x44>)
 8006828:	4618      	mov	r0, r3
 800682a:	f7fd ff5f 	bl	80046ec <HAL_UART_Receive_IT>
		cValuetoPost = (char)uartData[0];
 800682e:	4b08      	ldr	r3, [pc, #32]	; (8006850 <HAL_UART_RxCpltCallback+0x44>)
 8006830:	781a      	ldrb	r2, [r3, #0]
 8006832:	4b08      	ldr	r3, [pc, #32]	; (8006854 <HAL_UART_RxCpltCallback+0x48>)
 8006834:	701a      	strb	r2, [r3, #0]
		xQueueSendToBackFromISR(Get_TerminalQueueHandle(),(void*)&cValuetoPost,&xHigherPrioritTaskWoken);
 8006836:	f7fa f9ff 	bl	8000c38 <Get_TerminalQueueHandle>
 800683a:	2300      	movs	r3, #0
 800683c:	4a06      	ldr	r2, [pc, #24]	; (8006858 <HAL_UART_RxCpltCallback+0x4c>)
 800683e:	4905      	ldr	r1, [pc, #20]	; (8006854 <HAL_UART_RxCpltCallback+0x48>)
 8006840:	f000 fc04 	bl	800704c <xQueueGenericSendFromISR>
	}
}
 8006844:	bf00      	nop
 8006846:	3708      	adds	r7, #8
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}
 800684c:	40004400 	.word	0x40004400
 8006850:	20000ae4 	.word	0x20000ae4
 8006854:	20000ae0 	.word	0x20000ae0
 8006858:	20000bc8 	.word	0x20000bc8

0800685c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800685c:	b480      	push	{r7}
 800685e:	b085      	sub	sp, #20
 8006860:	af00      	add	r7, sp, #0
 8006862:	4603      	mov	r3, r0
 8006864:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006866:	2300      	movs	r3, #0
 8006868:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800686a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800686e:	2b84      	cmp	r3, #132	; 0x84
 8006870:	d005      	beq.n	800687e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8006872:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	4413      	add	r3, r2
 800687a:	3303      	adds	r3, #3
 800687c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800687e:	68fb      	ldr	r3, [r7, #12]
}
 8006880:	4618      	mov	r0, r3
 8006882:	3714      	adds	r7, #20
 8006884:	46bd      	mov	sp, r7
 8006886:	bc80      	pop	{r7}
 8006888:	4770      	bx	lr

0800688a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800688a:	b580      	push	{r7, lr}
 800688c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800688e:	f001 f89f 	bl	80079d0 <vTaskStartScheduler>
  
  return osOK;
 8006892:	2300      	movs	r3, #0
}
 8006894:	4618      	mov	r0, r3
 8006896:	bd80      	pop	{r7, pc}

08006898 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8006898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800689a:	b089      	sub	sp, #36	; 0x24
 800689c:	af04      	add	r7, sp, #16
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	695b      	ldr	r3, [r3, #20]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d020      	beq.n	80068ec <osThreadCreate+0x54>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	699b      	ldr	r3, [r3, #24]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d01c      	beq.n	80068ec <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	685c      	ldr	r4, [r3, #4]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681d      	ldr	r5, [r3, #0]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	691e      	ldr	r6, [r3, #16]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80068c4:	4618      	mov	r0, r3
 80068c6:	f7ff ffc9 	bl	800685c <makeFreeRtosPriority>
 80068ca:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	695b      	ldr	r3, [r3, #20]
 80068d0:	687a      	ldr	r2, [r7, #4]
 80068d2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80068d4:	9202      	str	r2, [sp, #8]
 80068d6:	9301      	str	r3, [sp, #4]
 80068d8:	9100      	str	r1, [sp, #0]
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	4632      	mov	r2, r6
 80068de:	4629      	mov	r1, r5
 80068e0:	4620      	mov	r0, r4
 80068e2:	f000 fe97 	bl	8007614 <xTaskCreateStatic>
 80068e6:	4603      	mov	r3, r0
 80068e8:	60fb      	str	r3, [r7, #12]
 80068ea:	e01c      	b.n	8006926 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	685c      	ldr	r4, [r3, #4]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80068f8:	b29e      	uxth	r6, r3
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006900:	4618      	mov	r0, r3
 8006902:	f7ff ffab 	bl	800685c <makeFreeRtosPriority>
 8006906:	4602      	mov	r2, r0
 8006908:	f107 030c 	add.w	r3, r7, #12
 800690c:	9301      	str	r3, [sp, #4]
 800690e:	9200      	str	r2, [sp, #0]
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	4632      	mov	r2, r6
 8006914:	4629      	mov	r1, r5
 8006916:	4620      	mov	r0, r4
 8006918:	f000 fed9 	bl	80076ce <xTaskCreate>
 800691c:	4603      	mov	r3, r0
 800691e:	2b01      	cmp	r3, #1
 8006920:	d001      	beq.n	8006926 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8006922:	2300      	movs	r3, #0
 8006924:	e000      	b.n	8006928 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8006926:	68fb      	ldr	r3, [r7, #12]
}
 8006928:	4618      	mov	r0, r3
 800692a:	3714      	adds	r7, #20
 800692c:	46bd      	mov	sp, r7
 800692e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006930 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b084      	sub	sp, #16
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d001      	beq.n	8006946 <osDelay+0x16>
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	e000      	b.n	8006948 <osDelay+0x18>
 8006946:	2301      	movs	r3, #1
 8006948:	4618      	mov	r0, r3
 800694a:	f001 f80d 	bl	8007968 <vTaskDelay>
  
  return osOK;
 800694e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006950:	4618      	mov	r0, r3
 8006952:	3710      	adds	r7, #16
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b082      	sub	sp, #8
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d007      	beq.n	8006978 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	4619      	mov	r1, r3
 800696e:	2001      	movs	r0, #1
 8006970:	f000 fa53 	bl	8006e1a <xQueueCreateMutexStatic>
 8006974:	4603      	mov	r3, r0
 8006976:	e003      	b.n	8006980 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8006978:	2001      	movs	r0, #1
 800697a:	f000 fa36 	bl	8006dea <xQueueCreateMutex>
 800697e:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8006980:	4618      	mov	r0, r3
 8006982:	3708      	adds	r7, #8
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}

08006988 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8006988:	b590      	push	{r4, r7, lr}
 800698a:	b085      	sub	sp, #20
 800698c:	af02      	add	r7, sp, #8
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d011      	beq.n	80069be <osMessageCreate+0x36>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	68db      	ldr	r3, [r3, #12]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d00d      	beq.n	80069be <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6818      	ldr	r0, [r3, #0]
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6859      	ldr	r1, [r3, #4]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	689a      	ldr	r2, [r3, #8]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	68db      	ldr	r3, [r3, #12]
 80069b2:	2400      	movs	r4, #0
 80069b4:	9400      	str	r4, [sp, #0]
 80069b6:	f000 f927 	bl	8006c08 <xQueueGenericCreateStatic>
 80069ba:	4603      	mov	r3, r0
 80069bc:	e008      	b.n	80069d0 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6818      	ldr	r0, [r3, #0]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	2200      	movs	r2, #0
 80069c8:	4619      	mov	r1, r3
 80069ca:	f000 f995 	bl	8006cf8 <xQueueGenericCreate>
 80069ce:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	370c      	adds	r7, #12
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd90      	pop	{r4, r7, pc}

080069d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f103 0208 	add.w	r2, r3, #8
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f04f 32ff 	mov.w	r2, #4294967295
 80069f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f103 0208 	add.w	r2, r3, #8
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f103 0208 	add.w	r2, r3, #8
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006a0c:	bf00      	nop
 8006a0e:	370c      	adds	r7, #12
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bc80      	pop	{r7}
 8006a14:	4770      	bx	lr

08006a16 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006a16:	b480      	push	{r7}
 8006a18:	b083      	sub	sp, #12
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006a24:	bf00      	nop
 8006a26:	370c      	adds	r7, #12
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bc80      	pop	{r7}
 8006a2c:	4770      	bx	lr

08006a2e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006a2e:	b480      	push	{r7}
 8006a30:	b085      	sub	sp, #20
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
 8006a36:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	68fa      	ldr	r2, [r7, #12]
 8006a42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	689a      	ldr	r2, [r3, #8]
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	683a      	ldr	r2, [r7, #0]
 8006a52:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	683a      	ldr	r2, [r7, #0]
 8006a58:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	1c5a      	adds	r2, r3, #1
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	601a      	str	r2, [r3, #0]
}
 8006a6a:	bf00      	nop
 8006a6c:	3714      	adds	r7, #20
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	bc80      	pop	{r7}
 8006a72:	4770      	bx	lr

08006a74 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006a74:	b480      	push	{r7}
 8006a76:	b085      	sub	sp, #20
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a8a:	d103      	bne.n	8006a94 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	691b      	ldr	r3, [r3, #16]
 8006a90:	60fb      	str	r3, [r7, #12]
 8006a92:	e00c      	b.n	8006aae <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	3308      	adds	r3, #8
 8006a98:	60fb      	str	r3, [r7, #12]
 8006a9a:	e002      	b.n	8006aa2 <vListInsert+0x2e>
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	60fb      	str	r3, [r7, #12]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	68ba      	ldr	r2, [r7, #8]
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d2f6      	bcs.n	8006a9c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	685a      	ldr	r2, [r3, #4]
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	683a      	ldr	r2, [r7, #0]
 8006abc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	68fa      	ldr	r2, [r7, #12]
 8006ac2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	683a      	ldr	r2, [r7, #0]
 8006ac8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	1c5a      	adds	r2, r3, #1
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	601a      	str	r2, [r3, #0]
}
 8006ada:	bf00      	nop
 8006adc:	3714      	adds	r7, #20
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bc80      	pop	{r7}
 8006ae2:	4770      	bx	lr

08006ae4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b085      	sub	sp, #20
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	691b      	ldr	r3, [r3, #16]
 8006af0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	6892      	ldr	r2, [r2, #8]
 8006afa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	6852      	ldr	r2, [r2, #4]
 8006b04:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	429a      	cmp	r2, r3
 8006b0e:	d103      	bne.n	8006b18 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	689a      	ldr	r2, [r3, #8]
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	1e5a      	subs	r2, r3, #1
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
}
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	3714      	adds	r7, #20
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bc80      	pop	{r7}
 8006b34:	4770      	bx	lr
	...

08006b38 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d10a      	bne.n	8006b62 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b50:	f383 8811 	msr	BASEPRI, r3
 8006b54:	f3bf 8f6f 	isb	sy
 8006b58:	f3bf 8f4f 	dsb	sy
 8006b5c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006b5e:	bf00      	nop
 8006b60:	e7fe      	b.n	8006b60 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006b62:	f002 f8b3 	bl	8008ccc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b6e:	68f9      	ldr	r1, [r7, #12]
 8006b70:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006b72:	fb01 f303 	mul.w	r3, r1, r3
 8006b76:	441a      	add	r2, r3
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b92:	3b01      	subs	r3, #1
 8006b94:	68f9      	ldr	r1, [r7, #12]
 8006b96:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006b98:	fb01 f303 	mul.w	r3, r1, r3
 8006b9c:	441a      	add	r2, r3
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	22ff      	movs	r2, #255	; 0xff
 8006ba6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	22ff      	movs	r2, #255	; 0xff
 8006bae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d114      	bne.n	8006be2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	691b      	ldr	r3, [r3, #16]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d01a      	beq.n	8006bf6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	3310      	adds	r3, #16
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f001 f995 	bl	8007ef4 <xTaskRemoveFromEventList>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d012      	beq.n	8006bf6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006bd0:	4b0c      	ldr	r3, [pc, #48]	; (8006c04 <xQueueGenericReset+0xcc>)
 8006bd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bd6:	601a      	str	r2, [r3, #0]
 8006bd8:	f3bf 8f4f 	dsb	sy
 8006bdc:	f3bf 8f6f 	isb	sy
 8006be0:	e009      	b.n	8006bf6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	3310      	adds	r3, #16
 8006be6:	4618      	mov	r0, r3
 8006be8:	f7ff fef6 	bl	80069d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	3324      	adds	r3, #36	; 0x24
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	f7ff fef1 	bl	80069d8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006bf6:	f002 f899 	bl	8008d2c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006bfa:	2301      	movs	r3, #1
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	3710      	adds	r7, #16
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}
 8006c04:	e000ed04 	.word	0xe000ed04

08006c08 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b08e      	sub	sp, #56	; 0x38
 8006c0c:	af02      	add	r7, sp, #8
 8006c0e:	60f8      	str	r0, [r7, #12]
 8006c10:	60b9      	str	r1, [r7, #8]
 8006c12:	607a      	str	r2, [r7, #4]
 8006c14:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d10a      	bne.n	8006c32 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c20:	f383 8811 	msr	BASEPRI, r3
 8006c24:	f3bf 8f6f 	isb	sy
 8006c28:	f3bf 8f4f 	dsb	sy
 8006c2c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006c2e:	bf00      	nop
 8006c30:	e7fe      	b.n	8006c30 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d10a      	bne.n	8006c4e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c3c:	f383 8811 	msr	BASEPRI, r3
 8006c40:	f3bf 8f6f 	isb	sy
 8006c44:	f3bf 8f4f 	dsb	sy
 8006c48:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006c4a:	bf00      	nop
 8006c4c:	e7fe      	b.n	8006c4c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d002      	beq.n	8006c5a <xQueueGenericCreateStatic+0x52>
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d001      	beq.n	8006c5e <xQueueGenericCreateStatic+0x56>
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	e000      	b.n	8006c60 <xQueueGenericCreateStatic+0x58>
 8006c5e:	2300      	movs	r3, #0
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d10a      	bne.n	8006c7a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c68:	f383 8811 	msr	BASEPRI, r3
 8006c6c:	f3bf 8f6f 	isb	sy
 8006c70:	f3bf 8f4f 	dsb	sy
 8006c74:	623b      	str	r3, [r7, #32]
}
 8006c76:	bf00      	nop
 8006c78:	e7fe      	b.n	8006c78 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d102      	bne.n	8006c86 <xQueueGenericCreateStatic+0x7e>
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d101      	bne.n	8006c8a <xQueueGenericCreateStatic+0x82>
 8006c86:	2301      	movs	r3, #1
 8006c88:	e000      	b.n	8006c8c <xQueueGenericCreateStatic+0x84>
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d10a      	bne.n	8006ca6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c94:	f383 8811 	msr	BASEPRI, r3
 8006c98:	f3bf 8f6f 	isb	sy
 8006c9c:	f3bf 8f4f 	dsb	sy
 8006ca0:	61fb      	str	r3, [r7, #28]
}
 8006ca2:	bf00      	nop
 8006ca4:	e7fe      	b.n	8006ca4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006ca6:	2348      	movs	r3, #72	; 0x48
 8006ca8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	2b48      	cmp	r3, #72	; 0x48
 8006cae:	d00a      	beq.n	8006cc6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006cb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb4:	f383 8811 	msr	BASEPRI, r3
 8006cb8:	f3bf 8f6f 	isb	sy
 8006cbc:	f3bf 8f4f 	dsb	sy
 8006cc0:	61bb      	str	r3, [r7, #24]
}
 8006cc2:	bf00      	nop
 8006cc4:	e7fe      	b.n	8006cc4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006cc6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006cc8:	683b      	ldr	r3, [r7, #0]
 8006cca:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d00d      	beq.n	8006cee <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006cda:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ce0:	9300      	str	r3, [sp, #0]
 8006ce2:	4613      	mov	r3, r2
 8006ce4:	687a      	ldr	r2, [r7, #4]
 8006ce6:	68b9      	ldr	r1, [r7, #8]
 8006ce8:	68f8      	ldr	r0, [r7, #12]
 8006cea:	f000 f845 	bl	8006d78 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3730      	adds	r7, #48	; 0x30
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b08a      	sub	sp, #40	; 0x28
 8006cfc:	af02      	add	r7, sp, #8
 8006cfe:	60f8      	str	r0, [r7, #12]
 8006d00:	60b9      	str	r1, [r7, #8]
 8006d02:	4613      	mov	r3, r2
 8006d04:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d10a      	bne.n	8006d22 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d10:	f383 8811 	msr	BASEPRI, r3
 8006d14:	f3bf 8f6f 	isb	sy
 8006d18:	f3bf 8f4f 	dsb	sy
 8006d1c:	613b      	str	r3, [r7, #16]
}
 8006d1e:	bf00      	nop
 8006d20:	e7fe      	b.n	8006d20 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d102      	bne.n	8006d2e <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	61fb      	str	r3, [r7, #28]
 8006d2c:	e004      	b.n	8006d38 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	68ba      	ldr	r2, [r7, #8]
 8006d32:	fb02 f303 	mul.w	r3, r2, r3
 8006d36:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006d38:	69fb      	ldr	r3, [r7, #28]
 8006d3a:	3348      	adds	r3, #72	; 0x48
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f002 f8c5 	bl	8008ecc <pvPortMalloc>
 8006d42:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006d44:	69bb      	ldr	r3, [r7, #24]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d011      	beq.n	8006d6e <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006d4a:	69bb      	ldr	r3, [r7, #24]
 8006d4c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	3348      	adds	r3, #72	; 0x48
 8006d52:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006d54:	69bb      	ldr	r3, [r7, #24]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006d5c:	79fa      	ldrb	r2, [r7, #7]
 8006d5e:	69bb      	ldr	r3, [r7, #24]
 8006d60:	9300      	str	r3, [sp, #0]
 8006d62:	4613      	mov	r3, r2
 8006d64:	697a      	ldr	r2, [r7, #20]
 8006d66:	68b9      	ldr	r1, [r7, #8]
 8006d68:	68f8      	ldr	r0, [r7, #12]
 8006d6a:	f000 f805 	bl	8006d78 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006d6e:	69bb      	ldr	r3, [r7, #24]
	}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3720      	adds	r7, #32
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b084      	sub	sp, #16
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	60f8      	str	r0, [r7, #12]
 8006d80:	60b9      	str	r1, [r7, #8]
 8006d82:	607a      	str	r2, [r7, #4]
 8006d84:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d103      	bne.n	8006d94 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006d8c:	69bb      	ldr	r3, [r7, #24]
 8006d8e:	69ba      	ldr	r2, [r7, #24]
 8006d90:	601a      	str	r2, [r3, #0]
 8006d92:	e002      	b.n	8006d9a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006d94:	69bb      	ldr	r3, [r7, #24]
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006d9a:	69bb      	ldr	r3, [r7, #24]
 8006d9c:	68fa      	ldr	r2, [r7, #12]
 8006d9e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006da0:	69bb      	ldr	r3, [r7, #24]
 8006da2:	68ba      	ldr	r2, [r7, #8]
 8006da4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006da6:	2101      	movs	r1, #1
 8006da8:	69b8      	ldr	r0, [r7, #24]
 8006daa:	f7ff fec5 	bl	8006b38 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006dae:	bf00      	nop
 8006db0:	3710      	adds	r7, #16
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}

08006db6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b082      	sub	sp, #8
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d00e      	beq.n	8006de2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	2200      	movs	r2, #0
 8006dda:	2100      	movs	r1, #0
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f000 f837 	bl	8006e50 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006de2:	bf00      	nop
 8006de4:	3708      	adds	r7, #8
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}

08006dea <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006dea:	b580      	push	{r7, lr}
 8006dec:	b086      	sub	sp, #24
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	4603      	mov	r3, r0
 8006df2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006df4:	2301      	movs	r3, #1
 8006df6:	617b      	str	r3, [r7, #20]
 8006df8:	2300      	movs	r3, #0
 8006dfa:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006dfc:	79fb      	ldrb	r3, [r7, #7]
 8006dfe:	461a      	mov	r2, r3
 8006e00:	6939      	ldr	r1, [r7, #16]
 8006e02:	6978      	ldr	r0, [r7, #20]
 8006e04:	f7ff ff78 	bl	8006cf8 <xQueueGenericCreate>
 8006e08:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006e0a:	68f8      	ldr	r0, [r7, #12]
 8006e0c:	f7ff ffd3 	bl	8006db6 <prvInitialiseMutex>

		return xNewQueue;
 8006e10:	68fb      	ldr	r3, [r7, #12]
	}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3718      	adds	r7, #24
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}

08006e1a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006e1a:	b580      	push	{r7, lr}
 8006e1c:	b088      	sub	sp, #32
 8006e1e:	af02      	add	r7, sp, #8
 8006e20:	4603      	mov	r3, r0
 8006e22:	6039      	str	r1, [r7, #0]
 8006e24:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006e26:	2301      	movs	r3, #1
 8006e28:	617b      	str	r3, [r7, #20]
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006e2e:	79fb      	ldrb	r3, [r7, #7]
 8006e30:	9300      	str	r3, [sp, #0]
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	2200      	movs	r2, #0
 8006e36:	6939      	ldr	r1, [r7, #16]
 8006e38:	6978      	ldr	r0, [r7, #20]
 8006e3a:	f7ff fee5 	bl	8006c08 <xQueueGenericCreateStatic>
 8006e3e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006e40:	68f8      	ldr	r0, [r7, #12]
 8006e42:	f7ff ffb8 	bl	8006db6 <prvInitialiseMutex>

		return xNewQueue;
 8006e46:	68fb      	ldr	r3, [r7, #12]
	}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3718      	adds	r7, #24
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b08e      	sub	sp, #56	; 0x38
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	60f8      	str	r0, [r7, #12]
 8006e58:	60b9      	str	r1, [r7, #8]
 8006e5a:	607a      	str	r2, [r7, #4]
 8006e5c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d10a      	bne.n	8006e82 <xQueueGenericSend+0x32>
	__asm volatile
 8006e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e70:	f383 8811 	msr	BASEPRI, r3
 8006e74:	f3bf 8f6f 	isb	sy
 8006e78:	f3bf 8f4f 	dsb	sy
 8006e7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006e7e:	bf00      	nop
 8006e80:	e7fe      	b.n	8006e80 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d103      	bne.n	8006e90 <xQueueGenericSend+0x40>
 8006e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d101      	bne.n	8006e94 <xQueueGenericSend+0x44>
 8006e90:	2301      	movs	r3, #1
 8006e92:	e000      	b.n	8006e96 <xQueueGenericSend+0x46>
 8006e94:	2300      	movs	r3, #0
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d10a      	bne.n	8006eb0 <xQueueGenericSend+0x60>
	__asm volatile
 8006e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e9e:	f383 8811 	msr	BASEPRI, r3
 8006ea2:	f3bf 8f6f 	isb	sy
 8006ea6:	f3bf 8f4f 	dsb	sy
 8006eaa:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006eac:	bf00      	nop
 8006eae:	e7fe      	b.n	8006eae <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	2b02      	cmp	r3, #2
 8006eb4:	d103      	bne.n	8006ebe <xQueueGenericSend+0x6e>
 8006eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d101      	bne.n	8006ec2 <xQueueGenericSend+0x72>
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e000      	b.n	8006ec4 <xQueueGenericSend+0x74>
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d10a      	bne.n	8006ede <xQueueGenericSend+0x8e>
	__asm volatile
 8006ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ecc:	f383 8811 	msr	BASEPRI, r3
 8006ed0:	f3bf 8f6f 	isb	sy
 8006ed4:	f3bf 8f4f 	dsb	sy
 8006ed8:	623b      	str	r3, [r7, #32]
}
 8006eda:	bf00      	nop
 8006edc:	e7fe      	b.n	8006edc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ede:	f001 f9cb 	bl	8008278 <xTaskGetSchedulerState>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d102      	bne.n	8006eee <xQueueGenericSend+0x9e>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d101      	bne.n	8006ef2 <xQueueGenericSend+0xa2>
 8006eee:	2301      	movs	r3, #1
 8006ef0:	e000      	b.n	8006ef4 <xQueueGenericSend+0xa4>
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d10a      	bne.n	8006f0e <xQueueGenericSend+0xbe>
	__asm volatile
 8006ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006efc:	f383 8811 	msr	BASEPRI, r3
 8006f00:	f3bf 8f6f 	isb	sy
 8006f04:	f3bf 8f4f 	dsb	sy
 8006f08:	61fb      	str	r3, [r7, #28]
}
 8006f0a:	bf00      	nop
 8006f0c:	e7fe      	b.n	8006f0c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f0e:	f001 fedd 	bl	8008ccc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d302      	bcc.n	8006f24 <xQueueGenericSend+0xd4>
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	2b02      	cmp	r3, #2
 8006f22:	d129      	bne.n	8006f78 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006f24:	683a      	ldr	r2, [r7, #0]
 8006f26:	68b9      	ldr	r1, [r7, #8]
 8006f28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f2a:	f000 fa07 	bl	800733c <prvCopyDataToQueue>
 8006f2e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d010      	beq.n	8006f5a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f3a:	3324      	adds	r3, #36	; 0x24
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f000 ffd9 	bl	8007ef4 <xTaskRemoveFromEventList>
 8006f42:	4603      	mov	r3, r0
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d013      	beq.n	8006f70 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006f48:	4b3f      	ldr	r3, [pc, #252]	; (8007048 <xQueueGenericSend+0x1f8>)
 8006f4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f4e:	601a      	str	r2, [r3, #0]
 8006f50:	f3bf 8f4f 	dsb	sy
 8006f54:	f3bf 8f6f 	isb	sy
 8006f58:	e00a      	b.n	8006f70 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d007      	beq.n	8006f70 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006f60:	4b39      	ldr	r3, [pc, #228]	; (8007048 <xQueueGenericSend+0x1f8>)
 8006f62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f66:	601a      	str	r2, [r3, #0]
 8006f68:	f3bf 8f4f 	dsb	sy
 8006f6c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006f70:	f001 fedc 	bl	8008d2c <vPortExitCritical>
				return pdPASS;
 8006f74:	2301      	movs	r3, #1
 8006f76:	e063      	b.n	8007040 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d103      	bne.n	8006f86 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006f7e:	f001 fed5 	bl	8008d2c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006f82:	2300      	movs	r3, #0
 8006f84:	e05c      	b.n	8007040 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d106      	bne.n	8006f9a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006f8c:	f107 0314 	add.w	r3, r7, #20
 8006f90:	4618      	mov	r0, r3
 8006f92:	f001 f811 	bl	8007fb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006f96:	2301      	movs	r3, #1
 8006f98:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006f9a:	f001 fec7 	bl	8008d2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006f9e:	f000 fd87 	bl	8007ab0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006fa2:	f001 fe93 	bl	8008ccc <vPortEnterCritical>
 8006fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006fac:	b25b      	sxtb	r3, r3
 8006fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fb2:	d103      	bne.n	8006fbc <xQueueGenericSend+0x16c>
 8006fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fc2:	b25b      	sxtb	r3, r3
 8006fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fc8:	d103      	bne.n	8006fd2 <xQueueGenericSend+0x182>
 8006fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006fd2:	f001 feab 	bl	8008d2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006fd6:	1d3a      	adds	r2, r7, #4
 8006fd8:	f107 0314 	add.w	r3, r7, #20
 8006fdc:	4611      	mov	r1, r2
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f001 f800 	bl	8007fe4 <xTaskCheckForTimeOut>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d124      	bne.n	8007034 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006fea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006fec:	f000 fa9e 	bl	800752c <prvIsQueueFull>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d018      	beq.n	8007028 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff8:	3310      	adds	r3, #16
 8006ffa:	687a      	ldr	r2, [r7, #4]
 8006ffc:	4611      	mov	r1, r2
 8006ffe:	4618      	mov	r0, r3
 8007000:	f000 ff28 	bl	8007e54 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007004:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007006:	f000 fa29 	bl	800745c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800700a:	f000 fd5f 	bl	8007acc <xTaskResumeAll>
 800700e:	4603      	mov	r3, r0
 8007010:	2b00      	cmp	r3, #0
 8007012:	f47f af7c 	bne.w	8006f0e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007016:	4b0c      	ldr	r3, [pc, #48]	; (8007048 <xQueueGenericSend+0x1f8>)
 8007018:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800701c:	601a      	str	r2, [r3, #0]
 800701e:	f3bf 8f4f 	dsb	sy
 8007022:	f3bf 8f6f 	isb	sy
 8007026:	e772      	b.n	8006f0e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007028:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800702a:	f000 fa17 	bl	800745c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800702e:	f000 fd4d 	bl	8007acc <xTaskResumeAll>
 8007032:	e76c      	b.n	8006f0e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007034:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007036:	f000 fa11 	bl	800745c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800703a:	f000 fd47 	bl	8007acc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800703e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007040:	4618      	mov	r0, r3
 8007042:	3738      	adds	r7, #56	; 0x38
 8007044:	46bd      	mov	sp, r7
 8007046:	bd80      	pop	{r7, pc}
 8007048:	e000ed04 	.word	0xe000ed04

0800704c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b08e      	sub	sp, #56	; 0x38
 8007050:	af00      	add	r7, sp, #0
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	60b9      	str	r1, [r7, #8]
 8007056:	607a      	str	r2, [r7, #4]
 8007058:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800705e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007060:	2b00      	cmp	r3, #0
 8007062:	d10a      	bne.n	800707a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007068:	f383 8811 	msr	BASEPRI, r3
 800706c:	f3bf 8f6f 	isb	sy
 8007070:	f3bf 8f4f 	dsb	sy
 8007074:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007076:	bf00      	nop
 8007078:	e7fe      	b.n	8007078 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d103      	bne.n	8007088 <xQueueGenericSendFromISR+0x3c>
 8007080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007084:	2b00      	cmp	r3, #0
 8007086:	d101      	bne.n	800708c <xQueueGenericSendFromISR+0x40>
 8007088:	2301      	movs	r3, #1
 800708a:	e000      	b.n	800708e <xQueueGenericSendFromISR+0x42>
 800708c:	2300      	movs	r3, #0
 800708e:	2b00      	cmp	r3, #0
 8007090:	d10a      	bne.n	80070a8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007096:	f383 8811 	msr	BASEPRI, r3
 800709a:	f3bf 8f6f 	isb	sy
 800709e:	f3bf 8f4f 	dsb	sy
 80070a2:	623b      	str	r3, [r7, #32]
}
 80070a4:	bf00      	nop
 80070a6:	e7fe      	b.n	80070a6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	2b02      	cmp	r3, #2
 80070ac:	d103      	bne.n	80070b6 <xQueueGenericSendFromISR+0x6a>
 80070ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d101      	bne.n	80070ba <xQueueGenericSendFromISR+0x6e>
 80070b6:	2301      	movs	r3, #1
 80070b8:	e000      	b.n	80070bc <xQueueGenericSendFromISR+0x70>
 80070ba:	2300      	movs	r3, #0
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d10a      	bne.n	80070d6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80070c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070c4:	f383 8811 	msr	BASEPRI, r3
 80070c8:	f3bf 8f6f 	isb	sy
 80070cc:	f3bf 8f4f 	dsb	sy
 80070d0:	61fb      	str	r3, [r7, #28]
}
 80070d2:	bf00      	nop
 80070d4:	e7fe      	b.n	80070d4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80070d6:	f001 febb 	bl	8008e50 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80070da:	f3ef 8211 	mrs	r2, BASEPRI
 80070de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070e2:	f383 8811 	msr	BASEPRI, r3
 80070e6:	f3bf 8f6f 	isb	sy
 80070ea:	f3bf 8f4f 	dsb	sy
 80070ee:	61ba      	str	r2, [r7, #24]
 80070f0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80070f2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80070f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80070f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070fe:	429a      	cmp	r2, r3
 8007100:	d302      	bcc.n	8007108 <xQueueGenericSendFromISR+0xbc>
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	2b02      	cmp	r3, #2
 8007106:	d12c      	bne.n	8007162 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800710a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800710e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007112:	683a      	ldr	r2, [r7, #0]
 8007114:	68b9      	ldr	r1, [r7, #8]
 8007116:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007118:	f000 f910 	bl	800733c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800711c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007124:	d112      	bne.n	800714c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800712a:	2b00      	cmp	r3, #0
 800712c:	d016      	beq.n	800715c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800712e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007130:	3324      	adds	r3, #36	; 0x24
 8007132:	4618      	mov	r0, r3
 8007134:	f000 fede 	bl	8007ef4 <xTaskRemoveFromEventList>
 8007138:	4603      	mov	r3, r0
 800713a:	2b00      	cmp	r3, #0
 800713c:	d00e      	beq.n	800715c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d00b      	beq.n	800715c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2201      	movs	r2, #1
 8007148:	601a      	str	r2, [r3, #0]
 800714a:	e007      	b.n	800715c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800714c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007150:	3301      	adds	r3, #1
 8007152:	b2db      	uxtb	r3, r3
 8007154:	b25a      	sxtb	r2, r3
 8007156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007158:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800715c:	2301      	movs	r3, #1
 800715e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007160:	e001      	b.n	8007166 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007162:	2300      	movs	r3, #0
 8007164:	637b      	str	r3, [r7, #52]	; 0x34
 8007166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007168:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007170:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007174:	4618      	mov	r0, r3
 8007176:	3738      	adds	r7, #56	; 0x38
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b08c      	sub	sp, #48	; 0x30
 8007180:	af00      	add	r7, sp, #0
 8007182:	60f8      	str	r0, [r7, #12]
 8007184:	60b9      	str	r1, [r7, #8]
 8007186:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007188:	2300      	movs	r3, #0
 800718a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007192:	2b00      	cmp	r3, #0
 8007194:	d10a      	bne.n	80071ac <xQueueReceive+0x30>
	__asm volatile
 8007196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800719a:	f383 8811 	msr	BASEPRI, r3
 800719e:	f3bf 8f6f 	isb	sy
 80071a2:	f3bf 8f4f 	dsb	sy
 80071a6:	623b      	str	r3, [r7, #32]
}
 80071a8:	bf00      	nop
 80071aa:	e7fe      	b.n	80071aa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d103      	bne.n	80071ba <xQueueReceive+0x3e>
 80071b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d101      	bne.n	80071be <xQueueReceive+0x42>
 80071ba:	2301      	movs	r3, #1
 80071bc:	e000      	b.n	80071c0 <xQueueReceive+0x44>
 80071be:	2300      	movs	r3, #0
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d10a      	bne.n	80071da <xQueueReceive+0x5e>
	__asm volatile
 80071c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c8:	f383 8811 	msr	BASEPRI, r3
 80071cc:	f3bf 8f6f 	isb	sy
 80071d0:	f3bf 8f4f 	dsb	sy
 80071d4:	61fb      	str	r3, [r7, #28]
}
 80071d6:	bf00      	nop
 80071d8:	e7fe      	b.n	80071d8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80071da:	f001 f84d 	bl	8008278 <xTaskGetSchedulerState>
 80071de:	4603      	mov	r3, r0
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d102      	bne.n	80071ea <xQueueReceive+0x6e>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d101      	bne.n	80071ee <xQueueReceive+0x72>
 80071ea:	2301      	movs	r3, #1
 80071ec:	e000      	b.n	80071f0 <xQueueReceive+0x74>
 80071ee:	2300      	movs	r3, #0
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d10a      	bne.n	800720a <xQueueReceive+0x8e>
	__asm volatile
 80071f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f8:	f383 8811 	msr	BASEPRI, r3
 80071fc:	f3bf 8f6f 	isb	sy
 8007200:	f3bf 8f4f 	dsb	sy
 8007204:	61bb      	str	r3, [r7, #24]
}
 8007206:	bf00      	nop
 8007208:	e7fe      	b.n	8007208 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800720a:	f001 fd5f 	bl	8008ccc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800720e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007212:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007216:	2b00      	cmp	r3, #0
 8007218:	d01f      	beq.n	800725a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800721a:	68b9      	ldr	r1, [r7, #8]
 800721c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800721e:	f000 f8f7 	bl	8007410 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007224:	1e5a      	subs	r2, r3, #1
 8007226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007228:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800722a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800722c:	691b      	ldr	r3, [r3, #16]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d00f      	beq.n	8007252 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007234:	3310      	adds	r3, #16
 8007236:	4618      	mov	r0, r3
 8007238:	f000 fe5c 	bl	8007ef4 <xTaskRemoveFromEventList>
 800723c:	4603      	mov	r3, r0
 800723e:	2b00      	cmp	r3, #0
 8007240:	d007      	beq.n	8007252 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007242:	4b3d      	ldr	r3, [pc, #244]	; (8007338 <xQueueReceive+0x1bc>)
 8007244:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007248:	601a      	str	r2, [r3, #0]
 800724a:	f3bf 8f4f 	dsb	sy
 800724e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007252:	f001 fd6b 	bl	8008d2c <vPortExitCritical>
				return pdPASS;
 8007256:	2301      	movs	r3, #1
 8007258:	e069      	b.n	800732e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d103      	bne.n	8007268 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007260:	f001 fd64 	bl	8008d2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007264:	2300      	movs	r3, #0
 8007266:	e062      	b.n	800732e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800726a:	2b00      	cmp	r3, #0
 800726c:	d106      	bne.n	800727c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800726e:	f107 0310 	add.w	r3, r7, #16
 8007272:	4618      	mov	r0, r3
 8007274:	f000 fea0 	bl	8007fb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007278:	2301      	movs	r3, #1
 800727a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800727c:	f001 fd56 	bl	8008d2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007280:	f000 fc16 	bl	8007ab0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007284:	f001 fd22 	bl	8008ccc <vPortEnterCritical>
 8007288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800728a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800728e:	b25b      	sxtb	r3, r3
 8007290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007294:	d103      	bne.n	800729e <xQueueReceive+0x122>
 8007296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007298:	2200      	movs	r2, #0
 800729a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800729e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072a4:	b25b      	sxtb	r3, r3
 80072a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072aa:	d103      	bne.n	80072b4 <xQueueReceive+0x138>
 80072ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ae:	2200      	movs	r2, #0
 80072b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80072b4:	f001 fd3a 	bl	8008d2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80072b8:	1d3a      	adds	r2, r7, #4
 80072ba:	f107 0310 	add.w	r3, r7, #16
 80072be:	4611      	mov	r1, r2
 80072c0:	4618      	mov	r0, r3
 80072c2:	f000 fe8f 	bl	8007fe4 <xTaskCheckForTimeOut>
 80072c6:	4603      	mov	r3, r0
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d123      	bne.n	8007314 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80072cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072ce:	f000 f917 	bl	8007500 <prvIsQueueEmpty>
 80072d2:	4603      	mov	r3, r0
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d017      	beq.n	8007308 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80072d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072da:	3324      	adds	r3, #36	; 0x24
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	4611      	mov	r1, r2
 80072e0:	4618      	mov	r0, r3
 80072e2:	f000 fdb7 	bl	8007e54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80072e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80072e8:	f000 f8b8 	bl	800745c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80072ec:	f000 fbee 	bl	8007acc <xTaskResumeAll>
 80072f0:	4603      	mov	r3, r0
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d189      	bne.n	800720a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80072f6:	4b10      	ldr	r3, [pc, #64]	; (8007338 <xQueueReceive+0x1bc>)
 80072f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072fc:	601a      	str	r2, [r3, #0]
 80072fe:	f3bf 8f4f 	dsb	sy
 8007302:	f3bf 8f6f 	isb	sy
 8007306:	e780      	b.n	800720a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007308:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800730a:	f000 f8a7 	bl	800745c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800730e:	f000 fbdd 	bl	8007acc <xTaskResumeAll>
 8007312:	e77a      	b.n	800720a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007314:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007316:	f000 f8a1 	bl	800745c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800731a:	f000 fbd7 	bl	8007acc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800731e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007320:	f000 f8ee 	bl	8007500 <prvIsQueueEmpty>
 8007324:	4603      	mov	r3, r0
 8007326:	2b00      	cmp	r3, #0
 8007328:	f43f af6f 	beq.w	800720a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800732c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800732e:	4618      	mov	r0, r3
 8007330:	3730      	adds	r7, #48	; 0x30
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}
 8007336:	bf00      	nop
 8007338:	e000ed04 	.word	0xe000ed04

0800733c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b086      	sub	sp, #24
 8007340:	af00      	add	r7, sp, #0
 8007342:	60f8      	str	r0, [r7, #12]
 8007344:	60b9      	str	r1, [r7, #8]
 8007346:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007348:	2300      	movs	r3, #0
 800734a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007350:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007356:	2b00      	cmp	r3, #0
 8007358:	d10d      	bne.n	8007376 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d14d      	bne.n	80073fe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	4618      	mov	r0, r3
 8007368:	f000 ffa4 	bl	80082b4 <xTaskPriorityDisinherit>
 800736c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2200      	movs	r2, #0
 8007372:	609a      	str	r2, [r3, #8]
 8007374:	e043      	b.n	80073fe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d119      	bne.n	80073b0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	6858      	ldr	r0, [r3, #4]
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007384:	461a      	mov	r2, r3
 8007386:	68b9      	ldr	r1, [r7, #8]
 8007388:	f002 f89b 	bl	80094c2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	685a      	ldr	r2, [r3, #4]
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007394:	441a      	add	r2, r3
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	685a      	ldr	r2, [r3, #4]
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	689b      	ldr	r3, [r3, #8]
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d32b      	bcc.n	80073fe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	605a      	str	r2, [r3, #4]
 80073ae:	e026      	b.n	80073fe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	68d8      	ldr	r0, [r3, #12]
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b8:	461a      	mov	r2, r3
 80073ba:	68b9      	ldr	r1, [r7, #8]
 80073bc:	f002 f881 	bl	80094c2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	68da      	ldr	r2, [r3, #12]
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073c8:	425b      	negs	r3, r3
 80073ca:	441a      	add	r2, r3
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	68da      	ldr	r2, [r3, #12]
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	429a      	cmp	r2, r3
 80073da:	d207      	bcs.n	80073ec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	689a      	ldr	r2, [r3, #8]
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e4:	425b      	negs	r3, r3
 80073e6:	441a      	add	r2, r3
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2b02      	cmp	r3, #2
 80073f0:	d105      	bne.n	80073fe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d002      	beq.n	80073fe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	3b01      	subs	r3, #1
 80073fc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	1c5a      	adds	r2, r3, #1
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007406:	697b      	ldr	r3, [r7, #20]
}
 8007408:	4618      	mov	r0, r3
 800740a:	3718      	adds	r7, #24
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b082      	sub	sp, #8
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800741e:	2b00      	cmp	r3, #0
 8007420:	d018      	beq.n	8007454 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	68da      	ldr	r2, [r3, #12]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800742a:	441a      	add	r2, r3
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	68da      	ldr	r2, [r3, #12]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	689b      	ldr	r3, [r3, #8]
 8007438:	429a      	cmp	r2, r3
 800743a:	d303      	bcc.n	8007444 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	68d9      	ldr	r1, [r3, #12]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744c:	461a      	mov	r2, r3
 800744e:	6838      	ldr	r0, [r7, #0]
 8007450:	f002 f837 	bl	80094c2 <memcpy>
	}
}
 8007454:	bf00      	nop
 8007456:	3708      	adds	r7, #8
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}

0800745c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b084      	sub	sp, #16
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007464:	f001 fc32 	bl	8008ccc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800746e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007470:	e011      	b.n	8007496 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007476:	2b00      	cmp	r3, #0
 8007478:	d012      	beq.n	80074a0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	3324      	adds	r3, #36	; 0x24
 800747e:	4618      	mov	r0, r3
 8007480:	f000 fd38 	bl	8007ef4 <xTaskRemoveFromEventList>
 8007484:	4603      	mov	r3, r0
 8007486:	2b00      	cmp	r3, #0
 8007488:	d001      	beq.n	800748e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800748a:	f000 fe0d 	bl	80080a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800748e:	7bfb      	ldrb	r3, [r7, #15]
 8007490:	3b01      	subs	r3, #1
 8007492:	b2db      	uxtb	r3, r3
 8007494:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007496:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800749a:	2b00      	cmp	r3, #0
 800749c:	dce9      	bgt.n	8007472 <prvUnlockQueue+0x16>
 800749e:	e000      	b.n	80074a2 <prvUnlockQueue+0x46>
					break;
 80074a0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	22ff      	movs	r2, #255	; 0xff
 80074a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80074aa:	f001 fc3f 	bl	8008d2c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80074ae:	f001 fc0d 	bl	8008ccc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80074b8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80074ba:	e011      	b.n	80074e0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	691b      	ldr	r3, [r3, #16]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d012      	beq.n	80074ea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	3310      	adds	r3, #16
 80074c8:	4618      	mov	r0, r3
 80074ca:	f000 fd13 	bl	8007ef4 <xTaskRemoveFromEventList>
 80074ce:	4603      	mov	r3, r0
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d001      	beq.n	80074d8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80074d4:	f000 fde8 	bl	80080a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80074d8:	7bbb      	ldrb	r3, [r7, #14]
 80074da:	3b01      	subs	r3, #1
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80074e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	dce9      	bgt.n	80074bc <prvUnlockQueue+0x60>
 80074e8:	e000      	b.n	80074ec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80074ea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	22ff      	movs	r2, #255	; 0xff
 80074f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80074f4:	f001 fc1a 	bl	8008d2c <vPortExitCritical>
}
 80074f8:	bf00      	nop
 80074fa:	3710      	adds	r7, #16
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b084      	sub	sp, #16
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007508:	f001 fbe0 	bl	8008ccc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007510:	2b00      	cmp	r3, #0
 8007512:	d102      	bne.n	800751a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007514:	2301      	movs	r3, #1
 8007516:	60fb      	str	r3, [r7, #12]
 8007518:	e001      	b.n	800751e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800751a:	2300      	movs	r3, #0
 800751c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800751e:	f001 fc05 	bl	8008d2c <vPortExitCritical>

	return xReturn;
 8007522:	68fb      	ldr	r3, [r7, #12]
}
 8007524:	4618      	mov	r0, r3
 8007526:	3710      	adds	r7, #16
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}

0800752c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b084      	sub	sp, #16
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007534:	f001 fbca 	bl	8008ccc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007540:	429a      	cmp	r2, r3
 8007542:	d102      	bne.n	800754a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007544:	2301      	movs	r3, #1
 8007546:	60fb      	str	r3, [r7, #12]
 8007548:	e001      	b.n	800754e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800754a:	2300      	movs	r3, #0
 800754c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800754e:	f001 fbed 	bl	8008d2c <vPortExitCritical>

	return xReturn;
 8007552:	68fb      	ldr	r3, [r7, #12]
}
 8007554:	4618      	mov	r0, r3
 8007556:	3710      	adds	r7, #16
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800755c:	b480      	push	{r7}
 800755e:	b085      	sub	sp, #20
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007566:	2300      	movs	r3, #0
 8007568:	60fb      	str	r3, [r7, #12]
 800756a:	e014      	b.n	8007596 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800756c:	4a0e      	ldr	r2, [pc, #56]	; (80075a8 <vQueueAddToRegistry+0x4c>)
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d10b      	bne.n	8007590 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007578:	490b      	ldr	r1, [pc, #44]	; (80075a8 <vQueueAddToRegistry+0x4c>)
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	683a      	ldr	r2, [r7, #0]
 800757e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007582:	4a09      	ldr	r2, [pc, #36]	; (80075a8 <vQueueAddToRegistry+0x4c>)
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	00db      	lsls	r3, r3, #3
 8007588:	4413      	add	r3, r2
 800758a:	687a      	ldr	r2, [r7, #4]
 800758c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800758e:	e006      	b.n	800759e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	3301      	adds	r3, #1
 8007594:	60fb      	str	r3, [r7, #12]
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2b07      	cmp	r3, #7
 800759a:	d9e7      	bls.n	800756c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800759c:	bf00      	nop
 800759e:	bf00      	nop
 80075a0:	3714      	adds	r7, #20
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bc80      	pop	{r7}
 80075a6:	4770      	bx	lr
 80075a8:	20000bd0 	.word	0x20000bd0

080075ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b086      	sub	sp, #24
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	60b9      	str	r1, [r7, #8]
 80075b6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80075bc:	f001 fb86 	bl	8008ccc <vPortEnterCritical>
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80075c6:	b25b      	sxtb	r3, r3
 80075c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075cc:	d103      	bne.n	80075d6 <vQueueWaitForMessageRestricted+0x2a>
 80075ce:	697b      	ldr	r3, [r7, #20]
 80075d0:	2200      	movs	r2, #0
 80075d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80075dc:	b25b      	sxtb	r3, r3
 80075de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075e2:	d103      	bne.n	80075ec <vQueueWaitForMessageRestricted+0x40>
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	2200      	movs	r2, #0
 80075e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80075ec:	f001 fb9e 	bl	8008d2c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d106      	bne.n	8007606 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	3324      	adds	r3, #36	; 0x24
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	68b9      	ldr	r1, [r7, #8]
 8007600:	4618      	mov	r0, r3
 8007602:	f000 fc4b 	bl	8007e9c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007606:	6978      	ldr	r0, [r7, #20]
 8007608:	f7ff ff28 	bl	800745c <prvUnlockQueue>
	}
 800760c:	bf00      	nop
 800760e:	3718      	adds	r7, #24
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007614:	b580      	push	{r7, lr}
 8007616:	b08e      	sub	sp, #56	; 0x38
 8007618:	af04      	add	r7, sp, #16
 800761a:	60f8      	str	r0, [r7, #12]
 800761c:	60b9      	str	r1, [r7, #8]
 800761e:	607a      	str	r2, [r7, #4]
 8007620:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007624:	2b00      	cmp	r3, #0
 8007626:	d10a      	bne.n	800763e <xTaskCreateStatic+0x2a>
	__asm volatile
 8007628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800762c:	f383 8811 	msr	BASEPRI, r3
 8007630:	f3bf 8f6f 	isb	sy
 8007634:	f3bf 8f4f 	dsb	sy
 8007638:	623b      	str	r3, [r7, #32]
}
 800763a:	bf00      	nop
 800763c:	e7fe      	b.n	800763c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800763e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007640:	2b00      	cmp	r3, #0
 8007642:	d10a      	bne.n	800765a <xTaskCreateStatic+0x46>
	__asm volatile
 8007644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007648:	f383 8811 	msr	BASEPRI, r3
 800764c:	f3bf 8f6f 	isb	sy
 8007650:	f3bf 8f4f 	dsb	sy
 8007654:	61fb      	str	r3, [r7, #28]
}
 8007656:	bf00      	nop
 8007658:	e7fe      	b.n	8007658 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800765a:	23b4      	movs	r3, #180	; 0xb4
 800765c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	2bb4      	cmp	r3, #180	; 0xb4
 8007662:	d00a      	beq.n	800767a <xTaskCreateStatic+0x66>
	__asm volatile
 8007664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007668:	f383 8811 	msr	BASEPRI, r3
 800766c:	f3bf 8f6f 	isb	sy
 8007670:	f3bf 8f4f 	dsb	sy
 8007674:	61bb      	str	r3, [r7, #24]
}
 8007676:	bf00      	nop
 8007678:	e7fe      	b.n	8007678 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800767a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800767c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800767e:	2b00      	cmp	r3, #0
 8007680:	d01e      	beq.n	80076c0 <xTaskCreateStatic+0xac>
 8007682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007684:	2b00      	cmp	r3, #0
 8007686:	d01b      	beq.n	80076c0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800768a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800768c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800768e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007690:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007694:	2202      	movs	r2, #2
 8007696:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800769a:	2300      	movs	r3, #0
 800769c:	9303      	str	r3, [sp, #12]
 800769e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a0:	9302      	str	r3, [sp, #8]
 80076a2:	f107 0314 	add.w	r3, r7, #20
 80076a6:	9301      	str	r3, [sp, #4]
 80076a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076aa:	9300      	str	r3, [sp, #0]
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	687a      	ldr	r2, [r7, #4]
 80076b0:	68b9      	ldr	r1, [r7, #8]
 80076b2:	68f8      	ldr	r0, [r7, #12]
 80076b4:	f000 f850 	bl	8007758 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80076b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80076ba:	f000 f8eb 	bl	8007894 <prvAddNewTaskToReadyList>
 80076be:	e001      	b.n	80076c4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80076c0:	2300      	movs	r3, #0
 80076c2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80076c4:	697b      	ldr	r3, [r7, #20]
	}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3728      	adds	r7, #40	; 0x28
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}

080076ce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80076ce:	b580      	push	{r7, lr}
 80076d0:	b08c      	sub	sp, #48	; 0x30
 80076d2:	af04      	add	r7, sp, #16
 80076d4:	60f8      	str	r0, [r7, #12]
 80076d6:	60b9      	str	r1, [r7, #8]
 80076d8:	603b      	str	r3, [r7, #0]
 80076da:	4613      	mov	r3, r2
 80076dc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80076de:	88fb      	ldrh	r3, [r7, #6]
 80076e0:	009b      	lsls	r3, r3, #2
 80076e2:	4618      	mov	r0, r3
 80076e4:	f001 fbf2 	bl	8008ecc <pvPortMalloc>
 80076e8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d00e      	beq.n	800770e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80076f0:	20b4      	movs	r0, #180	; 0xb4
 80076f2:	f001 fbeb 	bl	8008ecc <pvPortMalloc>
 80076f6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80076f8:	69fb      	ldr	r3, [r7, #28]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d003      	beq.n	8007706 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80076fe:	69fb      	ldr	r3, [r7, #28]
 8007700:	697a      	ldr	r2, [r7, #20]
 8007702:	631a      	str	r2, [r3, #48]	; 0x30
 8007704:	e005      	b.n	8007712 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007706:	6978      	ldr	r0, [r7, #20]
 8007708:	f001 fca4 	bl	8009054 <vPortFree>
 800770c:	e001      	b.n	8007712 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800770e:	2300      	movs	r3, #0
 8007710:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007712:	69fb      	ldr	r3, [r7, #28]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d017      	beq.n	8007748 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007718:	69fb      	ldr	r3, [r7, #28]
 800771a:	2200      	movs	r2, #0
 800771c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007720:	88fa      	ldrh	r2, [r7, #6]
 8007722:	2300      	movs	r3, #0
 8007724:	9303      	str	r3, [sp, #12]
 8007726:	69fb      	ldr	r3, [r7, #28]
 8007728:	9302      	str	r3, [sp, #8]
 800772a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800772c:	9301      	str	r3, [sp, #4]
 800772e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007730:	9300      	str	r3, [sp, #0]
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	68b9      	ldr	r1, [r7, #8]
 8007736:	68f8      	ldr	r0, [r7, #12]
 8007738:	f000 f80e 	bl	8007758 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800773c:	69f8      	ldr	r0, [r7, #28]
 800773e:	f000 f8a9 	bl	8007894 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007742:	2301      	movs	r3, #1
 8007744:	61bb      	str	r3, [r7, #24]
 8007746:	e002      	b.n	800774e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007748:	f04f 33ff 	mov.w	r3, #4294967295
 800774c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800774e:	69bb      	ldr	r3, [r7, #24]
	}
 8007750:	4618      	mov	r0, r3
 8007752:	3720      	adds	r7, #32
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}

08007758 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b088      	sub	sp, #32
 800775c:	af00      	add	r7, sp, #0
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	60b9      	str	r1, [r7, #8]
 8007762:	607a      	str	r2, [r7, #4]
 8007764:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007768:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007770:	3b01      	subs	r3, #1
 8007772:	009b      	lsls	r3, r3, #2
 8007774:	4413      	add	r3, r2
 8007776:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007778:	69bb      	ldr	r3, [r7, #24]
 800777a:	f023 0307 	bic.w	r3, r3, #7
 800777e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007780:	69bb      	ldr	r3, [r7, #24]
 8007782:	f003 0307 	and.w	r3, r3, #7
 8007786:	2b00      	cmp	r3, #0
 8007788:	d00a      	beq.n	80077a0 <prvInitialiseNewTask+0x48>
	__asm volatile
 800778a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800778e:	f383 8811 	msr	BASEPRI, r3
 8007792:	f3bf 8f6f 	isb	sy
 8007796:	f3bf 8f4f 	dsb	sy
 800779a:	617b      	str	r3, [r7, #20]
}
 800779c:	bf00      	nop
 800779e:	e7fe      	b.n	800779e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d01f      	beq.n	80077e6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80077a6:	2300      	movs	r3, #0
 80077a8:	61fb      	str	r3, [r7, #28]
 80077aa:	e012      	b.n	80077d2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80077ac:	68ba      	ldr	r2, [r7, #8]
 80077ae:	69fb      	ldr	r3, [r7, #28]
 80077b0:	4413      	add	r3, r2
 80077b2:	7819      	ldrb	r1, [r3, #0]
 80077b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077b6:	69fb      	ldr	r3, [r7, #28]
 80077b8:	4413      	add	r3, r2
 80077ba:	3334      	adds	r3, #52	; 0x34
 80077bc:	460a      	mov	r2, r1
 80077be:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80077c0:	68ba      	ldr	r2, [r7, #8]
 80077c2:	69fb      	ldr	r3, [r7, #28]
 80077c4:	4413      	add	r3, r2
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d006      	beq.n	80077da <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80077cc:	69fb      	ldr	r3, [r7, #28]
 80077ce:	3301      	adds	r3, #1
 80077d0:	61fb      	str	r3, [r7, #28]
 80077d2:	69fb      	ldr	r3, [r7, #28]
 80077d4:	2b0f      	cmp	r3, #15
 80077d6:	d9e9      	bls.n	80077ac <prvInitialiseNewTask+0x54>
 80077d8:	e000      	b.n	80077dc <prvInitialiseNewTask+0x84>
			{
				break;
 80077da:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80077dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077de:	2200      	movs	r2, #0
 80077e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80077e4:	e003      	b.n	80077ee <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80077e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e8:	2200      	movs	r2, #0
 80077ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80077ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f0:	2b06      	cmp	r3, #6
 80077f2:	d901      	bls.n	80077f8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80077f4:	2306      	movs	r3, #6
 80077f6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80077f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80077fc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80077fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007800:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007802:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007806:	2200      	movs	r2, #0
 8007808:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800780a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800780c:	3304      	adds	r3, #4
 800780e:	4618      	mov	r0, r3
 8007810:	f7ff f901 	bl	8006a16 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007816:	3318      	adds	r3, #24
 8007818:	4618      	mov	r0, r3
 800781a:	f7ff f8fc 	bl	8006a16 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800781e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007820:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007822:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007826:	f1c3 0207 	rsb	r2, r3, #7
 800782a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800782c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800782e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007830:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007832:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007836:	2200      	movs	r2, #0
 8007838:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800783c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800783e:	2200      	movs	r2, #0
 8007840:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007846:	334c      	adds	r3, #76	; 0x4c
 8007848:	2260      	movs	r2, #96	; 0x60
 800784a:	2100      	movs	r1, #0
 800784c:	4618      	mov	r0, r3
 800784e:	f001 fe46 	bl	80094de <memset>
 8007852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007854:	4a0c      	ldr	r2, [pc, #48]	; (8007888 <prvInitialiseNewTask+0x130>)
 8007856:	651a      	str	r2, [r3, #80]	; 0x50
 8007858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800785a:	4a0c      	ldr	r2, [pc, #48]	; (800788c <prvInitialiseNewTask+0x134>)
 800785c:	655a      	str	r2, [r3, #84]	; 0x54
 800785e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007860:	4a0b      	ldr	r2, [pc, #44]	; (8007890 <prvInitialiseNewTask+0x138>)
 8007862:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007864:	683a      	ldr	r2, [r7, #0]
 8007866:	68f9      	ldr	r1, [r7, #12]
 8007868:	69b8      	ldr	r0, [r7, #24]
 800786a:	f001 f93f 	bl	8008aec <pxPortInitialiseStack>
 800786e:	4602      	mov	r2, r0
 8007870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007872:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007876:	2b00      	cmp	r3, #0
 8007878:	d002      	beq.n	8007880 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800787a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800787c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800787e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007880:	bf00      	nop
 8007882:	3720      	adds	r7, #32
 8007884:	46bd      	mov	sp, r7
 8007886:	bd80      	pop	{r7, pc}
 8007888:	0800b034 	.word	0x0800b034
 800788c:	0800b054 	.word	0x0800b054
 8007890:	0800b014 	.word	0x0800b014

08007894 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b082      	sub	sp, #8
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800789c:	f001 fa16 	bl	8008ccc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80078a0:	4b2a      	ldr	r3, [pc, #168]	; (800794c <prvAddNewTaskToReadyList+0xb8>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	3301      	adds	r3, #1
 80078a6:	4a29      	ldr	r2, [pc, #164]	; (800794c <prvAddNewTaskToReadyList+0xb8>)
 80078a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80078aa:	4b29      	ldr	r3, [pc, #164]	; (8007950 <prvAddNewTaskToReadyList+0xbc>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d109      	bne.n	80078c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80078b2:	4a27      	ldr	r2, [pc, #156]	; (8007950 <prvAddNewTaskToReadyList+0xbc>)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80078b8:	4b24      	ldr	r3, [pc, #144]	; (800794c <prvAddNewTaskToReadyList+0xb8>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d110      	bne.n	80078e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80078c0:	f000 fc18 	bl	80080f4 <prvInitialiseTaskLists>
 80078c4:	e00d      	b.n	80078e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80078c6:	4b23      	ldr	r3, [pc, #140]	; (8007954 <prvAddNewTaskToReadyList+0xc0>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d109      	bne.n	80078e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80078ce:	4b20      	ldr	r3, [pc, #128]	; (8007950 <prvAddNewTaskToReadyList+0xbc>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078d8:	429a      	cmp	r2, r3
 80078da:	d802      	bhi.n	80078e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80078dc:	4a1c      	ldr	r2, [pc, #112]	; (8007950 <prvAddNewTaskToReadyList+0xbc>)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80078e2:	4b1d      	ldr	r3, [pc, #116]	; (8007958 <prvAddNewTaskToReadyList+0xc4>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	3301      	adds	r3, #1
 80078e8:	4a1b      	ldr	r2, [pc, #108]	; (8007958 <prvAddNewTaskToReadyList+0xc4>)
 80078ea:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078f0:	2201      	movs	r2, #1
 80078f2:	409a      	lsls	r2, r3
 80078f4:	4b19      	ldr	r3, [pc, #100]	; (800795c <prvAddNewTaskToReadyList+0xc8>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4313      	orrs	r3, r2
 80078fa:	4a18      	ldr	r2, [pc, #96]	; (800795c <prvAddNewTaskToReadyList+0xc8>)
 80078fc:	6013      	str	r3, [r2, #0]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007902:	4613      	mov	r3, r2
 8007904:	009b      	lsls	r3, r3, #2
 8007906:	4413      	add	r3, r2
 8007908:	009b      	lsls	r3, r3, #2
 800790a:	4a15      	ldr	r2, [pc, #84]	; (8007960 <prvAddNewTaskToReadyList+0xcc>)
 800790c:	441a      	add	r2, r3
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	3304      	adds	r3, #4
 8007912:	4619      	mov	r1, r3
 8007914:	4610      	mov	r0, r2
 8007916:	f7ff f88a 	bl	8006a2e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800791a:	f001 fa07 	bl	8008d2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800791e:	4b0d      	ldr	r3, [pc, #52]	; (8007954 <prvAddNewTaskToReadyList+0xc0>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d00e      	beq.n	8007944 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007926:	4b0a      	ldr	r3, [pc, #40]	; (8007950 <prvAddNewTaskToReadyList+0xbc>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007930:	429a      	cmp	r2, r3
 8007932:	d207      	bcs.n	8007944 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007934:	4b0b      	ldr	r3, [pc, #44]	; (8007964 <prvAddNewTaskToReadyList+0xd0>)
 8007936:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800793a:	601a      	str	r2, [r3, #0]
 800793c:	f3bf 8f4f 	dsb	sy
 8007940:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007944:	bf00      	nop
 8007946:	3708      	adds	r7, #8
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}
 800794c:	20000d10 	.word	0x20000d10
 8007950:	20000c10 	.word	0x20000c10
 8007954:	20000d1c 	.word	0x20000d1c
 8007958:	20000d2c 	.word	0x20000d2c
 800795c:	20000d18 	.word	0x20000d18
 8007960:	20000c14 	.word	0x20000c14
 8007964:	e000ed04 	.word	0xe000ed04

08007968 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007968:	b580      	push	{r7, lr}
 800796a:	b084      	sub	sp, #16
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007970:	2300      	movs	r3, #0
 8007972:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d017      	beq.n	80079aa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800797a:	4b13      	ldr	r3, [pc, #76]	; (80079c8 <vTaskDelay+0x60>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d00a      	beq.n	8007998 <vTaskDelay+0x30>
	__asm volatile
 8007982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007986:	f383 8811 	msr	BASEPRI, r3
 800798a:	f3bf 8f6f 	isb	sy
 800798e:	f3bf 8f4f 	dsb	sy
 8007992:	60bb      	str	r3, [r7, #8]
}
 8007994:	bf00      	nop
 8007996:	e7fe      	b.n	8007996 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007998:	f000 f88a 	bl	8007ab0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800799c:	2100      	movs	r1, #0
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 fd0e 	bl	80083c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80079a4:	f000 f892 	bl	8007acc <xTaskResumeAll>
 80079a8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d107      	bne.n	80079c0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80079b0:	4b06      	ldr	r3, [pc, #24]	; (80079cc <vTaskDelay+0x64>)
 80079b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079b6:	601a      	str	r2, [r3, #0]
 80079b8:	f3bf 8f4f 	dsb	sy
 80079bc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80079c0:	bf00      	nop
 80079c2:	3710      	adds	r7, #16
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}
 80079c8:	20000d38 	.word	0x20000d38
 80079cc:	e000ed04 	.word	0xe000ed04

080079d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b08a      	sub	sp, #40	; 0x28
 80079d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80079d6:	2300      	movs	r3, #0
 80079d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80079da:	2300      	movs	r3, #0
 80079dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80079de:	463a      	mov	r2, r7
 80079e0:	1d39      	adds	r1, r7, #4
 80079e2:	f107 0308 	add.w	r3, r7, #8
 80079e6:	4618      	mov	r0, r3
 80079e8:	f7f8 fdaa 	bl	8000540 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80079ec:	6839      	ldr	r1, [r7, #0]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	68ba      	ldr	r2, [r7, #8]
 80079f2:	9202      	str	r2, [sp, #8]
 80079f4:	9301      	str	r3, [sp, #4]
 80079f6:	2300      	movs	r3, #0
 80079f8:	9300      	str	r3, [sp, #0]
 80079fa:	2300      	movs	r3, #0
 80079fc:	460a      	mov	r2, r1
 80079fe:	4924      	ldr	r1, [pc, #144]	; (8007a90 <vTaskStartScheduler+0xc0>)
 8007a00:	4824      	ldr	r0, [pc, #144]	; (8007a94 <vTaskStartScheduler+0xc4>)
 8007a02:	f7ff fe07 	bl	8007614 <xTaskCreateStatic>
 8007a06:	4603      	mov	r3, r0
 8007a08:	4a23      	ldr	r2, [pc, #140]	; (8007a98 <vTaskStartScheduler+0xc8>)
 8007a0a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007a0c:	4b22      	ldr	r3, [pc, #136]	; (8007a98 <vTaskStartScheduler+0xc8>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d002      	beq.n	8007a1a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007a14:	2301      	movs	r3, #1
 8007a16:	617b      	str	r3, [r7, #20]
 8007a18:	e001      	b.n	8007a1e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	d102      	bne.n	8007a2a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007a24:	f000 fd32 	bl	800848c <xTimerCreateTimerTask>
 8007a28:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	d11b      	bne.n	8007a68 <vTaskStartScheduler+0x98>
	__asm volatile
 8007a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a34:	f383 8811 	msr	BASEPRI, r3
 8007a38:	f3bf 8f6f 	isb	sy
 8007a3c:	f3bf 8f4f 	dsb	sy
 8007a40:	613b      	str	r3, [r7, #16]
}
 8007a42:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007a44:	4b15      	ldr	r3, [pc, #84]	; (8007a9c <vTaskStartScheduler+0xcc>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	334c      	adds	r3, #76	; 0x4c
 8007a4a:	4a15      	ldr	r2, [pc, #84]	; (8007aa0 <vTaskStartScheduler+0xd0>)
 8007a4c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007a4e:	4b15      	ldr	r3, [pc, #84]	; (8007aa4 <vTaskStartScheduler+0xd4>)
 8007a50:	f04f 32ff 	mov.w	r2, #4294967295
 8007a54:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007a56:	4b14      	ldr	r3, [pc, #80]	; (8007aa8 <vTaskStartScheduler+0xd8>)
 8007a58:	2201      	movs	r2, #1
 8007a5a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007a5c:	4b13      	ldr	r3, [pc, #76]	; (8007aac <vTaskStartScheduler+0xdc>)
 8007a5e:	2200      	movs	r2, #0
 8007a60:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007a62:	f001 f8c1 	bl	8008be8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007a66:	e00e      	b.n	8007a86 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a6e:	d10a      	bne.n	8007a86 <vTaskStartScheduler+0xb6>
	__asm volatile
 8007a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a74:	f383 8811 	msr	BASEPRI, r3
 8007a78:	f3bf 8f6f 	isb	sy
 8007a7c:	f3bf 8f4f 	dsb	sy
 8007a80:	60fb      	str	r3, [r7, #12]
}
 8007a82:	bf00      	nop
 8007a84:	e7fe      	b.n	8007a84 <vTaskStartScheduler+0xb4>
}
 8007a86:	bf00      	nop
 8007a88:	3718      	adds	r7, #24
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
 8007a8e:	bf00      	nop
 8007a90:	0800a8f4 	.word	0x0800a8f4
 8007a94:	080080c1 	.word	0x080080c1
 8007a98:	20000d34 	.word	0x20000d34
 8007a9c:	20000c10 	.word	0x20000c10
 8007aa0:	20000010 	.word	0x20000010
 8007aa4:	20000d30 	.word	0x20000d30
 8007aa8:	20000d1c 	.word	0x20000d1c
 8007aac:	20000d14 	.word	0x20000d14

08007ab0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007ab4:	4b04      	ldr	r3, [pc, #16]	; (8007ac8 <vTaskSuspendAll+0x18>)
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	3301      	adds	r3, #1
 8007aba:	4a03      	ldr	r2, [pc, #12]	; (8007ac8 <vTaskSuspendAll+0x18>)
 8007abc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007abe:	bf00      	nop
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bc80      	pop	{r7}
 8007ac4:	4770      	bx	lr
 8007ac6:	bf00      	nop
 8007ac8:	20000d38 	.word	0x20000d38

08007acc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b084      	sub	sp, #16
 8007ad0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007ada:	4b41      	ldr	r3, [pc, #260]	; (8007be0 <xTaskResumeAll+0x114>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d10a      	bne.n	8007af8 <xTaskResumeAll+0x2c>
	__asm volatile
 8007ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae6:	f383 8811 	msr	BASEPRI, r3
 8007aea:	f3bf 8f6f 	isb	sy
 8007aee:	f3bf 8f4f 	dsb	sy
 8007af2:	603b      	str	r3, [r7, #0]
}
 8007af4:	bf00      	nop
 8007af6:	e7fe      	b.n	8007af6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007af8:	f001 f8e8 	bl	8008ccc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007afc:	4b38      	ldr	r3, [pc, #224]	; (8007be0 <xTaskResumeAll+0x114>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	3b01      	subs	r3, #1
 8007b02:	4a37      	ldr	r2, [pc, #220]	; (8007be0 <xTaskResumeAll+0x114>)
 8007b04:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b06:	4b36      	ldr	r3, [pc, #216]	; (8007be0 <xTaskResumeAll+0x114>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d161      	bne.n	8007bd2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007b0e:	4b35      	ldr	r3, [pc, #212]	; (8007be4 <xTaskResumeAll+0x118>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d05d      	beq.n	8007bd2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007b16:	e02e      	b.n	8007b76 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b18:	4b33      	ldr	r3, [pc, #204]	; (8007be8 <xTaskResumeAll+0x11c>)
 8007b1a:	68db      	ldr	r3, [r3, #12]
 8007b1c:	68db      	ldr	r3, [r3, #12]
 8007b1e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	3318      	adds	r3, #24
 8007b24:	4618      	mov	r0, r3
 8007b26:	f7fe ffdd 	bl	8006ae4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	3304      	adds	r3, #4
 8007b2e:	4618      	mov	r0, r3
 8007b30:	f7fe ffd8 	bl	8006ae4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b38:	2201      	movs	r2, #1
 8007b3a:	409a      	lsls	r2, r3
 8007b3c:	4b2b      	ldr	r3, [pc, #172]	; (8007bec <xTaskResumeAll+0x120>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4313      	orrs	r3, r2
 8007b42:	4a2a      	ldr	r2, [pc, #168]	; (8007bec <xTaskResumeAll+0x120>)
 8007b44:	6013      	str	r3, [r2, #0]
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b4a:	4613      	mov	r3, r2
 8007b4c:	009b      	lsls	r3, r3, #2
 8007b4e:	4413      	add	r3, r2
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	4a27      	ldr	r2, [pc, #156]	; (8007bf0 <xTaskResumeAll+0x124>)
 8007b54:	441a      	add	r2, r3
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	3304      	adds	r3, #4
 8007b5a:	4619      	mov	r1, r3
 8007b5c:	4610      	mov	r0, r2
 8007b5e:	f7fe ff66 	bl	8006a2e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b66:	4b23      	ldr	r3, [pc, #140]	; (8007bf4 <xTaskResumeAll+0x128>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d302      	bcc.n	8007b76 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007b70:	4b21      	ldr	r3, [pc, #132]	; (8007bf8 <xTaskResumeAll+0x12c>)
 8007b72:	2201      	movs	r2, #1
 8007b74:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007b76:	4b1c      	ldr	r3, [pc, #112]	; (8007be8 <xTaskResumeAll+0x11c>)
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d1cc      	bne.n	8007b18 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d001      	beq.n	8007b88 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007b84:	f000 fb58 	bl	8008238 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007b88:	4b1c      	ldr	r3, [pc, #112]	; (8007bfc <xTaskResumeAll+0x130>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d010      	beq.n	8007bb6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007b94:	f000 f844 	bl	8007c20 <xTaskIncrementTick>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d002      	beq.n	8007ba4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007b9e:	4b16      	ldr	r3, [pc, #88]	; (8007bf8 <xTaskResumeAll+0x12c>)
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	3b01      	subs	r3, #1
 8007ba8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d1f1      	bne.n	8007b94 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8007bb0:	4b12      	ldr	r3, [pc, #72]	; (8007bfc <xTaskResumeAll+0x130>)
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007bb6:	4b10      	ldr	r3, [pc, #64]	; (8007bf8 <xTaskResumeAll+0x12c>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d009      	beq.n	8007bd2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007bc2:	4b0f      	ldr	r3, [pc, #60]	; (8007c00 <xTaskResumeAll+0x134>)
 8007bc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bc8:	601a      	str	r2, [r3, #0]
 8007bca:	f3bf 8f4f 	dsb	sy
 8007bce:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007bd2:	f001 f8ab 	bl	8008d2c <vPortExitCritical>

	return xAlreadyYielded;
 8007bd6:	68bb      	ldr	r3, [r7, #8]
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3710      	adds	r7, #16
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}
 8007be0:	20000d38 	.word	0x20000d38
 8007be4:	20000d10 	.word	0x20000d10
 8007be8:	20000cd0 	.word	0x20000cd0
 8007bec:	20000d18 	.word	0x20000d18
 8007bf0:	20000c14 	.word	0x20000c14
 8007bf4:	20000c10 	.word	0x20000c10
 8007bf8:	20000d24 	.word	0x20000d24
 8007bfc:	20000d20 	.word	0x20000d20
 8007c00:	e000ed04 	.word	0xe000ed04

08007c04 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007c04:	b480      	push	{r7}
 8007c06:	b083      	sub	sp, #12
 8007c08:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007c0a:	4b04      	ldr	r3, [pc, #16]	; (8007c1c <xTaskGetTickCount+0x18>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007c10:	687b      	ldr	r3, [r7, #4]
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	370c      	adds	r7, #12
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bc80      	pop	{r7}
 8007c1a:	4770      	bx	lr
 8007c1c:	20000d14 	.word	0x20000d14

08007c20 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b086      	sub	sp, #24
 8007c24:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007c26:	2300      	movs	r3, #0
 8007c28:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c2a:	4b4e      	ldr	r3, [pc, #312]	; (8007d64 <xTaskIncrementTick+0x144>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	f040 8088 	bne.w	8007d44 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007c34:	4b4c      	ldr	r3, [pc, #304]	; (8007d68 <xTaskIncrementTick+0x148>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	3301      	adds	r3, #1
 8007c3a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007c3c:	4a4a      	ldr	r2, [pc, #296]	; (8007d68 <xTaskIncrementTick+0x148>)
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d120      	bne.n	8007c8a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007c48:	4b48      	ldr	r3, [pc, #288]	; (8007d6c <xTaskIncrementTick+0x14c>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d00a      	beq.n	8007c68 <xTaskIncrementTick+0x48>
	__asm volatile
 8007c52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c56:	f383 8811 	msr	BASEPRI, r3
 8007c5a:	f3bf 8f6f 	isb	sy
 8007c5e:	f3bf 8f4f 	dsb	sy
 8007c62:	603b      	str	r3, [r7, #0]
}
 8007c64:	bf00      	nop
 8007c66:	e7fe      	b.n	8007c66 <xTaskIncrementTick+0x46>
 8007c68:	4b40      	ldr	r3, [pc, #256]	; (8007d6c <xTaskIncrementTick+0x14c>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	60fb      	str	r3, [r7, #12]
 8007c6e:	4b40      	ldr	r3, [pc, #256]	; (8007d70 <xTaskIncrementTick+0x150>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	4a3e      	ldr	r2, [pc, #248]	; (8007d6c <xTaskIncrementTick+0x14c>)
 8007c74:	6013      	str	r3, [r2, #0]
 8007c76:	4a3e      	ldr	r2, [pc, #248]	; (8007d70 <xTaskIncrementTick+0x150>)
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	6013      	str	r3, [r2, #0]
 8007c7c:	4b3d      	ldr	r3, [pc, #244]	; (8007d74 <xTaskIncrementTick+0x154>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	3301      	adds	r3, #1
 8007c82:	4a3c      	ldr	r2, [pc, #240]	; (8007d74 <xTaskIncrementTick+0x154>)
 8007c84:	6013      	str	r3, [r2, #0]
 8007c86:	f000 fad7 	bl	8008238 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007c8a:	4b3b      	ldr	r3, [pc, #236]	; (8007d78 <xTaskIncrementTick+0x158>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	693a      	ldr	r2, [r7, #16]
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d348      	bcc.n	8007d26 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007c94:	4b35      	ldr	r3, [pc, #212]	; (8007d6c <xTaskIncrementTick+0x14c>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d104      	bne.n	8007ca8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c9e:	4b36      	ldr	r3, [pc, #216]	; (8007d78 <xTaskIncrementTick+0x158>)
 8007ca0:	f04f 32ff 	mov.w	r2, #4294967295
 8007ca4:	601a      	str	r2, [r3, #0]
					break;
 8007ca6:	e03e      	b.n	8007d26 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ca8:	4b30      	ldr	r3, [pc, #192]	; (8007d6c <xTaskIncrementTick+0x14c>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	68db      	ldr	r3, [r3, #12]
 8007cae:	68db      	ldr	r3, [r3, #12]
 8007cb0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007cb8:	693a      	ldr	r2, [r7, #16]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d203      	bcs.n	8007cc8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007cc0:	4a2d      	ldr	r2, [pc, #180]	; (8007d78 <xTaskIncrementTick+0x158>)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007cc6:	e02e      	b.n	8007d26 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	3304      	adds	r3, #4
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f7fe ff09 	bl	8006ae4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d004      	beq.n	8007ce4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	3318      	adds	r3, #24
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f7fe ff00 	bl	8006ae4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce8:	2201      	movs	r2, #1
 8007cea:	409a      	lsls	r2, r3
 8007cec:	4b23      	ldr	r3, [pc, #140]	; (8007d7c <xTaskIncrementTick+0x15c>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	4a22      	ldr	r2, [pc, #136]	; (8007d7c <xTaskIncrementTick+0x15c>)
 8007cf4:	6013      	str	r3, [r2, #0]
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cfa:	4613      	mov	r3, r2
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	4413      	add	r3, r2
 8007d00:	009b      	lsls	r3, r3, #2
 8007d02:	4a1f      	ldr	r2, [pc, #124]	; (8007d80 <xTaskIncrementTick+0x160>)
 8007d04:	441a      	add	r2, r3
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	3304      	adds	r3, #4
 8007d0a:	4619      	mov	r1, r3
 8007d0c:	4610      	mov	r0, r2
 8007d0e:	f7fe fe8e 	bl	8006a2e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d16:	4b1b      	ldr	r3, [pc, #108]	; (8007d84 <xTaskIncrementTick+0x164>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d1c:	429a      	cmp	r2, r3
 8007d1e:	d3b9      	bcc.n	8007c94 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007d20:	2301      	movs	r3, #1
 8007d22:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d24:	e7b6      	b.n	8007c94 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007d26:	4b17      	ldr	r3, [pc, #92]	; (8007d84 <xTaskIncrementTick+0x164>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d2c:	4914      	ldr	r1, [pc, #80]	; (8007d80 <xTaskIncrementTick+0x160>)
 8007d2e:	4613      	mov	r3, r2
 8007d30:	009b      	lsls	r3, r3, #2
 8007d32:	4413      	add	r3, r2
 8007d34:	009b      	lsls	r3, r3, #2
 8007d36:	440b      	add	r3, r1
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	d907      	bls.n	8007d4e <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8007d3e:	2301      	movs	r3, #1
 8007d40:	617b      	str	r3, [r7, #20]
 8007d42:	e004      	b.n	8007d4e <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007d44:	4b10      	ldr	r3, [pc, #64]	; (8007d88 <xTaskIncrementTick+0x168>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	3301      	adds	r3, #1
 8007d4a:	4a0f      	ldr	r2, [pc, #60]	; (8007d88 <xTaskIncrementTick+0x168>)
 8007d4c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007d4e:	4b0f      	ldr	r3, [pc, #60]	; (8007d8c <xTaskIncrementTick+0x16c>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d001      	beq.n	8007d5a <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8007d56:	2301      	movs	r3, #1
 8007d58:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007d5a:	697b      	ldr	r3, [r7, #20]
}
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	3718      	adds	r7, #24
 8007d60:	46bd      	mov	sp, r7
 8007d62:	bd80      	pop	{r7, pc}
 8007d64:	20000d38 	.word	0x20000d38
 8007d68:	20000d14 	.word	0x20000d14
 8007d6c:	20000cc8 	.word	0x20000cc8
 8007d70:	20000ccc 	.word	0x20000ccc
 8007d74:	20000d28 	.word	0x20000d28
 8007d78:	20000d30 	.word	0x20000d30
 8007d7c:	20000d18 	.word	0x20000d18
 8007d80:	20000c14 	.word	0x20000c14
 8007d84:	20000c10 	.word	0x20000c10
 8007d88:	20000d20 	.word	0x20000d20
 8007d8c:	20000d24 	.word	0x20000d24

08007d90 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007d90:	b480      	push	{r7}
 8007d92:	b087      	sub	sp, #28
 8007d94:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007d96:	4b29      	ldr	r3, [pc, #164]	; (8007e3c <vTaskSwitchContext+0xac>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d003      	beq.n	8007da6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007d9e:	4b28      	ldr	r3, [pc, #160]	; (8007e40 <vTaskSwitchContext+0xb0>)
 8007da0:	2201      	movs	r2, #1
 8007da2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007da4:	e044      	b.n	8007e30 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8007da6:	4b26      	ldr	r3, [pc, #152]	; (8007e40 <vTaskSwitchContext+0xb0>)
 8007da8:	2200      	movs	r2, #0
 8007daa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dac:	4b25      	ldr	r3, [pc, #148]	; (8007e44 <vTaskSwitchContext+0xb4>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	fab3 f383 	clz	r3, r3
 8007db8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007dba:	7afb      	ldrb	r3, [r7, #11]
 8007dbc:	f1c3 031f 	rsb	r3, r3, #31
 8007dc0:	617b      	str	r3, [r7, #20]
 8007dc2:	4921      	ldr	r1, [pc, #132]	; (8007e48 <vTaskSwitchContext+0xb8>)
 8007dc4:	697a      	ldr	r2, [r7, #20]
 8007dc6:	4613      	mov	r3, r2
 8007dc8:	009b      	lsls	r3, r3, #2
 8007dca:	4413      	add	r3, r2
 8007dcc:	009b      	lsls	r3, r3, #2
 8007dce:	440b      	add	r3, r1
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d10a      	bne.n	8007dec <vTaskSwitchContext+0x5c>
	__asm volatile
 8007dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dda:	f383 8811 	msr	BASEPRI, r3
 8007dde:	f3bf 8f6f 	isb	sy
 8007de2:	f3bf 8f4f 	dsb	sy
 8007de6:	607b      	str	r3, [r7, #4]
}
 8007de8:	bf00      	nop
 8007dea:	e7fe      	b.n	8007dea <vTaskSwitchContext+0x5a>
 8007dec:	697a      	ldr	r2, [r7, #20]
 8007dee:	4613      	mov	r3, r2
 8007df0:	009b      	lsls	r3, r3, #2
 8007df2:	4413      	add	r3, r2
 8007df4:	009b      	lsls	r3, r3, #2
 8007df6:	4a14      	ldr	r2, [pc, #80]	; (8007e48 <vTaskSwitchContext+0xb8>)
 8007df8:	4413      	add	r3, r2
 8007dfa:	613b      	str	r3, [r7, #16]
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	685a      	ldr	r2, [r3, #4]
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	605a      	str	r2, [r3, #4]
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	685a      	ldr	r2, [r3, #4]
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	3308      	adds	r3, #8
 8007e0e:	429a      	cmp	r2, r3
 8007e10:	d104      	bne.n	8007e1c <vTaskSwitchContext+0x8c>
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	685a      	ldr	r2, [r3, #4]
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	605a      	str	r2, [r3, #4]
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	68db      	ldr	r3, [r3, #12]
 8007e22:	4a0a      	ldr	r2, [pc, #40]	; (8007e4c <vTaskSwitchContext+0xbc>)
 8007e24:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007e26:	4b09      	ldr	r3, [pc, #36]	; (8007e4c <vTaskSwitchContext+0xbc>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	334c      	adds	r3, #76	; 0x4c
 8007e2c:	4a08      	ldr	r2, [pc, #32]	; (8007e50 <vTaskSwitchContext+0xc0>)
 8007e2e:	6013      	str	r3, [r2, #0]
}
 8007e30:	bf00      	nop
 8007e32:	371c      	adds	r7, #28
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bc80      	pop	{r7}
 8007e38:	4770      	bx	lr
 8007e3a:	bf00      	nop
 8007e3c:	20000d38 	.word	0x20000d38
 8007e40:	20000d24 	.word	0x20000d24
 8007e44:	20000d18 	.word	0x20000d18
 8007e48:	20000c14 	.word	0x20000c14
 8007e4c:	20000c10 	.word	0x20000c10
 8007e50:	20000010 	.word	0x20000010

08007e54 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b084      	sub	sp, #16
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d10a      	bne.n	8007e7a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e68:	f383 8811 	msr	BASEPRI, r3
 8007e6c:	f3bf 8f6f 	isb	sy
 8007e70:	f3bf 8f4f 	dsb	sy
 8007e74:	60fb      	str	r3, [r7, #12]
}
 8007e76:	bf00      	nop
 8007e78:	e7fe      	b.n	8007e78 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007e7a:	4b07      	ldr	r3, [pc, #28]	; (8007e98 <vTaskPlaceOnEventList+0x44>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	3318      	adds	r3, #24
 8007e80:	4619      	mov	r1, r3
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f7fe fdf6 	bl	8006a74 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007e88:	2101      	movs	r1, #1
 8007e8a:	6838      	ldr	r0, [r7, #0]
 8007e8c:	f000 fa98 	bl	80083c0 <prvAddCurrentTaskToDelayedList>
}
 8007e90:	bf00      	nop
 8007e92:	3710      	adds	r7, #16
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}
 8007e98:	20000c10 	.word	0x20000c10

08007e9c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b086      	sub	sp, #24
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	60f8      	str	r0, [r7, #12]
 8007ea4:	60b9      	str	r1, [r7, #8]
 8007ea6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d10a      	bne.n	8007ec4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb2:	f383 8811 	msr	BASEPRI, r3
 8007eb6:	f3bf 8f6f 	isb	sy
 8007eba:	f3bf 8f4f 	dsb	sy
 8007ebe:	617b      	str	r3, [r7, #20]
}
 8007ec0:	bf00      	nop
 8007ec2:	e7fe      	b.n	8007ec2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007ec4:	4b0a      	ldr	r3, [pc, #40]	; (8007ef0 <vTaskPlaceOnEventListRestricted+0x54>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	3318      	adds	r3, #24
 8007eca:	4619      	mov	r1, r3
 8007ecc:	68f8      	ldr	r0, [r7, #12]
 8007ece:	f7fe fdae 	bl	8006a2e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d002      	beq.n	8007ede <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8007edc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007ede:	6879      	ldr	r1, [r7, #4]
 8007ee0:	68b8      	ldr	r0, [r7, #8]
 8007ee2:	f000 fa6d 	bl	80083c0 <prvAddCurrentTaskToDelayedList>
	}
 8007ee6:	bf00      	nop
 8007ee8:	3718      	adds	r7, #24
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
 8007eee:	bf00      	nop
 8007ef0:	20000c10 	.word	0x20000c10

08007ef4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b086      	sub	sp, #24
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	68db      	ldr	r3, [r3, #12]
 8007f00:	68db      	ldr	r3, [r3, #12]
 8007f02:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d10a      	bne.n	8007f20 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f0e:	f383 8811 	msr	BASEPRI, r3
 8007f12:	f3bf 8f6f 	isb	sy
 8007f16:	f3bf 8f4f 	dsb	sy
 8007f1a:	60fb      	str	r3, [r7, #12]
}
 8007f1c:	bf00      	nop
 8007f1e:	e7fe      	b.n	8007f1e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	3318      	adds	r3, #24
 8007f24:	4618      	mov	r0, r3
 8007f26:	f7fe fddd 	bl	8006ae4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f2a:	4b1d      	ldr	r3, [pc, #116]	; (8007fa0 <xTaskRemoveFromEventList+0xac>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d11c      	bne.n	8007f6c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	3304      	adds	r3, #4
 8007f36:	4618      	mov	r0, r3
 8007f38:	f7fe fdd4 	bl	8006ae4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f40:	2201      	movs	r2, #1
 8007f42:	409a      	lsls	r2, r3
 8007f44:	4b17      	ldr	r3, [pc, #92]	; (8007fa4 <xTaskRemoveFromEventList+0xb0>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	4a16      	ldr	r2, [pc, #88]	; (8007fa4 <xTaskRemoveFromEventList+0xb0>)
 8007f4c:	6013      	str	r3, [r2, #0]
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f52:	4613      	mov	r3, r2
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	4413      	add	r3, r2
 8007f58:	009b      	lsls	r3, r3, #2
 8007f5a:	4a13      	ldr	r2, [pc, #76]	; (8007fa8 <xTaskRemoveFromEventList+0xb4>)
 8007f5c:	441a      	add	r2, r3
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	3304      	adds	r3, #4
 8007f62:	4619      	mov	r1, r3
 8007f64:	4610      	mov	r0, r2
 8007f66:	f7fe fd62 	bl	8006a2e <vListInsertEnd>
 8007f6a:	e005      	b.n	8007f78 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007f6c:	693b      	ldr	r3, [r7, #16]
 8007f6e:	3318      	adds	r3, #24
 8007f70:	4619      	mov	r1, r3
 8007f72:	480e      	ldr	r0, [pc, #56]	; (8007fac <xTaskRemoveFromEventList+0xb8>)
 8007f74:	f7fe fd5b 	bl	8006a2e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f7c:	4b0c      	ldr	r3, [pc, #48]	; (8007fb0 <xTaskRemoveFromEventList+0xbc>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f82:	429a      	cmp	r2, r3
 8007f84:	d905      	bls.n	8007f92 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007f86:	2301      	movs	r3, #1
 8007f88:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007f8a:	4b0a      	ldr	r3, [pc, #40]	; (8007fb4 <xTaskRemoveFromEventList+0xc0>)
 8007f8c:	2201      	movs	r2, #1
 8007f8e:	601a      	str	r2, [r3, #0]
 8007f90:	e001      	b.n	8007f96 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007f92:	2300      	movs	r3, #0
 8007f94:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007f96:	697b      	ldr	r3, [r7, #20]
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	3718      	adds	r7, #24
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}
 8007fa0:	20000d38 	.word	0x20000d38
 8007fa4:	20000d18 	.word	0x20000d18
 8007fa8:	20000c14 	.word	0x20000c14
 8007fac:	20000cd0 	.word	0x20000cd0
 8007fb0:	20000c10 	.word	0x20000c10
 8007fb4:	20000d24 	.word	0x20000d24

08007fb8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b083      	sub	sp, #12
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007fc0:	4b06      	ldr	r3, [pc, #24]	; (8007fdc <vTaskInternalSetTimeOutState+0x24>)
 8007fc2:	681a      	ldr	r2, [r3, #0]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007fc8:	4b05      	ldr	r3, [pc, #20]	; (8007fe0 <vTaskInternalSetTimeOutState+0x28>)
 8007fca:	681a      	ldr	r2, [r3, #0]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	605a      	str	r2, [r3, #4]
}
 8007fd0:	bf00      	nop
 8007fd2:	370c      	adds	r7, #12
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bc80      	pop	{r7}
 8007fd8:	4770      	bx	lr
 8007fda:	bf00      	nop
 8007fdc:	20000d28 	.word	0x20000d28
 8007fe0:	20000d14 	.word	0x20000d14

08007fe4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b088      	sub	sp, #32
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d10a      	bne.n	800800a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ff8:	f383 8811 	msr	BASEPRI, r3
 8007ffc:	f3bf 8f6f 	isb	sy
 8008000:	f3bf 8f4f 	dsb	sy
 8008004:	613b      	str	r3, [r7, #16]
}
 8008006:	bf00      	nop
 8008008:	e7fe      	b.n	8008008 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d10a      	bne.n	8008026 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008014:	f383 8811 	msr	BASEPRI, r3
 8008018:	f3bf 8f6f 	isb	sy
 800801c:	f3bf 8f4f 	dsb	sy
 8008020:	60fb      	str	r3, [r7, #12]
}
 8008022:	bf00      	nop
 8008024:	e7fe      	b.n	8008024 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008026:	f000 fe51 	bl	8008ccc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800802a:	4b1d      	ldr	r3, [pc, #116]	; (80080a0 <xTaskCheckForTimeOut+0xbc>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	685b      	ldr	r3, [r3, #4]
 8008034:	69ba      	ldr	r2, [r7, #24]
 8008036:	1ad3      	subs	r3, r2, r3
 8008038:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008042:	d102      	bne.n	800804a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008044:	2300      	movs	r3, #0
 8008046:	61fb      	str	r3, [r7, #28]
 8008048:	e023      	b.n	8008092 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681a      	ldr	r2, [r3, #0]
 800804e:	4b15      	ldr	r3, [pc, #84]	; (80080a4 <xTaskCheckForTimeOut+0xc0>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	429a      	cmp	r2, r3
 8008054:	d007      	beq.n	8008066 <xTaskCheckForTimeOut+0x82>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	69ba      	ldr	r2, [r7, #24]
 800805c:	429a      	cmp	r2, r3
 800805e:	d302      	bcc.n	8008066 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008060:	2301      	movs	r3, #1
 8008062:	61fb      	str	r3, [r7, #28]
 8008064:	e015      	b.n	8008092 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	697a      	ldr	r2, [r7, #20]
 800806c:	429a      	cmp	r2, r3
 800806e:	d20b      	bcs.n	8008088 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	681a      	ldr	r2, [r3, #0]
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	1ad2      	subs	r2, r2, r3
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800807c:	6878      	ldr	r0, [r7, #4]
 800807e:	f7ff ff9b 	bl	8007fb8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008082:	2300      	movs	r3, #0
 8008084:	61fb      	str	r3, [r7, #28]
 8008086:	e004      	b.n	8008092 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	2200      	movs	r2, #0
 800808c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800808e:	2301      	movs	r3, #1
 8008090:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008092:	f000 fe4b 	bl	8008d2c <vPortExitCritical>

	return xReturn;
 8008096:	69fb      	ldr	r3, [r7, #28]
}
 8008098:	4618      	mov	r0, r3
 800809a:	3720      	adds	r7, #32
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}
 80080a0:	20000d14 	.word	0x20000d14
 80080a4:	20000d28 	.word	0x20000d28

080080a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80080a8:	b480      	push	{r7}
 80080aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80080ac:	4b03      	ldr	r3, [pc, #12]	; (80080bc <vTaskMissedYield+0x14>)
 80080ae:	2201      	movs	r2, #1
 80080b0:	601a      	str	r2, [r3, #0]
}
 80080b2:	bf00      	nop
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bc80      	pop	{r7}
 80080b8:	4770      	bx	lr
 80080ba:	bf00      	nop
 80080bc:	20000d24 	.word	0x20000d24

080080c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b082      	sub	sp, #8
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80080c8:	f000 f854 	bl	8008174 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80080cc:	4b07      	ldr	r3, [pc, #28]	; (80080ec <prvIdleTask+0x2c>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d907      	bls.n	80080e4 <prvIdleTask+0x24>
			{
				taskYIELD();
 80080d4:	4b06      	ldr	r3, [pc, #24]	; (80080f0 <prvIdleTask+0x30>)
 80080d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080da:	601a      	str	r2, [r3, #0]
 80080dc:	f3bf 8f4f 	dsb	sy
 80080e0:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80080e4:	f7f8 fa26 	bl	8000534 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80080e8:	e7ee      	b.n	80080c8 <prvIdleTask+0x8>
 80080ea:	bf00      	nop
 80080ec:	20000c14 	.word	0x20000c14
 80080f0:	e000ed04 	.word	0xe000ed04

080080f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b082      	sub	sp, #8
 80080f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80080fa:	2300      	movs	r3, #0
 80080fc:	607b      	str	r3, [r7, #4]
 80080fe:	e00c      	b.n	800811a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008100:	687a      	ldr	r2, [r7, #4]
 8008102:	4613      	mov	r3, r2
 8008104:	009b      	lsls	r3, r3, #2
 8008106:	4413      	add	r3, r2
 8008108:	009b      	lsls	r3, r3, #2
 800810a:	4a12      	ldr	r2, [pc, #72]	; (8008154 <prvInitialiseTaskLists+0x60>)
 800810c:	4413      	add	r3, r2
 800810e:	4618      	mov	r0, r3
 8008110:	f7fe fc62 	bl	80069d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	3301      	adds	r3, #1
 8008118:	607b      	str	r3, [r7, #4]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2b06      	cmp	r3, #6
 800811e:	d9ef      	bls.n	8008100 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008120:	480d      	ldr	r0, [pc, #52]	; (8008158 <prvInitialiseTaskLists+0x64>)
 8008122:	f7fe fc59 	bl	80069d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008126:	480d      	ldr	r0, [pc, #52]	; (800815c <prvInitialiseTaskLists+0x68>)
 8008128:	f7fe fc56 	bl	80069d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800812c:	480c      	ldr	r0, [pc, #48]	; (8008160 <prvInitialiseTaskLists+0x6c>)
 800812e:	f7fe fc53 	bl	80069d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008132:	480c      	ldr	r0, [pc, #48]	; (8008164 <prvInitialiseTaskLists+0x70>)
 8008134:	f7fe fc50 	bl	80069d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008138:	480b      	ldr	r0, [pc, #44]	; (8008168 <prvInitialiseTaskLists+0x74>)
 800813a:	f7fe fc4d 	bl	80069d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800813e:	4b0b      	ldr	r3, [pc, #44]	; (800816c <prvInitialiseTaskLists+0x78>)
 8008140:	4a05      	ldr	r2, [pc, #20]	; (8008158 <prvInitialiseTaskLists+0x64>)
 8008142:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008144:	4b0a      	ldr	r3, [pc, #40]	; (8008170 <prvInitialiseTaskLists+0x7c>)
 8008146:	4a05      	ldr	r2, [pc, #20]	; (800815c <prvInitialiseTaskLists+0x68>)
 8008148:	601a      	str	r2, [r3, #0]
}
 800814a:	bf00      	nop
 800814c:	3708      	adds	r7, #8
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}
 8008152:	bf00      	nop
 8008154:	20000c14 	.word	0x20000c14
 8008158:	20000ca0 	.word	0x20000ca0
 800815c:	20000cb4 	.word	0x20000cb4
 8008160:	20000cd0 	.word	0x20000cd0
 8008164:	20000ce4 	.word	0x20000ce4
 8008168:	20000cfc 	.word	0x20000cfc
 800816c:	20000cc8 	.word	0x20000cc8
 8008170:	20000ccc 	.word	0x20000ccc

08008174 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b082      	sub	sp, #8
 8008178:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800817a:	e019      	b.n	80081b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800817c:	f000 fda6 	bl	8008ccc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008180:	4b10      	ldr	r3, [pc, #64]	; (80081c4 <prvCheckTasksWaitingTermination+0x50>)
 8008182:	68db      	ldr	r3, [r3, #12]
 8008184:	68db      	ldr	r3, [r3, #12]
 8008186:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	3304      	adds	r3, #4
 800818c:	4618      	mov	r0, r3
 800818e:	f7fe fca9 	bl	8006ae4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008192:	4b0d      	ldr	r3, [pc, #52]	; (80081c8 <prvCheckTasksWaitingTermination+0x54>)
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	3b01      	subs	r3, #1
 8008198:	4a0b      	ldr	r2, [pc, #44]	; (80081c8 <prvCheckTasksWaitingTermination+0x54>)
 800819a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800819c:	4b0b      	ldr	r3, [pc, #44]	; (80081cc <prvCheckTasksWaitingTermination+0x58>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	3b01      	subs	r3, #1
 80081a2:	4a0a      	ldr	r2, [pc, #40]	; (80081cc <prvCheckTasksWaitingTermination+0x58>)
 80081a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80081a6:	f000 fdc1 	bl	8008d2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 f810 	bl	80081d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80081b0:	4b06      	ldr	r3, [pc, #24]	; (80081cc <prvCheckTasksWaitingTermination+0x58>)
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d1e1      	bne.n	800817c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80081b8:	bf00      	nop
 80081ba:	bf00      	nop
 80081bc:	3708      	adds	r7, #8
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}
 80081c2:	bf00      	nop
 80081c4:	20000ce4 	.word	0x20000ce4
 80081c8:	20000d10 	.word	0x20000d10
 80081cc:	20000cf8 	.word	0x20000cf8

080081d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b084      	sub	sp, #16
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	334c      	adds	r3, #76	; 0x4c
 80081dc:	4618      	mov	r0, r3
 80081de:	f001 fa29 	bl	8009634 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d108      	bne.n	80081fe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081f0:	4618      	mov	r0, r3
 80081f2:	f000 ff2f 	bl	8009054 <vPortFree>
				vPortFree( pxTCB );
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 ff2c 	bl	8009054 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80081fc:	e018      	b.n	8008230 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008204:	2b01      	cmp	r3, #1
 8008206:	d103      	bne.n	8008210 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f000 ff23 	bl	8009054 <vPortFree>
	}
 800820e:	e00f      	b.n	8008230 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008216:	2b02      	cmp	r3, #2
 8008218:	d00a      	beq.n	8008230 <prvDeleteTCB+0x60>
	__asm volatile
 800821a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800821e:	f383 8811 	msr	BASEPRI, r3
 8008222:	f3bf 8f6f 	isb	sy
 8008226:	f3bf 8f4f 	dsb	sy
 800822a:	60fb      	str	r3, [r7, #12]
}
 800822c:	bf00      	nop
 800822e:	e7fe      	b.n	800822e <prvDeleteTCB+0x5e>
	}
 8008230:	bf00      	nop
 8008232:	3710      	adds	r7, #16
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008238:	b480      	push	{r7}
 800823a:	b083      	sub	sp, #12
 800823c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800823e:	4b0c      	ldr	r3, [pc, #48]	; (8008270 <prvResetNextTaskUnblockTime+0x38>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d104      	bne.n	8008252 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008248:	4b0a      	ldr	r3, [pc, #40]	; (8008274 <prvResetNextTaskUnblockTime+0x3c>)
 800824a:	f04f 32ff 	mov.w	r2, #4294967295
 800824e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008250:	e008      	b.n	8008264 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008252:	4b07      	ldr	r3, [pc, #28]	; (8008270 <prvResetNextTaskUnblockTime+0x38>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	68db      	ldr	r3, [r3, #12]
 8008258:	68db      	ldr	r3, [r3, #12]
 800825a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	4a04      	ldr	r2, [pc, #16]	; (8008274 <prvResetNextTaskUnblockTime+0x3c>)
 8008262:	6013      	str	r3, [r2, #0]
}
 8008264:	bf00      	nop
 8008266:	370c      	adds	r7, #12
 8008268:	46bd      	mov	sp, r7
 800826a:	bc80      	pop	{r7}
 800826c:	4770      	bx	lr
 800826e:	bf00      	nop
 8008270:	20000cc8 	.word	0x20000cc8
 8008274:	20000d30 	.word	0x20000d30

08008278 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008278:	b480      	push	{r7}
 800827a:	b083      	sub	sp, #12
 800827c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800827e:	4b0b      	ldr	r3, [pc, #44]	; (80082ac <xTaskGetSchedulerState+0x34>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d102      	bne.n	800828c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008286:	2301      	movs	r3, #1
 8008288:	607b      	str	r3, [r7, #4]
 800828a:	e008      	b.n	800829e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800828c:	4b08      	ldr	r3, [pc, #32]	; (80082b0 <xTaskGetSchedulerState+0x38>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d102      	bne.n	800829a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008294:	2302      	movs	r3, #2
 8008296:	607b      	str	r3, [r7, #4]
 8008298:	e001      	b.n	800829e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800829a:	2300      	movs	r3, #0
 800829c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800829e:	687b      	ldr	r3, [r7, #4]
	}
 80082a0:	4618      	mov	r0, r3
 80082a2:	370c      	adds	r7, #12
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bc80      	pop	{r7}
 80082a8:	4770      	bx	lr
 80082aa:	bf00      	nop
 80082ac:	20000d1c 	.word	0x20000d1c
 80082b0:	20000d38 	.word	0x20000d38

080082b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b086      	sub	sp, #24
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80082c0:	2300      	movs	r3, #0
 80082c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d06e      	beq.n	80083a8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80082ca:	4b3a      	ldr	r3, [pc, #232]	; (80083b4 <xTaskPriorityDisinherit+0x100>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	693a      	ldr	r2, [r7, #16]
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d00a      	beq.n	80082ea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80082d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d8:	f383 8811 	msr	BASEPRI, r3
 80082dc:	f3bf 8f6f 	isb	sy
 80082e0:	f3bf 8f4f 	dsb	sy
 80082e4:	60fb      	str	r3, [r7, #12]
}
 80082e6:	bf00      	nop
 80082e8:	e7fe      	b.n	80082e8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80082ea:	693b      	ldr	r3, [r7, #16]
 80082ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d10a      	bne.n	8008308 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80082f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f6:	f383 8811 	msr	BASEPRI, r3
 80082fa:	f3bf 8f6f 	isb	sy
 80082fe:	f3bf 8f4f 	dsb	sy
 8008302:	60bb      	str	r3, [r7, #8]
}
 8008304:	bf00      	nop
 8008306:	e7fe      	b.n	8008306 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800830c:	1e5a      	subs	r2, r3, #1
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800831a:	429a      	cmp	r2, r3
 800831c:	d044      	beq.n	80083a8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008322:	2b00      	cmp	r3, #0
 8008324:	d140      	bne.n	80083a8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	3304      	adds	r3, #4
 800832a:	4618      	mov	r0, r3
 800832c:	f7fe fbda 	bl	8006ae4 <uxListRemove>
 8008330:	4603      	mov	r3, r0
 8008332:	2b00      	cmp	r3, #0
 8008334:	d115      	bne.n	8008362 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8008336:	693b      	ldr	r3, [r7, #16]
 8008338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800833a:	491f      	ldr	r1, [pc, #124]	; (80083b8 <xTaskPriorityDisinherit+0x104>)
 800833c:	4613      	mov	r3, r2
 800833e:	009b      	lsls	r3, r3, #2
 8008340:	4413      	add	r3, r2
 8008342:	009b      	lsls	r3, r3, #2
 8008344:	440b      	add	r3, r1
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d10a      	bne.n	8008362 <xTaskPriorityDisinherit+0xae>
 800834c:	693b      	ldr	r3, [r7, #16]
 800834e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008350:	2201      	movs	r2, #1
 8008352:	fa02 f303 	lsl.w	r3, r2, r3
 8008356:	43da      	mvns	r2, r3
 8008358:	4b18      	ldr	r3, [pc, #96]	; (80083bc <xTaskPriorityDisinherit+0x108>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4013      	ands	r3, r2
 800835e:	4a17      	ldr	r2, [pc, #92]	; (80083bc <xTaskPriorityDisinherit+0x108>)
 8008360:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800836e:	f1c3 0207 	rsb	r2, r3, #7
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008376:	693b      	ldr	r3, [r7, #16]
 8008378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800837a:	2201      	movs	r2, #1
 800837c:	409a      	lsls	r2, r3
 800837e:	4b0f      	ldr	r3, [pc, #60]	; (80083bc <xTaskPriorityDisinherit+0x108>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4313      	orrs	r3, r2
 8008384:	4a0d      	ldr	r2, [pc, #52]	; (80083bc <xTaskPriorityDisinherit+0x108>)
 8008386:	6013      	str	r3, [r2, #0]
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800838c:	4613      	mov	r3, r2
 800838e:	009b      	lsls	r3, r3, #2
 8008390:	4413      	add	r3, r2
 8008392:	009b      	lsls	r3, r3, #2
 8008394:	4a08      	ldr	r2, [pc, #32]	; (80083b8 <xTaskPriorityDisinherit+0x104>)
 8008396:	441a      	add	r2, r3
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	3304      	adds	r3, #4
 800839c:	4619      	mov	r1, r3
 800839e:	4610      	mov	r0, r2
 80083a0:	f7fe fb45 	bl	8006a2e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80083a4:	2301      	movs	r3, #1
 80083a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80083a8:	697b      	ldr	r3, [r7, #20]
	}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3718      	adds	r7, #24
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}
 80083b2:	bf00      	nop
 80083b4:	20000c10 	.word	0x20000c10
 80083b8:	20000c14 	.word	0x20000c14
 80083bc:	20000d18 	.word	0x20000d18

080083c0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b084      	sub	sp, #16
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80083ca:	4b29      	ldr	r3, [pc, #164]	; (8008470 <prvAddCurrentTaskToDelayedList+0xb0>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80083d0:	4b28      	ldr	r3, [pc, #160]	; (8008474 <prvAddCurrentTaskToDelayedList+0xb4>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	3304      	adds	r3, #4
 80083d6:	4618      	mov	r0, r3
 80083d8:	f7fe fb84 	bl	8006ae4 <uxListRemove>
 80083dc:	4603      	mov	r3, r0
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d10b      	bne.n	80083fa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80083e2:	4b24      	ldr	r3, [pc, #144]	; (8008474 <prvAddCurrentTaskToDelayedList+0xb4>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083e8:	2201      	movs	r2, #1
 80083ea:	fa02 f303 	lsl.w	r3, r2, r3
 80083ee:	43da      	mvns	r2, r3
 80083f0:	4b21      	ldr	r3, [pc, #132]	; (8008478 <prvAddCurrentTaskToDelayedList+0xb8>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4013      	ands	r3, r2
 80083f6:	4a20      	ldr	r2, [pc, #128]	; (8008478 <prvAddCurrentTaskToDelayedList+0xb8>)
 80083f8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008400:	d10a      	bne.n	8008418 <prvAddCurrentTaskToDelayedList+0x58>
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d007      	beq.n	8008418 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008408:	4b1a      	ldr	r3, [pc, #104]	; (8008474 <prvAddCurrentTaskToDelayedList+0xb4>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	3304      	adds	r3, #4
 800840e:	4619      	mov	r1, r3
 8008410:	481a      	ldr	r0, [pc, #104]	; (800847c <prvAddCurrentTaskToDelayedList+0xbc>)
 8008412:	f7fe fb0c 	bl	8006a2e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008416:	e026      	b.n	8008466 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008418:	68fa      	ldr	r2, [r7, #12]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	4413      	add	r3, r2
 800841e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008420:	4b14      	ldr	r3, [pc, #80]	; (8008474 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	68ba      	ldr	r2, [r7, #8]
 8008426:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008428:	68ba      	ldr	r2, [r7, #8]
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	429a      	cmp	r2, r3
 800842e:	d209      	bcs.n	8008444 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008430:	4b13      	ldr	r3, [pc, #76]	; (8008480 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008432:	681a      	ldr	r2, [r3, #0]
 8008434:	4b0f      	ldr	r3, [pc, #60]	; (8008474 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	3304      	adds	r3, #4
 800843a:	4619      	mov	r1, r3
 800843c:	4610      	mov	r0, r2
 800843e:	f7fe fb19 	bl	8006a74 <vListInsert>
}
 8008442:	e010      	b.n	8008466 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008444:	4b0f      	ldr	r3, [pc, #60]	; (8008484 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008446:	681a      	ldr	r2, [r3, #0]
 8008448:	4b0a      	ldr	r3, [pc, #40]	; (8008474 <prvAddCurrentTaskToDelayedList+0xb4>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	3304      	adds	r3, #4
 800844e:	4619      	mov	r1, r3
 8008450:	4610      	mov	r0, r2
 8008452:	f7fe fb0f 	bl	8006a74 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008456:	4b0c      	ldr	r3, [pc, #48]	; (8008488 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	68ba      	ldr	r2, [r7, #8]
 800845c:	429a      	cmp	r2, r3
 800845e:	d202      	bcs.n	8008466 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008460:	4a09      	ldr	r2, [pc, #36]	; (8008488 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008462:	68bb      	ldr	r3, [r7, #8]
 8008464:	6013      	str	r3, [r2, #0]
}
 8008466:	bf00      	nop
 8008468:	3710      	adds	r7, #16
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
 800846e:	bf00      	nop
 8008470:	20000d14 	.word	0x20000d14
 8008474:	20000c10 	.word	0x20000c10
 8008478:	20000d18 	.word	0x20000d18
 800847c:	20000cfc 	.word	0x20000cfc
 8008480:	20000ccc 	.word	0x20000ccc
 8008484:	20000cc8 	.word	0x20000cc8
 8008488:	20000d30 	.word	0x20000d30

0800848c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b08a      	sub	sp, #40	; 0x28
 8008490:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008492:	2300      	movs	r3, #0
 8008494:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008496:	f000 fae9 	bl	8008a6c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800849a:	4b1c      	ldr	r3, [pc, #112]	; (800850c <xTimerCreateTimerTask+0x80>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d021      	beq.n	80084e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80084a2:	2300      	movs	r3, #0
 80084a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80084a6:	2300      	movs	r3, #0
 80084a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80084aa:	1d3a      	adds	r2, r7, #4
 80084ac:	f107 0108 	add.w	r1, r7, #8
 80084b0:	f107 030c 	add.w	r3, r7, #12
 80084b4:	4618      	mov	r0, r3
 80084b6:	f7f8 f85b 	bl	8000570 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80084ba:	6879      	ldr	r1, [r7, #4]
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	68fa      	ldr	r2, [r7, #12]
 80084c0:	9202      	str	r2, [sp, #8]
 80084c2:	9301      	str	r3, [sp, #4]
 80084c4:	2302      	movs	r3, #2
 80084c6:	9300      	str	r3, [sp, #0]
 80084c8:	2300      	movs	r3, #0
 80084ca:	460a      	mov	r2, r1
 80084cc:	4910      	ldr	r1, [pc, #64]	; (8008510 <xTimerCreateTimerTask+0x84>)
 80084ce:	4811      	ldr	r0, [pc, #68]	; (8008514 <xTimerCreateTimerTask+0x88>)
 80084d0:	f7ff f8a0 	bl	8007614 <xTaskCreateStatic>
 80084d4:	4603      	mov	r3, r0
 80084d6:	4a10      	ldr	r2, [pc, #64]	; (8008518 <xTimerCreateTimerTask+0x8c>)
 80084d8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80084da:	4b0f      	ldr	r3, [pc, #60]	; (8008518 <xTimerCreateTimerTask+0x8c>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d001      	beq.n	80084e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80084e2:	2301      	movs	r3, #1
 80084e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d10a      	bne.n	8008502 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80084ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f0:	f383 8811 	msr	BASEPRI, r3
 80084f4:	f3bf 8f6f 	isb	sy
 80084f8:	f3bf 8f4f 	dsb	sy
 80084fc:	613b      	str	r3, [r7, #16]
}
 80084fe:	bf00      	nop
 8008500:	e7fe      	b.n	8008500 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008502:	697b      	ldr	r3, [r7, #20]
}
 8008504:	4618      	mov	r0, r3
 8008506:	3718      	adds	r7, #24
 8008508:	46bd      	mov	sp, r7
 800850a:	bd80      	pop	{r7, pc}
 800850c:	20000d6c 	.word	0x20000d6c
 8008510:	0800a8fc 	.word	0x0800a8fc
 8008514:	08008651 	.word	0x08008651
 8008518:	20000d70 	.word	0x20000d70

0800851c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b08a      	sub	sp, #40	; 0x28
 8008520:	af00      	add	r7, sp, #0
 8008522:	60f8      	str	r0, [r7, #12]
 8008524:	60b9      	str	r1, [r7, #8]
 8008526:	607a      	str	r2, [r7, #4]
 8008528:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800852a:	2300      	movs	r3, #0
 800852c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d10a      	bne.n	800854a <xTimerGenericCommand+0x2e>
	__asm volatile
 8008534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008538:	f383 8811 	msr	BASEPRI, r3
 800853c:	f3bf 8f6f 	isb	sy
 8008540:	f3bf 8f4f 	dsb	sy
 8008544:	623b      	str	r3, [r7, #32]
}
 8008546:	bf00      	nop
 8008548:	e7fe      	b.n	8008548 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800854a:	4b1a      	ldr	r3, [pc, #104]	; (80085b4 <xTimerGenericCommand+0x98>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d02a      	beq.n	80085a8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	2b05      	cmp	r3, #5
 8008562:	dc18      	bgt.n	8008596 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008564:	f7ff fe88 	bl	8008278 <xTaskGetSchedulerState>
 8008568:	4603      	mov	r3, r0
 800856a:	2b02      	cmp	r3, #2
 800856c:	d109      	bne.n	8008582 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800856e:	4b11      	ldr	r3, [pc, #68]	; (80085b4 <xTimerGenericCommand+0x98>)
 8008570:	6818      	ldr	r0, [r3, #0]
 8008572:	f107 0114 	add.w	r1, r7, #20
 8008576:	2300      	movs	r3, #0
 8008578:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800857a:	f7fe fc69 	bl	8006e50 <xQueueGenericSend>
 800857e:	6278      	str	r0, [r7, #36]	; 0x24
 8008580:	e012      	b.n	80085a8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008582:	4b0c      	ldr	r3, [pc, #48]	; (80085b4 <xTimerGenericCommand+0x98>)
 8008584:	6818      	ldr	r0, [r3, #0]
 8008586:	f107 0114 	add.w	r1, r7, #20
 800858a:	2300      	movs	r3, #0
 800858c:	2200      	movs	r2, #0
 800858e:	f7fe fc5f 	bl	8006e50 <xQueueGenericSend>
 8008592:	6278      	str	r0, [r7, #36]	; 0x24
 8008594:	e008      	b.n	80085a8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008596:	4b07      	ldr	r3, [pc, #28]	; (80085b4 <xTimerGenericCommand+0x98>)
 8008598:	6818      	ldr	r0, [r3, #0]
 800859a:	f107 0114 	add.w	r1, r7, #20
 800859e:	2300      	movs	r3, #0
 80085a0:	683a      	ldr	r2, [r7, #0]
 80085a2:	f7fe fd53 	bl	800704c <xQueueGenericSendFromISR>
 80085a6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80085a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3728      	adds	r7, #40	; 0x28
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}
 80085b2:	bf00      	nop
 80085b4:	20000d6c 	.word	0x20000d6c

080085b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b088      	sub	sp, #32
 80085bc:	af02      	add	r7, sp, #8
 80085be:	6078      	str	r0, [r7, #4]
 80085c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085c2:	4b22      	ldr	r3, [pc, #136]	; (800864c <prvProcessExpiredTimer+0x94>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	68db      	ldr	r3, [r3, #12]
 80085c8:	68db      	ldr	r3, [r3, #12]
 80085ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	3304      	adds	r3, #4
 80085d0:	4618      	mov	r0, r3
 80085d2:	f7fe fa87 	bl	8006ae4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80085dc:	f003 0304 	and.w	r3, r3, #4
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d022      	beq.n	800862a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	699a      	ldr	r2, [r3, #24]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	18d1      	adds	r1, r2, r3
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	683a      	ldr	r2, [r7, #0]
 80085f0:	6978      	ldr	r0, [r7, #20]
 80085f2:	f000 f8cf 	bl	8008794 <prvInsertTimerInActiveList>
 80085f6:	4603      	mov	r3, r0
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d01f      	beq.n	800863c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80085fc:	2300      	movs	r3, #0
 80085fe:	9300      	str	r3, [sp, #0]
 8008600:	2300      	movs	r3, #0
 8008602:	687a      	ldr	r2, [r7, #4]
 8008604:	2100      	movs	r1, #0
 8008606:	6978      	ldr	r0, [r7, #20]
 8008608:	f7ff ff88 	bl	800851c <xTimerGenericCommand>
 800860c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d113      	bne.n	800863c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008618:	f383 8811 	msr	BASEPRI, r3
 800861c:	f3bf 8f6f 	isb	sy
 8008620:	f3bf 8f4f 	dsb	sy
 8008624:	60fb      	str	r3, [r7, #12]
}
 8008626:	bf00      	nop
 8008628:	e7fe      	b.n	8008628 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008630:	f023 0301 	bic.w	r3, r3, #1
 8008634:	b2da      	uxtb	r2, r3
 8008636:	697b      	ldr	r3, [r7, #20]
 8008638:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800863c:	697b      	ldr	r3, [r7, #20]
 800863e:	6a1b      	ldr	r3, [r3, #32]
 8008640:	6978      	ldr	r0, [r7, #20]
 8008642:	4798      	blx	r3
}
 8008644:	bf00      	nop
 8008646:	3718      	adds	r7, #24
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}
 800864c:	20000d64 	.word	0x20000d64

08008650 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b084      	sub	sp, #16
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008658:	f107 0308 	add.w	r3, r7, #8
 800865c:	4618      	mov	r0, r3
 800865e:	f000 f857 	bl	8008710 <prvGetNextExpireTime>
 8008662:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	4619      	mov	r1, r3
 8008668:	68f8      	ldr	r0, [r7, #12]
 800866a:	f000 f803 	bl	8008674 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800866e:	f000 f8d3 	bl	8008818 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008672:	e7f1      	b.n	8008658 <prvTimerTask+0x8>

08008674 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b084      	sub	sp, #16
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800867e:	f7ff fa17 	bl	8007ab0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008682:	f107 0308 	add.w	r3, r7, #8
 8008686:	4618      	mov	r0, r3
 8008688:	f000 f864 	bl	8008754 <prvSampleTimeNow>
 800868c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d130      	bne.n	80086f6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d10a      	bne.n	80086b0 <prvProcessTimerOrBlockTask+0x3c>
 800869a:	687a      	ldr	r2, [r7, #4]
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	429a      	cmp	r2, r3
 80086a0:	d806      	bhi.n	80086b0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80086a2:	f7ff fa13 	bl	8007acc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80086a6:	68f9      	ldr	r1, [r7, #12]
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f7ff ff85 	bl	80085b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80086ae:	e024      	b.n	80086fa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d008      	beq.n	80086c8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80086b6:	4b13      	ldr	r3, [pc, #76]	; (8008704 <prvProcessTimerOrBlockTask+0x90>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d101      	bne.n	80086c4 <prvProcessTimerOrBlockTask+0x50>
 80086c0:	2301      	movs	r3, #1
 80086c2:	e000      	b.n	80086c6 <prvProcessTimerOrBlockTask+0x52>
 80086c4:	2300      	movs	r3, #0
 80086c6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80086c8:	4b0f      	ldr	r3, [pc, #60]	; (8008708 <prvProcessTimerOrBlockTask+0x94>)
 80086ca:	6818      	ldr	r0, [r3, #0]
 80086cc:	687a      	ldr	r2, [r7, #4]
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	1ad3      	subs	r3, r2, r3
 80086d2:	683a      	ldr	r2, [r7, #0]
 80086d4:	4619      	mov	r1, r3
 80086d6:	f7fe ff69 	bl	80075ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80086da:	f7ff f9f7 	bl	8007acc <xTaskResumeAll>
 80086de:	4603      	mov	r3, r0
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d10a      	bne.n	80086fa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80086e4:	4b09      	ldr	r3, [pc, #36]	; (800870c <prvProcessTimerOrBlockTask+0x98>)
 80086e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086ea:	601a      	str	r2, [r3, #0]
 80086ec:	f3bf 8f4f 	dsb	sy
 80086f0:	f3bf 8f6f 	isb	sy
}
 80086f4:	e001      	b.n	80086fa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80086f6:	f7ff f9e9 	bl	8007acc <xTaskResumeAll>
}
 80086fa:	bf00      	nop
 80086fc:	3710      	adds	r7, #16
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}
 8008702:	bf00      	nop
 8008704:	20000d68 	.word	0x20000d68
 8008708:	20000d6c 	.word	0x20000d6c
 800870c:	e000ed04 	.word	0xe000ed04

08008710 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008710:	b480      	push	{r7}
 8008712:	b085      	sub	sp, #20
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008718:	4b0d      	ldr	r3, [pc, #52]	; (8008750 <prvGetNextExpireTime+0x40>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d101      	bne.n	8008726 <prvGetNextExpireTime+0x16>
 8008722:	2201      	movs	r2, #1
 8008724:	e000      	b.n	8008728 <prvGetNextExpireTime+0x18>
 8008726:	2200      	movs	r2, #0
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d105      	bne.n	8008740 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008734:	4b06      	ldr	r3, [pc, #24]	; (8008750 <prvGetNextExpireTime+0x40>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	68db      	ldr	r3, [r3, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	60fb      	str	r3, [r7, #12]
 800873e:	e001      	b.n	8008744 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008740:	2300      	movs	r3, #0
 8008742:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008744:	68fb      	ldr	r3, [r7, #12]
}
 8008746:	4618      	mov	r0, r3
 8008748:	3714      	adds	r7, #20
 800874a:	46bd      	mov	sp, r7
 800874c:	bc80      	pop	{r7}
 800874e:	4770      	bx	lr
 8008750:	20000d64 	.word	0x20000d64

08008754 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b084      	sub	sp, #16
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800875c:	f7ff fa52 	bl	8007c04 <xTaskGetTickCount>
 8008760:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008762:	4b0b      	ldr	r3, [pc, #44]	; (8008790 <prvSampleTimeNow+0x3c>)
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	68fa      	ldr	r2, [r7, #12]
 8008768:	429a      	cmp	r2, r3
 800876a:	d205      	bcs.n	8008778 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800876c:	f000 f91a 	bl	80089a4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2201      	movs	r2, #1
 8008774:	601a      	str	r2, [r3, #0]
 8008776:	e002      	b.n	800877e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2200      	movs	r2, #0
 800877c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800877e:	4a04      	ldr	r2, [pc, #16]	; (8008790 <prvSampleTimeNow+0x3c>)
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008784:	68fb      	ldr	r3, [r7, #12]
}
 8008786:	4618      	mov	r0, r3
 8008788:	3710      	adds	r7, #16
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}
 800878e:	bf00      	nop
 8008790:	20000d74 	.word	0x20000d74

08008794 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b086      	sub	sp, #24
 8008798:	af00      	add	r7, sp, #0
 800879a:	60f8      	str	r0, [r7, #12]
 800879c:	60b9      	str	r1, [r7, #8]
 800879e:	607a      	str	r2, [r7, #4]
 80087a0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80087a2:	2300      	movs	r3, #0
 80087a4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	68ba      	ldr	r2, [r7, #8]
 80087aa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	68fa      	ldr	r2, [r7, #12]
 80087b0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80087b2:	68ba      	ldr	r2, [r7, #8]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	429a      	cmp	r2, r3
 80087b8:	d812      	bhi.n	80087e0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087ba:	687a      	ldr	r2, [r7, #4]
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	1ad2      	subs	r2, r2, r3
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	699b      	ldr	r3, [r3, #24]
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d302      	bcc.n	80087ce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80087c8:	2301      	movs	r3, #1
 80087ca:	617b      	str	r3, [r7, #20]
 80087cc:	e01b      	b.n	8008806 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80087ce:	4b10      	ldr	r3, [pc, #64]	; (8008810 <prvInsertTimerInActiveList+0x7c>)
 80087d0:	681a      	ldr	r2, [r3, #0]
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	3304      	adds	r3, #4
 80087d6:	4619      	mov	r1, r3
 80087d8:	4610      	mov	r0, r2
 80087da:	f7fe f94b 	bl	8006a74 <vListInsert>
 80087de:	e012      	b.n	8008806 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d206      	bcs.n	80087f6 <prvInsertTimerInActiveList+0x62>
 80087e8:	68ba      	ldr	r2, [r7, #8]
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d302      	bcc.n	80087f6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80087f0:	2301      	movs	r3, #1
 80087f2:	617b      	str	r3, [r7, #20]
 80087f4:	e007      	b.n	8008806 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80087f6:	4b07      	ldr	r3, [pc, #28]	; (8008814 <prvInsertTimerInActiveList+0x80>)
 80087f8:	681a      	ldr	r2, [r3, #0]
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	3304      	adds	r3, #4
 80087fe:	4619      	mov	r1, r3
 8008800:	4610      	mov	r0, r2
 8008802:	f7fe f937 	bl	8006a74 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008806:	697b      	ldr	r3, [r7, #20]
}
 8008808:	4618      	mov	r0, r3
 800880a:	3718      	adds	r7, #24
 800880c:	46bd      	mov	sp, r7
 800880e:	bd80      	pop	{r7, pc}
 8008810:	20000d68 	.word	0x20000d68
 8008814:	20000d64 	.word	0x20000d64

08008818 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b08c      	sub	sp, #48	; 0x30
 800881c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800881e:	e0ae      	b.n	800897e <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	2b00      	cmp	r3, #0
 8008824:	f2c0 80aa 	blt.w	800897c <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800882c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800882e:	695b      	ldr	r3, [r3, #20]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d004      	beq.n	800883e <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008836:	3304      	adds	r3, #4
 8008838:	4618      	mov	r0, r3
 800883a:	f7fe f953 	bl	8006ae4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800883e:	1d3b      	adds	r3, r7, #4
 8008840:	4618      	mov	r0, r3
 8008842:	f7ff ff87 	bl	8008754 <prvSampleTimeNow>
 8008846:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	2b09      	cmp	r3, #9
 800884c:	f200 8097 	bhi.w	800897e <prvProcessReceivedCommands+0x166>
 8008850:	a201      	add	r2, pc, #4	; (adr r2, 8008858 <prvProcessReceivedCommands+0x40>)
 8008852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008856:	bf00      	nop
 8008858:	08008881 	.word	0x08008881
 800885c:	08008881 	.word	0x08008881
 8008860:	08008881 	.word	0x08008881
 8008864:	080088f5 	.word	0x080088f5
 8008868:	08008909 	.word	0x08008909
 800886c:	08008953 	.word	0x08008953
 8008870:	08008881 	.word	0x08008881
 8008874:	08008881 	.word	0x08008881
 8008878:	080088f5 	.word	0x080088f5
 800887c:	08008909 	.word	0x08008909
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008882:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008886:	f043 0301 	orr.w	r3, r3, #1
 800888a:	b2da      	uxtb	r2, r3
 800888c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800888e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008892:	68fa      	ldr	r2, [r7, #12]
 8008894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008896:	699b      	ldr	r3, [r3, #24]
 8008898:	18d1      	adds	r1, r2, r3
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	6a3a      	ldr	r2, [r7, #32]
 800889e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80088a0:	f7ff ff78 	bl	8008794 <prvInsertTimerInActiveList>
 80088a4:	4603      	mov	r3, r0
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d069      	beq.n	800897e <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80088aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ac:	6a1b      	ldr	r3, [r3, #32]
 80088ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80088b0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80088b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80088b8:	f003 0304 	and.w	r3, r3, #4
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d05e      	beq.n	800897e <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80088c0:	68fa      	ldr	r2, [r7, #12]
 80088c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c4:	699b      	ldr	r3, [r3, #24]
 80088c6:	441a      	add	r2, r3
 80088c8:	2300      	movs	r3, #0
 80088ca:	9300      	str	r3, [sp, #0]
 80088cc:	2300      	movs	r3, #0
 80088ce:	2100      	movs	r1, #0
 80088d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80088d2:	f7ff fe23 	bl	800851c <xTimerGenericCommand>
 80088d6:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80088d8:	69fb      	ldr	r3, [r7, #28]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d14f      	bne.n	800897e <prvProcessReceivedCommands+0x166>
	__asm volatile
 80088de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e2:	f383 8811 	msr	BASEPRI, r3
 80088e6:	f3bf 8f6f 	isb	sy
 80088ea:	f3bf 8f4f 	dsb	sy
 80088ee:	61bb      	str	r3, [r7, #24]
}
 80088f0:	bf00      	nop
 80088f2:	e7fe      	b.n	80088f2 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80088f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80088fa:	f023 0301 	bic.w	r3, r3, #1
 80088fe:	b2da      	uxtb	r2, r3
 8008900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008902:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8008906:	e03a      	b.n	800897e <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800890a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800890e:	f043 0301 	orr.w	r3, r3, #1
 8008912:	b2da      	uxtb	r2, r3
 8008914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008916:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800891a:	68fa      	ldr	r2, [r7, #12]
 800891c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800891e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008922:	699b      	ldr	r3, [r3, #24]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d10a      	bne.n	800893e <prvProcessReceivedCommands+0x126>
	__asm volatile
 8008928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800892c:	f383 8811 	msr	BASEPRI, r3
 8008930:	f3bf 8f6f 	isb	sy
 8008934:	f3bf 8f4f 	dsb	sy
 8008938:	617b      	str	r3, [r7, #20]
}
 800893a:	bf00      	nop
 800893c:	e7fe      	b.n	800893c <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800893e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008940:	699a      	ldr	r2, [r3, #24]
 8008942:	6a3b      	ldr	r3, [r7, #32]
 8008944:	18d1      	adds	r1, r2, r3
 8008946:	6a3b      	ldr	r3, [r7, #32]
 8008948:	6a3a      	ldr	r2, [r7, #32]
 800894a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800894c:	f7ff ff22 	bl	8008794 <prvInsertTimerInActiveList>
					break;
 8008950:	e015      	b.n	800897e <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008954:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008958:	f003 0302 	and.w	r3, r3, #2
 800895c:	2b00      	cmp	r3, #0
 800895e:	d103      	bne.n	8008968 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8008960:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008962:	f000 fb77 	bl	8009054 <vPortFree>
 8008966:	e00a      	b.n	800897e <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800896a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800896e:	f023 0301 	bic.w	r3, r3, #1
 8008972:	b2da      	uxtb	r2, r3
 8008974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008976:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800897a:	e000      	b.n	800897e <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800897c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800897e:	4b08      	ldr	r3, [pc, #32]	; (80089a0 <prvProcessReceivedCommands+0x188>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f107 0108 	add.w	r1, r7, #8
 8008986:	2200      	movs	r2, #0
 8008988:	4618      	mov	r0, r3
 800898a:	f7fe fbf7 	bl	800717c <xQueueReceive>
 800898e:	4603      	mov	r3, r0
 8008990:	2b00      	cmp	r3, #0
 8008992:	f47f af45 	bne.w	8008820 <prvProcessReceivedCommands+0x8>
	}
}
 8008996:	bf00      	nop
 8008998:	bf00      	nop
 800899a:	3728      	adds	r7, #40	; 0x28
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}
 80089a0:	20000d6c 	.word	0x20000d6c

080089a4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b088      	sub	sp, #32
 80089a8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80089aa:	e048      	b.n	8008a3e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80089ac:	4b2d      	ldr	r3, [pc, #180]	; (8008a64 <prvSwitchTimerLists+0xc0>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	68db      	ldr	r3, [r3, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089b6:	4b2b      	ldr	r3, [pc, #172]	; (8008a64 <prvSwitchTimerLists+0xc0>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	68db      	ldr	r3, [r3, #12]
 80089bc:	68db      	ldr	r3, [r3, #12]
 80089be:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	3304      	adds	r3, #4
 80089c4:	4618      	mov	r0, r3
 80089c6:	f7fe f88d 	bl	8006ae4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	6a1b      	ldr	r3, [r3, #32]
 80089ce:	68f8      	ldr	r0, [r7, #12]
 80089d0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80089d8:	f003 0304 	and.w	r3, r3, #4
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d02e      	beq.n	8008a3e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	699b      	ldr	r3, [r3, #24]
 80089e4:	693a      	ldr	r2, [r7, #16]
 80089e6:	4413      	add	r3, r2
 80089e8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80089ea:	68ba      	ldr	r2, [r7, #8]
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	429a      	cmp	r2, r3
 80089f0:	d90e      	bls.n	8008a10 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	68ba      	ldr	r2, [r7, #8]
 80089f6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	68fa      	ldr	r2, [r7, #12]
 80089fc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80089fe:	4b19      	ldr	r3, [pc, #100]	; (8008a64 <prvSwitchTimerLists+0xc0>)
 8008a00:	681a      	ldr	r2, [r3, #0]
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	3304      	adds	r3, #4
 8008a06:	4619      	mov	r1, r3
 8008a08:	4610      	mov	r0, r2
 8008a0a:	f7fe f833 	bl	8006a74 <vListInsert>
 8008a0e:	e016      	b.n	8008a3e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008a10:	2300      	movs	r3, #0
 8008a12:	9300      	str	r3, [sp, #0]
 8008a14:	2300      	movs	r3, #0
 8008a16:	693a      	ldr	r2, [r7, #16]
 8008a18:	2100      	movs	r1, #0
 8008a1a:	68f8      	ldr	r0, [r7, #12]
 8008a1c:	f7ff fd7e 	bl	800851c <xTimerGenericCommand>
 8008a20:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d10a      	bne.n	8008a3e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a2c:	f383 8811 	msr	BASEPRI, r3
 8008a30:	f3bf 8f6f 	isb	sy
 8008a34:	f3bf 8f4f 	dsb	sy
 8008a38:	603b      	str	r3, [r7, #0]
}
 8008a3a:	bf00      	nop
 8008a3c:	e7fe      	b.n	8008a3c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008a3e:	4b09      	ldr	r3, [pc, #36]	; (8008a64 <prvSwitchTimerLists+0xc0>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d1b1      	bne.n	80089ac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008a48:	4b06      	ldr	r3, [pc, #24]	; (8008a64 <prvSwitchTimerLists+0xc0>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008a4e:	4b06      	ldr	r3, [pc, #24]	; (8008a68 <prvSwitchTimerLists+0xc4>)
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	4a04      	ldr	r2, [pc, #16]	; (8008a64 <prvSwitchTimerLists+0xc0>)
 8008a54:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008a56:	4a04      	ldr	r2, [pc, #16]	; (8008a68 <prvSwitchTimerLists+0xc4>)
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	6013      	str	r3, [r2, #0]
}
 8008a5c:	bf00      	nop
 8008a5e:	3718      	adds	r7, #24
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}
 8008a64:	20000d64 	.word	0x20000d64
 8008a68:	20000d68 	.word	0x20000d68

08008a6c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b082      	sub	sp, #8
 8008a70:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008a72:	f000 f92b 	bl	8008ccc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008a76:	4b15      	ldr	r3, [pc, #84]	; (8008acc <prvCheckForValidListAndQueue+0x60>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d120      	bne.n	8008ac0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008a7e:	4814      	ldr	r0, [pc, #80]	; (8008ad0 <prvCheckForValidListAndQueue+0x64>)
 8008a80:	f7fd ffaa 	bl	80069d8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008a84:	4813      	ldr	r0, [pc, #76]	; (8008ad4 <prvCheckForValidListAndQueue+0x68>)
 8008a86:	f7fd ffa7 	bl	80069d8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008a8a:	4b13      	ldr	r3, [pc, #76]	; (8008ad8 <prvCheckForValidListAndQueue+0x6c>)
 8008a8c:	4a10      	ldr	r2, [pc, #64]	; (8008ad0 <prvCheckForValidListAndQueue+0x64>)
 8008a8e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008a90:	4b12      	ldr	r3, [pc, #72]	; (8008adc <prvCheckForValidListAndQueue+0x70>)
 8008a92:	4a10      	ldr	r2, [pc, #64]	; (8008ad4 <prvCheckForValidListAndQueue+0x68>)
 8008a94:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008a96:	2300      	movs	r3, #0
 8008a98:	9300      	str	r3, [sp, #0]
 8008a9a:	4b11      	ldr	r3, [pc, #68]	; (8008ae0 <prvCheckForValidListAndQueue+0x74>)
 8008a9c:	4a11      	ldr	r2, [pc, #68]	; (8008ae4 <prvCheckForValidListAndQueue+0x78>)
 8008a9e:	210c      	movs	r1, #12
 8008aa0:	200a      	movs	r0, #10
 8008aa2:	f7fe f8b1 	bl	8006c08 <xQueueGenericCreateStatic>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	4a08      	ldr	r2, [pc, #32]	; (8008acc <prvCheckForValidListAndQueue+0x60>)
 8008aaa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008aac:	4b07      	ldr	r3, [pc, #28]	; (8008acc <prvCheckForValidListAndQueue+0x60>)
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d005      	beq.n	8008ac0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008ab4:	4b05      	ldr	r3, [pc, #20]	; (8008acc <prvCheckForValidListAndQueue+0x60>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	490b      	ldr	r1, [pc, #44]	; (8008ae8 <prvCheckForValidListAndQueue+0x7c>)
 8008aba:	4618      	mov	r0, r3
 8008abc:	f7fe fd4e 	bl	800755c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008ac0:	f000 f934 	bl	8008d2c <vPortExitCritical>
}
 8008ac4:	bf00      	nop
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}
 8008aca:	bf00      	nop
 8008acc:	20000d6c 	.word	0x20000d6c
 8008ad0:	20000d3c 	.word	0x20000d3c
 8008ad4:	20000d50 	.word	0x20000d50
 8008ad8:	20000d64 	.word	0x20000d64
 8008adc:	20000d68 	.word	0x20000d68
 8008ae0:	20000df0 	.word	0x20000df0
 8008ae4:	20000d78 	.word	0x20000d78
 8008ae8:	0800a904 	.word	0x0800a904

08008aec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008aec:	b480      	push	{r7}
 8008aee:	b085      	sub	sp, #20
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	60f8      	str	r0, [r7, #12]
 8008af4:	60b9      	str	r1, [r7, #8]
 8008af6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	3b04      	subs	r3, #4
 8008afc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008b04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	3b04      	subs	r3, #4
 8008b0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	f023 0201 	bic.w	r2, r3, #1
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	3b04      	subs	r3, #4
 8008b1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008b1c:	4a08      	ldr	r2, [pc, #32]	; (8008b40 <pxPortInitialiseStack+0x54>)
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	3b14      	subs	r3, #20
 8008b26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008b28:	687a      	ldr	r2, [r7, #4]
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	3b20      	subs	r3, #32
 8008b32:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008b34:	68fb      	ldr	r3, [r7, #12]
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3714      	adds	r7, #20
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	bc80      	pop	{r7}
 8008b3e:	4770      	bx	lr
 8008b40:	08008b45 	.word	0x08008b45

08008b44 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008b44:	b480      	push	{r7}
 8008b46:	b085      	sub	sp, #20
 8008b48:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008b4e:	4b12      	ldr	r3, [pc, #72]	; (8008b98 <prvTaskExitError+0x54>)
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b56:	d00a      	beq.n	8008b6e <prvTaskExitError+0x2a>
	__asm volatile
 8008b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b5c:	f383 8811 	msr	BASEPRI, r3
 8008b60:	f3bf 8f6f 	isb	sy
 8008b64:	f3bf 8f4f 	dsb	sy
 8008b68:	60fb      	str	r3, [r7, #12]
}
 8008b6a:	bf00      	nop
 8008b6c:	e7fe      	b.n	8008b6c <prvTaskExitError+0x28>
	__asm volatile
 8008b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b72:	f383 8811 	msr	BASEPRI, r3
 8008b76:	f3bf 8f6f 	isb	sy
 8008b7a:	f3bf 8f4f 	dsb	sy
 8008b7e:	60bb      	str	r3, [r7, #8]
}
 8008b80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008b82:	bf00      	nop
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d0fc      	beq.n	8008b84 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008b8a:	bf00      	nop
 8008b8c:	bf00      	nop
 8008b8e:	3714      	adds	r7, #20
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bc80      	pop	{r7}
 8008b94:	4770      	bx	lr
 8008b96:	bf00      	nop
 8008b98:	2000000c 	.word	0x2000000c
 8008b9c:	00000000 	.word	0x00000000

08008ba0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008ba0:	4b07      	ldr	r3, [pc, #28]	; (8008bc0 <pxCurrentTCBConst2>)
 8008ba2:	6819      	ldr	r1, [r3, #0]
 8008ba4:	6808      	ldr	r0, [r1, #0]
 8008ba6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008baa:	f380 8809 	msr	PSP, r0
 8008bae:	f3bf 8f6f 	isb	sy
 8008bb2:	f04f 0000 	mov.w	r0, #0
 8008bb6:	f380 8811 	msr	BASEPRI, r0
 8008bba:	f04e 0e0d 	orr.w	lr, lr, #13
 8008bbe:	4770      	bx	lr

08008bc0 <pxCurrentTCBConst2>:
 8008bc0:	20000c10 	.word	0x20000c10
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008bc4:	bf00      	nop
 8008bc6:	bf00      	nop

08008bc8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008bc8:	4806      	ldr	r0, [pc, #24]	; (8008be4 <prvPortStartFirstTask+0x1c>)
 8008bca:	6800      	ldr	r0, [r0, #0]
 8008bcc:	6800      	ldr	r0, [r0, #0]
 8008bce:	f380 8808 	msr	MSP, r0
 8008bd2:	b662      	cpsie	i
 8008bd4:	b661      	cpsie	f
 8008bd6:	f3bf 8f4f 	dsb	sy
 8008bda:	f3bf 8f6f 	isb	sy
 8008bde:	df00      	svc	0
 8008be0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008be2:	bf00      	nop
 8008be4:	e000ed08 	.word	0xe000ed08

08008be8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b084      	sub	sp, #16
 8008bec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008bee:	4b32      	ldr	r3, [pc, #200]	; (8008cb8 <xPortStartScheduler+0xd0>)
 8008bf0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	781b      	ldrb	r3, [r3, #0]
 8008bf6:	b2db      	uxtb	r3, r3
 8008bf8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	22ff      	movs	r2, #255	; 0xff
 8008bfe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	781b      	ldrb	r3, [r3, #0]
 8008c04:	b2db      	uxtb	r3, r3
 8008c06:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008c08:	78fb      	ldrb	r3, [r7, #3]
 8008c0a:	b2db      	uxtb	r3, r3
 8008c0c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008c10:	b2da      	uxtb	r2, r3
 8008c12:	4b2a      	ldr	r3, [pc, #168]	; (8008cbc <xPortStartScheduler+0xd4>)
 8008c14:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008c16:	4b2a      	ldr	r3, [pc, #168]	; (8008cc0 <xPortStartScheduler+0xd8>)
 8008c18:	2207      	movs	r2, #7
 8008c1a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008c1c:	e009      	b.n	8008c32 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008c1e:	4b28      	ldr	r3, [pc, #160]	; (8008cc0 <xPortStartScheduler+0xd8>)
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	3b01      	subs	r3, #1
 8008c24:	4a26      	ldr	r2, [pc, #152]	; (8008cc0 <xPortStartScheduler+0xd8>)
 8008c26:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008c28:	78fb      	ldrb	r3, [r7, #3]
 8008c2a:	b2db      	uxtb	r3, r3
 8008c2c:	005b      	lsls	r3, r3, #1
 8008c2e:	b2db      	uxtb	r3, r3
 8008c30:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008c32:	78fb      	ldrb	r3, [r7, #3]
 8008c34:	b2db      	uxtb	r3, r3
 8008c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c3a:	2b80      	cmp	r3, #128	; 0x80
 8008c3c:	d0ef      	beq.n	8008c1e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008c3e:	4b20      	ldr	r3, [pc, #128]	; (8008cc0 <xPortStartScheduler+0xd8>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f1c3 0307 	rsb	r3, r3, #7
 8008c46:	2b04      	cmp	r3, #4
 8008c48:	d00a      	beq.n	8008c60 <xPortStartScheduler+0x78>
	__asm volatile
 8008c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c4e:	f383 8811 	msr	BASEPRI, r3
 8008c52:	f3bf 8f6f 	isb	sy
 8008c56:	f3bf 8f4f 	dsb	sy
 8008c5a:	60bb      	str	r3, [r7, #8]
}
 8008c5c:	bf00      	nop
 8008c5e:	e7fe      	b.n	8008c5e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008c60:	4b17      	ldr	r3, [pc, #92]	; (8008cc0 <xPortStartScheduler+0xd8>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	021b      	lsls	r3, r3, #8
 8008c66:	4a16      	ldr	r2, [pc, #88]	; (8008cc0 <xPortStartScheduler+0xd8>)
 8008c68:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008c6a:	4b15      	ldr	r3, [pc, #84]	; (8008cc0 <xPortStartScheduler+0xd8>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008c72:	4a13      	ldr	r2, [pc, #76]	; (8008cc0 <xPortStartScheduler+0xd8>)
 8008c74:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	b2da      	uxtb	r2, r3
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008c7e:	4b11      	ldr	r3, [pc, #68]	; (8008cc4 <xPortStartScheduler+0xdc>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	4a10      	ldr	r2, [pc, #64]	; (8008cc4 <xPortStartScheduler+0xdc>)
 8008c84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008c88:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008c8a:	4b0e      	ldr	r3, [pc, #56]	; (8008cc4 <xPortStartScheduler+0xdc>)
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	4a0d      	ldr	r2, [pc, #52]	; (8008cc4 <xPortStartScheduler+0xdc>)
 8008c90:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008c94:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008c96:	f000 f8b9 	bl	8008e0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008c9a:	4b0b      	ldr	r3, [pc, #44]	; (8008cc8 <xPortStartScheduler+0xe0>)
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008ca0:	f7ff ff92 	bl	8008bc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008ca4:	f7ff f874 	bl	8007d90 <vTaskSwitchContext>
	prvTaskExitError();
 8008ca8:	f7ff ff4c 	bl	8008b44 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008cac:	2300      	movs	r3, #0
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3710      	adds	r7, #16
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}
 8008cb6:	bf00      	nop
 8008cb8:	e000e400 	.word	0xe000e400
 8008cbc:	20000e38 	.word	0x20000e38
 8008cc0:	20000e3c 	.word	0x20000e3c
 8008cc4:	e000ed20 	.word	0xe000ed20
 8008cc8:	2000000c 	.word	0x2000000c

08008ccc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b083      	sub	sp, #12
 8008cd0:	af00      	add	r7, sp, #0
	__asm volatile
 8008cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd6:	f383 8811 	msr	BASEPRI, r3
 8008cda:	f3bf 8f6f 	isb	sy
 8008cde:	f3bf 8f4f 	dsb	sy
 8008ce2:	607b      	str	r3, [r7, #4]
}
 8008ce4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008ce6:	4b0f      	ldr	r3, [pc, #60]	; (8008d24 <vPortEnterCritical+0x58>)
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	3301      	adds	r3, #1
 8008cec:	4a0d      	ldr	r2, [pc, #52]	; (8008d24 <vPortEnterCritical+0x58>)
 8008cee:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008cf0:	4b0c      	ldr	r3, [pc, #48]	; (8008d24 <vPortEnterCritical+0x58>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	d10f      	bne.n	8008d18 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008cf8:	4b0b      	ldr	r3, [pc, #44]	; (8008d28 <vPortEnterCritical+0x5c>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	b2db      	uxtb	r3, r3
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d00a      	beq.n	8008d18 <vPortEnterCritical+0x4c>
	__asm volatile
 8008d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d06:	f383 8811 	msr	BASEPRI, r3
 8008d0a:	f3bf 8f6f 	isb	sy
 8008d0e:	f3bf 8f4f 	dsb	sy
 8008d12:	603b      	str	r3, [r7, #0]
}
 8008d14:	bf00      	nop
 8008d16:	e7fe      	b.n	8008d16 <vPortEnterCritical+0x4a>
	}
}
 8008d18:	bf00      	nop
 8008d1a:	370c      	adds	r7, #12
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bc80      	pop	{r7}
 8008d20:	4770      	bx	lr
 8008d22:	bf00      	nop
 8008d24:	2000000c 	.word	0x2000000c
 8008d28:	e000ed04 	.word	0xe000ed04

08008d2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b083      	sub	sp, #12
 8008d30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008d32:	4b11      	ldr	r3, [pc, #68]	; (8008d78 <vPortExitCritical+0x4c>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d10a      	bne.n	8008d50 <vPortExitCritical+0x24>
	__asm volatile
 8008d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d3e:	f383 8811 	msr	BASEPRI, r3
 8008d42:	f3bf 8f6f 	isb	sy
 8008d46:	f3bf 8f4f 	dsb	sy
 8008d4a:	607b      	str	r3, [r7, #4]
}
 8008d4c:	bf00      	nop
 8008d4e:	e7fe      	b.n	8008d4e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008d50:	4b09      	ldr	r3, [pc, #36]	; (8008d78 <vPortExitCritical+0x4c>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	3b01      	subs	r3, #1
 8008d56:	4a08      	ldr	r2, [pc, #32]	; (8008d78 <vPortExitCritical+0x4c>)
 8008d58:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008d5a:	4b07      	ldr	r3, [pc, #28]	; (8008d78 <vPortExitCritical+0x4c>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d105      	bne.n	8008d6e <vPortExitCritical+0x42>
 8008d62:	2300      	movs	r3, #0
 8008d64:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	f383 8811 	msr	BASEPRI, r3
}
 8008d6c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008d6e:	bf00      	nop
 8008d70:	370c      	adds	r7, #12
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bc80      	pop	{r7}
 8008d76:	4770      	bx	lr
 8008d78:	2000000c 	.word	0x2000000c
 8008d7c:	00000000 	.word	0x00000000

08008d80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008d80:	f3ef 8009 	mrs	r0, PSP
 8008d84:	f3bf 8f6f 	isb	sy
 8008d88:	4b0d      	ldr	r3, [pc, #52]	; (8008dc0 <pxCurrentTCBConst>)
 8008d8a:	681a      	ldr	r2, [r3, #0]
 8008d8c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008d90:	6010      	str	r0, [r2, #0]
 8008d92:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008d96:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008d9a:	f380 8811 	msr	BASEPRI, r0
 8008d9e:	f7fe fff7 	bl	8007d90 <vTaskSwitchContext>
 8008da2:	f04f 0000 	mov.w	r0, #0
 8008da6:	f380 8811 	msr	BASEPRI, r0
 8008daa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008dae:	6819      	ldr	r1, [r3, #0]
 8008db0:	6808      	ldr	r0, [r1, #0]
 8008db2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008db6:	f380 8809 	msr	PSP, r0
 8008dba:	f3bf 8f6f 	isb	sy
 8008dbe:	4770      	bx	lr

08008dc0 <pxCurrentTCBConst>:
 8008dc0:	20000c10 	.word	0x20000c10
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008dc4:	bf00      	nop
 8008dc6:	bf00      	nop

08008dc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b082      	sub	sp, #8
 8008dcc:	af00      	add	r7, sp, #0
	__asm volatile
 8008dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd2:	f383 8811 	msr	BASEPRI, r3
 8008dd6:	f3bf 8f6f 	isb	sy
 8008dda:	f3bf 8f4f 	dsb	sy
 8008dde:	607b      	str	r3, [r7, #4]
}
 8008de0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008de2:	f7fe ff1d 	bl	8007c20 <xTaskIncrementTick>
 8008de6:	4603      	mov	r3, r0
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d003      	beq.n	8008df4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008dec:	4b06      	ldr	r3, [pc, #24]	; (8008e08 <SysTick_Handler+0x40>)
 8008dee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008df2:	601a      	str	r2, [r3, #0]
 8008df4:	2300      	movs	r3, #0
 8008df6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	f383 8811 	msr	BASEPRI, r3
}
 8008dfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008e00:	bf00      	nop
 8008e02:	3708      	adds	r7, #8
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}
 8008e08:	e000ed04 	.word	0xe000ed04

08008e0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008e10:	4b0a      	ldr	r3, [pc, #40]	; (8008e3c <vPortSetupTimerInterrupt+0x30>)
 8008e12:	2200      	movs	r2, #0
 8008e14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008e16:	4b0a      	ldr	r3, [pc, #40]	; (8008e40 <vPortSetupTimerInterrupt+0x34>)
 8008e18:	2200      	movs	r2, #0
 8008e1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008e1c:	4b09      	ldr	r3, [pc, #36]	; (8008e44 <vPortSetupTimerInterrupt+0x38>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	4a09      	ldr	r2, [pc, #36]	; (8008e48 <vPortSetupTimerInterrupt+0x3c>)
 8008e22:	fba2 2303 	umull	r2, r3, r2, r3
 8008e26:	099b      	lsrs	r3, r3, #6
 8008e28:	4a08      	ldr	r2, [pc, #32]	; (8008e4c <vPortSetupTimerInterrupt+0x40>)
 8008e2a:	3b01      	subs	r3, #1
 8008e2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008e2e:	4b03      	ldr	r3, [pc, #12]	; (8008e3c <vPortSetupTimerInterrupt+0x30>)
 8008e30:	2207      	movs	r2, #7
 8008e32:	601a      	str	r2, [r3, #0]
}
 8008e34:	bf00      	nop
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bc80      	pop	{r7}
 8008e3a:	4770      	bx	lr
 8008e3c:	e000e010 	.word	0xe000e010
 8008e40:	e000e018 	.word	0xe000e018
 8008e44:	20000000 	.word	0x20000000
 8008e48:	10624dd3 	.word	0x10624dd3
 8008e4c:	e000e014 	.word	0xe000e014

08008e50 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008e50:	b480      	push	{r7}
 8008e52:	b085      	sub	sp, #20
 8008e54:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008e56:	f3ef 8305 	mrs	r3, IPSR
 8008e5a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	2b0f      	cmp	r3, #15
 8008e60:	d914      	bls.n	8008e8c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008e62:	4a16      	ldr	r2, [pc, #88]	; (8008ebc <vPortValidateInterruptPriority+0x6c>)
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	4413      	add	r3, r2
 8008e68:	781b      	ldrb	r3, [r3, #0]
 8008e6a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008e6c:	4b14      	ldr	r3, [pc, #80]	; (8008ec0 <vPortValidateInterruptPriority+0x70>)
 8008e6e:	781b      	ldrb	r3, [r3, #0]
 8008e70:	7afa      	ldrb	r2, [r7, #11]
 8008e72:	429a      	cmp	r2, r3
 8008e74:	d20a      	bcs.n	8008e8c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e7a:	f383 8811 	msr	BASEPRI, r3
 8008e7e:	f3bf 8f6f 	isb	sy
 8008e82:	f3bf 8f4f 	dsb	sy
 8008e86:	607b      	str	r3, [r7, #4]
}
 8008e88:	bf00      	nop
 8008e8a:	e7fe      	b.n	8008e8a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008e8c:	4b0d      	ldr	r3, [pc, #52]	; (8008ec4 <vPortValidateInterruptPriority+0x74>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008e94:	4b0c      	ldr	r3, [pc, #48]	; (8008ec8 <vPortValidateInterruptPriority+0x78>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	d90a      	bls.n	8008eb2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ea0:	f383 8811 	msr	BASEPRI, r3
 8008ea4:	f3bf 8f6f 	isb	sy
 8008ea8:	f3bf 8f4f 	dsb	sy
 8008eac:	603b      	str	r3, [r7, #0]
}
 8008eae:	bf00      	nop
 8008eb0:	e7fe      	b.n	8008eb0 <vPortValidateInterruptPriority+0x60>
	}
 8008eb2:	bf00      	nop
 8008eb4:	3714      	adds	r7, #20
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bc80      	pop	{r7}
 8008eba:	4770      	bx	lr
 8008ebc:	e000e3f0 	.word	0xe000e3f0
 8008ec0:	20000e38 	.word	0x20000e38
 8008ec4:	e000ed0c 	.word	0xe000ed0c
 8008ec8:	20000e3c 	.word	0x20000e3c

08008ecc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b08a      	sub	sp, #40	; 0x28
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008ed8:	f7fe fdea 	bl	8007ab0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008edc:	4b58      	ldr	r3, [pc, #352]	; (8009040 <pvPortMalloc+0x174>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d101      	bne.n	8008ee8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008ee4:	f000 f910 	bl	8009108 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008ee8:	4b56      	ldr	r3, [pc, #344]	; (8009044 <pvPortMalloc+0x178>)
 8008eea:	681a      	ldr	r2, [r3, #0]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	4013      	ands	r3, r2
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	f040 808e 	bne.w	8009012 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d01d      	beq.n	8008f38 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008efc:	2208      	movs	r2, #8
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	4413      	add	r3, r2
 8008f02:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f003 0307 	and.w	r3, r3, #7
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d014      	beq.n	8008f38 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f023 0307 	bic.w	r3, r3, #7
 8008f14:	3308      	adds	r3, #8
 8008f16:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f003 0307 	and.w	r3, r3, #7
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d00a      	beq.n	8008f38 <pvPortMalloc+0x6c>
	__asm volatile
 8008f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f26:	f383 8811 	msr	BASEPRI, r3
 8008f2a:	f3bf 8f6f 	isb	sy
 8008f2e:	f3bf 8f4f 	dsb	sy
 8008f32:	617b      	str	r3, [r7, #20]
}
 8008f34:	bf00      	nop
 8008f36:	e7fe      	b.n	8008f36 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d069      	beq.n	8009012 <pvPortMalloc+0x146>
 8008f3e:	4b42      	ldr	r3, [pc, #264]	; (8009048 <pvPortMalloc+0x17c>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	687a      	ldr	r2, [r7, #4]
 8008f44:	429a      	cmp	r2, r3
 8008f46:	d864      	bhi.n	8009012 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008f48:	4b40      	ldr	r3, [pc, #256]	; (800904c <pvPortMalloc+0x180>)
 8008f4a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008f4c:	4b3f      	ldr	r3, [pc, #252]	; (800904c <pvPortMalloc+0x180>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008f52:	e004      	b.n	8008f5e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f56:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	687a      	ldr	r2, [r7, #4]
 8008f64:	429a      	cmp	r2, r3
 8008f66:	d903      	bls.n	8008f70 <pvPortMalloc+0xa4>
 8008f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d1f1      	bne.n	8008f54 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008f70:	4b33      	ldr	r3, [pc, #204]	; (8009040 <pvPortMalloc+0x174>)
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f76:	429a      	cmp	r2, r3
 8008f78:	d04b      	beq.n	8009012 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008f7a:	6a3b      	ldr	r3, [r7, #32]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	2208      	movs	r2, #8
 8008f80:	4413      	add	r3, r2
 8008f82:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f86:	681a      	ldr	r2, [r3, #0]
 8008f88:	6a3b      	ldr	r3, [r7, #32]
 8008f8a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f8e:	685a      	ldr	r2, [r3, #4]
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	1ad2      	subs	r2, r2, r3
 8008f94:	2308      	movs	r3, #8
 8008f96:	005b      	lsls	r3, r3, #1
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	d91f      	bls.n	8008fdc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008f9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	4413      	add	r3, r2
 8008fa2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008fa4:	69bb      	ldr	r3, [r7, #24]
 8008fa6:	f003 0307 	and.w	r3, r3, #7
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d00a      	beq.n	8008fc4 <pvPortMalloc+0xf8>
	__asm volatile
 8008fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fb2:	f383 8811 	msr	BASEPRI, r3
 8008fb6:	f3bf 8f6f 	isb	sy
 8008fba:	f3bf 8f4f 	dsb	sy
 8008fbe:	613b      	str	r3, [r7, #16]
}
 8008fc0:	bf00      	nop
 8008fc2:	e7fe      	b.n	8008fc2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc6:	685a      	ldr	r2, [r3, #4]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	1ad2      	subs	r2, r2, r3
 8008fcc:	69bb      	ldr	r3, [r7, #24]
 8008fce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fd2:	687a      	ldr	r2, [r7, #4]
 8008fd4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008fd6:	69b8      	ldr	r0, [r7, #24]
 8008fd8:	f000 f8f8 	bl	80091cc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008fdc:	4b1a      	ldr	r3, [pc, #104]	; (8009048 <pvPortMalloc+0x17c>)
 8008fde:	681a      	ldr	r2, [r3, #0]
 8008fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe2:	685b      	ldr	r3, [r3, #4]
 8008fe4:	1ad3      	subs	r3, r2, r3
 8008fe6:	4a18      	ldr	r2, [pc, #96]	; (8009048 <pvPortMalloc+0x17c>)
 8008fe8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008fea:	4b17      	ldr	r3, [pc, #92]	; (8009048 <pvPortMalloc+0x17c>)
 8008fec:	681a      	ldr	r2, [r3, #0]
 8008fee:	4b18      	ldr	r3, [pc, #96]	; (8009050 <pvPortMalloc+0x184>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	429a      	cmp	r2, r3
 8008ff4:	d203      	bcs.n	8008ffe <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008ff6:	4b14      	ldr	r3, [pc, #80]	; (8009048 <pvPortMalloc+0x17c>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4a15      	ldr	r2, [pc, #84]	; (8009050 <pvPortMalloc+0x184>)
 8008ffc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009000:	685a      	ldr	r2, [r3, #4]
 8009002:	4b10      	ldr	r3, [pc, #64]	; (8009044 <pvPortMalloc+0x178>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	431a      	orrs	r2, r3
 8009008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800900a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800900c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800900e:	2200      	movs	r2, #0
 8009010:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009012:	f7fe fd5b 	bl	8007acc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009016:	69fb      	ldr	r3, [r7, #28]
 8009018:	f003 0307 	and.w	r3, r3, #7
 800901c:	2b00      	cmp	r3, #0
 800901e:	d00a      	beq.n	8009036 <pvPortMalloc+0x16a>
	__asm volatile
 8009020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009024:	f383 8811 	msr	BASEPRI, r3
 8009028:	f3bf 8f6f 	isb	sy
 800902c:	f3bf 8f4f 	dsb	sy
 8009030:	60fb      	str	r3, [r7, #12]
}
 8009032:	bf00      	nop
 8009034:	e7fe      	b.n	8009034 <pvPortMalloc+0x168>
	return pvReturn;
 8009036:	69fb      	ldr	r3, [r7, #28]
}
 8009038:	4618      	mov	r0, r3
 800903a:	3728      	adds	r7, #40	; 0x28
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}
 8009040:	20001a48 	.word	0x20001a48
 8009044:	20001a54 	.word	0x20001a54
 8009048:	20001a4c 	.word	0x20001a4c
 800904c:	20001a40 	.word	0x20001a40
 8009050:	20001a50 	.word	0x20001a50

08009054 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b086      	sub	sp, #24
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d048      	beq.n	80090f8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009066:	2308      	movs	r3, #8
 8009068:	425b      	negs	r3, r3
 800906a:	697a      	ldr	r2, [r7, #20]
 800906c:	4413      	add	r3, r2
 800906e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009070:	697b      	ldr	r3, [r7, #20]
 8009072:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	685a      	ldr	r2, [r3, #4]
 8009078:	4b21      	ldr	r3, [pc, #132]	; (8009100 <vPortFree+0xac>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	4013      	ands	r3, r2
 800907e:	2b00      	cmp	r3, #0
 8009080:	d10a      	bne.n	8009098 <vPortFree+0x44>
	__asm volatile
 8009082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009086:	f383 8811 	msr	BASEPRI, r3
 800908a:	f3bf 8f6f 	isb	sy
 800908e:	f3bf 8f4f 	dsb	sy
 8009092:	60fb      	str	r3, [r7, #12]
}
 8009094:	bf00      	nop
 8009096:	e7fe      	b.n	8009096 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d00a      	beq.n	80090b6 <vPortFree+0x62>
	__asm volatile
 80090a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090a4:	f383 8811 	msr	BASEPRI, r3
 80090a8:	f3bf 8f6f 	isb	sy
 80090ac:	f3bf 8f4f 	dsb	sy
 80090b0:	60bb      	str	r3, [r7, #8]
}
 80090b2:	bf00      	nop
 80090b4:	e7fe      	b.n	80090b4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	685a      	ldr	r2, [r3, #4]
 80090ba:	4b11      	ldr	r3, [pc, #68]	; (8009100 <vPortFree+0xac>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	4013      	ands	r3, r2
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d019      	beq.n	80090f8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d115      	bne.n	80090f8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80090cc:	693b      	ldr	r3, [r7, #16]
 80090ce:	685a      	ldr	r2, [r3, #4]
 80090d0:	4b0b      	ldr	r3, [pc, #44]	; (8009100 <vPortFree+0xac>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	43db      	mvns	r3, r3
 80090d6:	401a      	ands	r2, r3
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80090dc:	f7fe fce8 	bl	8007ab0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80090e0:	693b      	ldr	r3, [r7, #16]
 80090e2:	685a      	ldr	r2, [r3, #4]
 80090e4:	4b07      	ldr	r3, [pc, #28]	; (8009104 <vPortFree+0xb0>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	4413      	add	r3, r2
 80090ea:	4a06      	ldr	r2, [pc, #24]	; (8009104 <vPortFree+0xb0>)
 80090ec:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80090ee:	6938      	ldr	r0, [r7, #16]
 80090f0:	f000 f86c 	bl	80091cc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80090f4:	f7fe fcea 	bl	8007acc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80090f8:	bf00      	nop
 80090fa:	3718      	adds	r7, #24
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}
 8009100:	20001a54 	.word	0x20001a54
 8009104:	20001a4c 	.word	0x20001a4c

08009108 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009108:	b480      	push	{r7}
 800910a:	b085      	sub	sp, #20
 800910c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800910e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009112:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009114:	4b27      	ldr	r3, [pc, #156]	; (80091b4 <prvHeapInit+0xac>)
 8009116:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	f003 0307 	and.w	r3, r3, #7
 800911e:	2b00      	cmp	r3, #0
 8009120:	d00c      	beq.n	800913c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	3307      	adds	r3, #7
 8009126:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	f023 0307 	bic.w	r3, r3, #7
 800912e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009130:	68ba      	ldr	r2, [r7, #8]
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	1ad3      	subs	r3, r2, r3
 8009136:	4a1f      	ldr	r2, [pc, #124]	; (80091b4 <prvHeapInit+0xac>)
 8009138:	4413      	add	r3, r2
 800913a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009140:	4a1d      	ldr	r2, [pc, #116]	; (80091b8 <prvHeapInit+0xb0>)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009146:	4b1c      	ldr	r3, [pc, #112]	; (80091b8 <prvHeapInit+0xb0>)
 8009148:	2200      	movs	r2, #0
 800914a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	68ba      	ldr	r2, [r7, #8]
 8009150:	4413      	add	r3, r2
 8009152:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009154:	2208      	movs	r2, #8
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	1a9b      	subs	r3, r3, r2
 800915a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	f023 0307 	bic.w	r3, r3, #7
 8009162:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	4a15      	ldr	r2, [pc, #84]	; (80091bc <prvHeapInit+0xb4>)
 8009168:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800916a:	4b14      	ldr	r3, [pc, #80]	; (80091bc <prvHeapInit+0xb4>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	2200      	movs	r2, #0
 8009170:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009172:	4b12      	ldr	r3, [pc, #72]	; (80091bc <prvHeapInit+0xb4>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	2200      	movs	r2, #0
 8009178:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	68fa      	ldr	r2, [r7, #12]
 8009182:	1ad2      	subs	r2, r2, r3
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009188:	4b0c      	ldr	r3, [pc, #48]	; (80091bc <prvHeapInit+0xb4>)
 800918a:	681a      	ldr	r2, [r3, #0]
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	4a0a      	ldr	r2, [pc, #40]	; (80091c0 <prvHeapInit+0xb8>)
 8009196:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	685b      	ldr	r3, [r3, #4]
 800919c:	4a09      	ldr	r2, [pc, #36]	; (80091c4 <prvHeapInit+0xbc>)
 800919e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80091a0:	4b09      	ldr	r3, [pc, #36]	; (80091c8 <prvHeapInit+0xc0>)
 80091a2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80091a6:	601a      	str	r2, [r3, #0]
}
 80091a8:	bf00      	nop
 80091aa:	3714      	adds	r7, #20
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bc80      	pop	{r7}
 80091b0:	4770      	bx	lr
 80091b2:	bf00      	nop
 80091b4:	20000e40 	.word	0x20000e40
 80091b8:	20001a40 	.word	0x20001a40
 80091bc:	20001a48 	.word	0x20001a48
 80091c0:	20001a50 	.word	0x20001a50
 80091c4:	20001a4c 	.word	0x20001a4c
 80091c8:	20001a54 	.word	0x20001a54

080091cc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80091cc:	b480      	push	{r7}
 80091ce:	b085      	sub	sp, #20
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80091d4:	4b27      	ldr	r3, [pc, #156]	; (8009274 <prvInsertBlockIntoFreeList+0xa8>)
 80091d6:	60fb      	str	r3, [r7, #12]
 80091d8:	e002      	b.n	80091e0 <prvInsertBlockIntoFreeList+0x14>
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	60fb      	str	r3, [r7, #12]
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	687a      	ldr	r2, [r7, #4]
 80091e6:	429a      	cmp	r2, r3
 80091e8:	d8f7      	bhi.n	80091da <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	685b      	ldr	r3, [r3, #4]
 80091f2:	68ba      	ldr	r2, [r7, #8]
 80091f4:	4413      	add	r3, r2
 80091f6:	687a      	ldr	r2, [r7, #4]
 80091f8:	429a      	cmp	r2, r3
 80091fa:	d108      	bne.n	800920e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	685a      	ldr	r2, [r3, #4]
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	685b      	ldr	r3, [r3, #4]
 8009204:	441a      	add	r2, r3
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	685b      	ldr	r3, [r3, #4]
 8009216:	68ba      	ldr	r2, [r7, #8]
 8009218:	441a      	add	r2, r3
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	429a      	cmp	r2, r3
 8009220:	d118      	bne.n	8009254 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681a      	ldr	r2, [r3, #0]
 8009226:	4b14      	ldr	r3, [pc, #80]	; (8009278 <prvInsertBlockIntoFreeList+0xac>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	429a      	cmp	r2, r3
 800922c:	d00d      	beq.n	800924a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	685a      	ldr	r2, [r3, #4]
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	685b      	ldr	r3, [r3, #4]
 8009238:	441a      	add	r2, r3
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	681a      	ldr	r2, [r3, #0]
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	601a      	str	r2, [r3, #0]
 8009248:	e008      	b.n	800925c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800924a:	4b0b      	ldr	r3, [pc, #44]	; (8009278 <prvInsertBlockIntoFreeList+0xac>)
 800924c:	681a      	ldr	r2, [r3, #0]
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	601a      	str	r2, [r3, #0]
 8009252:	e003      	b.n	800925c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681a      	ldr	r2, [r3, #0]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800925c:	68fa      	ldr	r2, [r7, #12]
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	429a      	cmp	r2, r3
 8009262:	d002      	beq.n	800926a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	687a      	ldr	r2, [r7, #4]
 8009268:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800926a:	bf00      	nop
 800926c:	3714      	adds	r7, #20
 800926e:	46bd      	mov	sp, r7
 8009270:	bc80      	pop	{r7}
 8009272:	4770      	bx	lr
 8009274:	20001a40 	.word	0x20001a40
 8009278:	20001a48 	.word	0x20001a48

0800927c <__errno>:
 800927c:	4b01      	ldr	r3, [pc, #4]	; (8009284 <__errno+0x8>)
 800927e:	6818      	ldr	r0, [r3, #0]
 8009280:	4770      	bx	lr
 8009282:	bf00      	nop
 8009284:	20000010 	.word	0x20000010

08009288 <std>:
 8009288:	2300      	movs	r3, #0
 800928a:	b510      	push	{r4, lr}
 800928c:	4604      	mov	r4, r0
 800928e:	e9c0 3300 	strd	r3, r3, [r0]
 8009292:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009296:	6083      	str	r3, [r0, #8]
 8009298:	8181      	strh	r1, [r0, #12]
 800929a:	6643      	str	r3, [r0, #100]	; 0x64
 800929c:	81c2      	strh	r2, [r0, #14]
 800929e:	6183      	str	r3, [r0, #24]
 80092a0:	4619      	mov	r1, r3
 80092a2:	2208      	movs	r2, #8
 80092a4:	305c      	adds	r0, #92	; 0x5c
 80092a6:	f000 f91a 	bl	80094de <memset>
 80092aa:	4b05      	ldr	r3, [pc, #20]	; (80092c0 <std+0x38>)
 80092ac:	6263      	str	r3, [r4, #36]	; 0x24
 80092ae:	4b05      	ldr	r3, [pc, #20]	; (80092c4 <std+0x3c>)
 80092b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80092b2:	4b05      	ldr	r3, [pc, #20]	; (80092c8 <std+0x40>)
 80092b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80092b6:	4b05      	ldr	r3, [pc, #20]	; (80092cc <std+0x44>)
 80092b8:	6224      	str	r4, [r4, #32]
 80092ba:	6323      	str	r3, [r4, #48]	; 0x30
 80092bc:	bd10      	pop	{r4, pc}
 80092be:	bf00      	nop
 80092c0:	08009775 	.word	0x08009775
 80092c4:	08009797 	.word	0x08009797
 80092c8:	080097cf 	.word	0x080097cf
 80092cc:	080097f3 	.word	0x080097f3

080092d0 <_cleanup_r>:
 80092d0:	4901      	ldr	r1, [pc, #4]	; (80092d8 <_cleanup_r+0x8>)
 80092d2:	f000 b8af 	b.w	8009434 <_fwalk_reent>
 80092d6:	bf00      	nop
 80092d8:	08009a61 	.word	0x08009a61

080092dc <__sfmoreglue>:
 80092dc:	b570      	push	{r4, r5, r6, lr}
 80092de:	2268      	movs	r2, #104	; 0x68
 80092e0:	1e4d      	subs	r5, r1, #1
 80092e2:	4355      	muls	r5, r2
 80092e4:	460e      	mov	r6, r1
 80092e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80092ea:	f000 f921 	bl	8009530 <_malloc_r>
 80092ee:	4604      	mov	r4, r0
 80092f0:	b140      	cbz	r0, 8009304 <__sfmoreglue+0x28>
 80092f2:	2100      	movs	r1, #0
 80092f4:	e9c0 1600 	strd	r1, r6, [r0]
 80092f8:	300c      	adds	r0, #12
 80092fa:	60a0      	str	r0, [r4, #8]
 80092fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009300:	f000 f8ed 	bl	80094de <memset>
 8009304:	4620      	mov	r0, r4
 8009306:	bd70      	pop	{r4, r5, r6, pc}

08009308 <__sfp_lock_acquire>:
 8009308:	4801      	ldr	r0, [pc, #4]	; (8009310 <__sfp_lock_acquire+0x8>)
 800930a:	f000 b8d8 	b.w	80094be <__retarget_lock_acquire_recursive>
 800930e:	bf00      	nop
 8009310:	20001a59 	.word	0x20001a59

08009314 <__sfp_lock_release>:
 8009314:	4801      	ldr	r0, [pc, #4]	; (800931c <__sfp_lock_release+0x8>)
 8009316:	f000 b8d3 	b.w	80094c0 <__retarget_lock_release_recursive>
 800931a:	bf00      	nop
 800931c:	20001a59 	.word	0x20001a59

08009320 <__sinit_lock_acquire>:
 8009320:	4801      	ldr	r0, [pc, #4]	; (8009328 <__sinit_lock_acquire+0x8>)
 8009322:	f000 b8cc 	b.w	80094be <__retarget_lock_acquire_recursive>
 8009326:	bf00      	nop
 8009328:	20001a5a 	.word	0x20001a5a

0800932c <__sinit_lock_release>:
 800932c:	4801      	ldr	r0, [pc, #4]	; (8009334 <__sinit_lock_release+0x8>)
 800932e:	f000 b8c7 	b.w	80094c0 <__retarget_lock_release_recursive>
 8009332:	bf00      	nop
 8009334:	20001a5a 	.word	0x20001a5a

08009338 <__sinit>:
 8009338:	b510      	push	{r4, lr}
 800933a:	4604      	mov	r4, r0
 800933c:	f7ff fff0 	bl	8009320 <__sinit_lock_acquire>
 8009340:	69a3      	ldr	r3, [r4, #24]
 8009342:	b11b      	cbz	r3, 800934c <__sinit+0x14>
 8009344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009348:	f7ff bff0 	b.w	800932c <__sinit_lock_release>
 800934c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009350:	6523      	str	r3, [r4, #80]	; 0x50
 8009352:	4b13      	ldr	r3, [pc, #76]	; (80093a0 <__sinit+0x68>)
 8009354:	4a13      	ldr	r2, [pc, #76]	; (80093a4 <__sinit+0x6c>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	62a2      	str	r2, [r4, #40]	; 0x28
 800935a:	42a3      	cmp	r3, r4
 800935c:	bf04      	itt	eq
 800935e:	2301      	moveq	r3, #1
 8009360:	61a3      	streq	r3, [r4, #24]
 8009362:	4620      	mov	r0, r4
 8009364:	f000 f820 	bl	80093a8 <__sfp>
 8009368:	6060      	str	r0, [r4, #4]
 800936a:	4620      	mov	r0, r4
 800936c:	f000 f81c 	bl	80093a8 <__sfp>
 8009370:	60a0      	str	r0, [r4, #8]
 8009372:	4620      	mov	r0, r4
 8009374:	f000 f818 	bl	80093a8 <__sfp>
 8009378:	2200      	movs	r2, #0
 800937a:	60e0      	str	r0, [r4, #12]
 800937c:	2104      	movs	r1, #4
 800937e:	6860      	ldr	r0, [r4, #4]
 8009380:	f7ff ff82 	bl	8009288 <std>
 8009384:	68a0      	ldr	r0, [r4, #8]
 8009386:	2201      	movs	r2, #1
 8009388:	2109      	movs	r1, #9
 800938a:	f7ff ff7d 	bl	8009288 <std>
 800938e:	68e0      	ldr	r0, [r4, #12]
 8009390:	2202      	movs	r2, #2
 8009392:	2112      	movs	r1, #18
 8009394:	f7ff ff78 	bl	8009288 <std>
 8009398:	2301      	movs	r3, #1
 800939a:	61a3      	str	r3, [r4, #24]
 800939c:	e7d2      	b.n	8009344 <__sinit+0xc>
 800939e:	bf00      	nop
 80093a0:	0800b074 	.word	0x0800b074
 80093a4:	080092d1 	.word	0x080092d1

080093a8 <__sfp>:
 80093a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093aa:	4607      	mov	r7, r0
 80093ac:	f7ff ffac 	bl	8009308 <__sfp_lock_acquire>
 80093b0:	4b1e      	ldr	r3, [pc, #120]	; (800942c <__sfp+0x84>)
 80093b2:	681e      	ldr	r6, [r3, #0]
 80093b4:	69b3      	ldr	r3, [r6, #24]
 80093b6:	b913      	cbnz	r3, 80093be <__sfp+0x16>
 80093b8:	4630      	mov	r0, r6
 80093ba:	f7ff ffbd 	bl	8009338 <__sinit>
 80093be:	3648      	adds	r6, #72	; 0x48
 80093c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80093c4:	3b01      	subs	r3, #1
 80093c6:	d503      	bpl.n	80093d0 <__sfp+0x28>
 80093c8:	6833      	ldr	r3, [r6, #0]
 80093ca:	b30b      	cbz	r3, 8009410 <__sfp+0x68>
 80093cc:	6836      	ldr	r6, [r6, #0]
 80093ce:	e7f7      	b.n	80093c0 <__sfp+0x18>
 80093d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80093d4:	b9d5      	cbnz	r5, 800940c <__sfp+0x64>
 80093d6:	4b16      	ldr	r3, [pc, #88]	; (8009430 <__sfp+0x88>)
 80093d8:	60e3      	str	r3, [r4, #12]
 80093da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80093de:	6665      	str	r5, [r4, #100]	; 0x64
 80093e0:	f000 f86c 	bl	80094bc <__retarget_lock_init_recursive>
 80093e4:	f7ff ff96 	bl	8009314 <__sfp_lock_release>
 80093e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80093ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80093f0:	6025      	str	r5, [r4, #0]
 80093f2:	61a5      	str	r5, [r4, #24]
 80093f4:	2208      	movs	r2, #8
 80093f6:	4629      	mov	r1, r5
 80093f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80093fc:	f000 f86f 	bl	80094de <memset>
 8009400:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009404:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009408:	4620      	mov	r0, r4
 800940a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800940c:	3468      	adds	r4, #104	; 0x68
 800940e:	e7d9      	b.n	80093c4 <__sfp+0x1c>
 8009410:	2104      	movs	r1, #4
 8009412:	4638      	mov	r0, r7
 8009414:	f7ff ff62 	bl	80092dc <__sfmoreglue>
 8009418:	4604      	mov	r4, r0
 800941a:	6030      	str	r0, [r6, #0]
 800941c:	2800      	cmp	r0, #0
 800941e:	d1d5      	bne.n	80093cc <__sfp+0x24>
 8009420:	f7ff ff78 	bl	8009314 <__sfp_lock_release>
 8009424:	230c      	movs	r3, #12
 8009426:	603b      	str	r3, [r7, #0]
 8009428:	e7ee      	b.n	8009408 <__sfp+0x60>
 800942a:	bf00      	nop
 800942c:	0800b074 	.word	0x0800b074
 8009430:	ffff0001 	.word	0xffff0001

08009434 <_fwalk_reent>:
 8009434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009438:	4606      	mov	r6, r0
 800943a:	4688      	mov	r8, r1
 800943c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009440:	2700      	movs	r7, #0
 8009442:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009446:	f1b9 0901 	subs.w	r9, r9, #1
 800944a:	d505      	bpl.n	8009458 <_fwalk_reent+0x24>
 800944c:	6824      	ldr	r4, [r4, #0]
 800944e:	2c00      	cmp	r4, #0
 8009450:	d1f7      	bne.n	8009442 <_fwalk_reent+0xe>
 8009452:	4638      	mov	r0, r7
 8009454:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009458:	89ab      	ldrh	r3, [r5, #12]
 800945a:	2b01      	cmp	r3, #1
 800945c:	d907      	bls.n	800946e <_fwalk_reent+0x3a>
 800945e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009462:	3301      	adds	r3, #1
 8009464:	d003      	beq.n	800946e <_fwalk_reent+0x3a>
 8009466:	4629      	mov	r1, r5
 8009468:	4630      	mov	r0, r6
 800946a:	47c0      	blx	r8
 800946c:	4307      	orrs	r7, r0
 800946e:	3568      	adds	r5, #104	; 0x68
 8009470:	e7e9      	b.n	8009446 <_fwalk_reent+0x12>
	...

08009474 <__libc_init_array>:
 8009474:	b570      	push	{r4, r5, r6, lr}
 8009476:	4d0d      	ldr	r5, [pc, #52]	; (80094ac <__libc_init_array+0x38>)
 8009478:	4c0d      	ldr	r4, [pc, #52]	; (80094b0 <__libc_init_array+0x3c>)
 800947a:	1b64      	subs	r4, r4, r5
 800947c:	10a4      	asrs	r4, r4, #2
 800947e:	2600      	movs	r6, #0
 8009480:	42a6      	cmp	r6, r4
 8009482:	d109      	bne.n	8009498 <__libc_init_array+0x24>
 8009484:	4d0b      	ldr	r5, [pc, #44]	; (80094b4 <__libc_init_array+0x40>)
 8009486:	4c0c      	ldr	r4, [pc, #48]	; (80094b8 <__libc_init_array+0x44>)
 8009488:	f001 f9e6 	bl	800a858 <_init>
 800948c:	1b64      	subs	r4, r4, r5
 800948e:	10a4      	asrs	r4, r4, #2
 8009490:	2600      	movs	r6, #0
 8009492:	42a6      	cmp	r6, r4
 8009494:	d105      	bne.n	80094a2 <__libc_init_array+0x2e>
 8009496:	bd70      	pop	{r4, r5, r6, pc}
 8009498:	f855 3b04 	ldr.w	r3, [r5], #4
 800949c:	4798      	blx	r3
 800949e:	3601      	adds	r6, #1
 80094a0:	e7ee      	b.n	8009480 <__libc_init_array+0xc>
 80094a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80094a6:	4798      	blx	r3
 80094a8:	3601      	adds	r6, #1
 80094aa:	e7f2      	b.n	8009492 <__libc_init_array+0x1e>
 80094ac:	0800b164 	.word	0x0800b164
 80094b0:	0800b164 	.word	0x0800b164
 80094b4:	0800b164 	.word	0x0800b164
 80094b8:	0800b168 	.word	0x0800b168

080094bc <__retarget_lock_init_recursive>:
 80094bc:	4770      	bx	lr

080094be <__retarget_lock_acquire_recursive>:
 80094be:	4770      	bx	lr

080094c0 <__retarget_lock_release_recursive>:
 80094c0:	4770      	bx	lr

080094c2 <memcpy>:
 80094c2:	440a      	add	r2, r1
 80094c4:	4291      	cmp	r1, r2
 80094c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80094ca:	d100      	bne.n	80094ce <memcpy+0xc>
 80094cc:	4770      	bx	lr
 80094ce:	b510      	push	{r4, lr}
 80094d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80094d8:	4291      	cmp	r1, r2
 80094da:	d1f9      	bne.n	80094d0 <memcpy+0xe>
 80094dc:	bd10      	pop	{r4, pc}

080094de <memset>:
 80094de:	4402      	add	r2, r0
 80094e0:	4603      	mov	r3, r0
 80094e2:	4293      	cmp	r3, r2
 80094e4:	d100      	bne.n	80094e8 <memset+0xa>
 80094e6:	4770      	bx	lr
 80094e8:	f803 1b01 	strb.w	r1, [r3], #1
 80094ec:	e7f9      	b.n	80094e2 <memset+0x4>
	...

080094f0 <sbrk_aligned>:
 80094f0:	b570      	push	{r4, r5, r6, lr}
 80094f2:	4e0e      	ldr	r6, [pc, #56]	; (800952c <sbrk_aligned+0x3c>)
 80094f4:	460c      	mov	r4, r1
 80094f6:	6831      	ldr	r1, [r6, #0]
 80094f8:	4605      	mov	r5, r0
 80094fa:	b911      	cbnz	r1, 8009502 <sbrk_aligned+0x12>
 80094fc:	f000 f8f6 	bl	80096ec <_sbrk_r>
 8009500:	6030      	str	r0, [r6, #0]
 8009502:	4621      	mov	r1, r4
 8009504:	4628      	mov	r0, r5
 8009506:	f000 f8f1 	bl	80096ec <_sbrk_r>
 800950a:	1c43      	adds	r3, r0, #1
 800950c:	d00a      	beq.n	8009524 <sbrk_aligned+0x34>
 800950e:	1cc4      	adds	r4, r0, #3
 8009510:	f024 0403 	bic.w	r4, r4, #3
 8009514:	42a0      	cmp	r0, r4
 8009516:	d007      	beq.n	8009528 <sbrk_aligned+0x38>
 8009518:	1a21      	subs	r1, r4, r0
 800951a:	4628      	mov	r0, r5
 800951c:	f000 f8e6 	bl	80096ec <_sbrk_r>
 8009520:	3001      	adds	r0, #1
 8009522:	d101      	bne.n	8009528 <sbrk_aligned+0x38>
 8009524:	f04f 34ff 	mov.w	r4, #4294967295
 8009528:	4620      	mov	r0, r4
 800952a:	bd70      	pop	{r4, r5, r6, pc}
 800952c:	20001a60 	.word	0x20001a60

08009530 <_malloc_r>:
 8009530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009534:	1ccd      	adds	r5, r1, #3
 8009536:	f025 0503 	bic.w	r5, r5, #3
 800953a:	3508      	adds	r5, #8
 800953c:	2d0c      	cmp	r5, #12
 800953e:	bf38      	it	cc
 8009540:	250c      	movcc	r5, #12
 8009542:	2d00      	cmp	r5, #0
 8009544:	4607      	mov	r7, r0
 8009546:	db01      	blt.n	800954c <_malloc_r+0x1c>
 8009548:	42a9      	cmp	r1, r5
 800954a:	d905      	bls.n	8009558 <_malloc_r+0x28>
 800954c:	230c      	movs	r3, #12
 800954e:	603b      	str	r3, [r7, #0]
 8009550:	2600      	movs	r6, #0
 8009552:	4630      	mov	r0, r6
 8009554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009558:	4e2e      	ldr	r6, [pc, #184]	; (8009614 <_malloc_r+0xe4>)
 800955a:	f000 fae9 	bl	8009b30 <__malloc_lock>
 800955e:	6833      	ldr	r3, [r6, #0]
 8009560:	461c      	mov	r4, r3
 8009562:	bb34      	cbnz	r4, 80095b2 <_malloc_r+0x82>
 8009564:	4629      	mov	r1, r5
 8009566:	4638      	mov	r0, r7
 8009568:	f7ff ffc2 	bl	80094f0 <sbrk_aligned>
 800956c:	1c43      	adds	r3, r0, #1
 800956e:	4604      	mov	r4, r0
 8009570:	d14d      	bne.n	800960e <_malloc_r+0xde>
 8009572:	6834      	ldr	r4, [r6, #0]
 8009574:	4626      	mov	r6, r4
 8009576:	2e00      	cmp	r6, #0
 8009578:	d140      	bne.n	80095fc <_malloc_r+0xcc>
 800957a:	6823      	ldr	r3, [r4, #0]
 800957c:	4631      	mov	r1, r6
 800957e:	4638      	mov	r0, r7
 8009580:	eb04 0803 	add.w	r8, r4, r3
 8009584:	f000 f8b2 	bl	80096ec <_sbrk_r>
 8009588:	4580      	cmp	r8, r0
 800958a:	d13a      	bne.n	8009602 <_malloc_r+0xd2>
 800958c:	6821      	ldr	r1, [r4, #0]
 800958e:	3503      	adds	r5, #3
 8009590:	1a6d      	subs	r5, r5, r1
 8009592:	f025 0503 	bic.w	r5, r5, #3
 8009596:	3508      	adds	r5, #8
 8009598:	2d0c      	cmp	r5, #12
 800959a:	bf38      	it	cc
 800959c:	250c      	movcc	r5, #12
 800959e:	4629      	mov	r1, r5
 80095a0:	4638      	mov	r0, r7
 80095a2:	f7ff ffa5 	bl	80094f0 <sbrk_aligned>
 80095a6:	3001      	adds	r0, #1
 80095a8:	d02b      	beq.n	8009602 <_malloc_r+0xd2>
 80095aa:	6823      	ldr	r3, [r4, #0]
 80095ac:	442b      	add	r3, r5
 80095ae:	6023      	str	r3, [r4, #0]
 80095b0:	e00e      	b.n	80095d0 <_malloc_r+0xa0>
 80095b2:	6822      	ldr	r2, [r4, #0]
 80095b4:	1b52      	subs	r2, r2, r5
 80095b6:	d41e      	bmi.n	80095f6 <_malloc_r+0xc6>
 80095b8:	2a0b      	cmp	r2, #11
 80095ba:	d916      	bls.n	80095ea <_malloc_r+0xba>
 80095bc:	1961      	adds	r1, r4, r5
 80095be:	42a3      	cmp	r3, r4
 80095c0:	6025      	str	r5, [r4, #0]
 80095c2:	bf18      	it	ne
 80095c4:	6059      	strne	r1, [r3, #4]
 80095c6:	6863      	ldr	r3, [r4, #4]
 80095c8:	bf08      	it	eq
 80095ca:	6031      	streq	r1, [r6, #0]
 80095cc:	5162      	str	r2, [r4, r5]
 80095ce:	604b      	str	r3, [r1, #4]
 80095d0:	4638      	mov	r0, r7
 80095d2:	f104 060b 	add.w	r6, r4, #11
 80095d6:	f000 fab1 	bl	8009b3c <__malloc_unlock>
 80095da:	f026 0607 	bic.w	r6, r6, #7
 80095de:	1d23      	adds	r3, r4, #4
 80095e0:	1af2      	subs	r2, r6, r3
 80095e2:	d0b6      	beq.n	8009552 <_malloc_r+0x22>
 80095e4:	1b9b      	subs	r3, r3, r6
 80095e6:	50a3      	str	r3, [r4, r2]
 80095e8:	e7b3      	b.n	8009552 <_malloc_r+0x22>
 80095ea:	6862      	ldr	r2, [r4, #4]
 80095ec:	42a3      	cmp	r3, r4
 80095ee:	bf0c      	ite	eq
 80095f0:	6032      	streq	r2, [r6, #0]
 80095f2:	605a      	strne	r2, [r3, #4]
 80095f4:	e7ec      	b.n	80095d0 <_malloc_r+0xa0>
 80095f6:	4623      	mov	r3, r4
 80095f8:	6864      	ldr	r4, [r4, #4]
 80095fa:	e7b2      	b.n	8009562 <_malloc_r+0x32>
 80095fc:	4634      	mov	r4, r6
 80095fe:	6876      	ldr	r6, [r6, #4]
 8009600:	e7b9      	b.n	8009576 <_malloc_r+0x46>
 8009602:	230c      	movs	r3, #12
 8009604:	603b      	str	r3, [r7, #0]
 8009606:	4638      	mov	r0, r7
 8009608:	f000 fa98 	bl	8009b3c <__malloc_unlock>
 800960c:	e7a1      	b.n	8009552 <_malloc_r+0x22>
 800960e:	6025      	str	r5, [r4, #0]
 8009610:	e7de      	b.n	80095d0 <_malloc_r+0xa0>
 8009612:	bf00      	nop
 8009614:	20001a5c 	.word	0x20001a5c

08009618 <cleanup_glue>:
 8009618:	b538      	push	{r3, r4, r5, lr}
 800961a:	460c      	mov	r4, r1
 800961c:	6809      	ldr	r1, [r1, #0]
 800961e:	4605      	mov	r5, r0
 8009620:	b109      	cbz	r1, 8009626 <cleanup_glue+0xe>
 8009622:	f7ff fff9 	bl	8009618 <cleanup_glue>
 8009626:	4621      	mov	r1, r4
 8009628:	4628      	mov	r0, r5
 800962a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800962e:	f000 ba8b 	b.w	8009b48 <_free_r>
	...

08009634 <_reclaim_reent>:
 8009634:	4b2c      	ldr	r3, [pc, #176]	; (80096e8 <_reclaim_reent+0xb4>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4283      	cmp	r3, r0
 800963a:	b570      	push	{r4, r5, r6, lr}
 800963c:	4604      	mov	r4, r0
 800963e:	d051      	beq.n	80096e4 <_reclaim_reent+0xb0>
 8009640:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009642:	b143      	cbz	r3, 8009656 <_reclaim_reent+0x22>
 8009644:	68db      	ldr	r3, [r3, #12]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d14a      	bne.n	80096e0 <_reclaim_reent+0xac>
 800964a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800964c:	6819      	ldr	r1, [r3, #0]
 800964e:	b111      	cbz	r1, 8009656 <_reclaim_reent+0x22>
 8009650:	4620      	mov	r0, r4
 8009652:	f000 fa79 	bl	8009b48 <_free_r>
 8009656:	6961      	ldr	r1, [r4, #20]
 8009658:	b111      	cbz	r1, 8009660 <_reclaim_reent+0x2c>
 800965a:	4620      	mov	r0, r4
 800965c:	f000 fa74 	bl	8009b48 <_free_r>
 8009660:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009662:	b111      	cbz	r1, 800966a <_reclaim_reent+0x36>
 8009664:	4620      	mov	r0, r4
 8009666:	f000 fa6f 	bl	8009b48 <_free_r>
 800966a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800966c:	b111      	cbz	r1, 8009674 <_reclaim_reent+0x40>
 800966e:	4620      	mov	r0, r4
 8009670:	f000 fa6a 	bl	8009b48 <_free_r>
 8009674:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009676:	b111      	cbz	r1, 800967e <_reclaim_reent+0x4a>
 8009678:	4620      	mov	r0, r4
 800967a:	f000 fa65 	bl	8009b48 <_free_r>
 800967e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009680:	b111      	cbz	r1, 8009688 <_reclaim_reent+0x54>
 8009682:	4620      	mov	r0, r4
 8009684:	f000 fa60 	bl	8009b48 <_free_r>
 8009688:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800968a:	b111      	cbz	r1, 8009692 <_reclaim_reent+0x5e>
 800968c:	4620      	mov	r0, r4
 800968e:	f000 fa5b 	bl	8009b48 <_free_r>
 8009692:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009694:	b111      	cbz	r1, 800969c <_reclaim_reent+0x68>
 8009696:	4620      	mov	r0, r4
 8009698:	f000 fa56 	bl	8009b48 <_free_r>
 800969c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800969e:	b111      	cbz	r1, 80096a6 <_reclaim_reent+0x72>
 80096a0:	4620      	mov	r0, r4
 80096a2:	f000 fa51 	bl	8009b48 <_free_r>
 80096a6:	69a3      	ldr	r3, [r4, #24]
 80096a8:	b1e3      	cbz	r3, 80096e4 <_reclaim_reent+0xb0>
 80096aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80096ac:	4620      	mov	r0, r4
 80096ae:	4798      	blx	r3
 80096b0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80096b2:	b1b9      	cbz	r1, 80096e4 <_reclaim_reent+0xb0>
 80096b4:	4620      	mov	r0, r4
 80096b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80096ba:	f7ff bfad 	b.w	8009618 <cleanup_glue>
 80096be:	5949      	ldr	r1, [r1, r5]
 80096c0:	b941      	cbnz	r1, 80096d4 <_reclaim_reent+0xa0>
 80096c2:	3504      	adds	r5, #4
 80096c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096c6:	2d80      	cmp	r5, #128	; 0x80
 80096c8:	68d9      	ldr	r1, [r3, #12]
 80096ca:	d1f8      	bne.n	80096be <_reclaim_reent+0x8a>
 80096cc:	4620      	mov	r0, r4
 80096ce:	f000 fa3b 	bl	8009b48 <_free_r>
 80096d2:	e7ba      	b.n	800964a <_reclaim_reent+0x16>
 80096d4:	680e      	ldr	r6, [r1, #0]
 80096d6:	4620      	mov	r0, r4
 80096d8:	f000 fa36 	bl	8009b48 <_free_r>
 80096dc:	4631      	mov	r1, r6
 80096de:	e7ef      	b.n	80096c0 <_reclaim_reent+0x8c>
 80096e0:	2500      	movs	r5, #0
 80096e2:	e7ef      	b.n	80096c4 <_reclaim_reent+0x90>
 80096e4:	bd70      	pop	{r4, r5, r6, pc}
 80096e6:	bf00      	nop
 80096e8:	20000010 	.word	0x20000010

080096ec <_sbrk_r>:
 80096ec:	b538      	push	{r3, r4, r5, lr}
 80096ee:	4d06      	ldr	r5, [pc, #24]	; (8009708 <_sbrk_r+0x1c>)
 80096f0:	2300      	movs	r3, #0
 80096f2:	4604      	mov	r4, r0
 80096f4:	4608      	mov	r0, r1
 80096f6:	602b      	str	r3, [r5, #0]
 80096f8:	f7f7 fdf8 	bl	80012ec <_sbrk>
 80096fc:	1c43      	adds	r3, r0, #1
 80096fe:	d102      	bne.n	8009706 <_sbrk_r+0x1a>
 8009700:	682b      	ldr	r3, [r5, #0]
 8009702:	b103      	cbz	r3, 8009706 <_sbrk_r+0x1a>
 8009704:	6023      	str	r3, [r4, #0]
 8009706:	bd38      	pop	{r3, r4, r5, pc}
 8009708:	20001a64 	.word	0x20001a64

0800970c <sniprintf>:
 800970c:	b40c      	push	{r2, r3}
 800970e:	b530      	push	{r4, r5, lr}
 8009710:	4b17      	ldr	r3, [pc, #92]	; (8009770 <sniprintf+0x64>)
 8009712:	1e0c      	subs	r4, r1, #0
 8009714:	681d      	ldr	r5, [r3, #0]
 8009716:	b09d      	sub	sp, #116	; 0x74
 8009718:	da08      	bge.n	800972c <sniprintf+0x20>
 800971a:	238b      	movs	r3, #139	; 0x8b
 800971c:	602b      	str	r3, [r5, #0]
 800971e:	f04f 30ff 	mov.w	r0, #4294967295
 8009722:	b01d      	add	sp, #116	; 0x74
 8009724:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009728:	b002      	add	sp, #8
 800972a:	4770      	bx	lr
 800972c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009730:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009734:	bf14      	ite	ne
 8009736:	f104 33ff 	addne.w	r3, r4, #4294967295
 800973a:	4623      	moveq	r3, r4
 800973c:	9304      	str	r3, [sp, #16]
 800973e:	9307      	str	r3, [sp, #28]
 8009740:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009744:	9002      	str	r0, [sp, #8]
 8009746:	9006      	str	r0, [sp, #24]
 8009748:	f8ad 3016 	strh.w	r3, [sp, #22]
 800974c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800974e:	ab21      	add	r3, sp, #132	; 0x84
 8009750:	a902      	add	r1, sp, #8
 8009752:	4628      	mov	r0, r5
 8009754:	9301      	str	r3, [sp, #4]
 8009756:	f000 fa9d 	bl	8009c94 <_svfiprintf_r>
 800975a:	1c43      	adds	r3, r0, #1
 800975c:	bfbc      	itt	lt
 800975e:	238b      	movlt	r3, #139	; 0x8b
 8009760:	602b      	strlt	r3, [r5, #0]
 8009762:	2c00      	cmp	r4, #0
 8009764:	d0dd      	beq.n	8009722 <sniprintf+0x16>
 8009766:	9b02      	ldr	r3, [sp, #8]
 8009768:	2200      	movs	r2, #0
 800976a:	701a      	strb	r2, [r3, #0]
 800976c:	e7d9      	b.n	8009722 <sniprintf+0x16>
 800976e:	bf00      	nop
 8009770:	20000010 	.word	0x20000010

08009774 <__sread>:
 8009774:	b510      	push	{r4, lr}
 8009776:	460c      	mov	r4, r1
 8009778:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800977c:	f000 fe76 	bl	800a46c <_read_r>
 8009780:	2800      	cmp	r0, #0
 8009782:	bfab      	itete	ge
 8009784:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009786:	89a3      	ldrhlt	r3, [r4, #12]
 8009788:	181b      	addge	r3, r3, r0
 800978a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800978e:	bfac      	ite	ge
 8009790:	6563      	strge	r3, [r4, #84]	; 0x54
 8009792:	81a3      	strhlt	r3, [r4, #12]
 8009794:	bd10      	pop	{r4, pc}

08009796 <__swrite>:
 8009796:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800979a:	461f      	mov	r7, r3
 800979c:	898b      	ldrh	r3, [r1, #12]
 800979e:	05db      	lsls	r3, r3, #23
 80097a0:	4605      	mov	r5, r0
 80097a2:	460c      	mov	r4, r1
 80097a4:	4616      	mov	r6, r2
 80097a6:	d505      	bpl.n	80097b4 <__swrite+0x1e>
 80097a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097ac:	2302      	movs	r3, #2
 80097ae:	2200      	movs	r2, #0
 80097b0:	f000 f9a4 	bl	8009afc <_lseek_r>
 80097b4:	89a3      	ldrh	r3, [r4, #12]
 80097b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80097ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80097be:	81a3      	strh	r3, [r4, #12]
 80097c0:	4632      	mov	r2, r6
 80097c2:	463b      	mov	r3, r7
 80097c4:	4628      	mov	r0, r5
 80097c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097ca:	f000 b887 	b.w	80098dc <_write_r>

080097ce <__sseek>:
 80097ce:	b510      	push	{r4, lr}
 80097d0:	460c      	mov	r4, r1
 80097d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097d6:	f000 f991 	bl	8009afc <_lseek_r>
 80097da:	1c43      	adds	r3, r0, #1
 80097dc:	89a3      	ldrh	r3, [r4, #12]
 80097de:	bf15      	itete	ne
 80097e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80097e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80097e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80097ea:	81a3      	strheq	r3, [r4, #12]
 80097ec:	bf18      	it	ne
 80097ee:	81a3      	strhne	r3, [r4, #12]
 80097f0:	bd10      	pop	{r4, pc}

080097f2 <__sclose>:
 80097f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097f6:	f000 b8a1 	b.w	800993c <_close_r>

080097fa <strncmp>:
 80097fa:	b510      	push	{r4, lr}
 80097fc:	4603      	mov	r3, r0
 80097fe:	b172      	cbz	r2, 800981e <strncmp+0x24>
 8009800:	3901      	subs	r1, #1
 8009802:	1884      	adds	r4, r0, r2
 8009804:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009808:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800980c:	4290      	cmp	r0, r2
 800980e:	d101      	bne.n	8009814 <strncmp+0x1a>
 8009810:	42a3      	cmp	r3, r4
 8009812:	d101      	bne.n	8009818 <strncmp+0x1e>
 8009814:	1a80      	subs	r0, r0, r2
 8009816:	bd10      	pop	{r4, pc}
 8009818:	2800      	cmp	r0, #0
 800981a:	d1f3      	bne.n	8009804 <strncmp+0xa>
 800981c:	e7fa      	b.n	8009814 <strncmp+0x1a>
 800981e:	4610      	mov	r0, r2
 8009820:	e7f9      	b.n	8009816 <strncmp+0x1c>
	...

08009824 <strtok>:
 8009824:	4b16      	ldr	r3, [pc, #88]	; (8009880 <strtok+0x5c>)
 8009826:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800982a:	681f      	ldr	r7, [r3, #0]
 800982c:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800982e:	4605      	mov	r5, r0
 8009830:	460e      	mov	r6, r1
 8009832:	b9ec      	cbnz	r4, 8009870 <strtok+0x4c>
 8009834:	2050      	movs	r0, #80	; 0x50
 8009836:	f000 f973 	bl	8009b20 <malloc>
 800983a:	4602      	mov	r2, r0
 800983c:	65b8      	str	r0, [r7, #88]	; 0x58
 800983e:	b920      	cbnz	r0, 800984a <strtok+0x26>
 8009840:	4b10      	ldr	r3, [pc, #64]	; (8009884 <strtok+0x60>)
 8009842:	4811      	ldr	r0, [pc, #68]	; (8009888 <strtok+0x64>)
 8009844:	2157      	movs	r1, #87	; 0x57
 8009846:	f000 f85b 	bl	8009900 <__assert_func>
 800984a:	e9c0 4400 	strd	r4, r4, [r0]
 800984e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009852:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8009856:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800985a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800985e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8009862:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8009866:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800986a:	6184      	str	r4, [r0, #24]
 800986c:	7704      	strb	r4, [r0, #28]
 800986e:	6244      	str	r4, [r0, #36]	; 0x24
 8009870:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009872:	4631      	mov	r1, r6
 8009874:	4628      	mov	r0, r5
 8009876:	2301      	movs	r3, #1
 8009878:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800987c:	f000 b806 	b.w	800988c <__strtok_r>
 8009880:	20000010 	.word	0x20000010
 8009884:	0800b078 	.word	0x0800b078
 8009888:	0800b08f 	.word	0x0800b08f

0800988c <__strtok_r>:
 800988c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800988e:	b908      	cbnz	r0, 8009894 <__strtok_r+0x8>
 8009890:	6810      	ldr	r0, [r2, #0]
 8009892:	b188      	cbz	r0, 80098b8 <__strtok_r+0x2c>
 8009894:	4604      	mov	r4, r0
 8009896:	4620      	mov	r0, r4
 8009898:	f814 5b01 	ldrb.w	r5, [r4], #1
 800989c:	460f      	mov	r7, r1
 800989e:	f817 6b01 	ldrb.w	r6, [r7], #1
 80098a2:	b91e      	cbnz	r6, 80098ac <__strtok_r+0x20>
 80098a4:	b965      	cbnz	r5, 80098c0 <__strtok_r+0x34>
 80098a6:	6015      	str	r5, [r2, #0]
 80098a8:	4628      	mov	r0, r5
 80098aa:	e005      	b.n	80098b8 <__strtok_r+0x2c>
 80098ac:	42b5      	cmp	r5, r6
 80098ae:	d1f6      	bne.n	800989e <__strtok_r+0x12>
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d1f0      	bne.n	8009896 <__strtok_r+0xa>
 80098b4:	6014      	str	r4, [r2, #0]
 80098b6:	7003      	strb	r3, [r0, #0]
 80098b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098ba:	461c      	mov	r4, r3
 80098bc:	e00c      	b.n	80098d8 <__strtok_r+0x4c>
 80098be:	b915      	cbnz	r5, 80098c6 <__strtok_r+0x3a>
 80098c0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80098c4:	460e      	mov	r6, r1
 80098c6:	f816 5b01 	ldrb.w	r5, [r6], #1
 80098ca:	42ab      	cmp	r3, r5
 80098cc:	d1f7      	bne.n	80098be <__strtok_r+0x32>
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d0f3      	beq.n	80098ba <__strtok_r+0x2e>
 80098d2:	2300      	movs	r3, #0
 80098d4:	f804 3c01 	strb.w	r3, [r4, #-1]
 80098d8:	6014      	str	r4, [r2, #0]
 80098da:	e7ed      	b.n	80098b8 <__strtok_r+0x2c>

080098dc <_write_r>:
 80098dc:	b538      	push	{r3, r4, r5, lr}
 80098de:	4d07      	ldr	r5, [pc, #28]	; (80098fc <_write_r+0x20>)
 80098e0:	4604      	mov	r4, r0
 80098e2:	4608      	mov	r0, r1
 80098e4:	4611      	mov	r1, r2
 80098e6:	2200      	movs	r2, #0
 80098e8:	602a      	str	r2, [r5, #0]
 80098ea:	461a      	mov	r2, r3
 80098ec:	f7f7 fcb2 	bl	8001254 <_write>
 80098f0:	1c43      	adds	r3, r0, #1
 80098f2:	d102      	bne.n	80098fa <_write_r+0x1e>
 80098f4:	682b      	ldr	r3, [r5, #0]
 80098f6:	b103      	cbz	r3, 80098fa <_write_r+0x1e>
 80098f8:	6023      	str	r3, [r4, #0]
 80098fa:	bd38      	pop	{r3, r4, r5, pc}
 80098fc:	20001a64 	.word	0x20001a64

08009900 <__assert_func>:
 8009900:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009902:	4614      	mov	r4, r2
 8009904:	461a      	mov	r2, r3
 8009906:	4b09      	ldr	r3, [pc, #36]	; (800992c <__assert_func+0x2c>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	4605      	mov	r5, r0
 800990c:	68d8      	ldr	r0, [r3, #12]
 800990e:	b14c      	cbz	r4, 8009924 <__assert_func+0x24>
 8009910:	4b07      	ldr	r3, [pc, #28]	; (8009930 <__assert_func+0x30>)
 8009912:	9100      	str	r1, [sp, #0]
 8009914:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009918:	4906      	ldr	r1, [pc, #24]	; (8009934 <__assert_func+0x34>)
 800991a:	462b      	mov	r3, r5
 800991c:	f000 f8dc 	bl	8009ad8 <fiprintf>
 8009920:	f000 fe76 	bl	800a610 <abort>
 8009924:	4b04      	ldr	r3, [pc, #16]	; (8009938 <__assert_func+0x38>)
 8009926:	461c      	mov	r4, r3
 8009928:	e7f3      	b.n	8009912 <__assert_func+0x12>
 800992a:	bf00      	nop
 800992c:	20000010 	.word	0x20000010
 8009930:	0800b0ec 	.word	0x0800b0ec
 8009934:	0800b0f9 	.word	0x0800b0f9
 8009938:	0800b127 	.word	0x0800b127

0800993c <_close_r>:
 800993c:	b538      	push	{r3, r4, r5, lr}
 800993e:	4d06      	ldr	r5, [pc, #24]	; (8009958 <_close_r+0x1c>)
 8009940:	2300      	movs	r3, #0
 8009942:	4604      	mov	r4, r0
 8009944:	4608      	mov	r0, r1
 8009946:	602b      	str	r3, [r5, #0]
 8009948:	f7f7 fca0 	bl	800128c <_close>
 800994c:	1c43      	adds	r3, r0, #1
 800994e:	d102      	bne.n	8009956 <_close_r+0x1a>
 8009950:	682b      	ldr	r3, [r5, #0]
 8009952:	b103      	cbz	r3, 8009956 <_close_r+0x1a>
 8009954:	6023      	str	r3, [r4, #0]
 8009956:	bd38      	pop	{r3, r4, r5, pc}
 8009958:	20001a64 	.word	0x20001a64

0800995c <__sflush_r>:
 800995c:	898a      	ldrh	r2, [r1, #12]
 800995e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009960:	4605      	mov	r5, r0
 8009962:	0710      	lsls	r0, r2, #28
 8009964:	460c      	mov	r4, r1
 8009966:	d457      	bmi.n	8009a18 <__sflush_r+0xbc>
 8009968:	684b      	ldr	r3, [r1, #4]
 800996a:	2b00      	cmp	r3, #0
 800996c:	dc04      	bgt.n	8009978 <__sflush_r+0x1c>
 800996e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009970:	2b00      	cmp	r3, #0
 8009972:	dc01      	bgt.n	8009978 <__sflush_r+0x1c>
 8009974:	2000      	movs	r0, #0
 8009976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009978:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800997a:	2e00      	cmp	r6, #0
 800997c:	d0fa      	beq.n	8009974 <__sflush_r+0x18>
 800997e:	2300      	movs	r3, #0
 8009980:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009984:	682f      	ldr	r7, [r5, #0]
 8009986:	602b      	str	r3, [r5, #0]
 8009988:	d032      	beq.n	80099f0 <__sflush_r+0x94>
 800998a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800998c:	89a3      	ldrh	r3, [r4, #12]
 800998e:	075a      	lsls	r2, r3, #29
 8009990:	d505      	bpl.n	800999e <__sflush_r+0x42>
 8009992:	6863      	ldr	r3, [r4, #4]
 8009994:	1ac0      	subs	r0, r0, r3
 8009996:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009998:	b10b      	cbz	r3, 800999e <__sflush_r+0x42>
 800999a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800999c:	1ac0      	subs	r0, r0, r3
 800999e:	2300      	movs	r3, #0
 80099a0:	4602      	mov	r2, r0
 80099a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80099a4:	6a21      	ldr	r1, [r4, #32]
 80099a6:	4628      	mov	r0, r5
 80099a8:	47b0      	blx	r6
 80099aa:	1c43      	adds	r3, r0, #1
 80099ac:	89a3      	ldrh	r3, [r4, #12]
 80099ae:	d106      	bne.n	80099be <__sflush_r+0x62>
 80099b0:	6829      	ldr	r1, [r5, #0]
 80099b2:	291d      	cmp	r1, #29
 80099b4:	d82c      	bhi.n	8009a10 <__sflush_r+0xb4>
 80099b6:	4a29      	ldr	r2, [pc, #164]	; (8009a5c <__sflush_r+0x100>)
 80099b8:	40ca      	lsrs	r2, r1
 80099ba:	07d6      	lsls	r6, r2, #31
 80099bc:	d528      	bpl.n	8009a10 <__sflush_r+0xb4>
 80099be:	2200      	movs	r2, #0
 80099c0:	6062      	str	r2, [r4, #4]
 80099c2:	04d9      	lsls	r1, r3, #19
 80099c4:	6922      	ldr	r2, [r4, #16]
 80099c6:	6022      	str	r2, [r4, #0]
 80099c8:	d504      	bpl.n	80099d4 <__sflush_r+0x78>
 80099ca:	1c42      	adds	r2, r0, #1
 80099cc:	d101      	bne.n	80099d2 <__sflush_r+0x76>
 80099ce:	682b      	ldr	r3, [r5, #0]
 80099d0:	b903      	cbnz	r3, 80099d4 <__sflush_r+0x78>
 80099d2:	6560      	str	r0, [r4, #84]	; 0x54
 80099d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80099d6:	602f      	str	r7, [r5, #0]
 80099d8:	2900      	cmp	r1, #0
 80099da:	d0cb      	beq.n	8009974 <__sflush_r+0x18>
 80099dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80099e0:	4299      	cmp	r1, r3
 80099e2:	d002      	beq.n	80099ea <__sflush_r+0x8e>
 80099e4:	4628      	mov	r0, r5
 80099e6:	f000 f8af 	bl	8009b48 <_free_r>
 80099ea:	2000      	movs	r0, #0
 80099ec:	6360      	str	r0, [r4, #52]	; 0x34
 80099ee:	e7c2      	b.n	8009976 <__sflush_r+0x1a>
 80099f0:	6a21      	ldr	r1, [r4, #32]
 80099f2:	2301      	movs	r3, #1
 80099f4:	4628      	mov	r0, r5
 80099f6:	47b0      	blx	r6
 80099f8:	1c41      	adds	r1, r0, #1
 80099fa:	d1c7      	bne.n	800998c <__sflush_r+0x30>
 80099fc:	682b      	ldr	r3, [r5, #0]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d0c4      	beq.n	800998c <__sflush_r+0x30>
 8009a02:	2b1d      	cmp	r3, #29
 8009a04:	d001      	beq.n	8009a0a <__sflush_r+0xae>
 8009a06:	2b16      	cmp	r3, #22
 8009a08:	d101      	bne.n	8009a0e <__sflush_r+0xb2>
 8009a0a:	602f      	str	r7, [r5, #0]
 8009a0c:	e7b2      	b.n	8009974 <__sflush_r+0x18>
 8009a0e:	89a3      	ldrh	r3, [r4, #12]
 8009a10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a14:	81a3      	strh	r3, [r4, #12]
 8009a16:	e7ae      	b.n	8009976 <__sflush_r+0x1a>
 8009a18:	690f      	ldr	r7, [r1, #16]
 8009a1a:	2f00      	cmp	r7, #0
 8009a1c:	d0aa      	beq.n	8009974 <__sflush_r+0x18>
 8009a1e:	0793      	lsls	r3, r2, #30
 8009a20:	680e      	ldr	r6, [r1, #0]
 8009a22:	bf08      	it	eq
 8009a24:	694b      	ldreq	r3, [r1, #20]
 8009a26:	600f      	str	r7, [r1, #0]
 8009a28:	bf18      	it	ne
 8009a2a:	2300      	movne	r3, #0
 8009a2c:	1bf6      	subs	r6, r6, r7
 8009a2e:	608b      	str	r3, [r1, #8]
 8009a30:	2e00      	cmp	r6, #0
 8009a32:	dd9f      	ble.n	8009974 <__sflush_r+0x18>
 8009a34:	6a21      	ldr	r1, [r4, #32]
 8009a36:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009a3a:	4633      	mov	r3, r6
 8009a3c:	463a      	mov	r2, r7
 8009a3e:	4628      	mov	r0, r5
 8009a40:	47e0      	blx	ip
 8009a42:	2800      	cmp	r0, #0
 8009a44:	dc06      	bgt.n	8009a54 <__sflush_r+0xf8>
 8009a46:	89a3      	ldrh	r3, [r4, #12]
 8009a48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a4c:	81a3      	strh	r3, [r4, #12]
 8009a4e:	f04f 30ff 	mov.w	r0, #4294967295
 8009a52:	e790      	b.n	8009976 <__sflush_r+0x1a>
 8009a54:	4407      	add	r7, r0
 8009a56:	1a36      	subs	r6, r6, r0
 8009a58:	e7ea      	b.n	8009a30 <__sflush_r+0xd4>
 8009a5a:	bf00      	nop
 8009a5c:	20400001 	.word	0x20400001

08009a60 <_fflush_r>:
 8009a60:	b538      	push	{r3, r4, r5, lr}
 8009a62:	690b      	ldr	r3, [r1, #16]
 8009a64:	4605      	mov	r5, r0
 8009a66:	460c      	mov	r4, r1
 8009a68:	b913      	cbnz	r3, 8009a70 <_fflush_r+0x10>
 8009a6a:	2500      	movs	r5, #0
 8009a6c:	4628      	mov	r0, r5
 8009a6e:	bd38      	pop	{r3, r4, r5, pc}
 8009a70:	b118      	cbz	r0, 8009a7a <_fflush_r+0x1a>
 8009a72:	6983      	ldr	r3, [r0, #24]
 8009a74:	b90b      	cbnz	r3, 8009a7a <_fflush_r+0x1a>
 8009a76:	f7ff fc5f 	bl	8009338 <__sinit>
 8009a7a:	4b14      	ldr	r3, [pc, #80]	; (8009acc <_fflush_r+0x6c>)
 8009a7c:	429c      	cmp	r4, r3
 8009a7e:	d11b      	bne.n	8009ab8 <_fflush_r+0x58>
 8009a80:	686c      	ldr	r4, [r5, #4]
 8009a82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d0ef      	beq.n	8009a6a <_fflush_r+0xa>
 8009a8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009a8c:	07d0      	lsls	r0, r2, #31
 8009a8e:	d404      	bmi.n	8009a9a <_fflush_r+0x3a>
 8009a90:	0599      	lsls	r1, r3, #22
 8009a92:	d402      	bmi.n	8009a9a <_fflush_r+0x3a>
 8009a94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a96:	f7ff fd12 	bl	80094be <__retarget_lock_acquire_recursive>
 8009a9a:	4628      	mov	r0, r5
 8009a9c:	4621      	mov	r1, r4
 8009a9e:	f7ff ff5d 	bl	800995c <__sflush_r>
 8009aa2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009aa4:	07da      	lsls	r2, r3, #31
 8009aa6:	4605      	mov	r5, r0
 8009aa8:	d4e0      	bmi.n	8009a6c <_fflush_r+0xc>
 8009aaa:	89a3      	ldrh	r3, [r4, #12]
 8009aac:	059b      	lsls	r3, r3, #22
 8009aae:	d4dd      	bmi.n	8009a6c <_fflush_r+0xc>
 8009ab0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ab2:	f7ff fd05 	bl	80094c0 <__retarget_lock_release_recursive>
 8009ab6:	e7d9      	b.n	8009a6c <_fflush_r+0xc>
 8009ab8:	4b05      	ldr	r3, [pc, #20]	; (8009ad0 <_fflush_r+0x70>)
 8009aba:	429c      	cmp	r4, r3
 8009abc:	d101      	bne.n	8009ac2 <_fflush_r+0x62>
 8009abe:	68ac      	ldr	r4, [r5, #8]
 8009ac0:	e7df      	b.n	8009a82 <_fflush_r+0x22>
 8009ac2:	4b04      	ldr	r3, [pc, #16]	; (8009ad4 <_fflush_r+0x74>)
 8009ac4:	429c      	cmp	r4, r3
 8009ac6:	bf08      	it	eq
 8009ac8:	68ec      	ldreq	r4, [r5, #12]
 8009aca:	e7da      	b.n	8009a82 <_fflush_r+0x22>
 8009acc:	0800b034 	.word	0x0800b034
 8009ad0:	0800b054 	.word	0x0800b054
 8009ad4:	0800b014 	.word	0x0800b014

08009ad8 <fiprintf>:
 8009ad8:	b40e      	push	{r1, r2, r3}
 8009ada:	b503      	push	{r0, r1, lr}
 8009adc:	4601      	mov	r1, r0
 8009ade:	ab03      	add	r3, sp, #12
 8009ae0:	4805      	ldr	r0, [pc, #20]	; (8009af8 <fiprintf+0x20>)
 8009ae2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ae6:	6800      	ldr	r0, [r0, #0]
 8009ae8:	9301      	str	r3, [sp, #4]
 8009aea:	f000 f9fb 	bl	8009ee4 <_vfiprintf_r>
 8009aee:	b002      	add	sp, #8
 8009af0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009af4:	b003      	add	sp, #12
 8009af6:	4770      	bx	lr
 8009af8:	20000010 	.word	0x20000010

08009afc <_lseek_r>:
 8009afc:	b538      	push	{r3, r4, r5, lr}
 8009afe:	4d07      	ldr	r5, [pc, #28]	; (8009b1c <_lseek_r+0x20>)
 8009b00:	4604      	mov	r4, r0
 8009b02:	4608      	mov	r0, r1
 8009b04:	4611      	mov	r1, r2
 8009b06:	2200      	movs	r2, #0
 8009b08:	602a      	str	r2, [r5, #0]
 8009b0a:	461a      	mov	r2, r3
 8009b0c:	f7f7 fbe2 	bl	80012d4 <_lseek>
 8009b10:	1c43      	adds	r3, r0, #1
 8009b12:	d102      	bne.n	8009b1a <_lseek_r+0x1e>
 8009b14:	682b      	ldr	r3, [r5, #0]
 8009b16:	b103      	cbz	r3, 8009b1a <_lseek_r+0x1e>
 8009b18:	6023      	str	r3, [r4, #0]
 8009b1a:	bd38      	pop	{r3, r4, r5, pc}
 8009b1c:	20001a64 	.word	0x20001a64

08009b20 <malloc>:
 8009b20:	4b02      	ldr	r3, [pc, #8]	; (8009b2c <malloc+0xc>)
 8009b22:	4601      	mov	r1, r0
 8009b24:	6818      	ldr	r0, [r3, #0]
 8009b26:	f7ff bd03 	b.w	8009530 <_malloc_r>
 8009b2a:	bf00      	nop
 8009b2c:	20000010 	.word	0x20000010

08009b30 <__malloc_lock>:
 8009b30:	4801      	ldr	r0, [pc, #4]	; (8009b38 <__malloc_lock+0x8>)
 8009b32:	f7ff bcc4 	b.w	80094be <__retarget_lock_acquire_recursive>
 8009b36:	bf00      	nop
 8009b38:	20001a58 	.word	0x20001a58

08009b3c <__malloc_unlock>:
 8009b3c:	4801      	ldr	r0, [pc, #4]	; (8009b44 <__malloc_unlock+0x8>)
 8009b3e:	f7ff bcbf 	b.w	80094c0 <__retarget_lock_release_recursive>
 8009b42:	bf00      	nop
 8009b44:	20001a58 	.word	0x20001a58

08009b48 <_free_r>:
 8009b48:	b538      	push	{r3, r4, r5, lr}
 8009b4a:	4605      	mov	r5, r0
 8009b4c:	2900      	cmp	r1, #0
 8009b4e:	d041      	beq.n	8009bd4 <_free_r+0x8c>
 8009b50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b54:	1f0c      	subs	r4, r1, #4
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	bfb8      	it	lt
 8009b5a:	18e4      	addlt	r4, r4, r3
 8009b5c:	f7ff ffe8 	bl	8009b30 <__malloc_lock>
 8009b60:	4a1d      	ldr	r2, [pc, #116]	; (8009bd8 <_free_r+0x90>)
 8009b62:	6813      	ldr	r3, [r2, #0]
 8009b64:	b933      	cbnz	r3, 8009b74 <_free_r+0x2c>
 8009b66:	6063      	str	r3, [r4, #4]
 8009b68:	6014      	str	r4, [r2, #0]
 8009b6a:	4628      	mov	r0, r5
 8009b6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b70:	f7ff bfe4 	b.w	8009b3c <__malloc_unlock>
 8009b74:	42a3      	cmp	r3, r4
 8009b76:	d908      	bls.n	8009b8a <_free_r+0x42>
 8009b78:	6820      	ldr	r0, [r4, #0]
 8009b7a:	1821      	adds	r1, r4, r0
 8009b7c:	428b      	cmp	r3, r1
 8009b7e:	bf01      	itttt	eq
 8009b80:	6819      	ldreq	r1, [r3, #0]
 8009b82:	685b      	ldreq	r3, [r3, #4]
 8009b84:	1809      	addeq	r1, r1, r0
 8009b86:	6021      	streq	r1, [r4, #0]
 8009b88:	e7ed      	b.n	8009b66 <_free_r+0x1e>
 8009b8a:	461a      	mov	r2, r3
 8009b8c:	685b      	ldr	r3, [r3, #4]
 8009b8e:	b10b      	cbz	r3, 8009b94 <_free_r+0x4c>
 8009b90:	42a3      	cmp	r3, r4
 8009b92:	d9fa      	bls.n	8009b8a <_free_r+0x42>
 8009b94:	6811      	ldr	r1, [r2, #0]
 8009b96:	1850      	adds	r0, r2, r1
 8009b98:	42a0      	cmp	r0, r4
 8009b9a:	d10b      	bne.n	8009bb4 <_free_r+0x6c>
 8009b9c:	6820      	ldr	r0, [r4, #0]
 8009b9e:	4401      	add	r1, r0
 8009ba0:	1850      	adds	r0, r2, r1
 8009ba2:	4283      	cmp	r3, r0
 8009ba4:	6011      	str	r1, [r2, #0]
 8009ba6:	d1e0      	bne.n	8009b6a <_free_r+0x22>
 8009ba8:	6818      	ldr	r0, [r3, #0]
 8009baa:	685b      	ldr	r3, [r3, #4]
 8009bac:	6053      	str	r3, [r2, #4]
 8009bae:	4401      	add	r1, r0
 8009bb0:	6011      	str	r1, [r2, #0]
 8009bb2:	e7da      	b.n	8009b6a <_free_r+0x22>
 8009bb4:	d902      	bls.n	8009bbc <_free_r+0x74>
 8009bb6:	230c      	movs	r3, #12
 8009bb8:	602b      	str	r3, [r5, #0]
 8009bba:	e7d6      	b.n	8009b6a <_free_r+0x22>
 8009bbc:	6820      	ldr	r0, [r4, #0]
 8009bbe:	1821      	adds	r1, r4, r0
 8009bc0:	428b      	cmp	r3, r1
 8009bc2:	bf04      	itt	eq
 8009bc4:	6819      	ldreq	r1, [r3, #0]
 8009bc6:	685b      	ldreq	r3, [r3, #4]
 8009bc8:	6063      	str	r3, [r4, #4]
 8009bca:	bf04      	itt	eq
 8009bcc:	1809      	addeq	r1, r1, r0
 8009bce:	6021      	streq	r1, [r4, #0]
 8009bd0:	6054      	str	r4, [r2, #4]
 8009bd2:	e7ca      	b.n	8009b6a <_free_r+0x22>
 8009bd4:	bd38      	pop	{r3, r4, r5, pc}
 8009bd6:	bf00      	nop
 8009bd8:	20001a5c 	.word	0x20001a5c

08009bdc <__ssputs_r>:
 8009bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009be0:	688e      	ldr	r6, [r1, #8]
 8009be2:	429e      	cmp	r6, r3
 8009be4:	4682      	mov	sl, r0
 8009be6:	460c      	mov	r4, r1
 8009be8:	4690      	mov	r8, r2
 8009bea:	461f      	mov	r7, r3
 8009bec:	d838      	bhi.n	8009c60 <__ssputs_r+0x84>
 8009bee:	898a      	ldrh	r2, [r1, #12]
 8009bf0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009bf4:	d032      	beq.n	8009c5c <__ssputs_r+0x80>
 8009bf6:	6825      	ldr	r5, [r4, #0]
 8009bf8:	6909      	ldr	r1, [r1, #16]
 8009bfa:	eba5 0901 	sub.w	r9, r5, r1
 8009bfe:	6965      	ldr	r5, [r4, #20]
 8009c00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009c08:	3301      	adds	r3, #1
 8009c0a:	444b      	add	r3, r9
 8009c0c:	106d      	asrs	r5, r5, #1
 8009c0e:	429d      	cmp	r5, r3
 8009c10:	bf38      	it	cc
 8009c12:	461d      	movcc	r5, r3
 8009c14:	0553      	lsls	r3, r2, #21
 8009c16:	d531      	bpl.n	8009c7c <__ssputs_r+0xa0>
 8009c18:	4629      	mov	r1, r5
 8009c1a:	f7ff fc89 	bl	8009530 <_malloc_r>
 8009c1e:	4606      	mov	r6, r0
 8009c20:	b950      	cbnz	r0, 8009c38 <__ssputs_r+0x5c>
 8009c22:	230c      	movs	r3, #12
 8009c24:	f8ca 3000 	str.w	r3, [sl]
 8009c28:	89a3      	ldrh	r3, [r4, #12]
 8009c2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c2e:	81a3      	strh	r3, [r4, #12]
 8009c30:	f04f 30ff 	mov.w	r0, #4294967295
 8009c34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c38:	6921      	ldr	r1, [r4, #16]
 8009c3a:	464a      	mov	r2, r9
 8009c3c:	f7ff fc41 	bl	80094c2 <memcpy>
 8009c40:	89a3      	ldrh	r3, [r4, #12]
 8009c42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009c46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c4a:	81a3      	strh	r3, [r4, #12]
 8009c4c:	6126      	str	r6, [r4, #16]
 8009c4e:	6165      	str	r5, [r4, #20]
 8009c50:	444e      	add	r6, r9
 8009c52:	eba5 0509 	sub.w	r5, r5, r9
 8009c56:	6026      	str	r6, [r4, #0]
 8009c58:	60a5      	str	r5, [r4, #8]
 8009c5a:	463e      	mov	r6, r7
 8009c5c:	42be      	cmp	r6, r7
 8009c5e:	d900      	bls.n	8009c62 <__ssputs_r+0x86>
 8009c60:	463e      	mov	r6, r7
 8009c62:	6820      	ldr	r0, [r4, #0]
 8009c64:	4632      	mov	r2, r6
 8009c66:	4641      	mov	r1, r8
 8009c68:	f000 fd3e 	bl	800a6e8 <memmove>
 8009c6c:	68a3      	ldr	r3, [r4, #8]
 8009c6e:	1b9b      	subs	r3, r3, r6
 8009c70:	60a3      	str	r3, [r4, #8]
 8009c72:	6823      	ldr	r3, [r4, #0]
 8009c74:	4433      	add	r3, r6
 8009c76:	6023      	str	r3, [r4, #0]
 8009c78:	2000      	movs	r0, #0
 8009c7a:	e7db      	b.n	8009c34 <__ssputs_r+0x58>
 8009c7c:	462a      	mov	r2, r5
 8009c7e:	f000 fd4d 	bl	800a71c <_realloc_r>
 8009c82:	4606      	mov	r6, r0
 8009c84:	2800      	cmp	r0, #0
 8009c86:	d1e1      	bne.n	8009c4c <__ssputs_r+0x70>
 8009c88:	6921      	ldr	r1, [r4, #16]
 8009c8a:	4650      	mov	r0, sl
 8009c8c:	f7ff ff5c 	bl	8009b48 <_free_r>
 8009c90:	e7c7      	b.n	8009c22 <__ssputs_r+0x46>
	...

08009c94 <_svfiprintf_r>:
 8009c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c98:	4698      	mov	r8, r3
 8009c9a:	898b      	ldrh	r3, [r1, #12]
 8009c9c:	061b      	lsls	r3, r3, #24
 8009c9e:	b09d      	sub	sp, #116	; 0x74
 8009ca0:	4607      	mov	r7, r0
 8009ca2:	460d      	mov	r5, r1
 8009ca4:	4614      	mov	r4, r2
 8009ca6:	d50e      	bpl.n	8009cc6 <_svfiprintf_r+0x32>
 8009ca8:	690b      	ldr	r3, [r1, #16]
 8009caa:	b963      	cbnz	r3, 8009cc6 <_svfiprintf_r+0x32>
 8009cac:	2140      	movs	r1, #64	; 0x40
 8009cae:	f7ff fc3f 	bl	8009530 <_malloc_r>
 8009cb2:	6028      	str	r0, [r5, #0]
 8009cb4:	6128      	str	r0, [r5, #16]
 8009cb6:	b920      	cbnz	r0, 8009cc2 <_svfiprintf_r+0x2e>
 8009cb8:	230c      	movs	r3, #12
 8009cba:	603b      	str	r3, [r7, #0]
 8009cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8009cc0:	e0d1      	b.n	8009e66 <_svfiprintf_r+0x1d2>
 8009cc2:	2340      	movs	r3, #64	; 0x40
 8009cc4:	616b      	str	r3, [r5, #20]
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	9309      	str	r3, [sp, #36]	; 0x24
 8009cca:	2320      	movs	r3, #32
 8009ccc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009cd0:	f8cd 800c 	str.w	r8, [sp, #12]
 8009cd4:	2330      	movs	r3, #48	; 0x30
 8009cd6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009e80 <_svfiprintf_r+0x1ec>
 8009cda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009cde:	f04f 0901 	mov.w	r9, #1
 8009ce2:	4623      	mov	r3, r4
 8009ce4:	469a      	mov	sl, r3
 8009ce6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cea:	b10a      	cbz	r2, 8009cf0 <_svfiprintf_r+0x5c>
 8009cec:	2a25      	cmp	r2, #37	; 0x25
 8009cee:	d1f9      	bne.n	8009ce4 <_svfiprintf_r+0x50>
 8009cf0:	ebba 0b04 	subs.w	fp, sl, r4
 8009cf4:	d00b      	beq.n	8009d0e <_svfiprintf_r+0x7a>
 8009cf6:	465b      	mov	r3, fp
 8009cf8:	4622      	mov	r2, r4
 8009cfa:	4629      	mov	r1, r5
 8009cfc:	4638      	mov	r0, r7
 8009cfe:	f7ff ff6d 	bl	8009bdc <__ssputs_r>
 8009d02:	3001      	adds	r0, #1
 8009d04:	f000 80aa 	beq.w	8009e5c <_svfiprintf_r+0x1c8>
 8009d08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d0a:	445a      	add	r2, fp
 8009d0c:	9209      	str	r2, [sp, #36]	; 0x24
 8009d0e:	f89a 3000 	ldrb.w	r3, [sl]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	f000 80a2 	beq.w	8009e5c <_svfiprintf_r+0x1c8>
 8009d18:	2300      	movs	r3, #0
 8009d1a:	f04f 32ff 	mov.w	r2, #4294967295
 8009d1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d22:	f10a 0a01 	add.w	sl, sl, #1
 8009d26:	9304      	str	r3, [sp, #16]
 8009d28:	9307      	str	r3, [sp, #28]
 8009d2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d2e:	931a      	str	r3, [sp, #104]	; 0x68
 8009d30:	4654      	mov	r4, sl
 8009d32:	2205      	movs	r2, #5
 8009d34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d38:	4851      	ldr	r0, [pc, #324]	; (8009e80 <_svfiprintf_r+0x1ec>)
 8009d3a:	f7f6 fa29 	bl	8000190 <memchr>
 8009d3e:	9a04      	ldr	r2, [sp, #16]
 8009d40:	b9d8      	cbnz	r0, 8009d7a <_svfiprintf_r+0xe6>
 8009d42:	06d0      	lsls	r0, r2, #27
 8009d44:	bf44      	itt	mi
 8009d46:	2320      	movmi	r3, #32
 8009d48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d4c:	0711      	lsls	r1, r2, #28
 8009d4e:	bf44      	itt	mi
 8009d50:	232b      	movmi	r3, #43	; 0x2b
 8009d52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d56:	f89a 3000 	ldrb.w	r3, [sl]
 8009d5a:	2b2a      	cmp	r3, #42	; 0x2a
 8009d5c:	d015      	beq.n	8009d8a <_svfiprintf_r+0xf6>
 8009d5e:	9a07      	ldr	r2, [sp, #28]
 8009d60:	4654      	mov	r4, sl
 8009d62:	2000      	movs	r0, #0
 8009d64:	f04f 0c0a 	mov.w	ip, #10
 8009d68:	4621      	mov	r1, r4
 8009d6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d6e:	3b30      	subs	r3, #48	; 0x30
 8009d70:	2b09      	cmp	r3, #9
 8009d72:	d94e      	bls.n	8009e12 <_svfiprintf_r+0x17e>
 8009d74:	b1b0      	cbz	r0, 8009da4 <_svfiprintf_r+0x110>
 8009d76:	9207      	str	r2, [sp, #28]
 8009d78:	e014      	b.n	8009da4 <_svfiprintf_r+0x110>
 8009d7a:	eba0 0308 	sub.w	r3, r0, r8
 8009d7e:	fa09 f303 	lsl.w	r3, r9, r3
 8009d82:	4313      	orrs	r3, r2
 8009d84:	9304      	str	r3, [sp, #16]
 8009d86:	46a2      	mov	sl, r4
 8009d88:	e7d2      	b.n	8009d30 <_svfiprintf_r+0x9c>
 8009d8a:	9b03      	ldr	r3, [sp, #12]
 8009d8c:	1d19      	adds	r1, r3, #4
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	9103      	str	r1, [sp, #12]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	bfbb      	ittet	lt
 8009d96:	425b      	neglt	r3, r3
 8009d98:	f042 0202 	orrlt.w	r2, r2, #2
 8009d9c:	9307      	strge	r3, [sp, #28]
 8009d9e:	9307      	strlt	r3, [sp, #28]
 8009da0:	bfb8      	it	lt
 8009da2:	9204      	strlt	r2, [sp, #16]
 8009da4:	7823      	ldrb	r3, [r4, #0]
 8009da6:	2b2e      	cmp	r3, #46	; 0x2e
 8009da8:	d10c      	bne.n	8009dc4 <_svfiprintf_r+0x130>
 8009daa:	7863      	ldrb	r3, [r4, #1]
 8009dac:	2b2a      	cmp	r3, #42	; 0x2a
 8009dae:	d135      	bne.n	8009e1c <_svfiprintf_r+0x188>
 8009db0:	9b03      	ldr	r3, [sp, #12]
 8009db2:	1d1a      	adds	r2, r3, #4
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	9203      	str	r2, [sp, #12]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	bfb8      	it	lt
 8009dbc:	f04f 33ff 	movlt.w	r3, #4294967295
 8009dc0:	3402      	adds	r4, #2
 8009dc2:	9305      	str	r3, [sp, #20]
 8009dc4:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8009e84 <_svfiprintf_r+0x1f0>
 8009dc8:	7821      	ldrb	r1, [r4, #0]
 8009dca:	2203      	movs	r2, #3
 8009dcc:	4650      	mov	r0, sl
 8009dce:	f7f6 f9df 	bl	8000190 <memchr>
 8009dd2:	b140      	cbz	r0, 8009de6 <_svfiprintf_r+0x152>
 8009dd4:	2340      	movs	r3, #64	; 0x40
 8009dd6:	eba0 000a 	sub.w	r0, r0, sl
 8009dda:	fa03 f000 	lsl.w	r0, r3, r0
 8009dde:	9b04      	ldr	r3, [sp, #16]
 8009de0:	4303      	orrs	r3, r0
 8009de2:	3401      	adds	r4, #1
 8009de4:	9304      	str	r3, [sp, #16]
 8009de6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dea:	4827      	ldr	r0, [pc, #156]	; (8009e88 <_svfiprintf_r+0x1f4>)
 8009dec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009df0:	2206      	movs	r2, #6
 8009df2:	f7f6 f9cd 	bl	8000190 <memchr>
 8009df6:	2800      	cmp	r0, #0
 8009df8:	d038      	beq.n	8009e6c <_svfiprintf_r+0x1d8>
 8009dfa:	4b24      	ldr	r3, [pc, #144]	; (8009e8c <_svfiprintf_r+0x1f8>)
 8009dfc:	bb1b      	cbnz	r3, 8009e46 <_svfiprintf_r+0x1b2>
 8009dfe:	9b03      	ldr	r3, [sp, #12]
 8009e00:	3307      	adds	r3, #7
 8009e02:	f023 0307 	bic.w	r3, r3, #7
 8009e06:	3308      	adds	r3, #8
 8009e08:	9303      	str	r3, [sp, #12]
 8009e0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e0c:	4433      	add	r3, r6
 8009e0e:	9309      	str	r3, [sp, #36]	; 0x24
 8009e10:	e767      	b.n	8009ce2 <_svfiprintf_r+0x4e>
 8009e12:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e16:	460c      	mov	r4, r1
 8009e18:	2001      	movs	r0, #1
 8009e1a:	e7a5      	b.n	8009d68 <_svfiprintf_r+0xd4>
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	3401      	adds	r4, #1
 8009e20:	9305      	str	r3, [sp, #20]
 8009e22:	4619      	mov	r1, r3
 8009e24:	f04f 0c0a 	mov.w	ip, #10
 8009e28:	4620      	mov	r0, r4
 8009e2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e2e:	3a30      	subs	r2, #48	; 0x30
 8009e30:	2a09      	cmp	r2, #9
 8009e32:	d903      	bls.n	8009e3c <_svfiprintf_r+0x1a8>
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d0c5      	beq.n	8009dc4 <_svfiprintf_r+0x130>
 8009e38:	9105      	str	r1, [sp, #20]
 8009e3a:	e7c3      	b.n	8009dc4 <_svfiprintf_r+0x130>
 8009e3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e40:	4604      	mov	r4, r0
 8009e42:	2301      	movs	r3, #1
 8009e44:	e7f0      	b.n	8009e28 <_svfiprintf_r+0x194>
 8009e46:	ab03      	add	r3, sp, #12
 8009e48:	9300      	str	r3, [sp, #0]
 8009e4a:	462a      	mov	r2, r5
 8009e4c:	4b10      	ldr	r3, [pc, #64]	; (8009e90 <_svfiprintf_r+0x1fc>)
 8009e4e:	a904      	add	r1, sp, #16
 8009e50:	4638      	mov	r0, r7
 8009e52:	f3af 8000 	nop.w
 8009e56:	1c42      	adds	r2, r0, #1
 8009e58:	4606      	mov	r6, r0
 8009e5a:	d1d6      	bne.n	8009e0a <_svfiprintf_r+0x176>
 8009e5c:	89ab      	ldrh	r3, [r5, #12]
 8009e5e:	065b      	lsls	r3, r3, #25
 8009e60:	f53f af2c 	bmi.w	8009cbc <_svfiprintf_r+0x28>
 8009e64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e66:	b01d      	add	sp, #116	; 0x74
 8009e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e6c:	ab03      	add	r3, sp, #12
 8009e6e:	9300      	str	r3, [sp, #0]
 8009e70:	462a      	mov	r2, r5
 8009e72:	4b07      	ldr	r3, [pc, #28]	; (8009e90 <_svfiprintf_r+0x1fc>)
 8009e74:	a904      	add	r1, sp, #16
 8009e76:	4638      	mov	r0, r7
 8009e78:	f000 f9d2 	bl	800a220 <_printf_i>
 8009e7c:	e7eb      	b.n	8009e56 <_svfiprintf_r+0x1c2>
 8009e7e:	bf00      	nop
 8009e80:	0800b128 	.word	0x0800b128
 8009e84:	0800b12e 	.word	0x0800b12e
 8009e88:	0800b132 	.word	0x0800b132
 8009e8c:	00000000 	.word	0x00000000
 8009e90:	08009bdd 	.word	0x08009bdd

08009e94 <__sfputc_r>:
 8009e94:	6893      	ldr	r3, [r2, #8]
 8009e96:	3b01      	subs	r3, #1
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	b410      	push	{r4}
 8009e9c:	6093      	str	r3, [r2, #8]
 8009e9e:	da07      	bge.n	8009eb0 <__sfputc_r+0x1c>
 8009ea0:	6994      	ldr	r4, [r2, #24]
 8009ea2:	42a3      	cmp	r3, r4
 8009ea4:	db01      	blt.n	8009eaa <__sfputc_r+0x16>
 8009ea6:	290a      	cmp	r1, #10
 8009ea8:	d102      	bne.n	8009eb0 <__sfputc_r+0x1c>
 8009eaa:	bc10      	pop	{r4}
 8009eac:	f000 baf0 	b.w	800a490 <__swbuf_r>
 8009eb0:	6813      	ldr	r3, [r2, #0]
 8009eb2:	1c58      	adds	r0, r3, #1
 8009eb4:	6010      	str	r0, [r2, #0]
 8009eb6:	7019      	strb	r1, [r3, #0]
 8009eb8:	4608      	mov	r0, r1
 8009eba:	bc10      	pop	{r4}
 8009ebc:	4770      	bx	lr

08009ebe <__sfputs_r>:
 8009ebe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ec0:	4606      	mov	r6, r0
 8009ec2:	460f      	mov	r7, r1
 8009ec4:	4614      	mov	r4, r2
 8009ec6:	18d5      	adds	r5, r2, r3
 8009ec8:	42ac      	cmp	r4, r5
 8009eca:	d101      	bne.n	8009ed0 <__sfputs_r+0x12>
 8009ecc:	2000      	movs	r0, #0
 8009ece:	e007      	b.n	8009ee0 <__sfputs_r+0x22>
 8009ed0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ed4:	463a      	mov	r2, r7
 8009ed6:	4630      	mov	r0, r6
 8009ed8:	f7ff ffdc 	bl	8009e94 <__sfputc_r>
 8009edc:	1c43      	adds	r3, r0, #1
 8009ede:	d1f3      	bne.n	8009ec8 <__sfputs_r+0xa>
 8009ee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009ee4 <_vfiprintf_r>:
 8009ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ee8:	460d      	mov	r5, r1
 8009eea:	b09d      	sub	sp, #116	; 0x74
 8009eec:	4614      	mov	r4, r2
 8009eee:	4698      	mov	r8, r3
 8009ef0:	4606      	mov	r6, r0
 8009ef2:	b118      	cbz	r0, 8009efc <_vfiprintf_r+0x18>
 8009ef4:	6983      	ldr	r3, [r0, #24]
 8009ef6:	b90b      	cbnz	r3, 8009efc <_vfiprintf_r+0x18>
 8009ef8:	f7ff fa1e 	bl	8009338 <__sinit>
 8009efc:	4b89      	ldr	r3, [pc, #548]	; (800a124 <_vfiprintf_r+0x240>)
 8009efe:	429d      	cmp	r5, r3
 8009f00:	d11b      	bne.n	8009f3a <_vfiprintf_r+0x56>
 8009f02:	6875      	ldr	r5, [r6, #4]
 8009f04:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f06:	07d9      	lsls	r1, r3, #31
 8009f08:	d405      	bmi.n	8009f16 <_vfiprintf_r+0x32>
 8009f0a:	89ab      	ldrh	r3, [r5, #12]
 8009f0c:	059a      	lsls	r2, r3, #22
 8009f0e:	d402      	bmi.n	8009f16 <_vfiprintf_r+0x32>
 8009f10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f12:	f7ff fad4 	bl	80094be <__retarget_lock_acquire_recursive>
 8009f16:	89ab      	ldrh	r3, [r5, #12]
 8009f18:	071b      	lsls	r3, r3, #28
 8009f1a:	d501      	bpl.n	8009f20 <_vfiprintf_r+0x3c>
 8009f1c:	692b      	ldr	r3, [r5, #16]
 8009f1e:	b9eb      	cbnz	r3, 8009f5c <_vfiprintf_r+0x78>
 8009f20:	4629      	mov	r1, r5
 8009f22:	4630      	mov	r0, r6
 8009f24:	f000 fb06 	bl	800a534 <__swsetup_r>
 8009f28:	b1c0      	cbz	r0, 8009f5c <_vfiprintf_r+0x78>
 8009f2a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f2c:	07dc      	lsls	r4, r3, #31
 8009f2e:	d50e      	bpl.n	8009f4e <_vfiprintf_r+0x6a>
 8009f30:	f04f 30ff 	mov.w	r0, #4294967295
 8009f34:	b01d      	add	sp, #116	; 0x74
 8009f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f3a:	4b7b      	ldr	r3, [pc, #492]	; (800a128 <_vfiprintf_r+0x244>)
 8009f3c:	429d      	cmp	r5, r3
 8009f3e:	d101      	bne.n	8009f44 <_vfiprintf_r+0x60>
 8009f40:	68b5      	ldr	r5, [r6, #8]
 8009f42:	e7df      	b.n	8009f04 <_vfiprintf_r+0x20>
 8009f44:	4b79      	ldr	r3, [pc, #484]	; (800a12c <_vfiprintf_r+0x248>)
 8009f46:	429d      	cmp	r5, r3
 8009f48:	bf08      	it	eq
 8009f4a:	68f5      	ldreq	r5, [r6, #12]
 8009f4c:	e7da      	b.n	8009f04 <_vfiprintf_r+0x20>
 8009f4e:	89ab      	ldrh	r3, [r5, #12]
 8009f50:	0598      	lsls	r0, r3, #22
 8009f52:	d4ed      	bmi.n	8009f30 <_vfiprintf_r+0x4c>
 8009f54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f56:	f7ff fab3 	bl	80094c0 <__retarget_lock_release_recursive>
 8009f5a:	e7e9      	b.n	8009f30 <_vfiprintf_r+0x4c>
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	9309      	str	r3, [sp, #36]	; 0x24
 8009f60:	2320      	movs	r3, #32
 8009f62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f66:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f6a:	2330      	movs	r3, #48	; 0x30
 8009f6c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a130 <_vfiprintf_r+0x24c>
 8009f70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f74:	f04f 0901 	mov.w	r9, #1
 8009f78:	4623      	mov	r3, r4
 8009f7a:	469a      	mov	sl, r3
 8009f7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f80:	b10a      	cbz	r2, 8009f86 <_vfiprintf_r+0xa2>
 8009f82:	2a25      	cmp	r2, #37	; 0x25
 8009f84:	d1f9      	bne.n	8009f7a <_vfiprintf_r+0x96>
 8009f86:	ebba 0b04 	subs.w	fp, sl, r4
 8009f8a:	d00b      	beq.n	8009fa4 <_vfiprintf_r+0xc0>
 8009f8c:	465b      	mov	r3, fp
 8009f8e:	4622      	mov	r2, r4
 8009f90:	4629      	mov	r1, r5
 8009f92:	4630      	mov	r0, r6
 8009f94:	f7ff ff93 	bl	8009ebe <__sfputs_r>
 8009f98:	3001      	adds	r0, #1
 8009f9a:	f000 80aa 	beq.w	800a0f2 <_vfiprintf_r+0x20e>
 8009f9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009fa0:	445a      	add	r2, fp
 8009fa2:	9209      	str	r2, [sp, #36]	; 0x24
 8009fa4:	f89a 3000 	ldrb.w	r3, [sl]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	f000 80a2 	beq.w	800a0f2 <_vfiprintf_r+0x20e>
 8009fae:	2300      	movs	r3, #0
 8009fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8009fb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009fb8:	f10a 0a01 	add.w	sl, sl, #1
 8009fbc:	9304      	str	r3, [sp, #16]
 8009fbe:	9307      	str	r3, [sp, #28]
 8009fc0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009fc4:	931a      	str	r3, [sp, #104]	; 0x68
 8009fc6:	4654      	mov	r4, sl
 8009fc8:	2205      	movs	r2, #5
 8009fca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fce:	4858      	ldr	r0, [pc, #352]	; (800a130 <_vfiprintf_r+0x24c>)
 8009fd0:	f7f6 f8de 	bl	8000190 <memchr>
 8009fd4:	9a04      	ldr	r2, [sp, #16]
 8009fd6:	b9d8      	cbnz	r0, 800a010 <_vfiprintf_r+0x12c>
 8009fd8:	06d1      	lsls	r1, r2, #27
 8009fda:	bf44      	itt	mi
 8009fdc:	2320      	movmi	r3, #32
 8009fde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fe2:	0713      	lsls	r3, r2, #28
 8009fe4:	bf44      	itt	mi
 8009fe6:	232b      	movmi	r3, #43	; 0x2b
 8009fe8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fec:	f89a 3000 	ldrb.w	r3, [sl]
 8009ff0:	2b2a      	cmp	r3, #42	; 0x2a
 8009ff2:	d015      	beq.n	800a020 <_vfiprintf_r+0x13c>
 8009ff4:	9a07      	ldr	r2, [sp, #28]
 8009ff6:	4654      	mov	r4, sl
 8009ff8:	2000      	movs	r0, #0
 8009ffa:	f04f 0c0a 	mov.w	ip, #10
 8009ffe:	4621      	mov	r1, r4
 800a000:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a004:	3b30      	subs	r3, #48	; 0x30
 800a006:	2b09      	cmp	r3, #9
 800a008:	d94e      	bls.n	800a0a8 <_vfiprintf_r+0x1c4>
 800a00a:	b1b0      	cbz	r0, 800a03a <_vfiprintf_r+0x156>
 800a00c:	9207      	str	r2, [sp, #28]
 800a00e:	e014      	b.n	800a03a <_vfiprintf_r+0x156>
 800a010:	eba0 0308 	sub.w	r3, r0, r8
 800a014:	fa09 f303 	lsl.w	r3, r9, r3
 800a018:	4313      	orrs	r3, r2
 800a01a:	9304      	str	r3, [sp, #16]
 800a01c:	46a2      	mov	sl, r4
 800a01e:	e7d2      	b.n	8009fc6 <_vfiprintf_r+0xe2>
 800a020:	9b03      	ldr	r3, [sp, #12]
 800a022:	1d19      	adds	r1, r3, #4
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	9103      	str	r1, [sp, #12]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	bfbb      	ittet	lt
 800a02c:	425b      	neglt	r3, r3
 800a02e:	f042 0202 	orrlt.w	r2, r2, #2
 800a032:	9307      	strge	r3, [sp, #28]
 800a034:	9307      	strlt	r3, [sp, #28]
 800a036:	bfb8      	it	lt
 800a038:	9204      	strlt	r2, [sp, #16]
 800a03a:	7823      	ldrb	r3, [r4, #0]
 800a03c:	2b2e      	cmp	r3, #46	; 0x2e
 800a03e:	d10c      	bne.n	800a05a <_vfiprintf_r+0x176>
 800a040:	7863      	ldrb	r3, [r4, #1]
 800a042:	2b2a      	cmp	r3, #42	; 0x2a
 800a044:	d135      	bne.n	800a0b2 <_vfiprintf_r+0x1ce>
 800a046:	9b03      	ldr	r3, [sp, #12]
 800a048:	1d1a      	adds	r2, r3, #4
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	9203      	str	r2, [sp, #12]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	bfb8      	it	lt
 800a052:	f04f 33ff 	movlt.w	r3, #4294967295
 800a056:	3402      	adds	r4, #2
 800a058:	9305      	str	r3, [sp, #20]
 800a05a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800a134 <_vfiprintf_r+0x250>
 800a05e:	7821      	ldrb	r1, [r4, #0]
 800a060:	2203      	movs	r2, #3
 800a062:	4650      	mov	r0, sl
 800a064:	f7f6 f894 	bl	8000190 <memchr>
 800a068:	b140      	cbz	r0, 800a07c <_vfiprintf_r+0x198>
 800a06a:	2340      	movs	r3, #64	; 0x40
 800a06c:	eba0 000a 	sub.w	r0, r0, sl
 800a070:	fa03 f000 	lsl.w	r0, r3, r0
 800a074:	9b04      	ldr	r3, [sp, #16]
 800a076:	4303      	orrs	r3, r0
 800a078:	3401      	adds	r4, #1
 800a07a:	9304      	str	r3, [sp, #16]
 800a07c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a080:	482d      	ldr	r0, [pc, #180]	; (800a138 <_vfiprintf_r+0x254>)
 800a082:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a086:	2206      	movs	r2, #6
 800a088:	f7f6 f882 	bl	8000190 <memchr>
 800a08c:	2800      	cmp	r0, #0
 800a08e:	d03f      	beq.n	800a110 <_vfiprintf_r+0x22c>
 800a090:	4b2a      	ldr	r3, [pc, #168]	; (800a13c <_vfiprintf_r+0x258>)
 800a092:	bb1b      	cbnz	r3, 800a0dc <_vfiprintf_r+0x1f8>
 800a094:	9b03      	ldr	r3, [sp, #12]
 800a096:	3307      	adds	r3, #7
 800a098:	f023 0307 	bic.w	r3, r3, #7
 800a09c:	3308      	adds	r3, #8
 800a09e:	9303      	str	r3, [sp, #12]
 800a0a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0a2:	443b      	add	r3, r7
 800a0a4:	9309      	str	r3, [sp, #36]	; 0x24
 800a0a6:	e767      	b.n	8009f78 <_vfiprintf_r+0x94>
 800a0a8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0ac:	460c      	mov	r4, r1
 800a0ae:	2001      	movs	r0, #1
 800a0b0:	e7a5      	b.n	8009ffe <_vfiprintf_r+0x11a>
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	3401      	adds	r4, #1
 800a0b6:	9305      	str	r3, [sp, #20]
 800a0b8:	4619      	mov	r1, r3
 800a0ba:	f04f 0c0a 	mov.w	ip, #10
 800a0be:	4620      	mov	r0, r4
 800a0c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0c4:	3a30      	subs	r2, #48	; 0x30
 800a0c6:	2a09      	cmp	r2, #9
 800a0c8:	d903      	bls.n	800a0d2 <_vfiprintf_r+0x1ee>
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d0c5      	beq.n	800a05a <_vfiprintf_r+0x176>
 800a0ce:	9105      	str	r1, [sp, #20]
 800a0d0:	e7c3      	b.n	800a05a <_vfiprintf_r+0x176>
 800a0d2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a0d6:	4604      	mov	r4, r0
 800a0d8:	2301      	movs	r3, #1
 800a0da:	e7f0      	b.n	800a0be <_vfiprintf_r+0x1da>
 800a0dc:	ab03      	add	r3, sp, #12
 800a0de:	9300      	str	r3, [sp, #0]
 800a0e0:	462a      	mov	r2, r5
 800a0e2:	4b17      	ldr	r3, [pc, #92]	; (800a140 <_vfiprintf_r+0x25c>)
 800a0e4:	a904      	add	r1, sp, #16
 800a0e6:	4630      	mov	r0, r6
 800a0e8:	f3af 8000 	nop.w
 800a0ec:	4607      	mov	r7, r0
 800a0ee:	1c78      	adds	r0, r7, #1
 800a0f0:	d1d6      	bne.n	800a0a0 <_vfiprintf_r+0x1bc>
 800a0f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0f4:	07d9      	lsls	r1, r3, #31
 800a0f6:	d405      	bmi.n	800a104 <_vfiprintf_r+0x220>
 800a0f8:	89ab      	ldrh	r3, [r5, #12]
 800a0fa:	059a      	lsls	r2, r3, #22
 800a0fc:	d402      	bmi.n	800a104 <_vfiprintf_r+0x220>
 800a0fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a100:	f7ff f9de 	bl	80094c0 <__retarget_lock_release_recursive>
 800a104:	89ab      	ldrh	r3, [r5, #12]
 800a106:	065b      	lsls	r3, r3, #25
 800a108:	f53f af12 	bmi.w	8009f30 <_vfiprintf_r+0x4c>
 800a10c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a10e:	e711      	b.n	8009f34 <_vfiprintf_r+0x50>
 800a110:	ab03      	add	r3, sp, #12
 800a112:	9300      	str	r3, [sp, #0]
 800a114:	462a      	mov	r2, r5
 800a116:	4b0a      	ldr	r3, [pc, #40]	; (800a140 <_vfiprintf_r+0x25c>)
 800a118:	a904      	add	r1, sp, #16
 800a11a:	4630      	mov	r0, r6
 800a11c:	f000 f880 	bl	800a220 <_printf_i>
 800a120:	e7e4      	b.n	800a0ec <_vfiprintf_r+0x208>
 800a122:	bf00      	nop
 800a124:	0800b034 	.word	0x0800b034
 800a128:	0800b054 	.word	0x0800b054
 800a12c:	0800b014 	.word	0x0800b014
 800a130:	0800b128 	.word	0x0800b128
 800a134:	0800b12e 	.word	0x0800b12e
 800a138:	0800b132 	.word	0x0800b132
 800a13c:	00000000 	.word	0x00000000
 800a140:	08009ebf 	.word	0x08009ebf

0800a144 <_printf_common>:
 800a144:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a148:	4616      	mov	r6, r2
 800a14a:	4699      	mov	r9, r3
 800a14c:	688a      	ldr	r2, [r1, #8]
 800a14e:	690b      	ldr	r3, [r1, #16]
 800a150:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a154:	4293      	cmp	r3, r2
 800a156:	bfb8      	it	lt
 800a158:	4613      	movlt	r3, r2
 800a15a:	6033      	str	r3, [r6, #0]
 800a15c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a160:	4607      	mov	r7, r0
 800a162:	460c      	mov	r4, r1
 800a164:	b10a      	cbz	r2, 800a16a <_printf_common+0x26>
 800a166:	3301      	adds	r3, #1
 800a168:	6033      	str	r3, [r6, #0]
 800a16a:	6823      	ldr	r3, [r4, #0]
 800a16c:	0699      	lsls	r1, r3, #26
 800a16e:	bf42      	ittt	mi
 800a170:	6833      	ldrmi	r3, [r6, #0]
 800a172:	3302      	addmi	r3, #2
 800a174:	6033      	strmi	r3, [r6, #0]
 800a176:	6825      	ldr	r5, [r4, #0]
 800a178:	f015 0506 	ands.w	r5, r5, #6
 800a17c:	d106      	bne.n	800a18c <_printf_common+0x48>
 800a17e:	f104 0a19 	add.w	sl, r4, #25
 800a182:	68e3      	ldr	r3, [r4, #12]
 800a184:	6832      	ldr	r2, [r6, #0]
 800a186:	1a9b      	subs	r3, r3, r2
 800a188:	42ab      	cmp	r3, r5
 800a18a:	dc26      	bgt.n	800a1da <_printf_common+0x96>
 800a18c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a190:	1e13      	subs	r3, r2, #0
 800a192:	6822      	ldr	r2, [r4, #0]
 800a194:	bf18      	it	ne
 800a196:	2301      	movne	r3, #1
 800a198:	0692      	lsls	r2, r2, #26
 800a19a:	d42b      	bmi.n	800a1f4 <_printf_common+0xb0>
 800a19c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a1a0:	4649      	mov	r1, r9
 800a1a2:	4638      	mov	r0, r7
 800a1a4:	47c0      	blx	r8
 800a1a6:	3001      	adds	r0, #1
 800a1a8:	d01e      	beq.n	800a1e8 <_printf_common+0xa4>
 800a1aa:	6823      	ldr	r3, [r4, #0]
 800a1ac:	68e5      	ldr	r5, [r4, #12]
 800a1ae:	6832      	ldr	r2, [r6, #0]
 800a1b0:	f003 0306 	and.w	r3, r3, #6
 800a1b4:	2b04      	cmp	r3, #4
 800a1b6:	bf08      	it	eq
 800a1b8:	1aad      	subeq	r5, r5, r2
 800a1ba:	68a3      	ldr	r3, [r4, #8]
 800a1bc:	6922      	ldr	r2, [r4, #16]
 800a1be:	bf0c      	ite	eq
 800a1c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a1c4:	2500      	movne	r5, #0
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	bfc4      	itt	gt
 800a1ca:	1a9b      	subgt	r3, r3, r2
 800a1cc:	18ed      	addgt	r5, r5, r3
 800a1ce:	2600      	movs	r6, #0
 800a1d0:	341a      	adds	r4, #26
 800a1d2:	42b5      	cmp	r5, r6
 800a1d4:	d11a      	bne.n	800a20c <_printf_common+0xc8>
 800a1d6:	2000      	movs	r0, #0
 800a1d8:	e008      	b.n	800a1ec <_printf_common+0xa8>
 800a1da:	2301      	movs	r3, #1
 800a1dc:	4652      	mov	r2, sl
 800a1de:	4649      	mov	r1, r9
 800a1e0:	4638      	mov	r0, r7
 800a1e2:	47c0      	blx	r8
 800a1e4:	3001      	adds	r0, #1
 800a1e6:	d103      	bne.n	800a1f0 <_printf_common+0xac>
 800a1e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a1ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1f0:	3501      	adds	r5, #1
 800a1f2:	e7c6      	b.n	800a182 <_printf_common+0x3e>
 800a1f4:	18e1      	adds	r1, r4, r3
 800a1f6:	1c5a      	adds	r2, r3, #1
 800a1f8:	2030      	movs	r0, #48	; 0x30
 800a1fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a1fe:	4422      	add	r2, r4
 800a200:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a204:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a208:	3302      	adds	r3, #2
 800a20a:	e7c7      	b.n	800a19c <_printf_common+0x58>
 800a20c:	2301      	movs	r3, #1
 800a20e:	4622      	mov	r2, r4
 800a210:	4649      	mov	r1, r9
 800a212:	4638      	mov	r0, r7
 800a214:	47c0      	blx	r8
 800a216:	3001      	adds	r0, #1
 800a218:	d0e6      	beq.n	800a1e8 <_printf_common+0xa4>
 800a21a:	3601      	adds	r6, #1
 800a21c:	e7d9      	b.n	800a1d2 <_printf_common+0x8e>
	...

0800a220 <_printf_i>:
 800a220:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a224:	7e0f      	ldrb	r7, [r1, #24]
 800a226:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a228:	2f78      	cmp	r7, #120	; 0x78
 800a22a:	4691      	mov	r9, r2
 800a22c:	4680      	mov	r8, r0
 800a22e:	460c      	mov	r4, r1
 800a230:	469a      	mov	sl, r3
 800a232:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a236:	d807      	bhi.n	800a248 <_printf_i+0x28>
 800a238:	2f62      	cmp	r7, #98	; 0x62
 800a23a:	d80a      	bhi.n	800a252 <_printf_i+0x32>
 800a23c:	2f00      	cmp	r7, #0
 800a23e:	f000 80d8 	beq.w	800a3f2 <_printf_i+0x1d2>
 800a242:	2f58      	cmp	r7, #88	; 0x58
 800a244:	f000 80a3 	beq.w	800a38e <_printf_i+0x16e>
 800a248:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a24c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a250:	e03a      	b.n	800a2c8 <_printf_i+0xa8>
 800a252:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a256:	2b15      	cmp	r3, #21
 800a258:	d8f6      	bhi.n	800a248 <_printf_i+0x28>
 800a25a:	a101      	add	r1, pc, #4	; (adr r1, 800a260 <_printf_i+0x40>)
 800a25c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a260:	0800a2b9 	.word	0x0800a2b9
 800a264:	0800a2cd 	.word	0x0800a2cd
 800a268:	0800a249 	.word	0x0800a249
 800a26c:	0800a249 	.word	0x0800a249
 800a270:	0800a249 	.word	0x0800a249
 800a274:	0800a249 	.word	0x0800a249
 800a278:	0800a2cd 	.word	0x0800a2cd
 800a27c:	0800a249 	.word	0x0800a249
 800a280:	0800a249 	.word	0x0800a249
 800a284:	0800a249 	.word	0x0800a249
 800a288:	0800a249 	.word	0x0800a249
 800a28c:	0800a3d9 	.word	0x0800a3d9
 800a290:	0800a2fd 	.word	0x0800a2fd
 800a294:	0800a3bb 	.word	0x0800a3bb
 800a298:	0800a249 	.word	0x0800a249
 800a29c:	0800a249 	.word	0x0800a249
 800a2a0:	0800a3fb 	.word	0x0800a3fb
 800a2a4:	0800a249 	.word	0x0800a249
 800a2a8:	0800a2fd 	.word	0x0800a2fd
 800a2ac:	0800a249 	.word	0x0800a249
 800a2b0:	0800a249 	.word	0x0800a249
 800a2b4:	0800a3c3 	.word	0x0800a3c3
 800a2b8:	682b      	ldr	r3, [r5, #0]
 800a2ba:	1d1a      	adds	r2, r3, #4
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	602a      	str	r2, [r5, #0]
 800a2c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a2c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	e0a3      	b.n	800a414 <_printf_i+0x1f4>
 800a2cc:	6820      	ldr	r0, [r4, #0]
 800a2ce:	6829      	ldr	r1, [r5, #0]
 800a2d0:	0606      	lsls	r6, r0, #24
 800a2d2:	f101 0304 	add.w	r3, r1, #4
 800a2d6:	d50a      	bpl.n	800a2ee <_printf_i+0xce>
 800a2d8:	680e      	ldr	r6, [r1, #0]
 800a2da:	602b      	str	r3, [r5, #0]
 800a2dc:	2e00      	cmp	r6, #0
 800a2de:	da03      	bge.n	800a2e8 <_printf_i+0xc8>
 800a2e0:	232d      	movs	r3, #45	; 0x2d
 800a2e2:	4276      	negs	r6, r6
 800a2e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2e8:	485e      	ldr	r0, [pc, #376]	; (800a464 <_printf_i+0x244>)
 800a2ea:	230a      	movs	r3, #10
 800a2ec:	e019      	b.n	800a322 <_printf_i+0x102>
 800a2ee:	680e      	ldr	r6, [r1, #0]
 800a2f0:	602b      	str	r3, [r5, #0]
 800a2f2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a2f6:	bf18      	it	ne
 800a2f8:	b236      	sxthne	r6, r6
 800a2fa:	e7ef      	b.n	800a2dc <_printf_i+0xbc>
 800a2fc:	682b      	ldr	r3, [r5, #0]
 800a2fe:	6820      	ldr	r0, [r4, #0]
 800a300:	1d19      	adds	r1, r3, #4
 800a302:	6029      	str	r1, [r5, #0]
 800a304:	0601      	lsls	r1, r0, #24
 800a306:	d501      	bpl.n	800a30c <_printf_i+0xec>
 800a308:	681e      	ldr	r6, [r3, #0]
 800a30a:	e002      	b.n	800a312 <_printf_i+0xf2>
 800a30c:	0646      	lsls	r6, r0, #25
 800a30e:	d5fb      	bpl.n	800a308 <_printf_i+0xe8>
 800a310:	881e      	ldrh	r6, [r3, #0]
 800a312:	4854      	ldr	r0, [pc, #336]	; (800a464 <_printf_i+0x244>)
 800a314:	2f6f      	cmp	r7, #111	; 0x6f
 800a316:	bf0c      	ite	eq
 800a318:	2308      	moveq	r3, #8
 800a31a:	230a      	movne	r3, #10
 800a31c:	2100      	movs	r1, #0
 800a31e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a322:	6865      	ldr	r5, [r4, #4]
 800a324:	60a5      	str	r5, [r4, #8]
 800a326:	2d00      	cmp	r5, #0
 800a328:	bfa2      	ittt	ge
 800a32a:	6821      	ldrge	r1, [r4, #0]
 800a32c:	f021 0104 	bicge.w	r1, r1, #4
 800a330:	6021      	strge	r1, [r4, #0]
 800a332:	b90e      	cbnz	r6, 800a338 <_printf_i+0x118>
 800a334:	2d00      	cmp	r5, #0
 800a336:	d04d      	beq.n	800a3d4 <_printf_i+0x1b4>
 800a338:	4615      	mov	r5, r2
 800a33a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a33e:	fb03 6711 	mls	r7, r3, r1, r6
 800a342:	5dc7      	ldrb	r7, [r0, r7]
 800a344:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a348:	4637      	mov	r7, r6
 800a34a:	42bb      	cmp	r3, r7
 800a34c:	460e      	mov	r6, r1
 800a34e:	d9f4      	bls.n	800a33a <_printf_i+0x11a>
 800a350:	2b08      	cmp	r3, #8
 800a352:	d10b      	bne.n	800a36c <_printf_i+0x14c>
 800a354:	6823      	ldr	r3, [r4, #0]
 800a356:	07de      	lsls	r6, r3, #31
 800a358:	d508      	bpl.n	800a36c <_printf_i+0x14c>
 800a35a:	6923      	ldr	r3, [r4, #16]
 800a35c:	6861      	ldr	r1, [r4, #4]
 800a35e:	4299      	cmp	r1, r3
 800a360:	bfde      	ittt	le
 800a362:	2330      	movle	r3, #48	; 0x30
 800a364:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a368:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a36c:	1b52      	subs	r2, r2, r5
 800a36e:	6122      	str	r2, [r4, #16]
 800a370:	f8cd a000 	str.w	sl, [sp]
 800a374:	464b      	mov	r3, r9
 800a376:	aa03      	add	r2, sp, #12
 800a378:	4621      	mov	r1, r4
 800a37a:	4640      	mov	r0, r8
 800a37c:	f7ff fee2 	bl	800a144 <_printf_common>
 800a380:	3001      	adds	r0, #1
 800a382:	d14c      	bne.n	800a41e <_printf_i+0x1fe>
 800a384:	f04f 30ff 	mov.w	r0, #4294967295
 800a388:	b004      	add	sp, #16
 800a38a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a38e:	4835      	ldr	r0, [pc, #212]	; (800a464 <_printf_i+0x244>)
 800a390:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a394:	6829      	ldr	r1, [r5, #0]
 800a396:	6823      	ldr	r3, [r4, #0]
 800a398:	f851 6b04 	ldr.w	r6, [r1], #4
 800a39c:	6029      	str	r1, [r5, #0]
 800a39e:	061d      	lsls	r5, r3, #24
 800a3a0:	d514      	bpl.n	800a3cc <_printf_i+0x1ac>
 800a3a2:	07df      	lsls	r7, r3, #31
 800a3a4:	bf44      	itt	mi
 800a3a6:	f043 0320 	orrmi.w	r3, r3, #32
 800a3aa:	6023      	strmi	r3, [r4, #0]
 800a3ac:	b91e      	cbnz	r6, 800a3b6 <_printf_i+0x196>
 800a3ae:	6823      	ldr	r3, [r4, #0]
 800a3b0:	f023 0320 	bic.w	r3, r3, #32
 800a3b4:	6023      	str	r3, [r4, #0]
 800a3b6:	2310      	movs	r3, #16
 800a3b8:	e7b0      	b.n	800a31c <_printf_i+0xfc>
 800a3ba:	6823      	ldr	r3, [r4, #0]
 800a3bc:	f043 0320 	orr.w	r3, r3, #32
 800a3c0:	6023      	str	r3, [r4, #0]
 800a3c2:	2378      	movs	r3, #120	; 0x78
 800a3c4:	4828      	ldr	r0, [pc, #160]	; (800a468 <_printf_i+0x248>)
 800a3c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a3ca:	e7e3      	b.n	800a394 <_printf_i+0x174>
 800a3cc:	0659      	lsls	r1, r3, #25
 800a3ce:	bf48      	it	mi
 800a3d0:	b2b6      	uxthmi	r6, r6
 800a3d2:	e7e6      	b.n	800a3a2 <_printf_i+0x182>
 800a3d4:	4615      	mov	r5, r2
 800a3d6:	e7bb      	b.n	800a350 <_printf_i+0x130>
 800a3d8:	682b      	ldr	r3, [r5, #0]
 800a3da:	6826      	ldr	r6, [r4, #0]
 800a3dc:	6961      	ldr	r1, [r4, #20]
 800a3de:	1d18      	adds	r0, r3, #4
 800a3e0:	6028      	str	r0, [r5, #0]
 800a3e2:	0635      	lsls	r5, r6, #24
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	d501      	bpl.n	800a3ec <_printf_i+0x1cc>
 800a3e8:	6019      	str	r1, [r3, #0]
 800a3ea:	e002      	b.n	800a3f2 <_printf_i+0x1d2>
 800a3ec:	0670      	lsls	r0, r6, #25
 800a3ee:	d5fb      	bpl.n	800a3e8 <_printf_i+0x1c8>
 800a3f0:	8019      	strh	r1, [r3, #0]
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	6123      	str	r3, [r4, #16]
 800a3f6:	4615      	mov	r5, r2
 800a3f8:	e7ba      	b.n	800a370 <_printf_i+0x150>
 800a3fa:	682b      	ldr	r3, [r5, #0]
 800a3fc:	1d1a      	adds	r2, r3, #4
 800a3fe:	602a      	str	r2, [r5, #0]
 800a400:	681d      	ldr	r5, [r3, #0]
 800a402:	6862      	ldr	r2, [r4, #4]
 800a404:	2100      	movs	r1, #0
 800a406:	4628      	mov	r0, r5
 800a408:	f7f5 fec2 	bl	8000190 <memchr>
 800a40c:	b108      	cbz	r0, 800a412 <_printf_i+0x1f2>
 800a40e:	1b40      	subs	r0, r0, r5
 800a410:	6060      	str	r0, [r4, #4]
 800a412:	6863      	ldr	r3, [r4, #4]
 800a414:	6123      	str	r3, [r4, #16]
 800a416:	2300      	movs	r3, #0
 800a418:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a41c:	e7a8      	b.n	800a370 <_printf_i+0x150>
 800a41e:	6923      	ldr	r3, [r4, #16]
 800a420:	462a      	mov	r2, r5
 800a422:	4649      	mov	r1, r9
 800a424:	4640      	mov	r0, r8
 800a426:	47d0      	blx	sl
 800a428:	3001      	adds	r0, #1
 800a42a:	d0ab      	beq.n	800a384 <_printf_i+0x164>
 800a42c:	6823      	ldr	r3, [r4, #0]
 800a42e:	079b      	lsls	r3, r3, #30
 800a430:	d413      	bmi.n	800a45a <_printf_i+0x23a>
 800a432:	68e0      	ldr	r0, [r4, #12]
 800a434:	9b03      	ldr	r3, [sp, #12]
 800a436:	4298      	cmp	r0, r3
 800a438:	bfb8      	it	lt
 800a43a:	4618      	movlt	r0, r3
 800a43c:	e7a4      	b.n	800a388 <_printf_i+0x168>
 800a43e:	2301      	movs	r3, #1
 800a440:	4632      	mov	r2, r6
 800a442:	4649      	mov	r1, r9
 800a444:	4640      	mov	r0, r8
 800a446:	47d0      	blx	sl
 800a448:	3001      	adds	r0, #1
 800a44a:	d09b      	beq.n	800a384 <_printf_i+0x164>
 800a44c:	3501      	adds	r5, #1
 800a44e:	68e3      	ldr	r3, [r4, #12]
 800a450:	9903      	ldr	r1, [sp, #12]
 800a452:	1a5b      	subs	r3, r3, r1
 800a454:	42ab      	cmp	r3, r5
 800a456:	dcf2      	bgt.n	800a43e <_printf_i+0x21e>
 800a458:	e7eb      	b.n	800a432 <_printf_i+0x212>
 800a45a:	2500      	movs	r5, #0
 800a45c:	f104 0619 	add.w	r6, r4, #25
 800a460:	e7f5      	b.n	800a44e <_printf_i+0x22e>
 800a462:	bf00      	nop
 800a464:	0800b139 	.word	0x0800b139
 800a468:	0800b14a 	.word	0x0800b14a

0800a46c <_read_r>:
 800a46c:	b538      	push	{r3, r4, r5, lr}
 800a46e:	4d07      	ldr	r5, [pc, #28]	; (800a48c <_read_r+0x20>)
 800a470:	4604      	mov	r4, r0
 800a472:	4608      	mov	r0, r1
 800a474:	4611      	mov	r1, r2
 800a476:	2200      	movs	r2, #0
 800a478:	602a      	str	r2, [r5, #0]
 800a47a:	461a      	mov	r2, r3
 800a47c:	f7f6 fecd 	bl	800121a <_read>
 800a480:	1c43      	adds	r3, r0, #1
 800a482:	d102      	bne.n	800a48a <_read_r+0x1e>
 800a484:	682b      	ldr	r3, [r5, #0]
 800a486:	b103      	cbz	r3, 800a48a <_read_r+0x1e>
 800a488:	6023      	str	r3, [r4, #0]
 800a48a:	bd38      	pop	{r3, r4, r5, pc}
 800a48c:	20001a64 	.word	0x20001a64

0800a490 <__swbuf_r>:
 800a490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a492:	460e      	mov	r6, r1
 800a494:	4614      	mov	r4, r2
 800a496:	4605      	mov	r5, r0
 800a498:	b118      	cbz	r0, 800a4a2 <__swbuf_r+0x12>
 800a49a:	6983      	ldr	r3, [r0, #24]
 800a49c:	b90b      	cbnz	r3, 800a4a2 <__swbuf_r+0x12>
 800a49e:	f7fe ff4b 	bl	8009338 <__sinit>
 800a4a2:	4b21      	ldr	r3, [pc, #132]	; (800a528 <__swbuf_r+0x98>)
 800a4a4:	429c      	cmp	r4, r3
 800a4a6:	d12b      	bne.n	800a500 <__swbuf_r+0x70>
 800a4a8:	686c      	ldr	r4, [r5, #4]
 800a4aa:	69a3      	ldr	r3, [r4, #24]
 800a4ac:	60a3      	str	r3, [r4, #8]
 800a4ae:	89a3      	ldrh	r3, [r4, #12]
 800a4b0:	071a      	lsls	r2, r3, #28
 800a4b2:	d52f      	bpl.n	800a514 <__swbuf_r+0x84>
 800a4b4:	6923      	ldr	r3, [r4, #16]
 800a4b6:	b36b      	cbz	r3, 800a514 <__swbuf_r+0x84>
 800a4b8:	6923      	ldr	r3, [r4, #16]
 800a4ba:	6820      	ldr	r0, [r4, #0]
 800a4bc:	1ac0      	subs	r0, r0, r3
 800a4be:	6963      	ldr	r3, [r4, #20]
 800a4c0:	b2f6      	uxtb	r6, r6
 800a4c2:	4283      	cmp	r3, r0
 800a4c4:	4637      	mov	r7, r6
 800a4c6:	dc04      	bgt.n	800a4d2 <__swbuf_r+0x42>
 800a4c8:	4621      	mov	r1, r4
 800a4ca:	4628      	mov	r0, r5
 800a4cc:	f7ff fac8 	bl	8009a60 <_fflush_r>
 800a4d0:	bb30      	cbnz	r0, 800a520 <__swbuf_r+0x90>
 800a4d2:	68a3      	ldr	r3, [r4, #8]
 800a4d4:	3b01      	subs	r3, #1
 800a4d6:	60a3      	str	r3, [r4, #8]
 800a4d8:	6823      	ldr	r3, [r4, #0]
 800a4da:	1c5a      	adds	r2, r3, #1
 800a4dc:	6022      	str	r2, [r4, #0]
 800a4de:	701e      	strb	r6, [r3, #0]
 800a4e0:	6963      	ldr	r3, [r4, #20]
 800a4e2:	3001      	adds	r0, #1
 800a4e4:	4283      	cmp	r3, r0
 800a4e6:	d004      	beq.n	800a4f2 <__swbuf_r+0x62>
 800a4e8:	89a3      	ldrh	r3, [r4, #12]
 800a4ea:	07db      	lsls	r3, r3, #31
 800a4ec:	d506      	bpl.n	800a4fc <__swbuf_r+0x6c>
 800a4ee:	2e0a      	cmp	r6, #10
 800a4f0:	d104      	bne.n	800a4fc <__swbuf_r+0x6c>
 800a4f2:	4621      	mov	r1, r4
 800a4f4:	4628      	mov	r0, r5
 800a4f6:	f7ff fab3 	bl	8009a60 <_fflush_r>
 800a4fa:	b988      	cbnz	r0, 800a520 <__swbuf_r+0x90>
 800a4fc:	4638      	mov	r0, r7
 800a4fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a500:	4b0a      	ldr	r3, [pc, #40]	; (800a52c <__swbuf_r+0x9c>)
 800a502:	429c      	cmp	r4, r3
 800a504:	d101      	bne.n	800a50a <__swbuf_r+0x7a>
 800a506:	68ac      	ldr	r4, [r5, #8]
 800a508:	e7cf      	b.n	800a4aa <__swbuf_r+0x1a>
 800a50a:	4b09      	ldr	r3, [pc, #36]	; (800a530 <__swbuf_r+0xa0>)
 800a50c:	429c      	cmp	r4, r3
 800a50e:	bf08      	it	eq
 800a510:	68ec      	ldreq	r4, [r5, #12]
 800a512:	e7ca      	b.n	800a4aa <__swbuf_r+0x1a>
 800a514:	4621      	mov	r1, r4
 800a516:	4628      	mov	r0, r5
 800a518:	f000 f80c 	bl	800a534 <__swsetup_r>
 800a51c:	2800      	cmp	r0, #0
 800a51e:	d0cb      	beq.n	800a4b8 <__swbuf_r+0x28>
 800a520:	f04f 37ff 	mov.w	r7, #4294967295
 800a524:	e7ea      	b.n	800a4fc <__swbuf_r+0x6c>
 800a526:	bf00      	nop
 800a528:	0800b034 	.word	0x0800b034
 800a52c:	0800b054 	.word	0x0800b054
 800a530:	0800b014 	.word	0x0800b014

0800a534 <__swsetup_r>:
 800a534:	4b32      	ldr	r3, [pc, #200]	; (800a600 <__swsetup_r+0xcc>)
 800a536:	b570      	push	{r4, r5, r6, lr}
 800a538:	681d      	ldr	r5, [r3, #0]
 800a53a:	4606      	mov	r6, r0
 800a53c:	460c      	mov	r4, r1
 800a53e:	b125      	cbz	r5, 800a54a <__swsetup_r+0x16>
 800a540:	69ab      	ldr	r3, [r5, #24]
 800a542:	b913      	cbnz	r3, 800a54a <__swsetup_r+0x16>
 800a544:	4628      	mov	r0, r5
 800a546:	f7fe fef7 	bl	8009338 <__sinit>
 800a54a:	4b2e      	ldr	r3, [pc, #184]	; (800a604 <__swsetup_r+0xd0>)
 800a54c:	429c      	cmp	r4, r3
 800a54e:	d10f      	bne.n	800a570 <__swsetup_r+0x3c>
 800a550:	686c      	ldr	r4, [r5, #4]
 800a552:	89a3      	ldrh	r3, [r4, #12]
 800a554:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a558:	0719      	lsls	r1, r3, #28
 800a55a:	d42c      	bmi.n	800a5b6 <__swsetup_r+0x82>
 800a55c:	06dd      	lsls	r5, r3, #27
 800a55e:	d411      	bmi.n	800a584 <__swsetup_r+0x50>
 800a560:	2309      	movs	r3, #9
 800a562:	6033      	str	r3, [r6, #0]
 800a564:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a568:	81a3      	strh	r3, [r4, #12]
 800a56a:	f04f 30ff 	mov.w	r0, #4294967295
 800a56e:	e03e      	b.n	800a5ee <__swsetup_r+0xba>
 800a570:	4b25      	ldr	r3, [pc, #148]	; (800a608 <__swsetup_r+0xd4>)
 800a572:	429c      	cmp	r4, r3
 800a574:	d101      	bne.n	800a57a <__swsetup_r+0x46>
 800a576:	68ac      	ldr	r4, [r5, #8]
 800a578:	e7eb      	b.n	800a552 <__swsetup_r+0x1e>
 800a57a:	4b24      	ldr	r3, [pc, #144]	; (800a60c <__swsetup_r+0xd8>)
 800a57c:	429c      	cmp	r4, r3
 800a57e:	bf08      	it	eq
 800a580:	68ec      	ldreq	r4, [r5, #12]
 800a582:	e7e6      	b.n	800a552 <__swsetup_r+0x1e>
 800a584:	0758      	lsls	r0, r3, #29
 800a586:	d512      	bpl.n	800a5ae <__swsetup_r+0x7a>
 800a588:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a58a:	b141      	cbz	r1, 800a59e <__swsetup_r+0x6a>
 800a58c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a590:	4299      	cmp	r1, r3
 800a592:	d002      	beq.n	800a59a <__swsetup_r+0x66>
 800a594:	4630      	mov	r0, r6
 800a596:	f7ff fad7 	bl	8009b48 <_free_r>
 800a59a:	2300      	movs	r3, #0
 800a59c:	6363      	str	r3, [r4, #52]	; 0x34
 800a59e:	89a3      	ldrh	r3, [r4, #12]
 800a5a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a5a4:	81a3      	strh	r3, [r4, #12]
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	6063      	str	r3, [r4, #4]
 800a5aa:	6923      	ldr	r3, [r4, #16]
 800a5ac:	6023      	str	r3, [r4, #0]
 800a5ae:	89a3      	ldrh	r3, [r4, #12]
 800a5b0:	f043 0308 	orr.w	r3, r3, #8
 800a5b4:	81a3      	strh	r3, [r4, #12]
 800a5b6:	6923      	ldr	r3, [r4, #16]
 800a5b8:	b94b      	cbnz	r3, 800a5ce <__swsetup_r+0x9a>
 800a5ba:	89a3      	ldrh	r3, [r4, #12]
 800a5bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a5c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5c4:	d003      	beq.n	800a5ce <__swsetup_r+0x9a>
 800a5c6:	4621      	mov	r1, r4
 800a5c8:	4630      	mov	r0, r6
 800a5ca:	f000 f84d 	bl	800a668 <__smakebuf_r>
 800a5ce:	89a0      	ldrh	r0, [r4, #12]
 800a5d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a5d4:	f010 0301 	ands.w	r3, r0, #1
 800a5d8:	d00a      	beq.n	800a5f0 <__swsetup_r+0xbc>
 800a5da:	2300      	movs	r3, #0
 800a5dc:	60a3      	str	r3, [r4, #8]
 800a5de:	6963      	ldr	r3, [r4, #20]
 800a5e0:	425b      	negs	r3, r3
 800a5e2:	61a3      	str	r3, [r4, #24]
 800a5e4:	6923      	ldr	r3, [r4, #16]
 800a5e6:	b943      	cbnz	r3, 800a5fa <__swsetup_r+0xc6>
 800a5e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a5ec:	d1ba      	bne.n	800a564 <__swsetup_r+0x30>
 800a5ee:	bd70      	pop	{r4, r5, r6, pc}
 800a5f0:	0781      	lsls	r1, r0, #30
 800a5f2:	bf58      	it	pl
 800a5f4:	6963      	ldrpl	r3, [r4, #20]
 800a5f6:	60a3      	str	r3, [r4, #8]
 800a5f8:	e7f4      	b.n	800a5e4 <__swsetup_r+0xb0>
 800a5fa:	2000      	movs	r0, #0
 800a5fc:	e7f7      	b.n	800a5ee <__swsetup_r+0xba>
 800a5fe:	bf00      	nop
 800a600:	20000010 	.word	0x20000010
 800a604:	0800b034 	.word	0x0800b034
 800a608:	0800b054 	.word	0x0800b054
 800a60c:	0800b014 	.word	0x0800b014

0800a610 <abort>:
 800a610:	b508      	push	{r3, lr}
 800a612:	2006      	movs	r0, #6
 800a614:	f000 f8da 	bl	800a7cc <raise>
 800a618:	2001      	movs	r0, #1
 800a61a:	f7f6 fdf4 	bl	8001206 <_exit>

0800a61e <__swhatbuf_r>:
 800a61e:	b570      	push	{r4, r5, r6, lr}
 800a620:	460e      	mov	r6, r1
 800a622:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a626:	2900      	cmp	r1, #0
 800a628:	b096      	sub	sp, #88	; 0x58
 800a62a:	4614      	mov	r4, r2
 800a62c:	461d      	mov	r5, r3
 800a62e:	da08      	bge.n	800a642 <__swhatbuf_r+0x24>
 800a630:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a634:	2200      	movs	r2, #0
 800a636:	602a      	str	r2, [r5, #0]
 800a638:	061a      	lsls	r2, r3, #24
 800a63a:	d410      	bmi.n	800a65e <__swhatbuf_r+0x40>
 800a63c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a640:	e00e      	b.n	800a660 <__swhatbuf_r+0x42>
 800a642:	466a      	mov	r2, sp
 800a644:	f000 f8de 	bl	800a804 <_fstat_r>
 800a648:	2800      	cmp	r0, #0
 800a64a:	dbf1      	blt.n	800a630 <__swhatbuf_r+0x12>
 800a64c:	9a01      	ldr	r2, [sp, #4]
 800a64e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a652:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a656:	425a      	negs	r2, r3
 800a658:	415a      	adcs	r2, r3
 800a65a:	602a      	str	r2, [r5, #0]
 800a65c:	e7ee      	b.n	800a63c <__swhatbuf_r+0x1e>
 800a65e:	2340      	movs	r3, #64	; 0x40
 800a660:	2000      	movs	r0, #0
 800a662:	6023      	str	r3, [r4, #0]
 800a664:	b016      	add	sp, #88	; 0x58
 800a666:	bd70      	pop	{r4, r5, r6, pc}

0800a668 <__smakebuf_r>:
 800a668:	898b      	ldrh	r3, [r1, #12]
 800a66a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a66c:	079d      	lsls	r5, r3, #30
 800a66e:	4606      	mov	r6, r0
 800a670:	460c      	mov	r4, r1
 800a672:	d507      	bpl.n	800a684 <__smakebuf_r+0x1c>
 800a674:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a678:	6023      	str	r3, [r4, #0]
 800a67a:	6123      	str	r3, [r4, #16]
 800a67c:	2301      	movs	r3, #1
 800a67e:	6163      	str	r3, [r4, #20]
 800a680:	b002      	add	sp, #8
 800a682:	bd70      	pop	{r4, r5, r6, pc}
 800a684:	ab01      	add	r3, sp, #4
 800a686:	466a      	mov	r2, sp
 800a688:	f7ff ffc9 	bl	800a61e <__swhatbuf_r>
 800a68c:	9900      	ldr	r1, [sp, #0]
 800a68e:	4605      	mov	r5, r0
 800a690:	4630      	mov	r0, r6
 800a692:	f7fe ff4d 	bl	8009530 <_malloc_r>
 800a696:	b948      	cbnz	r0, 800a6ac <__smakebuf_r+0x44>
 800a698:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a69c:	059a      	lsls	r2, r3, #22
 800a69e:	d4ef      	bmi.n	800a680 <__smakebuf_r+0x18>
 800a6a0:	f023 0303 	bic.w	r3, r3, #3
 800a6a4:	f043 0302 	orr.w	r3, r3, #2
 800a6a8:	81a3      	strh	r3, [r4, #12]
 800a6aa:	e7e3      	b.n	800a674 <__smakebuf_r+0xc>
 800a6ac:	4b0d      	ldr	r3, [pc, #52]	; (800a6e4 <__smakebuf_r+0x7c>)
 800a6ae:	62b3      	str	r3, [r6, #40]	; 0x28
 800a6b0:	89a3      	ldrh	r3, [r4, #12]
 800a6b2:	6020      	str	r0, [r4, #0]
 800a6b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6b8:	81a3      	strh	r3, [r4, #12]
 800a6ba:	9b00      	ldr	r3, [sp, #0]
 800a6bc:	6163      	str	r3, [r4, #20]
 800a6be:	9b01      	ldr	r3, [sp, #4]
 800a6c0:	6120      	str	r0, [r4, #16]
 800a6c2:	b15b      	cbz	r3, 800a6dc <__smakebuf_r+0x74>
 800a6c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6c8:	4630      	mov	r0, r6
 800a6ca:	f000 f8ad 	bl	800a828 <_isatty_r>
 800a6ce:	b128      	cbz	r0, 800a6dc <__smakebuf_r+0x74>
 800a6d0:	89a3      	ldrh	r3, [r4, #12]
 800a6d2:	f023 0303 	bic.w	r3, r3, #3
 800a6d6:	f043 0301 	orr.w	r3, r3, #1
 800a6da:	81a3      	strh	r3, [r4, #12]
 800a6dc:	89a0      	ldrh	r0, [r4, #12]
 800a6de:	4305      	orrs	r5, r0
 800a6e0:	81a5      	strh	r5, [r4, #12]
 800a6e2:	e7cd      	b.n	800a680 <__smakebuf_r+0x18>
 800a6e4:	080092d1 	.word	0x080092d1

0800a6e8 <memmove>:
 800a6e8:	4288      	cmp	r0, r1
 800a6ea:	b510      	push	{r4, lr}
 800a6ec:	eb01 0402 	add.w	r4, r1, r2
 800a6f0:	d902      	bls.n	800a6f8 <memmove+0x10>
 800a6f2:	4284      	cmp	r4, r0
 800a6f4:	4623      	mov	r3, r4
 800a6f6:	d807      	bhi.n	800a708 <memmove+0x20>
 800a6f8:	1e43      	subs	r3, r0, #1
 800a6fa:	42a1      	cmp	r1, r4
 800a6fc:	d008      	beq.n	800a710 <memmove+0x28>
 800a6fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a702:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a706:	e7f8      	b.n	800a6fa <memmove+0x12>
 800a708:	4402      	add	r2, r0
 800a70a:	4601      	mov	r1, r0
 800a70c:	428a      	cmp	r2, r1
 800a70e:	d100      	bne.n	800a712 <memmove+0x2a>
 800a710:	bd10      	pop	{r4, pc}
 800a712:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a716:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a71a:	e7f7      	b.n	800a70c <memmove+0x24>

0800a71c <_realloc_r>:
 800a71c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a720:	4680      	mov	r8, r0
 800a722:	4614      	mov	r4, r2
 800a724:	460e      	mov	r6, r1
 800a726:	b921      	cbnz	r1, 800a732 <_realloc_r+0x16>
 800a728:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a72c:	4611      	mov	r1, r2
 800a72e:	f7fe beff 	b.w	8009530 <_malloc_r>
 800a732:	b92a      	cbnz	r2, 800a740 <_realloc_r+0x24>
 800a734:	f7ff fa08 	bl	8009b48 <_free_r>
 800a738:	4625      	mov	r5, r4
 800a73a:	4628      	mov	r0, r5
 800a73c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a740:	f000 f882 	bl	800a848 <_malloc_usable_size_r>
 800a744:	4284      	cmp	r4, r0
 800a746:	4607      	mov	r7, r0
 800a748:	d802      	bhi.n	800a750 <_realloc_r+0x34>
 800a74a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a74e:	d812      	bhi.n	800a776 <_realloc_r+0x5a>
 800a750:	4621      	mov	r1, r4
 800a752:	4640      	mov	r0, r8
 800a754:	f7fe feec 	bl	8009530 <_malloc_r>
 800a758:	4605      	mov	r5, r0
 800a75a:	2800      	cmp	r0, #0
 800a75c:	d0ed      	beq.n	800a73a <_realloc_r+0x1e>
 800a75e:	42bc      	cmp	r4, r7
 800a760:	4622      	mov	r2, r4
 800a762:	4631      	mov	r1, r6
 800a764:	bf28      	it	cs
 800a766:	463a      	movcs	r2, r7
 800a768:	f7fe feab 	bl	80094c2 <memcpy>
 800a76c:	4631      	mov	r1, r6
 800a76e:	4640      	mov	r0, r8
 800a770:	f7ff f9ea 	bl	8009b48 <_free_r>
 800a774:	e7e1      	b.n	800a73a <_realloc_r+0x1e>
 800a776:	4635      	mov	r5, r6
 800a778:	e7df      	b.n	800a73a <_realloc_r+0x1e>

0800a77a <_raise_r>:
 800a77a:	291f      	cmp	r1, #31
 800a77c:	b538      	push	{r3, r4, r5, lr}
 800a77e:	4604      	mov	r4, r0
 800a780:	460d      	mov	r5, r1
 800a782:	d904      	bls.n	800a78e <_raise_r+0x14>
 800a784:	2316      	movs	r3, #22
 800a786:	6003      	str	r3, [r0, #0]
 800a788:	f04f 30ff 	mov.w	r0, #4294967295
 800a78c:	bd38      	pop	{r3, r4, r5, pc}
 800a78e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a790:	b112      	cbz	r2, 800a798 <_raise_r+0x1e>
 800a792:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a796:	b94b      	cbnz	r3, 800a7ac <_raise_r+0x32>
 800a798:	4620      	mov	r0, r4
 800a79a:	f000 f831 	bl	800a800 <_getpid_r>
 800a79e:	462a      	mov	r2, r5
 800a7a0:	4601      	mov	r1, r0
 800a7a2:	4620      	mov	r0, r4
 800a7a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a7a8:	f000 b818 	b.w	800a7dc <_kill_r>
 800a7ac:	2b01      	cmp	r3, #1
 800a7ae:	d00a      	beq.n	800a7c6 <_raise_r+0x4c>
 800a7b0:	1c59      	adds	r1, r3, #1
 800a7b2:	d103      	bne.n	800a7bc <_raise_r+0x42>
 800a7b4:	2316      	movs	r3, #22
 800a7b6:	6003      	str	r3, [r0, #0]
 800a7b8:	2001      	movs	r0, #1
 800a7ba:	e7e7      	b.n	800a78c <_raise_r+0x12>
 800a7bc:	2400      	movs	r4, #0
 800a7be:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a7c2:	4628      	mov	r0, r5
 800a7c4:	4798      	blx	r3
 800a7c6:	2000      	movs	r0, #0
 800a7c8:	e7e0      	b.n	800a78c <_raise_r+0x12>
	...

0800a7cc <raise>:
 800a7cc:	4b02      	ldr	r3, [pc, #8]	; (800a7d8 <raise+0xc>)
 800a7ce:	4601      	mov	r1, r0
 800a7d0:	6818      	ldr	r0, [r3, #0]
 800a7d2:	f7ff bfd2 	b.w	800a77a <_raise_r>
 800a7d6:	bf00      	nop
 800a7d8:	20000010 	.word	0x20000010

0800a7dc <_kill_r>:
 800a7dc:	b538      	push	{r3, r4, r5, lr}
 800a7de:	4d07      	ldr	r5, [pc, #28]	; (800a7fc <_kill_r+0x20>)
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	4604      	mov	r4, r0
 800a7e4:	4608      	mov	r0, r1
 800a7e6:	4611      	mov	r1, r2
 800a7e8:	602b      	str	r3, [r5, #0]
 800a7ea:	f7f6 fcfc 	bl	80011e6 <_kill>
 800a7ee:	1c43      	adds	r3, r0, #1
 800a7f0:	d102      	bne.n	800a7f8 <_kill_r+0x1c>
 800a7f2:	682b      	ldr	r3, [r5, #0]
 800a7f4:	b103      	cbz	r3, 800a7f8 <_kill_r+0x1c>
 800a7f6:	6023      	str	r3, [r4, #0]
 800a7f8:	bd38      	pop	{r3, r4, r5, pc}
 800a7fa:	bf00      	nop
 800a7fc:	20001a64 	.word	0x20001a64

0800a800 <_getpid_r>:
 800a800:	f7f6 bcea 	b.w	80011d8 <_getpid>

0800a804 <_fstat_r>:
 800a804:	b538      	push	{r3, r4, r5, lr}
 800a806:	4d07      	ldr	r5, [pc, #28]	; (800a824 <_fstat_r+0x20>)
 800a808:	2300      	movs	r3, #0
 800a80a:	4604      	mov	r4, r0
 800a80c:	4608      	mov	r0, r1
 800a80e:	4611      	mov	r1, r2
 800a810:	602b      	str	r3, [r5, #0]
 800a812:	f7f6 fd46 	bl	80012a2 <_fstat>
 800a816:	1c43      	adds	r3, r0, #1
 800a818:	d102      	bne.n	800a820 <_fstat_r+0x1c>
 800a81a:	682b      	ldr	r3, [r5, #0]
 800a81c:	b103      	cbz	r3, 800a820 <_fstat_r+0x1c>
 800a81e:	6023      	str	r3, [r4, #0]
 800a820:	bd38      	pop	{r3, r4, r5, pc}
 800a822:	bf00      	nop
 800a824:	20001a64 	.word	0x20001a64

0800a828 <_isatty_r>:
 800a828:	b538      	push	{r3, r4, r5, lr}
 800a82a:	4d06      	ldr	r5, [pc, #24]	; (800a844 <_isatty_r+0x1c>)
 800a82c:	2300      	movs	r3, #0
 800a82e:	4604      	mov	r4, r0
 800a830:	4608      	mov	r0, r1
 800a832:	602b      	str	r3, [r5, #0]
 800a834:	f7f6 fd44 	bl	80012c0 <_isatty>
 800a838:	1c43      	adds	r3, r0, #1
 800a83a:	d102      	bne.n	800a842 <_isatty_r+0x1a>
 800a83c:	682b      	ldr	r3, [r5, #0]
 800a83e:	b103      	cbz	r3, 800a842 <_isatty_r+0x1a>
 800a840:	6023      	str	r3, [r4, #0]
 800a842:	bd38      	pop	{r3, r4, r5, pc}
 800a844:	20001a64 	.word	0x20001a64

0800a848 <_malloc_usable_size_r>:
 800a848:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a84c:	1f18      	subs	r0, r3, #4
 800a84e:	2b00      	cmp	r3, #0
 800a850:	bfbc      	itt	lt
 800a852:	580b      	ldrlt	r3, [r1, r0]
 800a854:	18c0      	addlt	r0, r0, r3
 800a856:	4770      	bx	lr

0800a858 <_init>:
 800a858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a85a:	bf00      	nop
 800a85c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a85e:	bc08      	pop	{r3}
 800a860:	469e      	mov	lr, r3
 800a862:	4770      	bx	lr

0800a864 <_fini>:
 800a864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a866:	bf00      	nop
 800a868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a86a:	bc08      	pop	{r3}
 800a86c:	469e      	mov	lr, r3
 800a86e:	4770      	bx	lr
