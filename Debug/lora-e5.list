
lora-e5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce9c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c80  0800cfe0  0800cfe0  0001cfe0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dc60  0800dc60  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800dc60  0800dc60  0001dc60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dc68  0800dc68  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dc68  0800dc68  0001dc68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dc6c  0800dc6c  0001dc6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800dc70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a58  200001e0  0800de50  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c38  0800de50  00021c38  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a097  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000054c6  00000000  00000000  0004a2a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002578  00000000  00000000  0004f768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002360  00000000  00000000  00051ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022757  00000000  00000000  00054040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029f55  00000000  00000000  00076797  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c96fc  00000000  00000000  000a06ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00169de8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b194  00000000  00000000  00169e38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e0 	.word	0x200001e0
 800015c:	00000000 	.word	0x00000000
 8000160:	0800cfc4 	.word	0x0800cfc4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e4 	.word	0x200001e4
 800017c:	0800cfc4 	.word	0x0800cfc4

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_uldivmod>:
 8000b58:	b953      	cbnz	r3, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5a:	b94a      	cbnz	r2, 8000b70 <__aeabi_uldivmod+0x18>
 8000b5c:	2900      	cmp	r1, #0
 8000b5e:	bf08      	it	eq
 8000b60:	2800      	cmpeq	r0, #0
 8000b62:	bf1c      	itt	ne
 8000b64:	f04f 31ff 	movne.w	r1, #4294967295
 8000b68:	f04f 30ff 	movne.w	r0, #4294967295
 8000b6c:	f000 b974 	b.w	8000e58 <__aeabi_idiv0>
 8000b70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b78:	f000 f806 	bl	8000b88 <__udivmoddi4>
 8000b7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b84:	b004      	add	sp, #16
 8000b86:	4770      	bx	lr

08000b88 <__udivmoddi4>:
 8000b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b8c:	9e08      	ldr	r6, [sp, #32]
 8000b8e:	460d      	mov	r5, r1
 8000b90:	4604      	mov	r4, r0
 8000b92:	4688      	mov	r8, r1
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d14d      	bne.n	8000c34 <__udivmoddi4+0xac>
 8000b98:	428a      	cmp	r2, r1
 8000b9a:	4694      	mov	ip, r2
 8000b9c:	d968      	bls.n	8000c70 <__udivmoddi4+0xe8>
 8000b9e:	fab2 f282 	clz	r2, r2
 8000ba2:	b152      	cbz	r2, 8000bba <__udivmoddi4+0x32>
 8000ba4:	fa01 f302 	lsl.w	r3, r1, r2
 8000ba8:	f1c2 0120 	rsb	r1, r2, #32
 8000bac:	fa20 f101 	lsr.w	r1, r0, r1
 8000bb0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bb4:	ea41 0803 	orr.w	r8, r1, r3
 8000bb8:	4094      	lsls	r4, r2
 8000bba:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000bbe:	0c21      	lsrs	r1, r4, #16
 8000bc0:	fbb8 fef5 	udiv	lr, r8, r5
 8000bc4:	fa1f f78c 	uxth.w	r7, ip
 8000bc8:	fb05 831e 	mls	r3, r5, lr, r8
 8000bcc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bd0:	fb0e f107 	mul.w	r1, lr, r7
 8000bd4:	4299      	cmp	r1, r3
 8000bd6:	d90b      	bls.n	8000bf0 <__udivmoddi4+0x68>
 8000bd8:	eb1c 0303 	adds.w	r3, ip, r3
 8000bdc:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000be0:	f080 811e 	bcs.w	8000e20 <__udivmoddi4+0x298>
 8000be4:	4299      	cmp	r1, r3
 8000be6:	f240 811b 	bls.w	8000e20 <__udivmoddi4+0x298>
 8000bea:	f1ae 0e02 	sub.w	lr, lr, #2
 8000bee:	4463      	add	r3, ip
 8000bf0:	1a5b      	subs	r3, r3, r1
 8000bf2:	b2a4      	uxth	r4, r4
 8000bf4:	fbb3 f0f5 	udiv	r0, r3, r5
 8000bf8:	fb05 3310 	mls	r3, r5, r0, r3
 8000bfc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c00:	fb00 f707 	mul.w	r7, r0, r7
 8000c04:	42a7      	cmp	r7, r4
 8000c06:	d90a      	bls.n	8000c1e <__udivmoddi4+0x96>
 8000c08:	eb1c 0404 	adds.w	r4, ip, r4
 8000c0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c10:	f080 8108 	bcs.w	8000e24 <__udivmoddi4+0x29c>
 8000c14:	42a7      	cmp	r7, r4
 8000c16:	f240 8105 	bls.w	8000e24 <__udivmoddi4+0x29c>
 8000c1a:	4464      	add	r4, ip
 8000c1c:	3802      	subs	r0, #2
 8000c1e:	1be4      	subs	r4, r4, r7
 8000c20:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000c24:	2100      	movs	r1, #0
 8000c26:	b11e      	cbz	r6, 8000c30 <__udivmoddi4+0xa8>
 8000c28:	40d4      	lsrs	r4, r2
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	e9c6 4300 	strd	r4, r3, [r6]
 8000c30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c34:	428b      	cmp	r3, r1
 8000c36:	d908      	bls.n	8000c4a <__udivmoddi4+0xc2>
 8000c38:	2e00      	cmp	r6, #0
 8000c3a:	f000 80ee 	beq.w	8000e1a <__udivmoddi4+0x292>
 8000c3e:	2100      	movs	r1, #0
 8000c40:	e9c6 0500 	strd	r0, r5, [r6]
 8000c44:	4608      	mov	r0, r1
 8000c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4a:	fab3 f183 	clz	r1, r3
 8000c4e:	2900      	cmp	r1, #0
 8000c50:	d14a      	bne.n	8000ce8 <__udivmoddi4+0x160>
 8000c52:	42ab      	cmp	r3, r5
 8000c54:	d302      	bcc.n	8000c5c <__udivmoddi4+0xd4>
 8000c56:	4282      	cmp	r2, r0
 8000c58:	f200 80f9 	bhi.w	8000e4e <__udivmoddi4+0x2c6>
 8000c5c:	1a84      	subs	r4, r0, r2
 8000c5e:	eb65 0303 	sbc.w	r3, r5, r3
 8000c62:	2001      	movs	r0, #1
 8000c64:	4698      	mov	r8, r3
 8000c66:	2e00      	cmp	r6, #0
 8000c68:	d0e2      	beq.n	8000c30 <__udivmoddi4+0xa8>
 8000c6a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c6e:	e7df      	b.n	8000c30 <__udivmoddi4+0xa8>
 8000c70:	b902      	cbnz	r2, 8000c74 <__udivmoddi4+0xec>
 8000c72:	deff      	udf	#255	; 0xff
 8000c74:	fab2 f282 	clz	r2, r2
 8000c78:	2a00      	cmp	r2, #0
 8000c7a:	f040 8091 	bne.w	8000da0 <__udivmoddi4+0x218>
 8000c7e:	eba1 050c 	sub.w	r5, r1, ip
 8000c82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c86:	fa1f fe8c 	uxth.w	lr, ip
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	fbb5 f3f7 	udiv	r3, r5, r7
 8000c90:	fb07 5013 	mls	r0, r7, r3, r5
 8000c94:	0c25      	lsrs	r5, r4, #16
 8000c96:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000c9a:	fb0e f003 	mul.w	r0, lr, r3
 8000c9e:	42a8      	cmp	r0, r5
 8000ca0:	d908      	bls.n	8000cb4 <__udivmoddi4+0x12c>
 8000ca2:	eb1c 0505 	adds.w	r5, ip, r5
 8000ca6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000caa:	d202      	bcs.n	8000cb2 <__udivmoddi4+0x12a>
 8000cac:	42a8      	cmp	r0, r5
 8000cae:	f200 80cb 	bhi.w	8000e48 <__udivmoddi4+0x2c0>
 8000cb2:	4643      	mov	r3, r8
 8000cb4:	1a2d      	subs	r5, r5, r0
 8000cb6:	b2a4      	uxth	r4, r4
 8000cb8:	fbb5 f0f7 	udiv	r0, r5, r7
 8000cbc:	fb07 5510 	mls	r5, r7, r0, r5
 8000cc0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000cc8:	45a6      	cmp	lr, r4
 8000cca:	d908      	bls.n	8000cde <__udivmoddi4+0x156>
 8000ccc:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd0:	f100 35ff 	add.w	r5, r0, #4294967295
 8000cd4:	d202      	bcs.n	8000cdc <__udivmoddi4+0x154>
 8000cd6:	45a6      	cmp	lr, r4
 8000cd8:	f200 80bb 	bhi.w	8000e52 <__udivmoddi4+0x2ca>
 8000cdc:	4628      	mov	r0, r5
 8000cde:	eba4 040e 	sub.w	r4, r4, lr
 8000ce2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ce6:	e79e      	b.n	8000c26 <__udivmoddi4+0x9e>
 8000ce8:	f1c1 0720 	rsb	r7, r1, #32
 8000cec:	408b      	lsls	r3, r1
 8000cee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cf2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cf6:	fa20 f407 	lsr.w	r4, r0, r7
 8000cfa:	fa05 f301 	lsl.w	r3, r5, r1
 8000cfe:	431c      	orrs	r4, r3
 8000d00:	40fd      	lsrs	r5, r7
 8000d02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d06:	fa00 f301 	lsl.w	r3, r0, r1
 8000d0a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d0e:	0c20      	lsrs	r0, r4, #16
 8000d10:	fa1f fe8c 	uxth.w	lr, ip
 8000d14:	fb09 5518 	mls	r5, r9, r8, r5
 8000d18:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8000d1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d20:	42a8      	cmp	r0, r5
 8000d22:	fa02 f201 	lsl.w	r2, r2, r1
 8000d26:	d90b      	bls.n	8000d40 <__udivmoddi4+0x1b8>
 8000d28:	eb1c 0505 	adds.w	r5, ip, r5
 8000d2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d30:	f080 8088 	bcs.w	8000e44 <__udivmoddi4+0x2bc>
 8000d34:	42a8      	cmp	r0, r5
 8000d36:	f240 8085 	bls.w	8000e44 <__udivmoddi4+0x2bc>
 8000d3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d3e:	4465      	add	r5, ip
 8000d40:	1a2d      	subs	r5, r5, r0
 8000d42:	b2a4      	uxth	r4, r4
 8000d44:	fbb5 f0f9 	udiv	r0, r5, r9
 8000d48:	fb09 5510 	mls	r5, r9, r0, r5
 8000d4c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000d50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d54:	45ae      	cmp	lr, r5
 8000d56:	d908      	bls.n	8000d6a <__udivmoddi4+0x1e2>
 8000d58:	eb1c 0505 	adds.w	r5, ip, r5
 8000d5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d60:	d26c      	bcs.n	8000e3c <__udivmoddi4+0x2b4>
 8000d62:	45ae      	cmp	lr, r5
 8000d64:	d96a      	bls.n	8000e3c <__udivmoddi4+0x2b4>
 8000d66:	3802      	subs	r0, #2
 8000d68:	4465      	add	r5, ip
 8000d6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000d72:	eba5 050e 	sub.w	r5, r5, lr
 8000d76:	42a5      	cmp	r5, r4
 8000d78:	46c8      	mov	r8, r9
 8000d7a:	46a6      	mov	lr, r4
 8000d7c:	d356      	bcc.n	8000e2c <__udivmoddi4+0x2a4>
 8000d7e:	d053      	beq.n	8000e28 <__udivmoddi4+0x2a0>
 8000d80:	b15e      	cbz	r6, 8000d9a <__udivmoddi4+0x212>
 8000d82:	ebb3 0208 	subs.w	r2, r3, r8
 8000d86:	eb65 050e 	sbc.w	r5, r5, lr
 8000d8a:	fa05 f707 	lsl.w	r7, r5, r7
 8000d8e:	fa22 f301 	lsr.w	r3, r2, r1
 8000d92:	40cd      	lsrs	r5, r1
 8000d94:	431f      	orrs	r7, r3
 8000d96:	e9c6 7500 	strd	r7, r5, [r6]
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da0:	f1c2 0320 	rsb	r3, r2, #32
 8000da4:	fa20 f103 	lsr.w	r1, r0, r3
 8000da8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dac:	fa25 f303 	lsr.w	r3, r5, r3
 8000db0:	4095      	lsls	r5, r2
 8000db2:	430d      	orrs	r5, r1
 8000db4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db8:	fa1f fe8c 	uxth.w	lr, ip
 8000dbc:	fbb3 f1f7 	udiv	r1, r3, r7
 8000dc0:	fb07 3011 	mls	r0, r7, r1, r3
 8000dc4:	0c2b      	lsrs	r3, r5, #16
 8000dc6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000dca:	fb01 f00e 	mul.w	r0, r1, lr
 8000dce:	4298      	cmp	r0, r3
 8000dd0:	fa04 f402 	lsl.w	r4, r4, r2
 8000dd4:	d908      	bls.n	8000de8 <__udivmoddi4+0x260>
 8000dd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dda:	f101 38ff 	add.w	r8, r1, #4294967295
 8000dde:	d22f      	bcs.n	8000e40 <__udivmoddi4+0x2b8>
 8000de0:	4298      	cmp	r0, r3
 8000de2:	d92d      	bls.n	8000e40 <__udivmoddi4+0x2b8>
 8000de4:	3902      	subs	r1, #2
 8000de6:	4463      	add	r3, ip
 8000de8:	1a1b      	subs	r3, r3, r0
 8000dea:	b2ad      	uxth	r5, r5
 8000dec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000df0:	fb07 3310 	mls	r3, r7, r0, r3
 8000df4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000df8:	fb00 f30e 	mul.w	r3, r0, lr
 8000dfc:	42ab      	cmp	r3, r5
 8000dfe:	d908      	bls.n	8000e12 <__udivmoddi4+0x28a>
 8000e00:	eb1c 0505 	adds.w	r5, ip, r5
 8000e04:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e08:	d216      	bcs.n	8000e38 <__udivmoddi4+0x2b0>
 8000e0a:	42ab      	cmp	r3, r5
 8000e0c:	d914      	bls.n	8000e38 <__udivmoddi4+0x2b0>
 8000e0e:	3802      	subs	r0, #2
 8000e10:	4465      	add	r5, ip
 8000e12:	1aed      	subs	r5, r5, r3
 8000e14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e18:	e738      	b.n	8000c8c <__udivmoddi4+0x104>
 8000e1a:	4631      	mov	r1, r6
 8000e1c:	4630      	mov	r0, r6
 8000e1e:	e707      	b.n	8000c30 <__udivmoddi4+0xa8>
 8000e20:	4686      	mov	lr, r0
 8000e22:	e6e5      	b.n	8000bf0 <__udivmoddi4+0x68>
 8000e24:	4618      	mov	r0, r3
 8000e26:	e6fa      	b.n	8000c1e <__udivmoddi4+0x96>
 8000e28:	454b      	cmp	r3, r9
 8000e2a:	d2a9      	bcs.n	8000d80 <__udivmoddi4+0x1f8>
 8000e2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e34:	3801      	subs	r0, #1
 8000e36:	e7a3      	b.n	8000d80 <__udivmoddi4+0x1f8>
 8000e38:	4640      	mov	r0, r8
 8000e3a:	e7ea      	b.n	8000e12 <__udivmoddi4+0x28a>
 8000e3c:	4620      	mov	r0, r4
 8000e3e:	e794      	b.n	8000d6a <__udivmoddi4+0x1e2>
 8000e40:	4641      	mov	r1, r8
 8000e42:	e7d1      	b.n	8000de8 <__udivmoddi4+0x260>
 8000e44:	46d0      	mov	r8, sl
 8000e46:	e77b      	b.n	8000d40 <__udivmoddi4+0x1b8>
 8000e48:	3b02      	subs	r3, #2
 8000e4a:	4465      	add	r5, ip
 8000e4c:	e732      	b.n	8000cb4 <__udivmoddi4+0x12c>
 8000e4e:	4608      	mov	r0, r1
 8000e50:	e709      	b.n	8000c66 <__udivmoddi4+0xde>
 8000e52:	4464      	add	r4, ip
 8000e54:	3802      	subs	r0, #2
 8000e56:	e742      	b.n	8000cde <__udivmoddi4+0x156>

08000e58 <__aeabi_idiv0>:
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop

08000e5c <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bc80      	pop	{r7}
 8000e66:	4770      	bx	lr

08000e68 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	4a06      	ldr	r2, [pc, #24]	; (8000e90 <vApplicationGetIdleTaskMemory+0x28>)
 8000e78:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	4a05      	ldr	r2, [pc, #20]	; (8000e94 <vApplicationGetIdleTaskMemory+0x2c>)
 8000e7e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2280      	movs	r2, #128	; 0x80
 8000e84:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000e86:	bf00      	nop
 8000e88:	3714      	adds	r7, #20
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bc80      	pop	{r7}
 8000e8e:	4770      	bx	lr
 8000e90:	200001fc 	.word	0x200001fc
 8000e94:	200002b0 	.word	0x200002b0

08000e98 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	4a07      	ldr	r2, [pc, #28]	; (8000ec4 <vApplicationGetTimerTaskMemory+0x2c>)
 8000ea8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000eaa:	68bb      	ldr	r3, [r7, #8]
 8000eac:	4a06      	ldr	r2, [pc, #24]	; (8000ec8 <vApplicationGetTimerTaskMemory+0x30>)
 8000eae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000eb6:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000eb8:	bf00      	nop
 8000eba:	3714      	adds	r7, #20
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bc80      	pop	{r7}
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	200004b0 	.word	0x200004b0
 8000ec8:	20000564 	.word	0x20000564

08000ecc <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000ed4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000edc:	f023 0218 	bic.w	r2, r3, #24
 8000ee0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000eec:	bf00      	nop
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bc80      	pop	{r7}
 8000ef4:	4770      	bx	lr

08000ef6 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	b085      	sub	sp, #20
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000efe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000f0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	4013      	ands	r3, r2
 8000f18:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
}
 8000f1c:	bf00      	nop
 8000f1e:	3714      	adds	r7, #20
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bc80      	pop	{r7}
 8000f24:	4770      	bx	lr
	...

08000f28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f28:	b5b0      	push	{r4, r5, r7, lr}
 8000f2a:	b094      	sub	sp, #80	; 0x50
 8000f2c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f2e:	f000 ff05 	bl	8001d3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f32:	f000 f871 	bl	8001018 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f36:	f000 fac5 	bl	80014c4 <MX_GPIO_Init>
  MX_ADC_Init();
 8000f3a:	f000 f8cb 	bl	80010d4 <MX_ADC_Init>
  MX_LPUART1_UART_Init();
 8000f3e:	f000 f957 	bl	80011f0 <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 8000f42:	f000 f99f 	bl	8001284 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8000f46:	f000 f9e9 	bl	800131c <MX_RTC_Init>
  MX_SPI2_Init();
 8000f4a:	f000 fa7d 	bl	8001448 <MX_SPI2_Init>
  MX_I2C2_Init();
 8000f4e:	f000 f90f 	bl	8001170 <MX_I2C2_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of UartMutex */
  osMutexDef(UartMutex);
 8000f52:	2300      	movs	r3, #0
 8000f54:	64bb      	str	r3, [r7, #72]	; 0x48
 8000f56:	2300      	movs	r3, #0
 8000f58:	64fb      	str	r3, [r7, #76]	; 0x4c
  UartMutexHandle = osMutexCreate(osMutex(UartMutex));
 8000f5a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f006 fb9a 	bl	8007698 <osMutexCreate>
 8000f64:	4603      	mov	r3, r0
 8000f66:	4a24      	ldr	r2, [pc, #144]	; (8000ff8 <main+0xd0>)
 8000f68:	6013      	str	r3, [r2, #0]

  /* definition and creation of SpiMutex */
  osMutexDef(SpiMutex);
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	643b      	str	r3, [r7, #64]	; 0x40
 8000f6e:	2300      	movs	r3, #0
 8000f70:	647b      	str	r3, [r7, #68]	; 0x44
  SpiMutexHandle = osMutexCreate(osMutex(SpiMutex));
 8000f72:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f76:	4618      	mov	r0, r3
 8000f78:	f006 fb8e 	bl	8007698 <osMutexCreate>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	4a1f      	ldr	r2, [pc, #124]	; (8000ffc <main+0xd4>)
 8000f80:	6013      	str	r3, [r2, #0]

  /* definition and creation of I2cMutex */
  osMutexDef(I2cMutex);
 8000f82:	2300      	movs	r3, #0
 8000f84:	63bb      	str	r3, [r7, #56]	; 0x38
 8000f86:	2300      	movs	r3, #0
 8000f88:	63fb      	str	r3, [r7, #60]	; 0x3c
  I2cMutexHandle = osMutexCreate(osMutex(I2cMutex));
 8000f8a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f006 fb82 	bl	8007698 <osMutexCreate>
 8000f94:	4603      	mov	r3, r0
 8000f96:	4a1a      	ldr	r2, [pc, #104]	; (8001000 <main+0xd8>)
 8000f98:	6013      	str	r3, [r2, #0]

  /* definition and creation of RtcMutex */
  osMutexDef(RtcMutex);
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	633b      	str	r3, [r7, #48]	; 0x30
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	637b      	str	r3, [r7, #52]	; 0x34
  RtcMutexHandle = osMutexCreate(osMutex(RtcMutex));
 8000fa2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f006 fb76 	bl	8007698 <osMutexCreate>
 8000fac:	4603      	mov	r3, r0
 8000fae:	4a15      	ldr	r2, [pc, #84]	; (8001004 <main+0xdc>)
 8000fb0:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of xQueue1 */
  osMessageQDef(xQueue1, 100, uint16_t);
 8000fb2:	4b15      	ldr	r3, [pc, #84]	; (8001008 <main+0xe0>)
 8000fb4:	f107 0420 	add.w	r4, r7, #32
 8000fb8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  xQueue1Handle = osMessageCreate(osMessageQ(xQueue1), NULL);
 8000fbe:	f107 0320 	add.w	r3, r7, #32
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f006 fb7f 	bl	80076c8 <osMessageCreate>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	4a0f      	ldr	r2, [pc, #60]	; (800100c <main+0xe4>)
 8000fce:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of terminalTask */
  osThreadDef(terminalTask, terminalTaskHandler, osPriorityNormal, 0, 128);
 8000fd0:	4b0f      	ldr	r3, [pc, #60]	; (8001010 <main+0xe8>)
 8000fd2:	1d3c      	adds	r4, r7, #4
 8000fd4:	461d      	mov	r5, r3
 8000fd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fda:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fde:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  terminalTaskHandle = osThreadCreate(osThread(terminalTask), NULL);
 8000fe2:	1d3b      	adds	r3, r7, #4
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f006 faf6 	bl	80075d8 <osThreadCreate>
 8000fec:	4603      	mov	r3, r0
 8000fee:	4a09      	ldr	r2, [pc, #36]	; (8001014 <main+0xec>)
 8000ff0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000ff2:	f006 faea 	bl	80075ca <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ff6:	e7fe      	b.n	8000ff6 <main+0xce>
 8000ff8:	20000be8 	.word	0x20000be8
 8000ffc:	20000bec 	.word	0x20000bec
 8001000:	20000bf0 	.word	0x20000bf0
 8001004:	20000bf4 	.word	0x20000bf4
 8001008:	0800cff0 	.word	0x0800cff0
 800100c:	20000be4 	.word	0x20000be4
 8001010:	0800d000 	.word	0x0800d000
 8001014:	20000be0 	.word	0x20000be0

08001018 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b09a      	sub	sp, #104	; 0x68
 800101c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800101e:	f107 0320 	add.w	r3, r7, #32
 8001022:	2248      	movs	r2, #72	; 0x48
 8001024:	2100      	movs	r1, #0
 8001026:	4618      	mov	r0, r3
 8001028:	f009 f8f9 	bl	800a21e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800102c:	f107 0308 	add.w	r3, r7, #8
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	611a      	str	r2, [r3, #16]
 800103c:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800103e:	f001 fd21 	bl	8002a84 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001042:	2000      	movs	r0, #0
 8001044:	f7ff ff42 	bl	8000ecc <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001048:	4b21      	ldr	r3, [pc, #132]	; (80010d0 <SystemClock_Config+0xb8>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001050:	4a1f      	ldr	r2, [pc, #124]	; (80010d0 <SystemClock_Config+0xb8>)
 8001052:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001056:	6013      	str	r3, [r2, #0]
 8001058:	4b1d      	ldr	r3, [pc, #116]	; (80010d0 <SystemClock_Config+0xb8>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001060:	607b      	str	r3, [r7, #4]
 8001062:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 8001064:	2326      	movs	r3, #38	; 0x26
 8001066:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001068:	2381      	movs	r3, #129	; 0x81
 800106a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800106c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001070:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001072:	2301      	movs	r3, #1
 8001074:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001076:	2340      	movs	r3, #64	; 0x40
 8001078:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800107a:	2300      	movs	r3, #0
 800107c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 800107e:	23b0      	movs	r3, #176	; 0xb0
 8001080:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001082:	2300      	movs	r3, #0
 8001084:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001086:	f107 0320 	add.w	r3, r7, #32
 800108a:	4618      	mov	r0, r3
 800108c:	f001 ffa4 	bl	8002fd8 <HAL_RCC_OscConfig>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001096:	f000 fa9b 	bl	80015d0 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 800109a:	234f      	movs	r3, #79	; 0x4f
 800109c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010a2:	2300      	movs	r3, #0
 80010a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010a6:	2300      	movs	r3, #0
 80010a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010aa:	2300      	movs	r3, #0
 80010ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80010ae:	2300      	movs	r3, #0
 80010b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010b2:	f107 0308 	add.w	r3, r7, #8
 80010b6:	2102      	movs	r1, #2
 80010b8:	4618      	mov	r0, r3
 80010ba:	f002 fb0f 	bl	80036dc <HAL_RCC_ClockConfig>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80010c4:	f000 fa84 	bl	80015d0 <Error_Handler>
  }
}
 80010c8:	bf00      	nop
 80010ca:	3768      	adds	r7, #104	; 0x68
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	58000400 	.word	0x58000400

080010d4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 80010d8:	4b23      	ldr	r3, [pc, #140]	; (8001168 <MX_ADC_Init+0x94>)
 80010da:	4a24      	ldr	r2, [pc, #144]	; (800116c <MX_ADC_Init+0x98>)
 80010dc:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80010de:	4b22      	ldr	r3, [pc, #136]	; (8001168 <MX_ADC_Init+0x94>)
 80010e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010e4:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80010e6:	4b20      	ldr	r3, [pc, #128]	; (8001168 <MX_ADC_Init+0x94>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010ec:	4b1e      	ldr	r3, [pc, #120]	; (8001168 <MX_ADC_Init+0x94>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80010f2:	4b1d      	ldr	r3, [pc, #116]	; (8001168 <MX_ADC_Init+0x94>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010f8:	4b1b      	ldr	r3, [pc, #108]	; (8001168 <MX_ADC_Init+0x94>)
 80010fa:	2204      	movs	r2, #4
 80010fc:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80010fe:	4b1a      	ldr	r3, [pc, #104]	; (8001168 <MX_ADC_Init+0x94>)
 8001100:	2200      	movs	r2, #0
 8001102:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001104:	4b18      	ldr	r3, [pc, #96]	; (8001168 <MX_ADC_Init+0x94>)
 8001106:	2200      	movs	r2, #0
 8001108:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 800110a:	4b17      	ldr	r3, [pc, #92]	; (8001168 <MX_ADC_Init+0x94>)
 800110c:	2200      	movs	r2, #0
 800110e:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8001110:	4b15      	ldr	r3, [pc, #84]	; (8001168 <MX_ADC_Init+0x94>)
 8001112:	2201      	movs	r2, #1
 8001114:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001116:	4b14      	ldr	r3, [pc, #80]	; (8001168 <MX_ADC_Init+0x94>)
 8001118:	2200      	movs	r2, #0
 800111a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800111e:	4b12      	ldr	r3, [pc, #72]	; (8001168 <MX_ADC_Init+0x94>)
 8001120:	2200      	movs	r2, #0
 8001122:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001124:	4b10      	ldr	r3, [pc, #64]	; (8001168 <MX_ADC_Init+0x94>)
 8001126:	2200      	movs	r2, #0
 8001128:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 800112a:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <MX_ADC_Init+0x94>)
 800112c:	2200      	movs	r2, #0
 800112e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001132:	4b0d      	ldr	r3, [pc, #52]	; (8001168 <MX_ADC_Init+0x94>)
 8001134:	2200      	movs	r2, #0
 8001136:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8001138:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <MX_ADC_Init+0x94>)
 800113a:	2200      	movs	r2, #0
 800113c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800113e:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <MX_ADC_Init+0x94>)
 8001140:	2200      	movs	r2, #0
 8001142:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8001144:	4b08      	ldr	r3, [pc, #32]	; (8001168 <MX_ADC_Init+0x94>)
 8001146:	2200      	movs	r2, #0
 8001148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800114c:	4b06      	ldr	r3, [pc, #24]	; (8001168 <MX_ADC_Init+0x94>)
 800114e:	2200      	movs	r2, #0
 8001150:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001152:	4805      	ldr	r0, [pc, #20]	; (8001168 <MX_ADC_Init+0x94>)
 8001154:	f000 fecc 	bl	8001ef0 <HAL_ADC_Init>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_ADC_Init+0x8e>
  {
    Error_Handler();
 800115e:	f000 fa37 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000964 	.word	0x20000964
 800116c:	40012400 	.word	0x40012400

08001170 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001174:	4b1b      	ldr	r3, [pc, #108]	; (80011e4 <MX_I2C2_Init+0x74>)
 8001176:	4a1c      	ldr	r2, [pc, #112]	; (80011e8 <MX_I2C2_Init+0x78>)
 8001178:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 800117a:	4b1a      	ldr	r3, [pc, #104]	; (80011e4 <MX_I2C2_Init+0x74>)
 800117c:	4a1b      	ldr	r2, [pc, #108]	; (80011ec <MX_I2C2_Init+0x7c>)
 800117e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001180:	4b18      	ldr	r3, [pc, #96]	; (80011e4 <MX_I2C2_Init+0x74>)
 8001182:	2200      	movs	r2, #0
 8001184:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001186:	4b17      	ldr	r3, [pc, #92]	; (80011e4 <MX_I2C2_Init+0x74>)
 8001188:	2201      	movs	r2, #1
 800118a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800118c:	4b15      	ldr	r3, [pc, #84]	; (80011e4 <MX_I2C2_Init+0x74>)
 800118e:	2200      	movs	r2, #0
 8001190:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001192:	4b14      	ldr	r3, [pc, #80]	; (80011e4 <MX_I2C2_Init+0x74>)
 8001194:	2200      	movs	r2, #0
 8001196:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001198:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <MX_I2C2_Init+0x74>)
 800119a:	2200      	movs	r2, #0
 800119c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800119e:	4b11      	ldr	r3, [pc, #68]	; (80011e4 <MX_I2C2_Init+0x74>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011a4:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <MX_I2C2_Init+0x74>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80011aa:	480e      	ldr	r0, [pc, #56]	; (80011e4 <MX_I2C2_Init+0x74>)
 80011ac:	f001 fb45 	bl	800283a <HAL_I2C_Init>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80011b6:	f000 fa0b 	bl	80015d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011ba:	2100      	movs	r1, #0
 80011bc:	4809      	ldr	r0, [pc, #36]	; (80011e4 <MX_I2C2_Init+0x74>)
 80011be:	f001 fbcb 	bl	8002958 <HAL_I2CEx_ConfigAnalogFilter>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80011c8:	f000 fa02 	bl	80015d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80011cc:	2100      	movs	r1, #0
 80011ce:	4805      	ldr	r0, [pc, #20]	; (80011e4 <MX_I2C2_Init+0x74>)
 80011d0:	f001 fc0c 	bl	80029ec <HAL_I2CEx_ConfigDigitalFilter>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80011da:	f000 f9f9 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	200009c8 	.word	0x200009c8
 80011e8:	40005800 	.word	0x40005800
 80011ec:	20303e5d 	.word	0x20303e5d

080011f0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80011f4:	4b20      	ldr	r3, [pc, #128]	; (8001278 <MX_LPUART1_UART_Init+0x88>)
 80011f6:	4a21      	ldr	r2, [pc, #132]	; (800127c <MX_LPUART1_UART_Init+0x8c>)
 80011f8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80011fa:	4b1f      	ldr	r3, [pc, #124]	; (8001278 <MX_LPUART1_UART_Init+0x88>)
 80011fc:	4a20      	ldr	r2, [pc, #128]	; (8001280 <MX_LPUART1_UART_Init+0x90>)
 80011fe:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001200:	4b1d      	ldr	r3, [pc, #116]	; (8001278 <MX_LPUART1_UART_Init+0x88>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001206:	4b1c      	ldr	r3, [pc, #112]	; (8001278 <MX_LPUART1_UART_Init+0x88>)
 8001208:	2200      	movs	r2, #0
 800120a:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800120c:	4b1a      	ldr	r3, [pc, #104]	; (8001278 <MX_LPUART1_UART_Init+0x88>)
 800120e:	2200      	movs	r2, #0
 8001210:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_RX;
 8001212:	4b19      	ldr	r3, [pc, #100]	; (8001278 <MX_LPUART1_UART_Init+0x88>)
 8001214:	2204      	movs	r2, #4
 8001216:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001218:	4b17      	ldr	r3, [pc, #92]	; (8001278 <MX_LPUART1_UART_Init+0x88>)
 800121a:	2200      	movs	r2, #0
 800121c:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800121e:	4b16      	ldr	r3, [pc, #88]	; (8001278 <MX_LPUART1_UART_Init+0x88>)
 8001220:	2200      	movs	r2, #0
 8001222:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001224:	4b14      	ldr	r3, [pc, #80]	; (8001278 <MX_LPUART1_UART_Init+0x88>)
 8001226:	2200      	movs	r2, #0
 8001228:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800122a:	4b13      	ldr	r3, [pc, #76]	; (8001278 <MX_LPUART1_UART_Init+0x88>)
 800122c:	2200      	movs	r2, #0
 800122e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&hlpuart1) != HAL_OK)
 8001230:	4811      	ldr	r0, [pc, #68]	; (8001278 <MX_LPUART1_UART_Init+0x88>)
 8001232:	f003 ff27 	bl	8005084 <HAL_HalfDuplex_Init>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 800123c:	f000 f9c8 	bl	80015d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001240:	2100      	movs	r1, #0
 8001242:	480d      	ldr	r0, [pc, #52]	; (8001278 <MX_LPUART1_UART_Init+0x88>)
 8001244:	f005 feeb 	bl	800701e <HAL_UARTEx_SetTxFifoThreshold>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 800124e:	f000 f9bf 	bl	80015d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001252:	2100      	movs	r1, #0
 8001254:	4808      	ldr	r0, [pc, #32]	; (8001278 <MX_LPUART1_UART_Init+0x88>)
 8001256:	f005 ff20 	bl	800709a <HAL_UARTEx_SetRxFifoThreshold>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8001260:	f000 f9b6 	bl	80015d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001264:	4804      	ldr	r0, [pc, #16]	; (8001278 <MX_LPUART1_UART_Init+0x88>)
 8001266:	f005 fea2 	bl	8006fae <HAL_UARTEx_DisableFifoMode>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8001270:	f000 f9ae 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001274:	bf00      	nop
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20000a1c 	.word	0x20000a1c
 800127c:	40008000 	.word	0x40008000
 8001280:	00033324 	.word	0x00033324

08001284 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001288:	4b22      	ldr	r3, [pc, #136]	; (8001314 <MX_USART2_UART_Init+0x90>)
 800128a:	4a23      	ldr	r2, [pc, #140]	; (8001318 <MX_USART2_UART_Init+0x94>)
 800128c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800128e:	4b21      	ldr	r3, [pc, #132]	; (8001314 <MX_USART2_UART_Init+0x90>)
 8001290:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001294:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001296:	4b1f      	ldr	r3, [pc, #124]	; (8001314 <MX_USART2_UART_Init+0x90>)
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800129c:	4b1d      	ldr	r3, [pc, #116]	; (8001314 <MX_USART2_UART_Init+0x90>)
 800129e:	2200      	movs	r2, #0
 80012a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012a2:	4b1c      	ldr	r3, [pc, #112]	; (8001314 <MX_USART2_UART_Init+0x90>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012a8:	4b1a      	ldr	r3, [pc, #104]	; (8001314 <MX_USART2_UART_Init+0x90>)
 80012aa:	220c      	movs	r2, #12
 80012ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ae:	4b19      	ldr	r3, [pc, #100]	; (8001314 <MX_USART2_UART_Init+0x90>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012b4:	4b17      	ldr	r3, [pc, #92]	; (8001314 <MX_USART2_UART_Init+0x90>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012ba:	4b16      	ldr	r3, [pc, #88]	; (8001314 <MX_USART2_UART_Init+0x90>)
 80012bc:	2200      	movs	r2, #0
 80012be:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012c0:	4b14      	ldr	r3, [pc, #80]	; (8001314 <MX_USART2_UART_Init+0x90>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012c6:	4b13      	ldr	r3, [pc, #76]	; (8001314 <MX_USART2_UART_Init+0x90>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012cc:	4811      	ldr	r0, [pc, #68]	; (8001314 <MX_USART2_UART_Init+0x90>)
 80012ce:	f003 fe89 	bl	8004fe4 <HAL_UART_Init>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80012d8:	f000 f97a 	bl	80015d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012dc:	2100      	movs	r1, #0
 80012de:	480d      	ldr	r0, [pc, #52]	; (8001314 <MX_USART2_UART_Init+0x90>)
 80012e0:	f005 fe9d 	bl	800701e <HAL_UARTEx_SetTxFifoThreshold>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80012ea:	f000 f971 	bl	80015d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012ee:	2100      	movs	r1, #0
 80012f0:	4808      	ldr	r0, [pc, #32]	; (8001314 <MX_USART2_UART_Init+0x90>)
 80012f2:	f005 fed2 	bl	800709a <HAL_UARTEx_SetRxFifoThreshold>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80012fc:	f000 f968 	bl	80015d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001300:	4804      	ldr	r0, [pc, #16]	; (8001314 <MX_USART2_UART_Init+0x90>)
 8001302:	f005 fe54 	bl	8006fae <HAL_UARTEx_DisableFifoMode>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800130c:	f000 f960 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001310:	bf00      	nop
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20000ab0 	.word	0x20000ab0
 8001318:	40004400 	.word	0x40004400

0800131c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b092      	sub	sp, #72	; 0x48
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001322:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	60da      	str	r2, [r3, #12]
 8001330:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001332:	2300      	movs	r3, #0
 8001334:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8001336:	1d3b      	adds	r3, r7, #4
 8001338:	222c      	movs	r2, #44	; 0x2c
 800133a:	2100      	movs	r1, #0
 800133c:	4618      	mov	r0, r3
 800133e:	f008 ff6e 	bl	800a21e <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001342:	4b3f      	ldr	r3, [pc, #252]	; (8001440 <MX_RTC_Init+0x124>)
 8001344:	4a3f      	ldr	r2, [pc, #252]	; (8001444 <MX_RTC_Init+0x128>)
 8001346:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001348:	4b3d      	ldr	r3, [pc, #244]	; (8001440 <MX_RTC_Init+0x124>)
 800134a:	2200      	movs	r2, #0
 800134c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800134e:	4b3c      	ldr	r3, [pc, #240]	; (8001440 <MX_RTC_Init+0x124>)
 8001350:	227f      	movs	r2, #127	; 0x7f
 8001352:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001354:	4b3a      	ldr	r3, [pc, #232]	; (8001440 <MX_RTC_Init+0x124>)
 8001356:	22ff      	movs	r2, #255	; 0xff
 8001358:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800135a:	4b39      	ldr	r3, [pc, #228]	; (8001440 <MX_RTC_Init+0x124>)
 800135c:	2200      	movs	r2, #0
 800135e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001360:	4b37      	ldr	r3, [pc, #220]	; (8001440 <MX_RTC_Init+0x124>)
 8001362:	2200      	movs	r2, #0
 8001364:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001366:	4b36      	ldr	r3, [pc, #216]	; (8001440 <MX_RTC_Init+0x124>)
 8001368:	2200      	movs	r2, #0
 800136a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800136c:	4b34      	ldr	r3, [pc, #208]	; (8001440 <MX_RTC_Init+0x124>)
 800136e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001372:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001374:	4b32      	ldr	r3, [pc, #200]	; (8001440 <MX_RTC_Init+0x124>)
 8001376:	2200      	movs	r2, #0
 8001378:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 800137a:	4b31      	ldr	r3, [pc, #196]	; (8001440 <MX_RTC_Init+0x124>)
 800137c:	2200      	movs	r2, #0
 800137e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001380:	482f      	ldr	r0, [pc, #188]	; (8001440 <MX_RTC_Init+0x124>)
 8001382:	f002 fea5 	bl	80040d0 <HAL_RTC_Init>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 800138c:	f000 f920 	bl	80015d0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001390:	2300      	movs	r3, #0
 8001392:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x0;
 8001396:	2300      	movs	r3, #0
 8001398:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x0;
 800139c:	2300      	movs	r3, #0
 800139e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80013a2:	2300      	movs	r3, #0
 80013a4:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80013a6:	2300      	movs	r3, #0
 80013a8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80013aa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80013ae:	2201      	movs	r2, #1
 80013b0:	4619      	mov	r1, r3
 80013b2:	4823      	ldr	r0, [pc, #140]	; (8001440 <MX_RTC_Init+0x124>)
 80013b4:	f002 ff0e 	bl	80041d4 <HAL_RTC_SetTime>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_RTC_Init+0xa6>
  {
    Error_Handler();
 80013be:	f000 f907 	bl	80015d0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80013c2:	2301      	movs	r3, #1
 80013c4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 80013c8:	2301      	movs	r3, #1
 80013ca:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x1;
 80013ce:	2301      	movs	r3, #1
 80013d0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x0;
 80013d4:	2300      	movs	r3, #0
 80013d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80013da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013de:	2201      	movs	r2, #1
 80013e0:	4619      	mov	r1, r3
 80013e2:	4817      	ldr	r0, [pc, #92]	; (8001440 <MX_RTC_Init+0x124>)
 80013e4:	f002 fff4 	bl	80043d0 <HAL_RTC_SetDate>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_RTC_Init+0xd6>
  {
    Error_Handler();
 80013ee:	f000 f8ef 	bl	80015d0 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 80013f6:	2300      	movs	r3, #0
 80013f8:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80013fe:	2300      	movs	r3, #0
 8001400:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001402:	2300      	movs	r3, #0
 8001404:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001406:	2300      	movs	r3, #0
 8001408:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800140a:	2300      	movs	r3, #0
 800140c:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800140e:	2300      	movs	r3, #0
 8001410:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001412:	2300      	movs	r3, #0
 8001414:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 8001416:	2301      	movs	r3, #1
 8001418:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 800141c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001420:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001422:	1d3b      	adds	r3, r7, #4
 8001424:	2201      	movs	r2, #1
 8001426:	4619      	mov	r1, r3
 8001428:	4805      	ldr	r0, [pc, #20]	; (8001440 <MX_RTC_Init+0x124>)
 800142a:	f003 f8a5 	bl	8004578 <HAL_RTC_SetAlarm>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_RTC_Init+0x11c>
  {
    Error_Handler();
 8001434:	f000 f8cc 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001438:	bf00      	nop
 800143a:	3748      	adds	r7, #72	; 0x48
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	20000b44 	.word	0x20000b44
 8001444:	40002800 	.word	0x40002800

08001448 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800144c:	4b1b      	ldr	r3, [pc, #108]	; (80014bc <MX_SPI2_Init+0x74>)
 800144e:	4a1c      	ldr	r2, [pc, #112]	; (80014c0 <MX_SPI2_Init+0x78>)
 8001450:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001452:	4b1a      	ldr	r3, [pc, #104]	; (80014bc <MX_SPI2_Init+0x74>)
 8001454:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001458:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800145a:	4b18      	ldr	r3, [pc, #96]	; (80014bc <MX_SPI2_Init+0x74>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001460:	4b16      	ldr	r3, [pc, #88]	; (80014bc <MX_SPI2_Init+0x74>)
 8001462:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001466:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001468:	4b14      	ldr	r3, [pc, #80]	; (80014bc <MX_SPI2_Init+0x74>)
 800146a:	2200      	movs	r2, #0
 800146c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800146e:	4b13      	ldr	r3, [pc, #76]	; (80014bc <MX_SPI2_Init+0x74>)
 8001470:	2200      	movs	r2, #0
 8001472:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001474:	4b11      	ldr	r3, [pc, #68]	; (80014bc <MX_SPI2_Init+0x74>)
 8001476:	f44f 7200 	mov.w	r2, #512	; 0x200
 800147a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800147c:	4b0f      	ldr	r3, [pc, #60]	; (80014bc <MX_SPI2_Init+0x74>)
 800147e:	2200      	movs	r2, #0
 8001480:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001482:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <MX_SPI2_Init+0x74>)
 8001484:	2200      	movs	r2, #0
 8001486:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001488:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <MX_SPI2_Init+0x74>)
 800148a:	2200      	movs	r2, #0
 800148c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800148e:	4b0b      	ldr	r3, [pc, #44]	; (80014bc <MX_SPI2_Init+0x74>)
 8001490:	2200      	movs	r2, #0
 8001492:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001494:	4b09      	ldr	r3, [pc, #36]	; (80014bc <MX_SPI2_Init+0x74>)
 8001496:	2207      	movs	r2, #7
 8001498:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800149a:	4b08      	ldr	r3, [pc, #32]	; (80014bc <MX_SPI2_Init+0x74>)
 800149c:	2200      	movs	r2, #0
 800149e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014a0:	4b06      	ldr	r3, [pc, #24]	; (80014bc <MX_SPI2_Init+0x74>)
 80014a2:	2208      	movs	r2, #8
 80014a4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80014a6:	4805      	ldr	r0, [pc, #20]	; (80014bc <MX_SPI2_Init+0x74>)
 80014a8:	f003 fa3a 	bl	8004920 <HAL_SPI_Init>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80014b2:	f000 f88d 	bl	80015d0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80014b6:	bf00      	nop
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20000b7c 	.word	0x20000b7c
 80014c0:	40003800 	.word	0x40003800

080014c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ca:	1d3b      	adds	r3, r7, #4
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
 80014d6:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d8:	2001      	movs	r0, #1
 80014da:	f7ff fd0c 	bl	8000ef6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014de:	2002      	movs	r0, #2
 80014e0:	f7ff fd09 	bl	8000ef6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e4:	2004      	movs	r0, #4
 80014e6:	f7ff fd06 	bl	8000ef6 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ADC_SW_Pin|MB_OC_Pin|LED_Pin, GPIO_PIN_RESET);
 80014ea:	2200      	movs	r2, #0
 80014ec:	21e0      	movs	r1, #224	; 0xe0
 80014ee:	481e      	ldr	r0, [pc, #120]	; (8001568 <MX_GPIO_Init+0xa4>)
 80014f0:	f001 f98c 	bl	800280c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MB_PWR_Pin|EXT_PWR_Pin, GPIO_PIN_RESET);
 80014f4:	2200      	movs	r2, #0
 80014f6:	f240 2101 	movw	r1, #513	; 0x201
 80014fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014fe:	f001 f985 	bl	800280c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MB_CTL_GPIO_Port, MB_CTL_Pin, GPIO_PIN_RESET);
 8001502:	2200      	movs	r2, #0
 8001504:	2101      	movs	r1, #1
 8001506:	4819      	ldr	r0, [pc, #100]	; (800156c <MX_GPIO_Init+0xa8>)
 8001508:	f001 f980 	bl	800280c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADC_SW_Pin MB_OC_Pin LED_Pin */
  GPIO_InitStruct.Pin = ADC_SW_Pin|MB_OC_Pin|LED_Pin;
 800150c:	23e0      	movs	r3, #224	; 0xe0
 800150e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001510:	2301      	movs	r3, #1
 8001512:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001518:	2300      	movs	r3, #0
 800151a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800151c:	1d3b      	adds	r3, r7, #4
 800151e:	4619      	mov	r1, r3
 8001520:	4811      	ldr	r0, [pc, #68]	; (8001568 <MX_GPIO_Init+0xa4>)
 8001522:	f001 f813 	bl	800254c <HAL_GPIO_Init>

  /*Configure GPIO pins : MB_PWR_Pin EXT_PWR_Pin */
  GPIO_InitStruct.Pin = MB_PWR_Pin|EXT_PWR_Pin;
 8001526:	f240 2301 	movw	r3, #513	; 0x201
 800152a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800152c:	2301      	movs	r3, #1
 800152e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001530:	2300      	movs	r3, #0
 8001532:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001534:	2300      	movs	r3, #0
 8001536:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001538:	1d3b      	adds	r3, r7, #4
 800153a:	4619      	mov	r1, r3
 800153c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001540:	f001 f804 	bl	800254c <HAL_GPIO_Init>

  /*Configure GPIO pin : MB_CTL_Pin */
  GPIO_InitStruct.Pin = MB_CTL_Pin;
 8001544:	2301      	movs	r3, #1
 8001546:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001548:	2301      	movs	r3, #1
 800154a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001550:	2300      	movs	r3, #0
 8001552:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(MB_CTL_GPIO_Port, &GPIO_InitStruct);
 8001554:	1d3b      	adds	r3, r7, #4
 8001556:	4619      	mov	r1, r3
 8001558:	4804      	ldr	r0, [pc, #16]	; (800156c <MX_GPIO_Init+0xa8>)
 800155a:	f000 fff7 	bl	800254c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800155e:	bf00      	nop
 8001560:	3718      	adds	r7, #24
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	48000400 	.word	0x48000400
 800156c:	48000800 	.word	0x48000800

08001570 <Get_DebugHandle>:
  return &hadc;
}


UART_HandleTypeDef *Get_DebugHandle(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  return &huart2;
 8001574:	4b02      	ldr	r3, [pc, #8]	; (8001580 <Get_DebugHandle+0x10>)
}
 8001576:	4618      	mov	r0, r3
 8001578:	46bd      	mov	sp, r7
 800157a:	bc80      	pop	{r7}
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	20000ab0 	.word	0x20000ab0

08001584 <Get_RtcHandle>:
{
  return &hlpuart1;;
}

RTC_HandleTypeDef  *Get_RtcHandle(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  return &hrtc;
 8001588:	4b02      	ldr	r3, [pc, #8]	; (8001594 <Get_RtcHandle+0x10>)
}
 800158a:	4618      	mov	r0, r3
 800158c:	46bd      	mov	sp, r7
 800158e:	bc80      	pop	{r7}
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	20000b44 	.word	0x20000b44

08001598 <Get_TerminalQueueHandle>:




osMessageQId Get_TerminalQueueHandle(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  return xQueue1Handle;;
 800159c:	4b02      	ldr	r3, [pc, #8]	; (80015a8 <Get_TerminalQueueHandle+0x10>)
 800159e:	681b      	ldr	r3, [r3, #0]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bc80      	pop	{r7}
 80015a6:	4770      	bx	lr
 80015a8:	20000be4 	.word	0x20000be4

080015ac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a04      	ldr	r2, [pc, #16]	; (80015cc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d101      	bne.n	80015c2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80015be:	f000 fbdd 	bl	8001d7c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40012c00 	.word	0x40012c00

080015d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015d4:	b672      	cpsid	i
}
 80015d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015d8:	e7fe      	b.n	80015d8 <Error_Handler+0x8>

080015da <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80015de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80015f2:	bf00      	nop
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bc80      	pop	{r7}
 80015f8:	4770      	bx	lr

080015fa <LL_AHB2_GRP1_EnableClock>:
{
 80015fa:	b480      	push	{r7}
 80015fc:	b085      	sub	sp, #20
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001602:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001606:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001608:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4313      	orrs	r3, r2
 8001610:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001612:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001616:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4013      	ands	r3, r2
 800161c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800161e:	68fb      	ldr	r3, [r7, #12]
}
 8001620:	bf00      	nop
 8001622:	3714      	adds	r7, #20
 8001624:	46bd      	mov	sp, r7
 8001626:	bc80      	pop	{r7}
 8001628:	4770      	bx	lr

0800162a <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800162a:	b480      	push	{r7}
 800162c:	b085      	sub	sp, #20
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001632:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001636:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001638:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4313      	orrs	r3, r2
 8001640:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001642:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001646:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	4013      	ands	r3, r2
 800164c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800164e:	68fb      	ldr	r3, [r7, #12]
}
 8001650:	bf00      	nop
 8001652:	3714      	adds	r7, #20
 8001654:	46bd      	mov	sp, r7
 8001656:	bc80      	pop	{r7}
 8001658:	4770      	bx	lr

0800165a <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM3

  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 800165a:	b480      	push	{r7}
 800165c:	b085      	sub	sp, #20
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001666:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001668:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	4313      	orrs	r3, r2
 8001670:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001672:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001676:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4013      	ands	r3, r2
 800167c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800167e:	68fb      	ldr	r3, [r7, #12]
}
 8001680:	bf00      	nop
 8001682:	3714      	adds	r7, #20
 8001684:	46bd      	mov	sp, r7
 8001686:	bc80      	pop	{r7}
 8001688:	4770      	bx	lr

0800168a <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800168a:	b480      	push	{r7}
 800168c:	b085      	sub	sp, #20
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001692:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001696:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001698:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	4313      	orrs	r3, r2
 80016a0:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80016a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016a6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	4013      	ands	r3, r2
 80016ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016ae:	68fb      	ldr	r3, [r7, #12]
}
 80016b0:	bf00      	nop
 80016b2:	3714      	adds	r7, #20
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bc80      	pop	{r7}
 80016b8:	4770      	bx	lr

080016ba <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80016be:	2200      	movs	r2, #0
 80016c0:	210f      	movs	r1, #15
 80016c2:	f06f 0001 	mvn.w	r0, #1
 80016c6:	f000 fe5c 	bl	8002382 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
	...

080016d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b088      	sub	sp, #32
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d8:	f107 030c 	add.w	r3, r7, #12
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a0c      	ldr	r2, [pc, #48]	; (8001720 <HAL_ADC_MspInit+0x50>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d112      	bne.n	8001718 <HAL_ADC_MspInit+0x48>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80016f2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80016f6:	f7ff ffc8 	bl	800168a <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016fa:	2002      	movs	r0, #2
 80016fc:	f7ff ff7d 	bl	80015fa <LL_AHB2_GRP1_EnableClock>
    /**ADC GPIO Configuration
    PB3     ------> ADC_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001700:	2308      	movs	r3, #8
 8001702:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001704:	2303      	movs	r3, #3
 8001706:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800170c:	f107 030c 	add.w	r3, r7, #12
 8001710:	4619      	mov	r1, r3
 8001712:	4804      	ldr	r0, [pc, #16]	; (8001724 <HAL_ADC_MspInit+0x54>)
 8001714:	f000 ff1a 	bl	800254c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }

}
 8001718:	bf00      	nop
 800171a:	3720      	adds	r7, #32
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	40012400 	.word	0x40012400
 8001724:	48000400 	.word	0x48000400

08001728 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b096      	sub	sp, #88	; 0x58
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001730:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	60da      	str	r2, [r3, #12]
 800173e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001740:	f107 030c 	add.w	r3, r7, #12
 8001744:	2238      	movs	r2, #56	; 0x38
 8001746:	2100      	movs	r1, #0
 8001748:	4618      	mov	r0, r3
 800174a:	f008 fd68 	bl	800a21e <memset>
  if(hi2c->Instance==I2C2)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a21      	ldr	r2, [pc, #132]	; (80017d8 <HAL_I2C_MspInit+0xb0>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d13b      	bne.n	80017d0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001758:	2380      	movs	r3, #128	; 0x80
 800175a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800175c:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001760:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001762:	f107 030c 	add.w	r3, r7, #12
 8001766:	4618      	mov	r0, r3
 8001768:	f002 fb98 	bl	8003e9c <HAL_RCCEx_PeriphCLKConfig>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001772:	f7ff ff2d 	bl	80015d0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001776:	2001      	movs	r0, #1
 8001778:	f7ff ff3f 	bl	80015fa <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800177c:	2002      	movs	r0, #2
 800177e:	f7ff ff3c 	bl	80015fa <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA15     ------> I2C2_SDA
    PB15     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001782:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001786:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001788:	2312      	movs	r3, #18
 800178a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001790:	2300      	movs	r3, #0
 8001792:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001794:	2304      	movs	r3, #4
 8001796:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001798:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800179c:	4619      	mov	r1, r3
 800179e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017a2:	f000 fed3 	bl	800254c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80017a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017aa:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017ac:	2312      	movs	r3, #18
 80017ae:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b4:	2300      	movs	r3, #0
 80017b6:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80017b8:	2304      	movs	r3, #4
 80017ba:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017bc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80017c0:	4619      	mov	r1, r3
 80017c2:	4806      	ldr	r0, [pc, #24]	; (80017dc <HAL_I2C_MspInit+0xb4>)
 80017c4:	f000 fec2 	bl	800254c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80017c8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80017cc:	f7ff ff2d 	bl	800162a <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80017d0:	bf00      	nop
 80017d2:	3758      	adds	r7, #88	; 0x58
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40005800 	.word	0x40005800
 80017dc:	48000400 	.word	0x48000400

080017e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b096      	sub	sp, #88	; 0x58
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017f8:	f107 030c 	add.w	r3, r7, #12
 80017fc:	2238      	movs	r2, #56	; 0x38
 80017fe:	2100      	movs	r1, #0
 8001800:	4618      	mov	r0, r3
 8001802:	f008 fd0c 	bl	800a21e <memset>
  if(huart->Instance==LPUART1)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a34      	ldr	r2, [pc, #208]	; (80018dc <HAL_UART_MspInit+0xfc>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d12c      	bne.n	800186a <HAL_UART_MspInit+0x8a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001810:	2320      	movs	r3, #32
 8001812:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001814:	2300      	movs	r3, #0
 8001816:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001818:	f107 030c 	add.w	r3, r7, #12
 800181c:	4618      	mov	r0, r3
 800181e:	f002 fb3d 	bl	8003e9c <HAL_RCCEx_PeriphCLKConfig>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001828:	f7ff fed2 	bl	80015d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800182c:	2001      	movs	r0, #1
 800182e:	f7ff ff14 	bl	800165a <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001832:	2004      	movs	r0, #4
 8001834:	f7ff fee1 	bl	80015fa <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = MB_RX_Pin;
 8001838:	2302      	movs	r3, #2
 800183a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800183c:	2312      	movs	r3, #18
 800183e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001840:	2301      	movs	r3, #1
 8001842:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001844:	2300      	movs	r3, #0
 8001846:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001848:	2308      	movs	r3, #8
 800184a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(MB_RX_GPIO_Port, &GPIO_InitStruct);
 800184c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001850:	4619      	mov	r1, r3
 8001852:	4823      	ldr	r0, [pc, #140]	; (80018e0 <HAL_UART_MspInit+0x100>)
 8001854:	f000 fe7a 	bl	800254c <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8001858:	2200      	movs	r2, #0
 800185a:	2105      	movs	r1, #5
 800185c:	2026      	movs	r0, #38	; 0x26
 800185e:	f000 fd90 	bl	8002382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001862:	2026      	movs	r0, #38	; 0x26
 8001864:	f000 fda7 	bl	80023b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001868:	e033      	b.n	80018d2 <HAL_UART_MspInit+0xf2>
  else if(huart->Instance==USART2)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a1d      	ldr	r2, [pc, #116]	; (80018e4 <HAL_UART_MspInit+0x104>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d12e      	bne.n	80018d2 <HAL_UART_MspInit+0xf2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001874:	2302      	movs	r3, #2
 8001876:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001878:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800187c:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800187e:	f107 030c 	add.w	r3, r7, #12
 8001882:	4618      	mov	r0, r3
 8001884:	f002 fb0a 	bl	8003e9c <HAL_RCCEx_PeriphCLKConfig>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <HAL_UART_MspInit+0xb2>
      Error_Handler();
 800188e:	f7ff fe9f 	bl	80015d0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001892:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001896:	f7ff fec8 	bl	800162a <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800189a:	2001      	movs	r0, #1
 800189c:	f7ff fead 	bl	80015fa <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 80018a0:	230c      	movs	r3, #12
 80018a2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a4:	2302      	movs	r3, #2
 80018a6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ac:	2300      	movs	r3, #0
 80018ae:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018b0:	2307      	movs	r3, #7
 80018b2:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80018b8:	4619      	mov	r1, r3
 80018ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018be:	f000 fe45 	bl	800254c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80018c2:	2200      	movs	r2, #0
 80018c4:	2105      	movs	r1, #5
 80018c6:	2025      	movs	r0, #37	; 0x25
 80018c8:	f000 fd5b 	bl	8002382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80018cc:	2025      	movs	r0, #37	; 0x25
 80018ce:	f000 fd72 	bl	80023b6 <HAL_NVIC_EnableIRQ>
}
 80018d2:	bf00      	nop
 80018d4:	3758      	adds	r7, #88	; 0x58
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40008000 	.word	0x40008000
 80018e0:	48000800 	.word	0x48000800
 80018e4:	40004400 	.word	0x40004400

080018e8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b090      	sub	sp, #64	; 0x40
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018f0:	f107 0308 	add.w	r3, r7, #8
 80018f4:	2238      	movs	r2, #56	; 0x38
 80018f6:	2100      	movs	r1, #0
 80018f8:	4618      	mov	r0, r3
 80018fa:	f008 fc90 	bl	800a21e <memset>
  if(hrtc->Instance==RTC)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a0e      	ldr	r2, [pc, #56]	; (800193c <HAL_RTC_MspInit+0x54>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d115      	bne.n	8001934 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001908:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800190c:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800190e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001912:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001914:	f107 0308 	add.w	r3, r7, #8
 8001918:	4618      	mov	r0, r3
 800191a:	f002 fabf 	bl	8003e9c <HAL_RCCEx_PeriphCLKConfig>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001924:	f7ff fe54 	bl	80015d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001928:	f7ff fe57 	bl	80015da <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800192c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001930:	f7ff fe7b 	bl	800162a <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001934:	bf00      	nop
 8001936:	3740      	adds	r7, #64	; 0x40
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40002800 	.word	0x40002800

08001940 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b096      	sub	sp, #88	; 0x58
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001948:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	605a      	str	r2, [r3, #4]
 8001952:	609a      	str	r2, [r3, #8]
 8001954:	60da      	str	r2, [r3, #12]
 8001956:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001958:	f107 030c 	add.w	r3, r7, #12
 800195c:	2238      	movs	r2, #56	; 0x38
 800195e:	2100      	movs	r1, #0
 8001960:	4618      	mov	r0, r3
 8001962:	f008 fc5c 	bl	800a21e <memset>
  if(hspi->Instance==SPI2)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a21      	ldr	r2, [pc, #132]	; (80019f0 <HAL_SPI_MspInit+0xb0>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d13b      	bne.n	80019e8 <HAL_SPI_MspInit+0xa8>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S2;
 8001970:	2310      	movs	r3, #16
 8001972:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2s2ClockSelection = RCC_I2S2CLKSOURCE_HSI;
 8001974:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001978:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800197a:	f107 030c 	add.w	r3, r7, #12
 800197e:	4618      	mov	r0, r3
 8001980:	f002 fa8c 	bl	8003e9c <HAL_RCCEx_PeriphCLKConfig>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 800198a:	f7ff fe21 	bl	80015d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800198e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001992:	f7ff fe4a 	bl	800162a <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001996:	2002      	movs	r0, #2
 8001998:	f7ff fe2f 	bl	80015fa <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800199c:	2001      	movs	r0, #1
 800199e:	f7ff fe2c 	bl	80015fa <LL_AHB2_GRP1_EnableClock>
    /**SPI2 GPIO Configuration
    PB14     ------> SPI2_MISO
    PA10     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13;
 80019a2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80019a6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a8:	2302      	movs	r3, #2
 80019aa:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b0:	2300      	movs	r3, #0
 80019b2:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019b4:	2305      	movs	r3, #5
 80019b6:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80019bc:	4619      	mov	r1, r3
 80019be:	480d      	ldr	r0, [pc, #52]	; (80019f4 <HAL_SPI_MspInit+0xb4>)
 80019c0:	f000 fdc4 	bl	800254c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019c8:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ca:	2302      	movs	r3, #2
 80019cc:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d2:	2300      	movs	r3, #0
 80019d4:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019d6:	2305      	movs	r3, #5
 80019d8:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019da:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80019de:	4619      	mov	r1, r3
 80019e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019e4:	f000 fdb2 	bl	800254c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80019e8:	bf00      	nop
 80019ea:	3758      	adds	r7, #88	; 0x58
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40003800 	.word	0x40003800
 80019f4:	48000400 	.word	0x48000400

080019f8 <LL_APB2_GRP1_EnableClock>:
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001a00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a04:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001a10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a14:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
}
 8001a1e:	bf00      	nop
 8001a20:	3714      	adds	r7, #20
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bc80      	pop	{r7}
 8001a26:	4770      	bx	lr

08001a28 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b08c      	sub	sp, #48	; 0x30
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001a30:	2300      	movs	r3, #0
 8001a32:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8001a34:	2300      	movs	r3, #0
 8001a36:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001a3e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001a42:	f7ff ffd9 	bl	80019f8 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a46:	f107 0208 	add.w	r2, r7, #8
 8001a4a:	f107 030c 	add.w	r3, r7, #12
 8001a4e:	4611      	mov	r1, r2
 8001a50:	4618      	mov	r0, r3
 8001a52:	f002 f83f 	bl	8003ad4 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001a56:	f002 f82b 	bl	8003ab0 <HAL_RCC_GetPCLK2Freq>
 8001a5a:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a5e:	4a21      	ldr	r2, [pc, #132]	; (8001ae4 <HAL_InitTick+0xbc>)
 8001a60:	fba2 2303 	umull	r2, r3, r2, r3
 8001a64:	0c9b      	lsrs	r3, r3, #18
 8001a66:	3b01      	subs	r3, #1
 8001a68:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001a6a:	4b1f      	ldr	r3, [pc, #124]	; (8001ae8 <HAL_InitTick+0xc0>)
 8001a6c:	4a1f      	ldr	r2, [pc, #124]	; (8001aec <HAL_InitTick+0xc4>)
 8001a6e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001a70:	4b1d      	ldr	r3, [pc, #116]	; (8001ae8 <HAL_InitTick+0xc0>)
 8001a72:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a76:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001a78:	4a1b      	ldr	r2, [pc, #108]	; (8001ae8 <HAL_InitTick+0xc0>)
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a7c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001a7e:	4b1a      	ldr	r3, [pc, #104]	; (8001ae8 <HAL_InitTick+0xc0>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a84:	4b18      	ldr	r3, [pc, #96]	; (8001ae8 <HAL_InitTick+0xc0>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8001a8a:	4817      	ldr	r0, [pc, #92]	; (8001ae8 <HAL_InitTick+0xc0>)
 8001a8c:	f003 f81c 	bl	8004ac8 <HAL_TIM_Base_Init>
 8001a90:	4603      	mov	r3, r0
 8001a92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001a96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d11b      	bne.n	8001ad6 <HAL_InitTick+0xae>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001a9e:	4812      	ldr	r0, [pc, #72]	; (8001ae8 <HAL_InitTick+0xc0>)
 8001aa0:	f003 f872 	bl	8004b88 <HAL_TIM_Base_Start_IT>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001aaa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d111      	bne.n	8001ad6 <HAL_InitTick+0xae>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001ab2:	2018      	movs	r0, #24
 8001ab4:	f000 fc7f 	bl	80023b6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2b0f      	cmp	r3, #15
 8001abc:	d808      	bhi.n	8001ad0 <HAL_InitTick+0xa8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	6879      	ldr	r1, [r7, #4]
 8001ac2:	2018      	movs	r0, #24
 8001ac4:	f000 fc5d 	bl	8002382 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ac8:	4a09      	ldr	r2, [pc, #36]	; (8001af0 <HAL_InitTick+0xc8>)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6013      	str	r3, [r2, #0]
 8001ace:	e002      	b.n	8001ad6 <HAL_InitTick+0xae>
      }
      else
      {
        status = HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001ad6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3730      	adds	r7, #48	; 0x30
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	431bde83 	.word	0x431bde83
 8001ae8:	20000bf8 	.word	0x20000bf8
 8001aec:	40012c00 	.word	0x40012c00
 8001af0:	20000004 	.word	0x20000004

08001af4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001af8:	e7fe      	b.n	8001af8 <NMI_Handler+0x4>

08001afa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001afa:	b480      	push	{r7}
 8001afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001afe:	e7fe      	b.n	8001afe <HardFault_Handler+0x4>

08001b00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b04:	e7fe      	b.n	8001b04 <MemManage_Handler+0x4>

08001b06 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b0a:	e7fe      	b.n	8001b0a <BusFault_Handler+0x4>

08001b0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b10:	e7fe      	b.n	8001b10 <UsageFault_Handler+0x4>

08001b12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b12:	b480      	push	{r7}
 8001b14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bc80      	pop	{r7}
 8001b1c:	4770      	bx	lr
	...

08001b20 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update Interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b24:	4802      	ldr	r0, [pc, #8]	; (8001b30 <TIM1_UP_IRQHandler+0x10>)
 8001b26:	f003 f87b 	bl	8004c20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20000bf8 	.word	0x20000bf8

08001b34 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b38:	4802      	ldr	r0, [pc, #8]	; (8001b44 <USART2_IRQHandler+0x10>)
 8001b3a:	f003 fbcd 	bl	80052d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20000ab0 	.word	0x20000ab0

08001b48 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 Interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001b4c:	4802      	ldr	r0, [pc, #8]	; (8001b58 <LPUART1_IRQHandler+0x10>)
 8001b4e:	f003 fbc3 	bl	80052d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20000a1c 	.word	0x20000a1c

08001b5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  return 1;
 8001b60:	2301      	movs	r3, #1
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bc80      	pop	{r7}
 8001b68:	4770      	bx	lr

08001b6a <_kill>:

int _kill(int pid, int sig)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b082      	sub	sp, #8
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
 8001b72:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b74:	f008 fa22 	bl	8009fbc <__errno>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2216      	movs	r2, #22
 8001b7c:	601a      	str	r2, [r3, #0]
  return -1;
 8001b7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}

08001b8a <_exit>:

void _exit (int status)
{
 8001b8a:	b580      	push	{r7, lr}
 8001b8c:	b082      	sub	sp, #8
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b92:	f04f 31ff 	mov.w	r1, #4294967295
 8001b96:	6878      	ldr	r0, [r7, #4]
 8001b98:	f7ff ffe7 	bl	8001b6a <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b9c:	e7fe      	b.n	8001b9c <_exit+0x12>

08001b9e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b086      	sub	sp, #24
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	60f8      	str	r0, [r7, #12]
 8001ba6:	60b9      	str	r1, [r7, #8]
 8001ba8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001baa:	2300      	movs	r3, #0
 8001bac:	617b      	str	r3, [r7, #20]
 8001bae:	e00a      	b.n	8001bc6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bb0:	f3af 8000 	nop.w
 8001bb4:	4601      	mov	r1, r0
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	1c5a      	adds	r2, r3, #1
 8001bba:	60ba      	str	r2, [r7, #8]
 8001bbc:	b2ca      	uxtb	r2, r1
 8001bbe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	617b      	str	r3, [r7, #20]
 8001bc6:	697a      	ldr	r2, [r7, #20]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	dbf0      	blt.n	8001bb0 <_read+0x12>
  }

  return len;
 8001bce:	687b      	ldr	r3, [r7, #4]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3718      	adds	r7, #24
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be4:	2300      	movs	r3, #0
 8001be6:	617b      	str	r3, [r7, #20]
 8001be8:	e009      	b.n	8001bfe <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	1c5a      	adds	r2, r3, #1
 8001bee:	60ba      	str	r2, [r7, #8]
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	3301      	adds	r3, #1
 8001bfc:	617b      	str	r3, [r7, #20]
 8001bfe:	697a      	ldr	r2, [r7, #20]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	dbf1      	blt.n	8001bea <_write+0x12>
  }
  return len;
 8001c06:	687b      	ldr	r3, [r7, #4]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3718      	adds	r7, #24
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <_close>:

int _close(int file)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bc80      	pop	{r7}
 8001c24:	4770      	bx	lr

08001c26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c26:	b480      	push	{r7}
 8001c28:	b083      	sub	sp, #12
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
 8001c2e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c36:	605a      	str	r2, [r3, #4]
  return 0;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bc80      	pop	{r7}
 8001c42:	4770      	bx	lr

08001c44 <_isatty>:

int _isatty(int file)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c4c:	2301      	movs	r3, #1
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bc80      	pop	{r7}
 8001c56:	4770      	bx	lr

08001c58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3714      	adds	r7, #20
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bc80      	pop	{r7}
 8001c6e:	4770      	bx	lr

08001c70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c78:	4a14      	ldr	r2, [pc, #80]	; (8001ccc <_sbrk+0x5c>)
 8001c7a:	4b15      	ldr	r3, [pc, #84]	; (8001cd0 <_sbrk+0x60>)
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c84:	4b13      	ldr	r3, [pc, #76]	; (8001cd4 <_sbrk+0x64>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d102      	bne.n	8001c92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c8c:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <_sbrk+0x64>)
 8001c8e:	4a12      	ldr	r2, [pc, #72]	; (8001cd8 <_sbrk+0x68>)
 8001c90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c92:	4b10      	ldr	r3, [pc, #64]	; (8001cd4 <_sbrk+0x64>)
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4413      	add	r3, r2
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d207      	bcs.n	8001cb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ca0:	f008 f98c 	bl	8009fbc <__errno>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	220c      	movs	r2, #12
 8001ca8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001caa:	f04f 33ff 	mov.w	r3, #4294967295
 8001cae:	e009      	b.n	8001cc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cb0:	4b08      	ldr	r3, [pc, #32]	; (8001cd4 <_sbrk+0x64>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cb6:	4b07      	ldr	r3, [pc, #28]	; (8001cd4 <_sbrk+0x64>)
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	4a05      	ldr	r2, [pc, #20]	; (8001cd4 <_sbrk+0x64>)
 8001cc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3718      	adds	r7, #24
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	20010000 	.word	0x20010000
 8001cd0:	00000400 	.word	0x00000400
 8001cd4:	20000c44 	.word	0x20000c44
 8001cd8:	20001c38 	.word	0x20001c38

08001cdc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001ce0:	bf00      	nop
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr

08001ce8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ce8:	480d      	ldr	r0, [pc, #52]	; (8001d20 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001cea:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001cec:	f7ff fff6 	bl	8001cdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cf0:	480c      	ldr	r0, [pc, #48]	; (8001d24 <LoopForever+0x6>)
  ldr r1, =_edata
 8001cf2:	490d      	ldr	r1, [pc, #52]	; (8001d28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001cf4:	4a0d      	ldr	r2, [pc, #52]	; (8001d2c <LoopForever+0xe>)
  movs r3, #0
 8001cf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cf8:	e002      	b.n	8001d00 <LoopCopyDataInit>

08001cfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cfe:	3304      	adds	r3, #4

08001d00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d04:	d3f9      	bcc.n	8001cfa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d06:	4a0a      	ldr	r2, [pc, #40]	; (8001d30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d08:	4c0a      	ldr	r4, [pc, #40]	; (8001d34 <LoopForever+0x16>)
  movs r3, #0
 8001d0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d0c:	e001      	b.n	8001d12 <LoopFillZerobss>

08001d0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d10:	3204      	adds	r2, #4

08001d12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d14:	d3fb      	bcc.n	8001d0e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001d16:	f008 fa4d 	bl	800a1b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001d1a:	f7ff f905 	bl	8000f28 <main>

08001d1e <LoopForever>:

LoopForever:
    b LoopForever
 8001d1e:	e7fe      	b.n	8001d1e <LoopForever>
  ldr   r0, =_estack
 8001d20:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001d24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d28:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001d2c:	0800dc70 	.word	0x0800dc70
  ldr r2, =_sbss
 8001d30:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001d34:	20001c38 	.word	0x20001c38

08001d38 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d38:	e7fe      	b.n	8001d38 <ADC_IRQHandler>
	...

08001d3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d42:	2300      	movs	r3, #0
 8001d44:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d46:	2003      	movs	r0, #3
 8001d48:	f000 fb10 	bl	800236c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001d4c:	f001 fe8a 	bl	8003a64 <HAL_RCC_GetHCLKFreq>
 8001d50:	4603      	mov	r3, r0
 8001d52:	4a09      	ldr	r2, [pc, #36]	; (8001d78 <HAL_Init+0x3c>)
 8001d54:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d56:	200f      	movs	r0, #15
 8001d58:	f7ff fe66 	bl	8001a28 <HAL_InitTick>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d002      	beq.n	8001d68 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	71fb      	strb	r3, [r7, #7]
 8001d66:	e001      	b.n	8001d6c <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d68:	f7ff fca7 	bl	80016ba <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d6c:	79fb      	ldrb	r3, [r7, #7]
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3708      	adds	r7, #8
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	20000000 	.word	0x20000000

08001d7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d80:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <HAL_IncTick+0x1c>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	461a      	mov	r2, r3
 8001d86:	4b05      	ldr	r3, [pc, #20]	; (8001d9c <HAL_IncTick+0x20>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	4a03      	ldr	r2, [pc, #12]	; (8001d9c <HAL_IncTick+0x20>)
 8001d8e:	6013      	str	r3, [r2, #0]
}
 8001d90:	bf00      	nop
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bc80      	pop	{r7}
 8001d96:	4770      	bx	lr
 8001d98:	20000008 	.word	0x20000008
 8001d9c:	20000c48 	.word	0x20000c48

08001da0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  return uwTick;
 8001da4:	4b02      	ldr	r3, [pc, #8]	; (8001db0 <HAL_GetTick+0x10>)
 8001da6:	681b      	ldr	r3, [r3, #0]
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bc80      	pop	{r7}
 8001dae:	4770      	bx	lr
 8001db0:	20000c48 	.word	0x20000c48

08001db4 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8001db8:	4b02      	ldr	r3, [pc, #8]	; (8001dc4 <HAL_GetUIDw0+0x10>)
 8001dba:	681b      	ldr	r3, [r3, #0]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bc80      	pop	{r7}
 8001dc2:	4770      	bx	lr
 8001dc4:	1fff7590 	.word	0x1fff7590

08001dc8 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8001dcc:	4b02      	ldr	r3, [pc, #8]	; (8001dd8 <HAL_GetUIDw1+0x10>)
 8001dce:	681b      	ldr	r3, [r3, #0]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bc80      	pop	{r7}
 8001dd6:	4770      	bx	lr
 8001dd8:	1fff7594 	.word	0x1fff7594

08001ddc <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8001de0:	4b02      	ldr	r3, [pc, #8]	; (8001dec <HAL_GetUIDw2+0x10>)
 8001de2:	681b      	ldr	r3, [r3, #0]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bc80      	pop	{r7}
 8001dea:	4770      	bx	lr
 8001dec:	1fff7598 	.word	0x1fff7598

08001df0 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	695a      	ldr	r2, [r3, #20]
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	f003 0304 	and.w	r3, r3, #4
 8001e06:	2107      	movs	r1, #7
 8001e08:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	401a      	ands	r2, r3
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	f003 0304 	and.w	r3, r3, #4
 8001e16:	6879      	ldr	r1, [r7, #4]
 8001e18:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1c:	431a      	orrs	r2, r3
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001e22:	bf00      	nop
 8001e24:	3714      	adds	r7, #20
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bc80      	pop	{r7}
 8001e2a:	4770      	bx	lr

08001e2c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	695a      	ldr	r2, [r3, #20]
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	f003 0304 	and.w	r3, r3, #4
 8001e40:	2107      	movs	r1, #7
 8001e42:	fa01 f303 	lsl.w	r3, r1, r3
 8001e46:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001e4e:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bc80      	pop	{r7}
 8001e5a:	4770      	bx	lr

08001e5c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001e6c:	f023 0317 	bic.w	r3, r3, #23
 8001e70:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bc80      	pop	{r7}
 8001e80:	4770      	bx	lr

08001e82 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001e82:	b480      	push	{r7}
 8001e84:	b083      	sub	sp, #12
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001e96:	d101      	bne.n	8001e9c <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001e98:	2301      	movs	r3, #1
 8001e9a:	e000      	b.n	8001e9e <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bc80      	pop	{r7}
 8001ea6:	4770      	bx	lr

08001ea8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d101      	bne.n	8001ec0 <LL_ADC_IsEnabled+0x18>
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e000      	b.n	8001ec2 <LL_ADC_IsEnabled+0x1a>
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr

08001ecc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f003 0304 	and.w	r3, r3, #4
 8001edc:	2b04      	cmp	r3, #4
 8001ede:	d101      	bne.n	8001ee4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e000      	b.n	8001ee6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bc80      	pop	{r7}
 8001eee:	4770      	bx	lr

08001ef0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b088      	sub	sp, #32
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8001efc:	2300      	movs	r3, #0
 8001efe:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001f00:	2300      	movs	r3, #0
 8001f02:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e17e      	b.n	8002210 <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d109      	bne.n	8001f34 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f7ff fbd5 	bl	80016d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff ffa2 	bl	8001e82 <LL_ADC_IsInternalRegulatorEnabled>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d115      	bne.n	8001f70 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff ff87 	bl	8001e5c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f4e:	4b9e      	ldr	r3, [pc, #632]	; (80021c8 <HAL_ADC_Init+0x2d8>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	099b      	lsrs	r3, r3, #6
 8001f54:	4a9d      	ldr	r2, [pc, #628]	; (80021cc <HAL_ADC_Init+0x2dc>)
 8001f56:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5a:	099b      	lsrs	r3, r3, #6
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001f62:	e002      	b.n	8001f6a <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	3b01      	subs	r3, #1
 8001f68:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d1f9      	bne.n	8001f64 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff ff84 	bl	8001e82 <LL_ADC_IsInternalRegulatorEnabled>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d10d      	bne.n	8001f9c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f84:	f043 0210 	orr.w	r2, r3, #16
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f90:	f043 0201 	orr.w	r2, r3, #1
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7ff ff93 	bl	8001ecc <LL_ADC_REG_IsConversionOngoing>
 8001fa6:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fac:	f003 0310 	and.w	r3, r3, #16
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	f040 8124 	bne.w	80021fe <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f040 8120 	bne.w	80021fe <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc2:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001fc6:	f043 0202 	orr.w	r2, r3, #2
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7ff ff68 	bl	8001ea8 <LL_ADC_IsEnabled>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f040 80a7 	bne.w	800212e <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	7e1b      	ldrb	r3, [r3, #24]
 8001fe8:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001fea:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	7e5b      	ldrb	r3, [r3, #25]
 8001ff0:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001ff2:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	7e9b      	ldrb	r3, [r3, #26]
 8001ff8:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001ffa:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002000:	2a00      	cmp	r2, #0
 8002002:	d002      	beq.n	800200a <HAL_ADC_Init+0x11a>
 8002004:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002008:	e000      	b.n	800200c <HAL_ADC_Init+0x11c>
 800200a:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800200c:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002012:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	691b      	ldr	r3, [r3, #16]
 8002018:	2b00      	cmp	r3, #0
 800201a:	da04      	bge.n	8002026 <HAL_ADC_Init+0x136>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	691b      	ldr	r3, [r3, #16]
 8002020:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002024:	e001      	b.n	800202a <HAL_ADC_Init+0x13a>
 8002026:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 800202a:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002032:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002034:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	4313      	orrs	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d114      	bne.n	8002070 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	7e9b      	ldrb	r3, [r3, #26]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d104      	bne.n	8002058 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002054:	61bb      	str	r3, [r7, #24]
 8002056:	e00b      	b.n	8002070 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205c:	f043 0220 	orr.w	r2, r3, #32
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002068:	f043 0201 	orr.w	r2, r3, #1
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002074:	2b00      	cmp	r3, #0
 8002076:	d009      	beq.n	800208c <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207c:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002084:	4313      	orrs	r3, r2
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	4313      	orrs	r3, r2
 800208a:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 8002096:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	6812      	ldr	r2, [r2, #0]
 800209e:	69b9      	ldr	r1, [r7, #24]
 80020a0:	430b      	orrs	r3, r1
 80020a2:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80020b0:	4313      	orrs	r3, r2
 80020b2:	697a      	ldr	r2, [r7, #20]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d111      	bne.n	80020e6 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80020ce:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80020d4:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80020da:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	4313      	orrs	r3, r2
 80020e0:	f043 0301 	orr.w	r3, r3, #1
 80020e4:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	691a      	ldr	r2, [r3, #16]
 80020ec:	4b38      	ldr	r3, [pc, #224]	; (80021d0 <HAL_ADC_Init+0x2e0>)
 80020ee:	4013      	ands	r3, r2
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	6812      	ldr	r2, [r2, #0]
 80020f4:	6979      	ldr	r1, [r7, #20]
 80020f6:	430b      	orrs	r3, r1
 80020f8:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8002102:	d014      	beq.n	800212e <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002108:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800210c:	d00f      	beq.n	800212e <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002112:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002116:	d00a      	beq.n	800212e <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8002118:	4b2e      	ldr	r3, [pc, #184]	; (80021d4 <HAL_ADC_Init+0x2e4>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002128:	492a      	ldr	r1, [pc, #168]	; (80021d4 <HAL_ADC_Init+0x2e4>)
 800212a:	4313      	orrs	r3, r2
 800212c:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6818      	ldr	r0, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002136:	461a      	mov	r2, r3
 8002138:	2100      	movs	r1, #0
 800213a:	f7ff fe59 	bl	8001df0 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6818      	ldr	r0, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002146:	461a      	mov	r2, r3
 8002148:	4923      	ldr	r1, [pc, #140]	; (80021d8 <HAL_ADC_Init+0x2e8>)
 800214a:	f7ff fe51 	bl	8001df0 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d108      	bne.n	8002168 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f062 020f 	orn	r2, r2, #15
 8002164:	629a      	str	r2, [r3, #40]	; 0x28
 8002166:	e017      	b.n	8002198 <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	691b      	ldr	r3, [r3, #16]
 800216c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002170:	d112      	bne.n	8002198 <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	69db      	ldr	r3, [r3, #28]
 800217c:	3b01      	subs	r3, #1
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	f003 031c 	and.w	r3, r3, #28
 8002184:	f06f 020f 	mvn.w	r2, #15
 8002188:	fa02 f103 	lsl.w	r1, r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	430a      	orrs	r2, r1
 8002196:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2100      	movs	r1, #0
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff fe44 	bl	8001e2c <LL_ADC_GetSamplingTimeCommonChannels>
 80021a4:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d116      	bne.n	80021dc <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b8:	f023 0303 	bic.w	r3, r3, #3
 80021bc:	f043 0201 	orr.w	r2, r3, #1
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80021c4:	e023      	b.n	800220e <HAL_ADC_Init+0x31e>
 80021c6:	bf00      	nop
 80021c8:	20000000 	.word	0x20000000
 80021cc:	053e2d63 	.word	0x053e2d63
 80021d0:	1ffffc02 	.word	0x1ffffc02
 80021d4:	40012708 	.word	0x40012708
 80021d8:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e0:	f023 0312 	bic.w	r3, r3, #18
 80021e4:	f043 0210 	orr.w	r2, r3, #16
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f0:	f043 0201 	orr.w	r2, r3, #1
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80021fc:	e007      	b.n	800220e <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002202:	f043 0210 	orr.w	r2, r3, #16
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 800220e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002210:	4618      	mov	r0, r3
 8002212:	3720      	adds	r7, #32
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f003 0307 	and.w	r3, r3, #7
 8002226:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002228:	4b0c      	ldr	r3, [pc, #48]	; (800225c <__NVIC_SetPriorityGrouping+0x44>)
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800222e:	68ba      	ldr	r2, [r7, #8]
 8002230:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002234:	4013      	ands	r3, r2
 8002236:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002240:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002244:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002248:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800224a:	4a04      	ldr	r2, [pc, #16]	; (800225c <__NVIC_SetPriorityGrouping+0x44>)
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	60d3      	str	r3, [r2, #12]
}
 8002250:	bf00      	nop
 8002252:	3714      	adds	r7, #20
 8002254:	46bd      	mov	sp, r7
 8002256:	bc80      	pop	{r7}
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	e000ed00 	.word	0xe000ed00

08002260 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002264:	4b04      	ldr	r3, [pc, #16]	; (8002278 <__NVIC_GetPriorityGrouping+0x18>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	0a1b      	lsrs	r3, r3, #8
 800226a:	f003 0307 	and.w	r3, r3, #7
}
 800226e:	4618      	mov	r0, r3
 8002270:	46bd      	mov	sp, r7
 8002272:	bc80      	pop	{r7}
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	e000ed00 	.word	0xe000ed00

0800227c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	4603      	mov	r3, r0
 8002284:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228a:	2b00      	cmp	r3, #0
 800228c:	db0b      	blt.n	80022a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800228e:	79fb      	ldrb	r3, [r7, #7]
 8002290:	f003 021f 	and.w	r2, r3, #31
 8002294:	4906      	ldr	r1, [pc, #24]	; (80022b0 <__NVIC_EnableIRQ+0x34>)
 8002296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229a:	095b      	lsrs	r3, r3, #5
 800229c:	2001      	movs	r0, #1
 800229e:	fa00 f202 	lsl.w	r2, r0, r2
 80022a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022a6:	bf00      	nop
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bc80      	pop	{r7}
 80022ae:	4770      	bx	lr
 80022b0:	e000e100 	.word	0xe000e100

080022b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	4603      	mov	r3, r0
 80022bc:	6039      	str	r1, [r7, #0]
 80022be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	db0a      	blt.n	80022de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	b2da      	uxtb	r2, r3
 80022cc:	490c      	ldr	r1, [pc, #48]	; (8002300 <__NVIC_SetPriority+0x4c>)
 80022ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d2:	0112      	lsls	r2, r2, #4
 80022d4:	b2d2      	uxtb	r2, r2
 80022d6:	440b      	add	r3, r1
 80022d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022dc:	e00a      	b.n	80022f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	b2da      	uxtb	r2, r3
 80022e2:	4908      	ldr	r1, [pc, #32]	; (8002304 <__NVIC_SetPriority+0x50>)
 80022e4:	79fb      	ldrb	r3, [r7, #7]
 80022e6:	f003 030f 	and.w	r3, r3, #15
 80022ea:	3b04      	subs	r3, #4
 80022ec:	0112      	lsls	r2, r2, #4
 80022ee:	b2d2      	uxtb	r2, r2
 80022f0:	440b      	add	r3, r1
 80022f2:	761a      	strb	r2, [r3, #24]
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bc80      	pop	{r7}
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	e000e100 	.word	0xe000e100
 8002304:	e000ed00 	.word	0xe000ed00

08002308 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002308:	b480      	push	{r7}
 800230a:	b089      	sub	sp, #36	; 0x24
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f003 0307 	and.w	r3, r3, #7
 800231a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	f1c3 0307 	rsb	r3, r3, #7
 8002322:	2b04      	cmp	r3, #4
 8002324:	bf28      	it	cs
 8002326:	2304      	movcs	r3, #4
 8002328:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	3304      	adds	r3, #4
 800232e:	2b06      	cmp	r3, #6
 8002330:	d902      	bls.n	8002338 <NVIC_EncodePriority+0x30>
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	3b03      	subs	r3, #3
 8002336:	e000      	b.n	800233a <NVIC_EncodePriority+0x32>
 8002338:	2300      	movs	r3, #0
 800233a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800233c:	f04f 32ff 	mov.w	r2, #4294967295
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	43da      	mvns	r2, r3
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	401a      	ands	r2, r3
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002350:	f04f 31ff 	mov.w	r1, #4294967295
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	fa01 f303 	lsl.w	r3, r1, r3
 800235a:	43d9      	mvns	r1, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002360:	4313      	orrs	r3, r2
         );
}
 8002362:	4618      	mov	r0, r3
 8002364:	3724      	adds	r7, #36	; 0x24
 8002366:	46bd      	mov	sp, r7
 8002368:	bc80      	pop	{r7}
 800236a:	4770      	bx	lr

0800236c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f7ff ff4f 	bl	8002218 <__NVIC_SetPriorityGrouping>
}
 800237a:	bf00      	nop
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b086      	sub	sp, #24
 8002386:	af00      	add	r7, sp, #0
 8002388:	4603      	mov	r3, r0
 800238a:	60b9      	str	r1, [r7, #8]
 800238c:	607a      	str	r2, [r7, #4]
 800238e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002390:	f7ff ff66 	bl	8002260 <__NVIC_GetPriorityGrouping>
 8002394:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	68b9      	ldr	r1, [r7, #8]
 800239a:	6978      	ldr	r0, [r7, #20]
 800239c:	f7ff ffb4 	bl	8002308 <NVIC_EncodePriority>
 80023a0:	4602      	mov	r2, r0
 80023a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023a6:	4611      	mov	r1, r2
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff ff83 	bl	80022b4 <__NVIC_SetPriority>
}
 80023ae:	bf00      	nop
 80023b0:	3718      	adds	r7, #24
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b082      	sub	sp, #8
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	4603      	mov	r3, r0
 80023be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff ff59 	bl	800227c <__NVIC_EnableIRQ>
}
 80023ca:	bf00      	nop
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023d2:	b480      	push	{r7}
 80023d4:	b083      	sub	sp, #12
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d101      	bne.n	80023e4 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e04f      	b.n	8002484 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d008      	beq.n	8002402 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2204      	movs	r2, #4
 80023f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e040      	b.n	8002484 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f022 020e 	bic.w	r2, r2, #14
 8002410:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800241c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002420:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f022 0201 	bic.w	r2, r2, #1
 8002430:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002436:	f003 021c 	and.w	r2, r3, #28
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243e:	2101      	movs	r1, #1
 8002440:	fa01 f202 	lsl.w	r2, r1, r2
 8002444:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800244e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002454:	2b00      	cmp	r3, #0
 8002456:	d00c      	beq.n	8002472 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002462:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002466:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002470:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2201      	movs	r2, #1
 8002476:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	bc80      	pop	{r7}
 800248c:	4770      	bx	lr

0800248e <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800248e:	b580      	push	{r7, lr}
 8002490:	b084      	sub	sp, #16
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002496:	2300      	movs	r3, #0
 8002498:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d005      	beq.n	80024b2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2204      	movs	r2, #4
 80024aa:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	73fb      	strb	r3, [r7, #15]
 80024b0:	e047      	b.n	8002542 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f022 020e 	bic.w	r2, r2, #14
 80024c0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f022 0201 	bic.w	r2, r2, #1
 80024d0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e6:	f003 021c 	and.w	r2, r3, #28
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ee:	2101      	movs	r1, #1
 80024f0:	fa01 f202 	lsl.w	r2, r1, r2
 80024f4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80024fe:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002504:	2b00      	cmp	r3, #0
 8002506:	d00c      	beq.n	8002522 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002512:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002516:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002520:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2201      	movs	r2, #1
 8002526:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002536:	2b00      	cmp	r3, #0
 8002538:	d003      	beq.n	8002542 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	4798      	blx	r3
    }
  }
  return status;
 8002542:	7bfb      	ldrb	r3, [r7, #15]
}
 8002544:	4618      	mov	r0, r3
 8002546:	3710      	adds	r7, #16
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800254c:	b480      	push	{r7}
 800254e:	b087      	sub	sp, #28
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002556:	2300      	movs	r3, #0
 8002558:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800255a:	e140      	b.n	80027de <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	2101      	movs	r1, #1
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	fa01 f303 	lsl.w	r3, r1, r3
 8002568:	4013      	ands	r3, r2
 800256a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2b00      	cmp	r3, #0
 8002570:	f000 8132 	beq.w	80027d8 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f003 0303 	and.w	r3, r3, #3
 800257c:	2b01      	cmp	r3, #1
 800257e:	d005      	beq.n	800258c <HAL_GPIO_Init+0x40>
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f003 0303 	and.w	r3, r3, #3
 8002588:	2b02      	cmp	r3, #2
 800258a:	d130      	bne.n	80025ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	2203      	movs	r2, #3
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	43db      	mvns	r3, r3
 800259e:	693a      	ldr	r2, [r7, #16]
 80025a0:	4013      	ands	r3, r2
 80025a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	68da      	ldr	r2, [r3, #12]
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	fa02 f303 	lsl.w	r3, r2, r3
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	4313      	orrs	r3, r2
 80025b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	693a      	ldr	r2, [r7, #16]
 80025ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025c2:	2201      	movs	r2, #1
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	43db      	mvns	r3, r3
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	4013      	ands	r3, r2
 80025d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	091b      	lsrs	r3, r3, #4
 80025d8:	f003 0201 	and.w	r2, r3, #1
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	fa02 f303 	lsl.w	r3, r2, r3
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f003 0303 	and.w	r3, r3, #3
 80025f6:	2b03      	cmp	r3, #3
 80025f8:	d017      	beq.n	800262a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	2203      	movs	r2, #3
 8002606:	fa02 f303 	lsl.w	r3, r2, r3
 800260a:	43db      	mvns	r3, r3
 800260c:	693a      	ldr	r2, [r7, #16]
 800260e:	4013      	ands	r3, r2
 8002610:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	689a      	ldr	r2, [r3, #8]
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	fa02 f303 	lsl.w	r3, r2, r3
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	4313      	orrs	r3, r2
 8002622:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f003 0303 	and.w	r3, r3, #3
 8002632:	2b02      	cmp	r3, #2
 8002634:	d123      	bne.n	800267e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	08da      	lsrs	r2, r3, #3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	3208      	adds	r2, #8
 800263e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002642:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	f003 0307 	and.w	r3, r3, #7
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	220f      	movs	r2, #15
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	43db      	mvns	r3, r3
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	4013      	ands	r3, r2
 8002658:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	691a      	ldr	r2, [r3, #16]
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	f003 0307 	and.w	r3, r3, #7
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	fa02 f303 	lsl.w	r3, r2, r3
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	4313      	orrs	r3, r2
 800266e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	08da      	lsrs	r2, r3, #3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	3208      	adds	r2, #8
 8002678:	6939      	ldr	r1, [r7, #16]
 800267a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	2203      	movs	r2, #3
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	43db      	mvns	r3, r3
 8002690:	693a      	ldr	r2, [r7, #16]
 8002692:	4013      	ands	r3, r2
 8002694:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f003 0203 	and.w	r2, r3, #3
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	693a      	ldr	r2, [r7, #16]
 80026b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f000 808c 	beq.w	80027d8 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80026c0:	4a4e      	ldr	r2, [pc, #312]	; (80027fc <HAL_GPIO_Init+0x2b0>)
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	089b      	lsrs	r3, r3, #2
 80026c6:	3302      	adds	r3, #2
 80026c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	f003 0303 	and.w	r3, r3, #3
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	2207      	movs	r2, #7
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	43db      	mvns	r3, r3
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	4013      	ands	r3, r2
 80026e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80026ea:	d00d      	beq.n	8002708 <HAL_GPIO_Init+0x1bc>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	4a44      	ldr	r2, [pc, #272]	; (8002800 <HAL_GPIO_Init+0x2b4>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d007      	beq.n	8002704 <HAL_GPIO_Init+0x1b8>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4a43      	ldr	r2, [pc, #268]	; (8002804 <HAL_GPIO_Init+0x2b8>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d101      	bne.n	8002700 <HAL_GPIO_Init+0x1b4>
 80026fc:	2302      	movs	r3, #2
 80026fe:	e004      	b.n	800270a <HAL_GPIO_Init+0x1be>
 8002700:	2307      	movs	r3, #7
 8002702:	e002      	b.n	800270a <HAL_GPIO_Init+0x1be>
 8002704:	2301      	movs	r3, #1
 8002706:	e000      	b.n	800270a <HAL_GPIO_Init+0x1be>
 8002708:	2300      	movs	r3, #0
 800270a:	697a      	ldr	r2, [r7, #20]
 800270c:	f002 0203 	and.w	r2, r2, #3
 8002710:	0092      	lsls	r2, r2, #2
 8002712:	4093      	lsls	r3, r2
 8002714:	693a      	ldr	r2, [r7, #16]
 8002716:	4313      	orrs	r3, r2
 8002718:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800271a:	4938      	ldr	r1, [pc, #224]	; (80027fc <HAL_GPIO_Init+0x2b0>)
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	089b      	lsrs	r3, r3, #2
 8002720:	3302      	adds	r3, #2
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002728:	4b37      	ldr	r3, [pc, #220]	; (8002808 <HAL_GPIO_Init+0x2bc>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	43db      	mvns	r3, r3
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	4013      	ands	r3, r2
 8002736:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d003      	beq.n	800274c <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8002744:	693a      	ldr	r2, [r7, #16]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	4313      	orrs	r3, r2
 800274a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800274c:	4a2e      	ldr	r2, [pc, #184]	; (8002808 <HAL_GPIO_Init+0x2bc>)
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002752:	4b2d      	ldr	r3, [pc, #180]	; (8002808 <HAL_GPIO_Init+0x2bc>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	43db      	mvns	r3, r3
 800275c:	693a      	ldr	r2, [r7, #16]
 800275e:	4013      	ands	r3, r2
 8002760:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 800276e:	693a      	ldr	r2, [r7, #16]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	4313      	orrs	r3, r2
 8002774:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002776:	4a24      	ldr	r2, [pc, #144]	; (8002808 <HAL_GPIO_Init+0x2bc>)
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 800277c:	4b22      	ldr	r3, [pc, #136]	; (8002808 <HAL_GPIO_Init+0x2bc>)
 800277e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002782:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	43db      	mvns	r3, r3
 8002788:	693a      	ldr	r2, [r7, #16]
 800278a:	4013      	ands	r3, r2
 800278c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d003      	beq.n	80027a2 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800279a:	693a      	ldr	r2, [r7, #16]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	4313      	orrs	r3, r2
 80027a0:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80027a2:	4a19      	ldr	r2, [pc, #100]	; (8002808 <HAL_GPIO_Init+0x2bc>)
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80027aa:	4b17      	ldr	r3, [pc, #92]	; (8002808 <HAL_GPIO_Init+0x2bc>)
 80027ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027b0:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	43db      	mvns	r3, r3
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	4013      	ands	r3, r2
 80027ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d003      	beq.n	80027d0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80027d0:	4a0d      	ldr	r2, [pc, #52]	; (8002808 <HAL_GPIO_Init+0x2bc>)
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	3301      	adds	r3, #1
 80027dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	fa22 f303 	lsr.w	r3, r2, r3
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f47f aeb7 	bne.w	800255c <HAL_GPIO_Init+0x10>
  }
}
 80027ee:	bf00      	nop
 80027f0:	bf00      	nop
 80027f2:	371c      	adds	r7, #28
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bc80      	pop	{r7}
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	40010000 	.word	0x40010000
 8002800:	48000400 	.word	0x48000400
 8002804:	48000800 	.word	0x48000800
 8002808:	58000800 	.word	0x58000800

0800280c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	460b      	mov	r3, r1
 8002816:	807b      	strh	r3, [r7, #2]
 8002818:	4613      	mov	r3, r2
 800281a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800281c:	787b      	ldrb	r3, [r7, #1]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d003      	beq.n	800282a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002822:	887a      	ldrh	r2, [r7, #2]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002828:	e002      	b.n	8002830 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800282a:	887a      	ldrh	r2, [r7, #2]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002830:	bf00      	nop
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	bc80      	pop	{r7}
 8002838:	4770      	bx	lr

0800283a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b082      	sub	sp, #8
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d101      	bne.n	800284c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e081      	b.n	8002950 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002852:	b2db      	uxtb	r3, r3
 8002854:	2b00      	cmp	r3, #0
 8002856:	d106      	bne.n	8002866 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f7fe ff61 	bl	8001728 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2224      	movs	r2, #36	; 0x24
 800286a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f022 0201 	bic.w	r2, r2, #1
 800287c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685a      	ldr	r2, [r3, #4]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800288a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	689a      	ldr	r2, [r3, #8]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800289a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d107      	bne.n	80028b4 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028b0:	609a      	str	r2, [r3, #8]
 80028b2:	e006      	b.n	80028c2 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	689a      	ldr	r2, [r3, #8]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80028c0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d104      	bne.n	80028d4 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028d2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	6812      	ldr	r2, [r2, #0]
 80028de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028e6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68da      	ldr	r2, [r3, #12]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028f6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	691a      	ldr	r2, [r3, #16]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	695b      	ldr	r3, [r3, #20]
 8002900:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	430a      	orrs	r2, r1
 8002910:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	69d9      	ldr	r1, [r3, #28]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a1a      	ldr	r2, [r3, #32]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	430a      	orrs	r2, r1
 8002920:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f042 0201 	orr.w	r2, r2, #1
 8002930:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2220      	movs	r2, #32
 800293c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800294e:	2300      	movs	r3, #0
}
 8002950:	4618      	mov	r0, r3
 8002952:	3708      	adds	r7, #8
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b20      	cmp	r3, #32
 800296c:	d138      	bne.n	80029e0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002974:	2b01      	cmp	r3, #1
 8002976:	d101      	bne.n	800297c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002978:	2302      	movs	r3, #2
 800297a:	e032      	b.n	80029e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2224      	movs	r2, #36	; 0x24
 8002988:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f022 0201 	bic.w	r2, r2, #1
 800299a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80029aa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	6819      	ldr	r1, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	683a      	ldr	r2, [r7, #0]
 80029b8:	430a      	orrs	r2, r1
 80029ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f042 0201 	orr.w	r2, r2, #1
 80029ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2220      	movs	r2, #32
 80029d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029dc:	2300      	movs	r3, #0
 80029de:	e000      	b.n	80029e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80029e0:	2302      	movs	r3, #2
  }
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	bc80      	pop	{r7}
 80029ea:	4770      	bx	lr

080029ec <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b20      	cmp	r3, #32
 8002a00:	d139      	bne.n	8002a76 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d101      	bne.n	8002a10 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	e033      	b.n	8002a78 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2224      	movs	r2, #36	; 0x24
 8002a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f022 0201 	bic.w	r2, r2, #1
 8002a2e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002a3e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	021b      	lsls	r3, r3, #8
 8002a44:	68fa      	ldr	r2, [r7, #12]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f042 0201 	orr.w	r2, r2, #1
 8002a60:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2220      	movs	r2, #32
 8002a66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a72:	2300      	movs	r3, #0
 8002a74:	e000      	b.n	8002a78 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a76:	2302      	movs	r3, #2
  }
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3714      	adds	r7, #20
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bc80      	pop	{r7}
 8002a80:	4770      	bx	lr
	...

08002a84 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a88:	4b04      	ldr	r3, [pc, #16]	; (8002a9c <HAL_PWR_EnableBkUpAccess+0x18>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a03      	ldr	r2, [pc, #12]	; (8002a9c <HAL_PWR_EnableBkUpAccess+0x18>)
 8002a8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a92:	6013      	str	r3, [r2, #0]
}
 8002a94:	bf00      	nop
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bc80      	pop	{r7}
 8002a9a:	4770      	bx	lr
 8002a9c:	58000400 	.word	0x58000400

08002aa0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002aa4:	4b03      	ldr	r3, [pc, #12]	; (8002ab4 <HAL_PWREx_GetVoltageRange+0x14>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bc80      	pop	{r7}
 8002ab2:	4770      	bx	lr
 8002ab4:	58000400 	.word	0x58000400

08002ab8 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002abc:	4b06      	ldr	r3, [pc, #24]	; (8002ad8 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ac8:	d101      	bne.n	8002ace <LL_PWR_IsEnabledBkUpAccess+0x16>
 8002aca:	2301      	movs	r3, #1
 8002acc:	e000      	b.n	8002ad0 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8002ace:	2300      	movs	r3, #0
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bc80      	pop	{r7}
 8002ad6:	4770      	bx	lr
 8002ad8:	58000400 	.word	0x58000400

08002adc <LL_RCC_HSE_EnableTcxo>:
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002ae0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002aea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002aee:	6013      	str	r3, [r2, #0]
}
 8002af0:	bf00      	nop
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bc80      	pop	{r7}
 8002af6:	4770      	bx	lr

08002af8 <LL_RCC_HSE_DisableTcxo>:
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002afc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b06:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002b0a:	6013      	str	r3, [r2, #0]
}
 8002b0c:	bf00      	nop
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bc80      	pop	{r7}
 8002b12:	4770      	bx	lr

08002b14 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002b18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b26:	d101      	bne.n	8002b2c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e000      	b.n	8002b2e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bc80      	pop	{r7}
 8002b34:	4770      	bx	lr

08002b36 <LL_RCC_HSE_Enable>:
{
 8002b36:	b480      	push	{r7}
 8002b38:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8002b3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b48:	6013      	str	r3, [r2, #0]
}
 8002b4a:	bf00      	nop
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bc80      	pop	{r7}
 8002b50:	4770      	bx	lr

08002b52 <LL_RCC_HSE_Disable>:
{
 8002b52:	b480      	push	{r7}
 8002b54:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8002b56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b64:	6013      	str	r3, [r2, #0]
}
 8002b66:	bf00      	nop
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bc80      	pop	{r7}
 8002b6c:	4770      	bx	lr

08002b6e <LL_RCC_HSE_IsReady>:
{
 8002b6e:	b480      	push	{r7}
 8002b70:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002b72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002b80:	d101      	bne.n	8002b86 <LL_RCC_HSE_IsReady+0x18>
 8002b82:	2301      	movs	r3, #1
 8002b84:	e000      	b.n	8002b88 <LL_RCC_HSE_IsReady+0x1a>
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bc80      	pop	{r7}
 8002b8e:	4770      	bx	lr

08002b90 <LL_RCC_HSI_Enable>:
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002b94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ba2:	6013      	str	r3, [r2, #0]
}
 8002ba4:	bf00      	nop
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bc80      	pop	{r7}
 8002baa:	4770      	bx	lr

08002bac <LL_RCC_HSI_Disable>:
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8002bb0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bbe:	6013      	str	r3, [r2, #0]
}
 8002bc0:	bf00      	nop
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bc80      	pop	{r7}
 8002bc6:	4770      	bx	lr

08002bc8 <LL_RCC_HSI_IsReady>:
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002bcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bda:	d101      	bne.n	8002be0 <LL_RCC_HSI_IsReady+0x18>
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e000      	b.n	8002be2 <LL_RCC_HSI_IsReady+0x1a>
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	46bd      	mov	sp, r7
 8002be6:	bc80      	pop	{r7}
 8002be8:	4770      	bx	lr

08002bea <LL_RCC_HSI_SetCalibTrimming>:
{
 8002bea:	b480      	push	{r7}
 8002bec:	b083      	sub	sp, #12
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8002bf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	061b      	lsls	r3, r3, #24
 8002c00:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c04:	4313      	orrs	r3, r2
 8002c06:	604b      	str	r3, [r1, #4]
}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bc80      	pop	{r7}
 8002c10:	4770      	bx	lr

08002c12 <LL_RCC_LSE_IsReady>:
{
 8002c12:	b480      	push	{r7}
 8002c14:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002c16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d101      	bne.n	8002c2a <LL_RCC_LSE_IsReady+0x18>
 8002c26:	2301      	movs	r3, #1
 8002c28:	e000      	b.n	8002c2c <LL_RCC_LSE_IsReady+0x1a>
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bc80      	pop	{r7}
 8002c32:	4770      	bx	lr

08002c34 <LL_RCC_LSI_Enable>:
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8002c38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c44:	f043 0301 	orr.w	r3, r3, #1
 8002c48:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002c4c:	bf00      	nop
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bc80      	pop	{r7}
 8002c52:	4770      	bx	lr

08002c54 <LL_RCC_LSI_Disable>:
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002c58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c60:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c64:	f023 0301 	bic.w	r3, r3, #1
 8002c68:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002c6c:	bf00      	nop
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bc80      	pop	{r7}
 8002c72:	4770      	bx	lr

08002c74 <LL_RCC_LSI_IsReady>:
{
 8002c74:	b480      	push	{r7}
 8002c76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8002c78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c80:	f003 0302 	and.w	r3, r3, #2
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d101      	bne.n	8002c8c <LL_RCC_LSI_IsReady+0x18>
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e000      	b.n	8002c8e <LL_RCC_LSI_IsReady+0x1a>
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bc80      	pop	{r7}
 8002c94:	4770      	bx	lr

08002c96 <LL_RCC_MSI_Enable>:
{
 8002c96:	b480      	push	{r7}
 8002c98:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002c9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ca4:	f043 0301 	orr.w	r3, r3, #1
 8002ca8:	6013      	str	r3, [r2, #0]
}
 8002caa:	bf00      	nop
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bc80      	pop	{r7}
 8002cb0:	4770      	bx	lr

08002cb2 <LL_RCC_MSI_Disable>:
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002cb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cc0:	f023 0301 	bic.w	r3, r3, #1
 8002cc4:	6013      	str	r3, [r2, #0]
}
 8002cc6:	bf00      	nop
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bc80      	pop	{r7}
 8002ccc:	4770      	bx	lr

08002cce <LL_RCC_MSI_IsReady>:
{
 8002cce:	b480      	push	{r7}
 8002cd0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8002cd2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d101      	bne.n	8002ce4 <LL_RCC_MSI_IsReady+0x16>
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e000      	b.n	8002ce6 <LL_RCC_MSI_IsReady+0x18>
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bc80      	pop	{r7}
 8002cec:	4770      	bx	lr

08002cee <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8002cee:	b480      	push	{r7}
 8002cf0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8002cf2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0308 	and.w	r3, r3, #8
 8002cfc:	2b08      	cmp	r3, #8
 8002cfe:	d101      	bne.n	8002d04 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002d00:	2301      	movs	r3, #1
 8002d02:	e000      	b.n	8002d06 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bc80      	pop	{r7}
 8002d0c:	4770      	bx	lr

08002d0e <LL_RCC_MSI_GetRange>:
{
 8002d0e:	b480      	push	{r7}
 8002d10:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8002d12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bc80      	pop	{r7}
 8002d22:	4770      	bx	lr

08002d24 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002d28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d30:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bc80      	pop	{r7}
 8002d3a:	4770      	bx	lr

08002d3c <LL_RCC_MSI_SetCalibTrimming>:
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002d44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	021b      	lsls	r3, r3, #8
 8002d52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d56:	4313      	orrs	r3, r2
 8002d58:	604b      	str	r3, [r1, #4]
}
 8002d5a:	bf00      	nop
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bc80      	pop	{r7}
 8002d62:	4770      	bx	lr

08002d64 <LL_RCC_SetSysClkSource>:
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002d6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f023 0203 	bic.w	r2, r3, #3
 8002d76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	608b      	str	r3, [r1, #8]
}
 8002d80:	bf00      	nop
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bc80      	pop	{r7}
 8002d88:	4770      	bx	lr

08002d8a <LL_RCC_GetSysClkSource>:
{
 8002d8a:	b480      	push	{r7}
 8002d8c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002d8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f003 030c 	and.w	r3, r3, #12
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bc80      	pop	{r7}
 8002d9e:	4770      	bx	lr

08002da0 <LL_RCC_SetAHBPrescaler>:
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002da8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002db2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	608b      	str	r3, [r1, #8]
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bc80      	pop	{r7}
 8002dc4:	4770      	bx	lr

08002dc6 <LL_RCC_SetAHB3Prescaler>:
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b083      	sub	sp, #12
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8002dce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dd2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002dd6:	f023 020f 	bic.w	r2, r3, #15
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	091b      	lsrs	r3, r3, #4
 8002dde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002de2:	4313      	orrs	r3, r2
 8002de4:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bc80      	pop	{r7}
 8002df0:	4770      	bx	lr

08002df2 <LL_RCC_SetAPB1Prescaler>:
{
 8002df2:	b480      	push	{r7}
 8002df4:	b083      	sub	sp, #12
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002dfa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	608b      	str	r3, [r1, #8]
}
 8002e0e:	bf00      	nop
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bc80      	pop	{r7}
 8002e16:	4770      	bx	lr

08002e18 <LL_RCC_SetAPB2Prescaler>:
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002e20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	608b      	str	r3, [r1, #8]
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bc80      	pop	{r7}
 8002e3c:	4770      	bx	lr

08002e3e <LL_RCC_GetAHBPrescaler>:
{
 8002e3e:	b480      	push	{r7}
 8002e40:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002e42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bc80      	pop	{r7}
 8002e52:	4770      	bx	lr

08002e54 <LL_RCC_GetAHB3Prescaler>:
{
 8002e54:	b480      	push	{r7}
 8002e56:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8002e58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e5c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002e60:	011b      	lsls	r3, r3, #4
 8002e62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bc80      	pop	{r7}
 8002e6c:	4770      	bx	lr

08002e6e <LL_RCC_GetAPB1Prescaler>:
{
 8002e6e:	b480      	push	{r7}
 8002e70:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002e72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bc80      	pop	{r7}
 8002e82:	4770      	bx	lr

08002e84 <LL_RCC_GetAPB2Prescaler>:
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002e88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bc80      	pop	{r7}
 8002e98:	4770      	bx	lr

08002e9a <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002e9a:	b480      	push	{r7}
 8002e9c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002e9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ea8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002eac:	6013      	str	r3, [r2, #0]
}
 8002eae:	bf00      	nop
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bc80      	pop	{r7}
 8002eb4:	4770      	bx	lr

08002eb6 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002eba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ec4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ec8:	6013      	str	r3, [r2, #0]
}
 8002eca:	bf00      	nop
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bc80      	pop	{r7}
 8002ed0:	4770      	bx	lr

08002ed2 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002ed6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ee4:	d101      	bne.n	8002eea <LL_RCC_PLL_IsReady+0x18>
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e000      	b.n	8002eec <LL_RCC_PLL_IsReady+0x1a>
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bc80      	pop	{r7}
 8002ef2:	4770      	bx	lr

08002ef4 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002ef8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	0a1b      	lsrs	r3, r3, #8
 8002f00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bc80      	pop	{r7}
 8002f0a:	4770      	bx	lr

08002f0c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002f10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bc80      	pop	{r7}
 8002f20:	4770      	bx	lr

08002f22 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002f22:	b480      	push	{r7}
 8002f24:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002f26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bc80      	pop	{r7}
 8002f36:	4770      	bx	lr

08002f38 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002f3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	f003 0303 	and.w	r3, r3, #3
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bc80      	pop	{r7}
 8002f4c:	4770      	bx	lr

08002f4e <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002f4e:	b480      	push	{r7}
 8002f50:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002f52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f60:	d101      	bne.n	8002f66 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002f62:	2301      	movs	r3, #1
 8002f64:	e000      	b.n	8002f68 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bc80      	pop	{r7}
 8002f6e:	4770      	bx	lr

08002f70 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002f74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f78:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002f7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f84:	d101      	bne.n	8002f8a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002f86:	2301      	movs	r3, #1
 8002f88:	e000      	b.n	8002f8c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bc80      	pop	{r7}
 8002f92:	4770      	bx	lr

08002f94 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002f98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002fa6:	d101      	bne.n	8002fac <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e000      	b.n	8002fae <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002fac:	2300      	movs	r3, #0
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bc80      	pop	{r7}
 8002fb4:	4770      	bx	lr

08002fb6 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002fb6:	b480      	push	{r7}
 8002fb8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002fba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fc4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002fc8:	d101      	bne.n	8002fce <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e000      	b.n	8002fd0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bc80      	pop	{r7}
 8002fd6:	4770      	bx	lr

08002fd8 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b088      	sub	sp, #32
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e36f      	b.n	80036ca <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fea:	f7ff fece 	bl	8002d8a <LL_RCC_GetSysClkSource>
 8002fee:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ff0:	f7ff ffa2 	bl	8002f38 <LL_RCC_PLL_GetMainSource>
 8002ff4:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0320 	and.w	r3, r3, #32
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	f000 80c4 	beq.w	800318c <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d005      	beq.n	8003016 <HAL_RCC_OscConfig+0x3e>
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	2b0c      	cmp	r3, #12
 800300e:	d176      	bne.n	80030fe <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d173      	bne.n	80030fe <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a1b      	ldr	r3, [r3, #32]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d101      	bne.n	8003022 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e353      	b.n	80036ca <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003026:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0308 	and.w	r3, r3, #8
 8003030:	2b00      	cmp	r3, #0
 8003032:	d005      	beq.n	8003040 <HAL_RCC_OscConfig+0x68>
 8003034:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800303e:	e006      	b.n	800304e <HAL_RCC_OscConfig+0x76>
 8003040:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003044:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003048:	091b      	lsrs	r3, r3, #4
 800304a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800304e:	4293      	cmp	r3, r2
 8003050:	d222      	bcs.n	8003098 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003056:	4618      	mov	r0, r3
 8003058:	f000 fd7a 	bl	8003b50 <RCC_SetFlashLatencyFromMSIRange>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e331      	b.n	80036ca <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003066:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003070:	f043 0308 	orr.w	r3, r3, #8
 8003074:	6013      	str	r3, [r2, #0]
 8003076:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003084:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003088:	4313      	orrs	r3, r2
 800308a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003090:	4618      	mov	r0, r3
 8003092:	f7ff fe53 	bl	8002d3c <LL_RCC_MSI_SetCalibTrimming>
 8003096:	e021      	b.n	80030dc <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003098:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030a2:	f043 0308 	orr.w	r3, r3, #8
 80030a6:	6013      	str	r3, [r2, #0]
 80030a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80030ba:	4313      	orrs	r3, r2
 80030bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7ff fe3a 	bl	8002d3c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030cc:	4618      	mov	r0, r3
 80030ce:	f000 fd3f 	bl	8003b50 <RCC_SetFlashLatencyFromMSIRange>
 80030d2:	4603      	mov	r3, r0
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d001      	beq.n	80030dc <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	e2f6      	b.n	80036ca <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80030dc:	f000 fcc2 	bl	8003a64 <HAL_RCC_GetHCLKFreq>
 80030e0:	4603      	mov	r3, r0
 80030e2:	4aa7      	ldr	r2, [pc, #668]	; (8003380 <HAL_RCC_OscConfig+0x3a8>)
 80030e4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 80030e6:	4ba7      	ldr	r3, [pc, #668]	; (8003384 <HAL_RCC_OscConfig+0x3ac>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f7fe fc9c 	bl	8001a28 <HAL_InitTick>
 80030f0:	4603      	mov	r3, r0
 80030f2:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80030f4:	7cfb      	ldrb	r3, [r7, #19]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d047      	beq.n	800318a <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 80030fa:	7cfb      	ldrb	r3, [r7, #19]
 80030fc:	e2e5      	b.n	80036ca <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a1b      	ldr	r3, [r3, #32]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d02c      	beq.n	8003160 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003106:	f7ff fdc6 	bl	8002c96 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800310a:	f7fe fe49 	bl	8001da0 <HAL_GetTick>
 800310e:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003110:	e008      	b.n	8003124 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003112:	f7fe fe45 	bl	8001da0 <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	2b02      	cmp	r3, #2
 800311e:	d901      	bls.n	8003124 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e2d2      	b.n	80036ca <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003124:	f7ff fdd3 	bl	8002cce <LL_RCC_MSI_IsReady>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d0f1      	beq.n	8003112 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800312e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003138:	f043 0308 	orr.w	r3, r3, #8
 800313c:	6013      	str	r3, [r2, #0]
 800313e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800314c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003150:	4313      	orrs	r3, r2
 8003152:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003158:	4618      	mov	r0, r3
 800315a:	f7ff fdef 	bl	8002d3c <LL_RCC_MSI_SetCalibTrimming>
 800315e:	e015      	b.n	800318c <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003160:	f7ff fda7 	bl	8002cb2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003164:	f7fe fe1c 	bl	8001da0 <HAL_GetTick>
 8003168:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800316a:	e008      	b.n	800317e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800316c:	f7fe fe18 	bl	8001da0 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e2a5      	b.n	80036ca <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 800317e:	f7ff fda6 	bl	8002cce <LL_RCC_MSI_IsReady>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d1f1      	bne.n	800316c <HAL_RCC_OscConfig+0x194>
 8003188:	e000      	b.n	800318c <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800318a:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0301 	and.w	r3, r3, #1
 8003194:	2b00      	cmp	r3, #0
 8003196:	d058      	beq.n	800324a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	2b08      	cmp	r3, #8
 800319c:	d005      	beq.n	80031aa <HAL_RCC_OscConfig+0x1d2>
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	2b0c      	cmp	r3, #12
 80031a2:	d108      	bne.n	80031b6 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	2b03      	cmp	r3, #3
 80031a8:	d105      	bne.n	80031b6 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d14b      	bne.n	800324a <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e289      	b.n	80036ca <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80031b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031c8:	4313      	orrs	r3, r2
 80031ca:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031d4:	d102      	bne.n	80031dc <HAL_RCC_OscConfig+0x204>
 80031d6:	f7ff fcae 	bl	8002b36 <LL_RCC_HSE_Enable>
 80031da:	e00d      	b.n	80031f8 <HAL_RCC_OscConfig+0x220>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80031e4:	d104      	bne.n	80031f0 <HAL_RCC_OscConfig+0x218>
 80031e6:	f7ff fc79 	bl	8002adc <LL_RCC_HSE_EnableTcxo>
 80031ea:	f7ff fca4 	bl	8002b36 <LL_RCC_HSE_Enable>
 80031ee:	e003      	b.n	80031f8 <HAL_RCC_OscConfig+0x220>
 80031f0:	f7ff fcaf 	bl	8002b52 <LL_RCC_HSE_Disable>
 80031f4:	f7ff fc80 	bl	8002af8 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d012      	beq.n	8003226 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003200:	f7fe fdce 	bl	8001da0 <HAL_GetTick>
 8003204:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003206:	e008      	b.n	800321a <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003208:	f7fe fdca 	bl	8001da0 <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b64      	cmp	r3, #100	; 0x64
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e257      	b.n	80036ca <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 800321a:	f7ff fca8 	bl	8002b6e <LL_RCC_HSE_IsReady>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d0f1      	beq.n	8003208 <HAL_RCC_OscConfig+0x230>
 8003224:	e011      	b.n	800324a <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003226:	f7fe fdbb 	bl	8001da0 <HAL_GetTick>
 800322a:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800322c:	e008      	b.n	8003240 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800322e:	f7fe fdb7 	bl	8001da0 <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	2b64      	cmp	r3, #100	; 0x64
 800323a:	d901      	bls.n	8003240 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e244      	b.n	80036ca <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003240:	f7ff fc95 	bl	8002b6e <LL_RCC_HSE_IsReady>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d1f1      	bne.n	800322e <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d046      	beq.n	80032e4 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	2b04      	cmp	r3, #4
 800325a:	d005      	beq.n	8003268 <HAL_RCC_OscConfig+0x290>
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	2b0c      	cmp	r3, #12
 8003260:	d10e      	bne.n	8003280 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	2b02      	cmp	r3, #2
 8003266:	d10b      	bne.n	8003280 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	691b      	ldr	r3, [r3, #16]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d101      	bne.n	8003274 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e22a      	b.n	80036ca <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	695b      	ldr	r3, [r3, #20]
 8003278:	4618      	mov	r0, r3
 800327a:	f7ff fcb6 	bl	8002bea <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800327e:	e031      	b.n	80032e4 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	691b      	ldr	r3, [r3, #16]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d019      	beq.n	80032bc <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003288:	f7ff fc82 	bl	8002b90 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800328c:	f7fe fd88 	bl	8001da0 <HAL_GetTick>
 8003290:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003292:	e008      	b.n	80032a6 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003294:	f7fe fd84 	bl	8001da0 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e211      	b.n	80036ca <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 80032a6:	f7ff fc8f 	bl	8002bc8 <LL_RCC_HSI_IsReady>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d0f1      	beq.n	8003294 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	695b      	ldr	r3, [r3, #20]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff fc98 	bl	8002bea <LL_RCC_HSI_SetCalibTrimming>
 80032ba:	e013      	b.n	80032e4 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032bc:	f7ff fc76 	bl	8002bac <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c0:	f7fe fd6e 	bl	8001da0 <HAL_GetTick>
 80032c4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80032c6:	e008      	b.n	80032da <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032c8:	f7fe fd6a 	bl	8001da0 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d901      	bls.n	80032da <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e1f7      	b.n	80036ca <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 80032da:	f7ff fc75 	bl	8002bc8 <LL_RCC_HSI_IsReady>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d1f1      	bne.n	80032c8 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0308 	and.w	r3, r3, #8
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d06e      	beq.n	80033ce <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	699b      	ldr	r3, [r3, #24]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d056      	beq.n	80033a6 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 80032f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003300:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	69da      	ldr	r2, [r3, #28]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f003 0310 	and.w	r3, r3, #16
 800330c:	429a      	cmp	r2, r3
 800330e:	d031      	beq.n	8003374 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d006      	beq.n	8003328 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003320:	2b00      	cmp	r3, #0
 8003322:	d101      	bne.n	8003328 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e1d0      	b.n	80036ca <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	2b00      	cmp	r3, #0
 8003330:	d013      	beq.n	800335a <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8003332:	f7ff fc8f 	bl	8002c54 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003336:	f7fe fd33 	bl	8001da0 <HAL_GetTick>
 800333a:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 800333c:	e008      	b.n	8003350 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800333e:	f7fe fd2f 	bl	8001da0 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b11      	cmp	r3, #17
 800334a:	d901      	bls.n	8003350 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e1bc      	b.n	80036ca <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8003350:	f7ff fc90 	bl	8002c74 <LL_RCC_LSI_IsReady>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1f1      	bne.n	800333e <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800335a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800335e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003362:	f023 0210 	bic.w	r2, r3, #16
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	69db      	ldr	r3, [r3, #28]
 800336a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800336e:	4313      	orrs	r3, r2
 8003370:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003374:	f7ff fc5e 	bl	8002c34 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003378:	f7fe fd12 	bl	8001da0 <HAL_GetTick>
 800337c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800337e:	e00c      	b.n	800339a <HAL_RCC_OscConfig+0x3c2>
 8003380:	20000000 	.word	0x20000000
 8003384:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003388:	f7fe fd0a 	bl	8001da0 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b11      	cmp	r3, #17
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e197      	b.n	80036ca <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 800339a:	f7ff fc6b 	bl	8002c74 <LL_RCC_LSI_IsReady>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d0f1      	beq.n	8003388 <HAL_RCC_OscConfig+0x3b0>
 80033a4:	e013      	b.n	80033ce <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033a6:	f7ff fc55 	bl	8002c54 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033aa:	f7fe fcf9 	bl	8001da0 <HAL_GetTick>
 80033ae:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80033b0:	e008      	b.n	80033c4 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033b2:	f7fe fcf5 	bl	8001da0 <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	2b11      	cmp	r3, #17
 80033be:	d901      	bls.n	80033c4 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e182      	b.n	80036ca <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 80033c4:	f7ff fc56 	bl	8002c74 <LL_RCC_LSI_IsReady>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1f1      	bne.n	80033b2 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0304 	and.w	r3, r3, #4
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	f000 80d8 	beq.w	800358c <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80033dc:	f7ff fb6c 	bl	8002ab8 <LL_PWR_IsEnabledBkUpAccess>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d113      	bne.n	800340e <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80033e6:	f7ff fb4d 	bl	8002a84 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033ea:	f7fe fcd9 	bl	8001da0 <HAL_GetTick>
 80033ee:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80033f0:	e008      	b.n	8003404 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033f2:	f7fe fcd5 	bl	8001da0 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d901      	bls.n	8003404 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e162      	b.n	80036ca <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003404:	f7ff fb58 	bl	8002ab8 <LL_PWR_IsEnabledBkUpAccess>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d0f1      	beq.n	80033f2 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d07b      	beq.n	800350e <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	2b85      	cmp	r3, #133	; 0x85
 800341c:	d003      	beq.n	8003426 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	2b05      	cmp	r3, #5
 8003424:	d109      	bne.n	800343a <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003426:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800342a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800342e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003432:	f043 0304 	orr.w	r3, r3, #4
 8003436:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800343a:	f7fe fcb1 	bl	8001da0 <HAL_GetTick>
 800343e:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003440:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003448:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800344c:	f043 0301 	orr.w	r3, r3, #1
 8003450:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003454:	e00a      	b.n	800346c <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003456:	f7fe fca3 	bl	8001da0 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	f241 3288 	movw	r2, #5000	; 0x1388
 8003464:	4293      	cmp	r3, r2
 8003466:	d901      	bls.n	800346c <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e12e      	b.n	80036ca <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 800346c:	f7ff fbd1 	bl	8002c12 <LL_RCC_LSE_IsReady>
 8003470:	4603      	mov	r3, r0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d0ef      	beq.n	8003456 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	2b81      	cmp	r3, #129	; 0x81
 800347c:	d003      	beq.n	8003486 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	2b85      	cmp	r3, #133	; 0x85
 8003484:	d121      	bne.n	80034ca <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003486:	f7fe fc8b 	bl	8001da0 <HAL_GetTick>
 800348a:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800348c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003494:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800349c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80034a0:	e00a      	b.n	80034b8 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034a2:	f7fe fc7d 	bl	8001da0 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d901      	bls.n	80034b8 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	e108      	b.n	80036ca <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80034b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d0ec      	beq.n	80034a2 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80034c8:	e060      	b.n	800358c <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ca:	f7fe fc69 	bl	8001da0 <HAL_GetTick>
 80034ce:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80034d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80034e4:	e00a      	b.n	80034fc <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034e6:	f7fe fc5b 	bl	8001da0 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d901      	bls.n	80034fc <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e0e6      	b.n	80036ca <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80034fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003504:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003508:	2b00      	cmp	r3, #0
 800350a:	d1ec      	bne.n	80034e6 <HAL_RCC_OscConfig+0x50e>
 800350c:	e03e      	b.n	800358c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800350e:	f7fe fc47 	bl	8001da0 <HAL_GetTick>
 8003512:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003514:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800351c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003520:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003524:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003528:	e00a      	b.n	8003540 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800352a:	f7fe fc39 	bl	8001da0 <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	f241 3288 	movw	r2, #5000	; 0x1388
 8003538:	4293      	cmp	r3, r2
 800353a:	d901      	bls.n	8003540 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e0c4      	b.n	80036ca <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003540:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003544:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003548:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800354c:	2b00      	cmp	r3, #0
 800354e:	d1ec      	bne.n	800352a <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003550:	f7fe fc26 	bl	8001da0 <HAL_GetTick>
 8003554:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003556:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800355a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800355e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003562:	f023 0301 	bic.w	r3, r3, #1
 8003566:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800356a:	e00a      	b.n	8003582 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800356c:	f7fe fc18 	bl	8001da0 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	f241 3288 	movw	r2, #5000	; 0x1388
 800357a:	4293      	cmp	r3, r2
 800357c:	d901      	bls.n	8003582 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e0a3      	b.n	80036ca <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003582:	f7ff fb46 	bl	8002c12 <LL_RCC_LSE_IsReady>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d1ef      	bne.n	800356c <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003590:	2b00      	cmp	r3, #0
 8003592:	f000 8099 	beq.w	80036c8 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	2b0c      	cmp	r3, #12
 800359a:	d06c      	beq.n	8003676 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d14b      	bne.n	800363c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035a4:	f7ff fc87 	bl	8002eb6 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a8:	f7fe fbfa 	bl	8001da0 <HAL_GetTick>
 80035ac:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80035ae:	e008      	b.n	80035c2 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035b0:	f7fe fbf6 	bl	8001da0 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b0a      	cmp	r3, #10
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e083      	b.n	80036ca <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80035c2:	f7ff fc86 	bl	8002ed2 <LL_RCC_PLL_IsReady>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d1f1      	bne.n	80035b0 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035d0:	68da      	ldr	r2, [r3, #12]
 80035d2:	4b40      	ldr	r3, [pc, #256]	; (80036d4 <HAL_RCC_OscConfig+0x6fc>)
 80035d4:	4013      	ands	r3, r2
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80035de:	4311      	orrs	r1, r2
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80035e4:	0212      	lsls	r2, r2, #8
 80035e6:	4311      	orrs	r1, r2
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80035ec:	4311      	orrs	r1, r2
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80035f2:	4311      	orrs	r1, r2
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80035f8:	430a      	orrs	r2, r1
 80035fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035fe:	4313      	orrs	r3, r2
 8003600:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003602:	f7ff fc4a 	bl	8002e9a <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003606:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003610:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003614:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003616:	f7fe fbc3 	bl	8001da0 <HAL_GetTick>
 800361a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 800361c:	e008      	b.n	8003630 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800361e:	f7fe fbbf 	bl	8001da0 <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	2b0a      	cmp	r3, #10
 800362a:	d901      	bls.n	8003630 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e04c      	b.n	80036ca <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8003630:	f7ff fc4f 	bl	8002ed2 <LL_RCC_PLL_IsReady>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d0f1      	beq.n	800361e <HAL_RCC_OscConfig+0x646>
 800363a:	e045      	b.n	80036c8 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800363c:	f7ff fc3b 	bl	8002eb6 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003640:	f7fe fbae 	bl	8001da0 <HAL_GetTick>
 8003644:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003646:	e008      	b.n	800365a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003648:	f7fe fbaa 	bl	8001da0 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b0a      	cmp	r3, #10
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e037      	b.n	80036ca <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800365a:	f7ff fc3a 	bl	8002ed2 <LL_RCC_PLL_IsReady>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d1f1      	bne.n	8003648 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8003664:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003668:	68da      	ldr	r2, [r3, #12]
 800366a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800366e:	4b1a      	ldr	r3, [pc, #104]	; (80036d8 <HAL_RCC_OscConfig+0x700>)
 8003670:	4013      	ands	r3, r2
 8003672:	60cb      	str	r3, [r1, #12]
 8003674:	e028      	b.n	80036c8 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367a:	2b01      	cmp	r3, #1
 800367c:	d101      	bne.n	8003682 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e023      	b.n	80036ca <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003682:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	f003 0203 	and.w	r2, r3, #3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003694:	429a      	cmp	r2, r3
 8003696:	d115      	bne.n	80036c4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d10e      	bne.n	80036c4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b0:	021b      	lsls	r3, r3, #8
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d106      	bne.n	80036c4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80036b6:	69bb      	ldr	r3, [r7, #24]
 80036b8:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d001      	beq.n	80036c8 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e000      	b.n	80036ca <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3720      	adds	r7, #32
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	11c1808c 	.word	0x11c1808c
 80036d8:	eefefffc 	.word	0xeefefffc

080036dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d101      	bne.n	80036f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036ec:	2301      	movs	r3, #1
 80036ee:	e10f      	b.n	8003910 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036f0:	4b89      	ldr	r3, [pc, #548]	; (8003918 <HAL_RCC_ClockConfig+0x23c>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0307 	and.w	r3, r3, #7
 80036f8:	683a      	ldr	r2, [r7, #0]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d91b      	bls.n	8003736 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036fe:	4b86      	ldr	r3, [pc, #536]	; (8003918 <HAL_RCC_ClockConfig+0x23c>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f023 0207 	bic.w	r2, r3, #7
 8003706:	4984      	ldr	r1, [pc, #528]	; (8003918 <HAL_RCC_ClockConfig+0x23c>)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	4313      	orrs	r3, r2
 800370c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800370e:	f7fe fb47 	bl	8001da0 <HAL_GetTick>
 8003712:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003714:	e008      	b.n	8003728 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003716:	f7fe fb43 	bl	8001da0 <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	2b02      	cmp	r3, #2
 8003722:	d901      	bls.n	8003728 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e0f3      	b.n	8003910 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003728:	4b7b      	ldr	r3, [pc, #492]	; (8003918 <HAL_RCC_ClockConfig+0x23c>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0307 	and.w	r3, r3, #7
 8003730:	683a      	ldr	r2, [r7, #0]
 8003732:	429a      	cmp	r2, r3
 8003734:	d1ef      	bne.n	8003716 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0302 	and.w	r3, r3, #2
 800373e:	2b00      	cmp	r3, #0
 8003740:	d016      	beq.n	8003770 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	4618      	mov	r0, r3
 8003748:	f7ff fb2a 	bl	8002da0 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800374c:	f7fe fb28 	bl	8001da0 <HAL_GetTick>
 8003750:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003752:	e008      	b.n	8003766 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003754:	f7fe fb24 	bl	8001da0 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	2b02      	cmp	r3, #2
 8003760:	d901      	bls.n	8003766 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e0d4      	b.n	8003910 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003766:	f7ff fbf2 	bl	8002f4e <LL_RCC_IsActiveFlag_HPRE>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d0f1      	beq.n	8003754 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003778:	2b00      	cmp	r3, #0
 800377a:	d016      	beq.n	80037aa <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	695b      	ldr	r3, [r3, #20]
 8003780:	4618      	mov	r0, r3
 8003782:	f7ff fb20 	bl	8002dc6 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003786:	f7fe fb0b 	bl	8001da0 <HAL_GetTick>
 800378a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800378c:	e008      	b.n	80037a0 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800378e:	f7fe fb07 	bl	8001da0 <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	2b02      	cmp	r3, #2
 800379a:	d901      	bls.n	80037a0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e0b7      	b.n	8003910 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80037a0:	f7ff fbe6 	bl	8002f70 <LL_RCC_IsActiveFlag_SHDHPRE>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d0f1      	beq.n	800378e <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0304 	and.w	r3, r3, #4
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d016      	beq.n	80037e4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	4618      	mov	r0, r3
 80037bc:	f7ff fb19 	bl	8002df2 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80037c0:	f7fe faee 	bl	8001da0 <HAL_GetTick>
 80037c4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80037c6:	e008      	b.n	80037da <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80037c8:	f7fe faea 	bl	8001da0 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d901      	bls.n	80037da <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e09a      	b.n	8003910 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80037da:	f7ff fbdb 	bl	8002f94 <LL_RCC_IsActiveFlag_PPRE1>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d0f1      	beq.n	80037c8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0308 	and.w	r3, r3, #8
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d017      	beq.n	8003820 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	00db      	lsls	r3, r3, #3
 80037f6:	4618      	mov	r0, r3
 80037f8:	f7ff fb0e 	bl	8002e18 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80037fc:	f7fe fad0 	bl	8001da0 <HAL_GetTick>
 8003800:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003802:	e008      	b.n	8003816 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003804:	f7fe facc 	bl	8001da0 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	2b02      	cmp	r3, #2
 8003810:	d901      	bls.n	8003816 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e07c      	b.n	8003910 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003816:	f7ff fbce 	bl	8002fb6 <LL_RCC_IsActiveFlag_PPRE2>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d0f1      	beq.n	8003804 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0301 	and.w	r3, r3, #1
 8003828:	2b00      	cmp	r3, #0
 800382a:	d043      	beq.n	80038b4 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	2b02      	cmp	r3, #2
 8003832:	d106      	bne.n	8003842 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003834:	f7ff f99b 	bl	8002b6e <LL_RCC_HSE_IsReady>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d11e      	bne.n	800387c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e066      	b.n	8003910 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	2b03      	cmp	r3, #3
 8003848:	d106      	bne.n	8003858 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800384a:	f7ff fb42 	bl	8002ed2 <LL_RCC_PLL_IsReady>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d113      	bne.n	800387c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e05b      	b.n	8003910 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d106      	bne.n	800386e <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003860:	f7ff fa35 	bl	8002cce <LL_RCC_MSI_IsReady>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d108      	bne.n	800387c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e050      	b.n	8003910 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800386e:	f7ff f9ab 	bl	8002bc8 <LL_RCC_HSI_IsReady>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d101      	bne.n	800387c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e049      	b.n	8003910 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	4618      	mov	r0, r3
 8003882:	f7ff fa6f 	bl	8002d64 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003886:	f7fe fa8b 	bl	8001da0 <HAL_GetTick>
 800388a:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800388c:	e00a      	b.n	80038a4 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800388e:	f7fe fa87 	bl	8001da0 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	f241 3288 	movw	r2, #5000	; 0x1388
 800389c:	4293      	cmp	r3, r2
 800389e:	d901      	bls.n	80038a4 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	e035      	b.n	8003910 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038a4:	f7ff fa71 	bl	8002d8a <LL_RCC_GetSysClkSource>
 80038a8:	4602      	mov	r2, r0
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d1ec      	bne.n	800388e <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038b4:	4b18      	ldr	r3, [pc, #96]	; (8003918 <HAL_RCC_ClockConfig+0x23c>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0307 	and.w	r3, r3, #7
 80038bc:	683a      	ldr	r2, [r7, #0]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d21b      	bcs.n	80038fa <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038c2:	4b15      	ldr	r3, [pc, #84]	; (8003918 <HAL_RCC_ClockConfig+0x23c>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f023 0207 	bic.w	r2, r3, #7
 80038ca:	4913      	ldr	r1, [pc, #76]	; (8003918 <HAL_RCC_ClockConfig+0x23c>)
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038d2:	f7fe fa65 	bl	8001da0 <HAL_GetTick>
 80038d6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038d8:	e008      	b.n	80038ec <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80038da:	f7fe fa61 	bl	8001da0 <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d901      	bls.n	80038ec <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 80038e8:	2303      	movs	r3, #3
 80038ea:	e011      	b.n	8003910 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ec:	4b0a      	ldr	r3, [pc, #40]	; (8003918 <HAL_RCC_ClockConfig+0x23c>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0307 	and.w	r3, r3, #7
 80038f4:	683a      	ldr	r2, [r7, #0]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d1ef      	bne.n	80038da <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80038fa:	f000 f8b3 	bl	8003a64 <HAL_RCC_GetHCLKFreq>
 80038fe:	4603      	mov	r3, r0
 8003900:	4a06      	ldr	r2, [pc, #24]	; (800391c <HAL_RCC_ClockConfig+0x240>)
 8003902:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8003904:	4b06      	ldr	r3, [pc, #24]	; (8003920 <HAL_RCC_ClockConfig+0x244>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4618      	mov	r0, r3
 800390a:	f7fe f88d 	bl	8001a28 <HAL_InitTick>
 800390e:	4603      	mov	r3, r0
}
 8003910:	4618      	mov	r0, r3
 8003912:	3710      	adds	r7, #16
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	58004000 	.word	0x58004000
 800391c:	20000000 	.word	0x20000000
 8003920:	20000004 	.word	0x20000004

08003924 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003924:	b590      	push	{r4, r7, lr}
 8003926:	b087      	sub	sp, #28
 8003928:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800392a:	2300      	movs	r3, #0
 800392c:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800392e:	2300      	movs	r3, #0
 8003930:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003932:	f7ff fa2a 	bl	8002d8a <LL_RCC_GetSysClkSource>
 8003936:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003938:	f7ff fafe 	bl	8002f38 <LL_RCC_PLL_GetMainSource>
 800393c:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d005      	beq.n	8003950 <HAL_RCC_GetSysClockFreq+0x2c>
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	2b0c      	cmp	r3, #12
 8003948:	d139      	bne.n	80039be <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2b01      	cmp	r3, #1
 800394e:	d136      	bne.n	80039be <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003950:	f7ff f9cd 	bl	8002cee <LL_RCC_MSI_IsEnabledRangeSelect>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d115      	bne.n	8003986 <HAL_RCC_GetSysClockFreq+0x62>
 800395a:	f7ff f9c8 	bl	8002cee <LL_RCC_MSI_IsEnabledRangeSelect>
 800395e:	4603      	mov	r3, r0
 8003960:	2b01      	cmp	r3, #1
 8003962:	d106      	bne.n	8003972 <HAL_RCC_GetSysClockFreq+0x4e>
 8003964:	f7ff f9d3 	bl	8002d0e <LL_RCC_MSI_GetRange>
 8003968:	4603      	mov	r3, r0
 800396a:	0a1b      	lsrs	r3, r3, #8
 800396c:	f003 030f 	and.w	r3, r3, #15
 8003970:	e005      	b.n	800397e <HAL_RCC_GetSysClockFreq+0x5a>
 8003972:	f7ff f9d7 	bl	8002d24 <LL_RCC_MSI_GetRangeAfterStandby>
 8003976:	4603      	mov	r3, r0
 8003978:	0a1b      	lsrs	r3, r3, #8
 800397a:	f003 030f 	and.w	r3, r3, #15
 800397e:	4a36      	ldr	r2, [pc, #216]	; (8003a58 <HAL_RCC_GetSysClockFreq+0x134>)
 8003980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003984:	e014      	b.n	80039b0 <HAL_RCC_GetSysClockFreq+0x8c>
 8003986:	f7ff f9b2 	bl	8002cee <LL_RCC_MSI_IsEnabledRangeSelect>
 800398a:	4603      	mov	r3, r0
 800398c:	2b01      	cmp	r3, #1
 800398e:	d106      	bne.n	800399e <HAL_RCC_GetSysClockFreq+0x7a>
 8003990:	f7ff f9bd 	bl	8002d0e <LL_RCC_MSI_GetRange>
 8003994:	4603      	mov	r3, r0
 8003996:	091b      	lsrs	r3, r3, #4
 8003998:	f003 030f 	and.w	r3, r3, #15
 800399c:	e005      	b.n	80039aa <HAL_RCC_GetSysClockFreq+0x86>
 800399e:	f7ff f9c1 	bl	8002d24 <LL_RCC_MSI_GetRangeAfterStandby>
 80039a2:	4603      	mov	r3, r0
 80039a4:	091b      	lsrs	r3, r3, #4
 80039a6:	f003 030f 	and.w	r3, r3, #15
 80039aa:	4a2b      	ldr	r2, [pc, #172]	; (8003a58 <HAL_RCC_GetSysClockFreq+0x134>)
 80039ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039b0:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d115      	bne.n	80039e4 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80039bc:	e012      	b.n	80039e4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	2b04      	cmp	r3, #4
 80039c2:	d102      	bne.n	80039ca <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80039c4:	4b25      	ldr	r3, [pc, #148]	; (8003a5c <HAL_RCC_GetSysClockFreq+0x138>)
 80039c6:	617b      	str	r3, [r7, #20]
 80039c8:	e00c      	b.n	80039e4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	2b08      	cmp	r3, #8
 80039ce:	d109      	bne.n	80039e4 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80039d0:	f7ff f8a0 	bl	8002b14 <LL_RCC_HSE_IsEnabledDiv2>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d102      	bne.n	80039e0 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80039da:	4b20      	ldr	r3, [pc, #128]	; (8003a5c <HAL_RCC_GetSysClockFreq+0x138>)
 80039dc:	617b      	str	r3, [r7, #20]
 80039de:	e001      	b.n	80039e4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80039e0:	4b1f      	ldr	r3, [pc, #124]	; (8003a60 <HAL_RCC_GetSysClockFreq+0x13c>)
 80039e2:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039e4:	f7ff f9d1 	bl	8002d8a <LL_RCC_GetSysClkSource>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b0c      	cmp	r3, #12
 80039ec:	d12f      	bne.n	8003a4e <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80039ee:	f7ff faa3 	bl	8002f38 <LL_RCC_PLL_GetMainSource>
 80039f2:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d003      	beq.n	8003a02 <HAL_RCC_GetSysClockFreq+0xde>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2b03      	cmp	r3, #3
 80039fe:	d003      	beq.n	8003a08 <HAL_RCC_GetSysClockFreq+0xe4>
 8003a00:	e00d      	b.n	8003a1e <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003a02:	4b16      	ldr	r3, [pc, #88]	; (8003a5c <HAL_RCC_GetSysClockFreq+0x138>)
 8003a04:	60fb      	str	r3, [r7, #12]
        break;
 8003a06:	e00d      	b.n	8003a24 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003a08:	f7ff f884 	bl	8002b14 <LL_RCC_HSE_IsEnabledDiv2>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d102      	bne.n	8003a18 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003a12:	4b12      	ldr	r3, [pc, #72]	; (8003a5c <HAL_RCC_GetSysClockFreq+0x138>)
 8003a14:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003a16:	e005      	b.n	8003a24 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8003a18:	4b11      	ldr	r3, [pc, #68]	; (8003a60 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003a1a:	60fb      	str	r3, [r7, #12]
        break;
 8003a1c:	e002      	b.n	8003a24 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	60fb      	str	r3, [r7, #12]
        break;
 8003a22:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003a24:	f7ff fa66 	bl	8002ef4 <LL_RCC_PLL_GetN>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	fb03 f402 	mul.w	r4, r3, r2
 8003a30:	f7ff fa77 	bl	8002f22 <LL_RCC_PLL_GetDivider>
 8003a34:	4603      	mov	r3, r0
 8003a36:	091b      	lsrs	r3, r3, #4
 8003a38:	3301      	adds	r3, #1
 8003a3a:	fbb4 f4f3 	udiv	r4, r4, r3
 8003a3e:	f7ff fa65 	bl	8002f0c <LL_RCC_PLL_GetR>
 8003a42:	4603      	mov	r3, r0
 8003a44:	0f5b      	lsrs	r3, r3, #29
 8003a46:	3301      	adds	r3, #1
 8003a48:	fbb4 f3f3 	udiv	r3, r4, r3
 8003a4c:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003a4e:	697b      	ldr	r3, [r7, #20]
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	371c      	adds	r7, #28
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd90      	pop	{r4, r7, pc}
 8003a58:	0800d180 	.word	0x0800d180
 8003a5c:	00f42400 	.word	0x00f42400
 8003a60:	01e84800 	.word	0x01e84800

08003a64 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a64:	b598      	push	{r3, r4, r7, lr}
 8003a66:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003a68:	f7ff ff5c 	bl	8003924 <HAL_RCC_GetSysClockFreq>
 8003a6c:	4604      	mov	r4, r0
 8003a6e:	f7ff f9e6 	bl	8002e3e <LL_RCC_GetAHBPrescaler>
 8003a72:	4603      	mov	r3, r0
 8003a74:	091b      	lsrs	r3, r3, #4
 8003a76:	f003 030f 	and.w	r3, r3, #15
 8003a7a:	4a03      	ldr	r2, [pc, #12]	; (8003a88 <HAL_RCC_GetHCLKFreq+0x24>)
 8003a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a80:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	bd98      	pop	{r3, r4, r7, pc}
 8003a88:	0800d120 	.word	0x0800d120

08003a8c <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a8c:	b598      	push	{r3, r4, r7, lr}
 8003a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003a90:	f7ff ffe8 	bl	8003a64 <HAL_RCC_GetHCLKFreq>
 8003a94:	4604      	mov	r4, r0
 8003a96:	f7ff f9ea 	bl	8002e6e <LL_RCC_GetAPB1Prescaler>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	0a1b      	lsrs	r3, r3, #8
 8003a9e:	4a03      	ldr	r2, [pc, #12]	; (8003aac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003aa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aa4:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	bd98      	pop	{r3, r4, r7, pc}
 8003aac:	0800d160 	.word	0x0800d160

08003ab0 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ab0:	b598      	push	{r3, r4, r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003ab4:	f7ff ffd6 	bl	8003a64 <HAL_RCC_GetHCLKFreq>
 8003ab8:	4604      	mov	r4, r0
 8003aba:	f7ff f9e3 	bl	8002e84 <LL_RCC_GetAPB2Prescaler>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	0adb      	lsrs	r3, r3, #11
 8003ac2:	4a03      	ldr	r2, [pc, #12]	; (8003ad0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ac8:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	bd98      	pop	{r3, r4, r7, pc}
 8003ad0:	0800d160 	.word	0x0800d160

08003ad4 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer to the Flash Latency variable.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b085      	sub	sp, #20
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  uint32_t regvalue;

  /* Check the parameters */
  if ((RCC_ClkInitStruct != NULL) && (pFLatency != NULL))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d02d      	beq.n	8003b40 <HAL_RCC_GetClockConfig+0x6c>
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d02a      	beq.n	8003b40 <HAL_RCC_GetClockConfig+0x6c>
  {
    /* Set all possible values for the Clock type parameter --------------------*/
    RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 \
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	224f      	movs	r2, #79	; 0x4f
 8003aee:	601a      	str	r2, [r3, #0]
#if defined(DUAL_CORE)
    RCC_ClkInitStruct->ClockType |= RCC_CLOCKTYPE_HCLK2;
#endif  /* DUAL_CORE */

    /* Get Clock Configuration Register */
    regvalue = RCC->CFGR;
 8003af0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	60fb      	str	r3, [r7, #12]

    /* Get the SYSCLK configuration --------------------------------------------*/
    RCC_ClkInitStruct->SYSCLKSource = (regvalue & RCC_CFGR_SWS);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f003 020c 	and.w	r2, r3, #12
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	605a      	str	r2, [r3, #4]

    /* Get the HCLK configuration ----------------------------------------------*/
    RCC_ClkInitStruct->AHBCLKDivider = (regvalue & RCC_CFGR_HPRE);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	609a      	str	r2, [r3, #8]

    /* Get the APB1 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB1CLKDivider = (regvalue & RCC_CFGR_PPRE1);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	60da      	str	r2, [r3, #12]

    /* Get the APB2 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB2CLKDivider = (regvalue & RCC_CFGR_PPRE2);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	611a      	str	r2, [r3, #16]

    /* Get Extended Clock Recovery Register */
    regvalue = RCC->EXTCFGR;
 8003b20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b24:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003b28:	60fb      	str	r3, [r7, #12]
    /* Get the AHBCLK2Divider configuration ------------------------------------*/
    RCC_ClkInitStruct->AHBCLK2Divider =  (regvalue & RCC_EXTCFGR_C2HPRE);
#endif  /* DUAL_CORE */

    /* Get the AHBCLK3Divider configuration ------------------------------------*/
    RCC_ClkInitStruct->AHBCLK3Divider = ((regvalue & RCC_EXTCFGR_SHDHPRE) << 4);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	011b      	lsls	r3, r3, #4
 8003b2e:	b2da      	uxtb	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	615a      	str	r2, [r3, #20]

    /* Get the Flash Wait State (Latency) configuration ------------------------*/
    *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003b34:	4b05      	ldr	r3, [pc, #20]	; (8003b4c <HAL_RCC_GetClockConfig+0x78>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0207 	and.w	r2, r3, #7
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	601a      	str	r2, [r3, #0]
  }
}
 8003b40:	bf00      	nop
 8003b42:	3714      	adds	r7, #20
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bc80      	pop	{r7}
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	58004000 	.word	0x58004000

08003b50 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003b50:	b590      	push	{r4, r7, lr}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	091b      	lsrs	r3, r3, #4
 8003b5c:	f003 030f 	and.w	r3, r3, #15
 8003b60:	4a10      	ldr	r2, [pc, #64]	; (8003ba4 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8003b62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b66:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8003b68:	f7ff f974 	bl	8002e54 <LL_RCC_GetAHB3Prescaler>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	091b      	lsrs	r3, r3, #4
 8003b70:	f003 030f 	and.w	r3, r3, #15
 8003b74:	4a0c      	ldr	r2, [pc, #48]	; (8003ba8 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8003b76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b80:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	4a09      	ldr	r2, [pc, #36]	; (8003bac <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8003b86:	fba2 2303 	umull	r2, r3, r2, r3
 8003b8a:	0c9c      	lsrs	r4, r3, #18
 8003b8c:	f7fe ff88 	bl	8002aa0 <HAL_PWREx_GetVoltageRange>
 8003b90:	4603      	mov	r3, r0
 8003b92:	4619      	mov	r1, r3
 8003b94:	4620      	mov	r0, r4
 8003b96:	f000 f80b 	bl	8003bb0 <RCC_SetFlashLatency>
 8003b9a:	4603      	mov	r3, r0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3714      	adds	r7, #20
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd90      	pop	{r4, r7, pc}
 8003ba4:	0800d180 	.word	0x0800d180
 8003ba8:	0800d120 	.word	0x0800d120
 8003bac:	431bde83 	.word	0x431bde83

08003bb0 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b08e      	sub	sp, #56	; 0x38
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8003bba:	4a3a      	ldr	r2, [pc, #232]	; (8003ca4 <RCC_SetFlashLatency+0xf4>)
 8003bbc:	f107 0320 	add.w	r3, r7, #32
 8003bc0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003bc4:	6018      	str	r0, [r3, #0]
 8003bc6:	3304      	adds	r3, #4
 8003bc8:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8003bca:	4a37      	ldr	r2, [pc, #220]	; (8003ca8 <RCC_SetFlashLatency+0xf8>)
 8003bcc:	f107 0318 	add.w	r3, r7, #24
 8003bd0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003bd4:	6018      	str	r0, [r3, #0]
 8003bd6:	3304      	adds	r3, #4
 8003bd8:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8003bda:	4a34      	ldr	r2, [pc, #208]	; (8003cac <RCC_SetFlashLatency+0xfc>)
 8003bdc:	f107 030c 	add.w	r3, r7, #12
 8003be0:	ca07      	ldmia	r2, {r0, r1, r2}
 8003be2:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003be6:	2300      	movs	r3, #0
 8003be8:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bf0:	d11b      	bne.n	8003c2a <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	633b      	str	r3, [r7, #48]	; 0x30
 8003bf6:	e014      	b.n	8003c22 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bfa:	005b      	lsls	r3, r3, #1
 8003bfc:	3338      	adds	r3, #56	; 0x38
 8003bfe:	443b      	add	r3, r7
 8003c00:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003c04:	461a      	mov	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d807      	bhi.n	8003c1c <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	3338      	adds	r3, #56	; 0x38
 8003c12:	443b      	add	r3, r7
 8003c14:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003c18:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003c1a:	e021      	b.n	8003c60 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c1e:	3301      	adds	r3, #1
 8003c20:	633b      	str	r3, [r7, #48]	; 0x30
 8003c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d9e7      	bls.n	8003bf8 <RCC_SetFlashLatency+0x48>
 8003c28:	e01a      	b.n	8003c60 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c2e:	e014      	b.n	8003c5a <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c32:	005b      	lsls	r3, r3, #1
 8003c34:	3338      	adds	r3, #56	; 0x38
 8003c36:	443b      	add	r3, r7
 8003c38:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d807      	bhi.n	8003c54 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	3338      	adds	r3, #56	; 0x38
 8003c4a:	443b      	add	r3, r7
 8003c4c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003c50:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003c52:	e005      	b.n	8003c60 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c56:	3301      	adds	r3, #1
 8003c58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d9e7      	bls.n	8003c30 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c60:	4b13      	ldr	r3, [pc, #76]	; (8003cb0 <RCC_SetFlashLatency+0x100>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f023 0207 	bic.w	r2, r3, #7
 8003c68:	4911      	ldr	r1, [pc, #68]	; (8003cb0 <RCC_SetFlashLatency+0x100>)
 8003c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003c70:	f7fe f896 	bl	8001da0 <HAL_GetTick>
 8003c74:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003c76:	e008      	b.n	8003c8a <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003c78:	f7fe f892 	bl	8001da0 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d901      	bls.n	8003c8a <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e007      	b.n	8003c9a <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003c8a:	4b09      	ldr	r3, [pc, #36]	; (8003cb0 <RCC_SetFlashLatency+0x100>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0307 	and.w	r3, r3, #7
 8003c92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d1ef      	bne.n	8003c78 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3738      	adds	r7, #56	; 0x38
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	0800d01c 	.word	0x0800d01c
 8003ca8:	0800d024 	.word	0x0800d024
 8003cac:	0800d02c 	.word	0x0800d02c
 8003cb0:	58004000 	.word	0x58004000

08003cb4 <LL_RCC_LSE_IsReady>:
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003cb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc0:	f003 0302 	and.w	r3, r3, #2
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d101      	bne.n	8003ccc <LL_RCC_LSE_IsReady+0x18>
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e000      	b.n	8003cce <LL_RCC_LSE_IsReady+0x1a>
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bc80      	pop	{r7}
 8003cd4:	4770      	bx	lr

08003cd6 <LL_RCC_SetUSARTClockSource>:
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	b083      	sub	sp, #12
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8003cde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ce2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	0c1b      	lsrs	r3, r3, #16
 8003cea:	43db      	mvns	r3, r3
 8003cec:	401a      	ands	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003cfc:	bf00      	nop
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bc80      	pop	{r7}
 8003d04:	4770      	bx	lr

08003d06 <LL_RCC_SetI2SClockSource>:
{
 8003d06:	b480      	push	{r7}
 8003d08:	b083      	sub	sp, #12
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8003d0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d16:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d1a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003d26:	bf00      	nop
 8003d28:	370c      	adds	r7, #12
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bc80      	pop	{r7}
 8003d2e:	4770      	bx	lr

08003d30 <LL_RCC_SetLPUARTClockSource>:
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003d38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d40:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003d50:	bf00      	nop
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bc80      	pop	{r7}
 8003d58:	4770      	bx	lr

08003d5a <LL_RCC_SetI2CClockSource>:
{
 8003d5a:	b480      	push	{r7}
 8003d5c:	b083      	sub	sp, #12
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003d62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d66:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	091b      	lsrs	r3, r3, #4
 8003d6e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003d72:	43db      	mvns	r3, r3
 8003d74:	401a      	ands	r2, r3
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	011b      	lsls	r3, r3, #4
 8003d7a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003d7e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d82:	4313      	orrs	r3, r2
 8003d84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003d88:	bf00      	nop
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bc80      	pop	{r7}
 8003d90:	4770      	bx	lr

08003d92 <LL_RCC_SetLPTIMClockSource>:
{
 8003d92:	b480      	push	{r7}
 8003d94:	b083      	sub	sp, #12
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003d9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d9e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	0c1b      	lsrs	r3, r3, #16
 8003da6:	041b      	lsls	r3, r3, #16
 8003da8:	43db      	mvns	r3, r3
 8003daa:	401a      	ands	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	041b      	lsls	r3, r3, #16
 8003db0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003db4:	4313      	orrs	r3, r2
 8003db6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003dba:	bf00      	nop
 8003dbc:	370c      	adds	r7, #12
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bc80      	pop	{r7}
 8003dc2:	4770      	bx	lr

08003dc4 <LL_RCC_SetRNGClockSource>:
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003dcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dd4:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003dd8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003de4:	bf00      	nop
 8003de6:	370c      	adds	r7, #12
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bc80      	pop	{r7}
 8003dec:	4770      	bx	lr

08003dee <LL_RCC_SetADCClockSource>:
{
 8003dee:	b480      	push	{r7}
 8003df0:	b083      	sub	sp, #12
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003df6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dfe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e02:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003e0e:	bf00      	nop
 8003e10:	370c      	adds	r7, #12
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bc80      	pop	{r7}
 8003e16:	4770      	bx	lr

08003e18 <LL_RCC_SetRTCClockSource>:
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003e20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e28:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e2c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003e38:	bf00      	nop
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bc80      	pop	{r7}
 8003e40:	4770      	bx	lr

08003e42 <LL_RCC_GetRTCClockSource>:
{
 8003e42:	b480      	push	{r7}
 8003e44:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003e46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bc80      	pop	{r7}
 8003e58:	4770      	bx	lr

08003e5a <LL_RCC_ForceBackupDomainReset>:
{
 8003e5a:	b480      	push	{r7}
 8003e5c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003e5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e66:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003e72:	bf00      	nop
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bc80      	pop	{r7}
 8003e78:	4770      	bx	lr

08003e7a <LL_RCC_ReleaseBackupDomainReset>:
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003e7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003e92:	bf00      	nop
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bc80      	pop	{r7}
 8003e98:	4770      	bx	lr
	...

08003e9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b086      	sub	sp, #24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003eac:	2300      	movs	r3, #0
 8003eae:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d058      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8003ebc:	f7fe fde2 	bl	8002a84 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ec0:	f7fd ff6e 	bl	8001da0 <HAL_GetTick>
 8003ec4:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003ec6:	e009      	b.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ec8:	f7fd ff6a 	bl	8001da0 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d902      	bls.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	74fb      	strb	r3, [r7, #19]
        break;
 8003eda:	e006      	b.n	8003eea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003edc:	4b7b      	ldr	r3, [pc, #492]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ee8:	d1ee      	bne.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8003eea:	7cfb      	ldrb	r3, [r7, #19]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d13c      	bne.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8003ef0:	f7ff ffa7 	bl	8003e42 <LL_RCC_GetRTCClockSource>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d00f      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003efe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f0a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f0c:	f7ff ffa5 	bl	8003e5a <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f10:	f7ff ffb3 	bl	8003e7a <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	f003 0302 	and.w	r3, r3, #2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d014      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f28:	f7fd ff3a 	bl	8001da0 <HAL_GetTick>
 8003f2c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8003f2e:	e00b      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f30:	f7fd ff36 	bl	8001da0 <HAL_GetTick>
 8003f34:	4602      	mov	r2, r0
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	1ad3      	subs	r3, r2, r3
 8003f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d902      	bls.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	74fb      	strb	r3, [r7, #19]
            break;
 8003f46:	e004      	b.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003f48:	f7ff feb4 	bl	8003cb4 <LL_RCC_LSE_IsReady>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d1ee      	bne.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8003f52:	7cfb      	ldrb	r3, [r7, #19]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d105      	bne.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7ff ff5b 	bl	8003e18 <LL_RCC_SetRTCClockSource>
 8003f62:	e004      	b.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f64:	7cfb      	ldrb	r3, [r7, #19]
 8003f66:	74bb      	strb	r3, [r7, #18]
 8003f68:	e001      	b.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f6a:	7cfb      	ldrb	r3, [r7, #19]
 8003f6c:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0301 	and.w	r3, r3, #1
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d004      	beq.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7ff fea9 	bl	8003cd6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0302 	and.w	r3, r3, #2
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d004      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	4618      	mov	r0, r3
 8003f96:	f7ff fe9e 	bl	8003cd6 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0320 	and.w	r3, r3, #32
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d004      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7ff fec0 	bl	8003d30 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d004      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a1b      	ldr	r3, [r3, #32]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7ff fee6 	bl	8003d92 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d004      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7ff fedb 	bl	8003d92 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d004      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fec:	4618      	mov	r0, r3
 8003fee:	f7ff fed0 	bl	8003d92 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d004      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	695b      	ldr	r3, [r3, #20]
 8004002:	4618      	mov	r0, r3
 8004004:	f7ff fea9 	bl	8003d5a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004010:	2b00      	cmp	r3, #0
 8004012:	d004      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	4618      	mov	r0, r3
 800401a:	f7ff fe9e 	bl	8003d5a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004026:	2b00      	cmp	r3, #0
 8004028:	d004      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	69db      	ldr	r3, [r3, #28]
 800402e:	4618      	mov	r0, r3
 8004030:	f7ff fe93 	bl	8003d5a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0310 	and.w	r3, r3, #16
 800403c:	2b00      	cmp	r3, #0
 800403e:	d011      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	4618      	mov	r0, r3
 8004046:	f7ff fe5e 	bl	8003d06 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004052:	d107      	bne.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8004054:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800405e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004062:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d010      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004074:	4618      	mov	r0, r3
 8004076:	f7ff fea5 	bl	8003dc4 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407e:	2b00      	cmp	r3, #0
 8004080:	d107      	bne.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004082:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800408c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004090:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d011      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7ff fea3 	bl	8003dee <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040b0:	d107      	bne.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80040b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80040bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040c0:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80040c2:	7cbb      	ldrb	r3, [r7, #18]
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3718      	adds	r7, #24
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	58000400 	.word	0x58000400

080040d0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d071      	beq.n	80041c6 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d106      	bne.n	80040fc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f7fd fbf6 	bl	80018e8 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2202      	movs	r2, #2
 8004100:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004104:	4b32      	ldr	r3, [pc, #200]	; (80041d0 <HAL_RTC_Init+0x100>)
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	f003 0310 	and.w	r3, r3, #16
 800410c:	2b10      	cmp	r3, #16
 800410e:	d051      	beq.n	80041b4 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004110:	4b2f      	ldr	r3, [pc, #188]	; (80041d0 <HAL_RTC_Init+0x100>)
 8004112:	22ca      	movs	r2, #202	; 0xca
 8004114:	625a      	str	r2, [r3, #36]	; 0x24
 8004116:	4b2e      	ldr	r3, [pc, #184]	; (80041d0 <HAL_RTC_Init+0x100>)
 8004118:	2253      	movs	r2, #83	; 0x53
 800411a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 fb53 	bl	80047c8 <RTC_EnterInitMode>
 8004122:	4603      	mov	r3, r0
 8004124:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8004126:	7bfb      	ldrb	r3, [r7, #15]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d13f      	bne.n	80041ac <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800412c:	4b28      	ldr	r3, [pc, #160]	; (80041d0 <HAL_RTC_Init+0x100>)
 800412e:	699b      	ldr	r3, [r3, #24]
 8004130:	4a27      	ldr	r2, [pc, #156]	; (80041d0 <HAL_RTC_Init+0x100>)
 8004132:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8004136:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800413a:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800413c:	4b24      	ldr	r3, [pc, #144]	; (80041d0 <HAL_RTC_Init+0x100>)
 800413e:	699a      	ldr	r2, [r3, #24]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6859      	ldr	r1, [r3, #4]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	4319      	orrs	r1, r3
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	430b      	orrs	r3, r1
 8004150:	491f      	ldr	r1, [pc, #124]	; (80041d0 <HAL_RTC_Init+0x100>)
 8004152:	4313      	orrs	r3, r2
 8004154:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	68da      	ldr	r2, [r3, #12]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	041b      	lsls	r3, r3, #16
 8004160:	491b      	ldr	r1, [pc, #108]	; (80041d0 <HAL_RTC_Init+0x100>)
 8004162:	4313      	orrs	r3, r2
 8004164:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8004166:	4b1a      	ldr	r3, [pc, #104]	; (80041d0 <HAL_RTC_Init+0x100>)
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004176:	430b      	orrs	r3, r1
 8004178:	4915      	ldr	r1, [pc, #84]	; (80041d0 <HAL_RTC_Init+0x100>)
 800417a:	4313      	orrs	r3, r2
 800417c:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 fb56 	bl	8004830 <RTC_ExitInitMode>
 8004184:	4603      	mov	r3, r0
 8004186:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8004188:	7bfb      	ldrb	r3, [r7, #15]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d10e      	bne.n	80041ac <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 800418e:	4b10      	ldr	r3, [pc, #64]	; (80041d0 <HAL_RTC_Init+0x100>)
 8004190:	699b      	ldr	r3, [r3, #24]
 8004192:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a19      	ldr	r1, [r3, #32]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	69db      	ldr	r3, [r3, #28]
 800419e:	4319      	orrs	r1, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	695b      	ldr	r3, [r3, #20]
 80041a4:	430b      	orrs	r3, r1
 80041a6:	490a      	ldr	r1, [pc, #40]	; (80041d0 <HAL_RTC_Init+0x100>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80041ac:	4b08      	ldr	r3, [pc, #32]	; (80041d0 <HAL_RTC_Init+0x100>)
 80041ae:	22ff      	movs	r2, #255	; 0xff
 80041b0:	625a      	str	r2, [r3, #36]	; 0x24
 80041b2:	e001      	b.n	80041b8 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 80041b4:	2300      	movs	r3, #0
 80041b6:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80041b8:	7bfb      	ldrb	r3, [r7, #15]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d103      	bne.n	80041c6 <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2201      	movs	r2, #1
 80041c2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 80041c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3710      	adds	r7, #16
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	40002800 	.word	0x40002800

080041d4 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80041d4:	b590      	push	{r4, r7, lr}
 80041d6:	b087      	sub	sp, #28
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d101      	bne.n	80041ee <HAL_RTC_SetTime+0x1a>
 80041ea:	2302      	movs	r3, #2
 80041ec:	e088      	b.n	8004300 <HAL_RTC_SetTime+0x12c>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2201      	movs	r2, #1
 80041f2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	2202      	movs	r2, #2
 80041fa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80041fe:	4b42      	ldr	r3, [pc, #264]	; (8004308 <HAL_RTC_SetTime+0x134>)
 8004200:	22ca      	movs	r2, #202	; 0xca
 8004202:	625a      	str	r2, [r3, #36]	; 0x24
 8004204:	4b40      	ldr	r3, [pc, #256]	; (8004308 <HAL_RTC_SetTime+0x134>)
 8004206:	2253      	movs	r2, #83	; 0x53
 8004208:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800420a:	68f8      	ldr	r0, [r7, #12]
 800420c:	f000 fadc 	bl	80047c8 <RTC_EnterInitMode>
 8004210:	4603      	mov	r3, r0
 8004212:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004214:	7cfb      	ldrb	r3, [r7, #19]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d15e      	bne.n	80042d8 <HAL_RTC_SetTime+0x104>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 800421a:	4b3b      	ldr	r3, [pc, #236]	; (8004308 <HAL_RTC_SetTime+0x134>)
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004222:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004226:	d057      	beq.n	80042d8 <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d125      	bne.n	800427a <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800422e:	4b36      	ldr	r3, [pc, #216]	; (8004308 <HAL_RTC_SetTime+0x134>)
 8004230:	699b      	ldr	r3, [r3, #24]
 8004232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004236:	2b00      	cmp	r3, #0
 8004238:	d102      	bne.n	8004240 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	2200      	movs	r2, #0
 800423e:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	4618      	mov	r0, r3
 8004246:	f000 fb31 	bl	80048ac <RTC_ByteToBcd2>
 800424a:	4603      	mov	r3, r0
 800424c:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	785b      	ldrb	r3, [r3, #1]
 8004252:	4618      	mov	r0, r3
 8004254:	f000 fb2a 	bl	80048ac <RTC_ByteToBcd2>
 8004258:	4603      	mov	r3, r0
 800425a:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800425c:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	789b      	ldrb	r3, [r3, #2]
 8004262:	4618      	mov	r0, r3
 8004264:	f000 fb22 	bl	80048ac <RTC_ByteToBcd2>
 8004268:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800426a:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	78db      	ldrb	r3, [r3, #3]
 8004272:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004274:	4313      	orrs	r3, r2
 8004276:	617b      	str	r3, [r7, #20]
 8004278:	e017      	b.n	80042aa <HAL_RTC_SetTime+0xd6>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800427a:	4b23      	ldr	r3, [pc, #140]	; (8004308 <HAL_RTC_SetTime+0x134>)
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004282:	2b00      	cmp	r3, #0
 8004284:	d102      	bne.n	800428c <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	2200      	movs	r2, #0
 800428a:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	785b      	ldrb	r3, [r3, #1]
 8004296:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004298:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800429a:	68ba      	ldr	r2, [r7, #8]
 800429c:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800429e:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	78db      	ldrb	r3, [r3, #3]
 80042a4:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80042a6:	4313      	orrs	r3, r2
 80042a8:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 80042aa:	4a17      	ldr	r2, [pc, #92]	; (8004308 <HAL_RTC_SetTime+0x134>)
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80042b2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80042b6:	6013      	str	r3, [r2, #0]
      
      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 80042b8:	4b13      	ldr	r3, [pc, #76]	; (8004308 <HAL_RTC_SetTime+0x134>)
 80042ba:	699b      	ldr	r3, [r3, #24]
 80042bc:	4a12      	ldr	r2, [pc, #72]	; (8004308 <HAL_RTC_SetTime+0x134>)
 80042be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042c2:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 80042c4:	4b10      	ldr	r3, [pc, #64]	; (8004308 <HAL_RTC_SetTime+0x134>)
 80042c6:	699a      	ldr	r2, [r3, #24]
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	68d9      	ldr	r1, [r3, #12]
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	430b      	orrs	r3, r1
 80042d2:	490d      	ldr	r1, [pc, #52]	; (8004308 <HAL_RTC_SetTime+0x134>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 80042d8:	68f8      	ldr	r0, [r7, #12]
 80042da:	f000 faa9 	bl	8004830 <RTC_ExitInitMode>
 80042de:	4603      	mov	r3, r0
 80042e0:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80042e2:	4b09      	ldr	r3, [pc, #36]	; (8004308 <HAL_RTC_SetTime+0x134>)
 80042e4:	22ff      	movs	r2, #255	; 0xff
 80042e6:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80042e8:	7cfb      	ldrb	r3, [r7, #19]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d103      	bne.n	80042f6 <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2201      	movs	r2, #1
 80042f2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 80042fe:	7cfb      	ldrb	r3, [r7, #19]
}
 8004300:	4618      	mov	r0, r3
 8004302:	371c      	adds	r7, #28
 8004304:	46bd      	mov	sp, r7
 8004306:	bd90      	pop	{r4, r7, pc}
 8004308:	40002800 	.word	0x40002800

0800430c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b086      	sub	sp, #24
 8004310:	af00      	add	r7, sp, #0
 8004312:	60f8      	str	r0, [r7, #12]
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 8004318:	4b2c      	ldr	r3, [pc, #176]	; (80043cc <HAL_RTC_GetTime+0xc0>)
 800431a:	689a      	ldr	r2, [r3, #8]
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8004320:	4b2a      	ldr	r3, [pc, #168]	; (80043cc <HAL_RTC_GetTime+0xc0>)
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004328:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800432c:	d049      	beq.n	80043c2 <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field*/
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 800432e:	4b27      	ldr	r3, [pc, #156]	; (80043cc <HAL_RTC_GetTime+0xc0>)
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 800433a:	4b24      	ldr	r3, [pc, #144]	; (80043cc <HAL_RTC_GetTime+0xc0>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004342:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004346:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	0c1b      	lsrs	r3, r3, #16
 800434c:	b2db      	uxtb	r3, r3
 800434e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004352:	b2da      	uxtb	r2, r3
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	0a1b      	lsrs	r3, r3, #8
 800435c:	b2db      	uxtb	r3, r3
 800435e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004362:	b2da      	uxtb	r2, r3
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	b2db      	uxtb	r3, r3
 800436c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004370:	b2da      	uxtb	r2, r3
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	0d9b      	lsrs	r3, r3, #22
 800437a:	b2db      	uxtb	r3, r3
 800437c:	f003 0301 	and.w	r3, r3, #1
 8004380:	b2da      	uxtb	r2, r3
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d11a      	bne.n	80043c2 <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	4618      	mov	r0, r3
 8004392:	f000 faaa 	bl	80048ea <RTC_Bcd2ToByte>
 8004396:	4603      	mov	r3, r0
 8004398:	461a      	mov	r2, r3
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	785b      	ldrb	r3, [r3, #1]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f000 faa1 	bl	80048ea <RTC_Bcd2ToByte>
 80043a8:	4603      	mov	r3, r0
 80043aa:	461a      	mov	r2, r3
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	789b      	ldrb	r3, [r3, #2]
 80043b4:	4618      	mov	r0, r3
 80043b6:	f000 fa98 	bl	80048ea <RTC_Bcd2ToByte>
 80043ba:	4603      	mov	r3, r0
 80043bc:	461a      	mov	r2, r3
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 80043c2:	2300      	movs	r3, #0
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3718      	adds	r7, #24
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	40002800 	.word	0x40002800

080043d0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80043d0:	b590      	push	{r4, r7, lr}
 80043d2:	b087      	sub	sp, #28
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d101      	bne.n	80043ea <HAL_RTC_SetDate+0x1a>
 80043e6:	2302      	movs	r3, #2
 80043e8:	e071      	b.n	80044ce <HAL_RTC_SetDate+0xfe>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2201      	movs	r2, #1
 80043ee:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2202      	movs	r2, #2
 80043f6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d10e      	bne.n	800441e <HAL_RTC_SetDate+0x4e>
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	785b      	ldrb	r3, [r3, #1]
 8004404:	f003 0310 	and.w	r3, r3, #16
 8004408:	2b00      	cmp	r3, #0
 800440a:	d008      	beq.n	800441e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	785b      	ldrb	r3, [r3, #1]
 8004410:	f023 0310 	bic.w	r3, r3, #16
 8004414:	b2db      	uxtb	r3, r3
 8004416:	330a      	adds	r3, #10
 8004418:	b2da      	uxtb	r2, r3
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d11c      	bne.n	800445e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	78db      	ldrb	r3, [r3, #3]
 8004428:	4618      	mov	r0, r3
 800442a:	f000 fa3f 	bl	80048ac <RTC_ByteToBcd2>
 800442e:	4603      	mov	r3, r0
 8004430:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	785b      	ldrb	r3, [r3, #1]
 8004436:	4618      	mov	r0, r3
 8004438:	f000 fa38 	bl	80048ac <RTC_ByteToBcd2>
 800443c:	4603      	mov	r3, r0
 800443e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004440:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	789b      	ldrb	r3, [r3, #2]
 8004446:	4618      	mov	r0, r3
 8004448:	f000 fa30 	bl	80048ac <RTC_ByteToBcd2>
 800444c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800444e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004458:	4313      	orrs	r3, r2
 800445a:	617b      	str	r3, [r7, #20]
 800445c:	e00e      	b.n	800447c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	78db      	ldrb	r3, [r3, #3]
 8004462:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	785b      	ldrb	r3, [r3, #1]
 8004468:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800446a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800446c:	68ba      	ldr	r2, [r7, #8]
 800446e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004470:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004478:	4313      	orrs	r3, r2
 800447a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800447c:	4b16      	ldr	r3, [pc, #88]	; (80044d8 <HAL_RTC_SetDate+0x108>)
 800447e:	22ca      	movs	r2, #202	; 0xca
 8004480:	625a      	str	r2, [r3, #36]	; 0x24
 8004482:	4b15      	ldr	r3, [pc, #84]	; (80044d8 <HAL_RTC_SetDate+0x108>)
 8004484:	2253      	movs	r2, #83	; 0x53
 8004486:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004488:	68f8      	ldr	r0, [r7, #12]
 800448a:	f000 f99d 	bl	80047c8 <RTC_EnterInitMode>
 800448e:	4603      	mov	r3, r0
 8004490:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004492:	7cfb      	ldrb	r3, [r7, #19]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d10b      	bne.n	80044b0 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8004498:	4a0f      	ldr	r2, [pc, #60]	; (80044d8 <HAL_RTC_SetDate+0x108>)
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80044a0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80044a4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80044a6:	68f8      	ldr	r0, [r7, #12]
 80044a8:	f000 f9c2 	bl	8004830 <RTC_ExitInitMode>
 80044ac:	4603      	mov	r3, r0
 80044ae:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044b0:	4b09      	ldr	r3, [pc, #36]	; (80044d8 <HAL_RTC_SetDate+0x108>)
 80044b2:	22ff      	movs	r2, #255	; 0xff
 80044b4:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80044b6:	7cfb      	ldrb	r3, [r7, #19]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d103      	bne.n	80044c4 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 80044cc:	7cfb      	ldrb	r3, [r7, #19]
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	371c      	adds	r7, #28
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd90      	pop	{r4, r7, pc}
 80044d6:	bf00      	nop
 80044d8:	40002800 	.word	0x40002800

080044dc <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b086      	sub	sp, #24
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 80044e8:	4b22      	ldr	r3, [pc, #136]	; (8004574 <HAL_RTC_GetDate+0x98>)
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80044f0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80044f4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	0c1b      	lsrs	r3, r3, #16
 80044fa:	b2da      	uxtb	r2, r3
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	0a1b      	lsrs	r3, r3, #8
 8004504:	b2db      	uxtb	r3, r3
 8004506:	f003 031f 	and.w	r3, r3, #31
 800450a:	b2da      	uxtb	r2, r3
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	b2db      	uxtb	r3, r3
 8004514:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004518:	b2da      	uxtb	r2, r3
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	0b5b      	lsrs	r3, r3, #13
 8004522:	b2db      	uxtb	r3, r3
 8004524:	f003 0307 	and.w	r3, r3, #7
 8004528:	b2da      	uxtb	r2, r3
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d11a      	bne.n	800456a <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	78db      	ldrb	r3, [r3, #3]
 8004538:	4618      	mov	r0, r3
 800453a:	f000 f9d6 	bl	80048ea <RTC_Bcd2ToByte>
 800453e:	4603      	mov	r3, r0
 8004540:	461a      	mov	r2, r3
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	785b      	ldrb	r3, [r3, #1]
 800454a:	4618      	mov	r0, r3
 800454c:	f000 f9cd 	bl	80048ea <RTC_Bcd2ToByte>
 8004550:	4603      	mov	r3, r0
 8004552:	461a      	mov	r2, r3
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	789b      	ldrb	r3, [r3, #2]
 800455c:	4618      	mov	r0, r3
 800455e:	f000 f9c4 	bl	80048ea <RTC_Bcd2ToByte>
 8004562:	4603      	mov	r3, r0
 8004564:	461a      	mov	r2, r3
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800456a:	2300      	movs	r3, #0
}
 800456c:	4618      	mov	r0, r3
 800456e:	3718      	adds	r7, #24
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	40002800 	.word	0x40002800

08004578 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004578:	b590      	push	{r4, r7, lr}
 800457a:	b087      	sub	sp, #28
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8004584:	2300      	movs	r3, #0
 8004586:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  __HAL_LOCK(hrtc);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800458e:	2b01      	cmp	r3, #1
 8004590:	d101      	bne.n	8004596 <HAL_RTC_SetAlarm+0x1e>
 8004592:	2302      	movs	r3, #2
 8004594:	e0eb      	b.n	800476e <HAL_RTC_SetAlarm+0x1f6>
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2201      	movs	r2, #1
 800459a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2202      	movs	r2, #2
 80045a2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 80045a6:	4b74      	ldr	r3, [pc, #464]	; (8004778 <HAL_RTC_SetAlarm+0x200>)
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045ae:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045b6:	d06a      	beq.n	800468e <HAL_RTC_SetAlarm+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d13a      	bne.n	8004634 <HAL_RTC_SetAlarm+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80045be:	4b6e      	ldr	r3, [pc, #440]	; (8004778 <HAL_RTC_SetAlarm+0x200>)
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d102      	bne.n	80045d0 <HAL_RTC_SetAlarm+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	2200      	movs	r2, #0
 80045ce:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	695b      	ldr	r3, [r3, #20]
 80045d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	4618      	mov	r0, r3
 80045de:	f000 f965 	bl	80048ac <RTC_ByteToBcd2>
 80045e2:	4603      	mov	r3, r0
 80045e4:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	785b      	ldrb	r3, [r3, #1]
 80045ea:	4618      	mov	r0, r3
 80045ec:	f000 f95e 	bl	80048ac <RTC_ByteToBcd2>
 80045f0:	4603      	mov	r3, r0
 80045f2:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80045f4:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	789b      	ldrb	r3, [r3, #2]
 80045fa:	4618      	mov	r0, r3
 80045fc:	f000 f956 	bl	80048ac <RTC_ByteToBcd2>
 8004600:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004602:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	78db      	ldrb	r3, [r3, #3]
 800460a:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800460c:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004616:	4618      	mov	r0, r3
 8004618:	f000 f948 	bl	80048ac <RTC_ByteToBcd2>
 800461c:	4603      	mov	r3, r0
 800461e:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004620:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004628:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800462e:	4313      	orrs	r3, r2
 8004630:	617b      	str	r3, [r7, #20]
 8004632:	e02c      	b.n	800468e <HAL_RTC_SetAlarm+0x116>
    }
    else /* format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	695b      	ldr	r3, [r3, #20]
 8004638:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 800463c:	d00d      	beq.n	800465a <HAL_RTC_SetAlarm+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	695b      	ldr	r3, [r3, #20]
 8004642:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004646:	d008      	beq.n	800465a <HAL_RTC_SetAlarm+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8004648:	4b4b      	ldr	r3, [pc, #300]	; (8004778 <HAL_RTC_SetAlarm+0x200>)
 800464a:	699b      	ldr	r3, [r3, #24]
 800464c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004650:	2b00      	cmp	r3, #0
 8004652:	d102      	bne.n	800465a <HAL_RTC_SetAlarm+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	2200      	movs	r2, #0
 8004658:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	785b      	ldrb	r3, [r3, #1]
 8004664:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004666:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004668:	68ba      	ldr	r2, [r7, #8]
 800466a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800466c:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	78db      	ldrb	r3, [r3, #3]
 8004672:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004674:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800467c:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800467e:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004684:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800468a:	4313      	orrs	r3, r2
 800468c:	617b      	str	r3, [r7, #20]
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800468e:	4b3a      	ldr	r3, [pc, #232]	; (8004778 <HAL_RTC_SetAlarm+0x200>)
 8004690:	22ca      	movs	r2, #202	; 0xca
 8004692:	625a      	str	r2, [r3, #36]	; 0x24
 8004694:	4b38      	ldr	r3, [pc, #224]	; (8004778 <HAL_RTC_SetAlarm+0x200>)
 8004696:	2253      	movs	r2, #83	; 0x53
 8004698:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800469e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046a2:	d12c      	bne.n	80046fe <HAL_RTC_SetAlarm+0x186>
  {
    /* Disable the Alarm A interrupt */
    /* In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, (RTC_CR_ALRAE | RTC_CR_ALRAIE));
 80046a4:	4b34      	ldr	r3, [pc, #208]	; (8004778 <HAL_RTC_SetAlarm+0x200>)
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	4a33      	ldr	r2, [pc, #204]	; (8004778 <HAL_RTC_SetAlarm+0x200>)
 80046aa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80046ae:	6193      	str	r3, [r2, #24]

    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80046b0:	4b31      	ldr	r3, [pc, #196]	; (8004778 <HAL_RTC_SetAlarm+0x200>)
 80046b2:	2201      	movs	r2, #1
 80046b4:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046bc:	d107      	bne.n	80046ce <HAL_RTC_SetAlarm+0x156>
    {
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	699a      	ldr	r2, [r3, #24]
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	69db      	ldr	r3, [r3, #28]
 80046c6:	492c      	ldr	r1, [pc, #176]	; (8004778 <HAL_RTC_SetAlarm+0x200>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	644b      	str	r3, [r1, #68]	; 0x44
 80046cc:	e006      	b.n	80046dc <HAL_RTC_SetAlarm+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 80046ce:	4a2a      	ldr	r2, [pc, #168]	; (8004778 <HAL_RTC_SetAlarm+0x200>)
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 80046d4:	4a28      	ldr	r2, [pc, #160]	; (8004778 <HAL_RTC_SetAlarm+0x200>)
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 80046dc:	4a26      	ldr	r2, [pc, #152]	; (8004778 <HAL_RTC_SetAlarm+0x200>)
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e8:	f043 0201 	orr.w	r2, r3, #1
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm state: Enable Alarm */
    SET_BIT(RTC->CR, RTC_CR_ALRAE);
 80046f0:	4b21      	ldr	r3, [pc, #132]	; (8004778 <HAL_RTC_SetAlarm+0x200>)
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	4a20      	ldr	r2, [pc, #128]	; (8004778 <HAL_RTC_SetAlarm+0x200>)
 80046f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046fa:	6193      	str	r3, [r2, #24]
 80046fc:	e02b      	b.n	8004756 <HAL_RTC_SetAlarm+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    /* In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, (RTC_CR_ALRBE | RTC_CR_ALRBIE));
 80046fe:	4b1e      	ldr	r3, [pc, #120]	; (8004778 <HAL_RTC_SetAlarm+0x200>)
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	4a1d      	ldr	r2, [pc, #116]	; (8004778 <HAL_RTC_SetAlarm+0x200>)
 8004704:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8004708:	6193      	str	r3, [r2, #24]

    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800470a:	4b1b      	ldr	r3, [pc, #108]	; (8004778 <HAL_RTC_SetAlarm+0x200>)
 800470c:	2202      	movs	r2, #2
 800470e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004716:	d107      	bne.n	8004728 <HAL_RTC_SetAlarm+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	699a      	ldr	r2, [r3, #24]
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	69db      	ldr	r3, [r3, #28]
 8004720:	4915      	ldr	r1, [pc, #84]	; (8004778 <HAL_RTC_SetAlarm+0x200>)
 8004722:	4313      	orrs	r3, r2
 8004724:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004726:	e006      	b.n	8004736 <HAL_RTC_SetAlarm+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8004728:	4a13      	ldr	r2, [pc, #76]	; (8004778 <HAL_RTC_SetAlarm+0x200>)
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 800472e:	4a12      	ldr	r2, [pc, #72]	; (8004778 <HAL_RTC_SetAlarm+0x200>)
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	699b      	ldr	r3, [r3, #24]
 8004734:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8004736:	4a10      	ldr	r2, [pc, #64]	; (8004778 <HAL_RTC_SetAlarm+0x200>)
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004742:	f043 0202 	orr.w	r2, r3, #2
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm state: Enable Alarm */
    SET_BIT(RTC->CR, RTC_CR_ALRBE);
 800474a:	4b0b      	ldr	r3, [pc, #44]	; (8004778 <HAL_RTC_SetAlarm+0x200>)
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	4a0a      	ldr	r2, [pc, #40]	; (8004778 <HAL_RTC_SetAlarm+0x200>)
 8004750:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004754:	6193      	str	r3, [r2, #24]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004756:	4b08      	ldr	r3, [pc, #32]	; (8004778 <HAL_RTC_SetAlarm+0x200>)
 8004758:	22ff      	movs	r2, #255	; 0xff
 800475a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2200      	movs	r2, #0
 8004768:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	371c      	adds	r7, #28
 8004772:	46bd      	mov	sp, r7
 8004774:	bd90      	pop	{r4, r7, pc}
 8004776:	bf00      	nop
 8004778:	40002800 	.word	0x40002800

0800477c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8004784:	4b0f      	ldr	r3, [pc, #60]	; (80047c4 <HAL_RTC_WaitForSynchro+0x48>)
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	4a0e      	ldr	r2, [pc, #56]	; (80047c4 <HAL_RTC_WaitForSynchro+0x48>)
 800478a:	f023 0320 	bic.w	r3, r3, #32
 800478e:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8004790:	f7fd fb06 	bl	8001da0 <HAL_GetTick>
 8004794:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8004796:	e009      	b.n	80047ac <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004798:	f7fd fb02 	bl	8001da0 <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047a6:	d901      	bls.n	80047ac <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e006      	b.n	80047ba <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80047ac:	4b05      	ldr	r3, [pc, #20]	; (80047c4 <HAL_RTC_WaitForSynchro+0x48>)
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	f003 0320 	and.w	r3, r3, #32
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d0ef      	beq.n	8004798 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3710      	adds	r7, #16
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	40002800 	.word	0x40002800

080047c8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047d0:	2300      	movs	r3, #0
 80047d2:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80047d4:	4b15      	ldr	r3, [pc, #84]	; (800482c <RTC_EnterInitMode+0x64>)
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d120      	bne.n	8004822 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80047e0:	4b12      	ldr	r3, [pc, #72]	; (800482c <RTC_EnterInitMode+0x64>)
 80047e2:	68db      	ldr	r3, [r3, #12]
 80047e4:	4a11      	ldr	r2, [pc, #68]	; (800482c <RTC_EnterInitMode+0x64>)
 80047e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047ea:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80047ec:	f7fd fad8 	bl	8001da0 <HAL_GetTick>
 80047f0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80047f2:	e00d      	b.n	8004810 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80047f4:	f7fd fad4 	bl	8001da0 <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004802:	d905      	bls.n	8004810 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004804:	2303      	movs	r3, #3
 8004806:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2203      	movs	r2, #3
 800480c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004810:	4b06      	ldr	r3, [pc, #24]	; (800482c <RTC_EnterInitMode+0x64>)
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004818:	2b00      	cmp	r3, #0
 800481a:	d102      	bne.n	8004822 <RTC_EnterInitMode+0x5a>
 800481c:	7bfb      	ldrb	r3, [r7, #15]
 800481e:	2b03      	cmp	r3, #3
 8004820:	d1e8      	bne.n	80047f4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8004822:	7bfb      	ldrb	r3, [r7, #15]
}
 8004824:	4618      	mov	r0, r3
 8004826:	3710      	adds	r7, #16
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	40002800 	.word	0x40002800

08004830 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004838:	2300      	movs	r3, #0
 800483a:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800483c:	4b1a      	ldr	r3, [pc, #104]	; (80048a8 <RTC_ExitInitMode+0x78>)
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	4a19      	ldr	r2, [pc, #100]	; (80048a8 <RTC_ExitInitMode+0x78>)
 8004842:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004846:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004848:	4b17      	ldr	r3, [pc, #92]	; (80048a8 <RTC_ExitInitMode+0x78>)
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	f003 0320 	and.w	r3, r3, #32
 8004850:	2b00      	cmp	r3, #0
 8004852:	d10c      	bne.n	800486e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f7ff ff91 	bl	800477c <HAL_RTC_WaitForSynchro>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d01e      	beq.n	800489e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2203      	movs	r2, #3
 8004864:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	73fb      	strb	r3, [r7, #15]
 800486c:	e017      	b.n	800489e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800486e:	4b0e      	ldr	r3, [pc, #56]	; (80048a8 <RTC_ExitInitMode+0x78>)
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	4a0d      	ldr	r2, [pc, #52]	; (80048a8 <RTC_ExitInitMode+0x78>)
 8004874:	f023 0320 	bic.w	r3, r3, #32
 8004878:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f7ff ff7e 	bl	800477c <HAL_RTC_WaitForSynchro>
 8004880:	4603      	mov	r3, r0
 8004882:	2b00      	cmp	r3, #0
 8004884:	d005      	beq.n	8004892 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2203      	movs	r2, #3
 800488a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800488e:	2303      	movs	r3, #3
 8004890:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004892:	4b05      	ldr	r3, [pc, #20]	; (80048a8 <RTC_ExitInitMode+0x78>)
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	4a04      	ldr	r2, [pc, #16]	; (80048a8 <RTC_ExitInitMode+0x78>)
 8004898:	f043 0320 	orr.w	r3, r3, #32
 800489c:	6193      	str	r3, [r2, #24]
  }

  return status;
 800489e:	7bfb      	ldrb	r3, [r7, #15]
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3710      	adds	r7, #16
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	40002800 	.word	0x40002800

080048ac <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	4603      	mov	r3, r0
 80048b4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80048b6:	2300      	movs	r3, #0
 80048b8:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 80048ba:	79fb      	ldrb	r3, [r7, #7]
 80048bc:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 80048be:	e005      	b.n	80048cc <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	3301      	adds	r3, #1
 80048c4:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 80048c6:	7afb      	ldrb	r3, [r7, #11]
 80048c8:	3b0a      	subs	r3, #10
 80048ca:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 80048cc:	7afb      	ldrb	r3, [r7, #11]
 80048ce:	2b09      	cmp	r3, #9
 80048d0:	d8f6      	bhi.n	80048c0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	011b      	lsls	r3, r3, #4
 80048d8:	b2da      	uxtb	r2, r3
 80048da:	7afb      	ldrb	r3, [r7, #11]
 80048dc:	4313      	orrs	r3, r2
 80048de:	b2db      	uxtb	r3, r3
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3714      	adds	r7, #20
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bc80      	pop	{r7}
 80048e8:	4770      	bx	lr

080048ea <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80048ea:	b480      	push	{r7}
 80048ec:	b085      	sub	sp, #20
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	4603      	mov	r3, r0
 80048f2:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 80048f4:	79fb      	ldrb	r3, [r7, #7]
 80048f6:	091b      	lsrs	r3, r3, #4
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	461a      	mov	r2, r3
 80048fc:	4613      	mov	r3, r2
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	4413      	add	r3, r2
 8004902:	005b      	lsls	r3, r3, #1
 8004904:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	b2da      	uxtb	r2, r3
 800490a:	79fb      	ldrb	r3, [r7, #7]
 800490c:	f003 030f 	and.w	r3, r3, #15
 8004910:	b2db      	uxtb	r3, r3
 8004912:	4413      	add	r3, r2
 8004914:	b2db      	uxtb	r3, r3
}
 8004916:	4618      	mov	r0, r3
 8004918:	3714      	adds	r7, #20
 800491a:	46bd      	mov	sp, r7
 800491c:	bc80      	pop	{r7}
 800491e:	4770      	bx	lr

08004920 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d101      	bne.n	8004932 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e0c6      	b.n	8004ac0 <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004936:	2b00      	cmp	r3, #0
 8004938:	d108      	bne.n	800494c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004942:	d009      	beq.n	8004958 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	61da      	str	r2, [r3, #28]
 800494a:	e005      	b.n	8004958 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800495e:	b2db      	uxtb	r3, r3
 8004960:	2b00      	cmp	r3, #0
 8004962:	d106      	bne.n	8004972 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f7fc ffe7 	bl	8001940 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2202      	movs	r2, #2
 8004976:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004988:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004992:	d902      	bls.n	800499a <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004994:	2300      	movs	r3, #0
 8004996:	60fb      	str	r3, [r7, #12]
 8004998:	e002      	b.n	80049a0 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800499a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800499e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80049a8:	d007      	beq.n	80049ba <HAL_SPI_Init+0x9a>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80049b2:	d002      	beq.n	80049ba <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80049ca:	431a      	orrs	r2, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	f003 0302 	and.w	r3, r3, #2
 80049d4:	431a      	orrs	r2, r3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	695b      	ldr	r3, [r3, #20]
 80049da:	f003 0301 	and.w	r3, r3, #1
 80049de:	431a      	orrs	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	699b      	ldr	r3, [r3, #24]
 80049e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049e8:	431a      	orrs	r2, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	69db      	ldr	r3, [r3, #28]
 80049ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049f2:	431a      	orrs	r2, r3
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a1b      	ldr	r3, [r3, #32]
 80049f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049fc:	ea42 0103 	orr.w	r1, r2, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a04:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	430a      	orrs	r2, r1
 8004a0e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a18:	d11b      	bne.n	8004a52 <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d10b      	bne.n	8004a3a <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a2a:	d903      	bls.n	8004a34 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2202      	movs	r2, #2
 8004a30:	631a      	str	r2, [r3, #48]	; 0x30
 8004a32:	e002      	b.n	8004a3a <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a3e:	2b02      	cmp	r3, #2
 8004a40:	d107      	bne.n	8004a52 <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a50:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	0c1b      	lsrs	r3, r3, #16
 8004a58:	f003 0204 	and.w	r2, r3, #4
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a60:	f003 0310 	and.w	r3, r3, #16
 8004a64:	431a      	orrs	r2, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a6a:	f003 0308 	and.w	r3, r3, #8
 8004a6e:	431a      	orrs	r2, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004a78:	ea42 0103 	orr.w	r1, r2, r3
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	430a      	orrs	r2, r1
 8004a88:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a92:	d105      	bne.n	8004aa0 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	b292      	uxth	r2, r2
 8004a9e:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	69da      	ldr	r2, [r3, #28]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004aae:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004abe:	2300      	movs	r3, #0
}
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	3710      	adds	r7, #16
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}

08004ac8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d101      	bne.n	8004ada <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e049      	b.n	8004b6e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d106      	bne.n	8004af4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 f841 	bl	8004b76 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2202      	movs	r2, #2
 8004af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	3304      	adds	r3, #4
 8004b04:	4619      	mov	r1, r3
 8004b06:	4610      	mov	r0, r2
 8004b08:	f000 f9ce 	bl	8004ea8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2201      	movs	r2, #1
 8004b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3708      	adds	r7, #8
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}

08004b76 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004b76:	b480      	push	{r7}
 8004b78:	b083      	sub	sp, #12
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004b7e:	bf00      	nop
 8004b80:	370c      	adds	r7, #12
 8004b82:	46bd      	mov	sp, r7
 8004b84:	bc80      	pop	{r7}
 8004b86:	4770      	bx	lr

08004b88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b085      	sub	sp, #20
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d001      	beq.n	8004ba0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e036      	b.n	8004c0e <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2202      	movs	r2, #2
 8004ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68da      	ldr	r2, [r3, #12]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f042 0201 	orr.w	r2, r2, #1
 8004bb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a16      	ldr	r2, [pc, #88]	; (8004c18 <HAL_TIM_Base_Start_IT+0x90>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d004      	beq.n	8004bcc <HAL_TIM_Base_Start_IT+0x44>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bca:	d115      	bne.n	8004bf8 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	689a      	ldr	r2, [r3, #8]
 8004bd2:	4b12      	ldr	r3, [pc, #72]	; (8004c1c <HAL_TIM_Base_Start_IT+0x94>)
 8004bd4:	4013      	ands	r3, r2
 8004bd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2b06      	cmp	r3, #6
 8004bdc:	d015      	beq.n	8004c0a <HAL_TIM_Base_Start_IT+0x82>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004be4:	d011      	beq.n	8004c0a <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f042 0201 	orr.w	r2, r2, #1
 8004bf4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bf6:	e008      	b.n	8004c0a <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f042 0201 	orr.w	r2, r2, #1
 8004c06:	601a      	str	r2, [r3, #0]
 8004c08:	e000      	b.n	8004c0c <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c0a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3714      	adds	r7, #20
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bc80      	pop	{r7}
 8004c16:	4770      	bx	lr
 8004c18:	40012c00 	.word	0x40012c00
 8004c1c:	00010007 	.word	0x00010007

08004c20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	f003 0302 	and.w	r3, r3, #2
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d122      	bne.n	8004c7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	f003 0302 	and.w	r3, r3, #2
 8004c40:	2b02      	cmp	r3, #2
 8004c42:	d11b      	bne.n	8004c7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f06f 0202 	mvn.w	r2, #2
 8004c4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2201      	movs	r2, #1
 8004c52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	699b      	ldr	r3, [r3, #24]
 8004c5a:	f003 0303 	and.w	r3, r3, #3
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d003      	beq.n	8004c6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f000 f904 	bl	8004e70 <HAL_TIM_IC_CaptureCallback>
 8004c68:	e005      	b.n	8004c76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 f8f7 	bl	8004e5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f000 f906 	bl	8004e82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	f003 0304 	and.w	r3, r3, #4
 8004c86:	2b04      	cmp	r3, #4
 8004c88:	d122      	bne.n	8004cd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	f003 0304 	and.w	r3, r3, #4
 8004c94:	2b04      	cmp	r3, #4
 8004c96:	d11b      	bne.n	8004cd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f06f 0204 	mvn.w	r2, #4
 8004ca0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2202      	movs	r2, #2
 8004ca6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d003      	beq.n	8004cbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 f8da 	bl	8004e70 <HAL_TIM_IC_CaptureCallback>
 8004cbc:	e005      	b.n	8004cca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 f8cd 	bl	8004e5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f000 f8dc 	bl	8004e82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	f003 0308 	and.w	r3, r3, #8
 8004cda:	2b08      	cmp	r3, #8
 8004cdc:	d122      	bne.n	8004d24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	f003 0308 	and.w	r3, r3, #8
 8004ce8:	2b08      	cmp	r3, #8
 8004cea:	d11b      	bne.n	8004d24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f06f 0208 	mvn.w	r2, #8
 8004cf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2204      	movs	r2, #4
 8004cfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	69db      	ldr	r3, [r3, #28]
 8004d02:	f003 0303 	and.w	r3, r3, #3
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d003      	beq.n	8004d12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f000 f8b0 	bl	8004e70 <HAL_TIM_IC_CaptureCallback>
 8004d10:	e005      	b.n	8004d1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 f8a3 	bl	8004e5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f000 f8b2 	bl	8004e82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	f003 0310 	and.w	r3, r3, #16
 8004d2e:	2b10      	cmp	r3, #16
 8004d30:	d122      	bne.n	8004d78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	f003 0310 	and.w	r3, r3, #16
 8004d3c:	2b10      	cmp	r3, #16
 8004d3e:	d11b      	bne.n	8004d78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f06f 0210 	mvn.w	r2, #16
 8004d48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2208      	movs	r2, #8
 8004d4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	69db      	ldr	r3, [r3, #28]
 8004d56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d003      	beq.n	8004d66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 f886 	bl	8004e70 <HAL_TIM_IC_CaptureCallback>
 8004d64:	e005      	b.n	8004d72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f000 f879 	bl	8004e5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 f888 	bl	8004e82 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2200      	movs	r2, #0
 8004d76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	f003 0301 	and.w	r3, r3, #1
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d10e      	bne.n	8004da4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	f003 0301 	and.w	r3, r3, #1
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d107      	bne.n	8004da4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f06f 0201 	mvn.w	r2, #1
 8004d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f7fc fc04 	bl	80015ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dae:	2b80      	cmp	r3, #128	; 0x80
 8004db0:	d10e      	bne.n	8004dd0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dbc:	2b80      	cmp	r3, #128	; 0x80
 8004dbe:	d107      	bne.n	8004dd0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004dc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 f8d7 	bl	8004f7e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dde:	d10e      	bne.n	8004dfe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dea:	2b80      	cmp	r3, #128	; 0x80
 8004dec:	d107      	bne.n	8004dfe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004df6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f000 f8c9 	bl	8004f90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e08:	2b40      	cmp	r3, #64	; 0x40
 8004e0a:	d10e      	bne.n	8004e2a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e16:	2b40      	cmp	r3, #64	; 0x40
 8004e18:	d107      	bne.n	8004e2a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f000 f835 	bl	8004e94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	f003 0320 	and.w	r3, r3, #32
 8004e34:	2b20      	cmp	r3, #32
 8004e36:	d10e      	bne.n	8004e56 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	f003 0320 	and.w	r3, r3, #32
 8004e42:	2b20      	cmp	r3, #32
 8004e44:	d107      	bne.n	8004e56 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f06f 0220 	mvn.w	r2, #32
 8004e4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f000 f88b 	bl	8004f6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e56:	bf00      	nop
 8004e58:	3708      	adds	r7, #8
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}

08004e5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e5e:	b480      	push	{r7}
 8004e60:	b083      	sub	sp, #12
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e66:	bf00      	nop
 8004e68:	370c      	adds	r7, #12
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bc80      	pop	{r7}
 8004e6e:	4770      	bx	lr

08004e70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e78:	bf00      	nop
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bc80      	pop	{r7}
 8004e80:	4770      	bx	lr

08004e82 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e82:	b480      	push	{r7}
 8004e84:	b083      	sub	sp, #12
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e8a:	bf00      	nop
 8004e8c:	370c      	adds	r7, #12
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bc80      	pop	{r7}
 8004e92:	4770      	bx	lr

08004e94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e9c:	bf00      	nop
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bc80      	pop	{r7}
 8004ea4:	4770      	bx	lr
	...

08004ea8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b085      	sub	sp, #20
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4a29      	ldr	r2, [pc, #164]	; (8004f60 <TIM_Base_SetConfig+0xb8>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d003      	beq.n	8004ec8 <TIM_Base_SetConfig+0x20>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ec6:	d108      	bne.n	8004eda <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ece:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	68fa      	ldr	r2, [r7, #12]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a20      	ldr	r2, [pc, #128]	; (8004f60 <TIM_Base_SetConfig+0xb8>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d00b      	beq.n	8004efa <TIM_Base_SetConfig+0x52>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ee8:	d007      	beq.n	8004efa <TIM_Base_SetConfig+0x52>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a1d      	ldr	r2, [pc, #116]	; (8004f64 <TIM_Base_SetConfig+0xbc>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d003      	beq.n	8004efa <TIM_Base_SetConfig+0x52>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a1c      	ldr	r2, [pc, #112]	; (8004f68 <TIM_Base_SetConfig+0xc0>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d108      	bne.n	8004f0c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	689a      	ldr	r2, [r3, #8]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a0b      	ldr	r2, [pc, #44]	; (8004f60 <TIM_Base_SetConfig+0xb8>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d007      	beq.n	8004f48 <TIM_Base_SetConfig+0xa0>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a0a      	ldr	r2, [pc, #40]	; (8004f64 <TIM_Base_SetConfig+0xbc>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d003      	beq.n	8004f48 <TIM_Base_SetConfig+0xa0>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a09      	ldr	r2, [pc, #36]	; (8004f68 <TIM_Base_SetConfig+0xc0>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d103      	bne.n	8004f50 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	691a      	ldr	r2, [r3, #16]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	615a      	str	r2, [r3, #20]
}
 8004f56:	bf00      	nop
 8004f58:	3714      	adds	r7, #20
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bc80      	pop	{r7}
 8004f5e:	4770      	bx	lr
 8004f60:	40012c00 	.word	0x40012c00
 8004f64:	40014400 	.word	0x40014400
 8004f68:	40014800 	.word	0x40014800

08004f6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f74:	bf00      	nop
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bc80      	pop	{r7}
 8004f7c:	4770      	bx	lr

08004f7e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f7e:	b480      	push	{r7}
 8004f80:	b083      	sub	sp, #12
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f86:	bf00      	nop
 8004f88:	370c      	adds	r7, #12
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bc80      	pop	{r7}
 8004f8e:	4770      	bx	lr

08004f90 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004f98:	bf00      	nop
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bc80      	pop	{r7}
 8004fa0:	4770      	bx	lr

08004fa2 <LL_RCC_GetUSARTClockSource>:
{
 8004fa2:	b480      	push	{r7}
 8004fa4:	b083      	sub	sp, #12
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8004faa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fae:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	401a      	ands	r2, r3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	041b      	lsls	r3, r3, #16
 8004fba:	4313      	orrs	r3, r2
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	370c      	adds	r7, #12
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bc80      	pop	{r7}
 8004fc4:	4770      	bx	lr

08004fc6 <LL_RCC_GetLPUARTClockSource>:
{
 8004fc6:	b480      	push	{r7}
 8004fc8:	b083      	sub	sp, #12
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004fce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fd2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4013      	ands	r3, r2
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	370c      	adds	r7, #12
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bc80      	pop	{r7}
 8004fe2:	4770      	bx	lr

08004fe4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d101      	bne.n	8004ff6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e042      	b.n	800507c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d106      	bne.n	800500e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f7fc fbe9 	bl	80017e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2224      	movs	r2, #36	; 0x24
 8005012:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f022 0201 	bic.w	r2, r2, #1
 8005024:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 fc98 	bl	800595c <UART_SetConfig>
 800502c:	4603      	mov	r3, r0
 800502e:	2b01      	cmp	r3, #1
 8005030:	d101      	bne.n	8005036 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e022      	b.n	800507c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800503a:	2b00      	cmp	r3, #0
 800503c:	d002      	beq.n	8005044 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 ff00 	bl	8005e44 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	685a      	ldr	r2, [r3, #4]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005052:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	689a      	ldr	r2, [r3, #8]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005062:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f042 0201 	orr.w	r2, r2, #1
 8005072:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f000 ff86 	bl	8005f86 <UART_CheckIdleState>
 800507a:	4603      	mov	r3, r0
}
 800507c:	4618      	mov	r0, r3
 800507e:	3708      	adds	r7, #8
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b082      	sub	sp, #8
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d101      	bne.n	8005096 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e04a      	b.n	800512c <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800509c:	2b00      	cmp	r3, #0
 800509e:	d106      	bne.n	80050ae <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f7fc fb99 	bl	80017e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2224      	movs	r2, #36	; 0x24
 80050b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f022 0201 	bic.w	r2, r2, #1
 80050c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 fc48 	bl	800595c <UART_SetConfig>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d101      	bne.n	80050d6 <HAL_HalfDuplex_Init+0x52>
  {
    return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e02a      	b.n	800512c <HAL_HalfDuplex_Init+0xa8>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d002      	beq.n	80050e4 <HAL_HalfDuplex_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 feb0 	bl	8005e44 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	685a      	ldr	r2, [r3, #4]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	689a      	ldr	r2, [r3, #8]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8005102:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	689a      	ldr	r2, [r3, #8]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f042 0208 	orr.w	r2, r2, #8
 8005112:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f042 0201 	orr.w	r2, r2, #1
 8005122:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f000 ff2e 	bl	8005f86 <UART_CheckIdleState>
 800512a:	4603      	mov	r3, r0
}
 800512c:	4618      	mov	r0, r3
 800512e:	3708      	adds	r7, #8
 8005130:	46bd      	mov	sp, r7
 8005132:	bd80      	pop	{r7, pc}

08005134 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b08a      	sub	sp, #40	; 0x28
 8005138:	af02      	add	r7, sp, #8
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	603b      	str	r3, [r7, #0]
 8005140:	4613      	mov	r3, r2
 8005142:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800514a:	2b20      	cmp	r3, #32
 800514c:	d173      	bne.n	8005236 <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d002      	beq.n	800515a <HAL_UART_Transmit+0x26>
 8005154:	88fb      	ldrh	r3, [r7, #6]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d101      	bne.n	800515e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	e06c      	b.n	8005238 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2200      	movs	r2, #0
 8005162:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2221      	movs	r2, #33	; 0x21
 800516a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800516e:	f7fc fe17 	bl	8001da0 <HAL_GetTick>
 8005172:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	88fa      	ldrh	r2, [r7, #6]
 8005178:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	88fa      	ldrh	r2, [r7, #6]
 8005180:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800518c:	d108      	bne.n	80051a0 <HAL_UART_Transmit+0x6c>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d104      	bne.n	80051a0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005196:	2300      	movs	r3, #0
 8005198:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	61bb      	str	r3, [r7, #24]
 800519e:	e003      	b.n	80051a8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051a4:	2300      	movs	r3, #0
 80051a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80051a8:	e02c      	b.n	8005204 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	9300      	str	r3, [sp, #0]
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	2200      	movs	r2, #0
 80051b2:	2180      	movs	r1, #128	; 0x80
 80051b4:	68f8      	ldr	r0, [r7, #12]
 80051b6:	f000 ff34 	bl	8006022 <UART_WaitOnFlagUntilTimeout>
 80051ba:	4603      	mov	r3, r0
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d001      	beq.n	80051c4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80051c0:	2303      	movs	r3, #3
 80051c2:	e039      	b.n	8005238 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d10b      	bne.n	80051e2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	881b      	ldrh	r3, [r3, #0]
 80051ce:	461a      	mov	r2, r3
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051d8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	3302      	adds	r3, #2
 80051de:	61bb      	str	r3, [r7, #24]
 80051e0:	e007      	b.n	80051f2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80051e2:	69fb      	ldr	r3, [r7, #28]
 80051e4:	781a      	ldrb	r2, [r3, #0]
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80051ec:	69fb      	ldr	r3, [r7, #28]
 80051ee:	3301      	adds	r3, #1
 80051f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	3b01      	subs	r3, #1
 80051fc:	b29a      	uxth	r2, r3
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800520a:	b29b      	uxth	r3, r3
 800520c:	2b00      	cmp	r3, #0
 800520e:	d1cc      	bne.n	80051aa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	9300      	str	r3, [sp, #0]
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	2200      	movs	r2, #0
 8005218:	2140      	movs	r1, #64	; 0x40
 800521a:	68f8      	ldr	r0, [r7, #12]
 800521c:	f000 ff01 	bl	8006022 <UART_WaitOnFlagUntilTimeout>
 8005220:	4603      	mov	r3, r0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d001      	beq.n	800522a <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8005226:	2303      	movs	r3, #3
 8005228:	e006      	b.n	8005238 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	2220      	movs	r2, #32
 800522e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005232:	2300      	movs	r3, #0
 8005234:	e000      	b.n	8005238 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8005236:	2302      	movs	r3, #2
  }
}
 8005238:	4618      	mov	r0, r3
 800523a:	3720      	adds	r7, #32
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b08a      	sub	sp, #40	; 0x28
 8005244:	af00      	add	r7, sp, #0
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	4613      	mov	r3, r2
 800524c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005254:	2b20      	cmp	r3, #32
 8005256:	d137      	bne.n	80052c8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d002      	beq.n	8005264 <HAL_UART_Receive_IT+0x24>
 800525e:	88fb      	ldrh	r3, [r7, #6]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d101      	bne.n	8005268 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e030      	b.n	80052ca <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2200      	movs	r2, #0
 800526c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a18      	ldr	r2, [pc, #96]	; (80052d4 <HAL_UART_Receive_IT+0x94>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d01f      	beq.n	80052b8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d018      	beq.n	80052b8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	e853 3f00 	ldrex	r3, [r3]
 8005292:	613b      	str	r3, [r7, #16]
   return(result);
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800529a:	627b      	str	r3, [r7, #36]	; 0x24
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	461a      	mov	r2, r3
 80052a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a4:	623b      	str	r3, [r7, #32]
 80052a6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a8:	69f9      	ldr	r1, [r7, #28]
 80052aa:	6a3a      	ldr	r2, [r7, #32]
 80052ac:	e841 2300 	strex	r3, r2, [r1]
 80052b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d1e6      	bne.n	8005286 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80052b8:	88fb      	ldrh	r3, [r7, #6]
 80052ba:	461a      	mov	r2, r3
 80052bc:	68b9      	ldr	r1, [r7, #8]
 80052be:	68f8      	ldr	r0, [r7, #12]
 80052c0:	f000 ff78 	bl	80061b4 <UART_Start_Receive_IT>
 80052c4:	4603      	mov	r3, r0
 80052c6:	e000      	b.n	80052ca <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80052c8:	2302      	movs	r3, #2
  }
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3728      	adds	r7, #40	; 0x28
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	40008000 	.word	0x40008000

080052d8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b0ba      	sub	sp, #232	; 0xe8
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	69db      	ldr	r3, [r3, #28]
 80052e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80052fe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005302:	f640 030f 	movw	r3, #2063	; 0x80f
 8005306:	4013      	ands	r3, r2
 8005308:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800530c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005310:	2b00      	cmp	r3, #0
 8005312:	d11b      	bne.n	800534c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005314:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005318:	f003 0320 	and.w	r3, r3, #32
 800531c:	2b00      	cmp	r3, #0
 800531e:	d015      	beq.n	800534c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005320:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005324:	f003 0320 	and.w	r3, r3, #32
 8005328:	2b00      	cmp	r3, #0
 800532a:	d105      	bne.n	8005338 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800532c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005330:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005334:	2b00      	cmp	r3, #0
 8005336:	d009      	beq.n	800534c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800533c:	2b00      	cmp	r3, #0
 800533e:	f000 82e3 	beq.w	8005908 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	4798      	blx	r3
      }
      return;
 800534a:	e2dd      	b.n	8005908 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800534c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005350:	2b00      	cmp	r3, #0
 8005352:	f000 8123 	beq.w	800559c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005356:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800535a:	4b8d      	ldr	r3, [pc, #564]	; (8005590 <HAL_UART_IRQHandler+0x2b8>)
 800535c:	4013      	ands	r3, r2
 800535e:	2b00      	cmp	r3, #0
 8005360:	d106      	bne.n	8005370 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005362:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005366:	4b8b      	ldr	r3, [pc, #556]	; (8005594 <HAL_UART_IRQHandler+0x2bc>)
 8005368:	4013      	ands	r3, r2
 800536a:	2b00      	cmp	r3, #0
 800536c:	f000 8116 	beq.w	800559c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005374:	f003 0301 	and.w	r3, r3, #1
 8005378:	2b00      	cmp	r3, #0
 800537a:	d011      	beq.n	80053a0 <HAL_UART_IRQHandler+0xc8>
 800537c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00b      	beq.n	80053a0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2201      	movs	r2, #1
 800538e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005396:	f043 0201 	orr.w	r2, r3, #1
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80053a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053a4:	f003 0302 	and.w	r3, r3, #2
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d011      	beq.n	80053d0 <HAL_UART_IRQHandler+0xf8>
 80053ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053b0:	f003 0301 	and.w	r3, r3, #1
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d00b      	beq.n	80053d0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	2202      	movs	r2, #2
 80053be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053c6:	f043 0204 	orr.w	r2, r3, #4
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80053d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053d4:	f003 0304 	and.w	r3, r3, #4
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d011      	beq.n	8005400 <HAL_UART_IRQHandler+0x128>
 80053dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053e0:	f003 0301 	and.w	r3, r3, #1
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d00b      	beq.n	8005400 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2204      	movs	r2, #4
 80053ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053f6:	f043 0202 	orr.w	r2, r3, #2
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005400:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005404:	f003 0308 	and.w	r3, r3, #8
 8005408:	2b00      	cmp	r3, #0
 800540a:	d017      	beq.n	800543c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800540c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005410:	f003 0320 	and.w	r3, r3, #32
 8005414:	2b00      	cmp	r3, #0
 8005416:	d105      	bne.n	8005424 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005418:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800541c:	4b5c      	ldr	r3, [pc, #368]	; (8005590 <HAL_UART_IRQHandler+0x2b8>)
 800541e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005420:	2b00      	cmp	r3, #0
 8005422:	d00b      	beq.n	800543c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	2208      	movs	r2, #8
 800542a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005432:	f043 0208 	orr.w	r2, r3, #8
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800543c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005440:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005444:	2b00      	cmp	r3, #0
 8005446:	d012      	beq.n	800546e <HAL_UART_IRQHandler+0x196>
 8005448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800544c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005450:	2b00      	cmp	r3, #0
 8005452:	d00c      	beq.n	800546e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800545c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005464:	f043 0220 	orr.w	r2, r3, #32
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005474:	2b00      	cmp	r3, #0
 8005476:	f000 8249 	beq.w	800590c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800547a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800547e:	f003 0320 	and.w	r3, r3, #32
 8005482:	2b00      	cmp	r3, #0
 8005484:	d013      	beq.n	80054ae <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005486:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800548a:	f003 0320 	and.w	r3, r3, #32
 800548e:	2b00      	cmp	r3, #0
 8005490:	d105      	bne.n	800549e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005492:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800549a:	2b00      	cmp	r3, #0
 800549c:	d007      	beq.n	80054ae <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d003      	beq.n	80054ae <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c2:	2b40      	cmp	r3, #64	; 0x40
 80054c4:	d005      	beq.n	80054d2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80054c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d054      	beq.n	800557c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 ff8e 	bl	80063f4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e2:	2b40      	cmp	r3, #64	; 0x40
 80054e4:	d146      	bne.n	8005574 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	3308      	adds	r3, #8
 80054ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80054f4:	e853 3f00 	ldrex	r3, [r3]
 80054f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80054fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005500:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005504:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	3308      	adds	r3, #8
 800550e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005512:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005516:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800551a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800551e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005522:	e841 2300 	strex	r3, r2, [r1]
 8005526:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800552a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1d9      	bne.n	80054e6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005538:	2b00      	cmp	r3, #0
 800553a:	d017      	beq.n	800556c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005542:	4a15      	ldr	r2, [pc, #84]	; (8005598 <HAL_UART_IRQHandler+0x2c0>)
 8005544:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800554c:	4618      	mov	r0, r3
 800554e:	f7fc ff9e 	bl	800248e <HAL_DMA_Abort_IT>
 8005552:	4603      	mov	r3, r0
 8005554:	2b00      	cmp	r3, #0
 8005556:	d019      	beq.n	800558c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800555e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005560:	687a      	ldr	r2, [r7, #4]
 8005562:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8005566:	4610      	mov	r0, r2
 8005568:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800556a:	e00f      	b.n	800558c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800556c:	6878      	ldr	r0, [r7, #4]
 800556e:	f000 f9e0 	bl	8005932 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005572:	e00b      	b.n	800558c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f000 f9dc 	bl	8005932 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800557a:	e007      	b.n	800558c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f000 f9d8 	bl	8005932 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800558a:	e1bf      	b.n	800590c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800558c:	bf00      	nop
    return;
 800558e:	e1bd      	b.n	800590c <HAL_UART_IRQHandler+0x634>
 8005590:	10000001 	.word	0x10000001
 8005594:	04000120 	.word	0x04000120
 8005598:	080064bf 	.word	0x080064bf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	f040 8153 	bne.w	800584c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80055a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055aa:	f003 0310 	and.w	r3, r3, #16
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	f000 814c 	beq.w	800584c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80055b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055b8:	f003 0310 	and.w	r3, r3, #16
 80055bc:	2b00      	cmp	r3, #0
 80055be:	f000 8145 	beq.w	800584c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	2210      	movs	r2, #16
 80055c8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055d4:	2b40      	cmp	r3, #64	; 0x40
 80055d6:	f040 80bb 	bne.w	8005750 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80055e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	f000 818f 	beq.w	8005910 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80055f8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80055fc:	429a      	cmp	r2, r3
 80055fe:	f080 8187 	bcs.w	8005910 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005608:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 0320 	and.w	r3, r3, #32
 800561a:	2b00      	cmp	r3, #0
 800561c:	f040 8087 	bne.w	800572e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005628:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800562c:	e853 3f00 	ldrex	r3, [r3]
 8005630:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005634:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005638:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800563c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	461a      	mov	r2, r3
 8005646:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800564a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800564e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005652:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005656:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800565a:	e841 2300 	strex	r3, r2, [r1]
 800565e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005662:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1da      	bne.n	8005620 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	3308      	adds	r3, #8
 8005670:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005672:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005674:	e853 3f00 	ldrex	r3, [r3]
 8005678:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800567a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800567c:	f023 0301 	bic.w	r3, r3, #1
 8005680:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	3308      	adds	r3, #8
 800568a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800568e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005692:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005694:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005696:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800569a:	e841 2300 	strex	r3, r2, [r1]
 800569e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80056a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d1e1      	bne.n	800566a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	3308      	adds	r3, #8
 80056ac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056b0:	e853 3f00 	ldrex	r3, [r3]
 80056b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80056b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	3308      	adds	r3, #8
 80056c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80056ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 80056cc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80056d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80056d2:	e841 2300 	strex	r3, r2, [r1]
 80056d6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80056d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1e3      	bne.n	80056a6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2220      	movs	r2, #32
 80056e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056f4:	e853 3f00 	ldrex	r3, [r3]
 80056f8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80056fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056fc:	f023 0310 	bic.w	r3, r3, #16
 8005700:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	461a      	mov	r2, r3
 800570a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800570e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005710:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005712:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005714:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005716:	e841 2300 	strex	r3, r2, [r1]
 800571a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800571c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800571e:	2b00      	cmp	r3, #0
 8005720:	d1e4      	bne.n	80056ec <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005728:	4618      	mov	r0, r3
 800572a:	f7fc fe52 	bl	80023d2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2202      	movs	r2, #2
 8005732:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005740:	b29b      	uxth	r3, r3
 8005742:	1ad3      	subs	r3, r2, r3
 8005744:	b29b      	uxth	r3, r3
 8005746:	4619      	mov	r1, r3
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 f8fb 	bl	8005944 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800574e:	e0df      	b.n	8005910 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800575c:	b29b      	uxth	r3, r3
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800576a:	b29b      	uxth	r3, r3
 800576c:	2b00      	cmp	r3, #0
 800576e:	f000 80d1 	beq.w	8005914 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8005772:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005776:	2b00      	cmp	r3, #0
 8005778:	f000 80cc 	beq.w	8005914 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005784:	e853 3f00 	ldrex	r3, [r3]
 8005788:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800578a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800578c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005790:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	461a      	mov	r2, r3
 800579a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800579e:	647b      	str	r3, [r7, #68]	; 0x44
 80057a0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80057a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057a6:	e841 2300 	strex	r3, r2, [r1]
 80057aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80057ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d1e4      	bne.n	800577c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	3308      	adds	r3, #8
 80057b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057bc:	e853 3f00 	ldrex	r3, [r3]
 80057c0:	623b      	str	r3, [r7, #32]
   return(result);
 80057c2:	6a3b      	ldr	r3, [r7, #32]
 80057c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057c8:	f023 0301 	bic.w	r3, r3, #1
 80057cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	3308      	adds	r3, #8
 80057d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80057da:	633a      	str	r2, [r7, #48]	; 0x30
 80057dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057e2:	e841 2300 	strex	r3, r2, [r1]
 80057e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80057e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1e1      	bne.n	80057b2 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2220      	movs	r2, #32
 80057f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	e853 3f00 	ldrex	r3, [r3]
 800580e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f023 0310 	bic.w	r3, r3, #16
 8005816:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	461a      	mov	r2, r3
 8005820:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005824:	61fb      	str	r3, [r7, #28]
 8005826:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005828:	69b9      	ldr	r1, [r7, #24]
 800582a:	69fa      	ldr	r2, [r7, #28]
 800582c:	e841 2300 	strex	r3, r2, [r1]
 8005830:	617b      	str	r3, [r7, #20]
   return(result);
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d1e4      	bne.n	8005802 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2202      	movs	r2, #2
 800583c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800583e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005842:	4619      	mov	r1, r3
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f000 f87d 	bl	8005944 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800584a:	e063      	b.n	8005914 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800584c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005850:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005854:	2b00      	cmp	r3, #0
 8005856:	d00e      	beq.n	8005876 <HAL_UART_IRQHandler+0x59e>
 8005858:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800585c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005860:	2b00      	cmp	r3, #0
 8005862:	d008      	beq.n	8005876 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800586c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f001 fb82 	bl	8006f78 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005874:	e051      	b.n	800591a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800587a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800587e:	2b00      	cmp	r3, #0
 8005880:	d014      	beq.n	80058ac <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005882:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800588a:	2b00      	cmp	r3, #0
 800588c:	d105      	bne.n	800589a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800588e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005892:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005896:	2b00      	cmp	r3, #0
 8005898:	d008      	beq.n	80058ac <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d03a      	beq.n	8005918 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	4798      	blx	r3
    }
    return;
 80058aa:	e035      	b.n	8005918 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80058ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d009      	beq.n	80058cc <HAL_UART_IRQHandler+0x5f4>
 80058b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d003      	beq.n	80058cc <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f000 fe10 	bl	80064ea <UART_EndTransmit_IT>
    return;
 80058ca:	e026      	b.n	800591a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80058cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d009      	beq.n	80058ec <HAL_UART_IRQHandler+0x614>
 80058d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d003      	beq.n	80058ec <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f001 fb59 	bl	8006f9c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80058ea:	e016      	b.n	800591a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80058ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d010      	beq.n	800591a <HAL_UART_IRQHandler+0x642>
 80058f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	da0c      	bge.n	800591a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f001 fb42 	bl	8006f8a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005906:	e008      	b.n	800591a <HAL_UART_IRQHandler+0x642>
      return;
 8005908:	bf00      	nop
 800590a:	e006      	b.n	800591a <HAL_UART_IRQHandler+0x642>
    return;
 800590c:	bf00      	nop
 800590e:	e004      	b.n	800591a <HAL_UART_IRQHandler+0x642>
      return;
 8005910:	bf00      	nop
 8005912:	e002      	b.n	800591a <HAL_UART_IRQHandler+0x642>
      return;
 8005914:	bf00      	nop
 8005916:	e000      	b.n	800591a <HAL_UART_IRQHandler+0x642>
    return;
 8005918:	bf00      	nop
  }
}
 800591a:	37e8      	adds	r7, #232	; 0xe8
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005928:	bf00      	nop
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	bc80      	pop	{r7}
 8005930:	4770      	bx	lr

08005932 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005932:	b480      	push	{r7}
 8005934:	b083      	sub	sp, #12
 8005936:	af00      	add	r7, sp, #0
 8005938:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800593a:	bf00      	nop
 800593c:	370c      	adds	r7, #12
 800593e:	46bd      	mov	sp, r7
 8005940:	bc80      	pop	{r7}
 8005942:	4770      	bx	lr

08005944 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	460b      	mov	r3, r1
 800594e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005950:	bf00      	nop
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	bc80      	pop	{r7}
 8005958:	4770      	bx	lr
	...

0800595c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800595c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005960:	b08c      	sub	sp, #48	; 0x30
 8005962:	af00      	add	r7, sp, #0
 8005964:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005966:	2300      	movs	r3, #0
 8005968:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	689a      	ldr	r2, [r3, #8]
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	691b      	ldr	r3, [r3, #16]
 8005974:	431a      	orrs	r2, r3
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	695b      	ldr	r3, [r3, #20]
 800597a:	431a      	orrs	r2, r3
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	69db      	ldr	r3, [r3, #28]
 8005980:	4313      	orrs	r3, r2
 8005982:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	4b94      	ldr	r3, [pc, #592]	; (8005bdc <UART_SetConfig+0x280>)
 800598c:	4013      	ands	r3, r2
 800598e:	697a      	ldr	r2, [r7, #20]
 8005990:	6812      	ldr	r2, [r2, #0]
 8005992:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005994:	430b      	orrs	r3, r1
 8005996:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	68da      	ldr	r2, [r3, #12]
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	430a      	orrs	r2, r1
 80059ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	699b      	ldr	r3, [r3, #24]
 80059b2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a89      	ldr	r2, [pc, #548]	; (8005be0 <UART_SetConfig+0x284>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d004      	beq.n	80059c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	6a1b      	ldr	r3, [r3, #32]
 80059c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059c4:	4313      	orrs	r3, r2
 80059c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80059d2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80059d6:	697a      	ldr	r2, [r7, #20]
 80059d8:	6812      	ldr	r2, [r2, #0]
 80059da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059dc:	430b      	orrs	r3, r1
 80059de:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e6:	f023 010f 	bic.w	r1, r3, #15
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	430a      	orrs	r2, r1
 80059f4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a7a      	ldr	r2, [pc, #488]	; (8005be4 <UART_SetConfig+0x288>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d127      	bne.n	8005a50 <UART_SetConfig+0xf4>
 8005a00:	2003      	movs	r0, #3
 8005a02:	f7ff face 	bl	8004fa2 <LL_RCC_GetUSARTClockSource>
 8005a06:	4603      	mov	r3, r0
 8005a08:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8005a0c:	2b03      	cmp	r3, #3
 8005a0e:	d81b      	bhi.n	8005a48 <UART_SetConfig+0xec>
 8005a10:	a201      	add	r2, pc, #4	; (adr r2, 8005a18 <UART_SetConfig+0xbc>)
 8005a12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a16:	bf00      	nop
 8005a18:	08005a29 	.word	0x08005a29
 8005a1c:	08005a39 	.word	0x08005a39
 8005a20:	08005a31 	.word	0x08005a31
 8005a24:	08005a41 	.word	0x08005a41
 8005a28:	2301      	movs	r3, #1
 8005a2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a2e:	e080      	b.n	8005b32 <UART_SetConfig+0x1d6>
 8005a30:	2302      	movs	r3, #2
 8005a32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a36:	e07c      	b.n	8005b32 <UART_SetConfig+0x1d6>
 8005a38:	2304      	movs	r3, #4
 8005a3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a3e:	e078      	b.n	8005b32 <UART_SetConfig+0x1d6>
 8005a40:	2308      	movs	r3, #8
 8005a42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a46:	e074      	b.n	8005b32 <UART_SetConfig+0x1d6>
 8005a48:	2310      	movs	r3, #16
 8005a4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005a4e:	e070      	b.n	8005b32 <UART_SetConfig+0x1d6>
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a64      	ldr	r2, [pc, #400]	; (8005be8 <UART_SetConfig+0x28c>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d138      	bne.n	8005acc <UART_SetConfig+0x170>
 8005a5a:	200c      	movs	r0, #12
 8005a5c:	f7ff faa1 	bl	8004fa2 <LL_RCC_GetUSARTClockSource>
 8005a60:	4603      	mov	r3, r0
 8005a62:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8005a66:	2b0c      	cmp	r3, #12
 8005a68:	d82c      	bhi.n	8005ac4 <UART_SetConfig+0x168>
 8005a6a:	a201      	add	r2, pc, #4	; (adr r2, 8005a70 <UART_SetConfig+0x114>)
 8005a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a70:	08005aa5 	.word	0x08005aa5
 8005a74:	08005ac5 	.word	0x08005ac5
 8005a78:	08005ac5 	.word	0x08005ac5
 8005a7c:	08005ac5 	.word	0x08005ac5
 8005a80:	08005ab5 	.word	0x08005ab5
 8005a84:	08005ac5 	.word	0x08005ac5
 8005a88:	08005ac5 	.word	0x08005ac5
 8005a8c:	08005ac5 	.word	0x08005ac5
 8005a90:	08005aad 	.word	0x08005aad
 8005a94:	08005ac5 	.word	0x08005ac5
 8005a98:	08005ac5 	.word	0x08005ac5
 8005a9c:	08005ac5 	.word	0x08005ac5
 8005aa0:	08005abd 	.word	0x08005abd
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005aaa:	e042      	b.n	8005b32 <UART_SetConfig+0x1d6>
 8005aac:	2302      	movs	r3, #2
 8005aae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ab2:	e03e      	b.n	8005b32 <UART_SetConfig+0x1d6>
 8005ab4:	2304      	movs	r3, #4
 8005ab6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005aba:	e03a      	b.n	8005b32 <UART_SetConfig+0x1d6>
 8005abc:	2308      	movs	r3, #8
 8005abe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ac2:	e036      	b.n	8005b32 <UART_SetConfig+0x1d6>
 8005ac4:	2310      	movs	r3, #16
 8005ac6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005aca:	e032      	b.n	8005b32 <UART_SetConfig+0x1d6>
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a43      	ldr	r2, [pc, #268]	; (8005be0 <UART_SetConfig+0x284>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d12a      	bne.n	8005b2c <UART_SetConfig+0x1d0>
 8005ad6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8005ada:	f7ff fa74 	bl	8004fc6 <LL_RCC_GetLPUARTClockSource>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ae4:	d01a      	beq.n	8005b1c <UART_SetConfig+0x1c0>
 8005ae6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005aea:	d81b      	bhi.n	8005b24 <UART_SetConfig+0x1c8>
 8005aec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005af0:	d00c      	beq.n	8005b0c <UART_SetConfig+0x1b0>
 8005af2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005af6:	d815      	bhi.n	8005b24 <UART_SetConfig+0x1c8>
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d003      	beq.n	8005b04 <UART_SetConfig+0x1a8>
 8005afc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b00:	d008      	beq.n	8005b14 <UART_SetConfig+0x1b8>
 8005b02:	e00f      	b.n	8005b24 <UART_SetConfig+0x1c8>
 8005b04:	2300      	movs	r3, #0
 8005b06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b0a:	e012      	b.n	8005b32 <UART_SetConfig+0x1d6>
 8005b0c:	2302      	movs	r3, #2
 8005b0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b12:	e00e      	b.n	8005b32 <UART_SetConfig+0x1d6>
 8005b14:	2304      	movs	r3, #4
 8005b16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b1a:	e00a      	b.n	8005b32 <UART_SetConfig+0x1d6>
 8005b1c:	2308      	movs	r3, #8
 8005b1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b22:	e006      	b.n	8005b32 <UART_SetConfig+0x1d6>
 8005b24:	2310      	movs	r3, #16
 8005b26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005b2a:	e002      	b.n	8005b32 <UART_SetConfig+0x1d6>
 8005b2c:	2310      	movs	r3, #16
 8005b2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a2a      	ldr	r2, [pc, #168]	; (8005be0 <UART_SetConfig+0x284>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	f040 80a4 	bne.w	8005c86 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005b3e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b42:	2b08      	cmp	r3, #8
 8005b44:	d823      	bhi.n	8005b8e <UART_SetConfig+0x232>
 8005b46:	a201      	add	r2, pc, #4	; (adr r2, 8005b4c <UART_SetConfig+0x1f0>)
 8005b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b4c:	08005b71 	.word	0x08005b71
 8005b50:	08005b8f 	.word	0x08005b8f
 8005b54:	08005b79 	.word	0x08005b79
 8005b58:	08005b8f 	.word	0x08005b8f
 8005b5c:	08005b7f 	.word	0x08005b7f
 8005b60:	08005b8f 	.word	0x08005b8f
 8005b64:	08005b8f 	.word	0x08005b8f
 8005b68:	08005b8f 	.word	0x08005b8f
 8005b6c:	08005b87 	.word	0x08005b87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b70:	f7fd ff8c 	bl	8003a8c <HAL_RCC_GetPCLK1Freq>
 8005b74:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b76:	e010      	b.n	8005b9a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b78:	4b1c      	ldr	r3, [pc, #112]	; (8005bec <UART_SetConfig+0x290>)
 8005b7a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b7c:	e00d      	b.n	8005b9a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b7e:	f7fd fed1 	bl	8003924 <HAL_RCC_GetSysClockFreq>
 8005b82:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005b84:	e009      	b.n	8005b9a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005b8c:	e005      	b.n	8005b9a <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005b98:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	f000 8137 	beq.w	8005e10 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba6:	4a12      	ldr	r2, [pc, #72]	; (8005bf0 <UART_SetConfig+0x294>)
 8005ba8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bac:	461a      	mov	r2, r3
 8005bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005bb4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	685a      	ldr	r2, [r3, #4]
 8005bba:	4613      	mov	r3, r2
 8005bbc:	005b      	lsls	r3, r3, #1
 8005bbe:	4413      	add	r3, r2
 8005bc0:	69ba      	ldr	r2, [r7, #24]
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d305      	bcc.n	8005bd2 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005bcc:	69ba      	ldr	r2, [r7, #24]
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d910      	bls.n	8005bf4 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005bd8:	e11a      	b.n	8005e10 <UART_SetConfig+0x4b4>
 8005bda:	bf00      	nop
 8005bdc:	cfff69f3 	.word	0xcfff69f3
 8005be0:	40008000 	.word	0x40008000
 8005be4:	40013800 	.word	0x40013800
 8005be8:	40004400 	.word	0x40004400
 8005bec:	00f42400 	.word	0x00f42400
 8005bf0:	0800d1c0 	.word	0x0800d1c0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	60bb      	str	r3, [r7, #8]
 8005bfa:	60fa      	str	r2, [r7, #12]
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c00:	4a8e      	ldr	r2, [pc, #568]	; (8005e3c <UART_SetConfig+0x4e0>)
 8005c02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	2200      	movs	r2, #0
 8005c0a:	603b      	str	r3, [r7, #0]
 8005c0c:	607a      	str	r2, [r7, #4]
 8005c0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c12:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005c16:	f7fa ff9f 	bl	8000b58 <__aeabi_uldivmod>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	4610      	mov	r0, r2
 8005c20:	4619      	mov	r1, r3
 8005c22:	f04f 0200 	mov.w	r2, #0
 8005c26:	f04f 0300 	mov.w	r3, #0
 8005c2a:	020b      	lsls	r3, r1, #8
 8005c2c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005c30:	0202      	lsls	r2, r0, #8
 8005c32:	6979      	ldr	r1, [r7, #20]
 8005c34:	6849      	ldr	r1, [r1, #4]
 8005c36:	0849      	lsrs	r1, r1, #1
 8005c38:	2000      	movs	r0, #0
 8005c3a:	460c      	mov	r4, r1
 8005c3c:	4605      	mov	r5, r0
 8005c3e:	eb12 0804 	adds.w	r8, r2, r4
 8005c42:	eb43 0905 	adc.w	r9, r3, r5
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	469a      	mov	sl, r3
 8005c4e:	4693      	mov	fp, r2
 8005c50:	4652      	mov	r2, sl
 8005c52:	465b      	mov	r3, fp
 8005c54:	4640      	mov	r0, r8
 8005c56:	4649      	mov	r1, r9
 8005c58:	f7fa ff7e 	bl	8000b58 <__aeabi_uldivmod>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	460b      	mov	r3, r1
 8005c60:	4613      	mov	r3, r2
 8005c62:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c64:	6a3b      	ldr	r3, [r7, #32]
 8005c66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c6a:	d308      	bcc.n	8005c7e <UART_SetConfig+0x322>
 8005c6c:	6a3b      	ldr	r3, [r7, #32]
 8005c6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c72:	d204      	bcs.n	8005c7e <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	6a3a      	ldr	r2, [r7, #32]
 8005c7a:	60da      	str	r2, [r3, #12]
 8005c7c:	e0c8      	b.n	8005e10 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005c84:	e0c4      	b.n	8005e10 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	69db      	ldr	r3, [r3, #28]
 8005c8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c8e:	d167      	bne.n	8005d60 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8005c90:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005c94:	2b08      	cmp	r3, #8
 8005c96:	d828      	bhi.n	8005cea <UART_SetConfig+0x38e>
 8005c98:	a201      	add	r2, pc, #4	; (adr r2, 8005ca0 <UART_SetConfig+0x344>)
 8005c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c9e:	bf00      	nop
 8005ca0:	08005cc5 	.word	0x08005cc5
 8005ca4:	08005ccd 	.word	0x08005ccd
 8005ca8:	08005cd5 	.word	0x08005cd5
 8005cac:	08005ceb 	.word	0x08005ceb
 8005cb0:	08005cdb 	.word	0x08005cdb
 8005cb4:	08005ceb 	.word	0x08005ceb
 8005cb8:	08005ceb 	.word	0x08005ceb
 8005cbc:	08005ceb 	.word	0x08005ceb
 8005cc0:	08005ce3 	.word	0x08005ce3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cc4:	f7fd fee2 	bl	8003a8c <HAL_RCC_GetPCLK1Freq>
 8005cc8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005cca:	e014      	b.n	8005cf6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ccc:	f7fd fef0 	bl	8003ab0 <HAL_RCC_GetPCLK2Freq>
 8005cd0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005cd2:	e010      	b.n	8005cf6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cd4:	4b5a      	ldr	r3, [pc, #360]	; (8005e40 <UART_SetConfig+0x4e4>)
 8005cd6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005cd8:	e00d      	b.n	8005cf6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cda:	f7fd fe23 	bl	8003924 <HAL_RCC_GetSysClockFreq>
 8005cde:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ce0:	e009      	b.n	8005cf6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ce2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ce6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005ce8:	e005      	b.n	8005cf6 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8005cea:	2300      	movs	r3, #0
 8005cec:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005cf4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	f000 8089 	beq.w	8005e10 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d02:	4a4e      	ldr	r2, [pc, #312]	; (8005e3c <UART_SetConfig+0x4e0>)
 8005d04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d08:	461a      	mov	r2, r3
 8005d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d10:	005a      	lsls	r2, r3, #1
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	085b      	lsrs	r3, r3, #1
 8005d18:	441a      	add	r2, r3
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d22:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d24:	6a3b      	ldr	r3, [r7, #32]
 8005d26:	2b0f      	cmp	r3, #15
 8005d28:	d916      	bls.n	8005d58 <UART_SetConfig+0x3fc>
 8005d2a:	6a3b      	ldr	r3, [r7, #32]
 8005d2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d30:	d212      	bcs.n	8005d58 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d32:	6a3b      	ldr	r3, [r7, #32]
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	f023 030f 	bic.w	r3, r3, #15
 8005d3a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d3c:	6a3b      	ldr	r3, [r7, #32]
 8005d3e:	085b      	lsrs	r3, r3, #1
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	f003 0307 	and.w	r3, r3, #7
 8005d46:	b29a      	uxth	r2, r3
 8005d48:	8bfb      	ldrh	r3, [r7, #30]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	8bfa      	ldrh	r2, [r7, #30]
 8005d54:	60da      	str	r2, [r3, #12]
 8005d56:	e05b      	b.n	8005e10 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005d5e:	e057      	b.n	8005e10 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d60:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005d64:	2b08      	cmp	r3, #8
 8005d66:	d828      	bhi.n	8005dba <UART_SetConfig+0x45e>
 8005d68:	a201      	add	r2, pc, #4	; (adr r2, 8005d70 <UART_SetConfig+0x414>)
 8005d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d6e:	bf00      	nop
 8005d70:	08005d95 	.word	0x08005d95
 8005d74:	08005d9d 	.word	0x08005d9d
 8005d78:	08005da5 	.word	0x08005da5
 8005d7c:	08005dbb 	.word	0x08005dbb
 8005d80:	08005dab 	.word	0x08005dab
 8005d84:	08005dbb 	.word	0x08005dbb
 8005d88:	08005dbb 	.word	0x08005dbb
 8005d8c:	08005dbb 	.word	0x08005dbb
 8005d90:	08005db3 	.word	0x08005db3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d94:	f7fd fe7a 	bl	8003a8c <HAL_RCC_GetPCLK1Freq>
 8005d98:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005d9a:	e014      	b.n	8005dc6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d9c:	f7fd fe88 	bl	8003ab0 <HAL_RCC_GetPCLK2Freq>
 8005da0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005da2:	e010      	b.n	8005dc6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005da4:	4b26      	ldr	r3, [pc, #152]	; (8005e40 <UART_SetConfig+0x4e4>)
 8005da6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005da8:	e00d      	b.n	8005dc6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005daa:	f7fd fdbb 	bl	8003924 <HAL_RCC_GetSysClockFreq>
 8005dae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005db0:	e009      	b.n	8005dc6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005db2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005db6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005db8:	e005      	b.n	8005dc6 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005dc4:	bf00      	nop
    }

    if (pclk != 0U)
 8005dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d021      	beq.n	8005e10 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd0:	4a1a      	ldr	r2, [pc, #104]	; (8005e3c <UART_SetConfig+0x4e0>)
 8005dd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005dd6:	461a      	mov	r2, r3
 8005dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dda:	fbb3 f2f2 	udiv	r2, r3, r2
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	085b      	lsrs	r3, r3, #1
 8005de4:	441a      	add	r2, r3
 8005de6:	697b      	ldr	r3, [r7, #20]
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005df0:	6a3b      	ldr	r3, [r7, #32]
 8005df2:	2b0f      	cmp	r3, #15
 8005df4:	d909      	bls.n	8005e0a <UART_SetConfig+0x4ae>
 8005df6:	6a3b      	ldr	r3, [r7, #32]
 8005df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dfc:	d205      	bcs.n	8005e0a <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005dfe:	6a3b      	ldr	r3, [r7, #32]
 8005e00:	b29a      	uxth	r2, r3
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	60da      	str	r2, [r3, #12]
 8005e08:	e002      	b.n	8005e10 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	2200      	movs	r2, #0
 8005e24:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005e2c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3730      	adds	r7, #48	; 0x30
 8005e34:	46bd      	mov	sp, r7
 8005e36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e3a:	bf00      	nop
 8005e3c:	0800d1c0 	.word	0x0800d1c0
 8005e40:	00f42400 	.word	0x00f42400

08005e44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e50:	f003 0301 	and.w	r3, r3, #1
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d00a      	beq.n	8005e6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	685b      	ldr	r3, [r3, #4]
 8005e5e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	430a      	orrs	r2, r1
 8005e6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e72:	f003 0302 	and.w	r3, r3, #2
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d00a      	beq.n	8005e90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	430a      	orrs	r2, r1
 8005e8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e94:	f003 0304 	and.w	r3, r3, #4
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d00a      	beq.n	8005eb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	430a      	orrs	r2, r1
 8005eb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb6:	f003 0308 	and.w	r3, r3, #8
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d00a      	beq.n	8005ed4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	430a      	orrs	r2, r1
 8005ed2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ed8:	f003 0310 	and.w	r3, r3, #16
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d00a      	beq.n	8005ef6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	430a      	orrs	r2, r1
 8005ef4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005efa:	f003 0320 	and.w	r3, r3, #32
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00a      	beq.n	8005f18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	430a      	orrs	r2, r1
 8005f16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d01a      	beq.n	8005f5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	430a      	orrs	r2, r1
 8005f38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f42:	d10a      	bne.n	8005f5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	430a      	orrs	r2, r1
 8005f58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d00a      	beq.n	8005f7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	430a      	orrs	r2, r1
 8005f7a:	605a      	str	r2, [r3, #4]
  }
}
 8005f7c:	bf00      	nop
 8005f7e:	370c      	adds	r7, #12
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bc80      	pop	{r7}
 8005f84:	4770      	bx	lr

08005f86 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f86:	b580      	push	{r7, lr}
 8005f88:	b086      	sub	sp, #24
 8005f8a:	af02      	add	r7, sp, #8
 8005f8c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f96:	f7fb ff03 	bl	8001da0 <HAL_GetTick>
 8005f9a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 0308 	and.w	r3, r3, #8
 8005fa6:	2b08      	cmp	r3, #8
 8005fa8:	d10e      	bne.n	8005fc8 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005faa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005fae:	9300      	str	r3, [sp, #0]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 f832 	bl	8006022 <UART_WaitOnFlagUntilTimeout>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d001      	beq.n	8005fc8 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fc4:	2303      	movs	r3, #3
 8005fc6:	e028      	b.n	800601a <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f003 0304 	and.w	r3, r3, #4
 8005fd2:	2b04      	cmp	r3, #4
 8005fd4:	d10e      	bne.n	8005ff4 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fd6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005fda:	9300      	str	r3, [sp, #0]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f000 f81c 	bl	8006022 <UART_WaitOnFlagUntilTimeout>
 8005fea:	4603      	mov	r3, r0
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d001      	beq.n	8005ff4 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ff0:	2303      	movs	r3, #3
 8005ff2:	e012      	b.n	800601a <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2220      	movs	r2, #32
 8005ff8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2220      	movs	r2, #32
 8006000:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2200      	movs	r2, #0
 8006008:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006018:	2300      	movs	r3, #0
}
 800601a:	4618      	mov	r0, r3
 800601c:	3710      	adds	r7, #16
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}

08006022 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006022:	b580      	push	{r7, lr}
 8006024:	b09c      	sub	sp, #112	; 0x70
 8006026:	af00      	add	r7, sp, #0
 8006028:	60f8      	str	r0, [r7, #12]
 800602a:	60b9      	str	r1, [r7, #8]
 800602c:	603b      	str	r3, [r7, #0]
 800602e:	4613      	mov	r3, r2
 8006030:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006032:	e0a9      	b.n	8006188 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006034:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800603a:	f000 80a5 	beq.w	8006188 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800603e:	f7fb feaf 	bl	8001da0 <HAL_GetTick>
 8006042:	4602      	mov	r2, r0
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	1ad3      	subs	r3, r2, r3
 8006048:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800604a:	429a      	cmp	r2, r3
 800604c:	d302      	bcc.n	8006054 <UART_WaitOnFlagUntilTimeout+0x32>
 800604e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006050:	2b00      	cmp	r3, #0
 8006052:	d140      	bne.n	80060d6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800605a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800605c:	e853 3f00 	ldrex	r3, [r3]
 8006060:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006062:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006064:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006068:	667b      	str	r3, [r7, #100]	; 0x64
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	461a      	mov	r2, r3
 8006070:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006072:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006074:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006076:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006078:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800607a:	e841 2300 	strex	r3, r2, [r1]
 800607e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006080:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006082:	2b00      	cmp	r3, #0
 8006084:	d1e6      	bne.n	8006054 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	3308      	adds	r3, #8
 800608c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800608e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006090:	e853 3f00 	ldrex	r3, [r3]
 8006094:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006098:	f023 0301 	bic.w	r3, r3, #1
 800609c:	663b      	str	r3, [r7, #96]	; 0x60
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	3308      	adds	r3, #8
 80060a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80060a6:	64ba      	str	r2, [r7, #72]	; 0x48
 80060a8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80060ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060ae:	e841 2300 	strex	r3, r2, [r1]
 80060b2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80060b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d1e5      	bne.n	8006086 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	2220      	movs	r2, #32
 80060be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2220      	movs	r2, #32
 80060c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 80060d2:	2303      	movs	r3, #3
 80060d4:	e069      	b.n	80061aa <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f003 0304 	and.w	r3, r3, #4
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d051      	beq.n	8006188 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	69db      	ldr	r3, [r3, #28]
 80060ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060f2:	d149      	bne.n	8006188 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060fc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006106:	e853 3f00 	ldrex	r3, [r3]
 800610a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800610c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006112:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	461a      	mov	r2, r3
 800611a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800611c:	637b      	str	r3, [r7, #52]	; 0x34
 800611e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006120:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006122:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006124:	e841 2300 	strex	r3, r2, [r1]
 8006128:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800612a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800612c:	2b00      	cmp	r3, #0
 800612e:	d1e6      	bne.n	80060fe <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	3308      	adds	r3, #8
 8006136:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	e853 3f00 	ldrex	r3, [r3]
 800613e:	613b      	str	r3, [r7, #16]
   return(result);
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	f023 0301 	bic.w	r3, r3, #1
 8006146:	66bb      	str	r3, [r7, #104]	; 0x68
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	3308      	adds	r3, #8
 800614e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006150:	623a      	str	r2, [r7, #32]
 8006152:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006154:	69f9      	ldr	r1, [r7, #28]
 8006156:	6a3a      	ldr	r2, [r7, #32]
 8006158:	e841 2300 	strex	r3, r2, [r1]
 800615c:	61bb      	str	r3, [r7, #24]
   return(result);
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d1e5      	bne.n	8006130 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2220      	movs	r2, #32
 8006168:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	2220      	movs	r2, #32
 8006170:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2220      	movs	r2, #32
 8006178:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2200      	movs	r2, #0
 8006180:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006184:	2303      	movs	r3, #3
 8006186:	e010      	b.n	80061aa <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	69da      	ldr	r2, [r3, #28]
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	4013      	ands	r3, r2
 8006192:	68ba      	ldr	r2, [r7, #8]
 8006194:	429a      	cmp	r2, r3
 8006196:	bf0c      	ite	eq
 8006198:	2301      	moveq	r3, #1
 800619a:	2300      	movne	r3, #0
 800619c:	b2db      	uxtb	r3, r3
 800619e:	461a      	mov	r2, r3
 80061a0:	79fb      	ldrb	r3, [r7, #7]
 80061a2:	429a      	cmp	r2, r3
 80061a4:	f43f af46 	beq.w	8006034 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3770      	adds	r7, #112	; 0x70
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
	...

080061b4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b0a3      	sub	sp, #140	; 0x8c
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	4613      	mov	r3, r2
 80061c0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	68ba      	ldr	r2, [r7, #8]
 80061c6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	88fa      	ldrh	r2, [r7, #6]
 80061cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	88fa      	ldrh	r2, [r7, #6]
 80061d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2200      	movs	r2, #0
 80061dc:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061e6:	d10e      	bne.n	8006206 <UART_Start_Receive_IT+0x52>
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	691b      	ldr	r3, [r3, #16]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d105      	bne.n	80061fc <UART_Start_Receive_IT+0x48>
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80061f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80061fa:	e02d      	b.n	8006258 <UART_Start_Receive_IT+0xa4>
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	22ff      	movs	r2, #255	; 0xff
 8006200:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006204:	e028      	b.n	8006258 <UART_Start_Receive_IT+0xa4>
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d10d      	bne.n	800622a <UART_Start_Receive_IT+0x76>
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	691b      	ldr	r3, [r3, #16]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d104      	bne.n	8006220 <UART_Start_Receive_IT+0x6c>
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	22ff      	movs	r2, #255	; 0xff
 800621a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800621e:	e01b      	b.n	8006258 <UART_Start_Receive_IT+0xa4>
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	227f      	movs	r2, #127	; 0x7f
 8006224:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006228:	e016      	b.n	8006258 <UART_Start_Receive_IT+0xa4>
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006232:	d10d      	bne.n	8006250 <UART_Start_Receive_IT+0x9c>
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d104      	bne.n	8006246 <UART_Start_Receive_IT+0x92>
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	227f      	movs	r2, #127	; 0x7f
 8006240:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006244:	e008      	b.n	8006258 <UART_Start_Receive_IT+0xa4>
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	223f      	movs	r2, #63	; 0x3f
 800624a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800624e:	e003      	b.n	8006258 <UART_Start_Receive_IT+0xa4>
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2200      	movs	r2, #0
 8006254:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2200      	movs	r2, #0
 800625c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2222      	movs	r2, #34	; 0x22
 8006264:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	3308      	adds	r3, #8
 800626e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006270:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006272:	e853 3f00 	ldrex	r3, [r3]
 8006276:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006278:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800627a:	f043 0301 	orr.w	r3, r3, #1
 800627e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	3308      	adds	r3, #8
 8006288:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800628c:	673a      	str	r2, [r7, #112]	; 0x70
 800628e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006290:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8006292:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006294:	e841 2300 	strex	r3, r2, [r1]
 8006298:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800629a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800629c:	2b00      	cmp	r3, #0
 800629e:	d1e3      	bne.n	8006268 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062a8:	d14f      	bne.n	800634a <UART_Start_Receive_IT+0x196>
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80062b0:	88fa      	ldrh	r2, [r7, #6]
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d349      	bcc.n	800634a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062be:	d107      	bne.n	80062d0 <UART_Start_Receive_IT+0x11c>
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d103      	bne.n	80062d0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	4a46      	ldr	r2, [pc, #280]	; (80063e4 <UART_Start_Receive_IT+0x230>)
 80062cc:	675a      	str	r2, [r3, #116]	; 0x74
 80062ce:	e002      	b.n	80062d6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	4a45      	ldr	r2, [pc, #276]	; (80063e8 <UART_Start_Receive_IT+0x234>)
 80062d4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d01a      	beq.n	8006314 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062e6:	e853 3f00 	ldrex	r3, [r3]
 80062ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80062ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	461a      	mov	r2, r3
 80062fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006300:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006302:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006304:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006306:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006308:	e841 2300 	strex	r3, r2, [r1]
 800630c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800630e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006310:	2b00      	cmp	r3, #0
 8006312:	d1e4      	bne.n	80062de <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	3308      	adds	r3, #8
 800631a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800631c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800631e:	e853 3f00 	ldrex	r3, [r3]
 8006322:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006326:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800632a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	3308      	adds	r3, #8
 8006332:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006334:	64ba      	str	r2, [r7, #72]	; 0x48
 8006336:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006338:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800633a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800633c:	e841 2300 	strex	r3, r2, [r1]
 8006340:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006342:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006344:	2b00      	cmp	r3, #0
 8006346:	d1e5      	bne.n	8006314 <UART_Start_Receive_IT+0x160>
 8006348:	e046      	b.n	80063d8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006352:	d107      	bne.n	8006364 <UART_Start_Receive_IT+0x1b0>
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d103      	bne.n	8006364 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	4a23      	ldr	r2, [pc, #140]	; (80063ec <UART_Start_Receive_IT+0x238>)
 8006360:	675a      	str	r2, [r3, #116]	; 0x74
 8006362:	e002      	b.n	800636a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	4a22      	ldr	r2, [pc, #136]	; (80063f0 <UART_Start_Receive_IT+0x23c>)
 8006368:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d019      	beq.n	80063a6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637a:	e853 3f00 	ldrex	r3, [r3]
 800637e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006382:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006386:	677b      	str	r3, [r7, #116]	; 0x74
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	461a      	mov	r2, r3
 800638e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006390:	637b      	str	r3, [r7, #52]	; 0x34
 8006392:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006394:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006396:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006398:	e841 2300 	strex	r3, r2, [r1]
 800639c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800639e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d1e6      	bne.n	8006372 <UART_Start_Receive_IT+0x1be>
 80063a4:	e018      	b.n	80063d8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	e853 3f00 	ldrex	r3, [r3]
 80063b2:	613b      	str	r3, [r7, #16]
   return(result);
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	f043 0320 	orr.w	r3, r3, #32
 80063ba:	67bb      	str	r3, [r7, #120]	; 0x78
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	461a      	mov	r2, r3
 80063c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063c4:	623b      	str	r3, [r7, #32]
 80063c6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063c8:	69f9      	ldr	r1, [r7, #28]
 80063ca:	6a3a      	ldr	r2, [r7, #32]
 80063cc:	e841 2300 	strex	r3, r2, [r1]
 80063d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d1e6      	bne.n	80063a6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	378c      	adds	r7, #140	; 0x8c
 80063de:	46bd      	mov	sp, r7
 80063e0:	bc80      	pop	{r7}
 80063e2:	4770      	bx	lr
 80063e4:	08006c11 	.word	0x08006c11
 80063e8:	080068b1 	.word	0x080068b1
 80063ec:	080066f9 	.word	0x080066f9
 80063f0:	08006541 	.word	0x08006541

080063f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b095      	sub	sp, #84	; 0x54
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006404:	e853 3f00 	ldrex	r3, [r3]
 8006408:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800640a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800640c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006410:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	461a      	mov	r2, r3
 8006418:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800641a:	643b      	str	r3, [r7, #64]	; 0x40
 800641c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800641e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006420:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006422:	e841 2300 	strex	r3, r2, [r1]
 8006426:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800642a:	2b00      	cmp	r3, #0
 800642c:	d1e6      	bne.n	80063fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	3308      	adds	r3, #8
 8006434:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006436:	6a3b      	ldr	r3, [r7, #32]
 8006438:	e853 3f00 	ldrex	r3, [r3]
 800643c:	61fb      	str	r3, [r7, #28]
   return(result);
 800643e:	69fb      	ldr	r3, [r7, #28]
 8006440:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006444:	f023 0301 	bic.w	r3, r3, #1
 8006448:	64bb      	str	r3, [r7, #72]	; 0x48
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	3308      	adds	r3, #8
 8006450:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006452:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006454:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006456:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006458:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800645a:	e841 2300 	strex	r3, r2, [r1]
 800645e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006462:	2b00      	cmp	r3, #0
 8006464:	d1e3      	bne.n	800642e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800646a:	2b01      	cmp	r3, #1
 800646c:	d118      	bne.n	80064a0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	e853 3f00 	ldrex	r3, [r3]
 800647a:	60bb      	str	r3, [r7, #8]
   return(result);
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	f023 0310 	bic.w	r3, r3, #16
 8006482:	647b      	str	r3, [r7, #68]	; 0x44
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	461a      	mov	r2, r3
 800648a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800648c:	61bb      	str	r3, [r7, #24]
 800648e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006490:	6979      	ldr	r1, [r7, #20]
 8006492:	69ba      	ldr	r2, [r7, #24]
 8006494:	e841 2300 	strex	r3, r2, [r1]
 8006498:	613b      	str	r3, [r7, #16]
   return(result);
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d1e6      	bne.n	800646e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2220      	movs	r2, #32
 80064a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	675a      	str	r2, [r3, #116]	; 0x74
}
 80064b4:	bf00      	nop
 80064b6:	3754      	adds	r7, #84	; 0x54
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bc80      	pop	{r7}
 80064bc:	4770      	bx	lr

080064be <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80064be:	b580      	push	{r7, lr}
 80064c0:	b084      	sub	sp, #16
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2200      	movs	r2, #0
 80064d8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80064dc:	68f8      	ldr	r0, [r7, #12]
 80064de:	f7ff fa28 	bl	8005932 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064e2:	bf00      	nop
 80064e4:	3710      	adds	r7, #16
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}

080064ea <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80064ea:	b580      	push	{r7, lr}
 80064ec:	b088      	sub	sp, #32
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	e853 3f00 	ldrex	r3, [r3]
 80064fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006506:	61fb      	str	r3, [r7, #28]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	461a      	mov	r2, r3
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	61bb      	str	r3, [r7, #24]
 8006512:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006514:	6979      	ldr	r1, [r7, #20]
 8006516:	69ba      	ldr	r2, [r7, #24]
 8006518:	e841 2300 	strex	r3, r2, [r1]
 800651c:	613b      	str	r3, [r7, #16]
   return(result);
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d1e6      	bne.n	80064f2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2220      	movs	r2, #32
 8006528:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f7ff f9f4 	bl	8005920 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006538:	bf00      	nop
 800653a:	3720      	adds	r7, #32
 800653c:	46bd      	mov	sp, r7
 800653e:	bd80      	pop	{r7, pc}

08006540 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b09c      	sub	sp, #112	; 0x70
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800654e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006558:	2b22      	cmp	r3, #34	; 0x22
 800655a:	f040 80be 	bne.w	80066da <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006564:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006568:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800656c:	b2d9      	uxtb	r1, r3
 800656e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006572:	b2da      	uxtb	r2, r3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006578:	400a      	ands	r2, r1
 800657a:	b2d2      	uxtb	r2, r2
 800657c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006582:	1c5a      	adds	r2, r3, #1
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800658e:	b29b      	uxth	r3, r3
 8006590:	3b01      	subs	r3, #1
 8006592:	b29a      	uxth	r2, r3
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	f040 80a1 	bne.w	80066ea <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065b0:	e853 3f00 	ldrex	r3, [r3]
 80065b4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80065b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	461a      	mov	r2, r3
 80065c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80065c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80065c8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80065cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80065ce:	e841 2300 	strex	r3, r2, [r1]
 80065d2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80065d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d1e6      	bne.n	80065a8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	3308      	adds	r3, #8
 80065e0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e4:	e853 3f00 	ldrex	r3, [r3]
 80065e8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80065ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ec:	f023 0301 	bic.w	r3, r3, #1
 80065f0:	667b      	str	r3, [r7, #100]	; 0x64
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	3308      	adds	r3, #8
 80065f8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80065fa:	647a      	str	r2, [r7, #68]	; 0x44
 80065fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006600:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006602:	e841 2300 	strex	r3, r2, [r1]
 8006606:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800660a:	2b00      	cmp	r3, #0
 800660c:	d1e5      	bne.n	80065da <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2220      	movs	r2, #32
 8006612:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a33      	ldr	r2, [pc, #204]	; (80066f4 <UART_RxISR_8BIT+0x1b4>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d01f      	beq.n	800666c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006636:	2b00      	cmp	r3, #0
 8006638:	d018      	beq.n	800666c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006642:	e853 3f00 	ldrex	r3, [r3]
 8006646:	623b      	str	r3, [r7, #32]
   return(result);
 8006648:	6a3b      	ldr	r3, [r7, #32]
 800664a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800664e:	663b      	str	r3, [r7, #96]	; 0x60
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	461a      	mov	r2, r3
 8006656:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006658:	633b      	str	r3, [r7, #48]	; 0x30
 800665a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800665c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800665e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006660:	e841 2300 	strex	r3, r2, [r1]
 8006664:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006668:	2b00      	cmp	r3, #0
 800666a:	d1e6      	bne.n	800663a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006670:	2b01      	cmp	r3, #1
 8006672:	d12e      	bne.n	80066d2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2200      	movs	r2, #0
 8006678:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	e853 3f00 	ldrex	r3, [r3]
 8006686:	60fb      	str	r3, [r7, #12]
   return(result);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f023 0310 	bic.w	r3, r3, #16
 800668e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	461a      	mov	r2, r3
 8006696:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006698:	61fb      	str	r3, [r7, #28]
 800669a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800669c:	69b9      	ldr	r1, [r7, #24]
 800669e:	69fa      	ldr	r2, [r7, #28]
 80066a0:	e841 2300 	strex	r3, r2, [r1]
 80066a4:	617b      	str	r3, [r7, #20]
   return(result);
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d1e6      	bne.n	800667a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	69db      	ldr	r3, [r3, #28]
 80066b2:	f003 0310 	and.w	r3, r3, #16
 80066b6:	2b10      	cmp	r3, #16
 80066b8:	d103      	bne.n	80066c2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	2210      	movs	r2, #16
 80066c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80066c8:	4619      	mov	r1, r3
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f7ff f93a 	bl	8005944 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80066d0:	e00b      	b.n	80066ea <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 ff3a 	bl	800754c <HAL_UART_RxCpltCallback>
}
 80066d8:	e007      	b.n	80066ea <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	699a      	ldr	r2, [r3, #24]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f042 0208 	orr.w	r2, r2, #8
 80066e8:	619a      	str	r2, [r3, #24]
}
 80066ea:	bf00      	nop
 80066ec:	3770      	adds	r7, #112	; 0x70
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}
 80066f2:	bf00      	nop
 80066f4:	40008000 	.word	0x40008000

080066f8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b09c      	sub	sp, #112	; 0x70
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006706:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006710:	2b22      	cmp	r3, #34	; 0x22
 8006712:	f040 80be 	bne.w	8006892 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006724:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006726:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800672a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800672e:	4013      	ands	r3, r2
 8006730:	b29a      	uxth	r2, r3
 8006732:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006734:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800673a:	1c9a      	adds	r2, r3, #2
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006746:	b29b      	uxth	r3, r3
 8006748:	3b01      	subs	r3, #1
 800674a:	b29a      	uxth	r2, r3
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006758:	b29b      	uxth	r3, r3
 800675a:	2b00      	cmp	r3, #0
 800675c:	f040 80a1 	bne.w	80068a2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006766:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006768:	e853 3f00 	ldrex	r3, [r3]
 800676c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800676e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006770:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006774:	667b      	str	r3, [r7, #100]	; 0x64
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	461a      	mov	r2, r3
 800677c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800677e:	657b      	str	r3, [r7, #84]	; 0x54
 8006780:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006782:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006784:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006786:	e841 2300 	strex	r3, r2, [r1]
 800678a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800678c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800678e:	2b00      	cmp	r3, #0
 8006790:	d1e6      	bne.n	8006760 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	3308      	adds	r3, #8
 8006798:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800679a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800679c:	e853 3f00 	ldrex	r3, [r3]
 80067a0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80067a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a4:	f023 0301 	bic.w	r3, r3, #1
 80067a8:	663b      	str	r3, [r7, #96]	; 0x60
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	3308      	adds	r3, #8
 80067b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80067b2:	643a      	str	r2, [r7, #64]	; 0x40
 80067b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80067b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80067ba:	e841 2300 	strex	r3, r2, [r1]
 80067be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80067c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d1e5      	bne.n	8006792 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2220      	movs	r2, #32
 80067ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a33      	ldr	r2, [pc, #204]	; (80068ac <UART_RxISR_16BIT+0x1b4>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d01f      	beq.n	8006824 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d018      	beq.n	8006824 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f8:	6a3b      	ldr	r3, [r7, #32]
 80067fa:	e853 3f00 	ldrex	r3, [r3]
 80067fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8006800:	69fb      	ldr	r3, [r7, #28]
 8006802:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006806:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	461a      	mov	r2, r3
 800680e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006810:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006812:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006814:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006816:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006818:	e841 2300 	strex	r3, r2, [r1]
 800681c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800681e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006820:	2b00      	cmp	r3, #0
 8006822:	d1e6      	bne.n	80067f2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006828:	2b01      	cmp	r3, #1
 800682a:	d12e      	bne.n	800688a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2200      	movs	r2, #0
 8006830:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	e853 3f00 	ldrex	r3, [r3]
 800683e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	f023 0310 	bic.w	r3, r3, #16
 8006846:	65bb      	str	r3, [r7, #88]	; 0x58
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	461a      	mov	r2, r3
 800684e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006850:	61bb      	str	r3, [r7, #24]
 8006852:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006854:	6979      	ldr	r1, [r7, #20]
 8006856:	69ba      	ldr	r2, [r7, #24]
 8006858:	e841 2300 	strex	r3, r2, [r1]
 800685c:	613b      	str	r3, [r7, #16]
   return(result);
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d1e6      	bne.n	8006832 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	69db      	ldr	r3, [r3, #28]
 800686a:	f003 0310 	and.w	r3, r3, #16
 800686e:	2b10      	cmp	r3, #16
 8006870:	d103      	bne.n	800687a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2210      	movs	r2, #16
 8006878:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006880:	4619      	mov	r1, r3
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f7ff f85e 	bl	8005944 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006888:	e00b      	b.n	80068a2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 fe5e 	bl	800754c <HAL_UART_RxCpltCallback>
}
 8006890:	e007      	b.n	80068a2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	699a      	ldr	r2, [r3, #24]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f042 0208 	orr.w	r2, r2, #8
 80068a0:	619a      	str	r2, [r3, #24]
}
 80068a2:	bf00      	nop
 80068a4:	3770      	adds	r7, #112	; 0x70
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop
 80068ac:	40008000 	.word	0x40008000

080068b0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b0ac      	sub	sp, #176	; 0xb0
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80068be:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	69db      	ldr	r3, [r3, #28]
 80068c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068e6:	2b22      	cmp	r3, #34	; 0x22
 80068e8:	f040 8182 	bne.w	8006bf0 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80068f2:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80068f6:	e125      	b.n	8006b44 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068fe:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006902:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8006906:	b2d9      	uxtb	r1, r3
 8006908:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800690c:	b2da      	uxtb	r2, r3
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006912:	400a      	ands	r2, r1
 8006914:	b2d2      	uxtb	r2, r2
 8006916:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800691c:	1c5a      	adds	r2, r3, #1
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006928:	b29b      	uxth	r3, r3
 800692a:	3b01      	subs	r3, #1
 800692c:	b29a      	uxth	r2, r3
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	69db      	ldr	r3, [r3, #28]
 800693a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800693e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006942:	f003 0307 	and.w	r3, r3, #7
 8006946:	2b00      	cmp	r3, #0
 8006948:	d053      	beq.n	80069f2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800694a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800694e:	f003 0301 	and.w	r3, r3, #1
 8006952:	2b00      	cmp	r3, #0
 8006954:	d011      	beq.n	800697a <UART_RxISR_8BIT_FIFOEN+0xca>
 8006956:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800695a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800695e:	2b00      	cmp	r3, #0
 8006960:	d00b      	beq.n	800697a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	2201      	movs	r2, #1
 8006968:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006970:	f043 0201 	orr.w	r2, r3, #1
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800697a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800697e:	f003 0302 	and.w	r3, r3, #2
 8006982:	2b00      	cmp	r3, #0
 8006984:	d011      	beq.n	80069aa <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006986:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800698a:	f003 0301 	and.w	r3, r3, #1
 800698e:	2b00      	cmp	r3, #0
 8006990:	d00b      	beq.n	80069aa <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	2202      	movs	r2, #2
 8006998:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069a0:	f043 0204 	orr.w	r2, r3, #4
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80069aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80069ae:	f003 0304 	and.w	r3, r3, #4
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d011      	beq.n	80069da <UART_RxISR_8BIT_FIFOEN+0x12a>
 80069b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80069ba:	f003 0301 	and.w	r3, r3, #1
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d00b      	beq.n	80069da <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	2204      	movs	r2, #4
 80069c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069d0:	f043 0202 	orr.w	r2, r3, #2
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d006      	beq.n	80069f2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f7fe ffa4 	bl	8005932 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	f040 80a2 	bne.w	8006b44 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a08:	e853 3f00 	ldrex	r3, [r3]
 8006a0c:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8006a0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006a10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a22:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006a24:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a26:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8006a28:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006a2a:	e841 2300 	strex	r3, r2, [r1]
 8006a2e:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8006a30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d1e4      	bne.n	8006a00 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	3308      	adds	r3, #8
 8006a3c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a40:	e853 3f00 	ldrex	r3, [r3]
 8006a44:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8006a46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a4c:	f023 0301 	bic.w	r3, r3, #1
 8006a50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	3308      	adds	r3, #8
 8006a5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006a5e:	66ba      	str	r2, [r7, #104]	; 0x68
 8006a60:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a62:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8006a64:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006a66:	e841 2300 	strex	r3, r2, [r1]
 8006a6a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006a6c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d1e1      	bne.n	8006a36 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2220      	movs	r2, #32
 8006a76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a5f      	ldr	r2, [pc, #380]	; (8006c08 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d021      	beq.n	8006ad4 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d01a      	beq.n	8006ad4 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006aa6:	e853 3f00 	ldrex	r3, [r3]
 8006aaa:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006aac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006aae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006ab2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	461a      	mov	r2, r3
 8006abc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006ac0:	657b      	str	r3, [r7, #84]	; 0x54
 8006ac2:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006ac6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006ac8:	e841 2300 	strex	r3, r2, [r1]
 8006acc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006ace:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d1e4      	bne.n	8006a9e <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d130      	bne.n	8006b3e <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006aea:	e853 3f00 	ldrex	r3, [r3]
 8006aee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af2:	f023 0310 	bic.w	r3, r3, #16
 8006af6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	461a      	mov	r2, r3
 8006b00:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b04:	643b      	str	r3, [r7, #64]	; 0x40
 8006b06:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b08:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006b0a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b0c:	e841 2300 	strex	r3, r2, [r1]
 8006b10:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d1e4      	bne.n	8006ae2 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	69db      	ldr	r3, [r3, #28]
 8006b1e:	f003 0310 	and.w	r3, r3, #16
 8006b22:	2b10      	cmp	r3, #16
 8006b24:	d103      	bne.n	8006b2e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	2210      	movs	r2, #16
 8006b2c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006b34:	4619      	mov	r1, r3
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f7fe ff04 	bl	8005944 <HAL_UARTEx_RxEventCallback>
 8006b3c:	e002      	b.n	8006b44 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 fd04 	bl	800754c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006b44:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d006      	beq.n	8006b5a <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8006b4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b50:	f003 0320 	and.w	r3, r3, #32
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	f47f aecf 	bne.w	80068f8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b60:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006b64:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d049      	beq.n	8006c00 <UART_RxISR_8BIT_FIFOEN+0x350>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006b72:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d242      	bcs.n	8006c00 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	3308      	adds	r3, #8
 8006b80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b82:	6a3b      	ldr	r3, [r7, #32]
 8006b84:	e853 3f00 	ldrex	r3, [r3]
 8006b88:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b8a:	69fb      	ldr	r3, [r7, #28]
 8006b8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b90:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	3308      	adds	r3, #8
 8006b9a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006b9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ba0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ba4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ba6:	e841 2300 	strex	r3, r2, [r1]
 8006baa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d1e3      	bne.n	8006b7a <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4a15      	ldr	r2, [pc, #84]	; (8006c0c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8006bb6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	e853 3f00 	ldrex	r3, [r3]
 8006bc4:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	f043 0320 	orr.w	r3, r3, #32
 8006bcc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006bda:	61bb      	str	r3, [r7, #24]
 8006bdc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bde:	6979      	ldr	r1, [r7, #20]
 8006be0:	69ba      	ldr	r2, [r7, #24]
 8006be2:	e841 2300 	strex	r3, r2, [r1]
 8006be6:	613b      	str	r3, [r7, #16]
   return(result);
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d1e4      	bne.n	8006bb8 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006bee:	e007      	b.n	8006c00 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	699a      	ldr	r2, [r3, #24]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f042 0208 	orr.w	r2, r2, #8
 8006bfe:	619a      	str	r2, [r3, #24]
}
 8006c00:	bf00      	nop
 8006c02:	37b0      	adds	r7, #176	; 0xb0
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}
 8006c08:	40008000 	.word	0x40008000
 8006c0c:	08006541 	.word	0x08006541

08006c10 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b0ae      	sub	sp, #184	; 0xb8
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006c1e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	69db      	ldr	r3, [r3, #28]
 8006c28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c46:	2b22      	cmp	r3, #34	; 0x22
 8006c48:	f040 8186 	bne.w	8006f58 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006c52:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006c56:	e129      	b.n	8006eac <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c5e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8006c6a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8006c6e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8006c72:	4013      	ands	r3, r2
 8006c74:	b29a      	uxth	r2, r3
 8006c76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006c7a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c80:	1c9a      	adds	r2, r3, #2
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	3b01      	subs	r3, #1
 8006c90:	b29a      	uxth	r2, r3
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	69db      	ldr	r3, [r3, #28]
 8006c9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006ca2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006ca6:	f003 0307 	and.w	r3, r3, #7
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d053      	beq.n	8006d56 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006cae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006cb2:	f003 0301 	and.w	r3, r3, #1
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d011      	beq.n	8006cde <UART_RxISR_16BIT_FIFOEN+0xce>
 8006cba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d00b      	beq.n	8006cde <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	2201      	movs	r2, #1
 8006ccc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cd4:	f043 0201 	orr.w	r2, r3, #1
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006cde:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006ce2:	f003 0302 	and.w	r3, r3, #2
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d011      	beq.n	8006d0e <UART_RxISR_16BIT_FIFOEN+0xfe>
 8006cea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006cee:	f003 0301 	and.w	r3, r3, #1
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d00b      	beq.n	8006d0e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	2202      	movs	r2, #2
 8006cfc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d04:	f043 0204 	orr.w	r2, r3, #4
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d0e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006d12:	f003 0304 	and.w	r3, r3, #4
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d011      	beq.n	8006d3e <UART_RxISR_16BIT_FIFOEN+0x12e>
 8006d1a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006d1e:	f003 0301 	and.w	r3, r3, #1
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d00b      	beq.n	8006d3e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	2204      	movs	r2, #4
 8006d2c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d34:	f043 0202 	orr.w	r2, r3, #2
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d006      	beq.n	8006d56 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f7fe fdf2 	bl	8005932 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	f040 80a4 	bne.w	8006eac <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d6c:	e853 3f00 	ldrex	r3, [r3]
 8006d70:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006d72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	461a      	mov	r2, r3
 8006d82:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006d86:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006d8a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d8c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006d8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006d92:	e841 2300 	strex	r3, r2, [r1]
 8006d96:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006d98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d1e2      	bne.n	8006d64 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	3308      	adds	r3, #8
 8006da4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006da8:	e853 3f00 	ldrex	r3, [r3]
 8006dac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006dae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006db0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006db4:	f023 0301 	bic.w	r3, r3, #1
 8006db8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	3308      	adds	r3, #8
 8006dc2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8006dc6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006dc8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006dcc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006dce:	e841 2300 	strex	r3, r2, [r1]
 8006dd2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006dd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d1e1      	bne.n	8006d9e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2220      	movs	r2, #32
 8006dde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2200      	movs	r2, #0
 8006de6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a5f      	ldr	r2, [pc, #380]	; (8006f70 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d021      	beq.n	8006e3c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d01a      	beq.n	8006e3c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e0e:	e853 3f00 	ldrex	r3, [r3]
 8006e12:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006e14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e16:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006e1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	461a      	mov	r2, r3
 8006e24:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006e28:	65bb      	str	r3, [r7, #88]	; 0x58
 8006e2a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e2c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006e2e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006e30:	e841 2300 	strex	r3, r2, [r1]
 8006e34:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006e36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d1e4      	bne.n	8006e06 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d130      	bne.n	8006ea6 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2200      	movs	r2, #0
 8006e48:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e52:	e853 3f00 	ldrex	r3, [r3]
 8006e56:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e5a:	f023 0310 	bic.w	r3, r3, #16
 8006e5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	461a      	mov	r2, r3
 8006e68:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006e6c:	647b      	str	r3, [r7, #68]	; 0x44
 8006e6e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e70:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e74:	e841 2300 	strex	r3, r2, [r1]
 8006e78:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006e7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d1e4      	bne.n	8006e4a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	69db      	ldr	r3, [r3, #28]
 8006e86:	f003 0310 	and.w	r3, r3, #16
 8006e8a:	2b10      	cmp	r3, #16
 8006e8c:	d103      	bne.n	8006e96 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	2210      	movs	r2, #16
 8006e94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f7fe fd50 	bl	8005944 <HAL_UARTEx_RxEventCallback>
 8006ea4:	e002      	b.n	8006eac <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 fb50 	bl	800754c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006eac:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d006      	beq.n	8006ec2 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8006eb4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006eb8:	f003 0320 	and.w	r3, r3, #32
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	f47f aecb 	bne.w	8006c58 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ec8:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006ecc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d049      	beq.n	8006f68 <UART_RxISR_16BIT_FIFOEN+0x358>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006eda:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d242      	bcs.n	8006f68 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	3308      	adds	r3, #8
 8006ee8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eec:	e853 3f00 	ldrex	r3, [r3]
 8006ef0:	623b      	str	r3, [r7, #32]
   return(result);
 8006ef2:	6a3b      	ldr	r3, [r7, #32]
 8006ef4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ef8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	3308      	adds	r3, #8
 8006f02:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006f06:	633a      	str	r2, [r7, #48]	; 0x30
 8006f08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f0e:	e841 2300 	strex	r3, r2, [r1]
 8006f12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d1e3      	bne.n	8006ee2 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	4a15      	ldr	r2, [pc, #84]	; (8006f74 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8006f1e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	e853 3f00 	ldrex	r3, [r3]
 8006f2c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	f043 0320 	orr.w	r3, r3, #32
 8006f34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f42:	61fb      	str	r3, [r7, #28]
 8006f44:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f46:	69b9      	ldr	r1, [r7, #24]
 8006f48:	69fa      	ldr	r2, [r7, #28]
 8006f4a:	e841 2300 	strex	r3, r2, [r1]
 8006f4e:	617b      	str	r3, [r7, #20]
   return(result);
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d1e4      	bne.n	8006f20 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006f56:	e007      	b.n	8006f68 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	699a      	ldr	r2, [r3, #24]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f042 0208 	orr.w	r2, r2, #8
 8006f66:	619a      	str	r2, [r3, #24]
}
 8006f68:	bf00      	nop
 8006f6a:	37b8      	adds	r7, #184	; 0xb8
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}
 8006f70:	40008000 	.word	0x40008000
 8006f74:	080066f9 	.word	0x080066f9

08006f78 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b083      	sub	sp, #12
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006f80:	bf00      	nop
 8006f82:	370c      	adds	r7, #12
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bc80      	pop	{r7}
 8006f88:	4770      	bx	lr

08006f8a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006f8a:	b480      	push	{r7}
 8006f8c:	b083      	sub	sp, #12
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006f92:	bf00      	nop
 8006f94:	370c      	adds	r7, #12
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bc80      	pop	{r7}
 8006f9a:	4770      	bx	lr

08006f9c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b083      	sub	sp, #12
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006fa4:	bf00      	nop
 8006fa6:	370c      	adds	r7, #12
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bc80      	pop	{r7}
 8006fac:	4770      	bx	lr

08006fae <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006fae:	b480      	push	{r7}
 8006fb0:	b085      	sub	sp, #20
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d101      	bne.n	8006fc4 <HAL_UARTEx_DisableFifoMode+0x16>
 8006fc0:	2302      	movs	r3, #2
 8006fc2:	e027      	b.n	8007014 <HAL_UARTEx_DisableFifoMode+0x66>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2224      	movs	r2, #36	; 0x24
 8006fd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f022 0201 	bic.w	r2, r2, #1
 8006fea:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006ff2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	68fa      	ldr	r2, [r7, #12]
 8007000:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2220      	movs	r2, #32
 8007006:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007012:	2300      	movs	r3, #0
}
 8007014:	4618      	mov	r0, r3
 8007016:	3714      	adds	r7, #20
 8007018:	46bd      	mov	sp, r7
 800701a:	bc80      	pop	{r7}
 800701c:	4770      	bx	lr

0800701e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800701e:	b580      	push	{r7, lr}
 8007020:	b084      	sub	sp, #16
 8007022:	af00      	add	r7, sp, #0
 8007024:	6078      	str	r0, [r7, #4]
 8007026:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800702e:	2b01      	cmp	r3, #1
 8007030:	d101      	bne.n	8007036 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007032:	2302      	movs	r3, #2
 8007034:	e02d      	b.n	8007092 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2201      	movs	r2, #1
 800703a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2224      	movs	r2, #36	; 0x24
 8007042:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f022 0201 	bic.w	r2, r2, #1
 800705c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	683a      	ldr	r2, [r7, #0]
 800706e:	430a      	orrs	r2, r1
 8007070:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f000 f850 	bl	8007118 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	68fa      	ldr	r2, [r7, #12]
 800707e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2220      	movs	r2, #32
 8007084:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2200      	movs	r2, #0
 800708c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007090:	2300      	movs	r3, #0
}
 8007092:	4618      	mov	r0, r3
 8007094:	3710      	adds	r7, #16
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}

0800709a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800709a:	b580      	push	{r7, lr}
 800709c:	b084      	sub	sp, #16
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
 80070a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d101      	bne.n	80070b2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80070ae:	2302      	movs	r3, #2
 80070b0:	e02d      	b.n	800710e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2201      	movs	r2, #1
 80070b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2224      	movs	r2, #36	; 0x24
 80070be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f022 0201 	bic.w	r2, r2, #1
 80070d8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	683a      	ldr	r2, [r7, #0]
 80070ea:	430a      	orrs	r2, r1
 80070ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 f812 	bl	8007118 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	68fa      	ldr	r2, [r7, #12]
 80070fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2220      	movs	r2, #32
 8007100:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2200      	movs	r2, #0
 8007108:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800710c:	2300      	movs	r3, #0
}
 800710e:	4618      	mov	r0, r3
 8007110:	3710      	adds	r7, #16
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
	...

08007118 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007118:	b480      	push	{r7}
 800711a:	b085      	sub	sp, #20
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007124:	2b00      	cmp	r3, #0
 8007126:	d108      	bne.n	800713a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2201      	movs	r2, #1
 800712c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007138:	e031      	b.n	800719e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800713a:	2308      	movs	r3, #8
 800713c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800713e:	2308      	movs	r3, #8
 8007140:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	0e5b      	lsrs	r3, r3, #25
 800714a:	b2db      	uxtb	r3, r3
 800714c:	f003 0307 	and.w	r3, r3, #7
 8007150:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	0f5b      	lsrs	r3, r3, #29
 800715a:	b2db      	uxtb	r3, r3
 800715c:	f003 0307 	and.w	r3, r3, #7
 8007160:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007162:	7bbb      	ldrb	r3, [r7, #14]
 8007164:	7b3a      	ldrb	r2, [r7, #12]
 8007166:	4910      	ldr	r1, [pc, #64]	; (80071a8 <UARTEx_SetNbDataToProcess+0x90>)
 8007168:	5c8a      	ldrb	r2, [r1, r2]
 800716a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800716e:	7b3a      	ldrb	r2, [r7, #12]
 8007170:	490e      	ldr	r1, [pc, #56]	; (80071ac <UARTEx_SetNbDataToProcess+0x94>)
 8007172:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007174:	fb93 f3f2 	sdiv	r3, r3, r2
 8007178:	b29a      	uxth	r2, r3
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007180:	7bfb      	ldrb	r3, [r7, #15]
 8007182:	7b7a      	ldrb	r2, [r7, #13]
 8007184:	4908      	ldr	r1, [pc, #32]	; (80071a8 <UARTEx_SetNbDataToProcess+0x90>)
 8007186:	5c8a      	ldrb	r2, [r1, r2]
 8007188:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800718c:	7b7a      	ldrb	r2, [r7, #13]
 800718e:	4907      	ldr	r1, [pc, #28]	; (80071ac <UARTEx_SetNbDataToProcess+0x94>)
 8007190:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007192:	fb93 f3f2 	sdiv	r3, r3, r2
 8007196:	b29a      	uxth	r2, r3
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800719e:	bf00      	nop
 80071a0:	3714      	adds	r7, #20
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bc80      	pop	{r7}
 80071a6:	4770      	bx	lr
 80071a8:	0800d1d8 	.word	0x0800d1d8
 80071ac:	0800d1e0 	.word	0x0800d1e0

080071b0 <commandReadDeviceId>:


char DataBuffer[200];

void commandReadDeviceId(char *data)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b096      	sub	sp, #88	; 0x58
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  /* Read MCU Id, 32-bit access */
  uint8_t i;
  char DeviceId[50];
  uint8_t serialNumber[12]={0};
 80071b8:	2300      	movs	r3, #0
 80071ba:	61bb      	str	r3, [r7, #24]
 80071bc:	f107 031c 	add.w	r3, r7, #28
 80071c0:	2200      	movs	r2, #0
 80071c2:	601a      	str	r2, [r3, #0]
 80071c4:	605a      	str	r2, [r3, #4]
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = HAL_GetUIDw0();
 80071c6:	f7fa fdf5 	bl	8001db4 <HAL_GetUIDw0>
 80071ca:	4603      	mov	r3, r0
 80071cc:	617b      	str	r3, [r7, #20]
  deviceserial1 = HAL_GetUIDw1();
 80071ce:	f7fa fdfb 	bl	8001dc8 <HAL_GetUIDw1>
 80071d2:	4603      	mov	r3, r0
 80071d4:	613b      	str	r3, [r7, #16]
  deviceserial2 = HAL_GetUIDw2();
 80071d6:	f7fa fe01 	bl	8001ddc <HAL_GetUIDw2>
 80071da:	4603      	mov	r3, r0
 80071dc:	60fb      	str	r3, [r7, #12]
  memset(serialNumber, 0, 12);
 80071de:	f107 0318 	add.w	r3, r7, #24
 80071e2:	220c      	movs	r2, #12
 80071e4:	2100      	movs	r1, #0
 80071e6:	4618      	mov	r0, r3
 80071e8:	f003 f819 	bl	800a21e <memset>
 80071ec:	697b      	ldr	r3, [r7, #20]
  memcpy(&serialNumber[0], &deviceserial0, 4);
 80071ee:	61bb      	str	r3, [r7, #24]
 80071f0:	693b      	ldr	r3, [r7, #16]
  memcpy(&serialNumber[4], &deviceserial1, 4);
 80071f2:	61fb      	str	r3, [r7, #28]
 80071f4:	68fb      	ldr	r3, [r7, #12]
  memcpy(&serialNumber[8], &deviceserial2, 4);
 80071f6:	623b      	str	r3, [r7, #32]
  snprintf(DeviceId, sizeof(DeviceId), "OK,STDEVICEID,");
 80071f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071fc:	4a1e      	ldr	r2, [pc, #120]	; (8007278 <commandReadDeviceId+0xc8>)
 80071fe:	2132      	movs	r1, #50	; 0x32
 8007200:	4618      	mov	r0, r3
 8007202:	f003 fd7f 	bl	800ad04 <sniprintf>
  serialPutStr(DeviceId);
 8007206:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800720a:	4618      	mov	r0, r3
 800720c:	f000 f8c0 	bl	8007390 <serialPutStr>
  for(i=0; i<12; i++)
 8007210:	2300      	movs	r3, #0
 8007212:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8007216:	e026      	b.n	8007266 <commandReadDeviceId+0xb6>
  {
    i < 11 ? snprintf(DeviceId, sizeof(DeviceId), "%x", serialNumber[i]) : snprintf(DeviceId, sizeof(DeviceId), "%d\n", serialNumber[i]);
 8007218:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800721c:	2b0a      	cmp	r3, #10
 800721e:	d80c      	bhi.n	800723a <commandReadDeviceId+0x8a>
 8007220:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007224:	3358      	adds	r3, #88	; 0x58
 8007226:	443b      	add	r3, r7
 8007228:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 800722c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007230:	4a12      	ldr	r2, [pc, #72]	; (800727c <commandReadDeviceId+0xcc>)
 8007232:	2132      	movs	r1, #50	; 0x32
 8007234:	f003 fd66 	bl	800ad04 <sniprintf>
 8007238:	e00b      	b.n	8007252 <commandReadDeviceId+0xa2>
 800723a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800723e:	3358      	adds	r3, #88	; 0x58
 8007240:	443b      	add	r3, r7
 8007242:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 8007246:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800724a:	4a0d      	ldr	r2, [pc, #52]	; (8007280 <commandReadDeviceId+0xd0>)
 800724c:	2132      	movs	r1, #50	; 0x32
 800724e:	f003 fd59 	bl	800ad04 <sniprintf>
    serialPutStr(DeviceId);
 8007252:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007256:	4618      	mov	r0, r3
 8007258:	f000 f89a 	bl	8007390 <serialPutStr>
  for(i=0; i<12; i++)
 800725c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007260:	3301      	adds	r3, #1
 8007262:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8007266:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800726a:	2b0b      	cmp	r3, #11
 800726c:	d9d4      	bls.n	8007218 <commandReadDeviceId+0x68>
  }
}
 800726e:	bf00      	nop
 8007270:	bf00      	nop
 8007272:	3758      	adds	r7, #88	; 0x58
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}
 8007278:	0800d038 	.word	0x0800d038
 800727c:	0800d048 	.word	0x0800d048
 8007280:	0800d04c 	.word	0x0800d04c

08007284 <commandReadDeviceBattery>:


void commandReadDeviceBattery(char *data)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]

	 serialPutStr("OK,BATTREAD");
 800728c:	4803      	ldr	r0, [pc, #12]	; (800729c <commandReadDeviceBattery+0x18>)
 800728e:	f000 f87f 	bl	8007390 <serialPutStr>
	//sprintf(DataBuffer,"OK,BATTREAD %f",AdcRead_VBatt());
	//serialPutStr(DataBuffer);

}
 8007292:	bf00      	nop
 8007294:	3708      	adds	r7, #8
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
 800729a:	bf00      	nop
 800729c:	0800d050 	.word	0x0800d050

080072a0 <commandInvalid>:

void commandInvalid(char *data)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b082      	sub	sp, #8
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  serialPutStr("ERROR,Invalid Command Handler!\n");
 80072a8:	4803      	ldr	r0, [pc, #12]	; (80072b8 <commandInvalid+0x18>)
 80072aa:	f000 f871 	bl	8007390 <serialPutStr>
}
 80072ae:	bf00      	nop
 80072b0:	3708      	adds	r7, #8
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	bf00      	nop
 80072b8:	0800d05c 	.word	0x0800d05c

080072bc <commandGetTime>:

char dateTime[100];
void commandGetTime(char *data)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b082      	sub	sp, #8
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
	RTC_TimeShow(dateTime);
 80072c4:	4806      	ldr	r0, [pc, #24]	; (80072e0 <commandGetTime+0x24>)
 80072c6:	f000 f825 	bl	8007314 <RTC_TimeShow>
	serialPutStr("OK,GETTIME\n");
 80072ca:	4806      	ldr	r0, [pc, #24]	; (80072e4 <commandGetTime+0x28>)
 80072cc:	f000 f860 	bl	8007390 <serialPutStr>
	serialPutStr(dateTime);
 80072d0:	4803      	ldr	r0, [pc, #12]	; (80072e0 <commandGetTime+0x24>)
 80072d2:	f000 f85d 	bl	8007390 <serialPutStr>

}
 80072d6:	bf00      	nop
 80072d8:	3708      	adds	r7, #8
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
 80072de:	bf00      	nop
 80072e0:	20000c4c 	.word	0x20000c4c
 80072e4:	0800d07c 	.word	0x0800d07c

080072e8 <commandGetDate>:

void commandGetDate(char *data)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b082      	sub	sp, #8
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
	RTC_DateShow(dateTime);
 80072f0:	4806      	ldr	r0, [pc, #24]	; (800730c <commandGetDate+0x24>)
 80072f2:	f000 f82d 	bl	8007350 <RTC_DateShow>
    serialPutStr("OK,GETDATE\n");
 80072f6:	4806      	ldr	r0, [pc, #24]	; (8007310 <commandGetDate+0x28>)
 80072f8:	f000 f84a 	bl	8007390 <serialPutStr>
    serialPutStr(dateTime);
 80072fc:	4803      	ldr	r0, [pc, #12]	; (800730c <commandGetDate+0x24>)
 80072fe:	f000 f847 	bl	8007390 <serialPutStr>
}
 8007302:	bf00      	nop
 8007304:	3708      	adds	r7, #8
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
 800730a:	bf00      	nop
 800730c:	20000c4c 	.word	0x20000c4c
 8007310:	0800d088 	.word	0x0800d088

08007314 <RTC_TimeShow>:
  * @brief  Display the current time.
  * @param  showtime : pointer to buffer
  * @retval None
  */
void RTC_TimeShow(char *showtime)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b08a      	sub	sp, #40	; 0x28
 8007318:	af02      	add	r7, sp, #8
 800731a:	6078      	str	r0, [r7, #4]

  RTC_TimeTypeDef stimestructureget;
  /* Get the RTC current Time */
  HAL_RTC_GetTime(Get_RtcHandle(), &stimestructureget, RTC_FORMAT_BIN);
 800731c:	f7fa f932 	bl	8001584 <Get_RtcHandle>
 8007320:	f107 030c 	add.w	r3, r7, #12
 8007324:	2200      	movs	r2, #0
 8007326:	4619      	mov	r1, r3
 8007328:	f7fc fff0 	bl	800430c <HAL_RTC_GetTime>

  /* Display time Format : hh:mm:ss */
  sprintf((char *)showtime, "%02d:%02d:%02d", stimestructureget.Hours, stimestructureget.Minutes, stimestructureget.Seconds);
 800732c:	7b3b      	ldrb	r3, [r7, #12]
 800732e:	461a      	mov	r2, r3
 8007330:	7b7b      	ldrb	r3, [r7, #13]
 8007332:	4619      	mov	r1, r3
 8007334:	7bbb      	ldrb	r3, [r7, #14]
 8007336:	9300      	str	r3, [sp, #0]
 8007338:	460b      	mov	r3, r1
 800733a:	4904      	ldr	r1, [pc, #16]	; (800734c <RTC_TimeShow+0x38>)
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f003 fd15 	bl	800ad6c <siprintf>
}
 8007342:	bf00      	nop
 8007344:	3720      	adds	r7, #32
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
 800734a:	bf00      	nop
 800734c:	0800d094 	.word	0x0800d094

08007350 <RTC_DateShow>:
  * @brief  Display the current time.
  * @param  showtime : pointer to buffer
  * @retval None
  */
void RTC_DateShow(char *showdate)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b086      	sub	sp, #24
 8007354:	af02      	add	r7, sp, #8
 8007356:	6078      	str	r0, [r7, #4]
  RTC_DateTypeDef sdatestructureget;

  /* Get the RTC current Date */
  HAL_RTC_GetDate(Get_RtcHandle(), &sdatestructureget, RTC_FORMAT_BIN);
 8007358:	f7fa f914 	bl	8001584 <Get_RtcHandle>
 800735c:	f107 030c 	add.w	r3, r7, #12
 8007360:	2200      	movs	r2, #0
 8007362:	4619      	mov	r1, r3
 8007364:	f7fd f8ba 	bl	80044dc <HAL_RTC_GetDate>
  /* Display date Format: mm-dd-yy */
  sprintf((char *)showdate, "%02d:%02d:%02d", sdatestructureget.Date, sdatestructureget.Month, 2000 + sdatestructureget.Year);
 8007368:	7bbb      	ldrb	r3, [r7, #14]
 800736a:	461a      	mov	r2, r3
 800736c:	7b7b      	ldrb	r3, [r7, #13]
 800736e:	4619      	mov	r1, r3
 8007370:	7bfb      	ldrb	r3, [r7, #15]
 8007372:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8007376:	9300      	str	r3, [sp, #0]
 8007378:	460b      	mov	r3, r1
 800737a:	4904      	ldr	r1, [pc, #16]	; (800738c <RTC_DateShow+0x3c>)
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f003 fcf5 	bl	800ad6c <siprintf>
}
 8007382:	bf00      	nop
 8007384:	3710      	adds	r7, #16
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}
 800738a:	bf00      	nop
 800738c:	0800d094 	.word	0x0800d094

08007390 <serialPutStr>:

#include "Uart.h"


void serialPutStr(const char *data)
{
 8007390:	b590      	push	{r4, r7, lr}
 8007392:	b083      	sub	sp, #12
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
   //Get exclusive access
  //osAcquireMutex(&uartMutex);
  HAL_UART_Transmit(Get_DebugHandle(),(uint8_t *)data, strlen(data),DEBUG_UART_TIMEOUT);
 8007398:	f7fa f8ea 	bl	8001570 <Get_DebugHandle>
 800739c:	4604      	mov	r4, r0
 800739e:	6878      	ldr	r0, [r7, #4]
 80073a0:	f7f8 feee 	bl	8000180 <strlen>
 80073a4:	4603      	mov	r3, r0
 80073a6:	b29a      	uxth	r2, r3
 80073a8:	230a      	movs	r3, #10
 80073aa:	6879      	ldr	r1, [r7, #4]
 80073ac:	4620      	mov	r0, r4
 80073ae:	f7fd fec1 	bl	8005134 <HAL_UART_Transmit>
  //osReleaseMutex(&uartMutex);

}
 80073b2:	bf00      	nop
 80073b4:	370c      	adds	r7, #12
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd90      	pop	{r4, r7, pc}
	...

080073bc <terminalTaskHandler>:



/* USER CODE END Header_terminalTaskHandler */
void terminalTaskHandler(void const * argument)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	int tCommandReady = 0;
 80073c4:	2300      	movs	r3, #0
 80073c6:	60fb      	str	r3, [r7, #12]
	char tRxedChar;
	HAL_UART_Receive_IT(Get_DebugHandle(),(uint8_t*)uartData,UART_RECEIVE_SIZE);
 80073c8:	f7fa f8d2 	bl	8001570 <Get_DebugHandle>
 80073cc:	4603      	mov	r3, r0
 80073ce:	2201      	movs	r2, #1
 80073d0:	4911      	ldr	r1, [pc, #68]	; (8007418 <terminalTaskHandler+0x5c>)
 80073d2:	4618      	mov	r0, r3
 80073d4:	f7fd ff34 	bl	8005240 <HAL_UART_Receive_IT>
	/* Infinite loop */
	serialPutStr("Terminal Thread Initialized");
 80073d8:	4810      	ldr	r0, [pc, #64]	; (800741c <terminalTaskHandler+0x60>)
 80073da:	f7ff ffd9 	bl	8007390 <serialPutStr>
	for(;;)
	{
		/* Process Terminal Commands */
		if(xQueueReceive(Get_TerminalQueueHandle(),&tRxedChar,QUEUE_TIMEOUT))
 80073de:	f7fa f8db 	bl	8001598 <Get_TerminalQueueHandle>
 80073e2:	f107 030b 	add.w	r3, r7, #11
 80073e6:	220a      	movs	r2, #10
 80073e8:	4619      	mov	r1, r3
 80073ea:	f000 fd67 	bl	8007ebc <xQueueReceive>
 80073ee:	4603      	mov	r3, r0
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d00c      	beq.n	800740e <terminalTaskHandler+0x52>
		{
			tCommandReady = CommandLineBuildCommand(tRxedChar);
 80073f4:	7afb      	ldrb	r3, [r7, #11]
 80073f6:	4618      	mov	r0, r3
 80073f8:	f000 f814 	bl	8007424 <CommandLineBuildCommand>
 80073fc:	60f8      	str	r0, [r7, #12]
			if(tCommandReady)
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d004      	beq.n	800740e <terminalTaskHandler+0x52>
			{
				CommandLineProcessCommand(gCommandBuffer);
 8007404:	4806      	ldr	r0, [pc, #24]	; (8007420 <terminalTaskHandler+0x64>)
 8007406:	f000 f855 	bl	80074b4 <CommandLineProcessCommand>
				tCommandReady = 0;
 800740a:	2300      	movs	r3, #0
 800740c:	60fb      	str	r3, [r7, #12]
			}
		}
		osDelay(1);
 800740e:	2001      	movs	r0, #1
 8007410:	f000 f92e 	bl	8007670 <osDelay>
		if(xQueueReceive(Get_TerminalQueueHandle(),&tRxedChar,QUEUE_TIMEOUT))
 8007414:	e7e3      	b.n	80073de <terminalTaskHandler+0x22>
 8007416:	bf00      	nop
 8007418:	20000cb4 	.word	0x20000cb4
 800741c:	0800d0cc 	.word	0x0800d0cc
 8007420:	20000cb8 	.word	0x20000cb8

08007424 <CommandLineBuildCommand>:
}


static uint16_t commandBuilderIdx = 0;
int CommandLineBuildCommand(char nextChar)
{
 8007424:	b480      	push	{r7}
 8007426:	b083      	sub	sp, #12
 8007428:	af00      	add	r7, sp, #0
 800742a:	4603      	mov	r3, r0
 800742c:	71fb      	strb	r3, [r7, #7]
	/* Don't store any new line characters or spaces. */
	if ((nextChar == '\n') || (nextChar == ' ') || (nextChar == '\t'))
 800742e:	79fb      	ldrb	r3, [r7, #7]
 8007430:	2b0a      	cmp	r3, #10
 8007432:	d005      	beq.n	8007440 <CommandLineBuildCommand+0x1c>
 8007434:	79fb      	ldrb	r3, [r7, #7]
 8007436:	2b20      	cmp	r3, #32
 8007438:	d002      	beq.n	8007440 <CommandLineBuildCommand+0x1c>
 800743a:	79fb      	ldrb	r3, [r7, #7]
 800743c:	2b09      	cmp	r3, #9
 800743e:	d101      	bne.n	8007444 <CommandLineBuildCommand+0x20>
	{
		return false;
 8007440:	2300      	movs	r3, #0
 8007442:	e02d      	b.n	80074a0 <CommandLineBuildCommand+0x7c>
	}
	/* The completed command has been received. Replace the final carriage
	 * return character with a NULL character to help with processing the
	 * command. */
	if (nextChar == '\r')
 8007444:	79fb      	ldrb	r3, [r7, #7]
 8007446:	2b0d      	cmp	r3, #13
 8007448:	d10a      	bne.n	8007460 <CommandLineBuildCommand+0x3c>
	{
		gCommandBuffer[commandBuilderIdx] = '\0';
 800744a:	4b18      	ldr	r3, [pc, #96]	; (80074ac <CommandLineBuildCommand+0x88>)
 800744c:	881b      	ldrh	r3, [r3, #0]
 800744e:	461a      	mov	r2, r3
 8007450:	4b17      	ldr	r3, [pc, #92]	; (80074b0 <CommandLineBuildCommand+0x8c>)
 8007452:	2100      	movs	r1, #0
 8007454:	5499      	strb	r1, [r3, r2]
		commandBuilderIdx = 0;
 8007456:	4b15      	ldr	r3, [pc, #84]	; (80074ac <CommandLineBuildCommand+0x88>)
 8007458:	2200      	movs	r2, #0
 800745a:	801a      	strh	r2, [r3, #0]
		return true;
 800745c:	2301      	movs	r3, #1
 800745e:	e01f      	b.n	80074a0 <CommandLineBuildCommand+0x7c>
	}
	/* Convert the incoming character to uppercase. This matches the case
	 * of commands in the command table. Then store the received character
	 * in the command buffer. */
	gCommandBuffer[commandBuilderIdx] = TO_UPPER(nextChar);
 8007460:	79fb      	ldrb	r3, [r7, #7]
 8007462:	2b60      	cmp	r3, #96	; 0x60
 8007464:	d906      	bls.n	8007474 <CommandLineBuildCommand+0x50>
 8007466:	79fb      	ldrb	r3, [r7, #7]
 8007468:	2b7a      	cmp	r3, #122	; 0x7a
 800746a:	d803      	bhi.n	8007474 <CommandLineBuildCommand+0x50>
 800746c:	79fb      	ldrb	r3, [r7, #7]
 800746e:	3b20      	subs	r3, #32
 8007470:	b2db      	uxtb	r3, r3
 8007472:	e000      	b.n	8007476 <CommandLineBuildCommand+0x52>
 8007474:	79fb      	ldrb	r3, [r7, #7]
 8007476:	4a0d      	ldr	r2, [pc, #52]	; (80074ac <CommandLineBuildCommand+0x88>)
 8007478:	8812      	ldrh	r2, [r2, #0]
 800747a:	4611      	mov	r1, r2
 800747c:	4a0c      	ldr	r2, [pc, #48]	; (80074b0 <CommandLineBuildCommand+0x8c>)
 800747e:	5453      	strb	r3, [r2, r1]
	commandBuilderIdx++;
 8007480:	4b0a      	ldr	r3, [pc, #40]	; (80074ac <CommandLineBuildCommand+0x88>)
 8007482:	881b      	ldrh	r3, [r3, #0]
 8007484:	3301      	adds	r3, #1
 8007486:	b29a      	uxth	r2, r3
 8007488:	4b08      	ldr	r3, [pc, #32]	; (80074ac <CommandLineBuildCommand+0x88>)
 800748a:	801a      	strh	r2, [r3, #0]
	/* If the command is too long, reset the index and process
	 * the current command buffer. */
	if (commandBuilderIdx >= MAX_COMMAND_LEN)
 800748c:	4b07      	ldr	r3, [pc, #28]	; (80074ac <CommandLineBuildCommand+0x88>)
 800748e:	881b      	ldrh	r3, [r3, #0]
 8007490:	2b77      	cmp	r3, #119	; 0x77
 8007492:	d904      	bls.n	800749e <CommandLineBuildCommand+0x7a>
	{
		commandBuilderIdx = 0;
 8007494:	4b05      	ldr	r3, [pc, #20]	; (80074ac <CommandLineBuildCommand+0x88>)
 8007496:	2200      	movs	r2, #0
 8007498:	801a      	strh	r2, [r3, #0]
		return true;
 800749a:	2301      	movs	r3, #1
 800749c:	e000      	b.n	80074a0 <CommandLineBuildCommand+0x7c>
	}

	return false;
 800749e:	2300      	movs	r3, #0

}
 80074a0:	4618      	mov	r0, r3
 80074a2:	370c      	adds	r7, #12
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bc80      	pop	{r7}
 80074a8:	4770      	bx	lr
 80074aa:	bf00      	nop
 80074ac:	20000d9c 	.word	0x20000d9c
 80074b0:	20000cb8 	.word	0x20000cb8

080074b4 <CommandLineProcessCommand>:

void CommandLineProcessCommand(char * buffer)
{
 80074b4:	b590      	push	{r4, r7, lr}
 80074b6:	b087      	sub	sp, #28
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]

	int idx;
	int CommandFound = false;
 80074bc:	2300      	movs	r3, #0
 80074be:	613b      	str	r3, [r7, #16]
	//char *Com= strtok(buffer,"+");
	char *Arg = strtok(NULL,"+");
 80074c0:	491e      	ldr	r1, [pc, #120]	; (800753c <CommandLineProcessCommand+0x88>)
 80074c2:	2000      	movs	r0, #0
 80074c4:	f003 fcca 	bl	800ae5c <strtok>
 80074c8:	60f8      	str	r0, [r7, #12]

	/* Search for the command in the command table until it is found or
	 * the end of the table is reached. If the command is found, break
	 * out of the loop. */
	for (idx = 0; gCommandTable[idx].name != NULL; idx++)
 80074ca:	2300      	movs	r3, #0
 80074cc:	617b      	str	r3, [r7, #20]
 80074ce:	e020      	b.n	8007512 <CommandLineProcessCommand+0x5e>
	{
		if (strncmp(gCommandTable[idx].name, buffer,strlen(gCommandTable[idx].name)) == 0)
 80074d0:	4a1b      	ldr	r2, [pc, #108]	; (8007540 <CommandLineProcessCommand+0x8c>)
 80074d2:	697b      	ldr	r3, [r7, #20]
 80074d4:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 80074d8:	4a19      	ldr	r2, [pc, #100]	; (8007540 <CommandLineProcessCommand+0x8c>)
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80074e0:	4618      	mov	r0, r3
 80074e2:	f7f8 fe4d 	bl	8000180 <strlen>
 80074e6:	4603      	mov	r3, r0
 80074e8:	461a      	mov	r2, r3
 80074ea:	6879      	ldr	r1, [r7, #4]
 80074ec:	4620      	mov	r0, r4
 80074ee:	f003 fca0 	bl	800ae32 <strncmp>
 80074f2:	4603      	mov	r3, r0
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d109      	bne.n	800750c <CommandLineProcessCommand+0x58>
		{
			CommandFound = true;
 80074f8:	2301      	movs	r3, #1
 80074fa:	613b      	str	r3, [r7, #16]
			(*gCommandTable[idx].function)(Arg);
 80074fc:	4a10      	ldr	r2, [pc, #64]	; (8007540 <CommandLineProcessCommand+0x8c>)
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	00db      	lsls	r3, r3, #3
 8007502:	4413      	add	r3, r2
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	68f8      	ldr	r0, [r7, #12]
 8007508:	4798      	blx	r3
			break;
 800750a:	e008      	b.n	800751e <CommandLineProcessCommand+0x6a>
	for (idx = 0; gCommandTable[idx].name != NULL; idx++)
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	3301      	adds	r3, #1
 8007510:	617b      	str	r3, [r7, #20]
 8007512:	4a0b      	ldr	r2, [pc, #44]	; (8007540 <CommandLineProcessCommand+0x8c>)
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d1d8      	bne.n	80074d0 <CommandLineProcessCommand+0x1c>
		}
	}
	/* If the command was found, call the command function. Otherwise,
	 * output an error message.*/
	if (CommandFound==false)
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d107      	bne.n	8007534 <CommandLineProcessCommand+0x80>
	{
		snprintf(TerminalMsgBuffer, sizeof(TerminalMsgBuffer), "ERROR,Command not found\n");
 8007524:	4a07      	ldr	r2, [pc, #28]	; (8007544 <CommandLineProcessCommand+0x90>)
 8007526:	2164      	movs	r1, #100	; 0x64
 8007528:	4807      	ldr	r0, [pc, #28]	; (8007548 <CommandLineProcessCommand+0x94>)
 800752a:	f003 fbeb 	bl	800ad04 <sniprintf>
		serialPutStr(TerminalMsgBuffer);
 800752e:	4806      	ldr	r0, [pc, #24]	; (8007548 <CommandLineProcessCommand+0x94>)
 8007530:	f7ff ff2e 	bl	8007390 <serialPutStr>
	}
}
 8007534:	bf00      	nop
 8007536:	371c      	adds	r7, #28
 8007538:	46bd      	mov	sp, r7
 800753a:	bd90      	pop	{r4, r7, pc}
 800753c:	0800d0e8 	.word	0x0800d0e8
 8007540:	0800d1e8 	.word	0x0800d1e8
 8007544:	0800d0ec 	.word	0x0800d0ec
 8007548:	20000d34 	.word	0x20000d34

0800754c <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b082      	sub	sp, #8
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]

	if(huart->Instance==USART2)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a0c      	ldr	r2, [pc, #48]	; (800758c <HAL_UART_RxCpltCallback+0x40>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d112      	bne.n	8007584 <HAL_UART_RxCpltCallback+0x38>
	{
		HAL_UART_Receive_IT(Get_DebugHandle(),(uint8_t*)uartData,UART_RECEIVE_SIZE);
 800755e:	f7fa f807 	bl	8001570 <Get_DebugHandle>
 8007562:	4603      	mov	r3, r0
 8007564:	2201      	movs	r2, #1
 8007566:	490a      	ldr	r1, [pc, #40]	; (8007590 <HAL_UART_RxCpltCallback+0x44>)
 8007568:	4618      	mov	r0, r3
 800756a:	f7fd fe69 	bl	8005240 <HAL_UART_Receive_IT>
		cValuetoPost = (char)uartData[0];
 800756e:	4b08      	ldr	r3, [pc, #32]	; (8007590 <HAL_UART_RxCpltCallback+0x44>)
 8007570:	781a      	ldrb	r2, [r3, #0]
 8007572:	4b08      	ldr	r3, [pc, #32]	; (8007594 <HAL_UART_RxCpltCallback+0x48>)
 8007574:	701a      	strb	r2, [r3, #0]
		xQueueSendToBackFromISR(Get_TerminalQueueHandle(),(void*)&cValuetoPost,&xHigherPrioritTaskWoken);
 8007576:	f7fa f80f 	bl	8001598 <Get_TerminalQueueHandle>
 800757a:	2300      	movs	r3, #0
 800757c:	4a06      	ldr	r2, [pc, #24]	; (8007598 <HAL_UART_RxCpltCallback+0x4c>)
 800757e:	4905      	ldr	r1, [pc, #20]	; (8007594 <HAL_UART_RxCpltCallback+0x48>)
 8007580:	f000 fc04 	bl	8007d8c <xQueueGenericSendFromISR>
	}
}
 8007584:	bf00      	nop
 8007586:	3708      	adds	r7, #8
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}
 800758c:	40004400 	.word	0x40004400
 8007590:	20000cb4 	.word	0x20000cb4
 8007594:	20000cb0 	.word	0x20000cb0
 8007598:	20000d98 	.word	0x20000d98

0800759c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800759c:	b480      	push	{r7}
 800759e:	b085      	sub	sp, #20
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	4603      	mov	r3, r0
 80075a4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80075a6:	2300      	movs	r3, #0
 80075a8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80075aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80075ae:	2b84      	cmp	r3, #132	; 0x84
 80075b0:	d005      	beq.n	80075be <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80075b2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	4413      	add	r3, r2
 80075ba:	3303      	adds	r3, #3
 80075bc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80075be:	68fb      	ldr	r3, [r7, #12]
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3714      	adds	r7, #20
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bc80      	pop	{r7}
 80075c8:	4770      	bx	lr

080075ca <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80075ca:	b580      	push	{r7, lr}
 80075cc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80075ce:	f001 f89f 	bl	8008710 <vTaskStartScheduler>
  
  return osOK;
 80075d2:	2300      	movs	r3, #0
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80075d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075da:	b089      	sub	sp, #36	; 0x24
 80075dc:	af04      	add	r7, sp, #16
 80075de:	6078      	str	r0, [r7, #4]
 80075e0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	695b      	ldr	r3, [r3, #20]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d020      	beq.n	800762c <osThreadCreate+0x54>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	699b      	ldr	r3, [r3, #24]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d01c      	beq.n	800762c <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	685c      	ldr	r4, [r3, #4]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681d      	ldr	r5, [r3, #0]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	691e      	ldr	r6, [r3, #16]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007604:	4618      	mov	r0, r3
 8007606:	f7ff ffc9 	bl	800759c <makeFreeRtosPriority>
 800760a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	695b      	ldr	r3, [r3, #20]
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007614:	9202      	str	r2, [sp, #8]
 8007616:	9301      	str	r3, [sp, #4]
 8007618:	9100      	str	r1, [sp, #0]
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	4632      	mov	r2, r6
 800761e:	4629      	mov	r1, r5
 8007620:	4620      	mov	r0, r4
 8007622:	f000 fe97 	bl	8008354 <xTaskCreateStatic>
 8007626:	4603      	mov	r3, r0
 8007628:	60fb      	str	r3, [r7, #12]
 800762a:	e01c      	b.n	8007666 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	685c      	ldr	r4, [r3, #4]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007638:	b29e      	uxth	r6, r3
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007640:	4618      	mov	r0, r3
 8007642:	f7ff ffab 	bl	800759c <makeFreeRtosPriority>
 8007646:	4602      	mov	r2, r0
 8007648:	f107 030c 	add.w	r3, r7, #12
 800764c:	9301      	str	r3, [sp, #4]
 800764e:	9200      	str	r2, [sp, #0]
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	4632      	mov	r2, r6
 8007654:	4629      	mov	r1, r5
 8007656:	4620      	mov	r0, r4
 8007658:	f000 fed9 	bl	800840e <xTaskCreate>
 800765c:	4603      	mov	r3, r0
 800765e:	2b01      	cmp	r3, #1
 8007660:	d001      	beq.n	8007666 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007662:	2300      	movs	r3, #0
 8007664:	e000      	b.n	8007668 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007666:	68fb      	ldr	r3, [r7, #12]
}
 8007668:	4618      	mov	r0, r3
 800766a:	3714      	adds	r7, #20
 800766c:	46bd      	mov	sp, r7
 800766e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007670 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b084      	sub	sp, #16
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d001      	beq.n	8007686 <osDelay+0x16>
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	e000      	b.n	8007688 <osDelay+0x18>
 8007686:	2301      	movs	r3, #1
 8007688:	4618      	mov	r0, r3
 800768a:	f001 f80d 	bl	80086a8 <vTaskDelay>
  
  return osOK;
 800768e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007690:	4618      	mov	r0, r3
 8007692:	3710      	adds	r7, #16
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}

08007698 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b082      	sub	sp, #8
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d007      	beq.n	80076b8 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	4619      	mov	r1, r3
 80076ae:	2001      	movs	r0, #1
 80076b0:	f000 fa53 	bl	8007b5a <xQueueCreateMutexStatic>
 80076b4:	4603      	mov	r3, r0
 80076b6:	e003      	b.n	80076c0 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80076b8:	2001      	movs	r0, #1
 80076ba:	f000 fa36 	bl	8007b2a <xQueueCreateMutex>
 80076be:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3708      	adds	r7, #8
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}

080076c8 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80076c8:	b590      	push	{r4, r7, lr}
 80076ca:	b085      	sub	sp, #20
 80076cc:	af02      	add	r7, sp, #8
 80076ce:	6078      	str	r0, [r7, #4]
 80076d0:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d011      	beq.n	80076fe <osMessageCreate+0x36>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	68db      	ldr	r3, [r3, #12]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d00d      	beq.n	80076fe <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6818      	ldr	r0, [r3, #0]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6859      	ldr	r1, [r3, #4]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	689a      	ldr	r2, [r3, #8]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	68db      	ldr	r3, [r3, #12]
 80076f2:	2400      	movs	r4, #0
 80076f4:	9400      	str	r4, [sp, #0]
 80076f6:	f000 f927 	bl	8007948 <xQueueGenericCreateStatic>
 80076fa:	4603      	mov	r3, r0
 80076fc:	e008      	b.n	8007710 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6818      	ldr	r0, [r3, #0]
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	2200      	movs	r2, #0
 8007708:	4619      	mov	r1, r3
 800770a:	f000 f995 	bl	8007a38 <xQueueGenericCreate>
 800770e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8007710:	4618      	mov	r0, r3
 8007712:	370c      	adds	r7, #12
 8007714:	46bd      	mov	sp, r7
 8007716:	bd90      	pop	{r4, r7, pc}

08007718 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007718:	b480      	push	{r7}
 800771a:	b083      	sub	sp, #12
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f103 0208 	add.w	r2, r3, #8
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f04f 32ff 	mov.w	r2, #4294967295
 8007730:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f103 0208 	add.w	r2, r3, #8
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f103 0208 	add.w	r2, r3, #8
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2200      	movs	r2, #0
 800774a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800774c:	bf00      	nop
 800774e:	370c      	adds	r7, #12
 8007750:	46bd      	mov	sp, r7
 8007752:	bc80      	pop	{r7}
 8007754:	4770      	bx	lr

08007756 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007756:	b480      	push	{r7}
 8007758:	b083      	sub	sp, #12
 800775a:	af00      	add	r7, sp, #0
 800775c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2200      	movs	r2, #0
 8007762:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007764:	bf00      	nop
 8007766:	370c      	adds	r7, #12
 8007768:	46bd      	mov	sp, r7
 800776a:	bc80      	pop	{r7}
 800776c:	4770      	bx	lr

0800776e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800776e:	b480      	push	{r7}
 8007770:	b085      	sub	sp, #20
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
 8007776:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	68fa      	ldr	r2, [r7, #12]
 8007782:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	689a      	ldr	r2, [r3, #8]
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	683a      	ldr	r2, [r7, #0]
 8007792:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	683a      	ldr	r2, [r7, #0]
 8007798:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	1c5a      	adds	r2, r3, #1
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	601a      	str	r2, [r3, #0]
}
 80077aa:	bf00      	nop
 80077ac:	3714      	adds	r7, #20
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bc80      	pop	{r7}
 80077b2:	4770      	bx	lr

080077b4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80077b4:	b480      	push	{r7}
 80077b6:	b085      	sub	sp, #20
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077ca:	d103      	bne.n	80077d4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	691b      	ldr	r3, [r3, #16]
 80077d0:	60fb      	str	r3, [r7, #12]
 80077d2:	e00c      	b.n	80077ee <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	3308      	adds	r3, #8
 80077d8:	60fb      	str	r3, [r7, #12]
 80077da:	e002      	b.n	80077e2 <vListInsert+0x2e>
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	60fb      	str	r3, [r7, #12]
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	685b      	ldr	r3, [r3, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	68ba      	ldr	r2, [r7, #8]
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d2f6      	bcs.n	80077dc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	685a      	ldr	r2, [r3, #4]
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	685b      	ldr	r3, [r3, #4]
 80077fa:	683a      	ldr	r2, [r7, #0]
 80077fc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	68fa      	ldr	r2, [r7, #12]
 8007802:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	683a      	ldr	r2, [r7, #0]
 8007808:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	687a      	ldr	r2, [r7, #4]
 800780e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	1c5a      	adds	r2, r3, #1
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	601a      	str	r2, [r3, #0]
}
 800781a:	bf00      	nop
 800781c:	3714      	adds	r7, #20
 800781e:	46bd      	mov	sp, r7
 8007820:	bc80      	pop	{r7}
 8007822:	4770      	bx	lr

08007824 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007824:	b480      	push	{r7}
 8007826:	b085      	sub	sp, #20
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	691b      	ldr	r3, [r3, #16]
 8007830:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	687a      	ldr	r2, [r7, #4]
 8007838:	6892      	ldr	r2, [r2, #8]
 800783a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	6852      	ldr	r2, [r2, #4]
 8007844:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	687a      	ldr	r2, [r7, #4]
 800784c:	429a      	cmp	r2, r3
 800784e:	d103      	bne.n	8007858 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	689a      	ldr	r2, [r3, #8]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2200      	movs	r2, #0
 800785c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	1e5a      	subs	r2, r3, #1
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
}
 800786c:	4618      	mov	r0, r3
 800786e:	3714      	adds	r7, #20
 8007870:	46bd      	mov	sp, r7
 8007872:	bc80      	pop	{r7}
 8007874:	4770      	bx	lr
	...

08007878 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b084      	sub	sp, #16
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d10a      	bne.n	80078a2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800788c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007890:	f383 8811 	msr	BASEPRI, r3
 8007894:	f3bf 8f6f 	isb	sy
 8007898:	f3bf 8f4f 	dsb	sy
 800789c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800789e:	bf00      	nop
 80078a0:	e7fe      	b.n	80078a0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80078a2:	f002 f8b3 	bl	8009a0c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681a      	ldr	r2, [r3, #0]
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078ae:	68f9      	ldr	r1, [r7, #12]
 80078b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80078b2:	fb01 f303 	mul.w	r3, r1, r3
 80078b6:	441a      	add	r2, r3
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2200      	movs	r2, #0
 80078c0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681a      	ldr	r2, [r3, #0]
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078d2:	3b01      	subs	r3, #1
 80078d4:	68f9      	ldr	r1, [r7, #12]
 80078d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80078d8:	fb01 f303 	mul.w	r3, r1, r3
 80078dc:	441a      	add	r2, r3
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	22ff      	movs	r2, #255	; 0xff
 80078e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	22ff      	movs	r2, #255	; 0xff
 80078ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d114      	bne.n	8007922 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	691b      	ldr	r3, [r3, #16]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d01a      	beq.n	8007936 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	3310      	adds	r3, #16
 8007904:	4618      	mov	r0, r3
 8007906:	f001 f995 	bl	8008c34 <xTaskRemoveFromEventList>
 800790a:	4603      	mov	r3, r0
 800790c:	2b00      	cmp	r3, #0
 800790e:	d012      	beq.n	8007936 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007910:	4b0c      	ldr	r3, [pc, #48]	; (8007944 <xQueueGenericReset+0xcc>)
 8007912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007916:	601a      	str	r2, [r3, #0]
 8007918:	f3bf 8f4f 	dsb	sy
 800791c:	f3bf 8f6f 	isb	sy
 8007920:	e009      	b.n	8007936 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	3310      	adds	r3, #16
 8007926:	4618      	mov	r0, r3
 8007928:	f7ff fef6 	bl	8007718 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	3324      	adds	r3, #36	; 0x24
 8007930:	4618      	mov	r0, r3
 8007932:	f7ff fef1 	bl	8007718 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007936:	f002 f899 	bl	8009a6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800793a:	2301      	movs	r3, #1
}
 800793c:	4618      	mov	r0, r3
 800793e:	3710      	adds	r7, #16
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}
 8007944:	e000ed04 	.word	0xe000ed04

08007948 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007948:	b580      	push	{r7, lr}
 800794a:	b08e      	sub	sp, #56	; 0x38
 800794c:	af02      	add	r7, sp, #8
 800794e:	60f8      	str	r0, [r7, #12]
 8007950:	60b9      	str	r1, [r7, #8]
 8007952:	607a      	str	r2, [r7, #4]
 8007954:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d10a      	bne.n	8007972 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800795c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007960:	f383 8811 	msr	BASEPRI, r3
 8007964:	f3bf 8f6f 	isb	sy
 8007968:	f3bf 8f4f 	dsb	sy
 800796c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800796e:	bf00      	nop
 8007970:	e7fe      	b.n	8007970 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d10a      	bne.n	800798e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800797c:	f383 8811 	msr	BASEPRI, r3
 8007980:	f3bf 8f6f 	isb	sy
 8007984:	f3bf 8f4f 	dsb	sy
 8007988:	627b      	str	r3, [r7, #36]	; 0x24
}
 800798a:	bf00      	nop
 800798c:	e7fe      	b.n	800798c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d002      	beq.n	800799a <xQueueGenericCreateStatic+0x52>
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d001      	beq.n	800799e <xQueueGenericCreateStatic+0x56>
 800799a:	2301      	movs	r3, #1
 800799c:	e000      	b.n	80079a0 <xQueueGenericCreateStatic+0x58>
 800799e:	2300      	movs	r3, #0
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d10a      	bne.n	80079ba <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80079a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a8:	f383 8811 	msr	BASEPRI, r3
 80079ac:	f3bf 8f6f 	isb	sy
 80079b0:	f3bf 8f4f 	dsb	sy
 80079b4:	623b      	str	r3, [r7, #32]
}
 80079b6:	bf00      	nop
 80079b8:	e7fe      	b.n	80079b8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d102      	bne.n	80079c6 <xQueueGenericCreateStatic+0x7e>
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d101      	bne.n	80079ca <xQueueGenericCreateStatic+0x82>
 80079c6:	2301      	movs	r3, #1
 80079c8:	e000      	b.n	80079cc <xQueueGenericCreateStatic+0x84>
 80079ca:	2300      	movs	r3, #0
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d10a      	bne.n	80079e6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80079d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d4:	f383 8811 	msr	BASEPRI, r3
 80079d8:	f3bf 8f6f 	isb	sy
 80079dc:	f3bf 8f4f 	dsb	sy
 80079e0:	61fb      	str	r3, [r7, #28]
}
 80079e2:	bf00      	nop
 80079e4:	e7fe      	b.n	80079e4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80079e6:	2348      	movs	r3, #72	; 0x48
 80079e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	2b48      	cmp	r3, #72	; 0x48
 80079ee:	d00a      	beq.n	8007a06 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80079f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f4:	f383 8811 	msr	BASEPRI, r3
 80079f8:	f3bf 8f6f 	isb	sy
 80079fc:	f3bf 8f4f 	dsb	sy
 8007a00:	61bb      	str	r3, [r7, #24]
}
 8007a02:	bf00      	nop
 8007a04:	e7fe      	b.n	8007a04 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007a06:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d00d      	beq.n	8007a2e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a14:	2201      	movs	r2, #1
 8007a16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007a1a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a20:	9300      	str	r3, [sp, #0]
 8007a22:	4613      	mov	r3, r2
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	68b9      	ldr	r1, [r7, #8]
 8007a28:	68f8      	ldr	r0, [r7, #12]
 8007a2a:	f000 f845 	bl	8007ab8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3730      	adds	r7, #48	; 0x30
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}

08007a38 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b08a      	sub	sp, #40	; 0x28
 8007a3c:	af02      	add	r7, sp, #8
 8007a3e:	60f8      	str	r0, [r7, #12]
 8007a40:	60b9      	str	r1, [r7, #8]
 8007a42:	4613      	mov	r3, r2
 8007a44:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d10a      	bne.n	8007a62 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a50:	f383 8811 	msr	BASEPRI, r3
 8007a54:	f3bf 8f6f 	isb	sy
 8007a58:	f3bf 8f4f 	dsb	sy
 8007a5c:	613b      	str	r3, [r7, #16]
}
 8007a5e:	bf00      	nop
 8007a60:	e7fe      	b.n	8007a60 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d102      	bne.n	8007a6e <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	61fb      	str	r3, [r7, #28]
 8007a6c:	e004      	b.n	8007a78 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	68ba      	ldr	r2, [r7, #8]
 8007a72:	fb02 f303 	mul.w	r3, r2, r3
 8007a76:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007a78:	69fb      	ldr	r3, [r7, #28]
 8007a7a:	3348      	adds	r3, #72	; 0x48
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f002 f8c5 	bl	8009c0c <pvPortMalloc>
 8007a82:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007a84:	69bb      	ldr	r3, [r7, #24]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d011      	beq.n	8007aae <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007a8a:	69bb      	ldr	r3, [r7, #24]
 8007a8c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	3348      	adds	r3, #72	; 0x48
 8007a92:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007a94:	69bb      	ldr	r3, [r7, #24]
 8007a96:	2200      	movs	r2, #0
 8007a98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007a9c:	79fa      	ldrb	r2, [r7, #7]
 8007a9e:	69bb      	ldr	r3, [r7, #24]
 8007aa0:	9300      	str	r3, [sp, #0]
 8007aa2:	4613      	mov	r3, r2
 8007aa4:	697a      	ldr	r2, [r7, #20]
 8007aa6:	68b9      	ldr	r1, [r7, #8]
 8007aa8:	68f8      	ldr	r0, [r7, #12]
 8007aaa:	f000 f805 	bl	8007ab8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007aae:	69bb      	ldr	r3, [r7, #24]
	}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3720      	adds	r7, #32
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}

08007ab8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b084      	sub	sp, #16
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	60f8      	str	r0, [r7, #12]
 8007ac0:	60b9      	str	r1, [r7, #8]
 8007ac2:	607a      	str	r2, [r7, #4]
 8007ac4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d103      	bne.n	8007ad4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007acc:	69bb      	ldr	r3, [r7, #24]
 8007ace:	69ba      	ldr	r2, [r7, #24]
 8007ad0:	601a      	str	r2, [r3, #0]
 8007ad2:	e002      	b.n	8007ada <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007ad4:	69bb      	ldr	r3, [r7, #24]
 8007ad6:	687a      	ldr	r2, [r7, #4]
 8007ad8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007ada:	69bb      	ldr	r3, [r7, #24]
 8007adc:	68fa      	ldr	r2, [r7, #12]
 8007ade:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007ae0:	69bb      	ldr	r3, [r7, #24]
 8007ae2:	68ba      	ldr	r2, [r7, #8]
 8007ae4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007ae6:	2101      	movs	r1, #1
 8007ae8:	69b8      	ldr	r0, [r7, #24]
 8007aea:	f7ff fec5 	bl	8007878 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007aee:	bf00      	nop
 8007af0:	3710      	adds	r7, #16
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}

08007af6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007af6:	b580      	push	{r7, lr}
 8007af8:	b082      	sub	sp, #8
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d00e      	beq.n	8007b22 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2200      	movs	r2, #0
 8007b08:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2200      	movs	r2, #0
 8007b14:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007b16:	2300      	movs	r3, #0
 8007b18:	2200      	movs	r2, #0
 8007b1a:	2100      	movs	r1, #0
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f000 f837 	bl	8007b90 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8007b22:	bf00      	nop
 8007b24:	3708      	adds	r7, #8
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}

08007b2a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007b2a:	b580      	push	{r7, lr}
 8007b2c:	b086      	sub	sp, #24
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	4603      	mov	r3, r0
 8007b32:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007b34:	2301      	movs	r3, #1
 8007b36:	617b      	str	r3, [r7, #20]
 8007b38:	2300      	movs	r3, #0
 8007b3a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007b3c:	79fb      	ldrb	r3, [r7, #7]
 8007b3e:	461a      	mov	r2, r3
 8007b40:	6939      	ldr	r1, [r7, #16]
 8007b42:	6978      	ldr	r0, [r7, #20]
 8007b44:	f7ff ff78 	bl	8007a38 <xQueueGenericCreate>
 8007b48:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007b4a:	68f8      	ldr	r0, [r7, #12]
 8007b4c:	f7ff ffd3 	bl	8007af6 <prvInitialiseMutex>

		return xNewQueue;
 8007b50:	68fb      	ldr	r3, [r7, #12]
	}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3718      	adds	r7, #24
 8007b56:	46bd      	mov	sp, r7
 8007b58:	bd80      	pop	{r7, pc}

08007b5a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007b5a:	b580      	push	{r7, lr}
 8007b5c:	b088      	sub	sp, #32
 8007b5e:	af02      	add	r7, sp, #8
 8007b60:	4603      	mov	r3, r0
 8007b62:	6039      	str	r1, [r7, #0]
 8007b64:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007b66:	2301      	movs	r3, #1
 8007b68:	617b      	str	r3, [r7, #20]
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007b6e:	79fb      	ldrb	r3, [r7, #7]
 8007b70:	9300      	str	r3, [sp, #0]
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	2200      	movs	r2, #0
 8007b76:	6939      	ldr	r1, [r7, #16]
 8007b78:	6978      	ldr	r0, [r7, #20]
 8007b7a:	f7ff fee5 	bl	8007948 <xQueueGenericCreateStatic>
 8007b7e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007b80:	68f8      	ldr	r0, [r7, #12]
 8007b82:	f7ff ffb8 	bl	8007af6 <prvInitialiseMutex>

		return xNewQueue;
 8007b86:	68fb      	ldr	r3, [r7, #12]
	}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3718      	adds	r7, #24
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b08e      	sub	sp, #56	; 0x38
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	60f8      	str	r0, [r7, #12]
 8007b98:	60b9      	str	r1, [r7, #8]
 8007b9a:	607a      	str	r2, [r7, #4]
 8007b9c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d10a      	bne.n	8007bc2 <xQueueGenericSend+0x32>
	__asm volatile
 8007bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb0:	f383 8811 	msr	BASEPRI, r3
 8007bb4:	f3bf 8f6f 	isb	sy
 8007bb8:	f3bf 8f4f 	dsb	sy
 8007bbc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007bbe:	bf00      	nop
 8007bc0:	e7fe      	b.n	8007bc0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d103      	bne.n	8007bd0 <xQueueGenericSend+0x40>
 8007bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d101      	bne.n	8007bd4 <xQueueGenericSend+0x44>
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	e000      	b.n	8007bd6 <xQueueGenericSend+0x46>
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d10a      	bne.n	8007bf0 <xQueueGenericSend+0x60>
	__asm volatile
 8007bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bde:	f383 8811 	msr	BASEPRI, r3
 8007be2:	f3bf 8f6f 	isb	sy
 8007be6:	f3bf 8f4f 	dsb	sy
 8007bea:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007bec:	bf00      	nop
 8007bee:	e7fe      	b.n	8007bee <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	2b02      	cmp	r3, #2
 8007bf4:	d103      	bne.n	8007bfe <xQueueGenericSend+0x6e>
 8007bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bfa:	2b01      	cmp	r3, #1
 8007bfc:	d101      	bne.n	8007c02 <xQueueGenericSend+0x72>
 8007bfe:	2301      	movs	r3, #1
 8007c00:	e000      	b.n	8007c04 <xQueueGenericSend+0x74>
 8007c02:	2300      	movs	r3, #0
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d10a      	bne.n	8007c1e <xQueueGenericSend+0x8e>
	__asm volatile
 8007c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c0c:	f383 8811 	msr	BASEPRI, r3
 8007c10:	f3bf 8f6f 	isb	sy
 8007c14:	f3bf 8f4f 	dsb	sy
 8007c18:	623b      	str	r3, [r7, #32]
}
 8007c1a:	bf00      	nop
 8007c1c:	e7fe      	b.n	8007c1c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007c1e:	f001 f9cb 	bl	8008fb8 <xTaskGetSchedulerState>
 8007c22:	4603      	mov	r3, r0
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d102      	bne.n	8007c2e <xQueueGenericSend+0x9e>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d101      	bne.n	8007c32 <xQueueGenericSend+0xa2>
 8007c2e:	2301      	movs	r3, #1
 8007c30:	e000      	b.n	8007c34 <xQueueGenericSend+0xa4>
 8007c32:	2300      	movs	r3, #0
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d10a      	bne.n	8007c4e <xQueueGenericSend+0xbe>
	__asm volatile
 8007c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c3c:	f383 8811 	msr	BASEPRI, r3
 8007c40:	f3bf 8f6f 	isb	sy
 8007c44:	f3bf 8f4f 	dsb	sy
 8007c48:	61fb      	str	r3, [r7, #28]
}
 8007c4a:	bf00      	nop
 8007c4c:	e7fe      	b.n	8007c4c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007c4e:	f001 fedd 	bl	8009a0c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c5a:	429a      	cmp	r2, r3
 8007c5c:	d302      	bcc.n	8007c64 <xQueueGenericSend+0xd4>
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	2b02      	cmp	r3, #2
 8007c62:	d129      	bne.n	8007cb8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007c64:	683a      	ldr	r2, [r7, #0]
 8007c66:	68b9      	ldr	r1, [r7, #8]
 8007c68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c6a:	f000 fa07 	bl	800807c <prvCopyDataToQueue>
 8007c6e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d010      	beq.n	8007c9a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c7a:	3324      	adds	r3, #36	; 0x24
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f000 ffd9 	bl	8008c34 <xTaskRemoveFromEventList>
 8007c82:	4603      	mov	r3, r0
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d013      	beq.n	8007cb0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007c88:	4b3f      	ldr	r3, [pc, #252]	; (8007d88 <xQueueGenericSend+0x1f8>)
 8007c8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c8e:	601a      	str	r2, [r3, #0]
 8007c90:	f3bf 8f4f 	dsb	sy
 8007c94:	f3bf 8f6f 	isb	sy
 8007c98:	e00a      	b.n	8007cb0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d007      	beq.n	8007cb0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007ca0:	4b39      	ldr	r3, [pc, #228]	; (8007d88 <xQueueGenericSend+0x1f8>)
 8007ca2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ca6:	601a      	str	r2, [r3, #0]
 8007ca8:	f3bf 8f4f 	dsb	sy
 8007cac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007cb0:	f001 fedc 	bl	8009a6c <vPortExitCritical>
				return pdPASS;
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	e063      	b.n	8007d80 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d103      	bne.n	8007cc6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007cbe:	f001 fed5 	bl	8009a6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	e05c      	b.n	8007d80 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d106      	bne.n	8007cda <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007ccc:	f107 0314 	add.w	r3, r7, #20
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f001 f811 	bl	8008cf8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007cda:	f001 fec7 	bl	8009a6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007cde:	f000 fd87 	bl	80087f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007ce2:	f001 fe93 	bl	8009a0c <vPortEnterCritical>
 8007ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007cec:	b25b      	sxtb	r3, r3
 8007cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cf2:	d103      	bne.n	8007cfc <xQueueGenericSend+0x16c>
 8007cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cfe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d02:	b25b      	sxtb	r3, r3
 8007d04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d08:	d103      	bne.n	8007d12 <xQueueGenericSend+0x182>
 8007d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d12:	f001 feab 	bl	8009a6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007d16:	1d3a      	adds	r2, r7, #4
 8007d18:	f107 0314 	add.w	r3, r7, #20
 8007d1c:	4611      	mov	r1, r2
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f001 f800 	bl	8008d24 <xTaskCheckForTimeOut>
 8007d24:	4603      	mov	r3, r0
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d124      	bne.n	8007d74 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007d2a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d2c:	f000 fa9e 	bl	800826c <prvIsQueueFull>
 8007d30:	4603      	mov	r3, r0
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d018      	beq.n	8007d68 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d38:	3310      	adds	r3, #16
 8007d3a:	687a      	ldr	r2, [r7, #4]
 8007d3c:	4611      	mov	r1, r2
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f000 ff28 	bl	8008b94 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007d44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d46:	f000 fa29 	bl	800819c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007d4a:	f000 fd5f 	bl	800880c <xTaskResumeAll>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	f47f af7c 	bne.w	8007c4e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007d56:	4b0c      	ldr	r3, [pc, #48]	; (8007d88 <xQueueGenericSend+0x1f8>)
 8007d58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d5c:	601a      	str	r2, [r3, #0]
 8007d5e:	f3bf 8f4f 	dsb	sy
 8007d62:	f3bf 8f6f 	isb	sy
 8007d66:	e772      	b.n	8007c4e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007d68:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d6a:	f000 fa17 	bl	800819c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007d6e:	f000 fd4d 	bl	800880c <xTaskResumeAll>
 8007d72:	e76c      	b.n	8007c4e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007d74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d76:	f000 fa11 	bl	800819c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007d7a:	f000 fd47 	bl	800880c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007d7e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3738      	adds	r7, #56	; 0x38
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}
 8007d88:	e000ed04 	.word	0xe000ed04

08007d8c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b08e      	sub	sp, #56	; 0x38
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	60f8      	str	r0, [r7, #12]
 8007d94:	60b9      	str	r1, [r7, #8]
 8007d96:	607a      	str	r2, [r7, #4]
 8007d98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d10a      	bne.n	8007dba <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da8:	f383 8811 	msr	BASEPRI, r3
 8007dac:	f3bf 8f6f 	isb	sy
 8007db0:	f3bf 8f4f 	dsb	sy
 8007db4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007db6:	bf00      	nop
 8007db8:	e7fe      	b.n	8007db8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d103      	bne.n	8007dc8 <xQueueGenericSendFromISR+0x3c>
 8007dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d101      	bne.n	8007dcc <xQueueGenericSendFromISR+0x40>
 8007dc8:	2301      	movs	r3, #1
 8007dca:	e000      	b.n	8007dce <xQueueGenericSendFromISR+0x42>
 8007dcc:	2300      	movs	r3, #0
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d10a      	bne.n	8007de8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd6:	f383 8811 	msr	BASEPRI, r3
 8007dda:	f3bf 8f6f 	isb	sy
 8007dde:	f3bf 8f4f 	dsb	sy
 8007de2:	623b      	str	r3, [r7, #32]
}
 8007de4:	bf00      	nop
 8007de6:	e7fe      	b.n	8007de6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	2b02      	cmp	r3, #2
 8007dec:	d103      	bne.n	8007df6 <xQueueGenericSendFromISR+0x6a>
 8007dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007df2:	2b01      	cmp	r3, #1
 8007df4:	d101      	bne.n	8007dfa <xQueueGenericSendFromISR+0x6e>
 8007df6:	2301      	movs	r3, #1
 8007df8:	e000      	b.n	8007dfc <xQueueGenericSendFromISR+0x70>
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d10a      	bne.n	8007e16 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e04:	f383 8811 	msr	BASEPRI, r3
 8007e08:	f3bf 8f6f 	isb	sy
 8007e0c:	f3bf 8f4f 	dsb	sy
 8007e10:	61fb      	str	r3, [r7, #28]
}
 8007e12:	bf00      	nop
 8007e14:	e7fe      	b.n	8007e14 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007e16:	f001 febb 	bl	8009b90 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007e1a:	f3ef 8211 	mrs	r2, BASEPRI
 8007e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e22:	f383 8811 	msr	BASEPRI, r3
 8007e26:	f3bf 8f6f 	isb	sy
 8007e2a:	f3bf 8f4f 	dsb	sy
 8007e2e:	61ba      	str	r2, [r7, #24]
 8007e30:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007e32:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007e34:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e3e:	429a      	cmp	r2, r3
 8007e40:	d302      	bcc.n	8007e48 <xQueueGenericSendFromISR+0xbc>
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	2b02      	cmp	r3, #2
 8007e46:	d12c      	bne.n	8007ea2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007e52:	683a      	ldr	r2, [r7, #0]
 8007e54:	68b9      	ldr	r1, [r7, #8]
 8007e56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e58:	f000 f910 	bl	800807c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007e5c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e64:	d112      	bne.n	8007e8c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d016      	beq.n	8007e9c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e70:	3324      	adds	r3, #36	; 0x24
 8007e72:	4618      	mov	r0, r3
 8007e74:	f000 fede 	bl	8008c34 <xTaskRemoveFromEventList>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d00e      	beq.n	8007e9c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d00b      	beq.n	8007e9c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2201      	movs	r2, #1
 8007e88:	601a      	str	r2, [r3, #0]
 8007e8a:	e007      	b.n	8007e9c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007e8c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007e90:	3301      	adds	r3, #1
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	b25a      	sxtb	r2, r3
 8007e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007ea0:	e001      	b.n	8007ea6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	637b      	str	r3, [r7, #52]	; 0x34
 8007ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ea8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007eb0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007eb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3738      	adds	r7, #56	; 0x38
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b08c      	sub	sp, #48	; 0x30
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	60b9      	str	r1, [r7, #8]
 8007ec6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d10a      	bne.n	8007eec <xQueueReceive+0x30>
	__asm volatile
 8007ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eda:	f383 8811 	msr	BASEPRI, r3
 8007ede:	f3bf 8f6f 	isb	sy
 8007ee2:	f3bf 8f4f 	dsb	sy
 8007ee6:	623b      	str	r3, [r7, #32]
}
 8007ee8:	bf00      	nop
 8007eea:	e7fe      	b.n	8007eea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d103      	bne.n	8007efa <xQueueReceive+0x3e>
 8007ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d101      	bne.n	8007efe <xQueueReceive+0x42>
 8007efa:	2301      	movs	r3, #1
 8007efc:	e000      	b.n	8007f00 <xQueueReceive+0x44>
 8007efe:	2300      	movs	r3, #0
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d10a      	bne.n	8007f1a <xQueueReceive+0x5e>
	__asm volatile
 8007f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f08:	f383 8811 	msr	BASEPRI, r3
 8007f0c:	f3bf 8f6f 	isb	sy
 8007f10:	f3bf 8f4f 	dsb	sy
 8007f14:	61fb      	str	r3, [r7, #28]
}
 8007f16:	bf00      	nop
 8007f18:	e7fe      	b.n	8007f18 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007f1a:	f001 f84d 	bl	8008fb8 <xTaskGetSchedulerState>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d102      	bne.n	8007f2a <xQueueReceive+0x6e>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d101      	bne.n	8007f2e <xQueueReceive+0x72>
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	e000      	b.n	8007f30 <xQueueReceive+0x74>
 8007f2e:	2300      	movs	r3, #0
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d10a      	bne.n	8007f4a <xQueueReceive+0x8e>
	__asm volatile
 8007f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f38:	f383 8811 	msr	BASEPRI, r3
 8007f3c:	f3bf 8f6f 	isb	sy
 8007f40:	f3bf 8f4f 	dsb	sy
 8007f44:	61bb      	str	r3, [r7, #24]
}
 8007f46:	bf00      	nop
 8007f48:	e7fe      	b.n	8007f48 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007f4a:	f001 fd5f 	bl	8009a0c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f52:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d01f      	beq.n	8007f9a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007f5a:	68b9      	ldr	r1, [r7, #8]
 8007f5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f5e:	f000 f8f7 	bl	8008150 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f64:	1e5a      	subs	r2, r3, #1
 8007f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f68:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f6c:	691b      	ldr	r3, [r3, #16]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d00f      	beq.n	8007f92 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f74:	3310      	adds	r3, #16
 8007f76:	4618      	mov	r0, r3
 8007f78:	f000 fe5c 	bl	8008c34 <xTaskRemoveFromEventList>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d007      	beq.n	8007f92 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007f82:	4b3d      	ldr	r3, [pc, #244]	; (8008078 <xQueueReceive+0x1bc>)
 8007f84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f88:	601a      	str	r2, [r3, #0]
 8007f8a:	f3bf 8f4f 	dsb	sy
 8007f8e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007f92:	f001 fd6b 	bl	8009a6c <vPortExitCritical>
				return pdPASS;
 8007f96:	2301      	movs	r3, #1
 8007f98:	e069      	b.n	800806e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d103      	bne.n	8007fa8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007fa0:	f001 fd64 	bl	8009a6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	e062      	b.n	800806e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d106      	bne.n	8007fbc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007fae:	f107 0310 	add.w	r3, r7, #16
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f000 fea0 	bl	8008cf8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007fbc:	f001 fd56 	bl	8009a6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007fc0:	f000 fc16 	bl	80087f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007fc4:	f001 fd22 	bl	8009a0c <vPortEnterCritical>
 8007fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007fce:	b25b      	sxtb	r3, r3
 8007fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fd4:	d103      	bne.n	8007fde <xQueueReceive+0x122>
 8007fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd8:	2200      	movs	r2, #0
 8007fda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fe0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007fe4:	b25b      	sxtb	r3, r3
 8007fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fea:	d103      	bne.n	8007ff4 <xQueueReceive+0x138>
 8007fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fee:	2200      	movs	r2, #0
 8007ff0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ff4:	f001 fd3a 	bl	8009a6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007ff8:	1d3a      	adds	r2, r7, #4
 8007ffa:	f107 0310 	add.w	r3, r7, #16
 8007ffe:	4611      	mov	r1, r2
 8008000:	4618      	mov	r0, r3
 8008002:	f000 fe8f 	bl	8008d24 <xTaskCheckForTimeOut>
 8008006:	4603      	mov	r3, r0
 8008008:	2b00      	cmp	r3, #0
 800800a:	d123      	bne.n	8008054 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800800c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800800e:	f000 f917 	bl	8008240 <prvIsQueueEmpty>
 8008012:	4603      	mov	r3, r0
 8008014:	2b00      	cmp	r3, #0
 8008016:	d017      	beq.n	8008048 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800801a:	3324      	adds	r3, #36	; 0x24
 800801c:	687a      	ldr	r2, [r7, #4]
 800801e:	4611      	mov	r1, r2
 8008020:	4618      	mov	r0, r3
 8008022:	f000 fdb7 	bl	8008b94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008026:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008028:	f000 f8b8 	bl	800819c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800802c:	f000 fbee 	bl	800880c <xTaskResumeAll>
 8008030:	4603      	mov	r3, r0
 8008032:	2b00      	cmp	r3, #0
 8008034:	d189      	bne.n	8007f4a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008036:	4b10      	ldr	r3, [pc, #64]	; (8008078 <xQueueReceive+0x1bc>)
 8008038:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800803c:	601a      	str	r2, [r3, #0]
 800803e:	f3bf 8f4f 	dsb	sy
 8008042:	f3bf 8f6f 	isb	sy
 8008046:	e780      	b.n	8007f4a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008048:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800804a:	f000 f8a7 	bl	800819c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800804e:	f000 fbdd 	bl	800880c <xTaskResumeAll>
 8008052:	e77a      	b.n	8007f4a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008054:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008056:	f000 f8a1 	bl	800819c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800805a:	f000 fbd7 	bl	800880c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800805e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008060:	f000 f8ee 	bl	8008240 <prvIsQueueEmpty>
 8008064:	4603      	mov	r3, r0
 8008066:	2b00      	cmp	r3, #0
 8008068:	f43f af6f 	beq.w	8007f4a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800806c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800806e:	4618      	mov	r0, r3
 8008070:	3730      	adds	r7, #48	; 0x30
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
 8008076:	bf00      	nop
 8008078:	e000ed04 	.word	0xe000ed04

0800807c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b086      	sub	sp, #24
 8008080:	af00      	add	r7, sp, #0
 8008082:	60f8      	str	r0, [r7, #12]
 8008084:	60b9      	str	r1, [r7, #8]
 8008086:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008088:	2300      	movs	r3, #0
 800808a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008090:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008096:	2b00      	cmp	r3, #0
 8008098:	d10d      	bne.n	80080b6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d14d      	bne.n	800813e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	689b      	ldr	r3, [r3, #8]
 80080a6:	4618      	mov	r0, r3
 80080a8:	f000 ffa4 	bl	8008ff4 <xTaskPriorityDisinherit>
 80080ac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2200      	movs	r2, #0
 80080b2:	609a      	str	r2, [r3, #8]
 80080b4:	e043      	b.n	800813e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d119      	bne.n	80080f0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	6858      	ldr	r0, [r3, #4]
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080c4:	461a      	mov	r2, r3
 80080c6:	68b9      	ldr	r1, [r7, #8]
 80080c8:	f002 f89b 	bl	800a202 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	685a      	ldr	r2, [r3, #4]
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080d4:	441a      	add	r2, r3
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	685a      	ldr	r2, [r3, #4]
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	689b      	ldr	r3, [r3, #8]
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d32b      	bcc.n	800813e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681a      	ldr	r2, [r3, #0]
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	605a      	str	r2, [r3, #4]
 80080ee:	e026      	b.n	800813e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	68d8      	ldr	r0, [r3, #12]
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080f8:	461a      	mov	r2, r3
 80080fa:	68b9      	ldr	r1, [r7, #8]
 80080fc:	f002 f881 	bl	800a202 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	68da      	ldr	r2, [r3, #12]
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008108:	425b      	negs	r3, r3
 800810a:	441a      	add	r2, r3
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	68da      	ldr	r2, [r3, #12]
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	429a      	cmp	r2, r3
 800811a:	d207      	bcs.n	800812c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	689a      	ldr	r2, [r3, #8]
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008124:	425b      	negs	r3, r3
 8008126:	441a      	add	r2, r3
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2b02      	cmp	r3, #2
 8008130:	d105      	bne.n	800813e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d002      	beq.n	800813e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	3b01      	subs	r3, #1
 800813c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	1c5a      	adds	r2, r3, #1
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008146:	697b      	ldr	r3, [r7, #20]
}
 8008148:	4618      	mov	r0, r3
 800814a:	3718      	adds	r7, #24
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}

08008150 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b082      	sub	sp, #8
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800815e:	2b00      	cmp	r3, #0
 8008160:	d018      	beq.n	8008194 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	68da      	ldr	r2, [r3, #12]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800816a:	441a      	add	r2, r3
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	68da      	ldr	r2, [r3, #12]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	689b      	ldr	r3, [r3, #8]
 8008178:	429a      	cmp	r2, r3
 800817a:	d303      	bcc.n	8008184 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681a      	ldr	r2, [r3, #0]
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	68d9      	ldr	r1, [r3, #12]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800818c:	461a      	mov	r2, r3
 800818e:	6838      	ldr	r0, [r7, #0]
 8008190:	f002 f837 	bl	800a202 <memcpy>
	}
}
 8008194:	bf00      	nop
 8008196:	3708      	adds	r7, #8
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}

0800819c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b084      	sub	sp, #16
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80081a4:	f001 fc32 	bl	8009a0c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80081ae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80081b0:	e011      	b.n	80081d6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d012      	beq.n	80081e0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	3324      	adds	r3, #36	; 0x24
 80081be:	4618      	mov	r0, r3
 80081c0:	f000 fd38 	bl	8008c34 <xTaskRemoveFromEventList>
 80081c4:	4603      	mov	r3, r0
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d001      	beq.n	80081ce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80081ca:	f000 fe0d 	bl	8008de8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80081ce:	7bfb      	ldrb	r3, [r7, #15]
 80081d0:	3b01      	subs	r3, #1
 80081d2:	b2db      	uxtb	r3, r3
 80081d4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80081d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	dce9      	bgt.n	80081b2 <prvUnlockQueue+0x16>
 80081de:	e000      	b.n	80081e2 <prvUnlockQueue+0x46>
					break;
 80081e0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	22ff      	movs	r2, #255	; 0xff
 80081e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80081ea:	f001 fc3f 	bl	8009a6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80081ee:	f001 fc0d 	bl	8009a0c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80081f8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80081fa:	e011      	b.n	8008220 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	691b      	ldr	r3, [r3, #16]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d012      	beq.n	800822a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	3310      	adds	r3, #16
 8008208:	4618      	mov	r0, r3
 800820a:	f000 fd13 	bl	8008c34 <xTaskRemoveFromEventList>
 800820e:	4603      	mov	r3, r0
 8008210:	2b00      	cmp	r3, #0
 8008212:	d001      	beq.n	8008218 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008214:	f000 fde8 	bl	8008de8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008218:	7bbb      	ldrb	r3, [r7, #14]
 800821a:	3b01      	subs	r3, #1
 800821c:	b2db      	uxtb	r3, r3
 800821e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008220:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008224:	2b00      	cmp	r3, #0
 8008226:	dce9      	bgt.n	80081fc <prvUnlockQueue+0x60>
 8008228:	e000      	b.n	800822c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800822a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	22ff      	movs	r2, #255	; 0xff
 8008230:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008234:	f001 fc1a 	bl	8009a6c <vPortExitCritical>
}
 8008238:	bf00      	nop
 800823a:	3710      	adds	r7, #16
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}

08008240 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b084      	sub	sp, #16
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008248:	f001 fbe0 	bl	8009a0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008250:	2b00      	cmp	r3, #0
 8008252:	d102      	bne.n	800825a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008254:	2301      	movs	r3, #1
 8008256:	60fb      	str	r3, [r7, #12]
 8008258:	e001      	b.n	800825e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800825a:	2300      	movs	r3, #0
 800825c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800825e:	f001 fc05 	bl	8009a6c <vPortExitCritical>

	return xReturn;
 8008262:	68fb      	ldr	r3, [r7, #12]
}
 8008264:	4618      	mov	r0, r3
 8008266:	3710      	adds	r7, #16
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}

0800826c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b084      	sub	sp, #16
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008274:	f001 fbca 	bl	8009a0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008280:	429a      	cmp	r2, r3
 8008282:	d102      	bne.n	800828a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008284:	2301      	movs	r3, #1
 8008286:	60fb      	str	r3, [r7, #12]
 8008288:	e001      	b.n	800828e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800828a:	2300      	movs	r3, #0
 800828c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800828e:	f001 fbed 	bl	8009a6c <vPortExitCritical>

	return xReturn;
 8008292:	68fb      	ldr	r3, [r7, #12]
}
 8008294:	4618      	mov	r0, r3
 8008296:	3710      	adds	r7, #16
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800829c:	b480      	push	{r7}
 800829e:	b085      	sub	sp, #20
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80082a6:	2300      	movs	r3, #0
 80082a8:	60fb      	str	r3, [r7, #12]
 80082aa:	e014      	b.n	80082d6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80082ac:	4a0e      	ldr	r2, [pc, #56]	; (80082e8 <vQueueAddToRegistry+0x4c>)
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d10b      	bne.n	80082d0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80082b8:	490b      	ldr	r1, [pc, #44]	; (80082e8 <vQueueAddToRegistry+0x4c>)
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	683a      	ldr	r2, [r7, #0]
 80082be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80082c2:	4a09      	ldr	r2, [pc, #36]	; (80082e8 <vQueueAddToRegistry+0x4c>)
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	00db      	lsls	r3, r3, #3
 80082c8:	4413      	add	r3, r2
 80082ca:	687a      	ldr	r2, [r7, #4]
 80082cc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80082ce:	e006      	b.n	80082de <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	3301      	adds	r3, #1
 80082d4:	60fb      	str	r3, [r7, #12]
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	2b07      	cmp	r3, #7
 80082da:	d9e7      	bls.n	80082ac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80082dc:	bf00      	nop
 80082de:	bf00      	nop
 80082e0:	3714      	adds	r7, #20
 80082e2:	46bd      	mov	sp, r7
 80082e4:	bc80      	pop	{r7}
 80082e6:	4770      	bx	lr
 80082e8:	20000da0 	.word	0x20000da0

080082ec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b086      	sub	sp, #24
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	60f8      	str	r0, [r7, #12]
 80082f4:	60b9      	str	r1, [r7, #8]
 80082f6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80082fc:	f001 fb86 	bl	8009a0c <vPortEnterCritical>
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008306:	b25b      	sxtb	r3, r3
 8008308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800830c:	d103      	bne.n	8008316 <vQueueWaitForMessageRestricted+0x2a>
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	2200      	movs	r2, #0
 8008312:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800831c:	b25b      	sxtb	r3, r3
 800831e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008322:	d103      	bne.n	800832c <vQueueWaitForMessageRestricted+0x40>
 8008324:	697b      	ldr	r3, [r7, #20]
 8008326:	2200      	movs	r2, #0
 8008328:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800832c:	f001 fb9e 	bl	8009a6c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008334:	2b00      	cmp	r3, #0
 8008336:	d106      	bne.n	8008346 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	3324      	adds	r3, #36	; 0x24
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	68b9      	ldr	r1, [r7, #8]
 8008340:	4618      	mov	r0, r3
 8008342:	f000 fc4b 	bl	8008bdc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008346:	6978      	ldr	r0, [r7, #20]
 8008348:	f7ff ff28 	bl	800819c <prvUnlockQueue>
	}
 800834c:	bf00      	nop
 800834e:	3718      	adds	r7, #24
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}

08008354 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008354:	b580      	push	{r7, lr}
 8008356:	b08e      	sub	sp, #56	; 0x38
 8008358:	af04      	add	r7, sp, #16
 800835a:	60f8      	str	r0, [r7, #12]
 800835c:	60b9      	str	r1, [r7, #8]
 800835e:	607a      	str	r2, [r7, #4]
 8008360:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008364:	2b00      	cmp	r3, #0
 8008366:	d10a      	bne.n	800837e <xTaskCreateStatic+0x2a>
	__asm volatile
 8008368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800836c:	f383 8811 	msr	BASEPRI, r3
 8008370:	f3bf 8f6f 	isb	sy
 8008374:	f3bf 8f4f 	dsb	sy
 8008378:	623b      	str	r3, [r7, #32]
}
 800837a:	bf00      	nop
 800837c:	e7fe      	b.n	800837c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800837e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008380:	2b00      	cmp	r3, #0
 8008382:	d10a      	bne.n	800839a <xTaskCreateStatic+0x46>
	__asm volatile
 8008384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008388:	f383 8811 	msr	BASEPRI, r3
 800838c:	f3bf 8f6f 	isb	sy
 8008390:	f3bf 8f4f 	dsb	sy
 8008394:	61fb      	str	r3, [r7, #28]
}
 8008396:	bf00      	nop
 8008398:	e7fe      	b.n	8008398 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800839a:	23b4      	movs	r3, #180	; 0xb4
 800839c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	2bb4      	cmp	r3, #180	; 0xb4
 80083a2:	d00a      	beq.n	80083ba <xTaskCreateStatic+0x66>
	__asm volatile
 80083a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a8:	f383 8811 	msr	BASEPRI, r3
 80083ac:	f3bf 8f6f 	isb	sy
 80083b0:	f3bf 8f4f 	dsb	sy
 80083b4:	61bb      	str	r3, [r7, #24]
}
 80083b6:	bf00      	nop
 80083b8:	e7fe      	b.n	80083b8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80083ba:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80083bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d01e      	beq.n	8008400 <xTaskCreateStatic+0xac>
 80083c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d01b      	beq.n	8008400 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80083c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ca:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80083cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80083d0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80083d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d4:	2202      	movs	r2, #2
 80083d6:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80083da:	2300      	movs	r3, #0
 80083dc:	9303      	str	r3, [sp, #12]
 80083de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e0:	9302      	str	r3, [sp, #8]
 80083e2:	f107 0314 	add.w	r3, r7, #20
 80083e6:	9301      	str	r3, [sp, #4]
 80083e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ea:	9300      	str	r3, [sp, #0]
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	68b9      	ldr	r1, [r7, #8]
 80083f2:	68f8      	ldr	r0, [r7, #12]
 80083f4:	f000 f850 	bl	8008498 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80083f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80083fa:	f000 f8eb 	bl	80085d4 <prvAddNewTaskToReadyList>
 80083fe:	e001      	b.n	8008404 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008400:	2300      	movs	r3, #0
 8008402:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008404:	697b      	ldr	r3, [r7, #20]
	}
 8008406:	4618      	mov	r0, r3
 8008408:	3728      	adds	r7, #40	; 0x28
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}

0800840e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800840e:	b580      	push	{r7, lr}
 8008410:	b08c      	sub	sp, #48	; 0x30
 8008412:	af04      	add	r7, sp, #16
 8008414:	60f8      	str	r0, [r7, #12]
 8008416:	60b9      	str	r1, [r7, #8]
 8008418:	603b      	str	r3, [r7, #0]
 800841a:	4613      	mov	r3, r2
 800841c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800841e:	88fb      	ldrh	r3, [r7, #6]
 8008420:	009b      	lsls	r3, r3, #2
 8008422:	4618      	mov	r0, r3
 8008424:	f001 fbf2 	bl	8009c0c <pvPortMalloc>
 8008428:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d00e      	beq.n	800844e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008430:	20b4      	movs	r0, #180	; 0xb4
 8008432:	f001 fbeb 	bl	8009c0c <pvPortMalloc>
 8008436:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008438:	69fb      	ldr	r3, [r7, #28]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d003      	beq.n	8008446 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800843e:	69fb      	ldr	r3, [r7, #28]
 8008440:	697a      	ldr	r2, [r7, #20]
 8008442:	631a      	str	r2, [r3, #48]	; 0x30
 8008444:	e005      	b.n	8008452 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008446:	6978      	ldr	r0, [r7, #20]
 8008448:	f001 fca4 	bl	8009d94 <vPortFree>
 800844c:	e001      	b.n	8008452 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800844e:	2300      	movs	r3, #0
 8008450:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008452:	69fb      	ldr	r3, [r7, #28]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d017      	beq.n	8008488 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008458:	69fb      	ldr	r3, [r7, #28]
 800845a:	2200      	movs	r2, #0
 800845c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008460:	88fa      	ldrh	r2, [r7, #6]
 8008462:	2300      	movs	r3, #0
 8008464:	9303      	str	r3, [sp, #12]
 8008466:	69fb      	ldr	r3, [r7, #28]
 8008468:	9302      	str	r3, [sp, #8]
 800846a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800846c:	9301      	str	r3, [sp, #4]
 800846e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008470:	9300      	str	r3, [sp, #0]
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	68b9      	ldr	r1, [r7, #8]
 8008476:	68f8      	ldr	r0, [r7, #12]
 8008478:	f000 f80e 	bl	8008498 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800847c:	69f8      	ldr	r0, [r7, #28]
 800847e:	f000 f8a9 	bl	80085d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008482:	2301      	movs	r3, #1
 8008484:	61bb      	str	r3, [r7, #24]
 8008486:	e002      	b.n	800848e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008488:	f04f 33ff 	mov.w	r3, #4294967295
 800848c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800848e:	69bb      	ldr	r3, [r7, #24]
	}
 8008490:	4618      	mov	r0, r3
 8008492:	3720      	adds	r7, #32
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b088      	sub	sp, #32
 800849c:	af00      	add	r7, sp, #0
 800849e:	60f8      	str	r0, [r7, #12]
 80084a0:	60b9      	str	r1, [r7, #8]
 80084a2:	607a      	str	r2, [r7, #4]
 80084a4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80084a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80084b0:	3b01      	subs	r3, #1
 80084b2:	009b      	lsls	r3, r3, #2
 80084b4:	4413      	add	r3, r2
 80084b6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80084b8:	69bb      	ldr	r3, [r7, #24]
 80084ba:	f023 0307 	bic.w	r3, r3, #7
 80084be:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80084c0:	69bb      	ldr	r3, [r7, #24]
 80084c2:	f003 0307 	and.w	r3, r3, #7
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d00a      	beq.n	80084e0 <prvInitialiseNewTask+0x48>
	__asm volatile
 80084ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ce:	f383 8811 	msr	BASEPRI, r3
 80084d2:	f3bf 8f6f 	isb	sy
 80084d6:	f3bf 8f4f 	dsb	sy
 80084da:	617b      	str	r3, [r7, #20]
}
 80084dc:	bf00      	nop
 80084de:	e7fe      	b.n	80084de <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d01f      	beq.n	8008526 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80084e6:	2300      	movs	r3, #0
 80084e8:	61fb      	str	r3, [r7, #28]
 80084ea:	e012      	b.n	8008512 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80084ec:	68ba      	ldr	r2, [r7, #8]
 80084ee:	69fb      	ldr	r3, [r7, #28]
 80084f0:	4413      	add	r3, r2
 80084f2:	7819      	ldrb	r1, [r3, #0]
 80084f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084f6:	69fb      	ldr	r3, [r7, #28]
 80084f8:	4413      	add	r3, r2
 80084fa:	3334      	adds	r3, #52	; 0x34
 80084fc:	460a      	mov	r2, r1
 80084fe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008500:	68ba      	ldr	r2, [r7, #8]
 8008502:	69fb      	ldr	r3, [r7, #28]
 8008504:	4413      	add	r3, r2
 8008506:	781b      	ldrb	r3, [r3, #0]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d006      	beq.n	800851a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800850c:	69fb      	ldr	r3, [r7, #28]
 800850e:	3301      	adds	r3, #1
 8008510:	61fb      	str	r3, [r7, #28]
 8008512:	69fb      	ldr	r3, [r7, #28]
 8008514:	2b0f      	cmp	r3, #15
 8008516:	d9e9      	bls.n	80084ec <prvInitialiseNewTask+0x54>
 8008518:	e000      	b.n	800851c <prvInitialiseNewTask+0x84>
			{
				break;
 800851a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800851c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800851e:	2200      	movs	r2, #0
 8008520:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008524:	e003      	b.n	800852e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008528:	2200      	movs	r2, #0
 800852a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800852e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008530:	2b06      	cmp	r3, #6
 8008532:	d901      	bls.n	8008538 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008534:	2306      	movs	r3, #6
 8008536:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800853a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800853c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800853e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008540:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008542:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008546:	2200      	movs	r2, #0
 8008548:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800854a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800854c:	3304      	adds	r3, #4
 800854e:	4618      	mov	r0, r3
 8008550:	f7ff f901 	bl	8007756 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008556:	3318      	adds	r3, #24
 8008558:	4618      	mov	r0, r3
 800855a:	f7ff f8fc 	bl	8007756 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800855e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008560:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008562:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008566:	f1c3 0207 	rsb	r2, r3, #7
 800856a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800856c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800856e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008570:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008572:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008576:	2200      	movs	r2, #0
 8008578:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800857c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800857e:	2200      	movs	r2, #0
 8008580:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008586:	334c      	adds	r3, #76	; 0x4c
 8008588:	2260      	movs	r2, #96	; 0x60
 800858a:	2100      	movs	r1, #0
 800858c:	4618      	mov	r0, r3
 800858e:	f001 fe46 	bl	800a21e <memset>
 8008592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008594:	4a0c      	ldr	r2, [pc, #48]	; (80085c8 <prvInitialiseNewTask+0x130>)
 8008596:	651a      	str	r2, [r3, #80]	; 0x50
 8008598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800859a:	4a0c      	ldr	r2, [pc, #48]	; (80085cc <prvInitialiseNewTask+0x134>)
 800859c:	655a      	str	r2, [r3, #84]	; 0x54
 800859e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a0:	4a0b      	ldr	r2, [pc, #44]	; (80085d0 <prvInitialiseNewTask+0x138>)
 80085a2:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80085a4:	683a      	ldr	r2, [r7, #0]
 80085a6:	68f9      	ldr	r1, [r7, #12]
 80085a8:	69b8      	ldr	r0, [r7, #24]
 80085aa:	f001 f93f 	bl	800982c <pxPortInitialiseStack>
 80085ae:	4602      	mov	r2, r0
 80085b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80085b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d002      	beq.n	80085c0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80085ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085be:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80085c0:	bf00      	nop
 80085c2:	3720      	adds	r7, #32
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}
 80085c8:	0800d848 	.word	0x0800d848
 80085cc:	0800d868 	.word	0x0800d868
 80085d0:	0800d828 	.word	0x0800d828

080085d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b082      	sub	sp, #8
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80085dc:	f001 fa16 	bl	8009a0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80085e0:	4b2a      	ldr	r3, [pc, #168]	; (800868c <prvAddNewTaskToReadyList+0xb8>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	3301      	adds	r3, #1
 80085e6:	4a29      	ldr	r2, [pc, #164]	; (800868c <prvAddNewTaskToReadyList+0xb8>)
 80085e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80085ea:	4b29      	ldr	r3, [pc, #164]	; (8008690 <prvAddNewTaskToReadyList+0xbc>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d109      	bne.n	8008606 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80085f2:	4a27      	ldr	r2, [pc, #156]	; (8008690 <prvAddNewTaskToReadyList+0xbc>)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80085f8:	4b24      	ldr	r3, [pc, #144]	; (800868c <prvAddNewTaskToReadyList+0xb8>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d110      	bne.n	8008622 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008600:	f000 fc18 	bl	8008e34 <prvInitialiseTaskLists>
 8008604:	e00d      	b.n	8008622 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008606:	4b23      	ldr	r3, [pc, #140]	; (8008694 <prvAddNewTaskToReadyList+0xc0>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d109      	bne.n	8008622 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800860e:	4b20      	ldr	r3, [pc, #128]	; (8008690 <prvAddNewTaskToReadyList+0xbc>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008618:	429a      	cmp	r2, r3
 800861a:	d802      	bhi.n	8008622 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800861c:	4a1c      	ldr	r2, [pc, #112]	; (8008690 <prvAddNewTaskToReadyList+0xbc>)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008622:	4b1d      	ldr	r3, [pc, #116]	; (8008698 <prvAddNewTaskToReadyList+0xc4>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	3301      	adds	r3, #1
 8008628:	4a1b      	ldr	r2, [pc, #108]	; (8008698 <prvAddNewTaskToReadyList+0xc4>)
 800862a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008630:	2201      	movs	r2, #1
 8008632:	409a      	lsls	r2, r3
 8008634:	4b19      	ldr	r3, [pc, #100]	; (800869c <prvAddNewTaskToReadyList+0xc8>)
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4313      	orrs	r3, r2
 800863a:	4a18      	ldr	r2, [pc, #96]	; (800869c <prvAddNewTaskToReadyList+0xc8>)
 800863c:	6013      	str	r3, [r2, #0]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008642:	4613      	mov	r3, r2
 8008644:	009b      	lsls	r3, r3, #2
 8008646:	4413      	add	r3, r2
 8008648:	009b      	lsls	r3, r3, #2
 800864a:	4a15      	ldr	r2, [pc, #84]	; (80086a0 <prvAddNewTaskToReadyList+0xcc>)
 800864c:	441a      	add	r2, r3
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	3304      	adds	r3, #4
 8008652:	4619      	mov	r1, r3
 8008654:	4610      	mov	r0, r2
 8008656:	f7ff f88a 	bl	800776e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800865a:	f001 fa07 	bl	8009a6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800865e:	4b0d      	ldr	r3, [pc, #52]	; (8008694 <prvAddNewTaskToReadyList+0xc0>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d00e      	beq.n	8008684 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008666:	4b0a      	ldr	r3, [pc, #40]	; (8008690 <prvAddNewTaskToReadyList+0xbc>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008670:	429a      	cmp	r2, r3
 8008672:	d207      	bcs.n	8008684 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008674:	4b0b      	ldr	r3, [pc, #44]	; (80086a4 <prvAddNewTaskToReadyList+0xd0>)
 8008676:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800867a:	601a      	str	r2, [r3, #0]
 800867c:	f3bf 8f4f 	dsb	sy
 8008680:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008684:	bf00      	nop
 8008686:	3708      	adds	r7, #8
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}
 800868c:	20000ee0 	.word	0x20000ee0
 8008690:	20000de0 	.word	0x20000de0
 8008694:	20000eec 	.word	0x20000eec
 8008698:	20000efc 	.word	0x20000efc
 800869c:	20000ee8 	.word	0x20000ee8
 80086a0:	20000de4 	.word	0x20000de4
 80086a4:	e000ed04 	.word	0xe000ed04

080086a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b084      	sub	sp, #16
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80086b0:	2300      	movs	r3, #0
 80086b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d017      	beq.n	80086ea <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80086ba:	4b13      	ldr	r3, [pc, #76]	; (8008708 <vTaskDelay+0x60>)
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d00a      	beq.n	80086d8 <vTaskDelay+0x30>
	__asm volatile
 80086c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c6:	f383 8811 	msr	BASEPRI, r3
 80086ca:	f3bf 8f6f 	isb	sy
 80086ce:	f3bf 8f4f 	dsb	sy
 80086d2:	60bb      	str	r3, [r7, #8]
}
 80086d4:	bf00      	nop
 80086d6:	e7fe      	b.n	80086d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80086d8:	f000 f88a 	bl	80087f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80086dc:	2100      	movs	r1, #0
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f000 fd0e 	bl	8009100 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80086e4:	f000 f892 	bl	800880c <xTaskResumeAll>
 80086e8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d107      	bne.n	8008700 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80086f0:	4b06      	ldr	r3, [pc, #24]	; (800870c <vTaskDelay+0x64>)
 80086f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086f6:	601a      	str	r2, [r3, #0]
 80086f8:	f3bf 8f4f 	dsb	sy
 80086fc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008700:	bf00      	nop
 8008702:	3710      	adds	r7, #16
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}
 8008708:	20000f08 	.word	0x20000f08
 800870c:	e000ed04 	.word	0xe000ed04

08008710 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b08a      	sub	sp, #40	; 0x28
 8008714:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008716:	2300      	movs	r3, #0
 8008718:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800871a:	2300      	movs	r3, #0
 800871c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800871e:	463a      	mov	r2, r7
 8008720:	1d39      	adds	r1, r7, #4
 8008722:	f107 0308 	add.w	r3, r7, #8
 8008726:	4618      	mov	r0, r3
 8008728:	f7f8 fb9e 	bl	8000e68 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800872c:	6839      	ldr	r1, [r7, #0]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	68ba      	ldr	r2, [r7, #8]
 8008732:	9202      	str	r2, [sp, #8]
 8008734:	9301      	str	r3, [sp, #4]
 8008736:	2300      	movs	r3, #0
 8008738:	9300      	str	r3, [sp, #0]
 800873a:	2300      	movs	r3, #0
 800873c:	460a      	mov	r2, r1
 800873e:	4924      	ldr	r1, [pc, #144]	; (80087d0 <vTaskStartScheduler+0xc0>)
 8008740:	4824      	ldr	r0, [pc, #144]	; (80087d4 <vTaskStartScheduler+0xc4>)
 8008742:	f7ff fe07 	bl	8008354 <xTaskCreateStatic>
 8008746:	4603      	mov	r3, r0
 8008748:	4a23      	ldr	r2, [pc, #140]	; (80087d8 <vTaskStartScheduler+0xc8>)
 800874a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800874c:	4b22      	ldr	r3, [pc, #136]	; (80087d8 <vTaskStartScheduler+0xc8>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d002      	beq.n	800875a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008754:	2301      	movs	r3, #1
 8008756:	617b      	str	r3, [r7, #20]
 8008758:	e001      	b.n	800875e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800875a:	2300      	movs	r3, #0
 800875c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	2b01      	cmp	r3, #1
 8008762:	d102      	bne.n	800876a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008764:	f000 fd32 	bl	80091cc <xTimerCreateTimerTask>
 8008768:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	2b01      	cmp	r3, #1
 800876e:	d11b      	bne.n	80087a8 <vTaskStartScheduler+0x98>
	__asm volatile
 8008770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008774:	f383 8811 	msr	BASEPRI, r3
 8008778:	f3bf 8f6f 	isb	sy
 800877c:	f3bf 8f4f 	dsb	sy
 8008780:	613b      	str	r3, [r7, #16]
}
 8008782:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008784:	4b15      	ldr	r3, [pc, #84]	; (80087dc <vTaskStartScheduler+0xcc>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	334c      	adds	r3, #76	; 0x4c
 800878a:	4a15      	ldr	r2, [pc, #84]	; (80087e0 <vTaskStartScheduler+0xd0>)
 800878c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800878e:	4b15      	ldr	r3, [pc, #84]	; (80087e4 <vTaskStartScheduler+0xd4>)
 8008790:	f04f 32ff 	mov.w	r2, #4294967295
 8008794:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008796:	4b14      	ldr	r3, [pc, #80]	; (80087e8 <vTaskStartScheduler+0xd8>)
 8008798:	2201      	movs	r2, #1
 800879a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800879c:	4b13      	ldr	r3, [pc, #76]	; (80087ec <vTaskStartScheduler+0xdc>)
 800879e:	2200      	movs	r2, #0
 80087a0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80087a2:	f001 f8c1 	bl	8009928 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80087a6:	e00e      	b.n	80087c6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087ae:	d10a      	bne.n	80087c6 <vTaskStartScheduler+0xb6>
	__asm volatile
 80087b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b4:	f383 8811 	msr	BASEPRI, r3
 80087b8:	f3bf 8f6f 	isb	sy
 80087bc:	f3bf 8f4f 	dsb	sy
 80087c0:	60fb      	str	r3, [r7, #12]
}
 80087c2:	bf00      	nop
 80087c4:	e7fe      	b.n	80087c4 <vTaskStartScheduler+0xb4>
}
 80087c6:	bf00      	nop
 80087c8:	3718      	adds	r7, #24
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}
 80087ce:	bf00      	nop
 80087d0:	0800d108 	.word	0x0800d108
 80087d4:	08008e01 	.word	0x08008e01
 80087d8:	20000f04 	.word	0x20000f04
 80087dc:	20000de0 	.word	0x20000de0
 80087e0:	20000010 	.word	0x20000010
 80087e4:	20000f00 	.word	0x20000f00
 80087e8:	20000eec 	.word	0x20000eec
 80087ec:	20000ee4 	.word	0x20000ee4

080087f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80087f0:	b480      	push	{r7}
 80087f2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80087f4:	4b04      	ldr	r3, [pc, #16]	; (8008808 <vTaskSuspendAll+0x18>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	3301      	adds	r3, #1
 80087fa:	4a03      	ldr	r2, [pc, #12]	; (8008808 <vTaskSuspendAll+0x18>)
 80087fc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80087fe:	bf00      	nop
 8008800:	46bd      	mov	sp, r7
 8008802:	bc80      	pop	{r7}
 8008804:	4770      	bx	lr
 8008806:	bf00      	nop
 8008808:	20000f08 	.word	0x20000f08

0800880c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b084      	sub	sp, #16
 8008810:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008812:	2300      	movs	r3, #0
 8008814:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008816:	2300      	movs	r3, #0
 8008818:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800881a:	4b41      	ldr	r3, [pc, #260]	; (8008920 <xTaskResumeAll+0x114>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d10a      	bne.n	8008838 <xTaskResumeAll+0x2c>
	__asm volatile
 8008822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008826:	f383 8811 	msr	BASEPRI, r3
 800882a:	f3bf 8f6f 	isb	sy
 800882e:	f3bf 8f4f 	dsb	sy
 8008832:	603b      	str	r3, [r7, #0]
}
 8008834:	bf00      	nop
 8008836:	e7fe      	b.n	8008836 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008838:	f001 f8e8 	bl	8009a0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800883c:	4b38      	ldr	r3, [pc, #224]	; (8008920 <xTaskResumeAll+0x114>)
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	3b01      	subs	r3, #1
 8008842:	4a37      	ldr	r2, [pc, #220]	; (8008920 <xTaskResumeAll+0x114>)
 8008844:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008846:	4b36      	ldr	r3, [pc, #216]	; (8008920 <xTaskResumeAll+0x114>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d161      	bne.n	8008912 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800884e:	4b35      	ldr	r3, [pc, #212]	; (8008924 <xTaskResumeAll+0x118>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d05d      	beq.n	8008912 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008856:	e02e      	b.n	80088b6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008858:	4b33      	ldr	r3, [pc, #204]	; (8008928 <xTaskResumeAll+0x11c>)
 800885a:	68db      	ldr	r3, [r3, #12]
 800885c:	68db      	ldr	r3, [r3, #12]
 800885e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	3318      	adds	r3, #24
 8008864:	4618      	mov	r0, r3
 8008866:	f7fe ffdd 	bl	8007824 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	3304      	adds	r3, #4
 800886e:	4618      	mov	r0, r3
 8008870:	f7fe ffd8 	bl	8007824 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008878:	2201      	movs	r2, #1
 800887a:	409a      	lsls	r2, r3
 800887c:	4b2b      	ldr	r3, [pc, #172]	; (800892c <xTaskResumeAll+0x120>)
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4313      	orrs	r3, r2
 8008882:	4a2a      	ldr	r2, [pc, #168]	; (800892c <xTaskResumeAll+0x120>)
 8008884:	6013      	str	r3, [r2, #0]
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800888a:	4613      	mov	r3, r2
 800888c:	009b      	lsls	r3, r3, #2
 800888e:	4413      	add	r3, r2
 8008890:	009b      	lsls	r3, r3, #2
 8008892:	4a27      	ldr	r2, [pc, #156]	; (8008930 <xTaskResumeAll+0x124>)
 8008894:	441a      	add	r2, r3
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	3304      	adds	r3, #4
 800889a:	4619      	mov	r1, r3
 800889c:	4610      	mov	r0, r2
 800889e:	f7fe ff66 	bl	800776e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088a6:	4b23      	ldr	r3, [pc, #140]	; (8008934 <xTaskResumeAll+0x128>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ac:	429a      	cmp	r2, r3
 80088ae:	d302      	bcc.n	80088b6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80088b0:	4b21      	ldr	r3, [pc, #132]	; (8008938 <xTaskResumeAll+0x12c>)
 80088b2:	2201      	movs	r2, #1
 80088b4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80088b6:	4b1c      	ldr	r3, [pc, #112]	; (8008928 <xTaskResumeAll+0x11c>)
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d1cc      	bne.n	8008858 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d001      	beq.n	80088c8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80088c4:	f000 fb58 	bl	8008f78 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80088c8:	4b1c      	ldr	r3, [pc, #112]	; (800893c <xTaskResumeAll+0x130>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d010      	beq.n	80088f6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80088d4:	f000 f844 	bl	8008960 <xTaskIncrementTick>
 80088d8:	4603      	mov	r3, r0
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d002      	beq.n	80088e4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80088de:	4b16      	ldr	r3, [pc, #88]	; (8008938 <xTaskResumeAll+0x12c>)
 80088e0:	2201      	movs	r2, #1
 80088e2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	3b01      	subs	r3, #1
 80088e8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d1f1      	bne.n	80088d4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80088f0:	4b12      	ldr	r3, [pc, #72]	; (800893c <xTaskResumeAll+0x130>)
 80088f2:	2200      	movs	r2, #0
 80088f4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80088f6:	4b10      	ldr	r3, [pc, #64]	; (8008938 <xTaskResumeAll+0x12c>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d009      	beq.n	8008912 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80088fe:	2301      	movs	r3, #1
 8008900:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008902:	4b0f      	ldr	r3, [pc, #60]	; (8008940 <xTaskResumeAll+0x134>)
 8008904:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008908:	601a      	str	r2, [r3, #0]
 800890a:	f3bf 8f4f 	dsb	sy
 800890e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008912:	f001 f8ab 	bl	8009a6c <vPortExitCritical>

	return xAlreadyYielded;
 8008916:	68bb      	ldr	r3, [r7, #8]
}
 8008918:	4618      	mov	r0, r3
 800891a:	3710      	adds	r7, #16
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}
 8008920:	20000f08 	.word	0x20000f08
 8008924:	20000ee0 	.word	0x20000ee0
 8008928:	20000ea0 	.word	0x20000ea0
 800892c:	20000ee8 	.word	0x20000ee8
 8008930:	20000de4 	.word	0x20000de4
 8008934:	20000de0 	.word	0x20000de0
 8008938:	20000ef4 	.word	0x20000ef4
 800893c:	20000ef0 	.word	0x20000ef0
 8008940:	e000ed04 	.word	0xe000ed04

08008944 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008944:	b480      	push	{r7}
 8008946:	b083      	sub	sp, #12
 8008948:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800894a:	4b04      	ldr	r3, [pc, #16]	; (800895c <xTaskGetTickCount+0x18>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008950:	687b      	ldr	r3, [r7, #4]
}
 8008952:	4618      	mov	r0, r3
 8008954:	370c      	adds	r7, #12
 8008956:	46bd      	mov	sp, r7
 8008958:	bc80      	pop	{r7}
 800895a:	4770      	bx	lr
 800895c:	20000ee4 	.word	0x20000ee4

08008960 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b086      	sub	sp, #24
 8008964:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008966:	2300      	movs	r3, #0
 8008968:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800896a:	4b4e      	ldr	r3, [pc, #312]	; (8008aa4 <xTaskIncrementTick+0x144>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	2b00      	cmp	r3, #0
 8008970:	f040 8088 	bne.w	8008a84 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008974:	4b4c      	ldr	r3, [pc, #304]	; (8008aa8 <xTaskIncrementTick+0x148>)
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	3301      	adds	r3, #1
 800897a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800897c:	4a4a      	ldr	r2, [pc, #296]	; (8008aa8 <xTaskIncrementTick+0x148>)
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d120      	bne.n	80089ca <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008988:	4b48      	ldr	r3, [pc, #288]	; (8008aac <xTaskIncrementTick+0x14c>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d00a      	beq.n	80089a8 <xTaskIncrementTick+0x48>
	__asm volatile
 8008992:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008996:	f383 8811 	msr	BASEPRI, r3
 800899a:	f3bf 8f6f 	isb	sy
 800899e:	f3bf 8f4f 	dsb	sy
 80089a2:	603b      	str	r3, [r7, #0]
}
 80089a4:	bf00      	nop
 80089a6:	e7fe      	b.n	80089a6 <xTaskIncrementTick+0x46>
 80089a8:	4b40      	ldr	r3, [pc, #256]	; (8008aac <xTaskIncrementTick+0x14c>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	60fb      	str	r3, [r7, #12]
 80089ae:	4b40      	ldr	r3, [pc, #256]	; (8008ab0 <xTaskIncrementTick+0x150>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4a3e      	ldr	r2, [pc, #248]	; (8008aac <xTaskIncrementTick+0x14c>)
 80089b4:	6013      	str	r3, [r2, #0]
 80089b6:	4a3e      	ldr	r2, [pc, #248]	; (8008ab0 <xTaskIncrementTick+0x150>)
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	6013      	str	r3, [r2, #0]
 80089bc:	4b3d      	ldr	r3, [pc, #244]	; (8008ab4 <xTaskIncrementTick+0x154>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	3301      	adds	r3, #1
 80089c2:	4a3c      	ldr	r2, [pc, #240]	; (8008ab4 <xTaskIncrementTick+0x154>)
 80089c4:	6013      	str	r3, [r2, #0]
 80089c6:	f000 fad7 	bl	8008f78 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80089ca:	4b3b      	ldr	r3, [pc, #236]	; (8008ab8 <xTaskIncrementTick+0x158>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	693a      	ldr	r2, [r7, #16]
 80089d0:	429a      	cmp	r2, r3
 80089d2:	d348      	bcc.n	8008a66 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089d4:	4b35      	ldr	r3, [pc, #212]	; (8008aac <xTaskIncrementTick+0x14c>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d104      	bne.n	80089e8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089de:	4b36      	ldr	r3, [pc, #216]	; (8008ab8 <xTaskIncrementTick+0x158>)
 80089e0:	f04f 32ff 	mov.w	r2, #4294967295
 80089e4:	601a      	str	r2, [r3, #0]
					break;
 80089e6:	e03e      	b.n	8008a66 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089e8:	4b30      	ldr	r3, [pc, #192]	; (8008aac <xTaskIncrementTick+0x14c>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	68db      	ldr	r3, [r3, #12]
 80089ee:	68db      	ldr	r3, [r3, #12]
 80089f0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	685b      	ldr	r3, [r3, #4]
 80089f6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80089f8:	693a      	ldr	r2, [r7, #16]
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d203      	bcs.n	8008a08 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008a00:	4a2d      	ldr	r2, [pc, #180]	; (8008ab8 <xTaskIncrementTick+0x158>)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008a06:	e02e      	b.n	8008a66 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	3304      	adds	r3, #4
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f7fe ff09 	bl	8007824 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d004      	beq.n	8008a24 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	3318      	adds	r3, #24
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f7fe ff00 	bl	8007824 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a28:	2201      	movs	r2, #1
 8008a2a:	409a      	lsls	r2, r3
 8008a2c:	4b23      	ldr	r3, [pc, #140]	; (8008abc <xTaskIncrementTick+0x15c>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4313      	orrs	r3, r2
 8008a32:	4a22      	ldr	r2, [pc, #136]	; (8008abc <xTaskIncrementTick+0x15c>)
 8008a34:	6013      	str	r3, [r2, #0]
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a3a:	4613      	mov	r3, r2
 8008a3c:	009b      	lsls	r3, r3, #2
 8008a3e:	4413      	add	r3, r2
 8008a40:	009b      	lsls	r3, r3, #2
 8008a42:	4a1f      	ldr	r2, [pc, #124]	; (8008ac0 <xTaskIncrementTick+0x160>)
 8008a44:	441a      	add	r2, r3
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	3304      	adds	r3, #4
 8008a4a:	4619      	mov	r1, r3
 8008a4c:	4610      	mov	r0, r2
 8008a4e:	f7fe fe8e 	bl	800776e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a56:	4b1b      	ldr	r3, [pc, #108]	; (8008ac4 <xTaskIncrementTick+0x164>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a5c:	429a      	cmp	r2, r3
 8008a5e:	d3b9      	bcc.n	80089d4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008a60:	2301      	movs	r3, #1
 8008a62:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a64:	e7b6      	b.n	80089d4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008a66:	4b17      	ldr	r3, [pc, #92]	; (8008ac4 <xTaskIncrementTick+0x164>)
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a6c:	4914      	ldr	r1, [pc, #80]	; (8008ac0 <xTaskIncrementTick+0x160>)
 8008a6e:	4613      	mov	r3, r2
 8008a70:	009b      	lsls	r3, r3, #2
 8008a72:	4413      	add	r3, r2
 8008a74:	009b      	lsls	r3, r3, #2
 8008a76:	440b      	add	r3, r1
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	2b01      	cmp	r3, #1
 8008a7c:	d907      	bls.n	8008a8e <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8008a7e:	2301      	movs	r3, #1
 8008a80:	617b      	str	r3, [r7, #20]
 8008a82:	e004      	b.n	8008a8e <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008a84:	4b10      	ldr	r3, [pc, #64]	; (8008ac8 <xTaskIncrementTick+0x168>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	3301      	adds	r3, #1
 8008a8a:	4a0f      	ldr	r2, [pc, #60]	; (8008ac8 <xTaskIncrementTick+0x168>)
 8008a8c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008a8e:	4b0f      	ldr	r3, [pc, #60]	; (8008acc <xTaskIncrementTick+0x16c>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d001      	beq.n	8008a9a <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8008a96:	2301      	movs	r3, #1
 8008a98:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008a9a:	697b      	ldr	r3, [r7, #20]
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3718      	adds	r7, #24
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}
 8008aa4:	20000f08 	.word	0x20000f08
 8008aa8:	20000ee4 	.word	0x20000ee4
 8008aac:	20000e98 	.word	0x20000e98
 8008ab0:	20000e9c 	.word	0x20000e9c
 8008ab4:	20000ef8 	.word	0x20000ef8
 8008ab8:	20000f00 	.word	0x20000f00
 8008abc:	20000ee8 	.word	0x20000ee8
 8008ac0:	20000de4 	.word	0x20000de4
 8008ac4:	20000de0 	.word	0x20000de0
 8008ac8:	20000ef0 	.word	0x20000ef0
 8008acc:	20000ef4 	.word	0x20000ef4

08008ad0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b087      	sub	sp, #28
 8008ad4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008ad6:	4b29      	ldr	r3, [pc, #164]	; (8008b7c <vTaskSwitchContext+0xac>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d003      	beq.n	8008ae6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008ade:	4b28      	ldr	r3, [pc, #160]	; (8008b80 <vTaskSwitchContext+0xb0>)
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008ae4:	e044      	b.n	8008b70 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8008ae6:	4b26      	ldr	r3, [pc, #152]	; (8008b80 <vTaskSwitchContext+0xb0>)
 8008ae8:	2200      	movs	r2, #0
 8008aea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008aec:	4b25      	ldr	r3, [pc, #148]	; (8008b84 <vTaskSwitchContext+0xb4>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	fab3 f383 	clz	r3, r3
 8008af8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008afa:	7afb      	ldrb	r3, [r7, #11]
 8008afc:	f1c3 031f 	rsb	r3, r3, #31
 8008b00:	617b      	str	r3, [r7, #20]
 8008b02:	4921      	ldr	r1, [pc, #132]	; (8008b88 <vTaskSwitchContext+0xb8>)
 8008b04:	697a      	ldr	r2, [r7, #20]
 8008b06:	4613      	mov	r3, r2
 8008b08:	009b      	lsls	r3, r3, #2
 8008b0a:	4413      	add	r3, r2
 8008b0c:	009b      	lsls	r3, r3, #2
 8008b0e:	440b      	add	r3, r1
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d10a      	bne.n	8008b2c <vTaskSwitchContext+0x5c>
	__asm volatile
 8008b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b1a:	f383 8811 	msr	BASEPRI, r3
 8008b1e:	f3bf 8f6f 	isb	sy
 8008b22:	f3bf 8f4f 	dsb	sy
 8008b26:	607b      	str	r3, [r7, #4]
}
 8008b28:	bf00      	nop
 8008b2a:	e7fe      	b.n	8008b2a <vTaskSwitchContext+0x5a>
 8008b2c:	697a      	ldr	r2, [r7, #20]
 8008b2e:	4613      	mov	r3, r2
 8008b30:	009b      	lsls	r3, r3, #2
 8008b32:	4413      	add	r3, r2
 8008b34:	009b      	lsls	r3, r3, #2
 8008b36:	4a14      	ldr	r2, [pc, #80]	; (8008b88 <vTaskSwitchContext+0xb8>)
 8008b38:	4413      	add	r3, r2
 8008b3a:	613b      	str	r3, [r7, #16]
 8008b3c:	693b      	ldr	r3, [r7, #16]
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	685a      	ldr	r2, [r3, #4]
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	605a      	str	r2, [r3, #4]
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	685a      	ldr	r2, [r3, #4]
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	3308      	adds	r3, #8
 8008b4e:	429a      	cmp	r2, r3
 8008b50:	d104      	bne.n	8008b5c <vTaskSwitchContext+0x8c>
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	685a      	ldr	r2, [r3, #4]
 8008b58:	693b      	ldr	r3, [r7, #16]
 8008b5a:	605a      	str	r2, [r3, #4]
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	68db      	ldr	r3, [r3, #12]
 8008b62:	4a0a      	ldr	r2, [pc, #40]	; (8008b8c <vTaskSwitchContext+0xbc>)
 8008b64:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008b66:	4b09      	ldr	r3, [pc, #36]	; (8008b8c <vTaskSwitchContext+0xbc>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	334c      	adds	r3, #76	; 0x4c
 8008b6c:	4a08      	ldr	r2, [pc, #32]	; (8008b90 <vTaskSwitchContext+0xc0>)
 8008b6e:	6013      	str	r3, [r2, #0]
}
 8008b70:	bf00      	nop
 8008b72:	371c      	adds	r7, #28
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bc80      	pop	{r7}
 8008b78:	4770      	bx	lr
 8008b7a:	bf00      	nop
 8008b7c:	20000f08 	.word	0x20000f08
 8008b80:	20000ef4 	.word	0x20000ef4
 8008b84:	20000ee8 	.word	0x20000ee8
 8008b88:	20000de4 	.word	0x20000de4
 8008b8c:	20000de0 	.word	0x20000de0
 8008b90:	20000010 	.word	0x20000010

08008b94 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b084      	sub	sp, #16
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
 8008b9c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d10a      	bne.n	8008bba <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ba8:	f383 8811 	msr	BASEPRI, r3
 8008bac:	f3bf 8f6f 	isb	sy
 8008bb0:	f3bf 8f4f 	dsb	sy
 8008bb4:	60fb      	str	r3, [r7, #12]
}
 8008bb6:	bf00      	nop
 8008bb8:	e7fe      	b.n	8008bb8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008bba:	4b07      	ldr	r3, [pc, #28]	; (8008bd8 <vTaskPlaceOnEventList+0x44>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	3318      	adds	r3, #24
 8008bc0:	4619      	mov	r1, r3
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f7fe fdf6 	bl	80077b4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008bc8:	2101      	movs	r1, #1
 8008bca:	6838      	ldr	r0, [r7, #0]
 8008bcc:	f000 fa98 	bl	8009100 <prvAddCurrentTaskToDelayedList>
}
 8008bd0:	bf00      	nop
 8008bd2:	3710      	adds	r7, #16
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}
 8008bd8:	20000de0 	.word	0x20000de0

08008bdc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b086      	sub	sp, #24
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	60f8      	str	r0, [r7, #12]
 8008be4:	60b9      	str	r1, [r7, #8]
 8008be6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d10a      	bne.n	8008c04 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf2:	f383 8811 	msr	BASEPRI, r3
 8008bf6:	f3bf 8f6f 	isb	sy
 8008bfa:	f3bf 8f4f 	dsb	sy
 8008bfe:	617b      	str	r3, [r7, #20]
}
 8008c00:	bf00      	nop
 8008c02:	e7fe      	b.n	8008c02 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008c04:	4b0a      	ldr	r3, [pc, #40]	; (8008c30 <vTaskPlaceOnEventListRestricted+0x54>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	3318      	adds	r3, #24
 8008c0a:	4619      	mov	r1, r3
 8008c0c:	68f8      	ldr	r0, [r7, #12]
 8008c0e:	f7fe fdae 	bl	800776e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d002      	beq.n	8008c1e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008c18:	f04f 33ff 	mov.w	r3, #4294967295
 8008c1c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008c1e:	6879      	ldr	r1, [r7, #4]
 8008c20:	68b8      	ldr	r0, [r7, #8]
 8008c22:	f000 fa6d 	bl	8009100 <prvAddCurrentTaskToDelayedList>
	}
 8008c26:	bf00      	nop
 8008c28:	3718      	adds	r7, #24
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}
 8008c2e:	bf00      	nop
 8008c30:	20000de0 	.word	0x20000de0

08008c34 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b086      	sub	sp, #24
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	68db      	ldr	r3, [r3, #12]
 8008c40:	68db      	ldr	r3, [r3, #12]
 8008c42:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d10a      	bne.n	8008c60 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c4e:	f383 8811 	msr	BASEPRI, r3
 8008c52:	f3bf 8f6f 	isb	sy
 8008c56:	f3bf 8f4f 	dsb	sy
 8008c5a:	60fb      	str	r3, [r7, #12]
}
 8008c5c:	bf00      	nop
 8008c5e:	e7fe      	b.n	8008c5e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008c60:	693b      	ldr	r3, [r7, #16]
 8008c62:	3318      	adds	r3, #24
 8008c64:	4618      	mov	r0, r3
 8008c66:	f7fe fddd 	bl	8007824 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c6a:	4b1d      	ldr	r3, [pc, #116]	; (8008ce0 <xTaskRemoveFromEventList+0xac>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d11c      	bne.n	8008cac <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	3304      	adds	r3, #4
 8008c76:	4618      	mov	r0, r3
 8008c78:	f7fe fdd4 	bl	8007824 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c80:	2201      	movs	r2, #1
 8008c82:	409a      	lsls	r2, r3
 8008c84:	4b17      	ldr	r3, [pc, #92]	; (8008ce4 <xTaskRemoveFromEventList+0xb0>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	4313      	orrs	r3, r2
 8008c8a:	4a16      	ldr	r2, [pc, #88]	; (8008ce4 <xTaskRemoveFromEventList+0xb0>)
 8008c8c:	6013      	str	r3, [r2, #0]
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c92:	4613      	mov	r3, r2
 8008c94:	009b      	lsls	r3, r3, #2
 8008c96:	4413      	add	r3, r2
 8008c98:	009b      	lsls	r3, r3, #2
 8008c9a:	4a13      	ldr	r2, [pc, #76]	; (8008ce8 <xTaskRemoveFromEventList+0xb4>)
 8008c9c:	441a      	add	r2, r3
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	3304      	adds	r3, #4
 8008ca2:	4619      	mov	r1, r3
 8008ca4:	4610      	mov	r0, r2
 8008ca6:	f7fe fd62 	bl	800776e <vListInsertEnd>
 8008caa:	e005      	b.n	8008cb8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	3318      	adds	r3, #24
 8008cb0:	4619      	mov	r1, r3
 8008cb2:	480e      	ldr	r0, [pc, #56]	; (8008cec <xTaskRemoveFromEventList+0xb8>)
 8008cb4:	f7fe fd5b 	bl	800776e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cbc:	4b0c      	ldr	r3, [pc, #48]	; (8008cf0 <xTaskRemoveFromEventList+0xbc>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cc2:	429a      	cmp	r2, r3
 8008cc4:	d905      	bls.n	8008cd2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008cca:	4b0a      	ldr	r3, [pc, #40]	; (8008cf4 <xTaskRemoveFromEventList+0xc0>)
 8008ccc:	2201      	movs	r2, #1
 8008cce:	601a      	str	r2, [r3, #0]
 8008cd0:	e001      	b.n	8008cd6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008cd6:	697b      	ldr	r3, [r7, #20]
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	3718      	adds	r7, #24
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}
 8008ce0:	20000f08 	.word	0x20000f08
 8008ce4:	20000ee8 	.word	0x20000ee8
 8008ce8:	20000de4 	.word	0x20000de4
 8008cec:	20000ea0 	.word	0x20000ea0
 8008cf0:	20000de0 	.word	0x20000de0
 8008cf4:	20000ef4 	.word	0x20000ef4

08008cf8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b083      	sub	sp, #12
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008d00:	4b06      	ldr	r3, [pc, #24]	; (8008d1c <vTaskInternalSetTimeOutState+0x24>)
 8008d02:	681a      	ldr	r2, [r3, #0]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008d08:	4b05      	ldr	r3, [pc, #20]	; (8008d20 <vTaskInternalSetTimeOutState+0x28>)
 8008d0a:	681a      	ldr	r2, [r3, #0]
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	605a      	str	r2, [r3, #4]
}
 8008d10:	bf00      	nop
 8008d12:	370c      	adds	r7, #12
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bc80      	pop	{r7}
 8008d18:	4770      	bx	lr
 8008d1a:	bf00      	nop
 8008d1c:	20000ef8 	.word	0x20000ef8
 8008d20:	20000ee4 	.word	0x20000ee4

08008d24 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b088      	sub	sp, #32
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d10a      	bne.n	8008d4a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d38:	f383 8811 	msr	BASEPRI, r3
 8008d3c:	f3bf 8f6f 	isb	sy
 8008d40:	f3bf 8f4f 	dsb	sy
 8008d44:	613b      	str	r3, [r7, #16]
}
 8008d46:	bf00      	nop
 8008d48:	e7fe      	b.n	8008d48 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d10a      	bne.n	8008d66 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d54:	f383 8811 	msr	BASEPRI, r3
 8008d58:	f3bf 8f6f 	isb	sy
 8008d5c:	f3bf 8f4f 	dsb	sy
 8008d60:	60fb      	str	r3, [r7, #12]
}
 8008d62:	bf00      	nop
 8008d64:	e7fe      	b.n	8008d64 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008d66:	f000 fe51 	bl	8009a0c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008d6a:	4b1d      	ldr	r3, [pc, #116]	; (8008de0 <xTaskCheckForTimeOut+0xbc>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	69ba      	ldr	r2, [r7, #24]
 8008d76:	1ad3      	subs	r3, r2, r3
 8008d78:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d82:	d102      	bne.n	8008d8a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008d84:	2300      	movs	r3, #0
 8008d86:	61fb      	str	r3, [r7, #28]
 8008d88:	e023      	b.n	8008dd2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681a      	ldr	r2, [r3, #0]
 8008d8e:	4b15      	ldr	r3, [pc, #84]	; (8008de4 <xTaskCheckForTimeOut+0xc0>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	429a      	cmp	r2, r3
 8008d94:	d007      	beq.n	8008da6 <xTaskCheckForTimeOut+0x82>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	685b      	ldr	r3, [r3, #4]
 8008d9a:	69ba      	ldr	r2, [r7, #24]
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	d302      	bcc.n	8008da6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008da0:	2301      	movs	r3, #1
 8008da2:	61fb      	str	r3, [r7, #28]
 8008da4:	e015      	b.n	8008dd2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	697a      	ldr	r2, [r7, #20]
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d20b      	bcs.n	8008dc8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	681a      	ldr	r2, [r3, #0]
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	1ad2      	subs	r2, r2, r3
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f7ff ff9b 	bl	8008cf8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	61fb      	str	r3, [r7, #28]
 8008dc6:	e004      	b.n	8008dd2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008dce:	2301      	movs	r3, #1
 8008dd0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008dd2:	f000 fe4b 	bl	8009a6c <vPortExitCritical>

	return xReturn;
 8008dd6:	69fb      	ldr	r3, [r7, #28]
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3720      	adds	r7, #32
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}
 8008de0:	20000ee4 	.word	0x20000ee4
 8008de4:	20000ef8 	.word	0x20000ef8

08008de8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008de8:	b480      	push	{r7}
 8008dea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008dec:	4b03      	ldr	r3, [pc, #12]	; (8008dfc <vTaskMissedYield+0x14>)
 8008dee:	2201      	movs	r2, #1
 8008df0:	601a      	str	r2, [r3, #0]
}
 8008df2:	bf00      	nop
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bc80      	pop	{r7}
 8008df8:	4770      	bx	lr
 8008dfa:	bf00      	nop
 8008dfc:	20000ef4 	.word	0x20000ef4

08008e00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b082      	sub	sp, #8
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008e08:	f000 f854 	bl	8008eb4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008e0c:	4b07      	ldr	r3, [pc, #28]	; (8008e2c <prvIdleTask+0x2c>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	2b01      	cmp	r3, #1
 8008e12:	d907      	bls.n	8008e24 <prvIdleTask+0x24>
			{
				taskYIELD();
 8008e14:	4b06      	ldr	r3, [pc, #24]	; (8008e30 <prvIdleTask+0x30>)
 8008e16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e1a:	601a      	str	r2, [r3, #0]
 8008e1c:	f3bf 8f4f 	dsb	sy
 8008e20:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8008e24:	f7f8 f81a 	bl	8000e5c <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8008e28:	e7ee      	b.n	8008e08 <prvIdleTask+0x8>
 8008e2a:	bf00      	nop
 8008e2c:	20000de4 	.word	0x20000de4
 8008e30:	e000ed04 	.word	0xe000ed04

08008e34 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b082      	sub	sp, #8
 8008e38:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	607b      	str	r3, [r7, #4]
 8008e3e:	e00c      	b.n	8008e5a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008e40:	687a      	ldr	r2, [r7, #4]
 8008e42:	4613      	mov	r3, r2
 8008e44:	009b      	lsls	r3, r3, #2
 8008e46:	4413      	add	r3, r2
 8008e48:	009b      	lsls	r3, r3, #2
 8008e4a:	4a12      	ldr	r2, [pc, #72]	; (8008e94 <prvInitialiseTaskLists+0x60>)
 8008e4c:	4413      	add	r3, r2
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f7fe fc62 	bl	8007718 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	3301      	adds	r3, #1
 8008e58:	607b      	str	r3, [r7, #4]
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2b06      	cmp	r3, #6
 8008e5e:	d9ef      	bls.n	8008e40 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008e60:	480d      	ldr	r0, [pc, #52]	; (8008e98 <prvInitialiseTaskLists+0x64>)
 8008e62:	f7fe fc59 	bl	8007718 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008e66:	480d      	ldr	r0, [pc, #52]	; (8008e9c <prvInitialiseTaskLists+0x68>)
 8008e68:	f7fe fc56 	bl	8007718 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008e6c:	480c      	ldr	r0, [pc, #48]	; (8008ea0 <prvInitialiseTaskLists+0x6c>)
 8008e6e:	f7fe fc53 	bl	8007718 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008e72:	480c      	ldr	r0, [pc, #48]	; (8008ea4 <prvInitialiseTaskLists+0x70>)
 8008e74:	f7fe fc50 	bl	8007718 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008e78:	480b      	ldr	r0, [pc, #44]	; (8008ea8 <prvInitialiseTaskLists+0x74>)
 8008e7a:	f7fe fc4d 	bl	8007718 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008e7e:	4b0b      	ldr	r3, [pc, #44]	; (8008eac <prvInitialiseTaskLists+0x78>)
 8008e80:	4a05      	ldr	r2, [pc, #20]	; (8008e98 <prvInitialiseTaskLists+0x64>)
 8008e82:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008e84:	4b0a      	ldr	r3, [pc, #40]	; (8008eb0 <prvInitialiseTaskLists+0x7c>)
 8008e86:	4a05      	ldr	r2, [pc, #20]	; (8008e9c <prvInitialiseTaskLists+0x68>)
 8008e88:	601a      	str	r2, [r3, #0]
}
 8008e8a:	bf00      	nop
 8008e8c:	3708      	adds	r7, #8
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}
 8008e92:	bf00      	nop
 8008e94:	20000de4 	.word	0x20000de4
 8008e98:	20000e70 	.word	0x20000e70
 8008e9c:	20000e84 	.word	0x20000e84
 8008ea0:	20000ea0 	.word	0x20000ea0
 8008ea4:	20000eb4 	.word	0x20000eb4
 8008ea8:	20000ecc 	.word	0x20000ecc
 8008eac:	20000e98 	.word	0x20000e98
 8008eb0:	20000e9c 	.word	0x20000e9c

08008eb4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b082      	sub	sp, #8
 8008eb8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008eba:	e019      	b.n	8008ef0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008ebc:	f000 fda6 	bl	8009a0c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ec0:	4b10      	ldr	r3, [pc, #64]	; (8008f04 <prvCheckTasksWaitingTermination+0x50>)
 8008ec2:	68db      	ldr	r3, [r3, #12]
 8008ec4:	68db      	ldr	r3, [r3, #12]
 8008ec6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	3304      	adds	r3, #4
 8008ecc:	4618      	mov	r0, r3
 8008ece:	f7fe fca9 	bl	8007824 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008ed2:	4b0d      	ldr	r3, [pc, #52]	; (8008f08 <prvCheckTasksWaitingTermination+0x54>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	3b01      	subs	r3, #1
 8008ed8:	4a0b      	ldr	r2, [pc, #44]	; (8008f08 <prvCheckTasksWaitingTermination+0x54>)
 8008eda:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008edc:	4b0b      	ldr	r3, [pc, #44]	; (8008f0c <prvCheckTasksWaitingTermination+0x58>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	3b01      	subs	r3, #1
 8008ee2:	4a0a      	ldr	r2, [pc, #40]	; (8008f0c <prvCheckTasksWaitingTermination+0x58>)
 8008ee4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008ee6:	f000 fdc1 	bl	8009a6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 f810 	bl	8008f10 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ef0:	4b06      	ldr	r3, [pc, #24]	; (8008f0c <prvCheckTasksWaitingTermination+0x58>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d1e1      	bne.n	8008ebc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008ef8:	bf00      	nop
 8008efa:	bf00      	nop
 8008efc:	3708      	adds	r7, #8
 8008efe:	46bd      	mov	sp, r7
 8008f00:	bd80      	pop	{r7, pc}
 8008f02:	bf00      	nop
 8008f04:	20000eb4 	.word	0x20000eb4
 8008f08:	20000ee0 	.word	0x20000ee0
 8008f0c:	20000ec8 	.word	0x20000ec8

08008f10 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b084      	sub	sp, #16
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	334c      	adds	r3, #76	; 0x4c
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	f001 fe85 	bl	800ac2c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d108      	bne.n	8008f3e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f30:	4618      	mov	r0, r3
 8008f32:	f000 ff2f 	bl	8009d94 <vPortFree>
				vPortFree( pxTCB );
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f000 ff2c 	bl	8009d94 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008f3c:	e018      	b.n	8008f70 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008f44:	2b01      	cmp	r3, #1
 8008f46:	d103      	bne.n	8008f50 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f000 ff23 	bl	8009d94 <vPortFree>
	}
 8008f4e:	e00f      	b.n	8008f70 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008f56:	2b02      	cmp	r3, #2
 8008f58:	d00a      	beq.n	8008f70 <prvDeleteTCB+0x60>
	__asm volatile
 8008f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f5e:	f383 8811 	msr	BASEPRI, r3
 8008f62:	f3bf 8f6f 	isb	sy
 8008f66:	f3bf 8f4f 	dsb	sy
 8008f6a:	60fb      	str	r3, [r7, #12]
}
 8008f6c:	bf00      	nop
 8008f6e:	e7fe      	b.n	8008f6e <prvDeleteTCB+0x5e>
	}
 8008f70:	bf00      	nop
 8008f72:	3710      	adds	r7, #16
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}

08008f78 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008f78:	b480      	push	{r7}
 8008f7a:	b083      	sub	sp, #12
 8008f7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f7e:	4b0c      	ldr	r3, [pc, #48]	; (8008fb0 <prvResetNextTaskUnblockTime+0x38>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d104      	bne.n	8008f92 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008f88:	4b0a      	ldr	r3, [pc, #40]	; (8008fb4 <prvResetNextTaskUnblockTime+0x3c>)
 8008f8a:	f04f 32ff 	mov.w	r2, #4294967295
 8008f8e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008f90:	e008      	b.n	8008fa4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f92:	4b07      	ldr	r3, [pc, #28]	; (8008fb0 <prvResetNextTaskUnblockTime+0x38>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	68db      	ldr	r3, [r3, #12]
 8008f98:	68db      	ldr	r3, [r3, #12]
 8008f9a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	4a04      	ldr	r2, [pc, #16]	; (8008fb4 <prvResetNextTaskUnblockTime+0x3c>)
 8008fa2:	6013      	str	r3, [r2, #0]
}
 8008fa4:	bf00      	nop
 8008fa6:	370c      	adds	r7, #12
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bc80      	pop	{r7}
 8008fac:	4770      	bx	lr
 8008fae:	bf00      	nop
 8008fb0:	20000e98 	.word	0x20000e98
 8008fb4:	20000f00 	.word	0x20000f00

08008fb8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008fb8:	b480      	push	{r7}
 8008fba:	b083      	sub	sp, #12
 8008fbc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008fbe:	4b0b      	ldr	r3, [pc, #44]	; (8008fec <xTaskGetSchedulerState+0x34>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d102      	bne.n	8008fcc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	607b      	str	r3, [r7, #4]
 8008fca:	e008      	b.n	8008fde <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008fcc:	4b08      	ldr	r3, [pc, #32]	; (8008ff0 <xTaskGetSchedulerState+0x38>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d102      	bne.n	8008fda <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008fd4:	2302      	movs	r3, #2
 8008fd6:	607b      	str	r3, [r7, #4]
 8008fd8:	e001      	b.n	8008fde <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008fde:	687b      	ldr	r3, [r7, #4]
	}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	370c      	adds	r7, #12
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bc80      	pop	{r7}
 8008fe8:	4770      	bx	lr
 8008fea:	bf00      	nop
 8008fec:	20000eec 	.word	0x20000eec
 8008ff0:	20000f08 	.word	0x20000f08

08008ff4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b086      	sub	sp, #24
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009000:	2300      	movs	r3, #0
 8009002:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d06e      	beq.n	80090e8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800900a:	4b3a      	ldr	r3, [pc, #232]	; (80090f4 <xTaskPriorityDisinherit+0x100>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	693a      	ldr	r2, [r7, #16]
 8009010:	429a      	cmp	r2, r3
 8009012:	d00a      	beq.n	800902a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009018:	f383 8811 	msr	BASEPRI, r3
 800901c:	f3bf 8f6f 	isb	sy
 8009020:	f3bf 8f4f 	dsb	sy
 8009024:	60fb      	str	r3, [r7, #12]
}
 8009026:	bf00      	nop
 8009028:	e7fe      	b.n	8009028 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800902e:	2b00      	cmp	r3, #0
 8009030:	d10a      	bne.n	8009048 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009036:	f383 8811 	msr	BASEPRI, r3
 800903a:	f3bf 8f6f 	isb	sy
 800903e:	f3bf 8f4f 	dsb	sy
 8009042:	60bb      	str	r3, [r7, #8]
}
 8009044:	bf00      	nop
 8009046:	e7fe      	b.n	8009046 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800904c:	1e5a      	subs	r2, r3, #1
 800904e:	693b      	ldr	r3, [r7, #16]
 8009050:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800905a:	429a      	cmp	r2, r3
 800905c:	d044      	beq.n	80090e8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800905e:	693b      	ldr	r3, [r7, #16]
 8009060:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009062:	2b00      	cmp	r3, #0
 8009064:	d140      	bne.n	80090e8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	3304      	adds	r3, #4
 800906a:	4618      	mov	r0, r3
 800906c:	f7fe fbda 	bl	8007824 <uxListRemove>
 8009070:	4603      	mov	r3, r0
 8009072:	2b00      	cmp	r3, #0
 8009074:	d115      	bne.n	80090a2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800907a:	491f      	ldr	r1, [pc, #124]	; (80090f8 <xTaskPriorityDisinherit+0x104>)
 800907c:	4613      	mov	r3, r2
 800907e:	009b      	lsls	r3, r3, #2
 8009080:	4413      	add	r3, r2
 8009082:	009b      	lsls	r3, r3, #2
 8009084:	440b      	add	r3, r1
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d10a      	bne.n	80090a2 <xTaskPriorityDisinherit+0xae>
 800908c:	693b      	ldr	r3, [r7, #16]
 800908e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009090:	2201      	movs	r2, #1
 8009092:	fa02 f303 	lsl.w	r3, r2, r3
 8009096:	43da      	mvns	r2, r3
 8009098:	4b18      	ldr	r3, [pc, #96]	; (80090fc <xTaskPriorityDisinherit+0x108>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	4013      	ands	r3, r2
 800909e:	4a17      	ldr	r2, [pc, #92]	; (80090fc <xTaskPriorityDisinherit+0x108>)
 80090a0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ae:	f1c3 0207 	rsb	r2, r3, #7
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ba:	2201      	movs	r2, #1
 80090bc:	409a      	lsls	r2, r3
 80090be:	4b0f      	ldr	r3, [pc, #60]	; (80090fc <xTaskPriorityDisinherit+0x108>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4313      	orrs	r3, r2
 80090c4:	4a0d      	ldr	r2, [pc, #52]	; (80090fc <xTaskPriorityDisinherit+0x108>)
 80090c6:	6013      	str	r3, [r2, #0]
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090cc:	4613      	mov	r3, r2
 80090ce:	009b      	lsls	r3, r3, #2
 80090d0:	4413      	add	r3, r2
 80090d2:	009b      	lsls	r3, r3, #2
 80090d4:	4a08      	ldr	r2, [pc, #32]	; (80090f8 <xTaskPriorityDisinherit+0x104>)
 80090d6:	441a      	add	r2, r3
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	3304      	adds	r3, #4
 80090dc:	4619      	mov	r1, r3
 80090de:	4610      	mov	r0, r2
 80090e0:	f7fe fb45 	bl	800776e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80090e4:	2301      	movs	r3, #1
 80090e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80090e8:	697b      	ldr	r3, [r7, #20]
	}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3718      	adds	r7, #24
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}
 80090f2:	bf00      	nop
 80090f4:	20000de0 	.word	0x20000de0
 80090f8:	20000de4 	.word	0x20000de4
 80090fc:	20000ee8 	.word	0x20000ee8

08009100 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b084      	sub	sp, #16
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800910a:	4b29      	ldr	r3, [pc, #164]	; (80091b0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009110:	4b28      	ldr	r3, [pc, #160]	; (80091b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	3304      	adds	r3, #4
 8009116:	4618      	mov	r0, r3
 8009118:	f7fe fb84 	bl	8007824 <uxListRemove>
 800911c:	4603      	mov	r3, r0
 800911e:	2b00      	cmp	r3, #0
 8009120:	d10b      	bne.n	800913a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009122:	4b24      	ldr	r3, [pc, #144]	; (80091b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009128:	2201      	movs	r2, #1
 800912a:	fa02 f303 	lsl.w	r3, r2, r3
 800912e:	43da      	mvns	r2, r3
 8009130:	4b21      	ldr	r3, [pc, #132]	; (80091b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	4013      	ands	r3, r2
 8009136:	4a20      	ldr	r2, [pc, #128]	; (80091b8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009138:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009140:	d10a      	bne.n	8009158 <prvAddCurrentTaskToDelayedList+0x58>
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d007      	beq.n	8009158 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009148:	4b1a      	ldr	r3, [pc, #104]	; (80091b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	3304      	adds	r3, #4
 800914e:	4619      	mov	r1, r3
 8009150:	481a      	ldr	r0, [pc, #104]	; (80091bc <prvAddCurrentTaskToDelayedList+0xbc>)
 8009152:	f7fe fb0c 	bl	800776e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009156:	e026      	b.n	80091a6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009158:	68fa      	ldr	r2, [r7, #12]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	4413      	add	r3, r2
 800915e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009160:	4b14      	ldr	r3, [pc, #80]	; (80091b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	68ba      	ldr	r2, [r7, #8]
 8009166:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009168:	68ba      	ldr	r2, [r7, #8]
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	429a      	cmp	r2, r3
 800916e:	d209      	bcs.n	8009184 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009170:	4b13      	ldr	r3, [pc, #76]	; (80091c0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009172:	681a      	ldr	r2, [r3, #0]
 8009174:	4b0f      	ldr	r3, [pc, #60]	; (80091b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	3304      	adds	r3, #4
 800917a:	4619      	mov	r1, r3
 800917c:	4610      	mov	r0, r2
 800917e:	f7fe fb19 	bl	80077b4 <vListInsert>
}
 8009182:	e010      	b.n	80091a6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009184:	4b0f      	ldr	r3, [pc, #60]	; (80091c4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009186:	681a      	ldr	r2, [r3, #0]
 8009188:	4b0a      	ldr	r3, [pc, #40]	; (80091b4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	3304      	adds	r3, #4
 800918e:	4619      	mov	r1, r3
 8009190:	4610      	mov	r0, r2
 8009192:	f7fe fb0f 	bl	80077b4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009196:	4b0c      	ldr	r3, [pc, #48]	; (80091c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	68ba      	ldr	r2, [r7, #8]
 800919c:	429a      	cmp	r2, r3
 800919e:	d202      	bcs.n	80091a6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80091a0:	4a09      	ldr	r2, [pc, #36]	; (80091c8 <prvAddCurrentTaskToDelayedList+0xc8>)
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	6013      	str	r3, [r2, #0]
}
 80091a6:	bf00      	nop
 80091a8:	3710      	adds	r7, #16
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}
 80091ae:	bf00      	nop
 80091b0:	20000ee4 	.word	0x20000ee4
 80091b4:	20000de0 	.word	0x20000de0
 80091b8:	20000ee8 	.word	0x20000ee8
 80091bc:	20000ecc 	.word	0x20000ecc
 80091c0:	20000e9c 	.word	0x20000e9c
 80091c4:	20000e98 	.word	0x20000e98
 80091c8:	20000f00 	.word	0x20000f00

080091cc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b08a      	sub	sp, #40	; 0x28
 80091d0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80091d2:	2300      	movs	r3, #0
 80091d4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80091d6:	f000 fae9 	bl	80097ac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80091da:	4b1c      	ldr	r3, [pc, #112]	; (800924c <xTimerCreateTimerTask+0x80>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d021      	beq.n	8009226 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80091e2:	2300      	movs	r3, #0
 80091e4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80091e6:	2300      	movs	r3, #0
 80091e8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80091ea:	1d3a      	adds	r2, r7, #4
 80091ec:	f107 0108 	add.w	r1, r7, #8
 80091f0:	f107 030c 	add.w	r3, r7, #12
 80091f4:	4618      	mov	r0, r3
 80091f6:	f7f7 fe4f 	bl	8000e98 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80091fa:	6879      	ldr	r1, [r7, #4]
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	68fa      	ldr	r2, [r7, #12]
 8009200:	9202      	str	r2, [sp, #8]
 8009202:	9301      	str	r3, [sp, #4]
 8009204:	2302      	movs	r3, #2
 8009206:	9300      	str	r3, [sp, #0]
 8009208:	2300      	movs	r3, #0
 800920a:	460a      	mov	r2, r1
 800920c:	4910      	ldr	r1, [pc, #64]	; (8009250 <xTimerCreateTimerTask+0x84>)
 800920e:	4811      	ldr	r0, [pc, #68]	; (8009254 <xTimerCreateTimerTask+0x88>)
 8009210:	f7ff f8a0 	bl	8008354 <xTaskCreateStatic>
 8009214:	4603      	mov	r3, r0
 8009216:	4a10      	ldr	r2, [pc, #64]	; (8009258 <xTimerCreateTimerTask+0x8c>)
 8009218:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800921a:	4b0f      	ldr	r3, [pc, #60]	; (8009258 <xTimerCreateTimerTask+0x8c>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d001      	beq.n	8009226 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009222:	2301      	movs	r3, #1
 8009224:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009226:	697b      	ldr	r3, [r7, #20]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d10a      	bne.n	8009242 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800922c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009230:	f383 8811 	msr	BASEPRI, r3
 8009234:	f3bf 8f6f 	isb	sy
 8009238:	f3bf 8f4f 	dsb	sy
 800923c:	613b      	str	r3, [r7, #16]
}
 800923e:	bf00      	nop
 8009240:	e7fe      	b.n	8009240 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009242:	697b      	ldr	r3, [r7, #20]
}
 8009244:	4618      	mov	r0, r3
 8009246:	3718      	adds	r7, #24
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}
 800924c:	20000f3c 	.word	0x20000f3c
 8009250:	0800d110 	.word	0x0800d110
 8009254:	08009391 	.word	0x08009391
 8009258:	20000f40 	.word	0x20000f40

0800925c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b08a      	sub	sp, #40	; 0x28
 8009260:	af00      	add	r7, sp, #0
 8009262:	60f8      	str	r0, [r7, #12]
 8009264:	60b9      	str	r1, [r7, #8]
 8009266:	607a      	str	r2, [r7, #4]
 8009268:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800926a:	2300      	movs	r3, #0
 800926c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d10a      	bne.n	800928a <xTimerGenericCommand+0x2e>
	__asm volatile
 8009274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009278:	f383 8811 	msr	BASEPRI, r3
 800927c:	f3bf 8f6f 	isb	sy
 8009280:	f3bf 8f4f 	dsb	sy
 8009284:	623b      	str	r3, [r7, #32]
}
 8009286:	bf00      	nop
 8009288:	e7fe      	b.n	8009288 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800928a:	4b1a      	ldr	r3, [pc, #104]	; (80092f4 <xTimerGenericCommand+0x98>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d02a      	beq.n	80092e8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	2b05      	cmp	r3, #5
 80092a2:	dc18      	bgt.n	80092d6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80092a4:	f7ff fe88 	bl	8008fb8 <xTaskGetSchedulerState>
 80092a8:	4603      	mov	r3, r0
 80092aa:	2b02      	cmp	r3, #2
 80092ac:	d109      	bne.n	80092c2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80092ae:	4b11      	ldr	r3, [pc, #68]	; (80092f4 <xTimerGenericCommand+0x98>)
 80092b0:	6818      	ldr	r0, [r3, #0]
 80092b2:	f107 0114 	add.w	r1, r7, #20
 80092b6:	2300      	movs	r3, #0
 80092b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092ba:	f7fe fc69 	bl	8007b90 <xQueueGenericSend>
 80092be:	6278      	str	r0, [r7, #36]	; 0x24
 80092c0:	e012      	b.n	80092e8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80092c2:	4b0c      	ldr	r3, [pc, #48]	; (80092f4 <xTimerGenericCommand+0x98>)
 80092c4:	6818      	ldr	r0, [r3, #0]
 80092c6:	f107 0114 	add.w	r1, r7, #20
 80092ca:	2300      	movs	r3, #0
 80092cc:	2200      	movs	r2, #0
 80092ce:	f7fe fc5f 	bl	8007b90 <xQueueGenericSend>
 80092d2:	6278      	str	r0, [r7, #36]	; 0x24
 80092d4:	e008      	b.n	80092e8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80092d6:	4b07      	ldr	r3, [pc, #28]	; (80092f4 <xTimerGenericCommand+0x98>)
 80092d8:	6818      	ldr	r0, [r3, #0]
 80092da:	f107 0114 	add.w	r1, r7, #20
 80092de:	2300      	movs	r3, #0
 80092e0:	683a      	ldr	r2, [r7, #0]
 80092e2:	f7fe fd53 	bl	8007d8c <xQueueGenericSendFromISR>
 80092e6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80092e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80092ea:	4618      	mov	r0, r3
 80092ec:	3728      	adds	r7, #40	; 0x28
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}
 80092f2:	bf00      	nop
 80092f4:	20000f3c 	.word	0x20000f3c

080092f8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b088      	sub	sp, #32
 80092fc:	af02      	add	r7, sp, #8
 80092fe:	6078      	str	r0, [r7, #4]
 8009300:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009302:	4b22      	ldr	r3, [pc, #136]	; (800938c <prvProcessExpiredTimer+0x94>)
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	68db      	ldr	r3, [r3, #12]
 8009308:	68db      	ldr	r3, [r3, #12]
 800930a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	3304      	adds	r3, #4
 8009310:	4618      	mov	r0, r3
 8009312:	f7fe fa87 	bl	8007824 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009316:	697b      	ldr	r3, [r7, #20]
 8009318:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800931c:	f003 0304 	and.w	r3, r3, #4
 8009320:	2b00      	cmp	r3, #0
 8009322:	d022      	beq.n	800936a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	699a      	ldr	r2, [r3, #24]
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	18d1      	adds	r1, r2, r3
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	683a      	ldr	r2, [r7, #0]
 8009330:	6978      	ldr	r0, [r7, #20]
 8009332:	f000 f8cf 	bl	80094d4 <prvInsertTimerInActiveList>
 8009336:	4603      	mov	r3, r0
 8009338:	2b00      	cmp	r3, #0
 800933a:	d01f      	beq.n	800937c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800933c:	2300      	movs	r3, #0
 800933e:	9300      	str	r3, [sp, #0]
 8009340:	2300      	movs	r3, #0
 8009342:	687a      	ldr	r2, [r7, #4]
 8009344:	2100      	movs	r1, #0
 8009346:	6978      	ldr	r0, [r7, #20]
 8009348:	f7ff ff88 	bl	800925c <xTimerGenericCommand>
 800934c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d113      	bne.n	800937c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009358:	f383 8811 	msr	BASEPRI, r3
 800935c:	f3bf 8f6f 	isb	sy
 8009360:	f3bf 8f4f 	dsb	sy
 8009364:	60fb      	str	r3, [r7, #12]
}
 8009366:	bf00      	nop
 8009368:	e7fe      	b.n	8009368 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009370:	f023 0301 	bic.w	r3, r3, #1
 8009374:	b2da      	uxtb	r2, r3
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800937c:	697b      	ldr	r3, [r7, #20]
 800937e:	6a1b      	ldr	r3, [r3, #32]
 8009380:	6978      	ldr	r0, [r7, #20]
 8009382:	4798      	blx	r3
}
 8009384:	bf00      	nop
 8009386:	3718      	adds	r7, #24
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}
 800938c:	20000f34 	.word	0x20000f34

08009390 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b084      	sub	sp, #16
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009398:	f107 0308 	add.w	r3, r7, #8
 800939c:	4618      	mov	r0, r3
 800939e:	f000 f857 	bl	8009450 <prvGetNextExpireTime>
 80093a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	4619      	mov	r1, r3
 80093a8:	68f8      	ldr	r0, [r7, #12]
 80093aa:	f000 f803 	bl	80093b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80093ae:	f000 f8d3 	bl	8009558 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80093b2:	e7f1      	b.n	8009398 <prvTimerTask+0x8>

080093b4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80093b4:	b580      	push	{r7, lr}
 80093b6:	b084      	sub	sp, #16
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
 80093bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80093be:	f7ff fa17 	bl	80087f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80093c2:	f107 0308 	add.w	r3, r7, #8
 80093c6:	4618      	mov	r0, r3
 80093c8:	f000 f864 	bl	8009494 <prvSampleTimeNow>
 80093cc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d130      	bne.n	8009436 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d10a      	bne.n	80093f0 <prvProcessTimerOrBlockTask+0x3c>
 80093da:	687a      	ldr	r2, [r7, #4]
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	429a      	cmp	r2, r3
 80093e0:	d806      	bhi.n	80093f0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80093e2:	f7ff fa13 	bl	800880c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80093e6:	68f9      	ldr	r1, [r7, #12]
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f7ff ff85 	bl	80092f8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80093ee:	e024      	b.n	800943a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d008      	beq.n	8009408 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80093f6:	4b13      	ldr	r3, [pc, #76]	; (8009444 <prvProcessTimerOrBlockTask+0x90>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d101      	bne.n	8009404 <prvProcessTimerOrBlockTask+0x50>
 8009400:	2301      	movs	r3, #1
 8009402:	e000      	b.n	8009406 <prvProcessTimerOrBlockTask+0x52>
 8009404:	2300      	movs	r3, #0
 8009406:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009408:	4b0f      	ldr	r3, [pc, #60]	; (8009448 <prvProcessTimerOrBlockTask+0x94>)
 800940a:	6818      	ldr	r0, [r3, #0]
 800940c:	687a      	ldr	r2, [r7, #4]
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	1ad3      	subs	r3, r2, r3
 8009412:	683a      	ldr	r2, [r7, #0]
 8009414:	4619      	mov	r1, r3
 8009416:	f7fe ff69 	bl	80082ec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800941a:	f7ff f9f7 	bl	800880c <xTaskResumeAll>
 800941e:	4603      	mov	r3, r0
 8009420:	2b00      	cmp	r3, #0
 8009422:	d10a      	bne.n	800943a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009424:	4b09      	ldr	r3, [pc, #36]	; (800944c <prvProcessTimerOrBlockTask+0x98>)
 8009426:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800942a:	601a      	str	r2, [r3, #0]
 800942c:	f3bf 8f4f 	dsb	sy
 8009430:	f3bf 8f6f 	isb	sy
}
 8009434:	e001      	b.n	800943a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009436:	f7ff f9e9 	bl	800880c <xTaskResumeAll>
}
 800943a:	bf00      	nop
 800943c:	3710      	adds	r7, #16
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}
 8009442:	bf00      	nop
 8009444:	20000f38 	.word	0x20000f38
 8009448:	20000f3c 	.word	0x20000f3c
 800944c:	e000ed04 	.word	0xe000ed04

08009450 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009450:	b480      	push	{r7}
 8009452:	b085      	sub	sp, #20
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009458:	4b0d      	ldr	r3, [pc, #52]	; (8009490 <prvGetNextExpireTime+0x40>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d101      	bne.n	8009466 <prvGetNextExpireTime+0x16>
 8009462:	2201      	movs	r2, #1
 8009464:	e000      	b.n	8009468 <prvGetNextExpireTime+0x18>
 8009466:	2200      	movs	r2, #0
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d105      	bne.n	8009480 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009474:	4b06      	ldr	r3, [pc, #24]	; (8009490 <prvGetNextExpireTime+0x40>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	68db      	ldr	r3, [r3, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	60fb      	str	r3, [r7, #12]
 800947e:	e001      	b.n	8009484 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009480:	2300      	movs	r3, #0
 8009482:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009484:	68fb      	ldr	r3, [r7, #12]
}
 8009486:	4618      	mov	r0, r3
 8009488:	3714      	adds	r7, #20
 800948a:	46bd      	mov	sp, r7
 800948c:	bc80      	pop	{r7}
 800948e:	4770      	bx	lr
 8009490:	20000f34 	.word	0x20000f34

08009494 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b084      	sub	sp, #16
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800949c:	f7ff fa52 	bl	8008944 <xTaskGetTickCount>
 80094a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80094a2:	4b0b      	ldr	r3, [pc, #44]	; (80094d0 <prvSampleTimeNow+0x3c>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	68fa      	ldr	r2, [r7, #12]
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d205      	bcs.n	80094b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80094ac:	f000 f91a 	bl	80096e4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2201      	movs	r2, #1
 80094b4:	601a      	str	r2, [r3, #0]
 80094b6:	e002      	b.n	80094be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2200      	movs	r2, #0
 80094bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80094be:	4a04      	ldr	r2, [pc, #16]	; (80094d0 <prvSampleTimeNow+0x3c>)
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80094c4:	68fb      	ldr	r3, [r7, #12]
}
 80094c6:	4618      	mov	r0, r3
 80094c8:	3710      	adds	r7, #16
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}
 80094ce:	bf00      	nop
 80094d0:	20000f44 	.word	0x20000f44

080094d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b086      	sub	sp, #24
 80094d8:	af00      	add	r7, sp, #0
 80094da:	60f8      	str	r0, [r7, #12]
 80094dc:	60b9      	str	r1, [r7, #8]
 80094de:	607a      	str	r2, [r7, #4]
 80094e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80094e2:	2300      	movs	r3, #0
 80094e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	68ba      	ldr	r2, [r7, #8]
 80094ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	68fa      	ldr	r2, [r7, #12]
 80094f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80094f2:	68ba      	ldr	r2, [r7, #8]
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	429a      	cmp	r2, r3
 80094f8:	d812      	bhi.n	8009520 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094fa:	687a      	ldr	r2, [r7, #4]
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	1ad2      	subs	r2, r2, r3
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	699b      	ldr	r3, [r3, #24]
 8009504:	429a      	cmp	r2, r3
 8009506:	d302      	bcc.n	800950e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009508:	2301      	movs	r3, #1
 800950a:	617b      	str	r3, [r7, #20]
 800950c:	e01b      	b.n	8009546 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800950e:	4b10      	ldr	r3, [pc, #64]	; (8009550 <prvInsertTimerInActiveList+0x7c>)
 8009510:	681a      	ldr	r2, [r3, #0]
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	3304      	adds	r3, #4
 8009516:	4619      	mov	r1, r3
 8009518:	4610      	mov	r0, r2
 800951a:	f7fe f94b 	bl	80077b4 <vListInsert>
 800951e:	e012      	b.n	8009546 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009520:	687a      	ldr	r2, [r7, #4]
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	429a      	cmp	r2, r3
 8009526:	d206      	bcs.n	8009536 <prvInsertTimerInActiveList+0x62>
 8009528:	68ba      	ldr	r2, [r7, #8]
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	429a      	cmp	r2, r3
 800952e:	d302      	bcc.n	8009536 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009530:	2301      	movs	r3, #1
 8009532:	617b      	str	r3, [r7, #20]
 8009534:	e007      	b.n	8009546 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009536:	4b07      	ldr	r3, [pc, #28]	; (8009554 <prvInsertTimerInActiveList+0x80>)
 8009538:	681a      	ldr	r2, [r3, #0]
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	3304      	adds	r3, #4
 800953e:	4619      	mov	r1, r3
 8009540:	4610      	mov	r0, r2
 8009542:	f7fe f937 	bl	80077b4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009546:	697b      	ldr	r3, [r7, #20]
}
 8009548:	4618      	mov	r0, r3
 800954a:	3718      	adds	r7, #24
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}
 8009550:	20000f38 	.word	0x20000f38
 8009554:	20000f34 	.word	0x20000f34

08009558 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b08c      	sub	sp, #48	; 0x30
 800955c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800955e:	e0ae      	b.n	80096be <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	2b00      	cmp	r3, #0
 8009564:	f2c0 80aa 	blt.w	80096bc <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009568:	693b      	ldr	r3, [r7, #16]
 800956a:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800956c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800956e:	695b      	ldr	r3, [r3, #20]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d004      	beq.n	800957e <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009576:	3304      	adds	r3, #4
 8009578:	4618      	mov	r0, r3
 800957a:	f7fe f953 	bl	8007824 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800957e:	1d3b      	adds	r3, r7, #4
 8009580:	4618      	mov	r0, r3
 8009582:	f7ff ff87 	bl	8009494 <prvSampleTimeNow>
 8009586:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	2b09      	cmp	r3, #9
 800958c:	f200 8097 	bhi.w	80096be <prvProcessReceivedCommands+0x166>
 8009590:	a201      	add	r2, pc, #4	; (adr r2, 8009598 <prvProcessReceivedCommands+0x40>)
 8009592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009596:	bf00      	nop
 8009598:	080095c1 	.word	0x080095c1
 800959c:	080095c1 	.word	0x080095c1
 80095a0:	080095c1 	.word	0x080095c1
 80095a4:	08009635 	.word	0x08009635
 80095a8:	08009649 	.word	0x08009649
 80095ac:	08009693 	.word	0x08009693
 80095b0:	080095c1 	.word	0x080095c1
 80095b4:	080095c1 	.word	0x080095c1
 80095b8:	08009635 	.word	0x08009635
 80095bc:	08009649 	.word	0x08009649
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80095c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80095c6:	f043 0301 	orr.w	r3, r3, #1
 80095ca:	b2da      	uxtb	r2, r3
 80095cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80095d2:	68fa      	ldr	r2, [r7, #12]
 80095d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095d6:	699b      	ldr	r3, [r3, #24]
 80095d8:	18d1      	adds	r1, r2, r3
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	6a3a      	ldr	r2, [r7, #32]
 80095de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80095e0:	f7ff ff78 	bl	80094d4 <prvInsertTimerInActiveList>
 80095e4:	4603      	mov	r3, r0
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d069      	beq.n	80096be <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80095ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ec:	6a1b      	ldr	r3, [r3, #32]
 80095ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80095f0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80095f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80095f8:	f003 0304 	and.w	r3, r3, #4
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d05e      	beq.n	80096be <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009600:	68fa      	ldr	r2, [r7, #12]
 8009602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009604:	699b      	ldr	r3, [r3, #24]
 8009606:	441a      	add	r2, r3
 8009608:	2300      	movs	r3, #0
 800960a:	9300      	str	r3, [sp, #0]
 800960c:	2300      	movs	r3, #0
 800960e:	2100      	movs	r1, #0
 8009610:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009612:	f7ff fe23 	bl	800925c <xTimerGenericCommand>
 8009616:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8009618:	69fb      	ldr	r3, [r7, #28]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d14f      	bne.n	80096be <prvProcessReceivedCommands+0x166>
	__asm volatile
 800961e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009622:	f383 8811 	msr	BASEPRI, r3
 8009626:	f3bf 8f6f 	isb	sy
 800962a:	f3bf 8f4f 	dsb	sy
 800962e:	61bb      	str	r3, [r7, #24]
}
 8009630:	bf00      	nop
 8009632:	e7fe      	b.n	8009632 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009636:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800963a:	f023 0301 	bic.w	r3, r3, #1
 800963e:	b2da      	uxtb	r2, r3
 8009640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009642:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8009646:	e03a      	b.n	80096be <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800964a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800964e:	f043 0301 	orr.w	r3, r3, #1
 8009652:	b2da      	uxtb	r2, r3
 8009654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009656:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800965a:	68fa      	ldr	r2, [r7, #12]
 800965c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800965e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009662:	699b      	ldr	r3, [r3, #24]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d10a      	bne.n	800967e <prvProcessReceivedCommands+0x126>
	__asm volatile
 8009668:	f04f 0350 	mov.w	r3, #80	; 0x50
 800966c:	f383 8811 	msr	BASEPRI, r3
 8009670:	f3bf 8f6f 	isb	sy
 8009674:	f3bf 8f4f 	dsb	sy
 8009678:	617b      	str	r3, [r7, #20]
}
 800967a:	bf00      	nop
 800967c:	e7fe      	b.n	800967c <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800967e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009680:	699a      	ldr	r2, [r3, #24]
 8009682:	6a3b      	ldr	r3, [r7, #32]
 8009684:	18d1      	adds	r1, r2, r3
 8009686:	6a3b      	ldr	r3, [r7, #32]
 8009688:	6a3a      	ldr	r2, [r7, #32]
 800968a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800968c:	f7ff ff22 	bl	80094d4 <prvInsertTimerInActiveList>
					break;
 8009690:	e015      	b.n	80096be <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009694:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009698:	f003 0302 	and.w	r3, r3, #2
 800969c:	2b00      	cmp	r3, #0
 800969e:	d103      	bne.n	80096a8 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 80096a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80096a2:	f000 fb77 	bl	8009d94 <vPortFree>
 80096a6:	e00a      	b.n	80096be <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80096a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80096ae:	f023 0301 	bic.w	r3, r3, #1
 80096b2:	b2da      	uxtb	r2, r3
 80096b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80096ba:	e000      	b.n	80096be <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80096bc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80096be:	4b08      	ldr	r3, [pc, #32]	; (80096e0 <prvProcessReceivedCommands+0x188>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f107 0108 	add.w	r1, r7, #8
 80096c6:	2200      	movs	r2, #0
 80096c8:	4618      	mov	r0, r3
 80096ca:	f7fe fbf7 	bl	8007ebc <xQueueReceive>
 80096ce:	4603      	mov	r3, r0
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	f47f af45 	bne.w	8009560 <prvProcessReceivedCommands+0x8>
	}
}
 80096d6:	bf00      	nop
 80096d8:	bf00      	nop
 80096da:	3728      	adds	r7, #40	; 0x28
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}
 80096e0:	20000f3c 	.word	0x20000f3c

080096e4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b088      	sub	sp, #32
 80096e8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80096ea:	e048      	b.n	800977e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80096ec:	4b2d      	ldr	r3, [pc, #180]	; (80097a4 <prvSwitchTimerLists+0xc0>)
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	68db      	ldr	r3, [r3, #12]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096f6:	4b2b      	ldr	r3, [pc, #172]	; (80097a4 <prvSwitchTimerLists+0xc0>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	68db      	ldr	r3, [r3, #12]
 80096fc:	68db      	ldr	r3, [r3, #12]
 80096fe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	3304      	adds	r3, #4
 8009704:	4618      	mov	r0, r3
 8009706:	f7fe f88d 	bl	8007824 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	6a1b      	ldr	r3, [r3, #32]
 800970e:	68f8      	ldr	r0, [r7, #12]
 8009710:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009718:	f003 0304 	and.w	r3, r3, #4
 800971c:	2b00      	cmp	r3, #0
 800971e:	d02e      	beq.n	800977e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	699b      	ldr	r3, [r3, #24]
 8009724:	693a      	ldr	r2, [r7, #16]
 8009726:	4413      	add	r3, r2
 8009728:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800972a:	68ba      	ldr	r2, [r7, #8]
 800972c:	693b      	ldr	r3, [r7, #16]
 800972e:	429a      	cmp	r2, r3
 8009730:	d90e      	bls.n	8009750 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	68ba      	ldr	r2, [r7, #8]
 8009736:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	68fa      	ldr	r2, [r7, #12]
 800973c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800973e:	4b19      	ldr	r3, [pc, #100]	; (80097a4 <prvSwitchTimerLists+0xc0>)
 8009740:	681a      	ldr	r2, [r3, #0]
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	3304      	adds	r3, #4
 8009746:	4619      	mov	r1, r3
 8009748:	4610      	mov	r0, r2
 800974a:	f7fe f833 	bl	80077b4 <vListInsert>
 800974e:	e016      	b.n	800977e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009750:	2300      	movs	r3, #0
 8009752:	9300      	str	r3, [sp, #0]
 8009754:	2300      	movs	r3, #0
 8009756:	693a      	ldr	r2, [r7, #16]
 8009758:	2100      	movs	r1, #0
 800975a:	68f8      	ldr	r0, [r7, #12]
 800975c:	f7ff fd7e 	bl	800925c <xTimerGenericCommand>
 8009760:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d10a      	bne.n	800977e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800976c:	f383 8811 	msr	BASEPRI, r3
 8009770:	f3bf 8f6f 	isb	sy
 8009774:	f3bf 8f4f 	dsb	sy
 8009778:	603b      	str	r3, [r7, #0]
}
 800977a:	bf00      	nop
 800977c:	e7fe      	b.n	800977c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800977e:	4b09      	ldr	r3, [pc, #36]	; (80097a4 <prvSwitchTimerLists+0xc0>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d1b1      	bne.n	80096ec <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009788:	4b06      	ldr	r3, [pc, #24]	; (80097a4 <prvSwitchTimerLists+0xc0>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800978e:	4b06      	ldr	r3, [pc, #24]	; (80097a8 <prvSwitchTimerLists+0xc4>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	4a04      	ldr	r2, [pc, #16]	; (80097a4 <prvSwitchTimerLists+0xc0>)
 8009794:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009796:	4a04      	ldr	r2, [pc, #16]	; (80097a8 <prvSwitchTimerLists+0xc4>)
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	6013      	str	r3, [r2, #0]
}
 800979c:	bf00      	nop
 800979e:	3718      	adds	r7, #24
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}
 80097a4:	20000f34 	.word	0x20000f34
 80097a8:	20000f38 	.word	0x20000f38

080097ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b082      	sub	sp, #8
 80097b0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80097b2:	f000 f92b 	bl	8009a0c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80097b6:	4b15      	ldr	r3, [pc, #84]	; (800980c <prvCheckForValidListAndQueue+0x60>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d120      	bne.n	8009800 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80097be:	4814      	ldr	r0, [pc, #80]	; (8009810 <prvCheckForValidListAndQueue+0x64>)
 80097c0:	f7fd ffaa 	bl	8007718 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80097c4:	4813      	ldr	r0, [pc, #76]	; (8009814 <prvCheckForValidListAndQueue+0x68>)
 80097c6:	f7fd ffa7 	bl	8007718 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80097ca:	4b13      	ldr	r3, [pc, #76]	; (8009818 <prvCheckForValidListAndQueue+0x6c>)
 80097cc:	4a10      	ldr	r2, [pc, #64]	; (8009810 <prvCheckForValidListAndQueue+0x64>)
 80097ce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80097d0:	4b12      	ldr	r3, [pc, #72]	; (800981c <prvCheckForValidListAndQueue+0x70>)
 80097d2:	4a10      	ldr	r2, [pc, #64]	; (8009814 <prvCheckForValidListAndQueue+0x68>)
 80097d4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80097d6:	2300      	movs	r3, #0
 80097d8:	9300      	str	r3, [sp, #0]
 80097da:	4b11      	ldr	r3, [pc, #68]	; (8009820 <prvCheckForValidListAndQueue+0x74>)
 80097dc:	4a11      	ldr	r2, [pc, #68]	; (8009824 <prvCheckForValidListAndQueue+0x78>)
 80097de:	210c      	movs	r1, #12
 80097e0:	200a      	movs	r0, #10
 80097e2:	f7fe f8b1 	bl	8007948 <xQueueGenericCreateStatic>
 80097e6:	4603      	mov	r3, r0
 80097e8:	4a08      	ldr	r2, [pc, #32]	; (800980c <prvCheckForValidListAndQueue+0x60>)
 80097ea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80097ec:	4b07      	ldr	r3, [pc, #28]	; (800980c <prvCheckForValidListAndQueue+0x60>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d005      	beq.n	8009800 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80097f4:	4b05      	ldr	r3, [pc, #20]	; (800980c <prvCheckForValidListAndQueue+0x60>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	490b      	ldr	r1, [pc, #44]	; (8009828 <prvCheckForValidListAndQueue+0x7c>)
 80097fa:	4618      	mov	r0, r3
 80097fc:	f7fe fd4e 	bl	800829c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009800:	f000 f934 	bl	8009a6c <vPortExitCritical>
}
 8009804:	bf00      	nop
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}
 800980a:	bf00      	nop
 800980c:	20000f3c 	.word	0x20000f3c
 8009810:	20000f0c 	.word	0x20000f0c
 8009814:	20000f20 	.word	0x20000f20
 8009818:	20000f34 	.word	0x20000f34
 800981c:	20000f38 	.word	0x20000f38
 8009820:	20000fc0 	.word	0x20000fc0
 8009824:	20000f48 	.word	0x20000f48
 8009828:	0800d118 	.word	0x0800d118

0800982c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800982c:	b480      	push	{r7}
 800982e:	b085      	sub	sp, #20
 8009830:	af00      	add	r7, sp, #0
 8009832:	60f8      	str	r0, [r7, #12]
 8009834:	60b9      	str	r1, [r7, #8]
 8009836:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	3b04      	subs	r3, #4
 800983c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009844:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	3b04      	subs	r3, #4
 800984a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	f023 0201 	bic.w	r2, r3, #1
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	3b04      	subs	r3, #4
 800985a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800985c:	4a08      	ldr	r2, [pc, #32]	; (8009880 <pxPortInitialiseStack+0x54>)
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	3b14      	subs	r3, #20
 8009866:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009868:	687a      	ldr	r2, [r7, #4]
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	3b20      	subs	r3, #32
 8009872:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009874:	68fb      	ldr	r3, [r7, #12]
}
 8009876:	4618      	mov	r0, r3
 8009878:	3714      	adds	r7, #20
 800987a:	46bd      	mov	sp, r7
 800987c:	bc80      	pop	{r7}
 800987e:	4770      	bx	lr
 8009880:	08009885 	.word	0x08009885

08009884 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009884:	b480      	push	{r7}
 8009886:	b085      	sub	sp, #20
 8009888:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800988a:	2300      	movs	r3, #0
 800988c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800988e:	4b12      	ldr	r3, [pc, #72]	; (80098d8 <prvTaskExitError+0x54>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009896:	d00a      	beq.n	80098ae <prvTaskExitError+0x2a>
	__asm volatile
 8009898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800989c:	f383 8811 	msr	BASEPRI, r3
 80098a0:	f3bf 8f6f 	isb	sy
 80098a4:	f3bf 8f4f 	dsb	sy
 80098a8:	60fb      	str	r3, [r7, #12]
}
 80098aa:	bf00      	nop
 80098ac:	e7fe      	b.n	80098ac <prvTaskExitError+0x28>
	__asm volatile
 80098ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098b2:	f383 8811 	msr	BASEPRI, r3
 80098b6:	f3bf 8f6f 	isb	sy
 80098ba:	f3bf 8f4f 	dsb	sy
 80098be:	60bb      	str	r3, [r7, #8]
}
 80098c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80098c2:	bf00      	nop
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d0fc      	beq.n	80098c4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80098ca:	bf00      	nop
 80098cc:	bf00      	nop
 80098ce:	3714      	adds	r7, #20
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bc80      	pop	{r7}
 80098d4:	4770      	bx	lr
 80098d6:	bf00      	nop
 80098d8:	2000000c 	.word	0x2000000c
 80098dc:	00000000 	.word	0x00000000

080098e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80098e0:	4b07      	ldr	r3, [pc, #28]	; (8009900 <pxCurrentTCBConst2>)
 80098e2:	6819      	ldr	r1, [r3, #0]
 80098e4:	6808      	ldr	r0, [r1, #0]
 80098e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80098ea:	f380 8809 	msr	PSP, r0
 80098ee:	f3bf 8f6f 	isb	sy
 80098f2:	f04f 0000 	mov.w	r0, #0
 80098f6:	f380 8811 	msr	BASEPRI, r0
 80098fa:	f04e 0e0d 	orr.w	lr, lr, #13
 80098fe:	4770      	bx	lr

08009900 <pxCurrentTCBConst2>:
 8009900:	20000de0 	.word	0x20000de0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009904:	bf00      	nop
 8009906:	bf00      	nop

08009908 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009908:	4806      	ldr	r0, [pc, #24]	; (8009924 <prvPortStartFirstTask+0x1c>)
 800990a:	6800      	ldr	r0, [r0, #0]
 800990c:	6800      	ldr	r0, [r0, #0]
 800990e:	f380 8808 	msr	MSP, r0
 8009912:	b662      	cpsie	i
 8009914:	b661      	cpsie	f
 8009916:	f3bf 8f4f 	dsb	sy
 800991a:	f3bf 8f6f 	isb	sy
 800991e:	df00      	svc	0
 8009920:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009922:	bf00      	nop
 8009924:	e000ed08 	.word	0xe000ed08

08009928 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b084      	sub	sp, #16
 800992c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800992e:	4b32      	ldr	r3, [pc, #200]	; (80099f8 <xPortStartScheduler+0xd0>)
 8009930:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	781b      	ldrb	r3, [r3, #0]
 8009936:	b2db      	uxtb	r3, r3
 8009938:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	22ff      	movs	r2, #255	; 0xff
 800993e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	781b      	ldrb	r3, [r3, #0]
 8009944:	b2db      	uxtb	r3, r3
 8009946:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009948:	78fb      	ldrb	r3, [r7, #3]
 800994a:	b2db      	uxtb	r3, r3
 800994c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009950:	b2da      	uxtb	r2, r3
 8009952:	4b2a      	ldr	r3, [pc, #168]	; (80099fc <xPortStartScheduler+0xd4>)
 8009954:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009956:	4b2a      	ldr	r3, [pc, #168]	; (8009a00 <xPortStartScheduler+0xd8>)
 8009958:	2207      	movs	r2, #7
 800995a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800995c:	e009      	b.n	8009972 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800995e:	4b28      	ldr	r3, [pc, #160]	; (8009a00 <xPortStartScheduler+0xd8>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	3b01      	subs	r3, #1
 8009964:	4a26      	ldr	r2, [pc, #152]	; (8009a00 <xPortStartScheduler+0xd8>)
 8009966:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009968:	78fb      	ldrb	r3, [r7, #3]
 800996a:	b2db      	uxtb	r3, r3
 800996c:	005b      	lsls	r3, r3, #1
 800996e:	b2db      	uxtb	r3, r3
 8009970:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009972:	78fb      	ldrb	r3, [r7, #3]
 8009974:	b2db      	uxtb	r3, r3
 8009976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800997a:	2b80      	cmp	r3, #128	; 0x80
 800997c:	d0ef      	beq.n	800995e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800997e:	4b20      	ldr	r3, [pc, #128]	; (8009a00 <xPortStartScheduler+0xd8>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f1c3 0307 	rsb	r3, r3, #7
 8009986:	2b04      	cmp	r3, #4
 8009988:	d00a      	beq.n	80099a0 <xPortStartScheduler+0x78>
	__asm volatile
 800998a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800998e:	f383 8811 	msr	BASEPRI, r3
 8009992:	f3bf 8f6f 	isb	sy
 8009996:	f3bf 8f4f 	dsb	sy
 800999a:	60bb      	str	r3, [r7, #8]
}
 800999c:	bf00      	nop
 800999e:	e7fe      	b.n	800999e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80099a0:	4b17      	ldr	r3, [pc, #92]	; (8009a00 <xPortStartScheduler+0xd8>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	021b      	lsls	r3, r3, #8
 80099a6:	4a16      	ldr	r2, [pc, #88]	; (8009a00 <xPortStartScheduler+0xd8>)
 80099a8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80099aa:	4b15      	ldr	r3, [pc, #84]	; (8009a00 <xPortStartScheduler+0xd8>)
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80099b2:	4a13      	ldr	r2, [pc, #76]	; (8009a00 <xPortStartScheduler+0xd8>)
 80099b4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	b2da      	uxtb	r2, r3
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80099be:	4b11      	ldr	r3, [pc, #68]	; (8009a04 <xPortStartScheduler+0xdc>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	4a10      	ldr	r2, [pc, #64]	; (8009a04 <xPortStartScheduler+0xdc>)
 80099c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80099c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80099ca:	4b0e      	ldr	r3, [pc, #56]	; (8009a04 <xPortStartScheduler+0xdc>)
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	4a0d      	ldr	r2, [pc, #52]	; (8009a04 <xPortStartScheduler+0xdc>)
 80099d0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80099d4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80099d6:	f000 f8b9 	bl	8009b4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80099da:	4b0b      	ldr	r3, [pc, #44]	; (8009a08 <xPortStartScheduler+0xe0>)
 80099dc:	2200      	movs	r2, #0
 80099de:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80099e0:	f7ff ff92 	bl	8009908 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80099e4:	f7ff f874 	bl	8008ad0 <vTaskSwitchContext>
	prvTaskExitError();
 80099e8:	f7ff ff4c 	bl	8009884 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80099ec:	2300      	movs	r3, #0
}
 80099ee:	4618      	mov	r0, r3
 80099f0:	3710      	adds	r7, #16
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}
 80099f6:	bf00      	nop
 80099f8:	e000e400 	.word	0xe000e400
 80099fc:	20001008 	.word	0x20001008
 8009a00:	2000100c 	.word	0x2000100c
 8009a04:	e000ed20 	.word	0xe000ed20
 8009a08:	2000000c 	.word	0x2000000c

08009a0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b083      	sub	sp, #12
 8009a10:	af00      	add	r7, sp, #0
	__asm volatile
 8009a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a16:	f383 8811 	msr	BASEPRI, r3
 8009a1a:	f3bf 8f6f 	isb	sy
 8009a1e:	f3bf 8f4f 	dsb	sy
 8009a22:	607b      	str	r3, [r7, #4]
}
 8009a24:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009a26:	4b0f      	ldr	r3, [pc, #60]	; (8009a64 <vPortEnterCritical+0x58>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	3301      	adds	r3, #1
 8009a2c:	4a0d      	ldr	r2, [pc, #52]	; (8009a64 <vPortEnterCritical+0x58>)
 8009a2e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009a30:	4b0c      	ldr	r3, [pc, #48]	; (8009a64 <vPortEnterCritical+0x58>)
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	2b01      	cmp	r3, #1
 8009a36:	d10f      	bne.n	8009a58 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009a38:	4b0b      	ldr	r3, [pc, #44]	; (8009a68 <vPortEnterCritical+0x5c>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	b2db      	uxtb	r3, r3
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d00a      	beq.n	8009a58 <vPortEnterCritical+0x4c>
	__asm volatile
 8009a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a46:	f383 8811 	msr	BASEPRI, r3
 8009a4a:	f3bf 8f6f 	isb	sy
 8009a4e:	f3bf 8f4f 	dsb	sy
 8009a52:	603b      	str	r3, [r7, #0]
}
 8009a54:	bf00      	nop
 8009a56:	e7fe      	b.n	8009a56 <vPortEnterCritical+0x4a>
	}
}
 8009a58:	bf00      	nop
 8009a5a:	370c      	adds	r7, #12
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bc80      	pop	{r7}
 8009a60:	4770      	bx	lr
 8009a62:	bf00      	nop
 8009a64:	2000000c 	.word	0x2000000c
 8009a68:	e000ed04 	.word	0xe000ed04

08009a6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b083      	sub	sp, #12
 8009a70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009a72:	4b11      	ldr	r3, [pc, #68]	; (8009ab8 <vPortExitCritical+0x4c>)
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d10a      	bne.n	8009a90 <vPortExitCritical+0x24>
	__asm volatile
 8009a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a7e:	f383 8811 	msr	BASEPRI, r3
 8009a82:	f3bf 8f6f 	isb	sy
 8009a86:	f3bf 8f4f 	dsb	sy
 8009a8a:	607b      	str	r3, [r7, #4]
}
 8009a8c:	bf00      	nop
 8009a8e:	e7fe      	b.n	8009a8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009a90:	4b09      	ldr	r3, [pc, #36]	; (8009ab8 <vPortExitCritical+0x4c>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	3b01      	subs	r3, #1
 8009a96:	4a08      	ldr	r2, [pc, #32]	; (8009ab8 <vPortExitCritical+0x4c>)
 8009a98:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009a9a:	4b07      	ldr	r3, [pc, #28]	; (8009ab8 <vPortExitCritical+0x4c>)
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d105      	bne.n	8009aae <vPortExitCritical+0x42>
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	f383 8811 	msr	BASEPRI, r3
}
 8009aac:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009aae:	bf00      	nop
 8009ab0:	370c      	adds	r7, #12
 8009ab2:	46bd      	mov	sp, r7
 8009ab4:	bc80      	pop	{r7}
 8009ab6:	4770      	bx	lr
 8009ab8:	2000000c 	.word	0x2000000c
 8009abc:	00000000 	.word	0x00000000

08009ac0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009ac0:	f3ef 8009 	mrs	r0, PSP
 8009ac4:	f3bf 8f6f 	isb	sy
 8009ac8:	4b0d      	ldr	r3, [pc, #52]	; (8009b00 <pxCurrentTCBConst>)
 8009aca:	681a      	ldr	r2, [r3, #0]
 8009acc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009ad0:	6010      	str	r0, [r2, #0]
 8009ad2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009ad6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009ada:	f380 8811 	msr	BASEPRI, r0
 8009ade:	f7fe fff7 	bl	8008ad0 <vTaskSwitchContext>
 8009ae2:	f04f 0000 	mov.w	r0, #0
 8009ae6:	f380 8811 	msr	BASEPRI, r0
 8009aea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009aee:	6819      	ldr	r1, [r3, #0]
 8009af0:	6808      	ldr	r0, [r1, #0]
 8009af2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009af6:	f380 8809 	msr	PSP, r0
 8009afa:	f3bf 8f6f 	isb	sy
 8009afe:	4770      	bx	lr

08009b00 <pxCurrentTCBConst>:
 8009b00:	20000de0 	.word	0x20000de0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009b04:	bf00      	nop
 8009b06:	bf00      	nop

08009b08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b082      	sub	sp, #8
 8009b0c:	af00      	add	r7, sp, #0
	__asm volatile
 8009b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b12:	f383 8811 	msr	BASEPRI, r3
 8009b16:	f3bf 8f6f 	isb	sy
 8009b1a:	f3bf 8f4f 	dsb	sy
 8009b1e:	607b      	str	r3, [r7, #4]
}
 8009b20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009b22:	f7fe ff1d 	bl	8008960 <xTaskIncrementTick>
 8009b26:	4603      	mov	r3, r0
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d003      	beq.n	8009b34 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009b2c:	4b06      	ldr	r3, [pc, #24]	; (8009b48 <SysTick_Handler+0x40>)
 8009b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b32:	601a      	str	r2, [r3, #0]
 8009b34:	2300      	movs	r3, #0
 8009b36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	f383 8811 	msr	BASEPRI, r3
}
 8009b3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009b40:	bf00      	nop
 8009b42:	3708      	adds	r7, #8
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}
 8009b48:	e000ed04 	.word	0xe000ed04

08009b4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009b50:	4b0a      	ldr	r3, [pc, #40]	; (8009b7c <vPortSetupTimerInterrupt+0x30>)
 8009b52:	2200      	movs	r2, #0
 8009b54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009b56:	4b0a      	ldr	r3, [pc, #40]	; (8009b80 <vPortSetupTimerInterrupt+0x34>)
 8009b58:	2200      	movs	r2, #0
 8009b5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009b5c:	4b09      	ldr	r3, [pc, #36]	; (8009b84 <vPortSetupTimerInterrupt+0x38>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	4a09      	ldr	r2, [pc, #36]	; (8009b88 <vPortSetupTimerInterrupt+0x3c>)
 8009b62:	fba2 2303 	umull	r2, r3, r2, r3
 8009b66:	099b      	lsrs	r3, r3, #6
 8009b68:	4a08      	ldr	r2, [pc, #32]	; (8009b8c <vPortSetupTimerInterrupt+0x40>)
 8009b6a:	3b01      	subs	r3, #1
 8009b6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009b6e:	4b03      	ldr	r3, [pc, #12]	; (8009b7c <vPortSetupTimerInterrupt+0x30>)
 8009b70:	2207      	movs	r2, #7
 8009b72:	601a      	str	r2, [r3, #0]
}
 8009b74:	bf00      	nop
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bc80      	pop	{r7}
 8009b7a:	4770      	bx	lr
 8009b7c:	e000e010 	.word	0xe000e010
 8009b80:	e000e018 	.word	0xe000e018
 8009b84:	20000000 	.word	0x20000000
 8009b88:	10624dd3 	.word	0x10624dd3
 8009b8c:	e000e014 	.word	0xe000e014

08009b90 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009b90:	b480      	push	{r7}
 8009b92:	b085      	sub	sp, #20
 8009b94:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009b96:	f3ef 8305 	mrs	r3, IPSR
 8009b9a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	2b0f      	cmp	r3, #15
 8009ba0:	d914      	bls.n	8009bcc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009ba2:	4a16      	ldr	r2, [pc, #88]	; (8009bfc <vPortValidateInterruptPriority+0x6c>)
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	4413      	add	r3, r2
 8009ba8:	781b      	ldrb	r3, [r3, #0]
 8009baa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009bac:	4b14      	ldr	r3, [pc, #80]	; (8009c00 <vPortValidateInterruptPriority+0x70>)
 8009bae:	781b      	ldrb	r3, [r3, #0]
 8009bb0:	7afa      	ldrb	r2, [r7, #11]
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	d20a      	bcs.n	8009bcc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bba:	f383 8811 	msr	BASEPRI, r3
 8009bbe:	f3bf 8f6f 	isb	sy
 8009bc2:	f3bf 8f4f 	dsb	sy
 8009bc6:	607b      	str	r3, [r7, #4]
}
 8009bc8:	bf00      	nop
 8009bca:	e7fe      	b.n	8009bca <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009bcc:	4b0d      	ldr	r3, [pc, #52]	; (8009c04 <vPortValidateInterruptPriority+0x74>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009bd4:	4b0c      	ldr	r3, [pc, #48]	; (8009c08 <vPortValidateInterruptPriority+0x78>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	429a      	cmp	r2, r3
 8009bda:	d90a      	bls.n	8009bf2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be0:	f383 8811 	msr	BASEPRI, r3
 8009be4:	f3bf 8f6f 	isb	sy
 8009be8:	f3bf 8f4f 	dsb	sy
 8009bec:	603b      	str	r3, [r7, #0]
}
 8009bee:	bf00      	nop
 8009bf0:	e7fe      	b.n	8009bf0 <vPortValidateInterruptPriority+0x60>
	}
 8009bf2:	bf00      	nop
 8009bf4:	3714      	adds	r7, #20
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bc80      	pop	{r7}
 8009bfa:	4770      	bx	lr
 8009bfc:	e000e3f0 	.word	0xe000e3f0
 8009c00:	20001008 	.word	0x20001008
 8009c04:	e000ed0c 	.word	0xe000ed0c
 8009c08:	2000100c 	.word	0x2000100c

08009c0c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b08a      	sub	sp, #40	; 0x28
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009c14:	2300      	movs	r3, #0
 8009c16:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009c18:	f7fe fdea 	bl	80087f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009c1c:	4b58      	ldr	r3, [pc, #352]	; (8009d80 <pvPortMalloc+0x174>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d101      	bne.n	8009c28 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009c24:	f000 f910 	bl	8009e48 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009c28:	4b56      	ldr	r3, [pc, #344]	; (8009d84 <pvPortMalloc+0x178>)
 8009c2a:	681a      	ldr	r2, [r3, #0]
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	4013      	ands	r3, r2
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	f040 808e 	bne.w	8009d52 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d01d      	beq.n	8009c78 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009c3c:	2208      	movs	r2, #8
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	4413      	add	r3, r2
 8009c42:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	f003 0307 	and.w	r3, r3, #7
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d014      	beq.n	8009c78 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f023 0307 	bic.w	r3, r3, #7
 8009c54:	3308      	adds	r3, #8
 8009c56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f003 0307 	and.w	r3, r3, #7
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d00a      	beq.n	8009c78 <pvPortMalloc+0x6c>
	__asm volatile
 8009c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c66:	f383 8811 	msr	BASEPRI, r3
 8009c6a:	f3bf 8f6f 	isb	sy
 8009c6e:	f3bf 8f4f 	dsb	sy
 8009c72:	617b      	str	r3, [r7, #20]
}
 8009c74:	bf00      	nop
 8009c76:	e7fe      	b.n	8009c76 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d069      	beq.n	8009d52 <pvPortMalloc+0x146>
 8009c7e:	4b42      	ldr	r3, [pc, #264]	; (8009d88 <pvPortMalloc+0x17c>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	687a      	ldr	r2, [r7, #4]
 8009c84:	429a      	cmp	r2, r3
 8009c86:	d864      	bhi.n	8009d52 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009c88:	4b40      	ldr	r3, [pc, #256]	; (8009d8c <pvPortMalloc+0x180>)
 8009c8a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009c8c:	4b3f      	ldr	r3, [pc, #252]	; (8009d8c <pvPortMalloc+0x180>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009c92:	e004      	b.n	8009c9e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c96:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca0:	685b      	ldr	r3, [r3, #4]
 8009ca2:	687a      	ldr	r2, [r7, #4]
 8009ca4:	429a      	cmp	r2, r3
 8009ca6:	d903      	bls.n	8009cb0 <pvPortMalloc+0xa4>
 8009ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d1f1      	bne.n	8009c94 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009cb0:	4b33      	ldr	r3, [pc, #204]	; (8009d80 <pvPortMalloc+0x174>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cb6:	429a      	cmp	r2, r3
 8009cb8:	d04b      	beq.n	8009d52 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009cba:	6a3b      	ldr	r3, [r7, #32]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	2208      	movs	r2, #8
 8009cc0:	4413      	add	r3, r2
 8009cc2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc6:	681a      	ldr	r2, [r3, #0]
 8009cc8:	6a3b      	ldr	r3, [r7, #32]
 8009cca:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cce:	685a      	ldr	r2, [r3, #4]
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	1ad2      	subs	r2, r2, r3
 8009cd4:	2308      	movs	r3, #8
 8009cd6:	005b      	lsls	r3, r3, #1
 8009cd8:	429a      	cmp	r2, r3
 8009cda:	d91f      	bls.n	8009d1c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	4413      	add	r3, r2
 8009ce2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ce4:	69bb      	ldr	r3, [r7, #24]
 8009ce6:	f003 0307 	and.w	r3, r3, #7
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d00a      	beq.n	8009d04 <pvPortMalloc+0xf8>
	__asm volatile
 8009cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf2:	f383 8811 	msr	BASEPRI, r3
 8009cf6:	f3bf 8f6f 	isb	sy
 8009cfa:	f3bf 8f4f 	dsb	sy
 8009cfe:	613b      	str	r3, [r7, #16]
}
 8009d00:	bf00      	nop
 8009d02:	e7fe      	b.n	8009d02 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d06:	685a      	ldr	r2, [r3, #4]
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	1ad2      	subs	r2, r2, r3
 8009d0c:	69bb      	ldr	r3, [r7, #24]
 8009d0e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d12:	687a      	ldr	r2, [r7, #4]
 8009d14:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009d16:	69b8      	ldr	r0, [r7, #24]
 8009d18:	f000 f8f8 	bl	8009f0c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009d1c:	4b1a      	ldr	r3, [pc, #104]	; (8009d88 <pvPortMalloc+0x17c>)
 8009d1e:	681a      	ldr	r2, [r3, #0]
 8009d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d22:	685b      	ldr	r3, [r3, #4]
 8009d24:	1ad3      	subs	r3, r2, r3
 8009d26:	4a18      	ldr	r2, [pc, #96]	; (8009d88 <pvPortMalloc+0x17c>)
 8009d28:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009d2a:	4b17      	ldr	r3, [pc, #92]	; (8009d88 <pvPortMalloc+0x17c>)
 8009d2c:	681a      	ldr	r2, [r3, #0]
 8009d2e:	4b18      	ldr	r3, [pc, #96]	; (8009d90 <pvPortMalloc+0x184>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	429a      	cmp	r2, r3
 8009d34:	d203      	bcs.n	8009d3e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009d36:	4b14      	ldr	r3, [pc, #80]	; (8009d88 <pvPortMalloc+0x17c>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	4a15      	ldr	r2, [pc, #84]	; (8009d90 <pvPortMalloc+0x184>)
 8009d3c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d40:	685a      	ldr	r2, [r3, #4]
 8009d42:	4b10      	ldr	r3, [pc, #64]	; (8009d84 <pvPortMalloc+0x178>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	431a      	orrs	r2, r3
 8009d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d4a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d4e:	2200      	movs	r2, #0
 8009d50:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009d52:	f7fe fd5b 	bl	800880c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d56:	69fb      	ldr	r3, [r7, #28]
 8009d58:	f003 0307 	and.w	r3, r3, #7
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d00a      	beq.n	8009d76 <pvPortMalloc+0x16a>
	__asm volatile
 8009d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d64:	f383 8811 	msr	BASEPRI, r3
 8009d68:	f3bf 8f6f 	isb	sy
 8009d6c:	f3bf 8f4f 	dsb	sy
 8009d70:	60fb      	str	r3, [r7, #12]
}
 8009d72:	bf00      	nop
 8009d74:	e7fe      	b.n	8009d74 <pvPortMalloc+0x168>
	return pvReturn;
 8009d76:	69fb      	ldr	r3, [r7, #28]
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	3728      	adds	r7, #40	; 0x28
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}
 8009d80:	20001c18 	.word	0x20001c18
 8009d84:	20001c24 	.word	0x20001c24
 8009d88:	20001c1c 	.word	0x20001c1c
 8009d8c:	20001c10 	.word	0x20001c10
 8009d90:	20001c20 	.word	0x20001c20

08009d94 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b086      	sub	sp, #24
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d048      	beq.n	8009e38 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009da6:	2308      	movs	r3, #8
 8009da8:	425b      	negs	r3, r3
 8009daa:	697a      	ldr	r2, [r7, #20]
 8009dac:	4413      	add	r3, r2
 8009dae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009db4:	693b      	ldr	r3, [r7, #16]
 8009db6:	685a      	ldr	r2, [r3, #4]
 8009db8:	4b21      	ldr	r3, [pc, #132]	; (8009e40 <vPortFree+0xac>)
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	4013      	ands	r3, r2
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d10a      	bne.n	8009dd8 <vPortFree+0x44>
	__asm volatile
 8009dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc6:	f383 8811 	msr	BASEPRI, r3
 8009dca:	f3bf 8f6f 	isb	sy
 8009dce:	f3bf 8f4f 	dsb	sy
 8009dd2:	60fb      	str	r3, [r7, #12]
}
 8009dd4:	bf00      	nop
 8009dd6:	e7fe      	b.n	8009dd6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009dd8:	693b      	ldr	r3, [r7, #16]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d00a      	beq.n	8009df6 <vPortFree+0x62>
	__asm volatile
 8009de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de4:	f383 8811 	msr	BASEPRI, r3
 8009de8:	f3bf 8f6f 	isb	sy
 8009dec:	f3bf 8f4f 	dsb	sy
 8009df0:	60bb      	str	r3, [r7, #8]
}
 8009df2:	bf00      	nop
 8009df4:	e7fe      	b.n	8009df4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009df6:	693b      	ldr	r3, [r7, #16]
 8009df8:	685a      	ldr	r2, [r3, #4]
 8009dfa:	4b11      	ldr	r3, [pc, #68]	; (8009e40 <vPortFree+0xac>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	4013      	ands	r3, r2
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d019      	beq.n	8009e38 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d115      	bne.n	8009e38 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009e0c:	693b      	ldr	r3, [r7, #16]
 8009e0e:	685a      	ldr	r2, [r3, #4]
 8009e10:	4b0b      	ldr	r3, [pc, #44]	; (8009e40 <vPortFree+0xac>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	43db      	mvns	r3, r3
 8009e16:	401a      	ands	r2, r3
 8009e18:	693b      	ldr	r3, [r7, #16]
 8009e1a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009e1c:	f7fe fce8 	bl	80087f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009e20:	693b      	ldr	r3, [r7, #16]
 8009e22:	685a      	ldr	r2, [r3, #4]
 8009e24:	4b07      	ldr	r3, [pc, #28]	; (8009e44 <vPortFree+0xb0>)
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	4413      	add	r3, r2
 8009e2a:	4a06      	ldr	r2, [pc, #24]	; (8009e44 <vPortFree+0xb0>)
 8009e2c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009e2e:	6938      	ldr	r0, [r7, #16]
 8009e30:	f000 f86c 	bl	8009f0c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009e34:	f7fe fcea 	bl	800880c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009e38:	bf00      	nop
 8009e3a:	3718      	adds	r7, #24
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}
 8009e40:	20001c24 	.word	0x20001c24
 8009e44:	20001c1c 	.word	0x20001c1c

08009e48 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009e48:	b480      	push	{r7}
 8009e4a:	b085      	sub	sp, #20
 8009e4c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009e4e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009e52:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009e54:	4b27      	ldr	r3, [pc, #156]	; (8009ef4 <prvHeapInit+0xac>)
 8009e56:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	f003 0307 	and.w	r3, r3, #7
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d00c      	beq.n	8009e7c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	3307      	adds	r3, #7
 8009e66:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	f023 0307 	bic.w	r3, r3, #7
 8009e6e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009e70:	68ba      	ldr	r2, [r7, #8]
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	1ad3      	subs	r3, r2, r3
 8009e76:	4a1f      	ldr	r2, [pc, #124]	; (8009ef4 <prvHeapInit+0xac>)
 8009e78:	4413      	add	r3, r2
 8009e7a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009e80:	4a1d      	ldr	r2, [pc, #116]	; (8009ef8 <prvHeapInit+0xb0>)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009e86:	4b1c      	ldr	r3, [pc, #112]	; (8009ef8 <prvHeapInit+0xb0>)
 8009e88:	2200      	movs	r2, #0
 8009e8a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	68ba      	ldr	r2, [r7, #8]
 8009e90:	4413      	add	r3, r2
 8009e92:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009e94:	2208      	movs	r2, #8
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	1a9b      	subs	r3, r3, r2
 8009e9a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	f023 0307 	bic.w	r3, r3, #7
 8009ea2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	4a15      	ldr	r2, [pc, #84]	; (8009efc <prvHeapInit+0xb4>)
 8009ea8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009eaa:	4b14      	ldr	r3, [pc, #80]	; (8009efc <prvHeapInit+0xb4>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	2200      	movs	r2, #0
 8009eb0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009eb2:	4b12      	ldr	r3, [pc, #72]	; (8009efc <prvHeapInit+0xb4>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	68fa      	ldr	r2, [r7, #12]
 8009ec2:	1ad2      	subs	r2, r2, r3
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009ec8:	4b0c      	ldr	r3, [pc, #48]	; (8009efc <prvHeapInit+0xb4>)
 8009eca:	681a      	ldr	r2, [r3, #0]
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	685b      	ldr	r3, [r3, #4]
 8009ed4:	4a0a      	ldr	r2, [pc, #40]	; (8009f00 <prvHeapInit+0xb8>)
 8009ed6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	685b      	ldr	r3, [r3, #4]
 8009edc:	4a09      	ldr	r2, [pc, #36]	; (8009f04 <prvHeapInit+0xbc>)
 8009ede:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009ee0:	4b09      	ldr	r3, [pc, #36]	; (8009f08 <prvHeapInit+0xc0>)
 8009ee2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009ee6:	601a      	str	r2, [r3, #0]
}
 8009ee8:	bf00      	nop
 8009eea:	3714      	adds	r7, #20
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bc80      	pop	{r7}
 8009ef0:	4770      	bx	lr
 8009ef2:	bf00      	nop
 8009ef4:	20001010 	.word	0x20001010
 8009ef8:	20001c10 	.word	0x20001c10
 8009efc:	20001c18 	.word	0x20001c18
 8009f00:	20001c20 	.word	0x20001c20
 8009f04:	20001c1c 	.word	0x20001c1c
 8009f08:	20001c24 	.word	0x20001c24

08009f0c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b085      	sub	sp, #20
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009f14:	4b27      	ldr	r3, [pc, #156]	; (8009fb4 <prvInsertBlockIntoFreeList+0xa8>)
 8009f16:	60fb      	str	r3, [r7, #12]
 8009f18:	e002      	b.n	8009f20 <prvInsertBlockIntoFreeList+0x14>
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	60fb      	str	r3, [r7, #12]
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	687a      	ldr	r2, [r7, #4]
 8009f26:	429a      	cmp	r2, r3
 8009f28:	d8f7      	bhi.n	8009f1a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	685b      	ldr	r3, [r3, #4]
 8009f32:	68ba      	ldr	r2, [r7, #8]
 8009f34:	4413      	add	r3, r2
 8009f36:	687a      	ldr	r2, [r7, #4]
 8009f38:	429a      	cmp	r2, r3
 8009f3a:	d108      	bne.n	8009f4e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	685a      	ldr	r2, [r3, #4]
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	685b      	ldr	r3, [r3, #4]
 8009f44:	441a      	add	r2, r3
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	685b      	ldr	r3, [r3, #4]
 8009f56:	68ba      	ldr	r2, [r7, #8]
 8009f58:	441a      	add	r2, r3
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	429a      	cmp	r2, r3
 8009f60:	d118      	bne.n	8009f94 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	681a      	ldr	r2, [r3, #0]
 8009f66:	4b14      	ldr	r3, [pc, #80]	; (8009fb8 <prvInsertBlockIntoFreeList+0xac>)
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	429a      	cmp	r2, r3
 8009f6c:	d00d      	beq.n	8009f8a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	685a      	ldr	r2, [r3, #4]
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	685b      	ldr	r3, [r3, #4]
 8009f78:	441a      	add	r2, r3
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	681a      	ldr	r2, [r3, #0]
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	601a      	str	r2, [r3, #0]
 8009f88:	e008      	b.n	8009f9c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009f8a:	4b0b      	ldr	r3, [pc, #44]	; (8009fb8 <prvInsertBlockIntoFreeList+0xac>)
 8009f8c:	681a      	ldr	r2, [r3, #0]
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	601a      	str	r2, [r3, #0]
 8009f92:	e003      	b.n	8009f9c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	681a      	ldr	r2, [r3, #0]
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009f9c:	68fa      	ldr	r2, [r7, #12]
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	429a      	cmp	r2, r3
 8009fa2:	d002      	beq.n	8009faa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	687a      	ldr	r2, [r7, #4]
 8009fa8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009faa:	bf00      	nop
 8009fac:	3714      	adds	r7, #20
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bc80      	pop	{r7}
 8009fb2:	4770      	bx	lr
 8009fb4:	20001c10 	.word	0x20001c10
 8009fb8:	20001c18 	.word	0x20001c18

08009fbc <__errno>:
 8009fbc:	4b01      	ldr	r3, [pc, #4]	; (8009fc4 <__errno+0x8>)
 8009fbe:	6818      	ldr	r0, [r3, #0]
 8009fc0:	4770      	bx	lr
 8009fc2:	bf00      	nop
 8009fc4:	20000010 	.word	0x20000010

08009fc8 <std>:
 8009fc8:	2300      	movs	r3, #0
 8009fca:	b510      	push	{r4, lr}
 8009fcc:	4604      	mov	r4, r0
 8009fce:	e9c0 3300 	strd	r3, r3, [r0]
 8009fd2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009fd6:	6083      	str	r3, [r0, #8]
 8009fd8:	8181      	strh	r1, [r0, #12]
 8009fda:	6643      	str	r3, [r0, #100]	; 0x64
 8009fdc:	81c2      	strh	r2, [r0, #14]
 8009fde:	6183      	str	r3, [r0, #24]
 8009fe0:	4619      	mov	r1, r3
 8009fe2:	2208      	movs	r2, #8
 8009fe4:	305c      	adds	r0, #92	; 0x5c
 8009fe6:	f000 f91a 	bl	800a21e <memset>
 8009fea:	4b05      	ldr	r3, [pc, #20]	; (800a000 <std+0x38>)
 8009fec:	6263      	str	r3, [r4, #36]	; 0x24
 8009fee:	4b05      	ldr	r3, [pc, #20]	; (800a004 <std+0x3c>)
 8009ff0:	62a3      	str	r3, [r4, #40]	; 0x28
 8009ff2:	4b05      	ldr	r3, [pc, #20]	; (800a008 <std+0x40>)
 8009ff4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009ff6:	4b05      	ldr	r3, [pc, #20]	; (800a00c <std+0x44>)
 8009ff8:	6224      	str	r4, [r4, #32]
 8009ffa:	6323      	str	r3, [r4, #48]	; 0x30
 8009ffc:	bd10      	pop	{r4, pc}
 8009ffe:	bf00      	nop
 800a000:	0800adad 	.word	0x0800adad
 800a004:	0800adcf 	.word	0x0800adcf
 800a008:	0800ae07 	.word	0x0800ae07
 800a00c:	0800ae2b 	.word	0x0800ae2b

0800a010 <_cleanup_r>:
 800a010:	4901      	ldr	r1, [pc, #4]	; (800a018 <_cleanup_r+0x8>)
 800a012:	f000 b8af 	b.w	800a174 <_fwalk_reent>
 800a016:	bf00      	nop
 800a018:	0800bd89 	.word	0x0800bd89

0800a01c <__sfmoreglue>:
 800a01c:	b570      	push	{r4, r5, r6, lr}
 800a01e:	2268      	movs	r2, #104	; 0x68
 800a020:	1e4d      	subs	r5, r1, #1
 800a022:	4355      	muls	r5, r2
 800a024:	460e      	mov	r6, r1
 800a026:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a02a:	f000 f921 	bl	800a270 <_malloc_r>
 800a02e:	4604      	mov	r4, r0
 800a030:	b140      	cbz	r0, 800a044 <__sfmoreglue+0x28>
 800a032:	2100      	movs	r1, #0
 800a034:	e9c0 1600 	strd	r1, r6, [r0]
 800a038:	300c      	adds	r0, #12
 800a03a:	60a0      	str	r0, [r4, #8]
 800a03c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a040:	f000 f8ed 	bl	800a21e <memset>
 800a044:	4620      	mov	r0, r4
 800a046:	bd70      	pop	{r4, r5, r6, pc}

0800a048 <__sfp_lock_acquire>:
 800a048:	4801      	ldr	r0, [pc, #4]	; (800a050 <__sfp_lock_acquire+0x8>)
 800a04a:	f000 b8d8 	b.w	800a1fe <__retarget_lock_acquire_recursive>
 800a04e:	bf00      	nop
 800a050:	20001c29 	.word	0x20001c29

0800a054 <__sfp_lock_release>:
 800a054:	4801      	ldr	r0, [pc, #4]	; (800a05c <__sfp_lock_release+0x8>)
 800a056:	f000 b8d3 	b.w	800a200 <__retarget_lock_release_recursive>
 800a05a:	bf00      	nop
 800a05c:	20001c29 	.word	0x20001c29

0800a060 <__sinit_lock_acquire>:
 800a060:	4801      	ldr	r0, [pc, #4]	; (800a068 <__sinit_lock_acquire+0x8>)
 800a062:	f000 b8cc 	b.w	800a1fe <__retarget_lock_acquire_recursive>
 800a066:	bf00      	nop
 800a068:	20001c2a 	.word	0x20001c2a

0800a06c <__sinit_lock_release>:
 800a06c:	4801      	ldr	r0, [pc, #4]	; (800a074 <__sinit_lock_release+0x8>)
 800a06e:	f000 b8c7 	b.w	800a200 <__retarget_lock_release_recursive>
 800a072:	bf00      	nop
 800a074:	20001c2a 	.word	0x20001c2a

0800a078 <__sinit>:
 800a078:	b510      	push	{r4, lr}
 800a07a:	4604      	mov	r4, r0
 800a07c:	f7ff fff0 	bl	800a060 <__sinit_lock_acquire>
 800a080:	69a3      	ldr	r3, [r4, #24]
 800a082:	b11b      	cbz	r3, 800a08c <__sinit+0x14>
 800a084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a088:	f7ff bff0 	b.w	800a06c <__sinit_lock_release>
 800a08c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a090:	6523      	str	r3, [r4, #80]	; 0x50
 800a092:	4b13      	ldr	r3, [pc, #76]	; (800a0e0 <__sinit+0x68>)
 800a094:	4a13      	ldr	r2, [pc, #76]	; (800a0e4 <__sinit+0x6c>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	62a2      	str	r2, [r4, #40]	; 0x28
 800a09a:	42a3      	cmp	r3, r4
 800a09c:	bf04      	itt	eq
 800a09e:	2301      	moveq	r3, #1
 800a0a0:	61a3      	streq	r3, [r4, #24]
 800a0a2:	4620      	mov	r0, r4
 800a0a4:	f000 f820 	bl	800a0e8 <__sfp>
 800a0a8:	6060      	str	r0, [r4, #4]
 800a0aa:	4620      	mov	r0, r4
 800a0ac:	f000 f81c 	bl	800a0e8 <__sfp>
 800a0b0:	60a0      	str	r0, [r4, #8]
 800a0b2:	4620      	mov	r0, r4
 800a0b4:	f000 f818 	bl	800a0e8 <__sfp>
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	60e0      	str	r0, [r4, #12]
 800a0bc:	2104      	movs	r1, #4
 800a0be:	6860      	ldr	r0, [r4, #4]
 800a0c0:	f7ff ff82 	bl	8009fc8 <std>
 800a0c4:	68a0      	ldr	r0, [r4, #8]
 800a0c6:	2201      	movs	r2, #1
 800a0c8:	2109      	movs	r1, #9
 800a0ca:	f7ff ff7d 	bl	8009fc8 <std>
 800a0ce:	68e0      	ldr	r0, [r4, #12]
 800a0d0:	2202      	movs	r2, #2
 800a0d2:	2112      	movs	r1, #18
 800a0d4:	f7ff ff78 	bl	8009fc8 <std>
 800a0d8:	2301      	movs	r3, #1
 800a0da:	61a3      	str	r3, [r4, #24]
 800a0dc:	e7d2      	b.n	800a084 <__sinit+0xc>
 800a0de:	bf00      	nop
 800a0e0:	0800d888 	.word	0x0800d888
 800a0e4:	0800a011 	.word	0x0800a011

0800a0e8 <__sfp>:
 800a0e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0ea:	4607      	mov	r7, r0
 800a0ec:	f7ff ffac 	bl	800a048 <__sfp_lock_acquire>
 800a0f0:	4b1e      	ldr	r3, [pc, #120]	; (800a16c <__sfp+0x84>)
 800a0f2:	681e      	ldr	r6, [r3, #0]
 800a0f4:	69b3      	ldr	r3, [r6, #24]
 800a0f6:	b913      	cbnz	r3, 800a0fe <__sfp+0x16>
 800a0f8:	4630      	mov	r0, r6
 800a0fa:	f7ff ffbd 	bl	800a078 <__sinit>
 800a0fe:	3648      	adds	r6, #72	; 0x48
 800a100:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a104:	3b01      	subs	r3, #1
 800a106:	d503      	bpl.n	800a110 <__sfp+0x28>
 800a108:	6833      	ldr	r3, [r6, #0]
 800a10a:	b30b      	cbz	r3, 800a150 <__sfp+0x68>
 800a10c:	6836      	ldr	r6, [r6, #0]
 800a10e:	e7f7      	b.n	800a100 <__sfp+0x18>
 800a110:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a114:	b9d5      	cbnz	r5, 800a14c <__sfp+0x64>
 800a116:	4b16      	ldr	r3, [pc, #88]	; (800a170 <__sfp+0x88>)
 800a118:	60e3      	str	r3, [r4, #12]
 800a11a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a11e:	6665      	str	r5, [r4, #100]	; 0x64
 800a120:	f000 f86c 	bl	800a1fc <__retarget_lock_init_recursive>
 800a124:	f7ff ff96 	bl	800a054 <__sfp_lock_release>
 800a128:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a12c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a130:	6025      	str	r5, [r4, #0]
 800a132:	61a5      	str	r5, [r4, #24]
 800a134:	2208      	movs	r2, #8
 800a136:	4629      	mov	r1, r5
 800a138:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a13c:	f000 f86f 	bl	800a21e <memset>
 800a140:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a144:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a148:	4620      	mov	r0, r4
 800a14a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a14c:	3468      	adds	r4, #104	; 0x68
 800a14e:	e7d9      	b.n	800a104 <__sfp+0x1c>
 800a150:	2104      	movs	r1, #4
 800a152:	4638      	mov	r0, r7
 800a154:	f7ff ff62 	bl	800a01c <__sfmoreglue>
 800a158:	4604      	mov	r4, r0
 800a15a:	6030      	str	r0, [r6, #0]
 800a15c:	2800      	cmp	r0, #0
 800a15e:	d1d5      	bne.n	800a10c <__sfp+0x24>
 800a160:	f7ff ff78 	bl	800a054 <__sfp_lock_release>
 800a164:	230c      	movs	r3, #12
 800a166:	603b      	str	r3, [r7, #0]
 800a168:	e7ee      	b.n	800a148 <__sfp+0x60>
 800a16a:	bf00      	nop
 800a16c:	0800d888 	.word	0x0800d888
 800a170:	ffff0001 	.word	0xffff0001

0800a174 <_fwalk_reent>:
 800a174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a178:	4606      	mov	r6, r0
 800a17a:	4688      	mov	r8, r1
 800a17c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a180:	2700      	movs	r7, #0
 800a182:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a186:	f1b9 0901 	subs.w	r9, r9, #1
 800a18a:	d505      	bpl.n	800a198 <_fwalk_reent+0x24>
 800a18c:	6824      	ldr	r4, [r4, #0]
 800a18e:	2c00      	cmp	r4, #0
 800a190:	d1f7      	bne.n	800a182 <_fwalk_reent+0xe>
 800a192:	4638      	mov	r0, r7
 800a194:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a198:	89ab      	ldrh	r3, [r5, #12]
 800a19a:	2b01      	cmp	r3, #1
 800a19c:	d907      	bls.n	800a1ae <_fwalk_reent+0x3a>
 800a19e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a1a2:	3301      	adds	r3, #1
 800a1a4:	d003      	beq.n	800a1ae <_fwalk_reent+0x3a>
 800a1a6:	4629      	mov	r1, r5
 800a1a8:	4630      	mov	r0, r6
 800a1aa:	47c0      	blx	r8
 800a1ac:	4307      	orrs	r7, r0
 800a1ae:	3568      	adds	r5, #104	; 0x68
 800a1b0:	e7e9      	b.n	800a186 <_fwalk_reent+0x12>
	...

0800a1b4 <__libc_init_array>:
 800a1b4:	b570      	push	{r4, r5, r6, lr}
 800a1b6:	4d0d      	ldr	r5, [pc, #52]	; (800a1ec <__libc_init_array+0x38>)
 800a1b8:	4c0d      	ldr	r4, [pc, #52]	; (800a1f0 <__libc_init_array+0x3c>)
 800a1ba:	1b64      	subs	r4, r4, r5
 800a1bc:	10a4      	asrs	r4, r4, #2
 800a1be:	2600      	movs	r6, #0
 800a1c0:	42a6      	cmp	r6, r4
 800a1c2:	d109      	bne.n	800a1d8 <__libc_init_array+0x24>
 800a1c4:	4d0b      	ldr	r5, [pc, #44]	; (800a1f4 <__libc_init_array+0x40>)
 800a1c6:	4c0c      	ldr	r4, [pc, #48]	; (800a1f8 <__libc_init_array+0x44>)
 800a1c8:	f002 fefc 	bl	800cfc4 <_init>
 800a1cc:	1b64      	subs	r4, r4, r5
 800a1ce:	10a4      	asrs	r4, r4, #2
 800a1d0:	2600      	movs	r6, #0
 800a1d2:	42a6      	cmp	r6, r4
 800a1d4:	d105      	bne.n	800a1e2 <__libc_init_array+0x2e>
 800a1d6:	bd70      	pop	{r4, r5, r6, pc}
 800a1d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1dc:	4798      	blx	r3
 800a1de:	3601      	adds	r6, #1
 800a1e0:	e7ee      	b.n	800a1c0 <__libc_init_array+0xc>
 800a1e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a1e6:	4798      	blx	r3
 800a1e8:	3601      	adds	r6, #1
 800a1ea:	e7f2      	b.n	800a1d2 <__libc_init_array+0x1e>
 800a1ec:	0800dc68 	.word	0x0800dc68
 800a1f0:	0800dc68 	.word	0x0800dc68
 800a1f4:	0800dc68 	.word	0x0800dc68
 800a1f8:	0800dc6c 	.word	0x0800dc6c

0800a1fc <__retarget_lock_init_recursive>:
 800a1fc:	4770      	bx	lr

0800a1fe <__retarget_lock_acquire_recursive>:
 800a1fe:	4770      	bx	lr

0800a200 <__retarget_lock_release_recursive>:
 800a200:	4770      	bx	lr

0800a202 <memcpy>:
 800a202:	440a      	add	r2, r1
 800a204:	4291      	cmp	r1, r2
 800a206:	f100 33ff 	add.w	r3, r0, #4294967295
 800a20a:	d100      	bne.n	800a20e <memcpy+0xc>
 800a20c:	4770      	bx	lr
 800a20e:	b510      	push	{r4, lr}
 800a210:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a214:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a218:	4291      	cmp	r1, r2
 800a21a:	d1f9      	bne.n	800a210 <memcpy+0xe>
 800a21c:	bd10      	pop	{r4, pc}

0800a21e <memset>:
 800a21e:	4402      	add	r2, r0
 800a220:	4603      	mov	r3, r0
 800a222:	4293      	cmp	r3, r2
 800a224:	d100      	bne.n	800a228 <memset+0xa>
 800a226:	4770      	bx	lr
 800a228:	f803 1b01 	strb.w	r1, [r3], #1
 800a22c:	e7f9      	b.n	800a222 <memset+0x4>
	...

0800a230 <sbrk_aligned>:
 800a230:	b570      	push	{r4, r5, r6, lr}
 800a232:	4e0e      	ldr	r6, [pc, #56]	; (800a26c <sbrk_aligned+0x3c>)
 800a234:	460c      	mov	r4, r1
 800a236:	6831      	ldr	r1, [r6, #0]
 800a238:	4605      	mov	r5, r0
 800a23a:	b911      	cbnz	r1, 800a242 <sbrk_aligned+0x12>
 800a23c:	f000 fd52 	bl	800ace4 <_sbrk_r>
 800a240:	6030      	str	r0, [r6, #0]
 800a242:	4621      	mov	r1, r4
 800a244:	4628      	mov	r0, r5
 800a246:	f000 fd4d 	bl	800ace4 <_sbrk_r>
 800a24a:	1c43      	adds	r3, r0, #1
 800a24c:	d00a      	beq.n	800a264 <sbrk_aligned+0x34>
 800a24e:	1cc4      	adds	r4, r0, #3
 800a250:	f024 0403 	bic.w	r4, r4, #3
 800a254:	42a0      	cmp	r0, r4
 800a256:	d007      	beq.n	800a268 <sbrk_aligned+0x38>
 800a258:	1a21      	subs	r1, r4, r0
 800a25a:	4628      	mov	r0, r5
 800a25c:	f000 fd42 	bl	800ace4 <_sbrk_r>
 800a260:	3001      	adds	r0, #1
 800a262:	d101      	bne.n	800a268 <sbrk_aligned+0x38>
 800a264:	f04f 34ff 	mov.w	r4, #4294967295
 800a268:	4620      	mov	r0, r4
 800a26a:	bd70      	pop	{r4, r5, r6, pc}
 800a26c:	20001c30 	.word	0x20001c30

0800a270 <_malloc_r>:
 800a270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a274:	1ccd      	adds	r5, r1, #3
 800a276:	f025 0503 	bic.w	r5, r5, #3
 800a27a:	3508      	adds	r5, #8
 800a27c:	2d0c      	cmp	r5, #12
 800a27e:	bf38      	it	cc
 800a280:	250c      	movcc	r5, #12
 800a282:	2d00      	cmp	r5, #0
 800a284:	4607      	mov	r7, r0
 800a286:	db01      	blt.n	800a28c <_malloc_r+0x1c>
 800a288:	42a9      	cmp	r1, r5
 800a28a:	d905      	bls.n	800a298 <_malloc_r+0x28>
 800a28c:	230c      	movs	r3, #12
 800a28e:	603b      	str	r3, [r7, #0]
 800a290:	2600      	movs	r6, #0
 800a292:	4630      	mov	r0, r6
 800a294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a298:	4e2e      	ldr	r6, [pc, #184]	; (800a354 <_malloc_r+0xe4>)
 800a29a:	f001 fde1 	bl	800be60 <__malloc_lock>
 800a29e:	6833      	ldr	r3, [r6, #0]
 800a2a0:	461c      	mov	r4, r3
 800a2a2:	bb34      	cbnz	r4, 800a2f2 <_malloc_r+0x82>
 800a2a4:	4629      	mov	r1, r5
 800a2a6:	4638      	mov	r0, r7
 800a2a8:	f7ff ffc2 	bl	800a230 <sbrk_aligned>
 800a2ac:	1c43      	adds	r3, r0, #1
 800a2ae:	4604      	mov	r4, r0
 800a2b0:	d14d      	bne.n	800a34e <_malloc_r+0xde>
 800a2b2:	6834      	ldr	r4, [r6, #0]
 800a2b4:	4626      	mov	r6, r4
 800a2b6:	2e00      	cmp	r6, #0
 800a2b8:	d140      	bne.n	800a33c <_malloc_r+0xcc>
 800a2ba:	6823      	ldr	r3, [r4, #0]
 800a2bc:	4631      	mov	r1, r6
 800a2be:	4638      	mov	r0, r7
 800a2c0:	eb04 0803 	add.w	r8, r4, r3
 800a2c4:	f000 fd0e 	bl	800ace4 <_sbrk_r>
 800a2c8:	4580      	cmp	r8, r0
 800a2ca:	d13a      	bne.n	800a342 <_malloc_r+0xd2>
 800a2cc:	6821      	ldr	r1, [r4, #0]
 800a2ce:	3503      	adds	r5, #3
 800a2d0:	1a6d      	subs	r5, r5, r1
 800a2d2:	f025 0503 	bic.w	r5, r5, #3
 800a2d6:	3508      	adds	r5, #8
 800a2d8:	2d0c      	cmp	r5, #12
 800a2da:	bf38      	it	cc
 800a2dc:	250c      	movcc	r5, #12
 800a2de:	4629      	mov	r1, r5
 800a2e0:	4638      	mov	r0, r7
 800a2e2:	f7ff ffa5 	bl	800a230 <sbrk_aligned>
 800a2e6:	3001      	adds	r0, #1
 800a2e8:	d02b      	beq.n	800a342 <_malloc_r+0xd2>
 800a2ea:	6823      	ldr	r3, [r4, #0]
 800a2ec:	442b      	add	r3, r5
 800a2ee:	6023      	str	r3, [r4, #0]
 800a2f0:	e00e      	b.n	800a310 <_malloc_r+0xa0>
 800a2f2:	6822      	ldr	r2, [r4, #0]
 800a2f4:	1b52      	subs	r2, r2, r5
 800a2f6:	d41e      	bmi.n	800a336 <_malloc_r+0xc6>
 800a2f8:	2a0b      	cmp	r2, #11
 800a2fa:	d916      	bls.n	800a32a <_malloc_r+0xba>
 800a2fc:	1961      	adds	r1, r4, r5
 800a2fe:	42a3      	cmp	r3, r4
 800a300:	6025      	str	r5, [r4, #0]
 800a302:	bf18      	it	ne
 800a304:	6059      	strne	r1, [r3, #4]
 800a306:	6863      	ldr	r3, [r4, #4]
 800a308:	bf08      	it	eq
 800a30a:	6031      	streq	r1, [r6, #0]
 800a30c:	5162      	str	r2, [r4, r5]
 800a30e:	604b      	str	r3, [r1, #4]
 800a310:	4638      	mov	r0, r7
 800a312:	f104 060b 	add.w	r6, r4, #11
 800a316:	f001 fda9 	bl	800be6c <__malloc_unlock>
 800a31a:	f026 0607 	bic.w	r6, r6, #7
 800a31e:	1d23      	adds	r3, r4, #4
 800a320:	1af2      	subs	r2, r6, r3
 800a322:	d0b6      	beq.n	800a292 <_malloc_r+0x22>
 800a324:	1b9b      	subs	r3, r3, r6
 800a326:	50a3      	str	r3, [r4, r2]
 800a328:	e7b3      	b.n	800a292 <_malloc_r+0x22>
 800a32a:	6862      	ldr	r2, [r4, #4]
 800a32c:	42a3      	cmp	r3, r4
 800a32e:	bf0c      	ite	eq
 800a330:	6032      	streq	r2, [r6, #0]
 800a332:	605a      	strne	r2, [r3, #4]
 800a334:	e7ec      	b.n	800a310 <_malloc_r+0xa0>
 800a336:	4623      	mov	r3, r4
 800a338:	6864      	ldr	r4, [r4, #4]
 800a33a:	e7b2      	b.n	800a2a2 <_malloc_r+0x32>
 800a33c:	4634      	mov	r4, r6
 800a33e:	6876      	ldr	r6, [r6, #4]
 800a340:	e7b9      	b.n	800a2b6 <_malloc_r+0x46>
 800a342:	230c      	movs	r3, #12
 800a344:	603b      	str	r3, [r7, #0]
 800a346:	4638      	mov	r0, r7
 800a348:	f001 fd90 	bl	800be6c <__malloc_unlock>
 800a34c:	e7a1      	b.n	800a292 <_malloc_r+0x22>
 800a34e:	6025      	str	r5, [r4, #0]
 800a350:	e7de      	b.n	800a310 <_malloc_r+0xa0>
 800a352:	bf00      	nop
 800a354:	20001c2c 	.word	0x20001c2c

0800a358 <__cvt>:
 800a358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a35c:	b088      	sub	sp, #32
 800a35e:	2b00      	cmp	r3, #0
 800a360:	461f      	mov	r7, r3
 800a362:	4614      	mov	r4, r2
 800a364:	bfb8      	it	lt
 800a366:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800a36a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a36c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800a36e:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800a372:	bfb6      	itet	lt
 800a374:	461f      	movlt	r7, r3
 800a376:	2300      	movge	r3, #0
 800a378:	232d      	movlt	r3, #45	; 0x2d
 800a37a:	7013      	strb	r3, [r2, #0]
 800a37c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a37e:	f023 0820 	bic.w	r8, r3, #32
 800a382:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a386:	d005      	beq.n	800a394 <__cvt+0x3c>
 800a388:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a38c:	d100      	bne.n	800a390 <__cvt+0x38>
 800a38e:	3501      	adds	r5, #1
 800a390:	2302      	movs	r3, #2
 800a392:	e000      	b.n	800a396 <__cvt+0x3e>
 800a394:	2303      	movs	r3, #3
 800a396:	aa07      	add	r2, sp, #28
 800a398:	9204      	str	r2, [sp, #16]
 800a39a:	aa06      	add	r2, sp, #24
 800a39c:	e9cd a202 	strd	sl, r2, [sp, #8]
 800a3a0:	e9cd 3500 	strd	r3, r5, [sp]
 800a3a4:	4622      	mov	r2, r4
 800a3a6:	463b      	mov	r3, r7
 800a3a8:	f000 fe7e 	bl	800b0a8 <_dtoa_r>
 800a3ac:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a3b0:	4606      	mov	r6, r0
 800a3b2:	d102      	bne.n	800a3ba <__cvt+0x62>
 800a3b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a3b6:	07db      	lsls	r3, r3, #31
 800a3b8:	d522      	bpl.n	800a400 <__cvt+0xa8>
 800a3ba:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a3be:	eb06 0905 	add.w	r9, r6, r5
 800a3c2:	d110      	bne.n	800a3e6 <__cvt+0x8e>
 800a3c4:	7833      	ldrb	r3, [r6, #0]
 800a3c6:	2b30      	cmp	r3, #48	; 0x30
 800a3c8:	d10a      	bne.n	800a3e0 <__cvt+0x88>
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	4620      	mov	r0, r4
 800a3d0:	4639      	mov	r1, r7
 800a3d2:	f7f6 fb51 	bl	8000a78 <__aeabi_dcmpeq>
 800a3d6:	b918      	cbnz	r0, 800a3e0 <__cvt+0x88>
 800a3d8:	f1c5 0501 	rsb	r5, r5, #1
 800a3dc:	f8ca 5000 	str.w	r5, [sl]
 800a3e0:	f8da 3000 	ldr.w	r3, [sl]
 800a3e4:	4499      	add	r9, r3
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	4620      	mov	r0, r4
 800a3ec:	4639      	mov	r1, r7
 800a3ee:	f7f6 fb43 	bl	8000a78 <__aeabi_dcmpeq>
 800a3f2:	b108      	cbz	r0, 800a3f8 <__cvt+0xa0>
 800a3f4:	f8cd 901c 	str.w	r9, [sp, #28]
 800a3f8:	2230      	movs	r2, #48	; 0x30
 800a3fa:	9b07      	ldr	r3, [sp, #28]
 800a3fc:	454b      	cmp	r3, r9
 800a3fe:	d307      	bcc.n	800a410 <__cvt+0xb8>
 800a400:	9b07      	ldr	r3, [sp, #28]
 800a402:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a404:	1b9b      	subs	r3, r3, r6
 800a406:	4630      	mov	r0, r6
 800a408:	6013      	str	r3, [r2, #0]
 800a40a:	b008      	add	sp, #32
 800a40c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a410:	1c59      	adds	r1, r3, #1
 800a412:	9107      	str	r1, [sp, #28]
 800a414:	701a      	strb	r2, [r3, #0]
 800a416:	e7f0      	b.n	800a3fa <__cvt+0xa2>

0800a418 <__exponent>:
 800a418:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a41a:	4603      	mov	r3, r0
 800a41c:	2900      	cmp	r1, #0
 800a41e:	bfb8      	it	lt
 800a420:	4249      	neglt	r1, r1
 800a422:	f803 2b02 	strb.w	r2, [r3], #2
 800a426:	bfb4      	ite	lt
 800a428:	222d      	movlt	r2, #45	; 0x2d
 800a42a:	222b      	movge	r2, #43	; 0x2b
 800a42c:	2909      	cmp	r1, #9
 800a42e:	7042      	strb	r2, [r0, #1]
 800a430:	dd2a      	ble.n	800a488 <__exponent+0x70>
 800a432:	f10d 0407 	add.w	r4, sp, #7
 800a436:	46a4      	mov	ip, r4
 800a438:	270a      	movs	r7, #10
 800a43a:	46a6      	mov	lr, r4
 800a43c:	460a      	mov	r2, r1
 800a43e:	fb91 f6f7 	sdiv	r6, r1, r7
 800a442:	fb07 1516 	mls	r5, r7, r6, r1
 800a446:	3530      	adds	r5, #48	; 0x30
 800a448:	2a63      	cmp	r2, #99	; 0x63
 800a44a:	f104 34ff 	add.w	r4, r4, #4294967295
 800a44e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a452:	4631      	mov	r1, r6
 800a454:	dcf1      	bgt.n	800a43a <__exponent+0x22>
 800a456:	3130      	adds	r1, #48	; 0x30
 800a458:	f1ae 0502 	sub.w	r5, lr, #2
 800a45c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a460:	1c44      	adds	r4, r0, #1
 800a462:	4629      	mov	r1, r5
 800a464:	4561      	cmp	r1, ip
 800a466:	d30a      	bcc.n	800a47e <__exponent+0x66>
 800a468:	f10d 0209 	add.w	r2, sp, #9
 800a46c:	eba2 020e 	sub.w	r2, r2, lr
 800a470:	4565      	cmp	r5, ip
 800a472:	bf88      	it	hi
 800a474:	2200      	movhi	r2, #0
 800a476:	4413      	add	r3, r2
 800a478:	1a18      	subs	r0, r3, r0
 800a47a:	b003      	add	sp, #12
 800a47c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a47e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a482:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a486:	e7ed      	b.n	800a464 <__exponent+0x4c>
 800a488:	2330      	movs	r3, #48	; 0x30
 800a48a:	3130      	adds	r1, #48	; 0x30
 800a48c:	7083      	strb	r3, [r0, #2]
 800a48e:	70c1      	strb	r1, [r0, #3]
 800a490:	1d03      	adds	r3, r0, #4
 800a492:	e7f1      	b.n	800a478 <__exponent+0x60>

0800a494 <_printf_float>:
 800a494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a498:	b091      	sub	sp, #68	; 0x44
 800a49a:	460c      	mov	r4, r1
 800a49c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800a4a0:	4616      	mov	r6, r2
 800a4a2:	461f      	mov	r7, r3
 800a4a4:	4605      	mov	r5, r0
 800a4a6:	f001 fcbd 	bl	800be24 <_localeconv_r>
 800a4aa:	6803      	ldr	r3, [r0, #0]
 800a4ac:	9309      	str	r3, [sp, #36]	; 0x24
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f7f5 fe66 	bl	8000180 <strlen>
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	930e      	str	r3, [sp, #56]	; 0x38
 800a4b8:	f8d8 3000 	ldr.w	r3, [r8]
 800a4bc:	900a      	str	r0, [sp, #40]	; 0x28
 800a4be:	3307      	adds	r3, #7
 800a4c0:	f023 0307 	bic.w	r3, r3, #7
 800a4c4:	f103 0208 	add.w	r2, r3, #8
 800a4c8:	f894 9018 	ldrb.w	r9, [r4, #24]
 800a4cc:	f8d4 b000 	ldr.w	fp, [r4]
 800a4d0:	f8c8 2000 	str.w	r2, [r8]
 800a4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a4dc:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800a4e0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800a4e4:	930b      	str	r3, [sp, #44]	; 0x2c
 800a4e6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a4e8:	4b9c      	ldr	r3, [pc, #624]	; (800a75c <_printf_float+0x2c8>)
 800a4ea:	f04f 32ff 	mov.w	r2, #4294967295
 800a4ee:	4640      	mov	r0, r8
 800a4f0:	f7f6 faf4 	bl	8000adc <__aeabi_dcmpun>
 800a4f4:	bb70      	cbnz	r0, 800a554 <_printf_float+0xc0>
 800a4f6:	4b99      	ldr	r3, [pc, #612]	; (800a75c <_printf_float+0x2c8>)
 800a4f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a4fa:	f04f 32ff 	mov.w	r2, #4294967295
 800a4fe:	4640      	mov	r0, r8
 800a500:	f7f6 face 	bl	8000aa0 <__aeabi_dcmple>
 800a504:	bb30      	cbnz	r0, 800a554 <_printf_float+0xc0>
 800a506:	2200      	movs	r2, #0
 800a508:	2300      	movs	r3, #0
 800a50a:	4640      	mov	r0, r8
 800a50c:	4651      	mov	r1, sl
 800a50e:	f7f6 fabd 	bl	8000a8c <__aeabi_dcmplt>
 800a512:	b110      	cbz	r0, 800a51a <_printf_float+0x86>
 800a514:	232d      	movs	r3, #45	; 0x2d
 800a516:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a51a:	4b91      	ldr	r3, [pc, #580]	; (800a760 <_printf_float+0x2cc>)
 800a51c:	4891      	ldr	r0, [pc, #580]	; (800a764 <_printf_float+0x2d0>)
 800a51e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800a522:	bf94      	ite	ls
 800a524:	4698      	movls	r8, r3
 800a526:	4680      	movhi	r8, r0
 800a528:	2303      	movs	r3, #3
 800a52a:	6123      	str	r3, [r4, #16]
 800a52c:	f02b 0304 	bic.w	r3, fp, #4
 800a530:	6023      	str	r3, [r4, #0]
 800a532:	f04f 0a00 	mov.w	sl, #0
 800a536:	9700      	str	r7, [sp, #0]
 800a538:	4633      	mov	r3, r6
 800a53a:	aa0f      	add	r2, sp, #60	; 0x3c
 800a53c:	4621      	mov	r1, r4
 800a53e:	4628      	mov	r0, r5
 800a540:	f000 f9d2 	bl	800a8e8 <_printf_common>
 800a544:	3001      	adds	r0, #1
 800a546:	f040 808f 	bne.w	800a668 <_printf_float+0x1d4>
 800a54a:	f04f 30ff 	mov.w	r0, #4294967295
 800a54e:	b011      	add	sp, #68	; 0x44
 800a550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a554:	4642      	mov	r2, r8
 800a556:	4653      	mov	r3, sl
 800a558:	4640      	mov	r0, r8
 800a55a:	4651      	mov	r1, sl
 800a55c:	f7f6 fabe 	bl	8000adc <__aeabi_dcmpun>
 800a560:	b140      	cbz	r0, 800a574 <_printf_float+0xe0>
 800a562:	f1ba 0f00 	cmp.w	sl, #0
 800a566:	bfbc      	itt	lt
 800a568:	232d      	movlt	r3, #45	; 0x2d
 800a56a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a56e:	487e      	ldr	r0, [pc, #504]	; (800a768 <_printf_float+0x2d4>)
 800a570:	4b7e      	ldr	r3, [pc, #504]	; (800a76c <_printf_float+0x2d8>)
 800a572:	e7d4      	b.n	800a51e <_printf_float+0x8a>
 800a574:	6863      	ldr	r3, [r4, #4]
 800a576:	1c5a      	adds	r2, r3, #1
 800a578:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800a57c:	d142      	bne.n	800a604 <_printf_float+0x170>
 800a57e:	2306      	movs	r3, #6
 800a580:	6063      	str	r3, [r4, #4]
 800a582:	2200      	movs	r2, #0
 800a584:	9206      	str	r2, [sp, #24]
 800a586:	aa0e      	add	r2, sp, #56	; 0x38
 800a588:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800a58c:	aa0d      	add	r2, sp, #52	; 0x34
 800a58e:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800a592:	9203      	str	r2, [sp, #12]
 800a594:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800a598:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800a59c:	6023      	str	r3, [r4, #0]
 800a59e:	6863      	ldr	r3, [r4, #4]
 800a5a0:	9300      	str	r3, [sp, #0]
 800a5a2:	4642      	mov	r2, r8
 800a5a4:	4653      	mov	r3, sl
 800a5a6:	4628      	mov	r0, r5
 800a5a8:	910b      	str	r1, [sp, #44]	; 0x2c
 800a5aa:	f7ff fed5 	bl	800a358 <__cvt>
 800a5ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a5b0:	2947      	cmp	r1, #71	; 0x47
 800a5b2:	4680      	mov	r8, r0
 800a5b4:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a5b6:	d108      	bne.n	800a5ca <_printf_float+0x136>
 800a5b8:	1cc8      	adds	r0, r1, #3
 800a5ba:	db02      	blt.n	800a5c2 <_printf_float+0x12e>
 800a5bc:	6863      	ldr	r3, [r4, #4]
 800a5be:	4299      	cmp	r1, r3
 800a5c0:	dd40      	ble.n	800a644 <_printf_float+0x1b0>
 800a5c2:	f1a9 0902 	sub.w	r9, r9, #2
 800a5c6:	fa5f f989 	uxtb.w	r9, r9
 800a5ca:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a5ce:	d81f      	bhi.n	800a610 <_printf_float+0x17c>
 800a5d0:	3901      	subs	r1, #1
 800a5d2:	464a      	mov	r2, r9
 800a5d4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a5d8:	910d      	str	r1, [sp, #52]	; 0x34
 800a5da:	f7ff ff1d 	bl	800a418 <__exponent>
 800a5de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a5e0:	1813      	adds	r3, r2, r0
 800a5e2:	2a01      	cmp	r2, #1
 800a5e4:	4682      	mov	sl, r0
 800a5e6:	6123      	str	r3, [r4, #16]
 800a5e8:	dc02      	bgt.n	800a5f0 <_printf_float+0x15c>
 800a5ea:	6822      	ldr	r2, [r4, #0]
 800a5ec:	07d2      	lsls	r2, r2, #31
 800a5ee:	d501      	bpl.n	800a5f4 <_printf_float+0x160>
 800a5f0:	3301      	adds	r3, #1
 800a5f2:	6123      	str	r3, [r4, #16]
 800a5f4:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d09c      	beq.n	800a536 <_printf_float+0xa2>
 800a5fc:	232d      	movs	r3, #45	; 0x2d
 800a5fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a602:	e798      	b.n	800a536 <_printf_float+0xa2>
 800a604:	2947      	cmp	r1, #71	; 0x47
 800a606:	d1bc      	bne.n	800a582 <_printf_float+0xee>
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d1ba      	bne.n	800a582 <_printf_float+0xee>
 800a60c:	2301      	movs	r3, #1
 800a60e:	e7b7      	b.n	800a580 <_printf_float+0xec>
 800a610:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800a614:	d118      	bne.n	800a648 <_printf_float+0x1b4>
 800a616:	2900      	cmp	r1, #0
 800a618:	6863      	ldr	r3, [r4, #4]
 800a61a:	dd0b      	ble.n	800a634 <_printf_float+0x1a0>
 800a61c:	6121      	str	r1, [r4, #16]
 800a61e:	b913      	cbnz	r3, 800a626 <_printf_float+0x192>
 800a620:	6822      	ldr	r2, [r4, #0]
 800a622:	07d0      	lsls	r0, r2, #31
 800a624:	d502      	bpl.n	800a62c <_printf_float+0x198>
 800a626:	3301      	adds	r3, #1
 800a628:	440b      	add	r3, r1
 800a62a:	6123      	str	r3, [r4, #16]
 800a62c:	65a1      	str	r1, [r4, #88]	; 0x58
 800a62e:	f04f 0a00 	mov.w	sl, #0
 800a632:	e7df      	b.n	800a5f4 <_printf_float+0x160>
 800a634:	b913      	cbnz	r3, 800a63c <_printf_float+0x1a8>
 800a636:	6822      	ldr	r2, [r4, #0]
 800a638:	07d2      	lsls	r2, r2, #31
 800a63a:	d501      	bpl.n	800a640 <_printf_float+0x1ac>
 800a63c:	3302      	adds	r3, #2
 800a63e:	e7f4      	b.n	800a62a <_printf_float+0x196>
 800a640:	2301      	movs	r3, #1
 800a642:	e7f2      	b.n	800a62a <_printf_float+0x196>
 800a644:	f04f 0967 	mov.w	r9, #103	; 0x67
 800a648:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a64a:	4299      	cmp	r1, r3
 800a64c:	db05      	blt.n	800a65a <_printf_float+0x1c6>
 800a64e:	6823      	ldr	r3, [r4, #0]
 800a650:	6121      	str	r1, [r4, #16]
 800a652:	07d8      	lsls	r0, r3, #31
 800a654:	d5ea      	bpl.n	800a62c <_printf_float+0x198>
 800a656:	1c4b      	adds	r3, r1, #1
 800a658:	e7e7      	b.n	800a62a <_printf_float+0x196>
 800a65a:	2900      	cmp	r1, #0
 800a65c:	bfd4      	ite	le
 800a65e:	f1c1 0202 	rsble	r2, r1, #2
 800a662:	2201      	movgt	r2, #1
 800a664:	4413      	add	r3, r2
 800a666:	e7e0      	b.n	800a62a <_printf_float+0x196>
 800a668:	6823      	ldr	r3, [r4, #0]
 800a66a:	055a      	lsls	r2, r3, #21
 800a66c:	d407      	bmi.n	800a67e <_printf_float+0x1ea>
 800a66e:	6923      	ldr	r3, [r4, #16]
 800a670:	4642      	mov	r2, r8
 800a672:	4631      	mov	r1, r6
 800a674:	4628      	mov	r0, r5
 800a676:	47b8      	blx	r7
 800a678:	3001      	adds	r0, #1
 800a67a:	d12b      	bne.n	800a6d4 <_printf_float+0x240>
 800a67c:	e765      	b.n	800a54a <_printf_float+0xb6>
 800a67e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800a682:	f240 80dc 	bls.w	800a83e <_printf_float+0x3aa>
 800a686:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a68a:	2200      	movs	r2, #0
 800a68c:	2300      	movs	r3, #0
 800a68e:	f7f6 f9f3 	bl	8000a78 <__aeabi_dcmpeq>
 800a692:	2800      	cmp	r0, #0
 800a694:	d033      	beq.n	800a6fe <_printf_float+0x26a>
 800a696:	4a36      	ldr	r2, [pc, #216]	; (800a770 <_printf_float+0x2dc>)
 800a698:	2301      	movs	r3, #1
 800a69a:	4631      	mov	r1, r6
 800a69c:	4628      	mov	r0, r5
 800a69e:	47b8      	blx	r7
 800a6a0:	3001      	adds	r0, #1
 800a6a2:	f43f af52 	beq.w	800a54a <_printf_float+0xb6>
 800a6a6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a6aa:	429a      	cmp	r2, r3
 800a6ac:	db02      	blt.n	800a6b4 <_printf_float+0x220>
 800a6ae:	6823      	ldr	r3, [r4, #0]
 800a6b0:	07d8      	lsls	r0, r3, #31
 800a6b2:	d50f      	bpl.n	800a6d4 <_printf_float+0x240>
 800a6b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a6b8:	4631      	mov	r1, r6
 800a6ba:	4628      	mov	r0, r5
 800a6bc:	47b8      	blx	r7
 800a6be:	3001      	adds	r0, #1
 800a6c0:	f43f af43 	beq.w	800a54a <_printf_float+0xb6>
 800a6c4:	f04f 0800 	mov.w	r8, #0
 800a6c8:	f104 091a 	add.w	r9, r4, #26
 800a6cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a6ce:	3b01      	subs	r3, #1
 800a6d0:	4543      	cmp	r3, r8
 800a6d2:	dc09      	bgt.n	800a6e8 <_printf_float+0x254>
 800a6d4:	6823      	ldr	r3, [r4, #0]
 800a6d6:	079b      	lsls	r3, r3, #30
 800a6d8:	f100 8101 	bmi.w	800a8de <_printf_float+0x44a>
 800a6dc:	68e0      	ldr	r0, [r4, #12]
 800a6de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a6e0:	4298      	cmp	r0, r3
 800a6e2:	bfb8      	it	lt
 800a6e4:	4618      	movlt	r0, r3
 800a6e6:	e732      	b.n	800a54e <_printf_float+0xba>
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	464a      	mov	r2, r9
 800a6ec:	4631      	mov	r1, r6
 800a6ee:	4628      	mov	r0, r5
 800a6f0:	47b8      	blx	r7
 800a6f2:	3001      	adds	r0, #1
 800a6f4:	f43f af29 	beq.w	800a54a <_printf_float+0xb6>
 800a6f8:	f108 0801 	add.w	r8, r8, #1
 800a6fc:	e7e6      	b.n	800a6cc <_printf_float+0x238>
 800a6fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a700:	2b00      	cmp	r3, #0
 800a702:	dc37      	bgt.n	800a774 <_printf_float+0x2e0>
 800a704:	4a1a      	ldr	r2, [pc, #104]	; (800a770 <_printf_float+0x2dc>)
 800a706:	2301      	movs	r3, #1
 800a708:	4631      	mov	r1, r6
 800a70a:	4628      	mov	r0, r5
 800a70c:	47b8      	blx	r7
 800a70e:	3001      	adds	r0, #1
 800a710:	f43f af1b 	beq.w	800a54a <_printf_float+0xb6>
 800a714:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a718:	4313      	orrs	r3, r2
 800a71a:	d102      	bne.n	800a722 <_printf_float+0x28e>
 800a71c:	6823      	ldr	r3, [r4, #0]
 800a71e:	07d9      	lsls	r1, r3, #31
 800a720:	d5d8      	bpl.n	800a6d4 <_printf_float+0x240>
 800a722:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a726:	4631      	mov	r1, r6
 800a728:	4628      	mov	r0, r5
 800a72a:	47b8      	blx	r7
 800a72c:	3001      	adds	r0, #1
 800a72e:	f43f af0c 	beq.w	800a54a <_printf_float+0xb6>
 800a732:	f04f 0900 	mov.w	r9, #0
 800a736:	f104 0a1a 	add.w	sl, r4, #26
 800a73a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a73c:	425b      	negs	r3, r3
 800a73e:	454b      	cmp	r3, r9
 800a740:	dc01      	bgt.n	800a746 <_printf_float+0x2b2>
 800a742:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a744:	e794      	b.n	800a670 <_printf_float+0x1dc>
 800a746:	2301      	movs	r3, #1
 800a748:	4652      	mov	r2, sl
 800a74a:	4631      	mov	r1, r6
 800a74c:	4628      	mov	r0, r5
 800a74e:	47b8      	blx	r7
 800a750:	3001      	adds	r0, #1
 800a752:	f43f aefa 	beq.w	800a54a <_printf_float+0xb6>
 800a756:	f109 0901 	add.w	r9, r9, #1
 800a75a:	e7ee      	b.n	800a73a <_printf_float+0x2a6>
 800a75c:	7fefffff 	.word	0x7fefffff
 800a760:	0800d88c 	.word	0x0800d88c
 800a764:	0800d890 	.word	0x0800d890
 800a768:	0800d898 	.word	0x0800d898
 800a76c:	0800d894 	.word	0x0800d894
 800a770:	0800d89c 	.word	0x0800d89c
 800a774:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a776:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a778:	429a      	cmp	r2, r3
 800a77a:	bfa8      	it	ge
 800a77c:	461a      	movge	r2, r3
 800a77e:	2a00      	cmp	r2, #0
 800a780:	4691      	mov	r9, r2
 800a782:	dc37      	bgt.n	800a7f4 <_printf_float+0x360>
 800a784:	f04f 0b00 	mov.w	fp, #0
 800a788:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a78c:	f104 021a 	add.w	r2, r4, #26
 800a790:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800a794:	ebaa 0309 	sub.w	r3, sl, r9
 800a798:	455b      	cmp	r3, fp
 800a79a:	dc33      	bgt.n	800a804 <_printf_float+0x370>
 800a79c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a7a0:	429a      	cmp	r2, r3
 800a7a2:	db3b      	blt.n	800a81c <_printf_float+0x388>
 800a7a4:	6823      	ldr	r3, [r4, #0]
 800a7a6:	07da      	lsls	r2, r3, #31
 800a7a8:	d438      	bmi.n	800a81c <_printf_float+0x388>
 800a7aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a7ac:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a7ae:	eba3 020a 	sub.w	r2, r3, sl
 800a7b2:	eba3 0901 	sub.w	r9, r3, r1
 800a7b6:	4591      	cmp	r9, r2
 800a7b8:	bfa8      	it	ge
 800a7ba:	4691      	movge	r9, r2
 800a7bc:	f1b9 0f00 	cmp.w	r9, #0
 800a7c0:	dc34      	bgt.n	800a82c <_printf_float+0x398>
 800a7c2:	f04f 0800 	mov.w	r8, #0
 800a7c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a7ca:	f104 0a1a 	add.w	sl, r4, #26
 800a7ce:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800a7d2:	1a9b      	subs	r3, r3, r2
 800a7d4:	eba3 0309 	sub.w	r3, r3, r9
 800a7d8:	4543      	cmp	r3, r8
 800a7da:	f77f af7b 	ble.w	800a6d4 <_printf_float+0x240>
 800a7de:	2301      	movs	r3, #1
 800a7e0:	4652      	mov	r2, sl
 800a7e2:	4631      	mov	r1, r6
 800a7e4:	4628      	mov	r0, r5
 800a7e6:	47b8      	blx	r7
 800a7e8:	3001      	adds	r0, #1
 800a7ea:	f43f aeae 	beq.w	800a54a <_printf_float+0xb6>
 800a7ee:	f108 0801 	add.w	r8, r8, #1
 800a7f2:	e7ec      	b.n	800a7ce <_printf_float+0x33a>
 800a7f4:	4613      	mov	r3, r2
 800a7f6:	4631      	mov	r1, r6
 800a7f8:	4642      	mov	r2, r8
 800a7fa:	4628      	mov	r0, r5
 800a7fc:	47b8      	blx	r7
 800a7fe:	3001      	adds	r0, #1
 800a800:	d1c0      	bne.n	800a784 <_printf_float+0x2f0>
 800a802:	e6a2      	b.n	800a54a <_printf_float+0xb6>
 800a804:	2301      	movs	r3, #1
 800a806:	4631      	mov	r1, r6
 800a808:	4628      	mov	r0, r5
 800a80a:	920b      	str	r2, [sp, #44]	; 0x2c
 800a80c:	47b8      	blx	r7
 800a80e:	3001      	adds	r0, #1
 800a810:	f43f ae9b 	beq.w	800a54a <_printf_float+0xb6>
 800a814:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a816:	f10b 0b01 	add.w	fp, fp, #1
 800a81a:	e7b9      	b.n	800a790 <_printf_float+0x2fc>
 800a81c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a820:	4631      	mov	r1, r6
 800a822:	4628      	mov	r0, r5
 800a824:	47b8      	blx	r7
 800a826:	3001      	adds	r0, #1
 800a828:	d1bf      	bne.n	800a7aa <_printf_float+0x316>
 800a82a:	e68e      	b.n	800a54a <_printf_float+0xb6>
 800a82c:	464b      	mov	r3, r9
 800a82e:	eb08 020a 	add.w	r2, r8, sl
 800a832:	4631      	mov	r1, r6
 800a834:	4628      	mov	r0, r5
 800a836:	47b8      	blx	r7
 800a838:	3001      	adds	r0, #1
 800a83a:	d1c2      	bne.n	800a7c2 <_printf_float+0x32e>
 800a83c:	e685      	b.n	800a54a <_printf_float+0xb6>
 800a83e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a840:	2a01      	cmp	r2, #1
 800a842:	dc01      	bgt.n	800a848 <_printf_float+0x3b4>
 800a844:	07db      	lsls	r3, r3, #31
 800a846:	d537      	bpl.n	800a8b8 <_printf_float+0x424>
 800a848:	2301      	movs	r3, #1
 800a84a:	4642      	mov	r2, r8
 800a84c:	4631      	mov	r1, r6
 800a84e:	4628      	mov	r0, r5
 800a850:	47b8      	blx	r7
 800a852:	3001      	adds	r0, #1
 800a854:	f43f ae79 	beq.w	800a54a <_printf_float+0xb6>
 800a858:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a85c:	4631      	mov	r1, r6
 800a85e:	4628      	mov	r0, r5
 800a860:	47b8      	blx	r7
 800a862:	3001      	adds	r0, #1
 800a864:	f43f ae71 	beq.w	800a54a <_printf_float+0xb6>
 800a868:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a86c:	2200      	movs	r2, #0
 800a86e:	2300      	movs	r3, #0
 800a870:	f7f6 f902 	bl	8000a78 <__aeabi_dcmpeq>
 800a874:	b9d8      	cbnz	r0, 800a8ae <_printf_float+0x41a>
 800a876:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a878:	f108 0201 	add.w	r2, r8, #1
 800a87c:	3b01      	subs	r3, #1
 800a87e:	4631      	mov	r1, r6
 800a880:	4628      	mov	r0, r5
 800a882:	47b8      	blx	r7
 800a884:	3001      	adds	r0, #1
 800a886:	d10e      	bne.n	800a8a6 <_printf_float+0x412>
 800a888:	e65f      	b.n	800a54a <_printf_float+0xb6>
 800a88a:	2301      	movs	r3, #1
 800a88c:	464a      	mov	r2, r9
 800a88e:	4631      	mov	r1, r6
 800a890:	4628      	mov	r0, r5
 800a892:	47b8      	blx	r7
 800a894:	3001      	adds	r0, #1
 800a896:	f43f ae58 	beq.w	800a54a <_printf_float+0xb6>
 800a89a:	f108 0801 	add.w	r8, r8, #1
 800a89e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a8a0:	3b01      	subs	r3, #1
 800a8a2:	4543      	cmp	r3, r8
 800a8a4:	dcf1      	bgt.n	800a88a <_printf_float+0x3f6>
 800a8a6:	4653      	mov	r3, sl
 800a8a8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a8ac:	e6e1      	b.n	800a672 <_printf_float+0x1de>
 800a8ae:	f04f 0800 	mov.w	r8, #0
 800a8b2:	f104 091a 	add.w	r9, r4, #26
 800a8b6:	e7f2      	b.n	800a89e <_printf_float+0x40a>
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	4642      	mov	r2, r8
 800a8bc:	e7df      	b.n	800a87e <_printf_float+0x3ea>
 800a8be:	2301      	movs	r3, #1
 800a8c0:	464a      	mov	r2, r9
 800a8c2:	4631      	mov	r1, r6
 800a8c4:	4628      	mov	r0, r5
 800a8c6:	47b8      	blx	r7
 800a8c8:	3001      	adds	r0, #1
 800a8ca:	f43f ae3e 	beq.w	800a54a <_printf_float+0xb6>
 800a8ce:	f108 0801 	add.w	r8, r8, #1
 800a8d2:	68e3      	ldr	r3, [r4, #12]
 800a8d4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800a8d6:	1a5b      	subs	r3, r3, r1
 800a8d8:	4543      	cmp	r3, r8
 800a8da:	dcf0      	bgt.n	800a8be <_printf_float+0x42a>
 800a8dc:	e6fe      	b.n	800a6dc <_printf_float+0x248>
 800a8de:	f04f 0800 	mov.w	r8, #0
 800a8e2:	f104 0919 	add.w	r9, r4, #25
 800a8e6:	e7f4      	b.n	800a8d2 <_printf_float+0x43e>

0800a8e8 <_printf_common>:
 800a8e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8ec:	4616      	mov	r6, r2
 800a8ee:	4699      	mov	r9, r3
 800a8f0:	688a      	ldr	r2, [r1, #8]
 800a8f2:	690b      	ldr	r3, [r1, #16]
 800a8f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a8f8:	4293      	cmp	r3, r2
 800a8fa:	bfb8      	it	lt
 800a8fc:	4613      	movlt	r3, r2
 800a8fe:	6033      	str	r3, [r6, #0]
 800a900:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a904:	4607      	mov	r7, r0
 800a906:	460c      	mov	r4, r1
 800a908:	b10a      	cbz	r2, 800a90e <_printf_common+0x26>
 800a90a:	3301      	adds	r3, #1
 800a90c:	6033      	str	r3, [r6, #0]
 800a90e:	6823      	ldr	r3, [r4, #0]
 800a910:	0699      	lsls	r1, r3, #26
 800a912:	bf42      	ittt	mi
 800a914:	6833      	ldrmi	r3, [r6, #0]
 800a916:	3302      	addmi	r3, #2
 800a918:	6033      	strmi	r3, [r6, #0]
 800a91a:	6825      	ldr	r5, [r4, #0]
 800a91c:	f015 0506 	ands.w	r5, r5, #6
 800a920:	d106      	bne.n	800a930 <_printf_common+0x48>
 800a922:	f104 0a19 	add.w	sl, r4, #25
 800a926:	68e3      	ldr	r3, [r4, #12]
 800a928:	6832      	ldr	r2, [r6, #0]
 800a92a:	1a9b      	subs	r3, r3, r2
 800a92c:	42ab      	cmp	r3, r5
 800a92e:	dc26      	bgt.n	800a97e <_printf_common+0x96>
 800a930:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a934:	1e13      	subs	r3, r2, #0
 800a936:	6822      	ldr	r2, [r4, #0]
 800a938:	bf18      	it	ne
 800a93a:	2301      	movne	r3, #1
 800a93c:	0692      	lsls	r2, r2, #26
 800a93e:	d42b      	bmi.n	800a998 <_printf_common+0xb0>
 800a940:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a944:	4649      	mov	r1, r9
 800a946:	4638      	mov	r0, r7
 800a948:	47c0      	blx	r8
 800a94a:	3001      	adds	r0, #1
 800a94c:	d01e      	beq.n	800a98c <_printf_common+0xa4>
 800a94e:	6823      	ldr	r3, [r4, #0]
 800a950:	68e5      	ldr	r5, [r4, #12]
 800a952:	6832      	ldr	r2, [r6, #0]
 800a954:	f003 0306 	and.w	r3, r3, #6
 800a958:	2b04      	cmp	r3, #4
 800a95a:	bf08      	it	eq
 800a95c:	1aad      	subeq	r5, r5, r2
 800a95e:	68a3      	ldr	r3, [r4, #8]
 800a960:	6922      	ldr	r2, [r4, #16]
 800a962:	bf0c      	ite	eq
 800a964:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a968:	2500      	movne	r5, #0
 800a96a:	4293      	cmp	r3, r2
 800a96c:	bfc4      	itt	gt
 800a96e:	1a9b      	subgt	r3, r3, r2
 800a970:	18ed      	addgt	r5, r5, r3
 800a972:	2600      	movs	r6, #0
 800a974:	341a      	adds	r4, #26
 800a976:	42b5      	cmp	r5, r6
 800a978:	d11a      	bne.n	800a9b0 <_printf_common+0xc8>
 800a97a:	2000      	movs	r0, #0
 800a97c:	e008      	b.n	800a990 <_printf_common+0xa8>
 800a97e:	2301      	movs	r3, #1
 800a980:	4652      	mov	r2, sl
 800a982:	4649      	mov	r1, r9
 800a984:	4638      	mov	r0, r7
 800a986:	47c0      	blx	r8
 800a988:	3001      	adds	r0, #1
 800a98a:	d103      	bne.n	800a994 <_printf_common+0xac>
 800a98c:	f04f 30ff 	mov.w	r0, #4294967295
 800a990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a994:	3501      	adds	r5, #1
 800a996:	e7c6      	b.n	800a926 <_printf_common+0x3e>
 800a998:	18e1      	adds	r1, r4, r3
 800a99a:	1c5a      	adds	r2, r3, #1
 800a99c:	2030      	movs	r0, #48	; 0x30
 800a99e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a9a2:	4422      	add	r2, r4
 800a9a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a9a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a9ac:	3302      	adds	r3, #2
 800a9ae:	e7c7      	b.n	800a940 <_printf_common+0x58>
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	4622      	mov	r2, r4
 800a9b4:	4649      	mov	r1, r9
 800a9b6:	4638      	mov	r0, r7
 800a9b8:	47c0      	blx	r8
 800a9ba:	3001      	adds	r0, #1
 800a9bc:	d0e6      	beq.n	800a98c <_printf_common+0xa4>
 800a9be:	3601      	adds	r6, #1
 800a9c0:	e7d9      	b.n	800a976 <_printf_common+0x8e>
	...

0800a9c4 <_printf_i>:
 800a9c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a9c8:	7e0f      	ldrb	r7, [r1, #24]
 800a9ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a9cc:	2f78      	cmp	r7, #120	; 0x78
 800a9ce:	4691      	mov	r9, r2
 800a9d0:	4680      	mov	r8, r0
 800a9d2:	460c      	mov	r4, r1
 800a9d4:	469a      	mov	sl, r3
 800a9d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a9da:	d807      	bhi.n	800a9ec <_printf_i+0x28>
 800a9dc:	2f62      	cmp	r7, #98	; 0x62
 800a9de:	d80a      	bhi.n	800a9f6 <_printf_i+0x32>
 800a9e0:	2f00      	cmp	r7, #0
 800a9e2:	f000 80d8 	beq.w	800ab96 <_printf_i+0x1d2>
 800a9e6:	2f58      	cmp	r7, #88	; 0x58
 800a9e8:	f000 80a3 	beq.w	800ab32 <_printf_i+0x16e>
 800a9ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a9f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a9f4:	e03a      	b.n	800aa6c <_printf_i+0xa8>
 800a9f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a9fa:	2b15      	cmp	r3, #21
 800a9fc:	d8f6      	bhi.n	800a9ec <_printf_i+0x28>
 800a9fe:	a101      	add	r1, pc, #4	; (adr r1, 800aa04 <_printf_i+0x40>)
 800aa00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aa04:	0800aa5d 	.word	0x0800aa5d
 800aa08:	0800aa71 	.word	0x0800aa71
 800aa0c:	0800a9ed 	.word	0x0800a9ed
 800aa10:	0800a9ed 	.word	0x0800a9ed
 800aa14:	0800a9ed 	.word	0x0800a9ed
 800aa18:	0800a9ed 	.word	0x0800a9ed
 800aa1c:	0800aa71 	.word	0x0800aa71
 800aa20:	0800a9ed 	.word	0x0800a9ed
 800aa24:	0800a9ed 	.word	0x0800a9ed
 800aa28:	0800a9ed 	.word	0x0800a9ed
 800aa2c:	0800a9ed 	.word	0x0800a9ed
 800aa30:	0800ab7d 	.word	0x0800ab7d
 800aa34:	0800aaa1 	.word	0x0800aaa1
 800aa38:	0800ab5f 	.word	0x0800ab5f
 800aa3c:	0800a9ed 	.word	0x0800a9ed
 800aa40:	0800a9ed 	.word	0x0800a9ed
 800aa44:	0800ab9f 	.word	0x0800ab9f
 800aa48:	0800a9ed 	.word	0x0800a9ed
 800aa4c:	0800aaa1 	.word	0x0800aaa1
 800aa50:	0800a9ed 	.word	0x0800a9ed
 800aa54:	0800a9ed 	.word	0x0800a9ed
 800aa58:	0800ab67 	.word	0x0800ab67
 800aa5c:	682b      	ldr	r3, [r5, #0]
 800aa5e:	1d1a      	adds	r2, r3, #4
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	602a      	str	r2, [r5, #0]
 800aa64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	e0a3      	b.n	800abb8 <_printf_i+0x1f4>
 800aa70:	6820      	ldr	r0, [r4, #0]
 800aa72:	6829      	ldr	r1, [r5, #0]
 800aa74:	0606      	lsls	r6, r0, #24
 800aa76:	f101 0304 	add.w	r3, r1, #4
 800aa7a:	d50a      	bpl.n	800aa92 <_printf_i+0xce>
 800aa7c:	680e      	ldr	r6, [r1, #0]
 800aa7e:	602b      	str	r3, [r5, #0]
 800aa80:	2e00      	cmp	r6, #0
 800aa82:	da03      	bge.n	800aa8c <_printf_i+0xc8>
 800aa84:	232d      	movs	r3, #45	; 0x2d
 800aa86:	4276      	negs	r6, r6
 800aa88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa8c:	485e      	ldr	r0, [pc, #376]	; (800ac08 <_printf_i+0x244>)
 800aa8e:	230a      	movs	r3, #10
 800aa90:	e019      	b.n	800aac6 <_printf_i+0x102>
 800aa92:	680e      	ldr	r6, [r1, #0]
 800aa94:	602b      	str	r3, [r5, #0]
 800aa96:	f010 0f40 	tst.w	r0, #64	; 0x40
 800aa9a:	bf18      	it	ne
 800aa9c:	b236      	sxthne	r6, r6
 800aa9e:	e7ef      	b.n	800aa80 <_printf_i+0xbc>
 800aaa0:	682b      	ldr	r3, [r5, #0]
 800aaa2:	6820      	ldr	r0, [r4, #0]
 800aaa4:	1d19      	adds	r1, r3, #4
 800aaa6:	6029      	str	r1, [r5, #0]
 800aaa8:	0601      	lsls	r1, r0, #24
 800aaaa:	d501      	bpl.n	800aab0 <_printf_i+0xec>
 800aaac:	681e      	ldr	r6, [r3, #0]
 800aaae:	e002      	b.n	800aab6 <_printf_i+0xf2>
 800aab0:	0646      	lsls	r6, r0, #25
 800aab2:	d5fb      	bpl.n	800aaac <_printf_i+0xe8>
 800aab4:	881e      	ldrh	r6, [r3, #0]
 800aab6:	4854      	ldr	r0, [pc, #336]	; (800ac08 <_printf_i+0x244>)
 800aab8:	2f6f      	cmp	r7, #111	; 0x6f
 800aaba:	bf0c      	ite	eq
 800aabc:	2308      	moveq	r3, #8
 800aabe:	230a      	movne	r3, #10
 800aac0:	2100      	movs	r1, #0
 800aac2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aac6:	6865      	ldr	r5, [r4, #4]
 800aac8:	60a5      	str	r5, [r4, #8]
 800aaca:	2d00      	cmp	r5, #0
 800aacc:	bfa2      	ittt	ge
 800aace:	6821      	ldrge	r1, [r4, #0]
 800aad0:	f021 0104 	bicge.w	r1, r1, #4
 800aad4:	6021      	strge	r1, [r4, #0]
 800aad6:	b90e      	cbnz	r6, 800aadc <_printf_i+0x118>
 800aad8:	2d00      	cmp	r5, #0
 800aada:	d04d      	beq.n	800ab78 <_printf_i+0x1b4>
 800aadc:	4615      	mov	r5, r2
 800aade:	fbb6 f1f3 	udiv	r1, r6, r3
 800aae2:	fb03 6711 	mls	r7, r3, r1, r6
 800aae6:	5dc7      	ldrb	r7, [r0, r7]
 800aae8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800aaec:	4637      	mov	r7, r6
 800aaee:	42bb      	cmp	r3, r7
 800aaf0:	460e      	mov	r6, r1
 800aaf2:	d9f4      	bls.n	800aade <_printf_i+0x11a>
 800aaf4:	2b08      	cmp	r3, #8
 800aaf6:	d10b      	bne.n	800ab10 <_printf_i+0x14c>
 800aaf8:	6823      	ldr	r3, [r4, #0]
 800aafa:	07de      	lsls	r6, r3, #31
 800aafc:	d508      	bpl.n	800ab10 <_printf_i+0x14c>
 800aafe:	6923      	ldr	r3, [r4, #16]
 800ab00:	6861      	ldr	r1, [r4, #4]
 800ab02:	4299      	cmp	r1, r3
 800ab04:	bfde      	ittt	le
 800ab06:	2330      	movle	r3, #48	; 0x30
 800ab08:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ab0c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ab10:	1b52      	subs	r2, r2, r5
 800ab12:	6122      	str	r2, [r4, #16]
 800ab14:	f8cd a000 	str.w	sl, [sp]
 800ab18:	464b      	mov	r3, r9
 800ab1a:	aa03      	add	r2, sp, #12
 800ab1c:	4621      	mov	r1, r4
 800ab1e:	4640      	mov	r0, r8
 800ab20:	f7ff fee2 	bl	800a8e8 <_printf_common>
 800ab24:	3001      	adds	r0, #1
 800ab26:	d14c      	bne.n	800abc2 <_printf_i+0x1fe>
 800ab28:	f04f 30ff 	mov.w	r0, #4294967295
 800ab2c:	b004      	add	sp, #16
 800ab2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab32:	4835      	ldr	r0, [pc, #212]	; (800ac08 <_printf_i+0x244>)
 800ab34:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ab38:	6829      	ldr	r1, [r5, #0]
 800ab3a:	6823      	ldr	r3, [r4, #0]
 800ab3c:	f851 6b04 	ldr.w	r6, [r1], #4
 800ab40:	6029      	str	r1, [r5, #0]
 800ab42:	061d      	lsls	r5, r3, #24
 800ab44:	d514      	bpl.n	800ab70 <_printf_i+0x1ac>
 800ab46:	07df      	lsls	r7, r3, #31
 800ab48:	bf44      	itt	mi
 800ab4a:	f043 0320 	orrmi.w	r3, r3, #32
 800ab4e:	6023      	strmi	r3, [r4, #0]
 800ab50:	b91e      	cbnz	r6, 800ab5a <_printf_i+0x196>
 800ab52:	6823      	ldr	r3, [r4, #0]
 800ab54:	f023 0320 	bic.w	r3, r3, #32
 800ab58:	6023      	str	r3, [r4, #0]
 800ab5a:	2310      	movs	r3, #16
 800ab5c:	e7b0      	b.n	800aac0 <_printf_i+0xfc>
 800ab5e:	6823      	ldr	r3, [r4, #0]
 800ab60:	f043 0320 	orr.w	r3, r3, #32
 800ab64:	6023      	str	r3, [r4, #0]
 800ab66:	2378      	movs	r3, #120	; 0x78
 800ab68:	4828      	ldr	r0, [pc, #160]	; (800ac0c <_printf_i+0x248>)
 800ab6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ab6e:	e7e3      	b.n	800ab38 <_printf_i+0x174>
 800ab70:	0659      	lsls	r1, r3, #25
 800ab72:	bf48      	it	mi
 800ab74:	b2b6      	uxthmi	r6, r6
 800ab76:	e7e6      	b.n	800ab46 <_printf_i+0x182>
 800ab78:	4615      	mov	r5, r2
 800ab7a:	e7bb      	b.n	800aaf4 <_printf_i+0x130>
 800ab7c:	682b      	ldr	r3, [r5, #0]
 800ab7e:	6826      	ldr	r6, [r4, #0]
 800ab80:	6961      	ldr	r1, [r4, #20]
 800ab82:	1d18      	adds	r0, r3, #4
 800ab84:	6028      	str	r0, [r5, #0]
 800ab86:	0635      	lsls	r5, r6, #24
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	d501      	bpl.n	800ab90 <_printf_i+0x1cc>
 800ab8c:	6019      	str	r1, [r3, #0]
 800ab8e:	e002      	b.n	800ab96 <_printf_i+0x1d2>
 800ab90:	0670      	lsls	r0, r6, #25
 800ab92:	d5fb      	bpl.n	800ab8c <_printf_i+0x1c8>
 800ab94:	8019      	strh	r1, [r3, #0]
 800ab96:	2300      	movs	r3, #0
 800ab98:	6123      	str	r3, [r4, #16]
 800ab9a:	4615      	mov	r5, r2
 800ab9c:	e7ba      	b.n	800ab14 <_printf_i+0x150>
 800ab9e:	682b      	ldr	r3, [r5, #0]
 800aba0:	1d1a      	adds	r2, r3, #4
 800aba2:	602a      	str	r2, [r5, #0]
 800aba4:	681d      	ldr	r5, [r3, #0]
 800aba6:	6862      	ldr	r2, [r4, #4]
 800aba8:	2100      	movs	r1, #0
 800abaa:	4628      	mov	r0, r5
 800abac:	f7f5 faf0 	bl	8000190 <memchr>
 800abb0:	b108      	cbz	r0, 800abb6 <_printf_i+0x1f2>
 800abb2:	1b40      	subs	r0, r0, r5
 800abb4:	6060      	str	r0, [r4, #4]
 800abb6:	6863      	ldr	r3, [r4, #4]
 800abb8:	6123      	str	r3, [r4, #16]
 800abba:	2300      	movs	r3, #0
 800abbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800abc0:	e7a8      	b.n	800ab14 <_printf_i+0x150>
 800abc2:	6923      	ldr	r3, [r4, #16]
 800abc4:	462a      	mov	r2, r5
 800abc6:	4649      	mov	r1, r9
 800abc8:	4640      	mov	r0, r8
 800abca:	47d0      	blx	sl
 800abcc:	3001      	adds	r0, #1
 800abce:	d0ab      	beq.n	800ab28 <_printf_i+0x164>
 800abd0:	6823      	ldr	r3, [r4, #0]
 800abd2:	079b      	lsls	r3, r3, #30
 800abd4:	d413      	bmi.n	800abfe <_printf_i+0x23a>
 800abd6:	68e0      	ldr	r0, [r4, #12]
 800abd8:	9b03      	ldr	r3, [sp, #12]
 800abda:	4298      	cmp	r0, r3
 800abdc:	bfb8      	it	lt
 800abde:	4618      	movlt	r0, r3
 800abe0:	e7a4      	b.n	800ab2c <_printf_i+0x168>
 800abe2:	2301      	movs	r3, #1
 800abe4:	4632      	mov	r2, r6
 800abe6:	4649      	mov	r1, r9
 800abe8:	4640      	mov	r0, r8
 800abea:	47d0      	blx	sl
 800abec:	3001      	adds	r0, #1
 800abee:	d09b      	beq.n	800ab28 <_printf_i+0x164>
 800abf0:	3501      	adds	r5, #1
 800abf2:	68e3      	ldr	r3, [r4, #12]
 800abf4:	9903      	ldr	r1, [sp, #12]
 800abf6:	1a5b      	subs	r3, r3, r1
 800abf8:	42ab      	cmp	r3, r5
 800abfa:	dcf2      	bgt.n	800abe2 <_printf_i+0x21e>
 800abfc:	e7eb      	b.n	800abd6 <_printf_i+0x212>
 800abfe:	2500      	movs	r5, #0
 800ac00:	f104 0619 	add.w	r6, r4, #25
 800ac04:	e7f5      	b.n	800abf2 <_printf_i+0x22e>
 800ac06:	bf00      	nop
 800ac08:	0800d89e 	.word	0x0800d89e
 800ac0c:	0800d8af 	.word	0x0800d8af

0800ac10 <cleanup_glue>:
 800ac10:	b538      	push	{r3, r4, r5, lr}
 800ac12:	460c      	mov	r4, r1
 800ac14:	6809      	ldr	r1, [r1, #0]
 800ac16:	4605      	mov	r5, r0
 800ac18:	b109      	cbz	r1, 800ac1e <cleanup_glue+0xe>
 800ac1a:	f7ff fff9 	bl	800ac10 <cleanup_glue>
 800ac1e:	4621      	mov	r1, r4
 800ac20:	4628      	mov	r0, r5
 800ac22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac26:	f001 bcb9 	b.w	800c59c <_free_r>
	...

0800ac2c <_reclaim_reent>:
 800ac2c:	4b2c      	ldr	r3, [pc, #176]	; (800ace0 <_reclaim_reent+0xb4>)
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	4283      	cmp	r3, r0
 800ac32:	b570      	push	{r4, r5, r6, lr}
 800ac34:	4604      	mov	r4, r0
 800ac36:	d051      	beq.n	800acdc <_reclaim_reent+0xb0>
 800ac38:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ac3a:	b143      	cbz	r3, 800ac4e <_reclaim_reent+0x22>
 800ac3c:	68db      	ldr	r3, [r3, #12]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d14a      	bne.n	800acd8 <_reclaim_reent+0xac>
 800ac42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac44:	6819      	ldr	r1, [r3, #0]
 800ac46:	b111      	cbz	r1, 800ac4e <_reclaim_reent+0x22>
 800ac48:	4620      	mov	r0, r4
 800ac4a:	f001 fca7 	bl	800c59c <_free_r>
 800ac4e:	6961      	ldr	r1, [r4, #20]
 800ac50:	b111      	cbz	r1, 800ac58 <_reclaim_reent+0x2c>
 800ac52:	4620      	mov	r0, r4
 800ac54:	f001 fca2 	bl	800c59c <_free_r>
 800ac58:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ac5a:	b111      	cbz	r1, 800ac62 <_reclaim_reent+0x36>
 800ac5c:	4620      	mov	r0, r4
 800ac5e:	f001 fc9d 	bl	800c59c <_free_r>
 800ac62:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ac64:	b111      	cbz	r1, 800ac6c <_reclaim_reent+0x40>
 800ac66:	4620      	mov	r0, r4
 800ac68:	f001 fc98 	bl	800c59c <_free_r>
 800ac6c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ac6e:	b111      	cbz	r1, 800ac76 <_reclaim_reent+0x4a>
 800ac70:	4620      	mov	r0, r4
 800ac72:	f001 fc93 	bl	800c59c <_free_r>
 800ac76:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ac78:	b111      	cbz	r1, 800ac80 <_reclaim_reent+0x54>
 800ac7a:	4620      	mov	r0, r4
 800ac7c:	f001 fc8e 	bl	800c59c <_free_r>
 800ac80:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ac82:	b111      	cbz	r1, 800ac8a <_reclaim_reent+0x5e>
 800ac84:	4620      	mov	r0, r4
 800ac86:	f001 fc89 	bl	800c59c <_free_r>
 800ac8a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800ac8c:	b111      	cbz	r1, 800ac94 <_reclaim_reent+0x68>
 800ac8e:	4620      	mov	r0, r4
 800ac90:	f001 fc84 	bl	800c59c <_free_r>
 800ac94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac96:	b111      	cbz	r1, 800ac9e <_reclaim_reent+0x72>
 800ac98:	4620      	mov	r0, r4
 800ac9a:	f001 fc7f 	bl	800c59c <_free_r>
 800ac9e:	69a3      	ldr	r3, [r4, #24]
 800aca0:	b1e3      	cbz	r3, 800acdc <_reclaim_reent+0xb0>
 800aca2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800aca4:	4620      	mov	r0, r4
 800aca6:	4798      	blx	r3
 800aca8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800acaa:	b1b9      	cbz	r1, 800acdc <_reclaim_reent+0xb0>
 800acac:	4620      	mov	r0, r4
 800acae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800acb2:	f7ff bfad 	b.w	800ac10 <cleanup_glue>
 800acb6:	5949      	ldr	r1, [r1, r5]
 800acb8:	b941      	cbnz	r1, 800accc <_reclaim_reent+0xa0>
 800acba:	3504      	adds	r5, #4
 800acbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800acbe:	2d80      	cmp	r5, #128	; 0x80
 800acc0:	68d9      	ldr	r1, [r3, #12]
 800acc2:	d1f8      	bne.n	800acb6 <_reclaim_reent+0x8a>
 800acc4:	4620      	mov	r0, r4
 800acc6:	f001 fc69 	bl	800c59c <_free_r>
 800acca:	e7ba      	b.n	800ac42 <_reclaim_reent+0x16>
 800accc:	680e      	ldr	r6, [r1, #0]
 800acce:	4620      	mov	r0, r4
 800acd0:	f001 fc64 	bl	800c59c <_free_r>
 800acd4:	4631      	mov	r1, r6
 800acd6:	e7ef      	b.n	800acb8 <_reclaim_reent+0x8c>
 800acd8:	2500      	movs	r5, #0
 800acda:	e7ef      	b.n	800acbc <_reclaim_reent+0x90>
 800acdc:	bd70      	pop	{r4, r5, r6, pc}
 800acde:	bf00      	nop
 800ace0:	20000010 	.word	0x20000010

0800ace4 <_sbrk_r>:
 800ace4:	b538      	push	{r3, r4, r5, lr}
 800ace6:	4d06      	ldr	r5, [pc, #24]	; (800ad00 <_sbrk_r+0x1c>)
 800ace8:	2300      	movs	r3, #0
 800acea:	4604      	mov	r4, r0
 800acec:	4608      	mov	r0, r1
 800acee:	602b      	str	r3, [r5, #0]
 800acf0:	f7f6 ffbe 	bl	8001c70 <_sbrk>
 800acf4:	1c43      	adds	r3, r0, #1
 800acf6:	d102      	bne.n	800acfe <_sbrk_r+0x1a>
 800acf8:	682b      	ldr	r3, [r5, #0]
 800acfa:	b103      	cbz	r3, 800acfe <_sbrk_r+0x1a>
 800acfc:	6023      	str	r3, [r4, #0]
 800acfe:	bd38      	pop	{r3, r4, r5, pc}
 800ad00:	20001c34 	.word	0x20001c34

0800ad04 <sniprintf>:
 800ad04:	b40c      	push	{r2, r3}
 800ad06:	b530      	push	{r4, r5, lr}
 800ad08:	4b17      	ldr	r3, [pc, #92]	; (800ad68 <sniprintf+0x64>)
 800ad0a:	1e0c      	subs	r4, r1, #0
 800ad0c:	681d      	ldr	r5, [r3, #0]
 800ad0e:	b09d      	sub	sp, #116	; 0x74
 800ad10:	da08      	bge.n	800ad24 <sniprintf+0x20>
 800ad12:	238b      	movs	r3, #139	; 0x8b
 800ad14:	602b      	str	r3, [r5, #0]
 800ad16:	f04f 30ff 	mov.w	r0, #4294967295
 800ad1a:	b01d      	add	sp, #116	; 0x74
 800ad1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ad20:	b002      	add	sp, #8
 800ad22:	4770      	bx	lr
 800ad24:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ad28:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ad2c:	bf14      	ite	ne
 800ad2e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ad32:	4623      	moveq	r3, r4
 800ad34:	9304      	str	r3, [sp, #16]
 800ad36:	9307      	str	r3, [sp, #28]
 800ad38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ad3c:	9002      	str	r0, [sp, #8]
 800ad3e:	9006      	str	r0, [sp, #24]
 800ad40:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ad44:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ad46:	ab21      	add	r3, sp, #132	; 0x84
 800ad48:	a902      	add	r1, sp, #8
 800ad4a:	4628      	mov	r0, r5
 800ad4c:	9301      	str	r3, [sp, #4]
 800ad4e:	f001 fccb 	bl	800c6e8 <_svfiprintf_r>
 800ad52:	1c43      	adds	r3, r0, #1
 800ad54:	bfbc      	itt	lt
 800ad56:	238b      	movlt	r3, #139	; 0x8b
 800ad58:	602b      	strlt	r3, [r5, #0]
 800ad5a:	2c00      	cmp	r4, #0
 800ad5c:	d0dd      	beq.n	800ad1a <sniprintf+0x16>
 800ad5e:	9b02      	ldr	r3, [sp, #8]
 800ad60:	2200      	movs	r2, #0
 800ad62:	701a      	strb	r2, [r3, #0]
 800ad64:	e7d9      	b.n	800ad1a <sniprintf+0x16>
 800ad66:	bf00      	nop
 800ad68:	20000010 	.word	0x20000010

0800ad6c <siprintf>:
 800ad6c:	b40e      	push	{r1, r2, r3}
 800ad6e:	b500      	push	{lr}
 800ad70:	b09c      	sub	sp, #112	; 0x70
 800ad72:	ab1d      	add	r3, sp, #116	; 0x74
 800ad74:	9002      	str	r0, [sp, #8]
 800ad76:	9006      	str	r0, [sp, #24]
 800ad78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ad7c:	4809      	ldr	r0, [pc, #36]	; (800ada4 <siprintf+0x38>)
 800ad7e:	9107      	str	r1, [sp, #28]
 800ad80:	9104      	str	r1, [sp, #16]
 800ad82:	4909      	ldr	r1, [pc, #36]	; (800ada8 <siprintf+0x3c>)
 800ad84:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad88:	9105      	str	r1, [sp, #20]
 800ad8a:	6800      	ldr	r0, [r0, #0]
 800ad8c:	9301      	str	r3, [sp, #4]
 800ad8e:	a902      	add	r1, sp, #8
 800ad90:	f001 fcaa 	bl	800c6e8 <_svfiprintf_r>
 800ad94:	9b02      	ldr	r3, [sp, #8]
 800ad96:	2200      	movs	r2, #0
 800ad98:	701a      	strb	r2, [r3, #0]
 800ad9a:	b01c      	add	sp, #112	; 0x70
 800ad9c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ada0:	b003      	add	sp, #12
 800ada2:	4770      	bx	lr
 800ada4:	20000010 	.word	0x20000010
 800ada8:	ffff0208 	.word	0xffff0208

0800adac <__sread>:
 800adac:	b510      	push	{r4, lr}
 800adae:	460c      	mov	r4, r1
 800adb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adb4:	f001 fef0 	bl	800cb98 <_read_r>
 800adb8:	2800      	cmp	r0, #0
 800adba:	bfab      	itete	ge
 800adbc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800adbe:	89a3      	ldrhlt	r3, [r4, #12]
 800adc0:	181b      	addge	r3, r3, r0
 800adc2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800adc6:	bfac      	ite	ge
 800adc8:	6563      	strge	r3, [r4, #84]	; 0x54
 800adca:	81a3      	strhlt	r3, [r4, #12]
 800adcc:	bd10      	pop	{r4, pc}

0800adce <__swrite>:
 800adce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800add2:	461f      	mov	r7, r3
 800add4:	898b      	ldrh	r3, [r1, #12]
 800add6:	05db      	lsls	r3, r3, #23
 800add8:	4605      	mov	r5, r0
 800adda:	460c      	mov	r4, r1
 800addc:	4616      	mov	r6, r2
 800adde:	d505      	bpl.n	800adec <__swrite+0x1e>
 800ade0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ade4:	2302      	movs	r3, #2
 800ade6:	2200      	movs	r2, #0
 800ade8:	f001 f820 	bl	800be2c <_lseek_r>
 800adec:	89a3      	ldrh	r3, [r4, #12]
 800adee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800adf2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800adf6:	81a3      	strh	r3, [r4, #12]
 800adf8:	4632      	mov	r2, r6
 800adfa:	463b      	mov	r3, r7
 800adfc:	4628      	mov	r0, r5
 800adfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae02:	f000 b887 	b.w	800af14 <_write_r>

0800ae06 <__sseek>:
 800ae06:	b510      	push	{r4, lr}
 800ae08:	460c      	mov	r4, r1
 800ae0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae0e:	f001 f80d 	bl	800be2c <_lseek_r>
 800ae12:	1c43      	adds	r3, r0, #1
 800ae14:	89a3      	ldrh	r3, [r4, #12]
 800ae16:	bf15      	itete	ne
 800ae18:	6560      	strne	r0, [r4, #84]	; 0x54
 800ae1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ae1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ae22:	81a3      	strheq	r3, [r4, #12]
 800ae24:	bf18      	it	ne
 800ae26:	81a3      	strhne	r3, [r4, #12]
 800ae28:	bd10      	pop	{r4, pc}

0800ae2a <__sclose>:
 800ae2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae2e:	f000 b8a1 	b.w	800af74 <_close_r>

0800ae32 <strncmp>:
 800ae32:	b510      	push	{r4, lr}
 800ae34:	4603      	mov	r3, r0
 800ae36:	b172      	cbz	r2, 800ae56 <strncmp+0x24>
 800ae38:	3901      	subs	r1, #1
 800ae3a:	1884      	adds	r4, r0, r2
 800ae3c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ae40:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ae44:	4290      	cmp	r0, r2
 800ae46:	d101      	bne.n	800ae4c <strncmp+0x1a>
 800ae48:	42a3      	cmp	r3, r4
 800ae4a:	d101      	bne.n	800ae50 <strncmp+0x1e>
 800ae4c:	1a80      	subs	r0, r0, r2
 800ae4e:	bd10      	pop	{r4, pc}
 800ae50:	2800      	cmp	r0, #0
 800ae52:	d1f3      	bne.n	800ae3c <strncmp+0xa>
 800ae54:	e7fa      	b.n	800ae4c <strncmp+0x1a>
 800ae56:	4610      	mov	r0, r2
 800ae58:	e7f9      	b.n	800ae4e <strncmp+0x1c>
	...

0800ae5c <strtok>:
 800ae5c:	4b16      	ldr	r3, [pc, #88]	; (800aeb8 <strtok+0x5c>)
 800ae5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae62:	681f      	ldr	r7, [r3, #0]
 800ae64:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800ae66:	4605      	mov	r5, r0
 800ae68:	460e      	mov	r6, r1
 800ae6a:	b9ec      	cbnz	r4, 800aea8 <strtok+0x4c>
 800ae6c:	2050      	movs	r0, #80	; 0x50
 800ae6e:	f000 ffef 	bl	800be50 <malloc>
 800ae72:	4602      	mov	r2, r0
 800ae74:	65b8      	str	r0, [r7, #88]	; 0x58
 800ae76:	b920      	cbnz	r0, 800ae82 <strtok+0x26>
 800ae78:	4b10      	ldr	r3, [pc, #64]	; (800aebc <strtok+0x60>)
 800ae7a:	4811      	ldr	r0, [pc, #68]	; (800aec0 <strtok+0x64>)
 800ae7c:	2157      	movs	r1, #87	; 0x57
 800ae7e:	f000 f85b 	bl	800af38 <__assert_func>
 800ae82:	e9c0 4400 	strd	r4, r4, [r0]
 800ae86:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800ae8a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800ae8e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800ae92:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800ae96:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800ae9a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800ae9e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800aea2:	6184      	str	r4, [r0, #24]
 800aea4:	7704      	strb	r4, [r0, #28]
 800aea6:	6244      	str	r4, [r0, #36]	; 0x24
 800aea8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aeaa:	4631      	mov	r1, r6
 800aeac:	4628      	mov	r0, r5
 800aeae:	2301      	movs	r3, #1
 800aeb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aeb4:	f000 b806 	b.w	800aec4 <__strtok_r>
 800aeb8:	20000010 	.word	0x20000010
 800aebc:	0800d8c0 	.word	0x0800d8c0
 800aec0:	0800d8d7 	.word	0x0800d8d7

0800aec4 <__strtok_r>:
 800aec4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aec6:	b908      	cbnz	r0, 800aecc <__strtok_r+0x8>
 800aec8:	6810      	ldr	r0, [r2, #0]
 800aeca:	b188      	cbz	r0, 800aef0 <__strtok_r+0x2c>
 800aecc:	4604      	mov	r4, r0
 800aece:	4620      	mov	r0, r4
 800aed0:	f814 5b01 	ldrb.w	r5, [r4], #1
 800aed4:	460f      	mov	r7, r1
 800aed6:	f817 6b01 	ldrb.w	r6, [r7], #1
 800aeda:	b91e      	cbnz	r6, 800aee4 <__strtok_r+0x20>
 800aedc:	b965      	cbnz	r5, 800aef8 <__strtok_r+0x34>
 800aede:	6015      	str	r5, [r2, #0]
 800aee0:	4628      	mov	r0, r5
 800aee2:	e005      	b.n	800aef0 <__strtok_r+0x2c>
 800aee4:	42b5      	cmp	r5, r6
 800aee6:	d1f6      	bne.n	800aed6 <__strtok_r+0x12>
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d1f0      	bne.n	800aece <__strtok_r+0xa>
 800aeec:	6014      	str	r4, [r2, #0]
 800aeee:	7003      	strb	r3, [r0, #0]
 800aef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aef2:	461c      	mov	r4, r3
 800aef4:	e00c      	b.n	800af10 <__strtok_r+0x4c>
 800aef6:	b915      	cbnz	r5, 800aefe <__strtok_r+0x3a>
 800aef8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800aefc:	460e      	mov	r6, r1
 800aefe:	f816 5b01 	ldrb.w	r5, [r6], #1
 800af02:	42ab      	cmp	r3, r5
 800af04:	d1f7      	bne.n	800aef6 <__strtok_r+0x32>
 800af06:	2b00      	cmp	r3, #0
 800af08:	d0f3      	beq.n	800aef2 <__strtok_r+0x2e>
 800af0a:	2300      	movs	r3, #0
 800af0c:	f804 3c01 	strb.w	r3, [r4, #-1]
 800af10:	6014      	str	r4, [r2, #0]
 800af12:	e7ed      	b.n	800aef0 <__strtok_r+0x2c>

0800af14 <_write_r>:
 800af14:	b538      	push	{r3, r4, r5, lr}
 800af16:	4d07      	ldr	r5, [pc, #28]	; (800af34 <_write_r+0x20>)
 800af18:	4604      	mov	r4, r0
 800af1a:	4608      	mov	r0, r1
 800af1c:	4611      	mov	r1, r2
 800af1e:	2200      	movs	r2, #0
 800af20:	602a      	str	r2, [r5, #0]
 800af22:	461a      	mov	r2, r3
 800af24:	f7f6 fe58 	bl	8001bd8 <_write>
 800af28:	1c43      	adds	r3, r0, #1
 800af2a:	d102      	bne.n	800af32 <_write_r+0x1e>
 800af2c:	682b      	ldr	r3, [r5, #0]
 800af2e:	b103      	cbz	r3, 800af32 <_write_r+0x1e>
 800af30:	6023      	str	r3, [r4, #0]
 800af32:	bd38      	pop	{r3, r4, r5, pc}
 800af34:	20001c34 	.word	0x20001c34

0800af38 <__assert_func>:
 800af38:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800af3a:	4614      	mov	r4, r2
 800af3c:	461a      	mov	r2, r3
 800af3e:	4b09      	ldr	r3, [pc, #36]	; (800af64 <__assert_func+0x2c>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	4605      	mov	r5, r0
 800af44:	68d8      	ldr	r0, [r3, #12]
 800af46:	b14c      	cbz	r4, 800af5c <__assert_func+0x24>
 800af48:	4b07      	ldr	r3, [pc, #28]	; (800af68 <__assert_func+0x30>)
 800af4a:	9100      	str	r1, [sp, #0]
 800af4c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800af50:	4906      	ldr	r1, [pc, #24]	; (800af6c <__assert_func+0x34>)
 800af52:	462b      	mov	r3, r5
 800af54:	f000 ff54 	bl	800be00 <fiprintf>
 800af58:	f001 fef0 	bl	800cd3c <abort>
 800af5c:	4b04      	ldr	r3, [pc, #16]	; (800af70 <__assert_func+0x38>)
 800af5e:	461c      	mov	r4, r3
 800af60:	e7f3      	b.n	800af4a <__assert_func+0x12>
 800af62:	bf00      	nop
 800af64:	20000010 	.word	0x20000010
 800af68:	0800d934 	.word	0x0800d934
 800af6c:	0800d941 	.word	0x0800d941
 800af70:	0800d96f 	.word	0x0800d96f

0800af74 <_close_r>:
 800af74:	b538      	push	{r3, r4, r5, lr}
 800af76:	4d06      	ldr	r5, [pc, #24]	; (800af90 <_close_r+0x1c>)
 800af78:	2300      	movs	r3, #0
 800af7a:	4604      	mov	r4, r0
 800af7c:	4608      	mov	r0, r1
 800af7e:	602b      	str	r3, [r5, #0]
 800af80:	f7f6 fe46 	bl	8001c10 <_close>
 800af84:	1c43      	adds	r3, r0, #1
 800af86:	d102      	bne.n	800af8e <_close_r+0x1a>
 800af88:	682b      	ldr	r3, [r5, #0]
 800af8a:	b103      	cbz	r3, 800af8e <_close_r+0x1a>
 800af8c:	6023      	str	r3, [r4, #0]
 800af8e:	bd38      	pop	{r3, r4, r5, pc}
 800af90:	20001c34 	.word	0x20001c34

0800af94 <quorem>:
 800af94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af98:	6903      	ldr	r3, [r0, #16]
 800af9a:	690c      	ldr	r4, [r1, #16]
 800af9c:	42a3      	cmp	r3, r4
 800af9e:	4607      	mov	r7, r0
 800afa0:	db7d      	blt.n	800b09e <quorem+0x10a>
 800afa2:	3c01      	subs	r4, #1
 800afa4:	f101 0814 	add.w	r8, r1, #20
 800afa8:	f100 0514 	add.w	r5, r0, #20
 800afac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800afb0:	9301      	str	r3, [sp, #4]
 800afb2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800afb6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800afba:	3301      	adds	r3, #1
 800afbc:	429a      	cmp	r2, r3
 800afbe:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800afc2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800afc6:	fbb2 f6f3 	udiv	r6, r2, r3
 800afca:	d32e      	bcc.n	800b02a <quorem+0x96>
 800afcc:	f04f 0e00 	mov.w	lr, #0
 800afd0:	4640      	mov	r0, r8
 800afd2:	46ac      	mov	ip, r5
 800afd4:	46f2      	mov	sl, lr
 800afd6:	f850 2b04 	ldr.w	r2, [r0], #4
 800afda:	b293      	uxth	r3, r2
 800afdc:	fb06 e303 	mla	r3, r6, r3, lr
 800afe0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800afe4:	0c12      	lsrs	r2, r2, #16
 800afe6:	b29b      	uxth	r3, r3
 800afe8:	fb06 e202 	mla	r2, r6, r2, lr
 800afec:	ebaa 0303 	sub.w	r3, sl, r3
 800aff0:	f8dc a000 	ldr.w	sl, [ip]
 800aff4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800aff8:	b292      	uxth	r2, r2
 800affa:	fa13 f38a 	uxtah	r3, r3, sl
 800affe:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b002:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b006:	b29b      	uxth	r3, r3
 800b008:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b00c:	4581      	cmp	r9, r0
 800b00e:	f84c 3b04 	str.w	r3, [ip], #4
 800b012:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b016:	d2de      	bcs.n	800afd6 <quorem+0x42>
 800b018:	f855 300b 	ldr.w	r3, [r5, fp]
 800b01c:	b92b      	cbnz	r3, 800b02a <quorem+0x96>
 800b01e:	9b01      	ldr	r3, [sp, #4]
 800b020:	3b04      	subs	r3, #4
 800b022:	429d      	cmp	r5, r3
 800b024:	461a      	mov	r2, r3
 800b026:	d32e      	bcc.n	800b086 <quorem+0xf2>
 800b028:	613c      	str	r4, [r7, #16]
 800b02a:	4638      	mov	r0, r7
 800b02c:	f001 f9a2 	bl	800c374 <__mcmp>
 800b030:	2800      	cmp	r0, #0
 800b032:	db24      	blt.n	800b07e <quorem+0xea>
 800b034:	3601      	adds	r6, #1
 800b036:	4628      	mov	r0, r5
 800b038:	f04f 0c00 	mov.w	ip, #0
 800b03c:	f858 2b04 	ldr.w	r2, [r8], #4
 800b040:	f8d0 e000 	ldr.w	lr, [r0]
 800b044:	b293      	uxth	r3, r2
 800b046:	ebac 0303 	sub.w	r3, ip, r3
 800b04a:	0c12      	lsrs	r2, r2, #16
 800b04c:	fa13 f38e 	uxtah	r3, r3, lr
 800b050:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b054:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b058:	b29b      	uxth	r3, r3
 800b05a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b05e:	45c1      	cmp	r9, r8
 800b060:	f840 3b04 	str.w	r3, [r0], #4
 800b064:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b068:	d2e8      	bcs.n	800b03c <quorem+0xa8>
 800b06a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b06e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b072:	b922      	cbnz	r2, 800b07e <quorem+0xea>
 800b074:	3b04      	subs	r3, #4
 800b076:	429d      	cmp	r5, r3
 800b078:	461a      	mov	r2, r3
 800b07a:	d30a      	bcc.n	800b092 <quorem+0xfe>
 800b07c:	613c      	str	r4, [r7, #16]
 800b07e:	4630      	mov	r0, r6
 800b080:	b003      	add	sp, #12
 800b082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b086:	6812      	ldr	r2, [r2, #0]
 800b088:	3b04      	subs	r3, #4
 800b08a:	2a00      	cmp	r2, #0
 800b08c:	d1cc      	bne.n	800b028 <quorem+0x94>
 800b08e:	3c01      	subs	r4, #1
 800b090:	e7c7      	b.n	800b022 <quorem+0x8e>
 800b092:	6812      	ldr	r2, [r2, #0]
 800b094:	3b04      	subs	r3, #4
 800b096:	2a00      	cmp	r2, #0
 800b098:	d1f0      	bne.n	800b07c <quorem+0xe8>
 800b09a:	3c01      	subs	r4, #1
 800b09c:	e7eb      	b.n	800b076 <quorem+0xe2>
 800b09e:	2000      	movs	r0, #0
 800b0a0:	e7ee      	b.n	800b080 <quorem+0xec>
 800b0a2:	0000      	movs	r0, r0
 800b0a4:	0000      	movs	r0, r0
	...

0800b0a8 <_dtoa_r>:
 800b0a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0ac:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b0ae:	b099      	sub	sp, #100	; 0x64
 800b0b0:	4616      	mov	r6, r2
 800b0b2:	461f      	mov	r7, r3
 800b0b4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b0b8:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800b0bc:	4605      	mov	r5, r0
 800b0be:	b974      	cbnz	r4, 800b0de <_dtoa_r+0x36>
 800b0c0:	2010      	movs	r0, #16
 800b0c2:	f000 fec5 	bl	800be50 <malloc>
 800b0c6:	4602      	mov	r2, r0
 800b0c8:	6268      	str	r0, [r5, #36]	; 0x24
 800b0ca:	b920      	cbnz	r0, 800b0d6 <_dtoa_r+0x2e>
 800b0cc:	4ba8      	ldr	r3, [pc, #672]	; (800b370 <_dtoa_r+0x2c8>)
 800b0ce:	21ea      	movs	r1, #234	; 0xea
 800b0d0:	48a8      	ldr	r0, [pc, #672]	; (800b374 <_dtoa_r+0x2cc>)
 800b0d2:	f7ff ff31 	bl	800af38 <__assert_func>
 800b0d6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b0da:	6004      	str	r4, [r0, #0]
 800b0dc:	60c4      	str	r4, [r0, #12]
 800b0de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b0e0:	6819      	ldr	r1, [r3, #0]
 800b0e2:	b151      	cbz	r1, 800b0fa <_dtoa_r+0x52>
 800b0e4:	685a      	ldr	r2, [r3, #4]
 800b0e6:	604a      	str	r2, [r1, #4]
 800b0e8:	2301      	movs	r3, #1
 800b0ea:	4093      	lsls	r3, r2
 800b0ec:	608b      	str	r3, [r1, #8]
 800b0ee:	4628      	mov	r0, r5
 800b0f0:	f000 ff02 	bl	800bef8 <_Bfree>
 800b0f4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	601a      	str	r2, [r3, #0]
 800b0fa:	1e3b      	subs	r3, r7, #0
 800b0fc:	bfb9      	ittee	lt
 800b0fe:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b102:	9305      	strlt	r3, [sp, #20]
 800b104:	2300      	movge	r3, #0
 800b106:	f8c8 3000 	strge.w	r3, [r8]
 800b10a:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800b10e:	4b9a      	ldr	r3, [pc, #616]	; (800b378 <_dtoa_r+0x2d0>)
 800b110:	bfbc      	itt	lt
 800b112:	2201      	movlt	r2, #1
 800b114:	f8c8 2000 	strlt.w	r2, [r8]
 800b118:	ea33 0309 	bics.w	r3, r3, r9
 800b11c:	d119      	bne.n	800b152 <_dtoa_r+0xaa>
 800b11e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b120:	f242 730f 	movw	r3, #9999	; 0x270f
 800b124:	6013      	str	r3, [r2, #0]
 800b126:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b12a:	4333      	orrs	r3, r6
 800b12c:	f000 8580 	beq.w	800bc30 <_dtoa_r+0xb88>
 800b130:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b132:	b953      	cbnz	r3, 800b14a <_dtoa_r+0xa2>
 800b134:	4b91      	ldr	r3, [pc, #580]	; (800b37c <_dtoa_r+0x2d4>)
 800b136:	e022      	b.n	800b17e <_dtoa_r+0xd6>
 800b138:	4b91      	ldr	r3, [pc, #580]	; (800b380 <_dtoa_r+0x2d8>)
 800b13a:	9303      	str	r3, [sp, #12]
 800b13c:	3308      	adds	r3, #8
 800b13e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b140:	6013      	str	r3, [r2, #0]
 800b142:	9803      	ldr	r0, [sp, #12]
 800b144:	b019      	add	sp, #100	; 0x64
 800b146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b14a:	4b8c      	ldr	r3, [pc, #560]	; (800b37c <_dtoa_r+0x2d4>)
 800b14c:	9303      	str	r3, [sp, #12]
 800b14e:	3303      	adds	r3, #3
 800b150:	e7f5      	b.n	800b13e <_dtoa_r+0x96>
 800b152:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b156:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800b15a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b15e:	2200      	movs	r2, #0
 800b160:	2300      	movs	r3, #0
 800b162:	f7f5 fc89 	bl	8000a78 <__aeabi_dcmpeq>
 800b166:	4680      	mov	r8, r0
 800b168:	b158      	cbz	r0, 800b182 <_dtoa_r+0xda>
 800b16a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b16c:	2301      	movs	r3, #1
 800b16e:	6013      	str	r3, [r2, #0]
 800b170:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b172:	2b00      	cmp	r3, #0
 800b174:	f000 8559 	beq.w	800bc2a <_dtoa_r+0xb82>
 800b178:	4882      	ldr	r0, [pc, #520]	; (800b384 <_dtoa_r+0x2dc>)
 800b17a:	6018      	str	r0, [r3, #0]
 800b17c:	1e43      	subs	r3, r0, #1
 800b17e:	9303      	str	r3, [sp, #12]
 800b180:	e7df      	b.n	800b142 <_dtoa_r+0x9a>
 800b182:	ab16      	add	r3, sp, #88	; 0x58
 800b184:	9301      	str	r3, [sp, #4]
 800b186:	ab17      	add	r3, sp, #92	; 0x5c
 800b188:	9300      	str	r3, [sp, #0]
 800b18a:	4628      	mov	r0, r5
 800b18c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b190:	f001 f994 	bl	800c4bc <__d2b>
 800b194:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b198:	4683      	mov	fp, r0
 800b19a:	2c00      	cmp	r4, #0
 800b19c:	d07e      	beq.n	800b29c <_dtoa_r+0x1f4>
 800b19e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b1a0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800b1a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b1a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b1ac:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800b1b0:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800b1b4:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800b1b8:	4b73      	ldr	r3, [pc, #460]	; (800b388 <_dtoa_r+0x2e0>)
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	f7f5 f83c 	bl	8000238 <__aeabi_dsub>
 800b1c0:	a365      	add	r3, pc, #404	; (adr r3, 800b358 <_dtoa_r+0x2b0>)
 800b1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1c6:	f7f5 f9ef 	bl	80005a8 <__aeabi_dmul>
 800b1ca:	a365      	add	r3, pc, #404	; (adr r3, 800b360 <_dtoa_r+0x2b8>)
 800b1cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1d0:	f7f5 f834 	bl	800023c <__adddf3>
 800b1d4:	4606      	mov	r6, r0
 800b1d6:	4620      	mov	r0, r4
 800b1d8:	460f      	mov	r7, r1
 800b1da:	f7f5 f97b 	bl	80004d4 <__aeabi_i2d>
 800b1de:	a362      	add	r3, pc, #392	; (adr r3, 800b368 <_dtoa_r+0x2c0>)
 800b1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1e4:	f7f5 f9e0 	bl	80005a8 <__aeabi_dmul>
 800b1e8:	4602      	mov	r2, r0
 800b1ea:	460b      	mov	r3, r1
 800b1ec:	4630      	mov	r0, r6
 800b1ee:	4639      	mov	r1, r7
 800b1f0:	f7f5 f824 	bl	800023c <__adddf3>
 800b1f4:	4606      	mov	r6, r0
 800b1f6:	460f      	mov	r7, r1
 800b1f8:	f7f5 fc86 	bl	8000b08 <__aeabi_d2iz>
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	4682      	mov	sl, r0
 800b200:	2300      	movs	r3, #0
 800b202:	4630      	mov	r0, r6
 800b204:	4639      	mov	r1, r7
 800b206:	f7f5 fc41 	bl	8000a8c <__aeabi_dcmplt>
 800b20a:	b148      	cbz	r0, 800b220 <_dtoa_r+0x178>
 800b20c:	4650      	mov	r0, sl
 800b20e:	f7f5 f961 	bl	80004d4 <__aeabi_i2d>
 800b212:	4632      	mov	r2, r6
 800b214:	463b      	mov	r3, r7
 800b216:	f7f5 fc2f 	bl	8000a78 <__aeabi_dcmpeq>
 800b21a:	b908      	cbnz	r0, 800b220 <_dtoa_r+0x178>
 800b21c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b220:	f1ba 0f16 	cmp.w	sl, #22
 800b224:	d857      	bhi.n	800b2d6 <_dtoa_r+0x22e>
 800b226:	4b59      	ldr	r3, [pc, #356]	; (800b38c <_dtoa_r+0x2e4>)
 800b228:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b22c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b230:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b234:	f7f5 fc2a 	bl	8000a8c <__aeabi_dcmplt>
 800b238:	2800      	cmp	r0, #0
 800b23a:	d04e      	beq.n	800b2da <_dtoa_r+0x232>
 800b23c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b240:	2300      	movs	r3, #0
 800b242:	930f      	str	r3, [sp, #60]	; 0x3c
 800b244:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b246:	1b1c      	subs	r4, r3, r4
 800b248:	1e63      	subs	r3, r4, #1
 800b24a:	9309      	str	r3, [sp, #36]	; 0x24
 800b24c:	bf45      	ittet	mi
 800b24e:	f1c4 0301 	rsbmi	r3, r4, #1
 800b252:	9306      	strmi	r3, [sp, #24]
 800b254:	2300      	movpl	r3, #0
 800b256:	2300      	movmi	r3, #0
 800b258:	bf4c      	ite	mi
 800b25a:	9309      	strmi	r3, [sp, #36]	; 0x24
 800b25c:	9306      	strpl	r3, [sp, #24]
 800b25e:	f1ba 0f00 	cmp.w	sl, #0
 800b262:	db3c      	blt.n	800b2de <_dtoa_r+0x236>
 800b264:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b266:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800b26a:	4453      	add	r3, sl
 800b26c:	9309      	str	r3, [sp, #36]	; 0x24
 800b26e:	2300      	movs	r3, #0
 800b270:	930a      	str	r3, [sp, #40]	; 0x28
 800b272:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b274:	2b09      	cmp	r3, #9
 800b276:	f200 808d 	bhi.w	800b394 <_dtoa_r+0x2ec>
 800b27a:	2b05      	cmp	r3, #5
 800b27c:	bfc4      	itt	gt
 800b27e:	3b04      	subgt	r3, #4
 800b280:	9322      	strgt	r3, [sp, #136]	; 0x88
 800b282:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b284:	f1a3 0302 	sub.w	r3, r3, #2
 800b288:	bfcc      	ite	gt
 800b28a:	2400      	movgt	r4, #0
 800b28c:	2401      	movle	r4, #1
 800b28e:	2b03      	cmp	r3, #3
 800b290:	f200 808c 	bhi.w	800b3ac <_dtoa_r+0x304>
 800b294:	e8df f003 	tbb	[pc, r3]
 800b298:	5b4d4f2d 	.word	0x5b4d4f2d
 800b29c:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800b2a0:	441c      	add	r4, r3
 800b2a2:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800b2a6:	2b20      	cmp	r3, #32
 800b2a8:	bfc3      	ittte	gt
 800b2aa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b2ae:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800b2b2:	fa09 f303 	lslgt.w	r3, r9, r3
 800b2b6:	f1c3 0320 	rsble	r3, r3, #32
 800b2ba:	bfc6      	itte	gt
 800b2bc:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b2c0:	4318      	orrgt	r0, r3
 800b2c2:	fa06 f003 	lslle.w	r0, r6, r3
 800b2c6:	f7f5 f8f5 	bl	80004b4 <__aeabi_ui2d>
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800b2d0:	3c01      	subs	r4, #1
 800b2d2:	9313      	str	r3, [sp, #76]	; 0x4c
 800b2d4:	e770      	b.n	800b1b8 <_dtoa_r+0x110>
 800b2d6:	2301      	movs	r3, #1
 800b2d8:	e7b3      	b.n	800b242 <_dtoa_r+0x19a>
 800b2da:	900f      	str	r0, [sp, #60]	; 0x3c
 800b2dc:	e7b2      	b.n	800b244 <_dtoa_r+0x19c>
 800b2de:	9b06      	ldr	r3, [sp, #24]
 800b2e0:	eba3 030a 	sub.w	r3, r3, sl
 800b2e4:	9306      	str	r3, [sp, #24]
 800b2e6:	f1ca 0300 	rsb	r3, sl, #0
 800b2ea:	930a      	str	r3, [sp, #40]	; 0x28
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	930e      	str	r3, [sp, #56]	; 0x38
 800b2f0:	e7bf      	b.n	800b272 <_dtoa_r+0x1ca>
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	930b      	str	r3, [sp, #44]	; 0x2c
 800b2f6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	dc5a      	bgt.n	800b3b2 <_dtoa_r+0x30a>
 800b2fc:	f04f 0901 	mov.w	r9, #1
 800b300:	f8cd 9020 	str.w	r9, [sp, #32]
 800b304:	464b      	mov	r3, r9
 800b306:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800b30a:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800b30c:	2200      	movs	r2, #0
 800b30e:	6042      	str	r2, [r0, #4]
 800b310:	2204      	movs	r2, #4
 800b312:	f102 0614 	add.w	r6, r2, #20
 800b316:	429e      	cmp	r6, r3
 800b318:	6841      	ldr	r1, [r0, #4]
 800b31a:	d950      	bls.n	800b3be <_dtoa_r+0x316>
 800b31c:	4628      	mov	r0, r5
 800b31e:	f000 fdab 	bl	800be78 <_Balloc>
 800b322:	9003      	str	r0, [sp, #12]
 800b324:	2800      	cmp	r0, #0
 800b326:	d14e      	bne.n	800b3c6 <_dtoa_r+0x31e>
 800b328:	4b19      	ldr	r3, [pc, #100]	; (800b390 <_dtoa_r+0x2e8>)
 800b32a:	4602      	mov	r2, r0
 800b32c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b330:	e6ce      	b.n	800b0d0 <_dtoa_r+0x28>
 800b332:	2301      	movs	r3, #1
 800b334:	e7de      	b.n	800b2f4 <_dtoa_r+0x24c>
 800b336:	2300      	movs	r3, #0
 800b338:	930b      	str	r3, [sp, #44]	; 0x2c
 800b33a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b33c:	eb0a 0903 	add.w	r9, sl, r3
 800b340:	f109 0301 	add.w	r3, r9, #1
 800b344:	2b01      	cmp	r3, #1
 800b346:	9308      	str	r3, [sp, #32]
 800b348:	bfb8      	it	lt
 800b34a:	2301      	movlt	r3, #1
 800b34c:	e7dd      	b.n	800b30a <_dtoa_r+0x262>
 800b34e:	2301      	movs	r3, #1
 800b350:	e7f2      	b.n	800b338 <_dtoa_r+0x290>
 800b352:	bf00      	nop
 800b354:	f3af 8000 	nop.w
 800b358:	636f4361 	.word	0x636f4361
 800b35c:	3fd287a7 	.word	0x3fd287a7
 800b360:	8b60c8b3 	.word	0x8b60c8b3
 800b364:	3fc68a28 	.word	0x3fc68a28
 800b368:	509f79fb 	.word	0x509f79fb
 800b36c:	3fd34413 	.word	0x3fd34413
 800b370:	0800d8c0 	.word	0x0800d8c0
 800b374:	0800d97d 	.word	0x0800d97d
 800b378:	7ff00000 	.word	0x7ff00000
 800b37c:	0800d979 	.word	0x0800d979
 800b380:	0800d970 	.word	0x0800d970
 800b384:	0800d89d 	.word	0x0800d89d
 800b388:	3ff80000 	.word	0x3ff80000
 800b38c:	0800da70 	.word	0x0800da70
 800b390:	0800d9d8 	.word	0x0800d9d8
 800b394:	2401      	movs	r4, #1
 800b396:	2300      	movs	r3, #0
 800b398:	9322      	str	r3, [sp, #136]	; 0x88
 800b39a:	940b      	str	r4, [sp, #44]	; 0x2c
 800b39c:	f04f 39ff 	mov.w	r9, #4294967295
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	f8cd 9020 	str.w	r9, [sp, #32]
 800b3a6:	2312      	movs	r3, #18
 800b3a8:	9223      	str	r2, [sp, #140]	; 0x8c
 800b3aa:	e7ae      	b.n	800b30a <_dtoa_r+0x262>
 800b3ac:	2301      	movs	r3, #1
 800b3ae:	930b      	str	r3, [sp, #44]	; 0x2c
 800b3b0:	e7f4      	b.n	800b39c <_dtoa_r+0x2f4>
 800b3b2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800b3b6:	f8cd 9020 	str.w	r9, [sp, #32]
 800b3ba:	464b      	mov	r3, r9
 800b3bc:	e7a5      	b.n	800b30a <_dtoa_r+0x262>
 800b3be:	3101      	adds	r1, #1
 800b3c0:	6041      	str	r1, [r0, #4]
 800b3c2:	0052      	lsls	r2, r2, #1
 800b3c4:	e7a5      	b.n	800b312 <_dtoa_r+0x26a>
 800b3c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b3c8:	9a03      	ldr	r2, [sp, #12]
 800b3ca:	601a      	str	r2, [r3, #0]
 800b3cc:	9b08      	ldr	r3, [sp, #32]
 800b3ce:	2b0e      	cmp	r3, #14
 800b3d0:	f200 80a8 	bhi.w	800b524 <_dtoa_r+0x47c>
 800b3d4:	2c00      	cmp	r4, #0
 800b3d6:	f000 80a5 	beq.w	800b524 <_dtoa_r+0x47c>
 800b3da:	f1ba 0f00 	cmp.w	sl, #0
 800b3de:	dd34      	ble.n	800b44a <_dtoa_r+0x3a2>
 800b3e0:	4a9a      	ldr	r2, [pc, #616]	; (800b64c <_dtoa_r+0x5a4>)
 800b3e2:	f00a 030f 	and.w	r3, sl, #15
 800b3e6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b3ea:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b3ee:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800b3f2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800b3f6:	ea4f 142a 	mov.w	r4, sl, asr #4
 800b3fa:	d016      	beq.n	800b42a <_dtoa_r+0x382>
 800b3fc:	4b94      	ldr	r3, [pc, #592]	; (800b650 <_dtoa_r+0x5a8>)
 800b3fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b402:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b406:	f7f5 f9f9 	bl	80007fc <__aeabi_ddiv>
 800b40a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b40e:	f004 040f 	and.w	r4, r4, #15
 800b412:	2703      	movs	r7, #3
 800b414:	4e8e      	ldr	r6, [pc, #568]	; (800b650 <_dtoa_r+0x5a8>)
 800b416:	b954      	cbnz	r4, 800b42e <_dtoa_r+0x386>
 800b418:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b41c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b420:	f7f5 f9ec 	bl	80007fc <__aeabi_ddiv>
 800b424:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b428:	e029      	b.n	800b47e <_dtoa_r+0x3d6>
 800b42a:	2702      	movs	r7, #2
 800b42c:	e7f2      	b.n	800b414 <_dtoa_r+0x36c>
 800b42e:	07e1      	lsls	r1, r4, #31
 800b430:	d508      	bpl.n	800b444 <_dtoa_r+0x39c>
 800b432:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b436:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b43a:	f7f5 f8b5 	bl	80005a8 <__aeabi_dmul>
 800b43e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b442:	3701      	adds	r7, #1
 800b444:	1064      	asrs	r4, r4, #1
 800b446:	3608      	adds	r6, #8
 800b448:	e7e5      	b.n	800b416 <_dtoa_r+0x36e>
 800b44a:	f000 80a5 	beq.w	800b598 <_dtoa_r+0x4f0>
 800b44e:	f1ca 0400 	rsb	r4, sl, #0
 800b452:	4b7e      	ldr	r3, [pc, #504]	; (800b64c <_dtoa_r+0x5a4>)
 800b454:	4e7e      	ldr	r6, [pc, #504]	; (800b650 <_dtoa_r+0x5a8>)
 800b456:	f004 020f 	and.w	r2, r4, #15
 800b45a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b45e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b462:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b466:	f7f5 f89f 	bl	80005a8 <__aeabi_dmul>
 800b46a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b46e:	1124      	asrs	r4, r4, #4
 800b470:	2300      	movs	r3, #0
 800b472:	2702      	movs	r7, #2
 800b474:	2c00      	cmp	r4, #0
 800b476:	f040 8084 	bne.w	800b582 <_dtoa_r+0x4da>
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d1d2      	bne.n	800b424 <_dtoa_r+0x37c>
 800b47e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b480:	2b00      	cmp	r3, #0
 800b482:	f000 808b 	beq.w	800b59c <_dtoa_r+0x4f4>
 800b486:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b48a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800b48e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b492:	4b70      	ldr	r3, [pc, #448]	; (800b654 <_dtoa_r+0x5ac>)
 800b494:	2200      	movs	r2, #0
 800b496:	f7f5 faf9 	bl	8000a8c <__aeabi_dcmplt>
 800b49a:	2800      	cmp	r0, #0
 800b49c:	d07e      	beq.n	800b59c <_dtoa_r+0x4f4>
 800b49e:	9b08      	ldr	r3, [sp, #32]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d07b      	beq.n	800b59c <_dtoa_r+0x4f4>
 800b4a4:	f1b9 0f00 	cmp.w	r9, #0
 800b4a8:	dd38      	ble.n	800b51c <_dtoa_r+0x474>
 800b4aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b4ae:	4b6a      	ldr	r3, [pc, #424]	; (800b658 <_dtoa_r+0x5b0>)
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	f7f5 f879 	bl	80005a8 <__aeabi_dmul>
 800b4b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b4ba:	f10a 38ff 	add.w	r8, sl, #4294967295
 800b4be:	3701      	adds	r7, #1
 800b4c0:	464c      	mov	r4, r9
 800b4c2:	4638      	mov	r0, r7
 800b4c4:	f7f5 f806 	bl	80004d4 <__aeabi_i2d>
 800b4c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b4cc:	f7f5 f86c 	bl	80005a8 <__aeabi_dmul>
 800b4d0:	4b62      	ldr	r3, [pc, #392]	; (800b65c <_dtoa_r+0x5b4>)
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	f7f4 feb2 	bl	800023c <__adddf3>
 800b4d8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800b4dc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b4e0:	9611      	str	r6, [sp, #68]	; 0x44
 800b4e2:	2c00      	cmp	r4, #0
 800b4e4:	d15d      	bne.n	800b5a2 <_dtoa_r+0x4fa>
 800b4e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b4ea:	4b5d      	ldr	r3, [pc, #372]	; (800b660 <_dtoa_r+0x5b8>)
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	f7f4 fea3 	bl	8000238 <__aeabi_dsub>
 800b4f2:	4602      	mov	r2, r0
 800b4f4:	460b      	mov	r3, r1
 800b4f6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b4fa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b4fc:	4633      	mov	r3, r6
 800b4fe:	f7f5 fae3 	bl	8000ac8 <__aeabi_dcmpgt>
 800b502:	2800      	cmp	r0, #0
 800b504:	f040 829c 	bne.w	800ba40 <_dtoa_r+0x998>
 800b508:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b50c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b50e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800b512:	f7f5 fabb 	bl	8000a8c <__aeabi_dcmplt>
 800b516:	2800      	cmp	r0, #0
 800b518:	f040 8290 	bne.w	800ba3c <_dtoa_r+0x994>
 800b51c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800b520:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b524:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b526:	2b00      	cmp	r3, #0
 800b528:	f2c0 8152 	blt.w	800b7d0 <_dtoa_r+0x728>
 800b52c:	f1ba 0f0e 	cmp.w	sl, #14
 800b530:	f300 814e 	bgt.w	800b7d0 <_dtoa_r+0x728>
 800b534:	4b45      	ldr	r3, [pc, #276]	; (800b64c <_dtoa_r+0x5a4>)
 800b536:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b53a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b53e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800b542:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b544:	2b00      	cmp	r3, #0
 800b546:	f280 80db 	bge.w	800b700 <_dtoa_r+0x658>
 800b54a:	9b08      	ldr	r3, [sp, #32]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	f300 80d7 	bgt.w	800b700 <_dtoa_r+0x658>
 800b552:	f040 8272 	bne.w	800ba3a <_dtoa_r+0x992>
 800b556:	4b42      	ldr	r3, [pc, #264]	; (800b660 <_dtoa_r+0x5b8>)
 800b558:	2200      	movs	r2, #0
 800b55a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b55e:	f7f5 f823 	bl	80005a8 <__aeabi_dmul>
 800b562:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b566:	f7f5 faa5 	bl	8000ab4 <__aeabi_dcmpge>
 800b56a:	9c08      	ldr	r4, [sp, #32]
 800b56c:	4626      	mov	r6, r4
 800b56e:	2800      	cmp	r0, #0
 800b570:	f040 8248 	bne.w	800ba04 <_dtoa_r+0x95c>
 800b574:	9f03      	ldr	r7, [sp, #12]
 800b576:	2331      	movs	r3, #49	; 0x31
 800b578:	f807 3b01 	strb.w	r3, [r7], #1
 800b57c:	f10a 0a01 	add.w	sl, sl, #1
 800b580:	e244      	b.n	800ba0c <_dtoa_r+0x964>
 800b582:	07e2      	lsls	r2, r4, #31
 800b584:	d505      	bpl.n	800b592 <_dtoa_r+0x4ea>
 800b586:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b58a:	f7f5 f80d 	bl	80005a8 <__aeabi_dmul>
 800b58e:	3701      	adds	r7, #1
 800b590:	2301      	movs	r3, #1
 800b592:	1064      	asrs	r4, r4, #1
 800b594:	3608      	adds	r6, #8
 800b596:	e76d      	b.n	800b474 <_dtoa_r+0x3cc>
 800b598:	2702      	movs	r7, #2
 800b59a:	e770      	b.n	800b47e <_dtoa_r+0x3d6>
 800b59c:	9c08      	ldr	r4, [sp, #32]
 800b59e:	46d0      	mov	r8, sl
 800b5a0:	e78f      	b.n	800b4c2 <_dtoa_r+0x41a>
 800b5a2:	9903      	ldr	r1, [sp, #12]
 800b5a4:	4b29      	ldr	r3, [pc, #164]	; (800b64c <_dtoa_r+0x5a4>)
 800b5a6:	4421      	add	r1, r4
 800b5a8:	9112      	str	r1, [sp, #72]	; 0x48
 800b5aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b5ac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b5b0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800b5b4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b5b8:	2900      	cmp	r1, #0
 800b5ba:	d055      	beq.n	800b668 <_dtoa_r+0x5c0>
 800b5bc:	4929      	ldr	r1, [pc, #164]	; (800b664 <_dtoa_r+0x5bc>)
 800b5be:	2000      	movs	r0, #0
 800b5c0:	f7f5 f91c 	bl	80007fc <__aeabi_ddiv>
 800b5c4:	463b      	mov	r3, r7
 800b5c6:	4632      	mov	r2, r6
 800b5c8:	f7f4 fe36 	bl	8000238 <__aeabi_dsub>
 800b5cc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b5d0:	9f03      	ldr	r7, [sp, #12]
 800b5d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b5d6:	f7f5 fa97 	bl	8000b08 <__aeabi_d2iz>
 800b5da:	4604      	mov	r4, r0
 800b5dc:	f7f4 ff7a 	bl	80004d4 <__aeabi_i2d>
 800b5e0:	4602      	mov	r2, r0
 800b5e2:	460b      	mov	r3, r1
 800b5e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b5e8:	f7f4 fe26 	bl	8000238 <__aeabi_dsub>
 800b5ec:	3430      	adds	r4, #48	; 0x30
 800b5ee:	4602      	mov	r2, r0
 800b5f0:	460b      	mov	r3, r1
 800b5f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b5f6:	f807 4b01 	strb.w	r4, [r7], #1
 800b5fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b5fe:	f7f5 fa45 	bl	8000a8c <__aeabi_dcmplt>
 800b602:	2800      	cmp	r0, #0
 800b604:	d174      	bne.n	800b6f0 <_dtoa_r+0x648>
 800b606:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b60a:	4912      	ldr	r1, [pc, #72]	; (800b654 <_dtoa_r+0x5ac>)
 800b60c:	2000      	movs	r0, #0
 800b60e:	f7f4 fe13 	bl	8000238 <__aeabi_dsub>
 800b612:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b616:	f7f5 fa39 	bl	8000a8c <__aeabi_dcmplt>
 800b61a:	2800      	cmp	r0, #0
 800b61c:	f040 80b7 	bne.w	800b78e <_dtoa_r+0x6e6>
 800b620:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b622:	429f      	cmp	r7, r3
 800b624:	f43f af7a 	beq.w	800b51c <_dtoa_r+0x474>
 800b628:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b62c:	4b0a      	ldr	r3, [pc, #40]	; (800b658 <_dtoa_r+0x5b0>)
 800b62e:	2200      	movs	r2, #0
 800b630:	f7f4 ffba 	bl	80005a8 <__aeabi_dmul>
 800b634:	4b08      	ldr	r3, [pc, #32]	; (800b658 <_dtoa_r+0x5b0>)
 800b636:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b63a:	2200      	movs	r2, #0
 800b63c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b640:	f7f4 ffb2 	bl	80005a8 <__aeabi_dmul>
 800b644:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b648:	e7c3      	b.n	800b5d2 <_dtoa_r+0x52a>
 800b64a:	bf00      	nop
 800b64c:	0800da70 	.word	0x0800da70
 800b650:	0800da48 	.word	0x0800da48
 800b654:	3ff00000 	.word	0x3ff00000
 800b658:	40240000 	.word	0x40240000
 800b65c:	401c0000 	.word	0x401c0000
 800b660:	40140000 	.word	0x40140000
 800b664:	3fe00000 	.word	0x3fe00000
 800b668:	4630      	mov	r0, r6
 800b66a:	4639      	mov	r1, r7
 800b66c:	f7f4 ff9c 	bl	80005a8 <__aeabi_dmul>
 800b670:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b674:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b676:	9c03      	ldr	r4, [sp, #12]
 800b678:	9314      	str	r3, [sp, #80]	; 0x50
 800b67a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b67e:	f7f5 fa43 	bl	8000b08 <__aeabi_d2iz>
 800b682:	9015      	str	r0, [sp, #84]	; 0x54
 800b684:	f7f4 ff26 	bl	80004d4 <__aeabi_i2d>
 800b688:	4602      	mov	r2, r0
 800b68a:	460b      	mov	r3, r1
 800b68c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b690:	f7f4 fdd2 	bl	8000238 <__aeabi_dsub>
 800b694:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b696:	3330      	adds	r3, #48	; 0x30
 800b698:	f804 3b01 	strb.w	r3, [r4], #1
 800b69c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b69e:	429c      	cmp	r4, r3
 800b6a0:	4606      	mov	r6, r0
 800b6a2:	460f      	mov	r7, r1
 800b6a4:	f04f 0200 	mov.w	r2, #0
 800b6a8:	d124      	bne.n	800b6f4 <_dtoa_r+0x64c>
 800b6aa:	4ba4      	ldr	r3, [pc, #656]	; (800b93c <_dtoa_r+0x894>)
 800b6ac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b6b0:	f7f4 fdc4 	bl	800023c <__adddf3>
 800b6b4:	4602      	mov	r2, r0
 800b6b6:	460b      	mov	r3, r1
 800b6b8:	4630      	mov	r0, r6
 800b6ba:	4639      	mov	r1, r7
 800b6bc:	f7f5 fa04 	bl	8000ac8 <__aeabi_dcmpgt>
 800b6c0:	2800      	cmp	r0, #0
 800b6c2:	d163      	bne.n	800b78c <_dtoa_r+0x6e4>
 800b6c4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b6c8:	499c      	ldr	r1, [pc, #624]	; (800b93c <_dtoa_r+0x894>)
 800b6ca:	2000      	movs	r0, #0
 800b6cc:	f7f4 fdb4 	bl	8000238 <__aeabi_dsub>
 800b6d0:	4602      	mov	r2, r0
 800b6d2:	460b      	mov	r3, r1
 800b6d4:	4630      	mov	r0, r6
 800b6d6:	4639      	mov	r1, r7
 800b6d8:	f7f5 f9d8 	bl	8000a8c <__aeabi_dcmplt>
 800b6dc:	2800      	cmp	r0, #0
 800b6de:	f43f af1d 	beq.w	800b51c <_dtoa_r+0x474>
 800b6e2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800b6e4:	1e7b      	subs	r3, r7, #1
 800b6e6:	9314      	str	r3, [sp, #80]	; 0x50
 800b6e8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800b6ec:	2b30      	cmp	r3, #48	; 0x30
 800b6ee:	d0f8      	beq.n	800b6e2 <_dtoa_r+0x63a>
 800b6f0:	46c2      	mov	sl, r8
 800b6f2:	e03b      	b.n	800b76c <_dtoa_r+0x6c4>
 800b6f4:	4b92      	ldr	r3, [pc, #584]	; (800b940 <_dtoa_r+0x898>)
 800b6f6:	f7f4 ff57 	bl	80005a8 <__aeabi_dmul>
 800b6fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b6fe:	e7bc      	b.n	800b67a <_dtoa_r+0x5d2>
 800b700:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b704:	9f03      	ldr	r7, [sp, #12]
 800b706:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b70a:	4640      	mov	r0, r8
 800b70c:	4649      	mov	r1, r9
 800b70e:	f7f5 f875 	bl	80007fc <__aeabi_ddiv>
 800b712:	f7f5 f9f9 	bl	8000b08 <__aeabi_d2iz>
 800b716:	4604      	mov	r4, r0
 800b718:	f7f4 fedc 	bl	80004d4 <__aeabi_i2d>
 800b71c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b720:	f7f4 ff42 	bl	80005a8 <__aeabi_dmul>
 800b724:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800b728:	4602      	mov	r2, r0
 800b72a:	460b      	mov	r3, r1
 800b72c:	4640      	mov	r0, r8
 800b72e:	4649      	mov	r1, r9
 800b730:	f7f4 fd82 	bl	8000238 <__aeabi_dsub>
 800b734:	f807 6b01 	strb.w	r6, [r7], #1
 800b738:	9e03      	ldr	r6, [sp, #12]
 800b73a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800b73e:	1bbe      	subs	r6, r7, r6
 800b740:	45b4      	cmp	ip, r6
 800b742:	4602      	mov	r2, r0
 800b744:	460b      	mov	r3, r1
 800b746:	d136      	bne.n	800b7b6 <_dtoa_r+0x70e>
 800b748:	f7f4 fd78 	bl	800023c <__adddf3>
 800b74c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b750:	4680      	mov	r8, r0
 800b752:	4689      	mov	r9, r1
 800b754:	f7f5 f9b8 	bl	8000ac8 <__aeabi_dcmpgt>
 800b758:	bb58      	cbnz	r0, 800b7b2 <_dtoa_r+0x70a>
 800b75a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b75e:	4640      	mov	r0, r8
 800b760:	4649      	mov	r1, r9
 800b762:	f7f5 f989 	bl	8000a78 <__aeabi_dcmpeq>
 800b766:	b108      	cbz	r0, 800b76c <_dtoa_r+0x6c4>
 800b768:	07e1      	lsls	r1, r4, #31
 800b76a:	d422      	bmi.n	800b7b2 <_dtoa_r+0x70a>
 800b76c:	4628      	mov	r0, r5
 800b76e:	4659      	mov	r1, fp
 800b770:	f000 fbc2 	bl	800bef8 <_Bfree>
 800b774:	2300      	movs	r3, #0
 800b776:	703b      	strb	r3, [r7, #0]
 800b778:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b77a:	f10a 0001 	add.w	r0, sl, #1
 800b77e:	6018      	str	r0, [r3, #0]
 800b780:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b782:	2b00      	cmp	r3, #0
 800b784:	f43f acdd 	beq.w	800b142 <_dtoa_r+0x9a>
 800b788:	601f      	str	r7, [r3, #0]
 800b78a:	e4da      	b.n	800b142 <_dtoa_r+0x9a>
 800b78c:	4627      	mov	r7, r4
 800b78e:	463b      	mov	r3, r7
 800b790:	461f      	mov	r7, r3
 800b792:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b796:	2a39      	cmp	r2, #57	; 0x39
 800b798:	d107      	bne.n	800b7aa <_dtoa_r+0x702>
 800b79a:	9a03      	ldr	r2, [sp, #12]
 800b79c:	429a      	cmp	r2, r3
 800b79e:	d1f7      	bne.n	800b790 <_dtoa_r+0x6e8>
 800b7a0:	9903      	ldr	r1, [sp, #12]
 800b7a2:	2230      	movs	r2, #48	; 0x30
 800b7a4:	f108 0801 	add.w	r8, r8, #1
 800b7a8:	700a      	strb	r2, [r1, #0]
 800b7aa:	781a      	ldrb	r2, [r3, #0]
 800b7ac:	3201      	adds	r2, #1
 800b7ae:	701a      	strb	r2, [r3, #0]
 800b7b0:	e79e      	b.n	800b6f0 <_dtoa_r+0x648>
 800b7b2:	46d0      	mov	r8, sl
 800b7b4:	e7eb      	b.n	800b78e <_dtoa_r+0x6e6>
 800b7b6:	4b62      	ldr	r3, [pc, #392]	; (800b940 <_dtoa_r+0x898>)
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	f7f4 fef5 	bl	80005a8 <__aeabi_dmul>
 800b7be:	2200      	movs	r2, #0
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	4680      	mov	r8, r0
 800b7c4:	4689      	mov	r9, r1
 800b7c6:	f7f5 f957 	bl	8000a78 <__aeabi_dcmpeq>
 800b7ca:	2800      	cmp	r0, #0
 800b7cc:	d09b      	beq.n	800b706 <_dtoa_r+0x65e>
 800b7ce:	e7cd      	b.n	800b76c <_dtoa_r+0x6c4>
 800b7d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b7d2:	2a00      	cmp	r2, #0
 800b7d4:	f000 80d0 	beq.w	800b978 <_dtoa_r+0x8d0>
 800b7d8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b7da:	2a01      	cmp	r2, #1
 800b7dc:	f300 80b2 	bgt.w	800b944 <_dtoa_r+0x89c>
 800b7e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b7e2:	2a00      	cmp	r2, #0
 800b7e4:	f000 80a6 	beq.w	800b934 <_dtoa_r+0x88c>
 800b7e8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b7ec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b7ee:	9f06      	ldr	r7, [sp, #24]
 800b7f0:	9a06      	ldr	r2, [sp, #24]
 800b7f2:	441a      	add	r2, r3
 800b7f4:	9206      	str	r2, [sp, #24]
 800b7f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b7f8:	2101      	movs	r1, #1
 800b7fa:	441a      	add	r2, r3
 800b7fc:	4628      	mov	r0, r5
 800b7fe:	9209      	str	r2, [sp, #36]	; 0x24
 800b800:	f000 fc30 	bl	800c064 <__i2b>
 800b804:	4606      	mov	r6, r0
 800b806:	2f00      	cmp	r7, #0
 800b808:	dd0c      	ble.n	800b824 <_dtoa_r+0x77c>
 800b80a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	dd09      	ble.n	800b824 <_dtoa_r+0x77c>
 800b810:	42bb      	cmp	r3, r7
 800b812:	9a06      	ldr	r2, [sp, #24]
 800b814:	bfa8      	it	ge
 800b816:	463b      	movge	r3, r7
 800b818:	1ad2      	subs	r2, r2, r3
 800b81a:	9206      	str	r2, [sp, #24]
 800b81c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b81e:	1aff      	subs	r7, r7, r3
 800b820:	1ad3      	subs	r3, r2, r3
 800b822:	9309      	str	r3, [sp, #36]	; 0x24
 800b824:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b826:	b1f3      	cbz	r3, 800b866 <_dtoa_r+0x7be>
 800b828:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	f000 80a8 	beq.w	800b980 <_dtoa_r+0x8d8>
 800b830:	2c00      	cmp	r4, #0
 800b832:	dd10      	ble.n	800b856 <_dtoa_r+0x7ae>
 800b834:	4631      	mov	r1, r6
 800b836:	4622      	mov	r2, r4
 800b838:	4628      	mov	r0, r5
 800b83a:	f000 fcd1 	bl	800c1e0 <__pow5mult>
 800b83e:	465a      	mov	r2, fp
 800b840:	4601      	mov	r1, r0
 800b842:	4606      	mov	r6, r0
 800b844:	4628      	mov	r0, r5
 800b846:	f000 fc23 	bl	800c090 <__multiply>
 800b84a:	4659      	mov	r1, fp
 800b84c:	4680      	mov	r8, r0
 800b84e:	4628      	mov	r0, r5
 800b850:	f000 fb52 	bl	800bef8 <_Bfree>
 800b854:	46c3      	mov	fp, r8
 800b856:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b858:	1b1a      	subs	r2, r3, r4
 800b85a:	d004      	beq.n	800b866 <_dtoa_r+0x7be>
 800b85c:	4659      	mov	r1, fp
 800b85e:	4628      	mov	r0, r5
 800b860:	f000 fcbe 	bl	800c1e0 <__pow5mult>
 800b864:	4683      	mov	fp, r0
 800b866:	2101      	movs	r1, #1
 800b868:	4628      	mov	r0, r5
 800b86a:	f000 fbfb 	bl	800c064 <__i2b>
 800b86e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b870:	2b00      	cmp	r3, #0
 800b872:	4604      	mov	r4, r0
 800b874:	f340 8086 	ble.w	800b984 <_dtoa_r+0x8dc>
 800b878:	461a      	mov	r2, r3
 800b87a:	4601      	mov	r1, r0
 800b87c:	4628      	mov	r0, r5
 800b87e:	f000 fcaf 	bl	800c1e0 <__pow5mult>
 800b882:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b884:	2b01      	cmp	r3, #1
 800b886:	4604      	mov	r4, r0
 800b888:	dd7f      	ble.n	800b98a <_dtoa_r+0x8e2>
 800b88a:	f04f 0800 	mov.w	r8, #0
 800b88e:	6923      	ldr	r3, [r4, #16]
 800b890:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b894:	6918      	ldr	r0, [r3, #16]
 800b896:	f000 fb97 	bl	800bfc8 <__hi0bits>
 800b89a:	f1c0 0020 	rsb	r0, r0, #32
 800b89e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8a0:	4418      	add	r0, r3
 800b8a2:	f010 001f 	ands.w	r0, r0, #31
 800b8a6:	f000 8092 	beq.w	800b9ce <_dtoa_r+0x926>
 800b8aa:	f1c0 0320 	rsb	r3, r0, #32
 800b8ae:	2b04      	cmp	r3, #4
 800b8b0:	f340 808a 	ble.w	800b9c8 <_dtoa_r+0x920>
 800b8b4:	f1c0 001c 	rsb	r0, r0, #28
 800b8b8:	9b06      	ldr	r3, [sp, #24]
 800b8ba:	4403      	add	r3, r0
 800b8bc:	9306      	str	r3, [sp, #24]
 800b8be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8c0:	4403      	add	r3, r0
 800b8c2:	4407      	add	r7, r0
 800b8c4:	9309      	str	r3, [sp, #36]	; 0x24
 800b8c6:	9b06      	ldr	r3, [sp, #24]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	dd05      	ble.n	800b8d8 <_dtoa_r+0x830>
 800b8cc:	4659      	mov	r1, fp
 800b8ce:	461a      	mov	r2, r3
 800b8d0:	4628      	mov	r0, r5
 800b8d2:	f000 fcdf 	bl	800c294 <__lshift>
 800b8d6:	4683      	mov	fp, r0
 800b8d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	dd05      	ble.n	800b8ea <_dtoa_r+0x842>
 800b8de:	4621      	mov	r1, r4
 800b8e0:	461a      	mov	r2, r3
 800b8e2:	4628      	mov	r0, r5
 800b8e4:	f000 fcd6 	bl	800c294 <__lshift>
 800b8e8:	4604      	mov	r4, r0
 800b8ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d070      	beq.n	800b9d2 <_dtoa_r+0x92a>
 800b8f0:	4621      	mov	r1, r4
 800b8f2:	4658      	mov	r0, fp
 800b8f4:	f000 fd3e 	bl	800c374 <__mcmp>
 800b8f8:	2800      	cmp	r0, #0
 800b8fa:	da6a      	bge.n	800b9d2 <_dtoa_r+0x92a>
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	4659      	mov	r1, fp
 800b900:	220a      	movs	r2, #10
 800b902:	4628      	mov	r0, r5
 800b904:	f000 fb1a 	bl	800bf3c <__multadd>
 800b908:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b90a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b90e:	4683      	mov	fp, r0
 800b910:	2b00      	cmp	r3, #0
 800b912:	f000 8194 	beq.w	800bc3e <_dtoa_r+0xb96>
 800b916:	4631      	mov	r1, r6
 800b918:	2300      	movs	r3, #0
 800b91a:	220a      	movs	r2, #10
 800b91c:	4628      	mov	r0, r5
 800b91e:	f000 fb0d 	bl	800bf3c <__multadd>
 800b922:	f1b9 0f00 	cmp.w	r9, #0
 800b926:	4606      	mov	r6, r0
 800b928:	f300 8093 	bgt.w	800ba52 <_dtoa_r+0x9aa>
 800b92c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b92e:	2b02      	cmp	r3, #2
 800b930:	dc57      	bgt.n	800b9e2 <_dtoa_r+0x93a>
 800b932:	e08e      	b.n	800ba52 <_dtoa_r+0x9aa>
 800b934:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b936:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b93a:	e757      	b.n	800b7ec <_dtoa_r+0x744>
 800b93c:	3fe00000 	.word	0x3fe00000
 800b940:	40240000 	.word	0x40240000
 800b944:	9b08      	ldr	r3, [sp, #32]
 800b946:	1e5c      	subs	r4, r3, #1
 800b948:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b94a:	42a3      	cmp	r3, r4
 800b94c:	bfbf      	itttt	lt
 800b94e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b950:	940a      	strlt	r4, [sp, #40]	; 0x28
 800b952:	1ae2      	sublt	r2, r4, r3
 800b954:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800b956:	bfb6      	itet	lt
 800b958:	189b      	addlt	r3, r3, r2
 800b95a:	1b1c      	subge	r4, r3, r4
 800b95c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800b95e:	9b08      	ldr	r3, [sp, #32]
 800b960:	bfb8      	it	lt
 800b962:	2400      	movlt	r4, #0
 800b964:	2b00      	cmp	r3, #0
 800b966:	bfb9      	ittee	lt
 800b968:	9b06      	ldrlt	r3, [sp, #24]
 800b96a:	9a08      	ldrlt	r2, [sp, #32]
 800b96c:	9f06      	ldrge	r7, [sp, #24]
 800b96e:	9b08      	ldrge	r3, [sp, #32]
 800b970:	bfbc      	itt	lt
 800b972:	1a9f      	sublt	r7, r3, r2
 800b974:	2300      	movlt	r3, #0
 800b976:	e73b      	b.n	800b7f0 <_dtoa_r+0x748>
 800b978:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b97a:	9f06      	ldr	r7, [sp, #24]
 800b97c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800b97e:	e742      	b.n	800b806 <_dtoa_r+0x75e>
 800b980:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b982:	e76b      	b.n	800b85c <_dtoa_r+0x7b4>
 800b984:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b986:	2b01      	cmp	r3, #1
 800b988:	dc19      	bgt.n	800b9be <_dtoa_r+0x916>
 800b98a:	9b04      	ldr	r3, [sp, #16]
 800b98c:	b9bb      	cbnz	r3, 800b9be <_dtoa_r+0x916>
 800b98e:	9b05      	ldr	r3, [sp, #20]
 800b990:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b994:	b99b      	cbnz	r3, 800b9be <_dtoa_r+0x916>
 800b996:	9b05      	ldr	r3, [sp, #20]
 800b998:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b99c:	0d1b      	lsrs	r3, r3, #20
 800b99e:	051b      	lsls	r3, r3, #20
 800b9a0:	b183      	cbz	r3, 800b9c4 <_dtoa_r+0x91c>
 800b9a2:	9b06      	ldr	r3, [sp, #24]
 800b9a4:	3301      	adds	r3, #1
 800b9a6:	9306      	str	r3, [sp, #24]
 800b9a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9aa:	3301      	adds	r3, #1
 800b9ac:	9309      	str	r3, [sp, #36]	; 0x24
 800b9ae:	f04f 0801 	mov.w	r8, #1
 800b9b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	f47f af6a 	bne.w	800b88e <_dtoa_r+0x7e6>
 800b9ba:	2001      	movs	r0, #1
 800b9bc:	e76f      	b.n	800b89e <_dtoa_r+0x7f6>
 800b9be:	f04f 0800 	mov.w	r8, #0
 800b9c2:	e7f6      	b.n	800b9b2 <_dtoa_r+0x90a>
 800b9c4:	4698      	mov	r8, r3
 800b9c6:	e7f4      	b.n	800b9b2 <_dtoa_r+0x90a>
 800b9c8:	f43f af7d 	beq.w	800b8c6 <_dtoa_r+0x81e>
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	301c      	adds	r0, #28
 800b9d0:	e772      	b.n	800b8b8 <_dtoa_r+0x810>
 800b9d2:	9b08      	ldr	r3, [sp, #32]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	dc36      	bgt.n	800ba46 <_dtoa_r+0x99e>
 800b9d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b9da:	2b02      	cmp	r3, #2
 800b9dc:	dd33      	ble.n	800ba46 <_dtoa_r+0x99e>
 800b9de:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b9e2:	f1b9 0f00 	cmp.w	r9, #0
 800b9e6:	d10d      	bne.n	800ba04 <_dtoa_r+0x95c>
 800b9e8:	4621      	mov	r1, r4
 800b9ea:	464b      	mov	r3, r9
 800b9ec:	2205      	movs	r2, #5
 800b9ee:	4628      	mov	r0, r5
 800b9f0:	f000 faa4 	bl	800bf3c <__multadd>
 800b9f4:	4601      	mov	r1, r0
 800b9f6:	4604      	mov	r4, r0
 800b9f8:	4658      	mov	r0, fp
 800b9fa:	f000 fcbb 	bl	800c374 <__mcmp>
 800b9fe:	2800      	cmp	r0, #0
 800ba00:	f73f adb8 	bgt.w	800b574 <_dtoa_r+0x4cc>
 800ba04:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ba06:	9f03      	ldr	r7, [sp, #12]
 800ba08:	ea6f 0a03 	mvn.w	sl, r3
 800ba0c:	f04f 0800 	mov.w	r8, #0
 800ba10:	4621      	mov	r1, r4
 800ba12:	4628      	mov	r0, r5
 800ba14:	f000 fa70 	bl	800bef8 <_Bfree>
 800ba18:	2e00      	cmp	r6, #0
 800ba1a:	f43f aea7 	beq.w	800b76c <_dtoa_r+0x6c4>
 800ba1e:	f1b8 0f00 	cmp.w	r8, #0
 800ba22:	d005      	beq.n	800ba30 <_dtoa_r+0x988>
 800ba24:	45b0      	cmp	r8, r6
 800ba26:	d003      	beq.n	800ba30 <_dtoa_r+0x988>
 800ba28:	4641      	mov	r1, r8
 800ba2a:	4628      	mov	r0, r5
 800ba2c:	f000 fa64 	bl	800bef8 <_Bfree>
 800ba30:	4631      	mov	r1, r6
 800ba32:	4628      	mov	r0, r5
 800ba34:	f000 fa60 	bl	800bef8 <_Bfree>
 800ba38:	e698      	b.n	800b76c <_dtoa_r+0x6c4>
 800ba3a:	2400      	movs	r4, #0
 800ba3c:	4626      	mov	r6, r4
 800ba3e:	e7e1      	b.n	800ba04 <_dtoa_r+0x95c>
 800ba40:	46c2      	mov	sl, r8
 800ba42:	4626      	mov	r6, r4
 800ba44:	e596      	b.n	800b574 <_dtoa_r+0x4cc>
 800ba46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	f000 80fd 	beq.w	800bc4c <_dtoa_r+0xba4>
 800ba52:	2f00      	cmp	r7, #0
 800ba54:	dd05      	ble.n	800ba62 <_dtoa_r+0x9ba>
 800ba56:	4631      	mov	r1, r6
 800ba58:	463a      	mov	r2, r7
 800ba5a:	4628      	mov	r0, r5
 800ba5c:	f000 fc1a 	bl	800c294 <__lshift>
 800ba60:	4606      	mov	r6, r0
 800ba62:	f1b8 0f00 	cmp.w	r8, #0
 800ba66:	d05c      	beq.n	800bb22 <_dtoa_r+0xa7a>
 800ba68:	6871      	ldr	r1, [r6, #4]
 800ba6a:	4628      	mov	r0, r5
 800ba6c:	f000 fa04 	bl	800be78 <_Balloc>
 800ba70:	4607      	mov	r7, r0
 800ba72:	b928      	cbnz	r0, 800ba80 <_dtoa_r+0x9d8>
 800ba74:	4b80      	ldr	r3, [pc, #512]	; (800bc78 <_dtoa_r+0xbd0>)
 800ba76:	4602      	mov	r2, r0
 800ba78:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ba7c:	f7ff bb28 	b.w	800b0d0 <_dtoa_r+0x28>
 800ba80:	6932      	ldr	r2, [r6, #16]
 800ba82:	3202      	adds	r2, #2
 800ba84:	0092      	lsls	r2, r2, #2
 800ba86:	f106 010c 	add.w	r1, r6, #12
 800ba8a:	300c      	adds	r0, #12
 800ba8c:	f7fe fbb9 	bl	800a202 <memcpy>
 800ba90:	2201      	movs	r2, #1
 800ba92:	4639      	mov	r1, r7
 800ba94:	4628      	mov	r0, r5
 800ba96:	f000 fbfd 	bl	800c294 <__lshift>
 800ba9a:	9b03      	ldr	r3, [sp, #12]
 800ba9c:	3301      	adds	r3, #1
 800ba9e:	9308      	str	r3, [sp, #32]
 800baa0:	9b03      	ldr	r3, [sp, #12]
 800baa2:	444b      	add	r3, r9
 800baa4:	930a      	str	r3, [sp, #40]	; 0x28
 800baa6:	9b04      	ldr	r3, [sp, #16]
 800baa8:	f003 0301 	and.w	r3, r3, #1
 800baac:	46b0      	mov	r8, r6
 800baae:	9309      	str	r3, [sp, #36]	; 0x24
 800bab0:	4606      	mov	r6, r0
 800bab2:	9b08      	ldr	r3, [sp, #32]
 800bab4:	4621      	mov	r1, r4
 800bab6:	3b01      	subs	r3, #1
 800bab8:	4658      	mov	r0, fp
 800baba:	9304      	str	r3, [sp, #16]
 800babc:	f7ff fa6a 	bl	800af94 <quorem>
 800bac0:	4603      	mov	r3, r0
 800bac2:	3330      	adds	r3, #48	; 0x30
 800bac4:	9006      	str	r0, [sp, #24]
 800bac6:	4641      	mov	r1, r8
 800bac8:	4658      	mov	r0, fp
 800baca:	930b      	str	r3, [sp, #44]	; 0x2c
 800bacc:	f000 fc52 	bl	800c374 <__mcmp>
 800bad0:	4632      	mov	r2, r6
 800bad2:	4681      	mov	r9, r0
 800bad4:	4621      	mov	r1, r4
 800bad6:	4628      	mov	r0, r5
 800bad8:	f000 fc68 	bl	800c3ac <__mdiff>
 800badc:	68c2      	ldr	r2, [r0, #12]
 800bade:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bae0:	4607      	mov	r7, r0
 800bae2:	bb02      	cbnz	r2, 800bb26 <_dtoa_r+0xa7e>
 800bae4:	4601      	mov	r1, r0
 800bae6:	4658      	mov	r0, fp
 800bae8:	f000 fc44 	bl	800c374 <__mcmp>
 800baec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800baee:	4602      	mov	r2, r0
 800baf0:	4639      	mov	r1, r7
 800baf2:	4628      	mov	r0, r5
 800baf4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800baf8:	f000 f9fe 	bl	800bef8 <_Bfree>
 800bafc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bafe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bb00:	9f08      	ldr	r7, [sp, #32]
 800bb02:	ea43 0102 	orr.w	r1, r3, r2
 800bb06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb08:	430b      	orrs	r3, r1
 800bb0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb0c:	d10d      	bne.n	800bb2a <_dtoa_r+0xa82>
 800bb0e:	2b39      	cmp	r3, #57	; 0x39
 800bb10:	d029      	beq.n	800bb66 <_dtoa_r+0xabe>
 800bb12:	f1b9 0f00 	cmp.w	r9, #0
 800bb16:	dd01      	ble.n	800bb1c <_dtoa_r+0xa74>
 800bb18:	9b06      	ldr	r3, [sp, #24]
 800bb1a:	3331      	adds	r3, #49	; 0x31
 800bb1c:	9a04      	ldr	r2, [sp, #16]
 800bb1e:	7013      	strb	r3, [r2, #0]
 800bb20:	e776      	b.n	800ba10 <_dtoa_r+0x968>
 800bb22:	4630      	mov	r0, r6
 800bb24:	e7b9      	b.n	800ba9a <_dtoa_r+0x9f2>
 800bb26:	2201      	movs	r2, #1
 800bb28:	e7e2      	b.n	800baf0 <_dtoa_r+0xa48>
 800bb2a:	f1b9 0f00 	cmp.w	r9, #0
 800bb2e:	db06      	blt.n	800bb3e <_dtoa_r+0xa96>
 800bb30:	9922      	ldr	r1, [sp, #136]	; 0x88
 800bb32:	ea41 0909 	orr.w	r9, r1, r9
 800bb36:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bb38:	ea59 0101 	orrs.w	r1, r9, r1
 800bb3c:	d120      	bne.n	800bb80 <_dtoa_r+0xad8>
 800bb3e:	2a00      	cmp	r2, #0
 800bb40:	ddec      	ble.n	800bb1c <_dtoa_r+0xa74>
 800bb42:	4659      	mov	r1, fp
 800bb44:	2201      	movs	r2, #1
 800bb46:	4628      	mov	r0, r5
 800bb48:	9308      	str	r3, [sp, #32]
 800bb4a:	f000 fba3 	bl	800c294 <__lshift>
 800bb4e:	4621      	mov	r1, r4
 800bb50:	4683      	mov	fp, r0
 800bb52:	f000 fc0f 	bl	800c374 <__mcmp>
 800bb56:	2800      	cmp	r0, #0
 800bb58:	9b08      	ldr	r3, [sp, #32]
 800bb5a:	dc02      	bgt.n	800bb62 <_dtoa_r+0xaba>
 800bb5c:	d1de      	bne.n	800bb1c <_dtoa_r+0xa74>
 800bb5e:	07da      	lsls	r2, r3, #31
 800bb60:	d5dc      	bpl.n	800bb1c <_dtoa_r+0xa74>
 800bb62:	2b39      	cmp	r3, #57	; 0x39
 800bb64:	d1d8      	bne.n	800bb18 <_dtoa_r+0xa70>
 800bb66:	9a04      	ldr	r2, [sp, #16]
 800bb68:	2339      	movs	r3, #57	; 0x39
 800bb6a:	7013      	strb	r3, [r2, #0]
 800bb6c:	463b      	mov	r3, r7
 800bb6e:	461f      	mov	r7, r3
 800bb70:	3b01      	subs	r3, #1
 800bb72:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800bb76:	2a39      	cmp	r2, #57	; 0x39
 800bb78:	d050      	beq.n	800bc1c <_dtoa_r+0xb74>
 800bb7a:	3201      	adds	r2, #1
 800bb7c:	701a      	strb	r2, [r3, #0]
 800bb7e:	e747      	b.n	800ba10 <_dtoa_r+0x968>
 800bb80:	2a00      	cmp	r2, #0
 800bb82:	dd03      	ble.n	800bb8c <_dtoa_r+0xae4>
 800bb84:	2b39      	cmp	r3, #57	; 0x39
 800bb86:	d0ee      	beq.n	800bb66 <_dtoa_r+0xabe>
 800bb88:	3301      	adds	r3, #1
 800bb8a:	e7c7      	b.n	800bb1c <_dtoa_r+0xa74>
 800bb8c:	9a08      	ldr	r2, [sp, #32]
 800bb8e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bb90:	f802 3c01 	strb.w	r3, [r2, #-1]
 800bb94:	428a      	cmp	r2, r1
 800bb96:	d02a      	beq.n	800bbee <_dtoa_r+0xb46>
 800bb98:	4659      	mov	r1, fp
 800bb9a:	2300      	movs	r3, #0
 800bb9c:	220a      	movs	r2, #10
 800bb9e:	4628      	mov	r0, r5
 800bba0:	f000 f9cc 	bl	800bf3c <__multadd>
 800bba4:	45b0      	cmp	r8, r6
 800bba6:	4683      	mov	fp, r0
 800bba8:	f04f 0300 	mov.w	r3, #0
 800bbac:	f04f 020a 	mov.w	r2, #10
 800bbb0:	4641      	mov	r1, r8
 800bbb2:	4628      	mov	r0, r5
 800bbb4:	d107      	bne.n	800bbc6 <_dtoa_r+0xb1e>
 800bbb6:	f000 f9c1 	bl	800bf3c <__multadd>
 800bbba:	4680      	mov	r8, r0
 800bbbc:	4606      	mov	r6, r0
 800bbbe:	9b08      	ldr	r3, [sp, #32]
 800bbc0:	3301      	adds	r3, #1
 800bbc2:	9308      	str	r3, [sp, #32]
 800bbc4:	e775      	b.n	800bab2 <_dtoa_r+0xa0a>
 800bbc6:	f000 f9b9 	bl	800bf3c <__multadd>
 800bbca:	4631      	mov	r1, r6
 800bbcc:	4680      	mov	r8, r0
 800bbce:	2300      	movs	r3, #0
 800bbd0:	220a      	movs	r2, #10
 800bbd2:	4628      	mov	r0, r5
 800bbd4:	f000 f9b2 	bl	800bf3c <__multadd>
 800bbd8:	4606      	mov	r6, r0
 800bbda:	e7f0      	b.n	800bbbe <_dtoa_r+0xb16>
 800bbdc:	f1b9 0f00 	cmp.w	r9, #0
 800bbe0:	9a03      	ldr	r2, [sp, #12]
 800bbe2:	bfcc      	ite	gt
 800bbe4:	464f      	movgt	r7, r9
 800bbe6:	2701      	movle	r7, #1
 800bbe8:	4417      	add	r7, r2
 800bbea:	f04f 0800 	mov.w	r8, #0
 800bbee:	4659      	mov	r1, fp
 800bbf0:	2201      	movs	r2, #1
 800bbf2:	4628      	mov	r0, r5
 800bbf4:	9308      	str	r3, [sp, #32]
 800bbf6:	f000 fb4d 	bl	800c294 <__lshift>
 800bbfa:	4621      	mov	r1, r4
 800bbfc:	4683      	mov	fp, r0
 800bbfe:	f000 fbb9 	bl	800c374 <__mcmp>
 800bc02:	2800      	cmp	r0, #0
 800bc04:	dcb2      	bgt.n	800bb6c <_dtoa_r+0xac4>
 800bc06:	d102      	bne.n	800bc0e <_dtoa_r+0xb66>
 800bc08:	9b08      	ldr	r3, [sp, #32]
 800bc0a:	07db      	lsls	r3, r3, #31
 800bc0c:	d4ae      	bmi.n	800bb6c <_dtoa_r+0xac4>
 800bc0e:	463b      	mov	r3, r7
 800bc10:	461f      	mov	r7, r3
 800bc12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bc16:	2a30      	cmp	r2, #48	; 0x30
 800bc18:	d0fa      	beq.n	800bc10 <_dtoa_r+0xb68>
 800bc1a:	e6f9      	b.n	800ba10 <_dtoa_r+0x968>
 800bc1c:	9a03      	ldr	r2, [sp, #12]
 800bc1e:	429a      	cmp	r2, r3
 800bc20:	d1a5      	bne.n	800bb6e <_dtoa_r+0xac6>
 800bc22:	f10a 0a01 	add.w	sl, sl, #1
 800bc26:	2331      	movs	r3, #49	; 0x31
 800bc28:	e779      	b.n	800bb1e <_dtoa_r+0xa76>
 800bc2a:	4b14      	ldr	r3, [pc, #80]	; (800bc7c <_dtoa_r+0xbd4>)
 800bc2c:	f7ff baa7 	b.w	800b17e <_dtoa_r+0xd6>
 800bc30:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	f47f aa80 	bne.w	800b138 <_dtoa_r+0x90>
 800bc38:	4b11      	ldr	r3, [pc, #68]	; (800bc80 <_dtoa_r+0xbd8>)
 800bc3a:	f7ff baa0 	b.w	800b17e <_dtoa_r+0xd6>
 800bc3e:	f1b9 0f00 	cmp.w	r9, #0
 800bc42:	dc03      	bgt.n	800bc4c <_dtoa_r+0xba4>
 800bc44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bc46:	2b02      	cmp	r3, #2
 800bc48:	f73f aecb 	bgt.w	800b9e2 <_dtoa_r+0x93a>
 800bc4c:	9f03      	ldr	r7, [sp, #12]
 800bc4e:	4621      	mov	r1, r4
 800bc50:	4658      	mov	r0, fp
 800bc52:	f7ff f99f 	bl	800af94 <quorem>
 800bc56:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800bc5a:	f807 3b01 	strb.w	r3, [r7], #1
 800bc5e:	9a03      	ldr	r2, [sp, #12]
 800bc60:	1aba      	subs	r2, r7, r2
 800bc62:	4591      	cmp	r9, r2
 800bc64:	ddba      	ble.n	800bbdc <_dtoa_r+0xb34>
 800bc66:	4659      	mov	r1, fp
 800bc68:	2300      	movs	r3, #0
 800bc6a:	220a      	movs	r2, #10
 800bc6c:	4628      	mov	r0, r5
 800bc6e:	f000 f965 	bl	800bf3c <__multadd>
 800bc72:	4683      	mov	fp, r0
 800bc74:	e7eb      	b.n	800bc4e <_dtoa_r+0xba6>
 800bc76:	bf00      	nop
 800bc78:	0800d9d8 	.word	0x0800d9d8
 800bc7c:	0800d89c 	.word	0x0800d89c
 800bc80:	0800d970 	.word	0x0800d970

0800bc84 <__sflush_r>:
 800bc84:	898a      	ldrh	r2, [r1, #12]
 800bc86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc88:	4605      	mov	r5, r0
 800bc8a:	0710      	lsls	r0, r2, #28
 800bc8c:	460c      	mov	r4, r1
 800bc8e:	d457      	bmi.n	800bd40 <__sflush_r+0xbc>
 800bc90:	684b      	ldr	r3, [r1, #4]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	dc04      	bgt.n	800bca0 <__sflush_r+0x1c>
 800bc96:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	dc01      	bgt.n	800bca0 <__sflush_r+0x1c>
 800bc9c:	2000      	movs	r0, #0
 800bc9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bca0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bca2:	2e00      	cmp	r6, #0
 800bca4:	d0fa      	beq.n	800bc9c <__sflush_r+0x18>
 800bca6:	2300      	movs	r3, #0
 800bca8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bcac:	682f      	ldr	r7, [r5, #0]
 800bcae:	602b      	str	r3, [r5, #0]
 800bcb0:	d032      	beq.n	800bd18 <__sflush_r+0x94>
 800bcb2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bcb4:	89a3      	ldrh	r3, [r4, #12]
 800bcb6:	075a      	lsls	r2, r3, #29
 800bcb8:	d505      	bpl.n	800bcc6 <__sflush_r+0x42>
 800bcba:	6863      	ldr	r3, [r4, #4]
 800bcbc:	1ac0      	subs	r0, r0, r3
 800bcbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bcc0:	b10b      	cbz	r3, 800bcc6 <__sflush_r+0x42>
 800bcc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bcc4:	1ac0      	subs	r0, r0, r3
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	4602      	mov	r2, r0
 800bcca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bccc:	6a21      	ldr	r1, [r4, #32]
 800bcce:	4628      	mov	r0, r5
 800bcd0:	47b0      	blx	r6
 800bcd2:	1c43      	adds	r3, r0, #1
 800bcd4:	89a3      	ldrh	r3, [r4, #12]
 800bcd6:	d106      	bne.n	800bce6 <__sflush_r+0x62>
 800bcd8:	6829      	ldr	r1, [r5, #0]
 800bcda:	291d      	cmp	r1, #29
 800bcdc:	d82c      	bhi.n	800bd38 <__sflush_r+0xb4>
 800bcde:	4a29      	ldr	r2, [pc, #164]	; (800bd84 <__sflush_r+0x100>)
 800bce0:	40ca      	lsrs	r2, r1
 800bce2:	07d6      	lsls	r6, r2, #31
 800bce4:	d528      	bpl.n	800bd38 <__sflush_r+0xb4>
 800bce6:	2200      	movs	r2, #0
 800bce8:	6062      	str	r2, [r4, #4]
 800bcea:	04d9      	lsls	r1, r3, #19
 800bcec:	6922      	ldr	r2, [r4, #16]
 800bcee:	6022      	str	r2, [r4, #0]
 800bcf0:	d504      	bpl.n	800bcfc <__sflush_r+0x78>
 800bcf2:	1c42      	adds	r2, r0, #1
 800bcf4:	d101      	bne.n	800bcfa <__sflush_r+0x76>
 800bcf6:	682b      	ldr	r3, [r5, #0]
 800bcf8:	b903      	cbnz	r3, 800bcfc <__sflush_r+0x78>
 800bcfa:	6560      	str	r0, [r4, #84]	; 0x54
 800bcfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bcfe:	602f      	str	r7, [r5, #0]
 800bd00:	2900      	cmp	r1, #0
 800bd02:	d0cb      	beq.n	800bc9c <__sflush_r+0x18>
 800bd04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd08:	4299      	cmp	r1, r3
 800bd0a:	d002      	beq.n	800bd12 <__sflush_r+0x8e>
 800bd0c:	4628      	mov	r0, r5
 800bd0e:	f000 fc45 	bl	800c59c <_free_r>
 800bd12:	2000      	movs	r0, #0
 800bd14:	6360      	str	r0, [r4, #52]	; 0x34
 800bd16:	e7c2      	b.n	800bc9e <__sflush_r+0x1a>
 800bd18:	6a21      	ldr	r1, [r4, #32]
 800bd1a:	2301      	movs	r3, #1
 800bd1c:	4628      	mov	r0, r5
 800bd1e:	47b0      	blx	r6
 800bd20:	1c41      	adds	r1, r0, #1
 800bd22:	d1c7      	bne.n	800bcb4 <__sflush_r+0x30>
 800bd24:	682b      	ldr	r3, [r5, #0]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d0c4      	beq.n	800bcb4 <__sflush_r+0x30>
 800bd2a:	2b1d      	cmp	r3, #29
 800bd2c:	d001      	beq.n	800bd32 <__sflush_r+0xae>
 800bd2e:	2b16      	cmp	r3, #22
 800bd30:	d101      	bne.n	800bd36 <__sflush_r+0xb2>
 800bd32:	602f      	str	r7, [r5, #0]
 800bd34:	e7b2      	b.n	800bc9c <__sflush_r+0x18>
 800bd36:	89a3      	ldrh	r3, [r4, #12]
 800bd38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd3c:	81a3      	strh	r3, [r4, #12]
 800bd3e:	e7ae      	b.n	800bc9e <__sflush_r+0x1a>
 800bd40:	690f      	ldr	r7, [r1, #16]
 800bd42:	2f00      	cmp	r7, #0
 800bd44:	d0aa      	beq.n	800bc9c <__sflush_r+0x18>
 800bd46:	0793      	lsls	r3, r2, #30
 800bd48:	680e      	ldr	r6, [r1, #0]
 800bd4a:	bf08      	it	eq
 800bd4c:	694b      	ldreq	r3, [r1, #20]
 800bd4e:	600f      	str	r7, [r1, #0]
 800bd50:	bf18      	it	ne
 800bd52:	2300      	movne	r3, #0
 800bd54:	1bf6      	subs	r6, r6, r7
 800bd56:	608b      	str	r3, [r1, #8]
 800bd58:	2e00      	cmp	r6, #0
 800bd5a:	dd9f      	ble.n	800bc9c <__sflush_r+0x18>
 800bd5c:	6a21      	ldr	r1, [r4, #32]
 800bd5e:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800bd62:	4633      	mov	r3, r6
 800bd64:	463a      	mov	r2, r7
 800bd66:	4628      	mov	r0, r5
 800bd68:	47e0      	blx	ip
 800bd6a:	2800      	cmp	r0, #0
 800bd6c:	dc06      	bgt.n	800bd7c <__sflush_r+0xf8>
 800bd6e:	89a3      	ldrh	r3, [r4, #12]
 800bd70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd74:	81a3      	strh	r3, [r4, #12]
 800bd76:	f04f 30ff 	mov.w	r0, #4294967295
 800bd7a:	e790      	b.n	800bc9e <__sflush_r+0x1a>
 800bd7c:	4407      	add	r7, r0
 800bd7e:	1a36      	subs	r6, r6, r0
 800bd80:	e7ea      	b.n	800bd58 <__sflush_r+0xd4>
 800bd82:	bf00      	nop
 800bd84:	20400001 	.word	0x20400001

0800bd88 <_fflush_r>:
 800bd88:	b538      	push	{r3, r4, r5, lr}
 800bd8a:	690b      	ldr	r3, [r1, #16]
 800bd8c:	4605      	mov	r5, r0
 800bd8e:	460c      	mov	r4, r1
 800bd90:	b913      	cbnz	r3, 800bd98 <_fflush_r+0x10>
 800bd92:	2500      	movs	r5, #0
 800bd94:	4628      	mov	r0, r5
 800bd96:	bd38      	pop	{r3, r4, r5, pc}
 800bd98:	b118      	cbz	r0, 800bda2 <_fflush_r+0x1a>
 800bd9a:	6983      	ldr	r3, [r0, #24]
 800bd9c:	b90b      	cbnz	r3, 800bda2 <_fflush_r+0x1a>
 800bd9e:	f7fe f96b 	bl	800a078 <__sinit>
 800bda2:	4b14      	ldr	r3, [pc, #80]	; (800bdf4 <_fflush_r+0x6c>)
 800bda4:	429c      	cmp	r4, r3
 800bda6:	d11b      	bne.n	800bde0 <_fflush_r+0x58>
 800bda8:	686c      	ldr	r4, [r5, #4]
 800bdaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d0ef      	beq.n	800bd92 <_fflush_r+0xa>
 800bdb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bdb4:	07d0      	lsls	r0, r2, #31
 800bdb6:	d404      	bmi.n	800bdc2 <_fflush_r+0x3a>
 800bdb8:	0599      	lsls	r1, r3, #22
 800bdba:	d402      	bmi.n	800bdc2 <_fflush_r+0x3a>
 800bdbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bdbe:	f7fe fa1e 	bl	800a1fe <__retarget_lock_acquire_recursive>
 800bdc2:	4628      	mov	r0, r5
 800bdc4:	4621      	mov	r1, r4
 800bdc6:	f7ff ff5d 	bl	800bc84 <__sflush_r>
 800bdca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bdcc:	07da      	lsls	r2, r3, #31
 800bdce:	4605      	mov	r5, r0
 800bdd0:	d4e0      	bmi.n	800bd94 <_fflush_r+0xc>
 800bdd2:	89a3      	ldrh	r3, [r4, #12]
 800bdd4:	059b      	lsls	r3, r3, #22
 800bdd6:	d4dd      	bmi.n	800bd94 <_fflush_r+0xc>
 800bdd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bdda:	f7fe fa11 	bl	800a200 <__retarget_lock_release_recursive>
 800bdde:	e7d9      	b.n	800bd94 <_fflush_r+0xc>
 800bde0:	4b05      	ldr	r3, [pc, #20]	; (800bdf8 <_fflush_r+0x70>)
 800bde2:	429c      	cmp	r4, r3
 800bde4:	d101      	bne.n	800bdea <_fflush_r+0x62>
 800bde6:	68ac      	ldr	r4, [r5, #8]
 800bde8:	e7df      	b.n	800bdaa <_fflush_r+0x22>
 800bdea:	4b04      	ldr	r3, [pc, #16]	; (800bdfc <_fflush_r+0x74>)
 800bdec:	429c      	cmp	r4, r3
 800bdee:	bf08      	it	eq
 800bdf0:	68ec      	ldreq	r4, [r5, #12]
 800bdf2:	e7da      	b.n	800bdaa <_fflush_r+0x22>
 800bdf4:	0800d848 	.word	0x0800d848
 800bdf8:	0800d868 	.word	0x0800d868
 800bdfc:	0800d828 	.word	0x0800d828

0800be00 <fiprintf>:
 800be00:	b40e      	push	{r1, r2, r3}
 800be02:	b503      	push	{r0, r1, lr}
 800be04:	4601      	mov	r1, r0
 800be06:	ab03      	add	r3, sp, #12
 800be08:	4805      	ldr	r0, [pc, #20]	; (800be20 <fiprintf+0x20>)
 800be0a:	f853 2b04 	ldr.w	r2, [r3], #4
 800be0e:	6800      	ldr	r0, [r0, #0]
 800be10:	9301      	str	r3, [sp, #4]
 800be12:	f000 fd91 	bl	800c938 <_vfiprintf_r>
 800be16:	b002      	add	sp, #8
 800be18:	f85d eb04 	ldr.w	lr, [sp], #4
 800be1c:	b003      	add	sp, #12
 800be1e:	4770      	bx	lr
 800be20:	20000010 	.word	0x20000010

0800be24 <_localeconv_r>:
 800be24:	4800      	ldr	r0, [pc, #0]	; (800be28 <_localeconv_r+0x4>)
 800be26:	4770      	bx	lr
 800be28:	20000164 	.word	0x20000164

0800be2c <_lseek_r>:
 800be2c:	b538      	push	{r3, r4, r5, lr}
 800be2e:	4d07      	ldr	r5, [pc, #28]	; (800be4c <_lseek_r+0x20>)
 800be30:	4604      	mov	r4, r0
 800be32:	4608      	mov	r0, r1
 800be34:	4611      	mov	r1, r2
 800be36:	2200      	movs	r2, #0
 800be38:	602a      	str	r2, [r5, #0]
 800be3a:	461a      	mov	r2, r3
 800be3c:	f7f5 ff0c 	bl	8001c58 <_lseek>
 800be40:	1c43      	adds	r3, r0, #1
 800be42:	d102      	bne.n	800be4a <_lseek_r+0x1e>
 800be44:	682b      	ldr	r3, [r5, #0]
 800be46:	b103      	cbz	r3, 800be4a <_lseek_r+0x1e>
 800be48:	6023      	str	r3, [r4, #0]
 800be4a:	bd38      	pop	{r3, r4, r5, pc}
 800be4c:	20001c34 	.word	0x20001c34

0800be50 <malloc>:
 800be50:	4b02      	ldr	r3, [pc, #8]	; (800be5c <malloc+0xc>)
 800be52:	4601      	mov	r1, r0
 800be54:	6818      	ldr	r0, [r3, #0]
 800be56:	f7fe ba0b 	b.w	800a270 <_malloc_r>
 800be5a:	bf00      	nop
 800be5c:	20000010 	.word	0x20000010

0800be60 <__malloc_lock>:
 800be60:	4801      	ldr	r0, [pc, #4]	; (800be68 <__malloc_lock+0x8>)
 800be62:	f7fe b9cc 	b.w	800a1fe <__retarget_lock_acquire_recursive>
 800be66:	bf00      	nop
 800be68:	20001c28 	.word	0x20001c28

0800be6c <__malloc_unlock>:
 800be6c:	4801      	ldr	r0, [pc, #4]	; (800be74 <__malloc_unlock+0x8>)
 800be6e:	f7fe b9c7 	b.w	800a200 <__retarget_lock_release_recursive>
 800be72:	bf00      	nop
 800be74:	20001c28 	.word	0x20001c28

0800be78 <_Balloc>:
 800be78:	b570      	push	{r4, r5, r6, lr}
 800be7a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800be7c:	4604      	mov	r4, r0
 800be7e:	460d      	mov	r5, r1
 800be80:	b976      	cbnz	r6, 800bea0 <_Balloc+0x28>
 800be82:	2010      	movs	r0, #16
 800be84:	f7ff ffe4 	bl	800be50 <malloc>
 800be88:	4602      	mov	r2, r0
 800be8a:	6260      	str	r0, [r4, #36]	; 0x24
 800be8c:	b920      	cbnz	r0, 800be98 <_Balloc+0x20>
 800be8e:	4b18      	ldr	r3, [pc, #96]	; (800bef0 <_Balloc+0x78>)
 800be90:	4818      	ldr	r0, [pc, #96]	; (800bef4 <_Balloc+0x7c>)
 800be92:	2166      	movs	r1, #102	; 0x66
 800be94:	f7ff f850 	bl	800af38 <__assert_func>
 800be98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800be9c:	6006      	str	r6, [r0, #0]
 800be9e:	60c6      	str	r6, [r0, #12]
 800bea0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bea2:	68f3      	ldr	r3, [r6, #12]
 800bea4:	b183      	cbz	r3, 800bec8 <_Balloc+0x50>
 800bea6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bea8:	68db      	ldr	r3, [r3, #12]
 800beaa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800beae:	b9b8      	cbnz	r0, 800bee0 <_Balloc+0x68>
 800beb0:	2101      	movs	r1, #1
 800beb2:	fa01 f605 	lsl.w	r6, r1, r5
 800beb6:	1d72      	adds	r2, r6, #5
 800beb8:	0092      	lsls	r2, r2, #2
 800beba:	4620      	mov	r0, r4
 800bebc:	f000 fb5a 	bl	800c574 <_calloc_r>
 800bec0:	b160      	cbz	r0, 800bedc <_Balloc+0x64>
 800bec2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bec6:	e00e      	b.n	800bee6 <_Balloc+0x6e>
 800bec8:	2221      	movs	r2, #33	; 0x21
 800beca:	2104      	movs	r1, #4
 800becc:	4620      	mov	r0, r4
 800bece:	f000 fb51 	bl	800c574 <_calloc_r>
 800bed2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bed4:	60f0      	str	r0, [r6, #12]
 800bed6:	68db      	ldr	r3, [r3, #12]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d1e4      	bne.n	800bea6 <_Balloc+0x2e>
 800bedc:	2000      	movs	r0, #0
 800bede:	bd70      	pop	{r4, r5, r6, pc}
 800bee0:	6802      	ldr	r2, [r0, #0]
 800bee2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bee6:	2300      	movs	r3, #0
 800bee8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800beec:	e7f7      	b.n	800bede <_Balloc+0x66>
 800beee:	bf00      	nop
 800bef0:	0800d8c0 	.word	0x0800d8c0
 800bef4:	0800d9e9 	.word	0x0800d9e9

0800bef8 <_Bfree>:
 800bef8:	b570      	push	{r4, r5, r6, lr}
 800befa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800befc:	4605      	mov	r5, r0
 800befe:	460c      	mov	r4, r1
 800bf00:	b976      	cbnz	r6, 800bf20 <_Bfree+0x28>
 800bf02:	2010      	movs	r0, #16
 800bf04:	f7ff ffa4 	bl	800be50 <malloc>
 800bf08:	4602      	mov	r2, r0
 800bf0a:	6268      	str	r0, [r5, #36]	; 0x24
 800bf0c:	b920      	cbnz	r0, 800bf18 <_Bfree+0x20>
 800bf0e:	4b09      	ldr	r3, [pc, #36]	; (800bf34 <_Bfree+0x3c>)
 800bf10:	4809      	ldr	r0, [pc, #36]	; (800bf38 <_Bfree+0x40>)
 800bf12:	218a      	movs	r1, #138	; 0x8a
 800bf14:	f7ff f810 	bl	800af38 <__assert_func>
 800bf18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf1c:	6006      	str	r6, [r0, #0]
 800bf1e:	60c6      	str	r6, [r0, #12]
 800bf20:	b13c      	cbz	r4, 800bf32 <_Bfree+0x3a>
 800bf22:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bf24:	6862      	ldr	r2, [r4, #4]
 800bf26:	68db      	ldr	r3, [r3, #12]
 800bf28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bf2c:	6021      	str	r1, [r4, #0]
 800bf2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bf32:	bd70      	pop	{r4, r5, r6, pc}
 800bf34:	0800d8c0 	.word	0x0800d8c0
 800bf38:	0800d9e9 	.word	0x0800d9e9

0800bf3c <__multadd>:
 800bf3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf40:	690d      	ldr	r5, [r1, #16]
 800bf42:	4607      	mov	r7, r0
 800bf44:	460c      	mov	r4, r1
 800bf46:	461e      	mov	r6, r3
 800bf48:	f101 0c14 	add.w	ip, r1, #20
 800bf4c:	2000      	movs	r0, #0
 800bf4e:	f8dc 3000 	ldr.w	r3, [ip]
 800bf52:	b299      	uxth	r1, r3
 800bf54:	fb02 6101 	mla	r1, r2, r1, r6
 800bf58:	0c1e      	lsrs	r6, r3, #16
 800bf5a:	0c0b      	lsrs	r3, r1, #16
 800bf5c:	fb02 3306 	mla	r3, r2, r6, r3
 800bf60:	b289      	uxth	r1, r1
 800bf62:	3001      	adds	r0, #1
 800bf64:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bf68:	4285      	cmp	r5, r0
 800bf6a:	f84c 1b04 	str.w	r1, [ip], #4
 800bf6e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bf72:	dcec      	bgt.n	800bf4e <__multadd+0x12>
 800bf74:	b30e      	cbz	r6, 800bfba <__multadd+0x7e>
 800bf76:	68a3      	ldr	r3, [r4, #8]
 800bf78:	42ab      	cmp	r3, r5
 800bf7a:	dc19      	bgt.n	800bfb0 <__multadd+0x74>
 800bf7c:	6861      	ldr	r1, [r4, #4]
 800bf7e:	4638      	mov	r0, r7
 800bf80:	3101      	adds	r1, #1
 800bf82:	f7ff ff79 	bl	800be78 <_Balloc>
 800bf86:	4680      	mov	r8, r0
 800bf88:	b928      	cbnz	r0, 800bf96 <__multadd+0x5a>
 800bf8a:	4602      	mov	r2, r0
 800bf8c:	4b0c      	ldr	r3, [pc, #48]	; (800bfc0 <__multadd+0x84>)
 800bf8e:	480d      	ldr	r0, [pc, #52]	; (800bfc4 <__multadd+0x88>)
 800bf90:	21b5      	movs	r1, #181	; 0xb5
 800bf92:	f7fe ffd1 	bl	800af38 <__assert_func>
 800bf96:	6922      	ldr	r2, [r4, #16]
 800bf98:	3202      	adds	r2, #2
 800bf9a:	f104 010c 	add.w	r1, r4, #12
 800bf9e:	0092      	lsls	r2, r2, #2
 800bfa0:	300c      	adds	r0, #12
 800bfa2:	f7fe f92e 	bl	800a202 <memcpy>
 800bfa6:	4621      	mov	r1, r4
 800bfa8:	4638      	mov	r0, r7
 800bfaa:	f7ff ffa5 	bl	800bef8 <_Bfree>
 800bfae:	4644      	mov	r4, r8
 800bfb0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bfb4:	3501      	adds	r5, #1
 800bfb6:	615e      	str	r6, [r3, #20]
 800bfb8:	6125      	str	r5, [r4, #16]
 800bfba:	4620      	mov	r0, r4
 800bfbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfc0:	0800d9d8 	.word	0x0800d9d8
 800bfc4:	0800d9e9 	.word	0x0800d9e9

0800bfc8 <__hi0bits>:
 800bfc8:	0c02      	lsrs	r2, r0, #16
 800bfca:	0412      	lsls	r2, r2, #16
 800bfcc:	4603      	mov	r3, r0
 800bfce:	b9ca      	cbnz	r2, 800c004 <__hi0bits+0x3c>
 800bfd0:	0403      	lsls	r3, r0, #16
 800bfd2:	2010      	movs	r0, #16
 800bfd4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800bfd8:	bf04      	itt	eq
 800bfda:	021b      	lsleq	r3, r3, #8
 800bfdc:	3008      	addeq	r0, #8
 800bfde:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800bfe2:	bf04      	itt	eq
 800bfe4:	011b      	lsleq	r3, r3, #4
 800bfe6:	3004      	addeq	r0, #4
 800bfe8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800bfec:	bf04      	itt	eq
 800bfee:	009b      	lsleq	r3, r3, #2
 800bff0:	3002      	addeq	r0, #2
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	db05      	blt.n	800c002 <__hi0bits+0x3a>
 800bff6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800bffa:	f100 0001 	add.w	r0, r0, #1
 800bffe:	bf08      	it	eq
 800c000:	2020      	moveq	r0, #32
 800c002:	4770      	bx	lr
 800c004:	2000      	movs	r0, #0
 800c006:	e7e5      	b.n	800bfd4 <__hi0bits+0xc>

0800c008 <__lo0bits>:
 800c008:	6803      	ldr	r3, [r0, #0]
 800c00a:	4602      	mov	r2, r0
 800c00c:	f013 0007 	ands.w	r0, r3, #7
 800c010:	d00b      	beq.n	800c02a <__lo0bits+0x22>
 800c012:	07d9      	lsls	r1, r3, #31
 800c014:	d421      	bmi.n	800c05a <__lo0bits+0x52>
 800c016:	0798      	lsls	r0, r3, #30
 800c018:	bf49      	itett	mi
 800c01a:	085b      	lsrmi	r3, r3, #1
 800c01c:	089b      	lsrpl	r3, r3, #2
 800c01e:	2001      	movmi	r0, #1
 800c020:	6013      	strmi	r3, [r2, #0]
 800c022:	bf5c      	itt	pl
 800c024:	6013      	strpl	r3, [r2, #0]
 800c026:	2002      	movpl	r0, #2
 800c028:	4770      	bx	lr
 800c02a:	b299      	uxth	r1, r3
 800c02c:	b909      	cbnz	r1, 800c032 <__lo0bits+0x2a>
 800c02e:	0c1b      	lsrs	r3, r3, #16
 800c030:	2010      	movs	r0, #16
 800c032:	b2d9      	uxtb	r1, r3
 800c034:	b909      	cbnz	r1, 800c03a <__lo0bits+0x32>
 800c036:	3008      	adds	r0, #8
 800c038:	0a1b      	lsrs	r3, r3, #8
 800c03a:	0719      	lsls	r1, r3, #28
 800c03c:	bf04      	itt	eq
 800c03e:	091b      	lsreq	r3, r3, #4
 800c040:	3004      	addeq	r0, #4
 800c042:	0799      	lsls	r1, r3, #30
 800c044:	bf04      	itt	eq
 800c046:	089b      	lsreq	r3, r3, #2
 800c048:	3002      	addeq	r0, #2
 800c04a:	07d9      	lsls	r1, r3, #31
 800c04c:	d403      	bmi.n	800c056 <__lo0bits+0x4e>
 800c04e:	085b      	lsrs	r3, r3, #1
 800c050:	f100 0001 	add.w	r0, r0, #1
 800c054:	d003      	beq.n	800c05e <__lo0bits+0x56>
 800c056:	6013      	str	r3, [r2, #0]
 800c058:	4770      	bx	lr
 800c05a:	2000      	movs	r0, #0
 800c05c:	4770      	bx	lr
 800c05e:	2020      	movs	r0, #32
 800c060:	4770      	bx	lr
	...

0800c064 <__i2b>:
 800c064:	b510      	push	{r4, lr}
 800c066:	460c      	mov	r4, r1
 800c068:	2101      	movs	r1, #1
 800c06a:	f7ff ff05 	bl	800be78 <_Balloc>
 800c06e:	4602      	mov	r2, r0
 800c070:	b928      	cbnz	r0, 800c07e <__i2b+0x1a>
 800c072:	4b05      	ldr	r3, [pc, #20]	; (800c088 <__i2b+0x24>)
 800c074:	4805      	ldr	r0, [pc, #20]	; (800c08c <__i2b+0x28>)
 800c076:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c07a:	f7fe ff5d 	bl	800af38 <__assert_func>
 800c07e:	2301      	movs	r3, #1
 800c080:	6144      	str	r4, [r0, #20]
 800c082:	6103      	str	r3, [r0, #16]
 800c084:	bd10      	pop	{r4, pc}
 800c086:	bf00      	nop
 800c088:	0800d9d8 	.word	0x0800d9d8
 800c08c:	0800d9e9 	.word	0x0800d9e9

0800c090 <__multiply>:
 800c090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c094:	4691      	mov	r9, r2
 800c096:	690a      	ldr	r2, [r1, #16]
 800c098:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c09c:	429a      	cmp	r2, r3
 800c09e:	bfb8      	it	lt
 800c0a0:	460b      	movlt	r3, r1
 800c0a2:	460c      	mov	r4, r1
 800c0a4:	bfbc      	itt	lt
 800c0a6:	464c      	movlt	r4, r9
 800c0a8:	4699      	movlt	r9, r3
 800c0aa:	6927      	ldr	r7, [r4, #16]
 800c0ac:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c0b0:	68a3      	ldr	r3, [r4, #8]
 800c0b2:	6861      	ldr	r1, [r4, #4]
 800c0b4:	eb07 060a 	add.w	r6, r7, sl
 800c0b8:	42b3      	cmp	r3, r6
 800c0ba:	b085      	sub	sp, #20
 800c0bc:	bfb8      	it	lt
 800c0be:	3101      	addlt	r1, #1
 800c0c0:	f7ff feda 	bl	800be78 <_Balloc>
 800c0c4:	b930      	cbnz	r0, 800c0d4 <__multiply+0x44>
 800c0c6:	4602      	mov	r2, r0
 800c0c8:	4b43      	ldr	r3, [pc, #268]	; (800c1d8 <__multiply+0x148>)
 800c0ca:	4844      	ldr	r0, [pc, #272]	; (800c1dc <__multiply+0x14c>)
 800c0cc:	f240 115d 	movw	r1, #349	; 0x15d
 800c0d0:	f7fe ff32 	bl	800af38 <__assert_func>
 800c0d4:	f100 0514 	add.w	r5, r0, #20
 800c0d8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c0dc:	462b      	mov	r3, r5
 800c0de:	2200      	movs	r2, #0
 800c0e0:	4543      	cmp	r3, r8
 800c0e2:	d321      	bcc.n	800c128 <__multiply+0x98>
 800c0e4:	f104 0314 	add.w	r3, r4, #20
 800c0e8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c0ec:	f109 0314 	add.w	r3, r9, #20
 800c0f0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c0f4:	9202      	str	r2, [sp, #8]
 800c0f6:	1b3a      	subs	r2, r7, r4
 800c0f8:	3a15      	subs	r2, #21
 800c0fa:	f022 0203 	bic.w	r2, r2, #3
 800c0fe:	3204      	adds	r2, #4
 800c100:	f104 0115 	add.w	r1, r4, #21
 800c104:	428f      	cmp	r7, r1
 800c106:	bf38      	it	cc
 800c108:	2204      	movcc	r2, #4
 800c10a:	9201      	str	r2, [sp, #4]
 800c10c:	9a02      	ldr	r2, [sp, #8]
 800c10e:	9303      	str	r3, [sp, #12]
 800c110:	429a      	cmp	r2, r3
 800c112:	d80c      	bhi.n	800c12e <__multiply+0x9e>
 800c114:	2e00      	cmp	r6, #0
 800c116:	dd03      	ble.n	800c120 <__multiply+0x90>
 800c118:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d059      	beq.n	800c1d4 <__multiply+0x144>
 800c120:	6106      	str	r6, [r0, #16]
 800c122:	b005      	add	sp, #20
 800c124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c128:	f843 2b04 	str.w	r2, [r3], #4
 800c12c:	e7d8      	b.n	800c0e0 <__multiply+0x50>
 800c12e:	f8b3 a000 	ldrh.w	sl, [r3]
 800c132:	f1ba 0f00 	cmp.w	sl, #0
 800c136:	d023      	beq.n	800c180 <__multiply+0xf0>
 800c138:	f104 0e14 	add.w	lr, r4, #20
 800c13c:	46a9      	mov	r9, r5
 800c13e:	f04f 0c00 	mov.w	ip, #0
 800c142:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c146:	f8d9 1000 	ldr.w	r1, [r9]
 800c14a:	fa1f fb82 	uxth.w	fp, r2
 800c14e:	b289      	uxth	r1, r1
 800c150:	fb0a 110b 	mla	r1, sl, fp, r1
 800c154:	4461      	add	r1, ip
 800c156:	f8d9 c000 	ldr.w	ip, [r9]
 800c15a:	0c12      	lsrs	r2, r2, #16
 800c15c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800c160:	fb0a c202 	mla	r2, sl, r2, ip
 800c164:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c168:	b289      	uxth	r1, r1
 800c16a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c16e:	4577      	cmp	r7, lr
 800c170:	f849 1b04 	str.w	r1, [r9], #4
 800c174:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c178:	d8e3      	bhi.n	800c142 <__multiply+0xb2>
 800c17a:	9a01      	ldr	r2, [sp, #4]
 800c17c:	f845 c002 	str.w	ip, [r5, r2]
 800c180:	9a03      	ldr	r2, [sp, #12]
 800c182:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c186:	3304      	adds	r3, #4
 800c188:	f1b9 0f00 	cmp.w	r9, #0
 800c18c:	d020      	beq.n	800c1d0 <__multiply+0x140>
 800c18e:	6829      	ldr	r1, [r5, #0]
 800c190:	f104 0c14 	add.w	ip, r4, #20
 800c194:	46ae      	mov	lr, r5
 800c196:	f04f 0a00 	mov.w	sl, #0
 800c19a:	f8bc b000 	ldrh.w	fp, [ip]
 800c19e:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c1a2:	fb09 220b 	mla	r2, r9, fp, r2
 800c1a6:	4492      	add	sl, r2
 800c1a8:	b289      	uxth	r1, r1
 800c1aa:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c1ae:	f84e 1b04 	str.w	r1, [lr], #4
 800c1b2:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c1b6:	f8be 1000 	ldrh.w	r1, [lr]
 800c1ba:	0c12      	lsrs	r2, r2, #16
 800c1bc:	fb09 1102 	mla	r1, r9, r2, r1
 800c1c0:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c1c4:	4567      	cmp	r7, ip
 800c1c6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c1ca:	d8e6      	bhi.n	800c19a <__multiply+0x10a>
 800c1cc:	9a01      	ldr	r2, [sp, #4]
 800c1ce:	50a9      	str	r1, [r5, r2]
 800c1d0:	3504      	adds	r5, #4
 800c1d2:	e79b      	b.n	800c10c <__multiply+0x7c>
 800c1d4:	3e01      	subs	r6, #1
 800c1d6:	e79d      	b.n	800c114 <__multiply+0x84>
 800c1d8:	0800d9d8 	.word	0x0800d9d8
 800c1dc:	0800d9e9 	.word	0x0800d9e9

0800c1e0 <__pow5mult>:
 800c1e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1e4:	4615      	mov	r5, r2
 800c1e6:	f012 0203 	ands.w	r2, r2, #3
 800c1ea:	4606      	mov	r6, r0
 800c1ec:	460f      	mov	r7, r1
 800c1ee:	d007      	beq.n	800c200 <__pow5mult+0x20>
 800c1f0:	4c25      	ldr	r4, [pc, #148]	; (800c288 <__pow5mult+0xa8>)
 800c1f2:	3a01      	subs	r2, #1
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c1fa:	f7ff fe9f 	bl	800bf3c <__multadd>
 800c1fe:	4607      	mov	r7, r0
 800c200:	10ad      	asrs	r5, r5, #2
 800c202:	d03d      	beq.n	800c280 <__pow5mult+0xa0>
 800c204:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c206:	b97c      	cbnz	r4, 800c228 <__pow5mult+0x48>
 800c208:	2010      	movs	r0, #16
 800c20a:	f7ff fe21 	bl	800be50 <malloc>
 800c20e:	4602      	mov	r2, r0
 800c210:	6270      	str	r0, [r6, #36]	; 0x24
 800c212:	b928      	cbnz	r0, 800c220 <__pow5mult+0x40>
 800c214:	4b1d      	ldr	r3, [pc, #116]	; (800c28c <__pow5mult+0xac>)
 800c216:	481e      	ldr	r0, [pc, #120]	; (800c290 <__pow5mult+0xb0>)
 800c218:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c21c:	f7fe fe8c 	bl	800af38 <__assert_func>
 800c220:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c224:	6004      	str	r4, [r0, #0]
 800c226:	60c4      	str	r4, [r0, #12]
 800c228:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c22c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c230:	b94c      	cbnz	r4, 800c246 <__pow5mult+0x66>
 800c232:	f240 2171 	movw	r1, #625	; 0x271
 800c236:	4630      	mov	r0, r6
 800c238:	f7ff ff14 	bl	800c064 <__i2b>
 800c23c:	2300      	movs	r3, #0
 800c23e:	f8c8 0008 	str.w	r0, [r8, #8]
 800c242:	4604      	mov	r4, r0
 800c244:	6003      	str	r3, [r0, #0]
 800c246:	f04f 0900 	mov.w	r9, #0
 800c24a:	07eb      	lsls	r3, r5, #31
 800c24c:	d50a      	bpl.n	800c264 <__pow5mult+0x84>
 800c24e:	4639      	mov	r1, r7
 800c250:	4622      	mov	r2, r4
 800c252:	4630      	mov	r0, r6
 800c254:	f7ff ff1c 	bl	800c090 <__multiply>
 800c258:	4639      	mov	r1, r7
 800c25a:	4680      	mov	r8, r0
 800c25c:	4630      	mov	r0, r6
 800c25e:	f7ff fe4b 	bl	800bef8 <_Bfree>
 800c262:	4647      	mov	r7, r8
 800c264:	106d      	asrs	r5, r5, #1
 800c266:	d00b      	beq.n	800c280 <__pow5mult+0xa0>
 800c268:	6820      	ldr	r0, [r4, #0]
 800c26a:	b938      	cbnz	r0, 800c27c <__pow5mult+0x9c>
 800c26c:	4622      	mov	r2, r4
 800c26e:	4621      	mov	r1, r4
 800c270:	4630      	mov	r0, r6
 800c272:	f7ff ff0d 	bl	800c090 <__multiply>
 800c276:	6020      	str	r0, [r4, #0]
 800c278:	f8c0 9000 	str.w	r9, [r0]
 800c27c:	4604      	mov	r4, r0
 800c27e:	e7e4      	b.n	800c24a <__pow5mult+0x6a>
 800c280:	4638      	mov	r0, r7
 800c282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c286:	bf00      	nop
 800c288:	0800db38 	.word	0x0800db38
 800c28c:	0800d8c0 	.word	0x0800d8c0
 800c290:	0800d9e9 	.word	0x0800d9e9

0800c294 <__lshift>:
 800c294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c298:	460c      	mov	r4, r1
 800c29a:	6849      	ldr	r1, [r1, #4]
 800c29c:	6923      	ldr	r3, [r4, #16]
 800c29e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c2a2:	68a3      	ldr	r3, [r4, #8]
 800c2a4:	4607      	mov	r7, r0
 800c2a6:	4691      	mov	r9, r2
 800c2a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c2ac:	f108 0601 	add.w	r6, r8, #1
 800c2b0:	42b3      	cmp	r3, r6
 800c2b2:	db0b      	blt.n	800c2cc <__lshift+0x38>
 800c2b4:	4638      	mov	r0, r7
 800c2b6:	f7ff fddf 	bl	800be78 <_Balloc>
 800c2ba:	4605      	mov	r5, r0
 800c2bc:	b948      	cbnz	r0, 800c2d2 <__lshift+0x3e>
 800c2be:	4602      	mov	r2, r0
 800c2c0:	4b2a      	ldr	r3, [pc, #168]	; (800c36c <__lshift+0xd8>)
 800c2c2:	482b      	ldr	r0, [pc, #172]	; (800c370 <__lshift+0xdc>)
 800c2c4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c2c8:	f7fe fe36 	bl	800af38 <__assert_func>
 800c2cc:	3101      	adds	r1, #1
 800c2ce:	005b      	lsls	r3, r3, #1
 800c2d0:	e7ee      	b.n	800c2b0 <__lshift+0x1c>
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	f100 0114 	add.w	r1, r0, #20
 800c2d8:	f100 0210 	add.w	r2, r0, #16
 800c2dc:	4618      	mov	r0, r3
 800c2de:	4553      	cmp	r3, sl
 800c2e0:	db37      	blt.n	800c352 <__lshift+0xbe>
 800c2e2:	6920      	ldr	r0, [r4, #16]
 800c2e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c2e8:	f104 0314 	add.w	r3, r4, #20
 800c2ec:	f019 091f 	ands.w	r9, r9, #31
 800c2f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c2f4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c2f8:	d02f      	beq.n	800c35a <__lshift+0xc6>
 800c2fa:	f1c9 0e20 	rsb	lr, r9, #32
 800c2fe:	468a      	mov	sl, r1
 800c300:	f04f 0c00 	mov.w	ip, #0
 800c304:	681a      	ldr	r2, [r3, #0]
 800c306:	fa02 f209 	lsl.w	r2, r2, r9
 800c30a:	ea42 020c 	orr.w	r2, r2, ip
 800c30e:	f84a 2b04 	str.w	r2, [sl], #4
 800c312:	f853 2b04 	ldr.w	r2, [r3], #4
 800c316:	4298      	cmp	r0, r3
 800c318:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c31c:	d8f2      	bhi.n	800c304 <__lshift+0x70>
 800c31e:	1b03      	subs	r3, r0, r4
 800c320:	3b15      	subs	r3, #21
 800c322:	f023 0303 	bic.w	r3, r3, #3
 800c326:	3304      	adds	r3, #4
 800c328:	f104 0215 	add.w	r2, r4, #21
 800c32c:	4290      	cmp	r0, r2
 800c32e:	bf38      	it	cc
 800c330:	2304      	movcc	r3, #4
 800c332:	f841 c003 	str.w	ip, [r1, r3]
 800c336:	f1bc 0f00 	cmp.w	ip, #0
 800c33a:	d001      	beq.n	800c340 <__lshift+0xac>
 800c33c:	f108 0602 	add.w	r6, r8, #2
 800c340:	3e01      	subs	r6, #1
 800c342:	4638      	mov	r0, r7
 800c344:	612e      	str	r6, [r5, #16]
 800c346:	4621      	mov	r1, r4
 800c348:	f7ff fdd6 	bl	800bef8 <_Bfree>
 800c34c:	4628      	mov	r0, r5
 800c34e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c352:	f842 0f04 	str.w	r0, [r2, #4]!
 800c356:	3301      	adds	r3, #1
 800c358:	e7c1      	b.n	800c2de <__lshift+0x4a>
 800c35a:	3904      	subs	r1, #4
 800c35c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c360:	f841 2f04 	str.w	r2, [r1, #4]!
 800c364:	4298      	cmp	r0, r3
 800c366:	d8f9      	bhi.n	800c35c <__lshift+0xc8>
 800c368:	e7ea      	b.n	800c340 <__lshift+0xac>
 800c36a:	bf00      	nop
 800c36c:	0800d9d8 	.word	0x0800d9d8
 800c370:	0800d9e9 	.word	0x0800d9e9

0800c374 <__mcmp>:
 800c374:	690a      	ldr	r2, [r1, #16]
 800c376:	4603      	mov	r3, r0
 800c378:	6900      	ldr	r0, [r0, #16]
 800c37a:	1a80      	subs	r0, r0, r2
 800c37c:	b530      	push	{r4, r5, lr}
 800c37e:	d10d      	bne.n	800c39c <__mcmp+0x28>
 800c380:	3314      	adds	r3, #20
 800c382:	3114      	adds	r1, #20
 800c384:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c388:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c38c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c390:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c394:	4295      	cmp	r5, r2
 800c396:	d002      	beq.n	800c39e <__mcmp+0x2a>
 800c398:	d304      	bcc.n	800c3a4 <__mcmp+0x30>
 800c39a:	2001      	movs	r0, #1
 800c39c:	bd30      	pop	{r4, r5, pc}
 800c39e:	42a3      	cmp	r3, r4
 800c3a0:	d3f4      	bcc.n	800c38c <__mcmp+0x18>
 800c3a2:	e7fb      	b.n	800c39c <__mcmp+0x28>
 800c3a4:	f04f 30ff 	mov.w	r0, #4294967295
 800c3a8:	e7f8      	b.n	800c39c <__mcmp+0x28>
	...

0800c3ac <__mdiff>:
 800c3ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3b0:	460d      	mov	r5, r1
 800c3b2:	4607      	mov	r7, r0
 800c3b4:	4611      	mov	r1, r2
 800c3b6:	4628      	mov	r0, r5
 800c3b8:	4614      	mov	r4, r2
 800c3ba:	f7ff ffdb 	bl	800c374 <__mcmp>
 800c3be:	1e06      	subs	r6, r0, #0
 800c3c0:	d111      	bne.n	800c3e6 <__mdiff+0x3a>
 800c3c2:	4631      	mov	r1, r6
 800c3c4:	4638      	mov	r0, r7
 800c3c6:	f7ff fd57 	bl	800be78 <_Balloc>
 800c3ca:	4602      	mov	r2, r0
 800c3cc:	b928      	cbnz	r0, 800c3da <__mdiff+0x2e>
 800c3ce:	4b39      	ldr	r3, [pc, #228]	; (800c4b4 <__mdiff+0x108>)
 800c3d0:	f240 2132 	movw	r1, #562	; 0x232
 800c3d4:	4838      	ldr	r0, [pc, #224]	; (800c4b8 <__mdiff+0x10c>)
 800c3d6:	f7fe fdaf 	bl	800af38 <__assert_func>
 800c3da:	2301      	movs	r3, #1
 800c3dc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800c3e0:	4610      	mov	r0, r2
 800c3e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3e6:	bfa4      	itt	ge
 800c3e8:	4623      	movge	r3, r4
 800c3ea:	462c      	movge	r4, r5
 800c3ec:	4638      	mov	r0, r7
 800c3ee:	6861      	ldr	r1, [r4, #4]
 800c3f0:	bfa6      	itte	ge
 800c3f2:	461d      	movge	r5, r3
 800c3f4:	2600      	movge	r6, #0
 800c3f6:	2601      	movlt	r6, #1
 800c3f8:	f7ff fd3e 	bl	800be78 <_Balloc>
 800c3fc:	4602      	mov	r2, r0
 800c3fe:	b918      	cbnz	r0, 800c408 <__mdiff+0x5c>
 800c400:	4b2c      	ldr	r3, [pc, #176]	; (800c4b4 <__mdiff+0x108>)
 800c402:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c406:	e7e5      	b.n	800c3d4 <__mdiff+0x28>
 800c408:	6927      	ldr	r7, [r4, #16]
 800c40a:	60c6      	str	r6, [r0, #12]
 800c40c:	692e      	ldr	r6, [r5, #16]
 800c40e:	f104 0014 	add.w	r0, r4, #20
 800c412:	f105 0914 	add.w	r9, r5, #20
 800c416:	f102 0e14 	add.w	lr, r2, #20
 800c41a:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 800c41e:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c422:	3410      	adds	r4, #16
 800c424:	46f2      	mov	sl, lr
 800c426:	2100      	movs	r1, #0
 800c428:	f859 3b04 	ldr.w	r3, [r9], #4
 800c42c:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800c430:	fa1f f883 	uxth.w	r8, r3
 800c434:	fa11 f18b 	uxtah	r1, r1, fp
 800c438:	0c1b      	lsrs	r3, r3, #16
 800c43a:	eba1 0808 	sub.w	r8, r1, r8
 800c43e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c442:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c446:	fa1f f888 	uxth.w	r8, r8
 800c44a:	1419      	asrs	r1, r3, #16
 800c44c:	454e      	cmp	r6, r9
 800c44e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c452:	f84a 3b04 	str.w	r3, [sl], #4
 800c456:	d8e7      	bhi.n	800c428 <__mdiff+0x7c>
 800c458:	1b73      	subs	r3, r6, r5
 800c45a:	3b15      	subs	r3, #21
 800c45c:	f023 0303 	bic.w	r3, r3, #3
 800c460:	3304      	adds	r3, #4
 800c462:	3515      	adds	r5, #21
 800c464:	42ae      	cmp	r6, r5
 800c466:	bf38      	it	cc
 800c468:	2304      	movcc	r3, #4
 800c46a:	4418      	add	r0, r3
 800c46c:	4473      	add	r3, lr
 800c46e:	469e      	mov	lr, r3
 800c470:	4606      	mov	r6, r0
 800c472:	4566      	cmp	r6, ip
 800c474:	d30e      	bcc.n	800c494 <__mdiff+0xe8>
 800c476:	f10c 0103 	add.w	r1, ip, #3
 800c47a:	1a09      	subs	r1, r1, r0
 800c47c:	f021 0103 	bic.w	r1, r1, #3
 800c480:	3803      	subs	r0, #3
 800c482:	4584      	cmp	ip, r0
 800c484:	bf38      	it	cc
 800c486:	2100      	movcc	r1, #0
 800c488:	4419      	add	r1, r3
 800c48a:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800c48e:	b17b      	cbz	r3, 800c4b0 <__mdiff+0x104>
 800c490:	6117      	str	r7, [r2, #16]
 800c492:	e7a5      	b.n	800c3e0 <__mdiff+0x34>
 800c494:	f856 8b04 	ldr.w	r8, [r6], #4
 800c498:	fa11 f488 	uxtah	r4, r1, r8
 800c49c:	1425      	asrs	r5, r4, #16
 800c49e:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 800c4a2:	b2a4      	uxth	r4, r4
 800c4a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800c4a8:	f84e 4b04 	str.w	r4, [lr], #4
 800c4ac:	1429      	asrs	r1, r5, #16
 800c4ae:	e7e0      	b.n	800c472 <__mdiff+0xc6>
 800c4b0:	3f01      	subs	r7, #1
 800c4b2:	e7ea      	b.n	800c48a <__mdiff+0xde>
 800c4b4:	0800d9d8 	.word	0x0800d9d8
 800c4b8:	0800d9e9 	.word	0x0800d9e9

0800c4bc <__d2b>:
 800c4bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800c4c0:	2101      	movs	r1, #1
 800c4c2:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800c4c6:	4690      	mov	r8, r2
 800c4c8:	461d      	mov	r5, r3
 800c4ca:	f7ff fcd5 	bl	800be78 <_Balloc>
 800c4ce:	4604      	mov	r4, r0
 800c4d0:	b930      	cbnz	r0, 800c4e0 <__d2b+0x24>
 800c4d2:	4602      	mov	r2, r0
 800c4d4:	4b25      	ldr	r3, [pc, #148]	; (800c56c <__d2b+0xb0>)
 800c4d6:	4826      	ldr	r0, [pc, #152]	; (800c570 <__d2b+0xb4>)
 800c4d8:	f240 310a 	movw	r1, #778	; 0x30a
 800c4dc:	f7fe fd2c 	bl	800af38 <__assert_func>
 800c4e0:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800c4e4:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800c4e8:	bb2d      	cbnz	r5, 800c536 <__d2b+0x7a>
 800c4ea:	9301      	str	r3, [sp, #4]
 800c4ec:	f1b8 0300 	subs.w	r3, r8, #0
 800c4f0:	d026      	beq.n	800c540 <__d2b+0x84>
 800c4f2:	4668      	mov	r0, sp
 800c4f4:	9300      	str	r3, [sp, #0]
 800c4f6:	f7ff fd87 	bl	800c008 <__lo0bits>
 800c4fa:	9900      	ldr	r1, [sp, #0]
 800c4fc:	b1f0      	cbz	r0, 800c53c <__d2b+0x80>
 800c4fe:	9a01      	ldr	r2, [sp, #4]
 800c500:	f1c0 0320 	rsb	r3, r0, #32
 800c504:	fa02 f303 	lsl.w	r3, r2, r3
 800c508:	430b      	orrs	r3, r1
 800c50a:	40c2      	lsrs	r2, r0
 800c50c:	6163      	str	r3, [r4, #20]
 800c50e:	9201      	str	r2, [sp, #4]
 800c510:	9b01      	ldr	r3, [sp, #4]
 800c512:	61a3      	str	r3, [r4, #24]
 800c514:	2b00      	cmp	r3, #0
 800c516:	bf14      	ite	ne
 800c518:	2102      	movne	r1, #2
 800c51a:	2101      	moveq	r1, #1
 800c51c:	6121      	str	r1, [r4, #16]
 800c51e:	b1c5      	cbz	r5, 800c552 <__d2b+0x96>
 800c520:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c524:	4405      	add	r5, r0
 800c526:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c52a:	603d      	str	r5, [r7, #0]
 800c52c:	6030      	str	r0, [r6, #0]
 800c52e:	4620      	mov	r0, r4
 800c530:	b002      	add	sp, #8
 800c532:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c536:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c53a:	e7d6      	b.n	800c4ea <__d2b+0x2e>
 800c53c:	6161      	str	r1, [r4, #20]
 800c53e:	e7e7      	b.n	800c510 <__d2b+0x54>
 800c540:	a801      	add	r0, sp, #4
 800c542:	f7ff fd61 	bl	800c008 <__lo0bits>
 800c546:	9b01      	ldr	r3, [sp, #4]
 800c548:	6163      	str	r3, [r4, #20]
 800c54a:	2101      	movs	r1, #1
 800c54c:	6121      	str	r1, [r4, #16]
 800c54e:	3020      	adds	r0, #32
 800c550:	e7e5      	b.n	800c51e <__d2b+0x62>
 800c552:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800c556:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c55a:	6038      	str	r0, [r7, #0]
 800c55c:	6918      	ldr	r0, [r3, #16]
 800c55e:	f7ff fd33 	bl	800bfc8 <__hi0bits>
 800c562:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800c566:	6031      	str	r1, [r6, #0]
 800c568:	e7e1      	b.n	800c52e <__d2b+0x72>
 800c56a:	bf00      	nop
 800c56c:	0800d9d8 	.word	0x0800d9d8
 800c570:	0800d9e9 	.word	0x0800d9e9

0800c574 <_calloc_r>:
 800c574:	b570      	push	{r4, r5, r6, lr}
 800c576:	fba1 5402 	umull	r5, r4, r1, r2
 800c57a:	b934      	cbnz	r4, 800c58a <_calloc_r+0x16>
 800c57c:	4629      	mov	r1, r5
 800c57e:	f7fd fe77 	bl	800a270 <_malloc_r>
 800c582:	4606      	mov	r6, r0
 800c584:	b928      	cbnz	r0, 800c592 <_calloc_r+0x1e>
 800c586:	4630      	mov	r0, r6
 800c588:	bd70      	pop	{r4, r5, r6, pc}
 800c58a:	220c      	movs	r2, #12
 800c58c:	6002      	str	r2, [r0, #0]
 800c58e:	2600      	movs	r6, #0
 800c590:	e7f9      	b.n	800c586 <_calloc_r+0x12>
 800c592:	462a      	mov	r2, r5
 800c594:	4621      	mov	r1, r4
 800c596:	f7fd fe42 	bl	800a21e <memset>
 800c59a:	e7f4      	b.n	800c586 <_calloc_r+0x12>

0800c59c <_free_r>:
 800c59c:	b538      	push	{r3, r4, r5, lr}
 800c59e:	4605      	mov	r5, r0
 800c5a0:	2900      	cmp	r1, #0
 800c5a2:	d041      	beq.n	800c628 <_free_r+0x8c>
 800c5a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c5a8:	1f0c      	subs	r4, r1, #4
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	bfb8      	it	lt
 800c5ae:	18e4      	addlt	r4, r4, r3
 800c5b0:	f7ff fc56 	bl	800be60 <__malloc_lock>
 800c5b4:	4a1d      	ldr	r2, [pc, #116]	; (800c62c <_free_r+0x90>)
 800c5b6:	6813      	ldr	r3, [r2, #0]
 800c5b8:	b933      	cbnz	r3, 800c5c8 <_free_r+0x2c>
 800c5ba:	6063      	str	r3, [r4, #4]
 800c5bc:	6014      	str	r4, [r2, #0]
 800c5be:	4628      	mov	r0, r5
 800c5c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c5c4:	f7ff bc52 	b.w	800be6c <__malloc_unlock>
 800c5c8:	42a3      	cmp	r3, r4
 800c5ca:	d908      	bls.n	800c5de <_free_r+0x42>
 800c5cc:	6820      	ldr	r0, [r4, #0]
 800c5ce:	1821      	adds	r1, r4, r0
 800c5d0:	428b      	cmp	r3, r1
 800c5d2:	bf01      	itttt	eq
 800c5d4:	6819      	ldreq	r1, [r3, #0]
 800c5d6:	685b      	ldreq	r3, [r3, #4]
 800c5d8:	1809      	addeq	r1, r1, r0
 800c5da:	6021      	streq	r1, [r4, #0]
 800c5dc:	e7ed      	b.n	800c5ba <_free_r+0x1e>
 800c5de:	461a      	mov	r2, r3
 800c5e0:	685b      	ldr	r3, [r3, #4]
 800c5e2:	b10b      	cbz	r3, 800c5e8 <_free_r+0x4c>
 800c5e4:	42a3      	cmp	r3, r4
 800c5e6:	d9fa      	bls.n	800c5de <_free_r+0x42>
 800c5e8:	6811      	ldr	r1, [r2, #0]
 800c5ea:	1850      	adds	r0, r2, r1
 800c5ec:	42a0      	cmp	r0, r4
 800c5ee:	d10b      	bne.n	800c608 <_free_r+0x6c>
 800c5f0:	6820      	ldr	r0, [r4, #0]
 800c5f2:	4401      	add	r1, r0
 800c5f4:	1850      	adds	r0, r2, r1
 800c5f6:	4283      	cmp	r3, r0
 800c5f8:	6011      	str	r1, [r2, #0]
 800c5fa:	d1e0      	bne.n	800c5be <_free_r+0x22>
 800c5fc:	6818      	ldr	r0, [r3, #0]
 800c5fe:	685b      	ldr	r3, [r3, #4]
 800c600:	6053      	str	r3, [r2, #4]
 800c602:	4401      	add	r1, r0
 800c604:	6011      	str	r1, [r2, #0]
 800c606:	e7da      	b.n	800c5be <_free_r+0x22>
 800c608:	d902      	bls.n	800c610 <_free_r+0x74>
 800c60a:	230c      	movs	r3, #12
 800c60c:	602b      	str	r3, [r5, #0]
 800c60e:	e7d6      	b.n	800c5be <_free_r+0x22>
 800c610:	6820      	ldr	r0, [r4, #0]
 800c612:	1821      	adds	r1, r4, r0
 800c614:	428b      	cmp	r3, r1
 800c616:	bf04      	itt	eq
 800c618:	6819      	ldreq	r1, [r3, #0]
 800c61a:	685b      	ldreq	r3, [r3, #4]
 800c61c:	6063      	str	r3, [r4, #4]
 800c61e:	bf04      	itt	eq
 800c620:	1809      	addeq	r1, r1, r0
 800c622:	6021      	streq	r1, [r4, #0]
 800c624:	6054      	str	r4, [r2, #4]
 800c626:	e7ca      	b.n	800c5be <_free_r+0x22>
 800c628:	bd38      	pop	{r3, r4, r5, pc}
 800c62a:	bf00      	nop
 800c62c:	20001c2c 	.word	0x20001c2c

0800c630 <__ssputs_r>:
 800c630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c634:	688e      	ldr	r6, [r1, #8]
 800c636:	429e      	cmp	r6, r3
 800c638:	4682      	mov	sl, r0
 800c63a:	460c      	mov	r4, r1
 800c63c:	4690      	mov	r8, r2
 800c63e:	461f      	mov	r7, r3
 800c640:	d838      	bhi.n	800c6b4 <__ssputs_r+0x84>
 800c642:	898a      	ldrh	r2, [r1, #12]
 800c644:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c648:	d032      	beq.n	800c6b0 <__ssputs_r+0x80>
 800c64a:	6825      	ldr	r5, [r4, #0]
 800c64c:	6909      	ldr	r1, [r1, #16]
 800c64e:	eba5 0901 	sub.w	r9, r5, r1
 800c652:	6965      	ldr	r5, [r4, #20]
 800c654:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c658:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c65c:	3301      	adds	r3, #1
 800c65e:	444b      	add	r3, r9
 800c660:	106d      	asrs	r5, r5, #1
 800c662:	429d      	cmp	r5, r3
 800c664:	bf38      	it	cc
 800c666:	461d      	movcc	r5, r3
 800c668:	0553      	lsls	r3, r2, #21
 800c66a:	d531      	bpl.n	800c6d0 <__ssputs_r+0xa0>
 800c66c:	4629      	mov	r1, r5
 800c66e:	f7fd fdff 	bl	800a270 <_malloc_r>
 800c672:	4606      	mov	r6, r0
 800c674:	b950      	cbnz	r0, 800c68c <__ssputs_r+0x5c>
 800c676:	230c      	movs	r3, #12
 800c678:	f8ca 3000 	str.w	r3, [sl]
 800c67c:	89a3      	ldrh	r3, [r4, #12]
 800c67e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c682:	81a3      	strh	r3, [r4, #12]
 800c684:	f04f 30ff 	mov.w	r0, #4294967295
 800c688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c68c:	6921      	ldr	r1, [r4, #16]
 800c68e:	464a      	mov	r2, r9
 800c690:	f7fd fdb7 	bl	800a202 <memcpy>
 800c694:	89a3      	ldrh	r3, [r4, #12]
 800c696:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c69a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c69e:	81a3      	strh	r3, [r4, #12]
 800c6a0:	6126      	str	r6, [r4, #16]
 800c6a2:	6165      	str	r5, [r4, #20]
 800c6a4:	444e      	add	r6, r9
 800c6a6:	eba5 0509 	sub.w	r5, r5, r9
 800c6aa:	6026      	str	r6, [r4, #0]
 800c6ac:	60a5      	str	r5, [r4, #8]
 800c6ae:	463e      	mov	r6, r7
 800c6b0:	42be      	cmp	r6, r7
 800c6b2:	d900      	bls.n	800c6b6 <__ssputs_r+0x86>
 800c6b4:	463e      	mov	r6, r7
 800c6b6:	6820      	ldr	r0, [r4, #0]
 800c6b8:	4632      	mov	r2, r6
 800c6ba:	4641      	mov	r1, r8
 800c6bc:	f000 fbbc 	bl	800ce38 <memmove>
 800c6c0:	68a3      	ldr	r3, [r4, #8]
 800c6c2:	1b9b      	subs	r3, r3, r6
 800c6c4:	60a3      	str	r3, [r4, #8]
 800c6c6:	6823      	ldr	r3, [r4, #0]
 800c6c8:	4433      	add	r3, r6
 800c6ca:	6023      	str	r3, [r4, #0]
 800c6cc:	2000      	movs	r0, #0
 800c6ce:	e7db      	b.n	800c688 <__ssputs_r+0x58>
 800c6d0:	462a      	mov	r2, r5
 800c6d2:	f000 fbcb 	bl	800ce6c <_realloc_r>
 800c6d6:	4606      	mov	r6, r0
 800c6d8:	2800      	cmp	r0, #0
 800c6da:	d1e1      	bne.n	800c6a0 <__ssputs_r+0x70>
 800c6dc:	6921      	ldr	r1, [r4, #16]
 800c6de:	4650      	mov	r0, sl
 800c6e0:	f7ff ff5c 	bl	800c59c <_free_r>
 800c6e4:	e7c7      	b.n	800c676 <__ssputs_r+0x46>
	...

0800c6e8 <_svfiprintf_r>:
 800c6e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6ec:	4698      	mov	r8, r3
 800c6ee:	898b      	ldrh	r3, [r1, #12]
 800c6f0:	061b      	lsls	r3, r3, #24
 800c6f2:	b09d      	sub	sp, #116	; 0x74
 800c6f4:	4607      	mov	r7, r0
 800c6f6:	460d      	mov	r5, r1
 800c6f8:	4614      	mov	r4, r2
 800c6fa:	d50e      	bpl.n	800c71a <_svfiprintf_r+0x32>
 800c6fc:	690b      	ldr	r3, [r1, #16]
 800c6fe:	b963      	cbnz	r3, 800c71a <_svfiprintf_r+0x32>
 800c700:	2140      	movs	r1, #64	; 0x40
 800c702:	f7fd fdb5 	bl	800a270 <_malloc_r>
 800c706:	6028      	str	r0, [r5, #0]
 800c708:	6128      	str	r0, [r5, #16]
 800c70a:	b920      	cbnz	r0, 800c716 <_svfiprintf_r+0x2e>
 800c70c:	230c      	movs	r3, #12
 800c70e:	603b      	str	r3, [r7, #0]
 800c710:	f04f 30ff 	mov.w	r0, #4294967295
 800c714:	e0d1      	b.n	800c8ba <_svfiprintf_r+0x1d2>
 800c716:	2340      	movs	r3, #64	; 0x40
 800c718:	616b      	str	r3, [r5, #20]
 800c71a:	2300      	movs	r3, #0
 800c71c:	9309      	str	r3, [sp, #36]	; 0x24
 800c71e:	2320      	movs	r3, #32
 800c720:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c724:	f8cd 800c 	str.w	r8, [sp, #12]
 800c728:	2330      	movs	r3, #48	; 0x30
 800c72a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c8d4 <_svfiprintf_r+0x1ec>
 800c72e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c732:	f04f 0901 	mov.w	r9, #1
 800c736:	4623      	mov	r3, r4
 800c738:	469a      	mov	sl, r3
 800c73a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c73e:	b10a      	cbz	r2, 800c744 <_svfiprintf_r+0x5c>
 800c740:	2a25      	cmp	r2, #37	; 0x25
 800c742:	d1f9      	bne.n	800c738 <_svfiprintf_r+0x50>
 800c744:	ebba 0b04 	subs.w	fp, sl, r4
 800c748:	d00b      	beq.n	800c762 <_svfiprintf_r+0x7a>
 800c74a:	465b      	mov	r3, fp
 800c74c:	4622      	mov	r2, r4
 800c74e:	4629      	mov	r1, r5
 800c750:	4638      	mov	r0, r7
 800c752:	f7ff ff6d 	bl	800c630 <__ssputs_r>
 800c756:	3001      	adds	r0, #1
 800c758:	f000 80aa 	beq.w	800c8b0 <_svfiprintf_r+0x1c8>
 800c75c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c75e:	445a      	add	r2, fp
 800c760:	9209      	str	r2, [sp, #36]	; 0x24
 800c762:	f89a 3000 	ldrb.w	r3, [sl]
 800c766:	2b00      	cmp	r3, #0
 800c768:	f000 80a2 	beq.w	800c8b0 <_svfiprintf_r+0x1c8>
 800c76c:	2300      	movs	r3, #0
 800c76e:	f04f 32ff 	mov.w	r2, #4294967295
 800c772:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c776:	f10a 0a01 	add.w	sl, sl, #1
 800c77a:	9304      	str	r3, [sp, #16]
 800c77c:	9307      	str	r3, [sp, #28]
 800c77e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c782:	931a      	str	r3, [sp, #104]	; 0x68
 800c784:	4654      	mov	r4, sl
 800c786:	2205      	movs	r2, #5
 800c788:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c78c:	4851      	ldr	r0, [pc, #324]	; (800c8d4 <_svfiprintf_r+0x1ec>)
 800c78e:	f7f3 fcff 	bl	8000190 <memchr>
 800c792:	9a04      	ldr	r2, [sp, #16]
 800c794:	b9d8      	cbnz	r0, 800c7ce <_svfiprintf_r+0xe6>
 800c796:	06d0      	lsls	r0, r2, #27
 800c798:	bf44      	itt	mi
 800c79a:	2320      	movmi	r3, #32
 800c79c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c7a0:	0711      	lsls	r1, r2, #28
 800c7a2:	bf44      	itt	mi
 800c7a4:	232b      	movmi	r3, #43	; 0x2b
 800c7a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c7aa:	f89a 3000 	ldrb.w	r3, [sl]
 800c7ae:	2b2a      	cmp	r3, #42	; 0x2a
 800c7b0:	d015      	beq.n	800c7de <_svfiprintf_r+0xf6>
 800c7b2:	9a07      	ldr	r2, [sp, #28]
 800c7b4:	4654      	mov	r4, sl
 800c7b6:	2000      	movs	r0, #0
 800c7b8:	f04f 0c0a 	mov.w	ip, #10
 800c7bc:	4621      	mov	r1, r4
 800c7be:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c7c2:	3b30      	subs	r3, #48	; 0x30
 800c7c4:	2b09      	cmp	r3, #9
 800c7c6:	d94e      	bls.n	800c866 <_svfiprintf_r+0x17e>
 800c7c8:	b1b0      	cbz	r0, 800c7f8 <_svfiprintf_r+0x110>
 800c7ca:	9207      	str	r2, [sp, #28]
 800c7cc:	e014      	b.n	800c7f8 <_svfiprintf_r+0x110>
 800c7ce:	eba0 0308 	sub.w	r3, r0, r8
 800c7d2:	fa09 f303 	lsl.w	r3, r9, r3
 800c7d6:	4313      	orrs	r3, r2
 800c7d8:	9304      	str	r3, [sp, #16]
 800c7da:	46a2      	mov	sl, r4
 800c7dc:	e7d2      	b.n	800c784 <_svfiprintf_r+0x9c>
 800c7de:	9b03      	ldr	r3, [sp, #12]
 800c7e0:	1d19      	adds	r1, r3, #4
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	9103      	str	r1, [sp, #12]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	bfbb      	ittet	lt
 800c7ea:	425b      	neglt	r3, r3
 800c7ec:	f042 0202 	orrlt.w	r2, r2, #2
 800c7f0:	9307      	strge	r3, [sp, #28]
 800c7f2:	9307      	strlt	r3, [sp, #28]
 800c7f4:	bfb8      	it	lt
 800c7f6:	9204      	strlt	r2, [sp, #16]
 800c7f8:	7823      	ldrb	r3, [r4, #0]
 800c7fa:	2b2e      	cmp	r3, #46	; 0x2e
 800c7fc:	d10c      	bne.n	800c818 <_svfiprintf_r+0x130>
 800c7fe:	7863      	ldrb	r3, [r4, #1]
 800c800:	2b2a      	cmp	r3, #42	; 0x2a
 800c802:	d135      	bne.n	800c870 <_svfiprintf_r+0x188>
 800c804:	9b03      	ldr	r3, [sp, #12]
 800c806:	1d1a      	adds	r2, r3, #4
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	9203      	str	r2, [sp, #12]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	bfb8      	it	lt
 800c810:	f04f 33ff 	movlt.w	r3, #4294967295
 800c814:	3402      	adds	r4, #2
 800c816:	9305      	str	r3, [sp, #20]
 800c818:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800c8d8 <_svfiprintf_r+0x1f0>
 800c81c:	7821      	ldrb	r1, [r4, #0]
 800c81e:	2203      	movs	r2, #3
 800c820:	4650      	mov	r0, sl
 800c822:	f7f3 fcb5 	bl	8000190 <memchr>
 800c826:	b140      	cbz	r0, 800c83a <_svfiprintf_r+0x152>
 800c828:	2340      	movs	r3, #64	; 0x40
 800c82a:	eba0 000a 	sub.w	r0, r0, sl
 800c82e:	fa03 f000 	lsl.w	r0, r3, r0
 800c832:	9b04      	ldr	r3, [sp, #16]
 800c834:	4303      	orrs	r3, r0
 800c836:	3401      	adds	r4, #1
 800c838:	9304      	str	r3, [sp, #16]
 800c83a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c83e:	4827      	ldr	r0, [pc, #156]	; (800c8dc <_svfiprintf_r+0x1f4>)
 800c840:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c844:	2206      	movs	r2, #6
 800c846:	f7f3 fca3 	bl	8000190 <memchr>
 800c84a:	2800      	cmp	r0, #0
 800c84c:	d038      	beq.n	800c8c0 <_svfiprintf_r+0x1d8>
 800c84e:	4b24      	ldr	r3, [pc, #144]	; (800c8e0 <_svfiprintf_r+0x1f8>)
 800c850:	bb1b      	cbnz	r3, 800c89a <_svfiprintf_r+0x1b2>
 800c852:	9b03      	ldr	r3, [sp, #12]
 800c854:	3307      	adds	r3, #7
 800c856:	f023 0307 	bic.w	r3, r3, #7
 800c85a:	3308      	adds	r3, #8
 800c85c:	9303      	str	r3, [sp, #12]
 800c85e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c860:	4433      	add	r3, r6
 800c862:	9309      	str	r3, [sp, #36]	; 0x24
 800c864:	e767      	b.n	800c736 <_svfiprintf_r+0x4e>
 800c866:	fb0c 3202 	mla	r2, ip, r2, r3
 800c86a:	460c      	mov	r4, r1
 800c86c:	2001      	movs	r0, #1
 800c86e:	e7a5      	b.n	800c7bc <_svfiprintf_r+0xd4>
 800c870:	2300      	movs	r3, #0
 800c872:	3401      	adds	r4, #1
 800c874:	9305      	str	r3, [sp, #20]
 800c876:	4619      	mov	r1, r3
 800c878:	f04f 0c0a 	mov.w	ip, #10
 800c87c:	4620      	mov	r0, r4
 800c87e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c882:	3a30      	subs	r2, #48	; 0x30
 800c884:	2a09      	cmp	r2, #9
 800c886:	d903      	bls.n	800c890 <_svfiprintf_r+0x1a8>
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d0c5      	beq.n	800c818 <_svfiprintf_r+0x130>
 800c88c:	9105      	str	r1, [sp, #20]
 800c88e:	e7c3      	b.n	800c818 <_svfiprintf_r+0x130>
 800c890:	fb0c 2101 	mla	r1, ip, r1, r2
 800c894:	4604      	mov	r4, r0
 800c896:	2301      	movs	r3, #1
 800c898:	e7f0      	b.n	800c87c <_svfiprintf_r+0x194>
 800c89a:	ab03      	add	r3, sp, #12
 800c89c:	9300      	str	r3, [sp, #0]
 800c89e:	462a      	mov	r2, r5
 800c8a0:	4b10      	ldr	r3, [pc, #64]	; (800c8e4 <_svfiprintf_r+0x1fc>)
 800c8a2:	a904      	add	r1, sp, #16
 800c8a4:	4638      	mov	r0, r7
 800c8a6:	f7fd fdf5 	bl	800a494 <_printf_float>
 800c8aa:	1c42      	adds	r2, r0, #1
 800c8ac:	4606      	mov	r6, r0
 800c8ae:	d1d6      	bne.n	800c85e <_svfiprintf_r+0x176>
 800c8b0:	89ab      	ldrh	r3, [r5, #12]
 800c8b2:	065b      	lsls	r3, r3, #25
 800c8b4:	f53f af2c 	bmi.w	800c710 <_svfiprintf_r+0x28>
 800c8b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c8ba:	b01d      	add	sp, #116	; 0x74
 800c8bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8c0:	ab03      	add	r3, sp, #12
 800c8c2:	9300      	str	r3, [sp, #0]
 800c8c4:	462a      	mov	r2, r5
 800c8c6:	4b07      	ldr	r3, [pc, #28]	; (800c8e4 <_svfiprintf_r+0x1fc>)
 800c8c8:	a904      	add	r1, sp, #16
 800c8ca:	4638      	mov	r0, r7
 800c8cc:	f7fe f87a 	bl	800a9c4 <_printf_i>
 800c8d0:	e7eb      	b.n	800c8aa <_svfiprintf_r+0x1c2>
 800c8d2:	bf00      	nop
 800c8d4:	0800db44 	.word	0x0800db44
 800c8d8:	0800db4a 	.word	0x0800db4a
 800c8dc:	0800db4e 	.word	0x0800db4e
 800c8e0:	0800a495 	.word	0x0800a495
 800c8e4:	0800c631 	.word	0x0800c631

0800c8e8 <__sfputc_r>:
 800c8e8:	6893      	ldr	r3, [r2, #8]
 800c8ea:	3b01      	subs	r3, #1
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	b410      	push	{r4}
 800c8f0:	6093      	str	r3, [r2, #8]
 800c8f2:	da07      	bge.n	800c904 <__sfputc_r+0x1c>
 800c8f4:	6994      	ldr	r4, [r2, #24]
 800c8f6:	42a3      	cmp	r3, r4
 800c8f8:	db01      	blt.n	800c8fe <__sfputc_r+0x16>
 800c8fa:	290a      	cmp	r1, #10
 800c8fc:	d102      	bne.n	800c904 <__sfputc_r+0x1c>
 800c8fe:	bc10      	pop	{r4}
 800c900:	f000 b95c 	b.w	800cbbc <__swbuf_r>
 800c904:	6813      	ldr	r3, [r2, #0]
 800c906:	1c58      	adds	r0, r3, #1
 800c908:	6010      	str	r0, [r2, #0]
 800c90a:	7019      	strb	r1, [r3, #0]
 800c90c:	4608      	mov	r0, r1
 800c90e:	bc10      	pop	{r4}
 800c910:	4770      	bx	lr

0800c912 <__sfputs_r>:
 800c912:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c914:	4606      	mov	r6, r0
 800c916:	460f      	mov	r7, r1
 800c918:	4614      	mov	r4, r2
 800c91a:	18d5      	adds	r5, r2, r3
 800c91c:	42ac      	cmp	r4, r5
 800c91e:	d101      	bne.n	800c924 <__sfputs_r+0x12>
 800c920:	2000      	movs	r0, #0
 800c922:	e007      	b.n	800c934 <__sfputs_r+0x22>
 800c924:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c928:	463a      	mov	r2, r7
 800c92a:	4630      	mov	r0, r6
 800c92c:	f7ff ffdc 	bl	800c8e8 <__sfputc_r>
 800c930:	1c43      	adds	r3, r0, #1
 800c932:	d1f3      	bne.n	800c91c <__sfputs_r+0xa>
 800c934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c938 <_vfiprintf_r>:
 800c938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c93c:	460d      	mov	r5, r1
 800c93e:	b09d      	sub	sp, #116	; 0x74
 800c940:	4614      	mov	r4, r2
 800c942:	4698      	mov	r8, r3
 800c944:	4606      	mov	r6, r0
 800c946:	b118      	cbz	r0, 800c950 <_vfiprintf_r+0x18>
 800c948:	6983      	ldr	r3, [r0, #24]
 800c94a:	b90b      	cbnz	r3, 800c950 <_vfiprintf_r+0x18>
 800c94c:	f7fd fb94 	bl	800a078 <__sinit>
 800c950:	4b89      	ldr	r3, [pc, #548]	; (800cb78 <_vfiprintf_r+0x240>)
 800c952:	429d      	cmp	r5, r3
 800c954:	d11b      	bne.n	800c98e <_vfiprintf_r+0x56>
 800c956:	6875      	ldr	r5, [r6, #4]
 800c958:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c95a:	07d9      	lsls	r1, r3, #31
 800c95c:	d405      	bmi.n	800c96a <_vfiprintf_r+0x32>
 800c95e:	89ab      	ldrh	r3, [r5, #12]
 800c960:	059a      	lsls	r2, r3, #22
 800c962:	d402      	bmi.n	800c96a <_vfiprintf_r+0x32>
 800c964:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c966:	f7fd fc4a 	bl	800a1fe <__retarget_lock_acquire_recursive>
 800c96a:	89ab      	ldrh	r3, [r5, #12]
 800c96c:	071b      	lsls	r3, r3, #28
 800c96e:	d501      	bpl.n	800c974 <_vfiprintf_r+0x3c>
 800c970:	692b      	ldr	r3, [r5, #16]
 800c972:	b9eb      	cbnz	r3, 800c9b0 <_vfiprintf_r+0x78>
 800c974:	4629      	mov	r1, r5
 800c976:	4630      	mov	r0, r6
 800c978:	f000 f972 	bl	800cc60 <__swsetup_r>
 800c97c:	b1c0      	cbz	r0, 800c9b0 <_vfiprintf_r+0x78>
 800c97e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c980:	07dc      	lsls	r4, r3, #31
 800c982:	d50e      	bpl.n	800c9a2 <_vfiprintf_r+0x6a>
 800c984:	f04f 30ff 	mov.w	r0, #4294967295
 800c988:	b01d      	add	sp, #116	; 0x74
 800c98a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c98e:	4b7b      	ldr	r3, [pc, #492]	; (800cb7c <_vfiprintf_r+0x244>)
 800c990:	429d      	cmp	r5, r3
 800c992:	d101      	bne.n	800c998 <_vfiprintf_r+0x60>
 800c994:	68b5      	ldr	r5, [r6, #8]
 800c996:	e7df      	b.n	800c958 <_vfiprintf_r+0x20>
 800c998:	4b79      	ldr	r3, [pc, #484]	; (800cb80 <_vfiprintf_r+0x248>)
 800c99a:	429d      	cmp	r5, r3
 800c99c:	bf08      	it	eq
 800c99e:	68f5      	ldreq	r5, [r6, #12]
 800c9a0:	e7da      	b.n	800c958 <_vfiprintf_r+0x20>
 800c9a2:	89ab      	ldrh	r3, [r5, #12]
 800c9a4:	0598      	lsls	r0, r3, #22
 800c9a6:	d4ed      	bmi.n	800c984 <_vfiprintf_r+0x4c>
 800c9a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c9aa:	f7fd fc29 	bl	800a200 <__retarget_lock_release_recursive>
 800c9ae:	e7e9      	b.n	800c984 <_vfiprintf_r+0x4c>
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	9309      	str	r3, [sp, #36]	; 0x24
 800c9b4:	2320      	movs	r3, #32
 800c9b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c9ba:	f8cd 800c 	str.w	r8, [sp, #12]
 800c9be:	2330      	movs	r3, #48	; 0x30
 800c9c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cb84 <_vfiprintf_r+0x24c>
 800c9c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c9c8:	f04f 0901 	mov.w	r9, #1
 800c9cc:	4623      	mov	r3, r4
 800c9ce:	469a      	mov	sl, r3
 800c9d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c9d4:	b10a      	cbz	r2, 800c9da <_vfiprintf_r+0xa2>
 800c9d6:	2a25      	cmp	r2, #37	; 0x25
 800c9d8:	d1f9      	bne.n	800c9ce <_vfiprintf_r+0x96>
 800c9da:	ebba 0b04 	subs.w	fp, sl, r4
 800c9de:	d00b      	beq.n	800c9f8 <_vfiprintf_r+0xc0>
 800c9e0:	465b      	mov	r3, fp
 800c9e2:	4622      	mov	r2, r4
 800c9e4:	4629      	mov	r1, r5
 800c9e6:	4630      	mov	r0, r6
 800c9e8:	f7ff ff93 	bl	800c912 <__sfputs_r>
 800c9ec:	3001      	adds	r0, #1
 800c9ee:	f000 80aa 	beq.w	800cb46 <_vfiprintf_r+0x20e>
 800c9f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c9f4:	445a      	add	r2, fp
 800c9f6:	9209      	str	r2, [sp, #36]	; 0x24
 800c9f8:	f89a 3000 	ldrb.w	r3, [sl]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	f000 80a2 	beq.w	800cb46 <_vfiprintf_r+0x20e>
 800ca02:	2300      	movs	r3, #0
 800ca04:	f04f 32ff 	mov.w	r2, #4294967295
 800ca08:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca0c:	f10a 0a01 	add.w	sl, sl, #1
 800ca10:	9304      	str	r3, [sp, #16]
 800ca12:	9307      	str	r3, [sp, #28]
 800ca14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ca18:	931a      	str	r3, [sp, #104]	; 0x68
 800ca1a:	4654      	mov	r4, sl
 800ca1c:	2205      	movs	r2, #5
 800ca1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca22:	4858      	ldr	r0, [pc, #352]	; (800cb84 <_vfiprintf_r+0x24c>)
 800ca24:	f7f3 fbb4 	bl	8000190 <memchr>
 800ca28:	9a04      	ldr	r2, [sp, #16]
 800ca2a:	b9d8      	cbnz	r0, 800ca64 <_vfiprintf_r+0x12c>
 800ca2c:	06d1      	lsls	r1, r2, #27
 800ca2e:	bf44      	itt	mi
 800ca30:	2320      	movmi	r3, #32
 800ca32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca36:	0713      	lsls	r3, r2, #28
 800ca38:	bf44      	itt	mi
 800ca3a:	232b      	movmi	r3, #43	; 0x2b
 800ca3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca40:	f89a 3000 	ldrb.w	r3, [sl]
 800ca44:	2b2a      	cmp	r3, #42	; 0x2a
 800ca46:	d015      	beq.n	800ca74 <_vfiprintf_r+0x13c>
 800ca48:	9a07      	ldr	r2, [sp, #28]
 800ca4a:	4654      	mov	r4, sl
 800ca4c:	2000      	movs	r0, #0
 800ca4e:	f04f 0c0a 	mov.w	ip, #10
 800ca52:	4621      	mov	r1, r4
 800ca54:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca58:	3b30      	subs	r3, #48	; 0x30
 800ca5a:	2b09      	cmp	r3, #9
 800ca5c:	d94e      	bls.n	800cafc <_vfiprintf_r+0x1c4>
 800ca5e:	b1b0      	cbz	r0, 800ca8e <_vfiprintf_r+0x156>
 800ca60:	9207      	str	r2, [sp, #28]
 800ca62:	e014      	b.n	800ca8e <_vfiprintf_r+0x156>
 800ca64:	eba0 0308 	sub.w	r3, r0, r8
 800ca68:	fa09 f303 	lsl.w	r3, r9, r3
 800ca6c:	4313      	orrs	r3, r2
 800ca6e:	9304      	str	r3, [sp, #16]
 800ca70:	46a2      	mov	sl, r4
 800ca72:	e7d2      	b.n	800ca1a <_vfiprintf_r+0xe2>
 800ca74:	9b03      	ldr	r3, [sp, #12]
 800ca76:	1d19      	adds	r1, r3, #4
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	9103      	str	r1, [sp, #12]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	bfbb      	ittet	lt
 800ca80:	425b      	neglt	r3, r3
 800ca82:	f042 0202 	orrlt.w	r2, r2, #2
 800ca86:	9307      	strge	r3, [sp, #28]
 800ca88:	9307      	strlt	r3, [sp, #28]
 800ca8a:	bfb8      	it	lt
 800ca8c:	9204      	strlt	r2, [sp, #16]
 800ca8e:	7823      	ldrb	r3, [r4, #0]
 800ca90:	2b2e      	cmp	r3, #46	; 0x2e
 800ca92:	d10c      	bne.n	800caae <_vfiprintf_r+0x176>
 800ca94:	7863      	ldrb	r3, [r4, #1]
 800ca96:	2b2a      	cmp	r3, #42	; 0x2a
 800ca98:	d135      	bne.n	800cb06 <_vfiprintf_r+0x1ce>
 800ca9a:	9b03      	ldr	r3, [sp, #12]
 800ca9c:	1d1a      	adds	r2, r3, #4
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	9203      	str	r2, [sp, #12]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	bfb8      	it	lt
 800caa6:	f04f 33ff 	movlt.w	r3, #4294967295
 800caaa:	3402      	adds	r4, #2
 800caac:	9305      	str	r3, [sp, #20]
 800caae:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800cb88 <_vfiprintf_r+0x250>
 800cab2:	7821      	ldrb	r1, [r4, #0]
 800cab4:	2203      	movs	r2, #3
 800cab6:	4650      	mov	r0, sl
 800cab8:	f7f3 fb6a 	bl	8000190 <memchr>
 800cabc:	b140      	cbz	r0, 800cad0 <_vfiprintf_r+0x198>
 800cabe:	2340      	movs	r3, #64	; 0x40
 800cac0:	eba0 000a 	sub.w	r0, r0, sl
 800cac4:	fa03 f000 	lsl.w	r0, r3, r0
 800cac8:	9b04      	ldr	r3, [sp, #16]
 800caca:	4303      	orrs	r3, r0
 800cacc:	3401      	adds	r4, #1
 800cace:	9304      	str	r3, [sp, #16]
 800cad0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cad4:	482d      	ldr	r0, [pc, #180]	; (800cb8c <_vfiprintf_r+0x254>)
 800cad6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cada:	2206      	movs	r2, #6
 800cadc:	f7f3 fb58 	bl	8000190 <memchr>
 800cae0:	2800      	cmp	r0, #0
 800cae2:	d03f      	beq.n	800cb64 <_vfiprintf_r+0x22c>
 800cae4:	4b2a      	ldr	r3, [pc, #168]	; (800cb90 <_vfiprintf_r+0x258>)
 800cae6:	bb1b      	cbnz	r3, 800cb30 <_vfiprintf_r+0x1f8>
 800cae8:	9b03      	ldr	r3, [sp, #12]
 800caea:	3307      	adds	r3, #7
 800caec:	f023 0307 	bic.w	r3, r3, #7
 800caf0:	3308      	adds	r3, #8
 800caf2:	9303      	str	r3, [sp, #12]
 800caf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800caf6:	443b      	add	r3, r7
 800caf8:	9309      	str	r3, [sp, #36]	; 0x24
 800cafa:	e767      	b.n	800c9cc <_vfiprintf_r+0x94>
 800cafc:	fb0c 3202 	mla	r2, ip, r2, r3
 800cb00:	460c      	mov	r4, r1
 800cb02:	2001      	movs	r0, #1
 800cb04:	e7a5      	b.n	800ca52 <_vfiprintf_r+0x11a>
 800cb06:	2300      	movs	r3, #0
 800cb08:	3401      	adds	r4, #1
 800cb0a:	9305      	str	r3, [sp, #20]
 800cb0c:	4619      	mov	r1, r3
 800cb0e:	f04f 0c0a 	mov.w	ip, #10
 800cb12:	4620      	mov	r0, r4
 800cb14:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb18:	3a30      	subs	r2, #48	; 0x30
 800cb1a:	2a09      	cmp	r2, #9
 800cb1c:	d903      	bls.n	800cb26 <_vfiprintf_r+0x1ee>
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d0c5      	beq.n	800caae <_vfiprintf_r+0x176>
 800cb22:	9105      	str	r1, [sp, #20]
 800cb24:	e7c3      	b.n	800caae <_vfiprintf_r+0x176>
 800cb26:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb2a:	4604      	mov	r4, r0
 800cb2c:	2301      	movs	r3, #1
 800cb2e:	e7f0      	b.n	800cb12 <_vfiprintf_r+0x1da>
 800cb30:	ab03      	add	r3, sp, #12
 800cb32:	9300      	str	r3, [sp, #0]
 800cb34:	462a      	mov	r2, r5
 800cb36:	4b17      	ldr	r3, [pc, #92]	; (800cb94 <_vfiprintf_r+0x25c>)
 800cb38:	a904      	add	r1, sp, #16
 800cb3a:	4630      	mov	r0, r6
 800cb3c:	f7fd fcaa 	bl	800a494 <_printf_float>
 800cb40:	4607      	mov	r7, r0
 800cb42:	1c78      	adds	r0, r7, #1
 800cb44:	d1d6      	bne.n	800caf4 <_vfiprintf_r+0x1bc>
 800cb46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cb48:	07d9      	lsls	r1, r3, #31
 800cb4a:	d405      	bmi.n	800cb58 <_vfiprintf_r+0x220>
 800cb4c:	89ab      	ldrh	r3, [r5, #12]
 800cb4e:	059a      	lsls	r2, r3, #22
 800cb50:	d402      	bmi.n	800cb58 <_vfiprintf_r+0x220>
 800cb52:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cb54:	f7fd fb54 	bl	800a200 <__retarget_lock_release_recursive>
 800cb58:	89ab      	ldrh	r3, [r5, #12]
 800cb5a:	065b      	lsls	r3, r3, #25
 800cb5c:	f53f af12 	bmi.w	800c984 <_vfiprintf_r+0x4c>
 800cb60:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cb62:	e711      	b.n	800c988 <_vfiprintf_r+0x50>
 800cb64:	ab03      	add	r3, sp, #12
 800cb66:	9300      	str	r3, [sp, #0]
 800cb68:	462a      	mov	r2, r5
 800cb6a:	4b0a      	ldr	r3, [pc, #40]	; (800cb94 <_vfiprintf_r+0x25c>)
 800cb6c:	a904      	add	r1, sp, #16
 800cb6e:	4630      	mov	r0, r6
 800cb70:	f7fd ff28 	bl	800a9c4 <_printf_i>
 800cb74:	e7e4      	b.n	800cb40 <_vfiprintf_r+0x208>
 800cb76:	bf00      	nop
 800cb78:	0800d848 	.word	0x0800d848
 800cb7c:	0800d868 	.word	0x0800d868
 800cb80:	0800d828 	.word	0x0800d828
 800cb84:	0800db44 	.word	0x0800db44
 800cb88:	0800db4a 	.word	0x0800db4a
 800cb8c:	0800db4e 	.word	0x0800db4e
 800cb90:	0800a495 	.word	0x0800a495
 800cb94:	0800c913 	.word	0x0800c913

0800cb98 <_read_r>:
 800cb98:	b538      	push	{r3, r4, r5, lr}
 800cb9a:	4d07      	ldr	r5, [pc, #28]	; (800cbb8 <_read_r+0x20>)
 800cb9c:	4604      	mov	r4, r0
 800cb9e:	4608      	mov	r0, r1
 800cba0:	4611      	mov	r1, r2
 800cba2:	2200      	movs	r2, #0
 800cba4:	602a      	str	r2, [r5, #0]
 800cba6:	461a      	mov	r2, r3
 800cba8:	f7f4 fff9 	bl	8001b9e <_read>
 800cbac:	1c43      	adds	r3, r0, #1
 800cbae:	d102      	bne.n	800cbb6 <_read_r+0x1e>
 800cbb0:	682b      	ldr	r3, [r5, #0]
 800cbb2:	b103      	cbz	r3, 800cbb6 <_read_r+0x1e>
 800cbb4:	6023      	str	r3, [r4, #0]
 800cbb6:	bd38      	pop	{r3, r4, r5, pc}
 800cbb8:	20001c34 	.word	0x20001c34

0800cbbc <__swbuf_r>:
 800cbbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbbe:	460e      	mov	r6, r1
 800cbc0:	4614      	mov	r4, r2
 800cbc2:	4605      	mov	r5, r0
 800cbc4:	b118      	cbz	r0, 800cbce <__swbuf_r+0x12>
 800cbc6:	6983      	ldr	r3, [r0, #24]
 800cbc8:	b90b      	cbnz	r3, 800cbce <__swbuf_r+0x12>
 800cbca:	f7fd fa55 	bl	800a078 <__sinit>
 800cbce:	4b21      	ldr	r3, [pc, #132]	; (800cc54 <__swbuf_r+0x98>)
 800cbd0:	429c      	cmp	r4, r3
 800cbd2:	d12b      	bne.n	800cc2c <__swbuf_r+0x70>
 800cbd4:	686c      	ldr	r4, [r5, #4]
 800cbd6:	69a3      	ldr	r3, [r4, #24]
 800cbd8:	60a3      	str	r3, [r4, #8]
 800cbda:	89a3      	ldrh	r3, [r4, #12]
 800cbdc:	071a      	lsls	r2, r3, #28
 800cbde:	d52f      	bpl.n	800cc40 <__swbuf_r+0x84>
 800cbe0:	6923      	ldr	r3, [r4, #16]
 800cbe2:	b36b      	cbz	r3, 800cc40 <__swbuf_r+0x84>
 800cbe4:	6923      	ldr	r3, [r4, #16]
 800cbe6:	6820      	ldr	r0, [r4, #0]
 800cbe8:	1ac0      	subs	r0, r0, r3
 800cbea:	6963      	ldr	r3, [r4, #20]
 800cbec:	b2f6      	uxtb	r6, r6
 800cbee:	4283      	cmp	r3, r0
 800cbf0:	4637      	mov	r7, r6
 800cbf2:	dc04      	bgt.n	800cbfe <__swbuf_r+0x42>
 800cbf4:	4621      	mov	r1, r4
 800cbf6:	4628      	mov	r0, r5
 800cbf8:	f7ff f8c6 	bl	800bd88 <_fflush_r>
 800cbfc:	bb30      	cbnz	r0, 800cc4c <__swbuf_r+0x90>
 800cbfe:	68a3      	ldr	r3, [r4, #8]
 800cc00:	3b01      	subs	r3, #1
 800cc02:	60a3      	str	r3, [r4, #8]
 800cc04:	6823      	ldr	r3, [r4, #0]
 800cc06:	1c5a      	adds	r2, r3, #1
 800cc08:	6022      	str	r2, [r4, #0]
 800cc0a:	701e      	strb	r6, [r3, #0]
 800cc0c:	6963      	ldr	r3, [r4, #20]
 800cc0e:	3001      	adds	r0, #1
 800cc10:	4283      	cmp	r3, r0
 800cc12:	d004      	beq.n	800cc1e <__swbuf_r+0x62>
 800cc14:	89a3      	ldrh	r3, [r4, #12]
 800cc16:	07db      	lsls	r3, r3, #31
 800cc18:	d506      	bpl.n	800cc28 <__swbuf_r+0x6c>
 800cc1a:	2e0a      	cmp	r6, #10
 800cc1c:	d104      	bne.n	800cc28 <__swbuf_r+0x6c>
 800cc1e:	4621      	mov	r1, r4
 800cc20:	4628      	mov	r0, r5
 800cc22:	f7ff f8b1 	bl	800bd88 <_fflush_r>
 800cc26:	b988      	cbnz	r0, 800cc4c <__swbuf_r+0x90>
 800cc28:	4638      	mov	r0, r7
 800cc2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cc2c:	4b0a      	ldr	r3, [pc, #40]	; (800cc58 <__swbuf_r+0x9c>)
 800cc2e:	429c      	cmp	r4, r3
 800cc30:	d101      	bne.n	800cc36 <__swbuf_r+0x7a>
 800cc32:	68ac      	ldr	r4, [r5, #8]
 800cc34:	e7cf      	b.n	800cbd6 <__swbuf_r+0x1a>
 800cc36:	4b09      	ldr	r3, [pc, #36]	; (800cc5c <__swbuf_r+0xa0>)
 800cc38:	429c      	cmp	r4, r3
 800cc3a:	bf08      	it	eq
 800cc3c:	68ec      	ldreq	r4, [r5, #12]
 800cc3e:	e7ca      	b.n	800cbd6 <__swbuf_r+0x1a>
 800cc40:	4621      	mov	r1, r4
 800cc42:	4628      	mov	r0, r5
 800cc44:	f000 f80c 	bl	800cc60 <__swsetup_r>
 800cc48:	2800      	cmp	r0, #0
 800cc4a:	d0cb      	beq.n	800cbe4 <__swbuf_r+0x28>
 800cc4c:	f04f 37ff 	mov.w	r7, #4294967295
 800cc50:	e7ea      	b.n	800cc28 <__swbuf_r+0x6c>
 800cc52:	bf00      	nop
 800cc54:	0800d848 	.word	0x0800d848
 800cc58:	0800d868 	.word	0x0800d868
 800cc5c:	0800d828 	.word	0x0800d828

0800cc60 <__swsetup_r>:
 800cc60:	4b32      	ldr	r3, [pc, #200]	; (800cd2c <__swsetup_r+0xcc>)
 800cc62:	b570      	push	{r4, r5, r6, lr}
 800cc64:	681d      	ldr	r5, [r3, #0]
 800cc66:	4606      	mov	r6, r0
 800cc68:	460c      	mov	r4, r1
 800cc6a:	b125      	cbz	r5, 800cc76 <__swsetup_r+0x16>
 800cc6c:	69ab      	ldr	r3, [r5, #24]
 800cc6e:	b913      	cbnz	r3, 800cc76 <__swsetup_r+0x16>
 800cc70:	4628      	mov	r0, r5
 800cc72:	f7fd fa01 	bl	800a078 <__sinit>
 800cc76:	4b2e      	ldr	r3, [pc, #184]	; (800cd30 <__swsetup_r+0xd0>)
 800cc78:	429c      	cmp	r4, r3
 800cc7a:	d10f      	bne.n	800cc9c <__swsetup_r+0x3c>
 800cc7c:	686c      	ldr	r4, [r5, #4]
 800cc7e:	89a3      	ldrh	r3, [r4, #12]
 800cc80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cc84:	0719      	lsls	r1, r3, #28
 800cc86:	d42c      	bmi.n	800cce2 <__swsetup_r+0x82>
 800cc88:	06dd      	lsls	r5, r3, #27
 800cc8a:	d411      	bmi.n	800ccb0 <__swsetup_r+0x50>
 800cc8c:	2309      	movs	r3, #9
 800cc8e:	6033      	str	r3, [r6, #0]
 800cc90:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cc94:	81a3      	strh	r3, [r4, #12]
 800cc96:	f04f 30ff 	mov.w	r0, #4294967295
 800cc9a:	e03e      	b.n	800cd1a <__swsetup_r+0xba>
 800cc9c:	4b25      	ldr	r3, [pc, #148]	; (800cd34 <__swsetup_r+0xd4>)
 800cc9e:	429c      	cmp	r4, r3
 800cca0:	d101      	bne.n	800cca6 <__swsetup_r+0x46>
 800cca2:	68ac      	ldr	r4, [r5, #8]
 800cca4:	e7eb      	b.n	800cc7e <__swsetup_r+0x1e>
 800cca6:	4b24      	ldr	r3, [pc, #144]	; (800cd38 <__swsetup_r+0xd8>)
 800cca8:	429c      	cmp	r4, r3
 800ccaa:	bf08      	it	eq
 800ccac:	68ec      	ldreq	r4, [r5, #12]
 800ccae:	e7e6      	b.n	800cc7e <__swsetup_r+0x1e>
 800ccb0:	0758      	lsls	r0, r3, #29
 800ccb2:	d512      	bpl.n	800ccda <__swsetup_r+0x7a>
 800ccb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ccb6:	b141      	cbz	r1, 800ccca <__swsetup_r+0x6a>
 800ccb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ccbc:	4299      	cmp	r1, r3
 800ccbe:	d002      	beq.n	800ccc6 <__swsetup_r+0x66>
 800ccc0:	4630      	mov	r0, r6
 800ccc2:	f7ff fc6b 	bl	800c59c <_free_r>
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	6363      	str	r3, [r4, #52]	; 0x34
 800ccca:	89a3      	ldrh	r3, [r4, #12]
 800cccc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ccd0:	81a3      	strh	r3, [r4, #12]
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	6063      	str	r3, [r4, #4]
 800ccd6:	6923      	ldr	r3, [r4, #16]
 800ccd8:	6023      	str	r3, [r4, #0]
 800ccda:	89a3      	ldrh	r3, [r4, #12]
 800ccdc:	f043 0308 	orr.w	r3, r3, #8
 800cce0:	81a3      	strh	r3, [r4, #12]
 800cce2:	6923      	ldr	r3, [r4, #16]
 800cce4:	b94b      	cbnz	r3, 800ccfa <__swsetup_r+0x9a>
 800cce6:	89a3      	ldrh	r3, [r4, #12]
 800cce8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ccec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ccf0:	d003      	beq.n	800ccfa <__swsetup_r+0x9a>
 800ccf2:	4621      	mov	r1, r4
 800ccf4:	4630      	mov	r0, r6
 800ccf6:	f000 f84d 	bl	800cd94 <__smakebuf_r>
 800ccfa:	89a0      	ldrh	r0, [r4, #12]
 800ccfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cd00:	f010 0301 	ands.w	r3, r0, #1
 800cd04:	d00a      	beq.n	800cd1c <__swsetup_r+0xbc>
 800cd06:	2300      	movs	r3, #0
 800cd08:	60a3      	str	r3, [r4, #8]
 800cd0a:	6963      	ldr	r3, [r4, #20]
 800cd0c:	425b      	negs	r3, r3
 800cd0e:	61a3      	str	r3, [r4, #24]
 800cd10:	6923      	ldr	r3, [r4, #16]
 800cd12:	b943      	cbnz	r3, 800cd26 <__swsetup_r+0xc6>
 800cd14:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cd18:	d1ba      	bne.n	800cc90 <__swsetup_r+0x30>
 800cd1a:	bd70      	pop	{r4, r5, r6, pc}
 800cd1c:	0781      	lsls	r1, r0, #30
 800cd1e:	bf58      	it	pl
 800cd20:	6963      	ldrpl	r3, [r4, #20]
 800cd22:	60a3      	str	r3, [r4, #8]
 800cd24:	e7f4      	b.n	800cd10 <__swsetup_r+0xb0>
 800cd26:	2000      	movs	r0, #0
 800cd28:	e7f7      	b.n	800cd1a <__swsetup_r+0xba>
 800cd2a:	bf00      	nop
 800cd2c:	20000010 	.word	0x20000010
 800cd30:	0800d848 	.word	0x0800d848
 800cd34:	0800d868 	.word	0x0800d868
 800cd38:	0800d828 	.word	0x0800d828

0800cd3c <abort>:
 800cd3c:	b508      	push	{r3, lr}
 800cd3e:	2006      	movs	r0, #6
 800cd40:	f000 f8ec 	bl	800cf1c <raise>
 800cd44:	2001      	movs	r0, #1
 800cd46:	f7f4 ff20 	bl	8001b8a <_exit>

0800cd4a <__swhatbuf_r>:
 800cd4a:	b570      	push	{r4, r5, r6, lr}
 800cd4c:	460e      	mov	r6, r1
 800cd4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd52:	2900      	cmp	r1, #0
 800cd54:	b096      	sub	sp, #88	; 0x58
 800cd56:	4614      	mov	r4, r2
 800cd58:	461d      	mov	r5, r3
 800cd5a:	da08      	bge.n	800cd6e <__swhatbuf_r+0x24>
 800cd5c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cd60:	2200      	movs	r2, #0
 800cd62:	602a      	str	r2, [r5, #0]
 800cd64:	061a      	lsls	r2, r3, #24
 800cd66:	d410      	bmi.n	800cd8a <__swhatbuf_r+0x40>
 800cd68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd6c:	e00e      	b.n	800cd8c <__swhatbuf_r+0x42>
 800cd6e:	466a      	mov	r2, sp
 800cd70:	f000 f8fe 	bl	800cf70 <_fstat_r>
 800cd74:	2800      	cmp	r0, #0
 800cd76:	dbf1      	blt.n	800cd5c <__swhatbuf_r+0x12>
 800cd78:	9a01      	ldr	r2, [sp, #4]
 800cd7a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cd7e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cd82:	425a      	negs	r2, r3
 800cd84:	415a      	adcs	r2, r3
 800cd86:	602a      	str	r2, [r5, #0]
 800cd88:	e7ee      	b.n	800cd68 <__swhatbuf_r+0x1e>
 800cd8a:	2340      	movs	r3, #64	; 0x40
 800cd8c:	2000      	movs	r0, #0
 800cd8e:	6023      	str	r3, [r4, #0]
 800cd90:	b016      	add	sp, #88	; 0x58
 800cd92:	bd70      	pop	{r4, r5, r6, pc}

0800cd94 <__smakebuf_r>:
 800cd94:	898b      	ldrh	r3, [r1, #12]
 800cd96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cd98:	079d      	lsls	r5, r3, #30
 800cd9a:	4606      	mov	r6, r0
 800cd9c:	460c      	mov	r4, r1
 800cd9e:	d507      	bpl.n	800cdb0 <__smakebuf_r+0x1c>
 800cda0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cda4:	6023      	str	r3, [r4, #0]
 800cda6:	6123      	str	r3, [r4, #16]
 800cda8:	2301      	movs	r3, #1
 800cdaa:	6163      	str	r3, [r4, #20]
 800cdac:	b002      	add	sp, #8
 800cdae:	bd70      	pop	{r4, r5, r6, pc}
 800cdb0:	ab01      	add	r3, sp, #4
 800cdb2:	466a      	mov	r2, sp
 800cdb4:	f7ff ffc9 	bl	800cd4a <__swhatbuf_r>
 800cdb8:	9900      	ldr	r1, [sp, #0]
 800cdba:	4605      	mov	r5, r0
 800cdbc:	4630      	mov	r0, r6
 800cdbe:	f7fd fa57 	bl	800a270 <_malloc_r>
 800cdc2:	b948      	cbnz	r0, 800cdd8 <__smakebuf_r+0x44>
 800cdc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cdc8:	059a      	lsls	r2, r3, #22
 800cdca:	d4ef      	bmi.n	800cdac <__smakebuf_r+0x18>
 800cdcc:	f023 0303 	bic.w	r3, r3, #3
 800cdd0:	f043 0302 	orr.w	r3, r3, #2
 800cdd4:	81a3      	strh	r3, [r4, #12]
 800cdd6:	e7e3      	b.n	800cda0 <__smakebuf_r+0xc>
 800cdd8:	4b0d      	ldr	r3, [pc, #52]	; (800ce10 <__smakebuf_r+0x7c>)
 800cdda:	62b3      	str	r3, [r6, #40]	; 0x28
 800cddc:	89a3      	ldrh	r3, [r4, #12]
 800cdde:	6020      	str	r0, [r4, #0]
 800cde0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cde4:	81a3      	strh	r3, [r4, #12]
 800cde6:	9b00      	ldr	r3, [sp, #0]
 800cde8:	6163      	str	r3, [r4, #20]
 800cdea:	9b01      	ldr	r3, [sp, #4]
 800cdec:	6120      	str	r0, [r4, #16]
 800cdee:	b15b      	cbz	r3, 800ce08 <__smakebuf_r+0x74>
 800cdf0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cdf4:	4630      	mov	r0, r6
 800cdf6:	f000 f8cd 	bl	800cf94 <_isatty_r>
 800cdfa:	b128      	cbz	r0, 800ce08 <__smakebuf_r+0x74>
 800cdfc:	89a3      	ldrh	r3, [r4, #12]
 800cdfe:	f023 0303 	bic.w	r3, r3, #3
 800ce02:	f043 0301 	orr.w	r3, r3, #1
 800ce06:	81a3      	strh	r3, [r4, #12]
 800ce08:	89a0      	ldrh	r0, [r4, #12]
 800ce0a:	4305      	orrs	r5, r0
 800ce0c:	81a5      	strh	r5, [r4, #12]
 800ce0e:	e7cd      	b.n	800cdac <__smakebuf_r+0x18>
 800ce10:	0800a011 	.word	0x0800a011

0800ce14 <__ascii_mbtowc>:
 800ce14:	b082      	sub	sp, #8
 800ce16:	b901      	cbnz	r1, 800ce1a <__ascii_mbtowc+0x6>
 800ce18:	a901      	add	r1, sp, #4
 800ce1a:	b142      	cbz	r2, 800ce2e <__ascii_mbtowc+0x1a>
 800ce1c:	b14b      	cbz	r3, 800ce32 <__ascii_mbtowc+0x1e>
 800ce1e:	7813      	ldrb	r3, [r2, #0]
 800ce20:	600b      	str	r3, [r1, #0]
 800ce22:	7812      	ldrb	r2, [r2, #0]
 800ce24:	1e10      	subs	r0, r2, #0
 800ce26:	bf18      	it	ne
 800ce28:	2001      	movne	r0, #1
 800ce2a:	b002      	add	sp, #8
 800ce2c:	4770      	bx	lr
 800ce2e:	4610      	mov	r0, r2
 800ce30:	e7fb      	b.n	800ce2a <__ascii_mbtowc+0x16>
 800ce32:	f06f 0001 	mvn.w	r0, #1
 800ce36:	e7f8      	b.n	800ce2a <__ascii_mbtowc+0x16>

0800ce38 <memmove>:
 800ce38:	4288      	cmp	r0, r1
 800ce3a:	b510      	push	{r4, lr}
 800ce3c:	eb01 0402 	add.w	r4, r1, r2
 800ce40:	d902      	bls.n	800ce48 <memmove+0x10>
 800ce42:	4284      	cmp	r4, r0
 800ce44:	4623      	mov	r3, r4
 800ce46:	d807      	bhi.n	800ce58 <memmove+0x20>
 800ce48:	1e43      	subs	r3, r0, #1
 800ce4a:	42a1      	cmp	r1, r4
 800ce4c:	d008      	beq.n	800ce60 <memmove+0x28>
 800ce4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ce52:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ce56:	e7f8      	b.n	800ce4a <memmove+0x12>
 800ce58:	4402      	add	r2, r0
 800ce5a:	4601      	mov	r1, r0
 800ce5c:	428a      	cmp	r2, r1
 800ce5e:	d100      	bne.n	800ce62 <memmove+0x2a>
 800ce60:	bd10      	pop	{r4, pc}
 800ce62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ce66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ce6a:	e7f7      	b.n	800ce5c <memmove+0x24>

0800ce6c <_realloc_r>:
 800ce6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce70:	4680      	mov	r8, r0
 800ce72:	4614      	mov	r4, r2
 800ce74:	460e      	mov	r6, r1
 800ce76:	b921      	cbnz	r1, 800ce82 <_realloc_r+0x16>
 800ce78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce7c:	4611      	mov	r1, r2
 800ce7e:	f7fd b9f7 	b.w	800a270 <_malloc_r>
 800ce82:	b92a      	cbnz	r2, 800ce90 <_realloc_r+0x24>
 800ce84:	f7ff fb8a 	bl	800c59c <_free_r>
 800ce88:	4625      	mov	r5, r4
 800ce8a:	4628      	mov	r0, r5
 800ce8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce90:	f000 f890 	bl	800cfb4 <_malloc_usable_size_r>
 800ce94:	4284      	cmp	r4, r0
 800ce96:	4607      	mov	r7, r0
 800ce98:	d802      	bhi.n	800cea0 <_realloc_r+0x34>
 800ce9a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ce9e:	d812      	bhi.n	800cec6 <_realloc_r+0x5a>
 800cea0:	4621      	mov	r1, r4
 800cea2:	4640      	mov	r0, r8
 800cea4:	f7fd f9e4 	bl	800a270 <_malloc_r>
 800cea8:	4605      	mov	r5, r0
 800ceaa:	2800      	cmp	r0, #0
 800ceac:	d0ed      	beq.n	800ce8a <_realloc_r+0x1e>
 800ceae:	42bc      	cmp	r4, r7
 800ceb0:	4622      	mov	r2, r4
 800ceb2:	4631      	mov	r1, r6
 800ceb4:	bf28      	it	cs
 800ceb6:	463a      	movcs	r2, r7
 800ceb8:	f7fd f9a3 	bl	800a202 <memcpy>
 800cebc:	4631      	mov	r1, r6
 800cebe:	4640      	mov	r0, r8
 800cec0:	f7ff fb6c 	bl	800c59c <_free_r>
 800cec4:	e7e1      	b.n	800ce8a <_realloc_r+0x1e>
 800cec6:	4635      	mov	r5, r6
 800cec8:	e7df      	b.n	800ce8a <_realloc_r+0x1e>

0800ceca <_raise_r>:
 800ceca:	291f      	cmp	r1, #31
 800cecc:	b538      	push	{r3, r4, r5, lr}
 800cece:	4604      	mov	r4, r0
 800ced0:	460d      	mov	r5, r1
 800ced2:	d904      	bls.n	800cede <_raise_r+0x14>
 800ced4:	2316      	movs	r3, #22
 800ced6:	6003      	str	r3, [r0, #0]
 800ced8:	f04f 30ff 	mov.w	r0, #4294967295
 800cedc:	bd38      	pop	{r3, r4, r5, pc}
 800cede:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cee0:	b112      	cbz	r2, 800cee8 <_raise_r+0x1e>
 800cee2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cee6:	b94b      	cbnz	r3, 800cefc <_raise_r+0x32>
 800cee8:	4620      	mov	r0, r4
 800ceea:	f000 f831 	bl	800cf50 <_getpid_r>
 800ceee:	462a      	mov	r2, r5
 800cef0:	4601      	mov	r1, r0
 800cef2:	4620      	mov	r0, r4
 800cef4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cef8:	f000 b818 	b.w	800cf2c <_kill_r>
 800cefc:	2b01      	cmp	r3, #1
 800cefe:	d00a      	beq.n	800cf16 <_raise_r+0x4c>
 800cf00:	1c59      	adds	r1, r3, #1
 800cf02:	d103      	bne.n	800cf0c <_raise_r+0x42>
 800cf04:	2316      	movs	r3, #22
 800cf06:	6003      	str	r3, [r0, #0]
 800cf08:	2001      	movs	r0, #1
 800cf0a:	e7e7      	b.n	800cedc <_raise_r+0x12>
 800cf0c:	2400      	movs	r4, #0
 800cf0e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cf12:	4628      	mov	r0, r5
 800cf14:	4798      	blx	r3
 800cf16:	2000      	movs	r0, #0
 800cf18:	e7e0      	b.n	800cedc <_raise_r+0x12>
	...

0800cf1c <raise>:
 800cf1c:	4b02      	ldr	r3, [pc, #8]	; (800cf28 <raise+0xc>)
 800cf1e:	4601      	mov	r1, r0
 800cf20:	6818      	ldr	r0, [r3, #0]
 800cf22:	f7ff bfd2 	b.w	800ceca <_raise_r>
 800cf26:	bf00      	nop
 800cf28:	20000010 	.word	0x20000010

0800cf2c <_kill_r>:
 800cf2c:	b538      	push	{r3, r4, r5, lr}
 800cf2e:	4d07      	ldr	r5, [pc, #28]	; (800cf4c <_kill_r+0x20>)
 800cf30:	2300      	movs	r3, #0
 800cf32:	4604      	mov	r4, r0
 800cf34:	4608      	mov	r0, r1
 800cf36:	4611      	mov	r1, r2
 800cf38:	602b      	str	r3, [r5, #0]
 800cf3a:	f7f4 fe16 	bl	8001b6a <_kill>
 800cf3e:	1c43      	adds	r3, r0, #1
 800cf40:	d102      	bne.n	800cf48 <_kill_r+0x1c>
 800cf42:	682b      	ldr	r3, [r5, #0]
 800cf44:	b103      	cbz	r3, 800cf48 <_kill_r+0x1c>
 800cf46:	6023      	str	r3, [r4, #0]
 800cf48:	bd38      	pop	{r3, r4, r5, pc}
 800cf4a:	bf00      	nop
 800cf4c:	20001c34 	.word	0x20001c34

0800cf50 <_getpid_r>:
 800cf50:	f7f4 be04 	b.w	8001b5c <_getpid>

0800cf54 <__ascii_wctomb>:
 800cf54:	4603      	mov	r3, r0
 800cf56:	4608      	mov	r0, r1
 800cf58:	b141      	cbz	r1, 800cf6c <__ascii_wctomb+0x18>
 800cf5a:	2aff      	cmp	r2, #255	; 0xff
 800cf5c:	d904      	bls.n	800cf68 <__ascii_wctomb+0x14>
 800cf5e:	228a      	movs	r2, #138	; 0x8a
 800cf60:	601a      	str	r2, [r3, #0]
 800cf62:	f04f 30ff 	mov.w	r0, #4294967295
 800cf66:	4770      	bx	lr
 800cf68:	700a      	strb	r2, [r1, #0]
 800cf6a:	2001      	movs	r0, #1
 800cf6c:	4770      	bx	lr
	...

0800cf70 <_fstat_r>:
 800cf70:	b538      	push	{r3, r4, r5, lr}
 800cf72:	4d07      	ldr	r5, [pc, #28]	; (800cf90 <_fstat_r+0x20>)
 800cf74:	2300      	movs	r3, #0
 800cf76:	4604      	mov	r4, r0
 800cf78:	4608      	mov	r0, r1
 800cf7a:	4611      	mov	r1, r2
 800cf7c:	602b      	str	r3, [r5, #0]
 800cf7e:	f7f4 fe52 	bl	8001c26 <_fstat>
 800cf82:	1c43      	adds	r3, r0, #1
 800cf84:	d102      	bne.n	800cf8c <_fstat_r+0x1c>
 800cf86:	682b      	ldr	r3, [r5, #0]
 800cf88:	b103      	cbz	r3, 800cf8c <_fstat_r+0x1c>
 800cf8a:	6023      	str	r3, [r4, #0]
 800cf8c:	bd38      	pop	{r3, r4, r5, pc}
 800cf8e:	bf00      	nop
 800cf90:	20001c34 	.word	0x20001c34

0800cf94 <_isatty_r>:
 800cf94:	b538      	push	{r3, r4, r5, lr}
 800cf96:	4d06      	ldr	r5, [pc, #24]	; (800cfb0 <_isatty_r+0x1c>)
 800cf98:	2300      	movs	r3, #0
 800cf9a:	4604      	mov	r4, r0
 800cf9c:	4608      	mov	r0, r1
 800cf9e:	602b      	str	r3, [r5, #0]
 800cfa0:	f7f4 fe50 	bl	8001c44 <_isatty>
 800cfa4:	1c43      	adds	r3, r0, #1
 800cfa6:	d102      	bne.n	800cfae <_isatty_r+0x1a>
 800cfa8:	682b      	ldr	r3, [r5, #0]
 800cfaa:	b103      	cbz	r3, 800cfae <_isatty_r+0x1a>
 800cfac:	6023      	str	r3, [r4, #0]
 800cfae:	bd38      	pop	{r3, r4, r5, pc}
 800cfb0:	20001c34 	.word	0x20001c34

0800cfb4 <_malloc_usable_size_r>:
 800cfb4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cfb8:	1f18      	subs	r0, r3, #4
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	bfbc      	itt	lt
 800cfbe:	580b      	ldrlt	r3, [r1, r0]
 800cfc0:	18c0      	addlt	r0, r0, r3
 800cfc2:	4770      	bx	lr

0800cfc4 <_init>:
 800cfc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfc6:	bf00      	nop
 800cfc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cfca:	bc08      	pop	{r3}
 800cfcc:	469e      	mov	lr, r3
 800cfce:	4770      	bx	lr

0800cfd0 <_fini>:
 800cfd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfd2:	bf00      	nop
 800cfd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cfd6:	bc08      	pop	{r3}
 800cfd8:	469e      	mov	lr, r3
 800cfda:	4770      	bx	lr
