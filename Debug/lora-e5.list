
lora-e5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d93c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c90  0800da80  0800da80  0001da80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e710  0800e710  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e710  0800e710  0001e710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e718  0800e718  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e718  0800e718  0001e718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e71c  0800e71c  0001e71c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800e720  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b2c  200001e0  0800e900  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d0c  0800e900  00021d0c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b5f2  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005919  00000000  00000000  0004b7fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002640  00000000  00000000  00051118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002408  00000000  00000000  00053758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022eb5  00000000  00000000  00055b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b658  00000000  00000000  00078a15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9923  00000000  00000000  000a406d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016d990  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b500  00000000  00000000  0016d9e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e0 	.word	0x200001e0
 800015c:	00000000 	.word	0x00000000
 8000160:	0800da64 	.word	0x0800da64

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e4 	.word	0x200001e4
 800017c:	0800da64 	.word	0x0800da64

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_frsub>:
 8000b58:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b5c:	e002      	b.n	8000b64 <__addsf3>
 8000b5e:	bf00      	nop

08000b60 <__aeabi_fsub>:
 8000b60:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b64 <__addsf3>:
 8000b64:	0042      	lsls	r2, r0, #1
 8000b66:	bf1f      	itttt	ne
 8000b68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b6c:	ea92 0f03 	teqne	r2, r3
 8000b70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b78:	d06a      	beq.n	8000c50 <__addsf3+0xec>
 8000b7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b82:	bfc1      	itttt	gt
 8000b84:	18d2      	addgt	r2, r2, r3
 8000b86:	4041      	eorgt	r1, r0
 8000b88:	4048      	eorgt	r0, r1
 8000b8a:	4041      	eorgt	r1, r0
 8000b8c:	bfb8      	it	lt
 8000b8e:	425b      	neglt	r3, r3
 8000b90:	2b19      	cmp	r3, #25
 8000b92:	bf88      	it	hi
 8000b94:	4770      	bxhi	lr
 8000b96:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000baa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bae:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4249      	negne	r1, r1
 8000bb6:	ea92 0f03 	teq	r2, r3
 8000bba:	d03f      	beq.n	8000c3c <__addsf3+0xd8>
 8000bbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bc4:	eb10 000c 	adds.w	r0, r0, ip
 8000bc8:	f1c3 0320 	rsb	r3, r3, #32
 8000bcc:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bd4:	d502      	bpl.n	8000bdc <__addsf3+0x78>
 8000bd6:	4249      	negs	r1, r1
 8000bd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bdc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000be0:	d313      	bcc.n	8000c0a <__addsf3+0xa6>
 8000be2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000be6:	d306      	bcc.n	8000bf6 <__addsf3+0x92>
 8000be8:	0840      	lsrs	r0, r0, #1
 8000bea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bee:	f102 0201 	add.w	r2, r2, #1
 8000bf2:	2afe      	cmp	r2, #254	; 0xfe
 8000bf4:	d251      	bcs.n	8000c9a <__addsf3+0x136>
 8000bf6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bfe:	bf08      	it	eq
 8000c00:	f020 0001 	biceq.w	r0, r0, #1
 8000c04:	ea40 0003 	orr.w	r0, r0, r3
 8000c08:	4770      	bx	lr
 8000c0a:	0049      	lsls	r1, r1, #1
 8000c0c:	eb40 0000 	adc.w	r0, r0, r0
 8000c10:	3a01      	subs	r2, #1
 8000c12:	bf28      	it	cs
 8000c14:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c18:	d2ed      	bcs.n	8000bf6 <__addsf3+0x92>
 8000c1a:	fab0 fc80 	clz	ip, r0
 8000c1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c22:	ebb2 020c 	subs.w	r2, r2, ip
 8000c26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c2a:	bfaa      	itet	ge
 8000c2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c30:	4252      	neglt	r2, r2
 8000c32:	4318      	orrge	r0, r3
 8000c34:	bfbc      	itt	lt
 8000c36:	40d0      	lsrlt	r0, r2
 8000c38:	4318      	orrlt	r0, r3
 8000c3a:	4770      	bx	lr
 8000c3c:	f092 0f00 	teq	r2, #0
 8000c40:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c44:	bf06      	itte	eq
 8000c46:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c4a:	3201      	addeq	r2, #1
 8000c4c:	3b01      	subne	r3, #1
 8000c4e:	e7b5      	b.n	8000bbc <__addsf3+0x58>
 8000c50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c58:	bf18      	it	ne
 8000c5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c5e:	d021      	beq.n	8000ca4 <__addsf3+0x140>
 8000c60:	ea92 0f03 	teq	r2, r3
 8000c64:	d004      	beq.n	8000c70 <__addsf3+0x10c>
 8000c66:	f092 0f00 	teq	r2, #0
 8000c6a:	bf08      	it	eq
 8000c6c:	4608      	moveq	r0, r1
 8000c6e:	4770      	bx	lr
 8000c70:	ea90 0f01 	teq	r0, r1
 8000c74:	bf1c      	itt	ne
 8000c76:	2000      	movne	r0, #0
 8000c78:	4770      	bxne	lr
 8000c7a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c7e:	d104      	bne.n	8000c8a <__addsf3+0x126>
 8000c80:	0040      	lsls	r0, r0, #1
 8000c82:	bf28      	it	cs
 8000c84:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c88:	4770      	bx	lr
 8000c8a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c8e:	bf3c      	itt	cc
 8000c90:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bxcc	lr
 8000c96:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c9a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca2:	4770      	bx	lr
 8000ca4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca8:	bf16      	itet	ne
 8000caa:	4608      	movne	r0, r1
 8000cac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb0:	4601      	movne	r1, r0
 8000cb2:	0242      	lsls	r2, r0, #9
 8000cb4:	bf06      	itte	eq
 8000cb6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cba:	ea90 0f01 	teqeq	r0, r1
 8000cbe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cc2:	4770      	bx	lr

08000cc4 <__aeabi_ui2f>:
 8000cc4:	f04f 0300 	mov.w	r3, #0
 8000cc8:	e004      	b.n	8000cd4 <__aeabi_i2f+0x8>
 8000cca:	bf00      	nop

08000ccc <__aeabi_i2f>:
 8000ccc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cd0:	bf48      	it	mi
 8000cd2:	4240      	negmi	r0, r0
 8000cd4:	ea5f 0c00 	movs.w	ip, r0
 8000cd8:	bf08      	it	eq
 8000cda:	4770      	bxeq	lr
 8000cdc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ce0:	4601      	mov	r1, r0
 8000ce2:	f04f 0000 	mov.w	r0, #0
 8000ce6:	e01c      	b.n	8000d22 <__aeabi_l2f+0x2a>

08000ce8 <__aeabi_ul2f>:
 8000ce8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cec:	bf08      	it	eq
 8000cee:	4770      	bxeq	lr
 8000cf0:	f04f 0300 	mov.w	r3, #0
 8000cf4:	e00a      	b.n	8000d0c <__aeabi_l2f+0x14>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_l2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d04:	d502      	bpl.n	8000d0c <__aeabi_l2f+0x14>
 8000d06:	4240      	negs	r0, r0
 8000d08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0c:	ea5f 0c01 	movs.w	ip, r1
 8000d10:	bf02      	ittt	eq
 8000d12:	4684      	moveq	ip, r0
 8000d14:	4601      	moveq	r1, r0
 8000d16:	2000      	moveq	r0, #0
 8000d18:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d1c:	bf08      	it	eq
 8000d1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d22:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d26:	fabc f28c 	clz	r2, ip
 8000d2a:	3a08      	subs	r2, #8
 8000d2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d30:	db10      	blt.n	8000d54 <__aeabi_l2f+0x5c>
 8000d32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d36:	4463      	add	r3, ip
 8000d38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d3c:	f1c2 0220 	rsb	r2, r2, #32
 8000d40:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d44:	fa20 f202 	lsr.w	r2, r0, r2
 8000d48:	eb43 0002 	adc.w	r0, r3, r2
 8000d4c:	bf08      	it	eq
 8000d4e:	f020 0001 	biceq.w	r0, r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	f102 0220 	add.w	r2, r2, #32
 8000d58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d5c:	f1c2 0220 	rsb	r2, r2, #32
 8000d60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d64:	fa21 f202 	lsr.w	r2, r1, r2
 8000d68:	eb43 0002 	adc.w	r0, r3, r2
 8000d6c:	bf08      	it	eq
 8000d6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d72:	4770      	bx	lr

08000d74 <__aeabi_f2uiz>:
 8000d74:	0042      	lsls	r2, r0, #1
 8000d76:	d20e      	bcs.n	8000d96 <__aeabi_f2uiz+0x22>
 8000d78:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d7c:	d30b      	bcc.n	8000d96 <__aeabi_f2uiz+0x22>
 8000d7e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d82:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d86:	d409      	bmi.n	8000d9c <__aeabi_f2uiz+0x28>
 8000d88:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d90:	fa23 f002 	lsr.w	r0, r3, r2
 8000d94:	4770      	bx	lr
 8000d96:	f04f 0000 	mov.w	r0, #0
 8000d9a:	4770      	bx	lr
 8000d9c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000da0:	d101      	bne.n	8000da6 <__aeabi_f2uiz+0x32>
 8000da2:	0242      	lsls	r2, r0, #9
 8000da4:	d102      	bne.n	8000dac <__aeabi_f2uiz+0x38>
 8000da6:	f04f 30ff 	mov.w	r0, #4294967295
 8000daa:	4770      	bx	lr
 8000dac:	f04f 0000 	mov.w	r0, #0
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop

08000db4 <__aeabi_uldivmod>:
 8000db4:	b953      	cbnz	r3, 8000dcc <__aeabi_uldivmod+0x18>
 8000db6:	b94a      	cbnz	r2, 8000dcc <__aeabi_uldivmod+0x18>
 8000db8:	2900      	cmp	r1, #0
 8000dba:	bf08      	it	eq
 8000dbc:	2800      	cmpeq	r0, #0
 8000dbe:	bf1c      	itt	ne
 8000dc0:	f04f 31ff 	movne.w	r1, #4294967295
 8000dc4:	f04f 30ff 	movne.w	r0, #4294967295
 8000dc8:	f000 b974 	b.w	80010b4 <__aeabi_idiv0>
 8000dcc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000dd0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000dd4:	f000 f806 	bl	8000de4 <__udivmoddi4>
 8000dd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ddc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000de0:	b004      	add	sp, #16
 8000de2:	4770      	bx	lr

08000de4 <__udivmoddi4>:
 8000de4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000de8:	9e08      	ldr	r6, [sp, #32]
 8000dea:	460d      	mov	r5, r1
 8000dec:	4604      	mov	r4, r0
 8000dee:	4688      	mov	r8, r1
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d14d      	bne.n	8000e90 <__udivmoddi4+0xac>
 8000df4:	428a      	cmp	r2, r1
 8000df6:	4694      	mov	ip, r2
 8000df8:	d968      	bls.n	8000ecc <__udivmoddi4+0xe8>
 8000dfa:	fab2 f282 	clz	r2, r2
 8000dfe:	b152      	cbz	r2, 8000e16 <__udivmoddi4+0x32>
 8000e00:	fa01 f302 	lsl.w	r3, r1, r2
 8000e04:	f1c2 0120 	rsb	r1, r2, #32
 8000e08:	fa20 f101 	lsr.w	r1, r0, r1
 8000e0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e10:	ea41 0803 	orr.w	r8, r1, r3
 8000e14:	4094      	lsls	r4, r2
 8000e16:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000e1a:	0c21      	lsrs	r1, r4, #16
 8000e1c:	fbb8 fef5 	udiv	lr, r8, r5
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	fb05 831e 	mls	r3, r5, lr, r8
 8000e28:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e2c:	fb0e f107 	mul.w	r1, lr, r7
 8000e30:	4299      	cmp	r1, r3
 8000e32:	d90b      	bls.n	8000e4c <__udivmoddi4+0x68>
 8000e34:	eb1c 0303 	adds.w	r3, ip, r3
 8000e38:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000e3c:	f080 811e 	bcs.w	800107c <__udivmoddi4+0x298>
 8000e40:	4299      	cmp	r1, r3
 8000e42:	f240 811b 	bls.w	800107c <__udivmoddi4+0x298>
 8000e46:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e4a:	4463      	add	r3, ip
 8000e4c:	1a5b      	subs	r3, r3, r1
 8000e4e:	b2a4      	uxth	r4, r4
 8000e50:	fbb3 f0f5 	udiv	r0, r3, r5
 8000e54:	fb05 3310 	mls	r3, r5, r0, r3
 8000e58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e5c:	fb00 f707 	mul.w	r7, r0, r7
 8000e60:	42a7      	cmp	r7, r4
 8000e62:	d90a      	bls.n	8000e7a <__udivmoddi4+0x96>
 8000e64:	eb1c 0404 	adds.w	r4, ip, r4
 8000e68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e6c:	f080 8108 	bcs.w	8001080 <__udivmoddi4+0x29c>
 8000e70:	42a7      	cmp	r7, r4
 8000e72:	f240 8105 	bls.w	8001080 <__udivmoddi4+0x29c>
 8000e76:	4464      	add	r4, ip
 8000e78:	3802      	subs	r0, #2
 8000e7a:	1be4      	subs	r4, r4, r7
 8000e7c:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000e80:	2100      	movs	r1, #0
 8000e82:	b11e      	cbz	r6, 8000e8c <__udivmoddi4+0xa8>
 8000e84:	40d4      	lsrs	r4, r2
 8000e86:	2300      	movs	r3, #0
 8000e88:	e9c6 4300 	strd	r4, r3, [r6]
 8000e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e90:	428b      	cmp	r3, r1
 8000e92:	d908      	bls.n	8000ea6 <__udivmoddi4+0xc2>
 8000e94:	2e00      	cmp	r6, #0
 8000e96:	f000 80ee 	beq.w	8001076 <__udivmoddi4+0x292>
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	e9c6 0500 	strd	r0, r5, [r6]
 8000ea0:	4608      	mov	r0, r1
 8000ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea6:	fab3 f183 	clz	r1, r3
 8000eaa:	2900      	cmp	r1, #0
 8000eac:	d14a      	bne.n	8000f44 <__udivmoddi4+0x160>
 8000eae:	42ab      	cmp	r3, r5
 8000eb0:	d302      	bcc.n	8000eb8 <__udivmoddi4+0xd4>
 8000eb2:	4282      	cmp	r2, r0
 8000eb4:	f200 80f9 	bhi.w	80010aa <__udivmoddi4+0x2c6>
 8000eb8:	1a84      	subs	r4, r0, r2
 8000eba:	eb65 0303 	sbc.w	r3, r5, r3
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	4698      	mov	r8, r3
 8000ec2:	2e00      	cmp	r6, #0
 8000ec4:	d0e2      	beq.n	8000e8c <__udivmoddi4+0xa8>
 8000ec6:	e9c6 4800 	strd	r4, r8, [r6]
 8000eca:	e7df      	b.n	8000e8c <__udivmoddi4+0xa8>
 8000ecc:	b902      	cbnz	r2, 8000ed0 <__udivmoddi4+0xec>
 8000ece:	deff      	udf	#255	; 0xff
 8000ed0:	fab2 f282 	clz	r2, r2
 8000ed4:	2a00      	cmp	r2, #0
 8000ed6:	f040 8091 	bne.w	8000ffc <__udivmoddi4+0x218>
 8000eda:	eba1 050c 	sub.w	r5, r1, ip
 8000ede:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee2:	fa1f fe8c 	uxth.w	lr, ip
 8000ee6:	2101      	movs	r1, #1
 8000ee8:	fbb5 f3f7 	udiv	r3, r5, r7
 8000eec:	fb07 5013 	mls	r0, r7, r3, r5
 8000ef0:	0c25      	lsrs	r5, r4, #16
 8000ef2:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000ef6:	fb0e f003 	mul.w	r0, lr, r3
 8000efa:	42a8      	cmp	r0, r5
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x12c>
 8000efe:	eb1c 0505 	adds.w	r5, ip, r5
 8000f02:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f06:	d202      	bcs.n	8000f0e <__udivmoddi4+0x12a>
 8000f08:	42a8      	cmp	r0, r5
 8000f0a:	f200 80cb 	bhi.w	80010a4 <__udivmoddi4+0x2c0>
 8000f0e:	4643      	mov	r3, r8
 8000f10:	1a2d      	subs	r5, r5, r0
 8000f12:	b2a4      	uxth	r4, r4
 8000f14:	fbb5 f0f7 	udiv	r0, r5, r7
 8000f18:	fb07 5510 	mls	r5, r7, r0, r5
 8000f1c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f20:	fb0e fe00 	mul.w	lr, lr, r0
 8000f24:	45a6      	cmp	lr, r4
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x156>
 8000f28:	eb1c 0404 	adds.w	r4, ip, r4
 8000f2c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000f30:	d202      	bcs.n	8000f38 <__udivmoddi4+0x154>
 8000f32:	45a6      	cmp	lr, r4
 8000f34:	f200 80bb 	bhi.w	80010ae <__udivmoddi4+0x2ca>
 8000f38:	4628      	mov	r0, r5
 8000f3a:	eba4 040e 	sub.w	r4, r4, lr
 8000f3e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f42:	e79e      	b.n	8000e82 <__udivmoddi4+0x9e>
 8000f44:	f1c1 0720 	rsb	r7, r1, #32
 8000f48:	408b      	lsls	r3, r1
 8000f4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f52:	fa20 f407 	lsr.w	r4, r0, r7
 8000f56:	fa05 f301 	lsl.w	r3, r5, r1
 8000f5a:	431c      	orrs	r4, r3
 8000f5c:	40fd      	lsrs	r5, r7
 8000f5e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f62:	fa00 f301 	lsl.w	r3, r0, r1
 8000f66:	fbb5 f8f9 	udiv	r8, r5, r9
 8000f6a:	0c20      	lsrs	r0, r4, #16
 8000f6c:	fa1f fe8c 	uxth.w	lr, ip
 8000f70:	fb09 5518 	mls	r5, r9, r8, r5
 8000f74:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8000f78:	fb08 f00e 	mul.w	r0, r8, lr
 8000f7c:	42a8      	cmp	r0, r5
 8000f7e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f82:	d90b      	bls.n	8000f9c <__udivmoddi4+0x1b8>
 8000f84:	eb1c 0505 	adds.w	r5, ip, r5
 8000f88:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f8c:	f080 8088 	bcs.w	80010a0 <__udivmoddi4+0x2bc>
 8000f90:	42a8      	cmp	r0, r5
 8000f92:	f240 8085 	bls.w	80010a0 <__udivmoddi4+0x2bc>
 8000f96:	f1a8 0802 	sub.w	r8, r8, #2
 8000f9a:	4465      	add	r5, ip
 8000f9c:	1a2d      	subs	r5, r5, r0
 8000f9e:	b2a4      	uxth	r4, r4
 8000fa0:	fbb5 f0f9 	udiv	r0, r5, r9
 8000fa4:	fb09 5510 	mls	r5, r9, r0, r5
 8000fa8:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000fac:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fb0:	45ae      	cmp	lr, r5
 8000fb2:	d908      	bls.n	8000fc6 <__udivmoddi4+0x1e2>
 8000fb4:	eb1c 0505 	adds.w	r5, ip, r5
 8000fb8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fbc:	d26c      	bcs.n	8001098 <__udivmoddi4+0x2b4>
 8000fbe:	45ae      	cmp	lr, r5
 8000fc0:	d96a      	bls.n	8001098 <__udivmoddi4+0x2b4>
 8000fc2:	3802      	subs	r0, #2
 8000fc4:	4465      	add	r5, ip
 8000fc6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fca:	fba0 9402 	umull	r9, r4, r0, r2
 8000fce:	eba5 050e 	sub.w	r5, r5, lr
 8000fd2:	42a5      	cmp	r5, r4
 8000fd4:	46c8      	mov	r8, r9
 8000fd6:	46a6      	mov	lr, r4
 8000fd8:	d356      	bcc.n	8001088 <__udivmoddi4+0x2a4>
 8000fda:	d053      	beq.n	8001084 <__udivmoddi4+0x2a0>
 8000fdc:	b15e      	cbz	r6, 8000ff6 <__udivmoddi4+0x212>
 8000fde:	ebb3 0208 	subs.w	r2, r3, r8
 8000fe2:	eb65 050e 	sbc.w	r5, r5, lr
 8000fe6:	fa05 f707 	lsl.w	r7, r5, r7
 8000fea:	fa22 f301 	lsr.w	r3, r2, r1
 8000fee:	40cd      	lsrs	r5, r1
 8000ff0:	431f      	orrs	r7, r3
 8000ff2:	e9c6 7500 	strd	r7, r5, [r6]
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ffc:	f1c2 0320 	rsb	r3, r2, #32
 8001000:	fa20 f103 	lsr.w	r1, r0, r3
 8001004:	fa0c fc02 	lsl.w	ip, ip, r2
 8001008:	fa25 f303 	lsr.w	r3, r5, r3
 800100c:	4095      	lsls	r5, r2
 800100e:	430d      	orrs	r5, r1
 8001010:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001014:	fa1f fe8c 	uxth.w	lr, ip
 8001018:	fbb3 f1f7 	udiv	r1, r3, r7
 800101c:	fb07 3011 	mls	r0, r7, r1, r3
 8001020:	0c2b      	lsrs	r3, r5, #16
 8001022:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8001026:	fb01 f00e 	mul.w	r0, r1, lr
 800102a:	4298      	cmp	r0, r3
 800102c:	fa04 f402 	lsl.w	r4, r4, r2
 8001030:	d908      	bls.n	8001044 <__udivmoddi4+0x260>
 8001032:	eb1c 0303 	adds.w	r3, ip, r3
 8001036:	f101 38ff 	add.w	r8, r1, #4294967295
 800103a:	d22f      	bcs.n	800109c <__udivmoddi4+0x2b8>
 800103c:	4298      	cmp	r0, r3
 800103e:	d92d      	bls.n	800109c <__udivmoddi4+0x2b8>
 8001040:	3902      	subs	r1, #2
 8001042:	4463      	add	r3, ip
 8001044:	1a1b      	subs	r3, r3, r0
 8001046:	b2ad      	uxth	r5, r5
 8001048:	fbb3 f0f7 	udiv	r0, r3, r7
 800104c:	fb07 3310 	mls	r3, r7, r0, r3
 8001050:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8001054:	fb00 f30e 	mul.w	r3, r0, lr
 8001058:	42ab      	cmp	r3, r5
 800105a:	d908      	bls.n	800106e <__udivmoddi4+0x28a>
 800105c:	eb1c 0505 	adds.w	r5, ip, r5
 8001060:	f100 38ff 	add.w	r8, r0, #4294967295
 8001064:	d216      	bcs.n	8001094 <__udivmoddi4+0x2b0>
 8001066:	42ab      	cmp	r3, r5
 8001068:	d914      	bls.n	8001094 <__udivmoddi4+0x2b0>
 800106a:	3802      	subs	r0, #2
 800106c:	4465      	add	r5, ip
 800106e:	1aed      	subs	r5, r5, r3
 8001070:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001074:	e738      	b.n	8000ee8 <__udivmoddi4+0x104>
 8001076:	4631      	mov	r1, r6
 8001078:	4630      	mov	r0, r6
 800107a:	e707      	b.n	8000e8c <__udivmoddi4+0xa8>
 800107c:	4686      	mov	lr, r0
 800107e:	e6e5      	b.n	8000e4c <__udivmoddi4+0x68>
 8001080:	4618      	mov	r0, r3
 8001082:	e6fa      	b.n	8000e7a <__udivmoddi4+0x96>
 8001084:	454b      	cmp	r3, r9
 8001086:	d2a9      	bcs.n	8000fdc <__udivmoddi4+0x1f8>
 8001088:	ebb9 0802 	subs.w	r8, r9, r2
 800108c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001090:	3801      	subs	r0, #1
 8001092:	e7a3      	b.n	8000fdc <__udivmoddi4+0x1f8>
 8001094:	4640      	mov	r0, r8
 8001096:	e7ea      	b.n	800106e <__udivmoddi4+0x28a>
 8001098:	4620      	mov	r0, r4
 800109a:	e794      	b.n	8000fc6 <__udivmoddi4+0x1e2>
 800109c:	4641      	mov	r1, r8
 800109e:	e7d1      	b.n	8001044 <__udivmoddi4+0x260>
 80010a0:	46d0      	mov	r8, sl
 80010a2:	e77b      	b.n	8000f9c <__udivmoddi4+0x1b8>
 80010a4:	3b02      	subs	r3, #2
 80010a6:	4465      	add	r5, ip
 80010a8:	e732      	b.n	8000f10 <__udivmoddi4+0x12c>
 80010aa:	4608      	mov	r0, r1
 80010ac:	e709      	b.n	8000ec2 <__udivmoddi4+0xde>
 80010ae:	4464      	add	r4, ip
 80010b0:	3802      	subs	r0, #2
 80010b2:	e742      	b.n	8000f3a <__udivmoddi4+0x156>

080010b4 <__aeabi_idiv0>:
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop

080010b8 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	bc80      	pop	{r7}
 80010c2:	4770      	bx	lr

080010c4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	4a06      	ldr	r2, [pc, #24]	; (80010ec <vApplicationGetIdleTaskMemory+0x28>)
 80010d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	4a05      	ldr	r2, [pc, #20]	; (80010f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80010da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2280      	movs	r2, #128	; 0x80
 80010e0:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80010e2:	bf00      	nop
 80010e4:	3714      	adds	r7, #20
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bc80      	pop	{r7}
 80010ea:	4770      	bx	lr
 80010ec:	200001fc 	.word	0x200001fc
 80010f0:	200002b0 	.word	0x200002b0

080010f4 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	4a07      	ldr	r2, [pc, #28]	; (8001120 <vApplicationGetTimerTaskMemory+0x2c>)
 8001104:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	4a06      	ldr	r2, [pc, #24]	; (8001124 <vApplicationGetTimerTaskMemory+0x30>)
 800110a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001112:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001114:	bf00      	nop
 8001116:	3714      	adds	r7, #20
 8001118:	46bd      	mov	sp, r7
 800111a:	bc80      	pop	{r7}
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	200004b0 	.word	0x200004b0
 8001124:	20000564 	.word	0x20000564

08001128 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001130:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001138:	f023 0218 	bic.w	r2, r3, #24
 800113c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4313      	orrs	r3, r2
 8001144:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	bc80      	pop	{r7}
 8001150:	4770      	bx	lr

08001152 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001152:	b480      	push	{r7}
 8001154:	b085      	sub	sp, #20
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800115a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800115e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001160:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4313      	orrs	r3, r2
 8001168:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800116a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800116e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	4013      	ands	r3, r2
 8001174:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001176:	68fb      	ldr	r3, [r7, #12]
}
 8001178:	bf00      	nop
 800117a:	3714      	adds	r7, #20
 800117c:	46bd      	mov	sp, r7
 800117e:	bc80      	pop	{r7}
 8001180:	4770      	bx	lr
	...

08001184 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001184:	b5b0      	push	{r4, r5, r7, lr}
 8001186:	b094      	sub	sp, #80	; 0x50
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800118a:	f000 ff19 	bl	8001fc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800118e:	f000 f871 	bl	8001274 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001192:	f000 fac5 	bl	8001720 <MX_GPIO_Init>
  MX_ADC_Init();
 8001196:	f000 f8cb 	bl	8001330 <MX_ADC_Init>
  MX_LPUART1_UART_Init();
 800119a:	f000 f957 	bl	800144c <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 800119e:	f000 f99f 	bl	80014e0 <MX_USART2_UART_Init>
  MX_RTC_Init();
 80011a2:	f000 f9e9 	bl	8001578 <MX_RTC_Init>
  MX_SPI2_Init();
 80011a6:	f000 fa7d 	bl	80016a4 <MX_SPI2_Init>
  MX_I2C2_Init();
 80011aa:	f000 f90f 	bl	80013cc <MX_I2C2_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of UartMutex */
  osMutexDef(UartMutex);
 80011ae:	2300      	movs	r3, #0
 80011b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80011b2:	2300      	movs	r3, #0
 80011b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  UartMutexHandle = osMutexCreate(osMutex(UartMutex));
 80011b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011ba:	4618      	mov	r0, r3
 80011bc:	f006 ffbc 	bl	8008138 <osMutexCreate>
 80011c0:	4603      	mov	r3, r0
 80011c2:	4a24      	ldr	r2, [pc, #144]	; (8001254 <main+0xd0>)
 80011c4:	6013      	str	r3, [r2, #0]

  /* definition and creation of SpiMutex */
  osMutexDef(SpiMutex);
 80011c6:	2300      	movs	r3, #0
 80011c8:	643b      	str	r3, [r7, #64]	; 0x40
 80011ca:	2300      	movs	r3, #0
 80011cc:	647b      	str	r3, [r7, #68]	; 0x44
  SpiMutexHandle = osMutexCreate(osMutex(SpiMutex));
 80011ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011d2:	4618      	mov	r0, r3
 80011d4:	f006 ffb0 	bl	8008138 <osMutexCreate>
 80011d8:	4603      	mov	r3, r0
 80011da:	4a1f      	ldr	r2, [pc, #124]	; (8001258 <main+0xd4>)
 80011dc:	6013      	str	r3, [r2, #0]

  /* definition and creation of I2cMutex */
  osMutexDef(I2cMutex);
 80011de:	2300      	movs	r3, #0
 80011e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80011e2:	2300      	movs	r3, #0
 80011e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  I2cMutexHandle = osMutexCreate(osMutex(I2cMutex));
 80011e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80011ea:	4618      	mov	r0, r3
 80011ec:	f006 ffa4 	bl	8008138 <osMutexCreate>
 80011f0:	4603      	mov	r3, r0
 80011f2:	4a1a      	ldr	r2, [pc, #104]	; (800125c <main+0xd8>)
 80011f4:	6013      	str	r3, [r2, #0]

  /* definition and creation of RtcMutex */
  osMutexDef(RtcMutex);
 80011f6:	2300      	movs	r3, #0
 80011f8:	633b      	str	r3, [r7, #48]	; 0x30
 80011fa:	2300      	movs	r3, #0
 80011fc:	637b      	str	r3, [r7, #52]	; 0x34
  RtcMutexHandle = osMutexCreate(osMutex(RtcMutex));
 80011fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001202:	4618      	mov	r0, r3
 8001204:	f006 ff98 	bl	8008138 <osMutexCreate>
 8001208:	4603      	mov	r3, r0
 800120a:	4a15      	ldr	r2, [pc, #84]	; (8001260 <main+0xdc>)
 800120c:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of xQueue1 */
  osMessageQDef(xQueue1, 100, uint16_t);
 800120e:	4b15      	ldr	r3, [pc, #84]	; (8001264 <main+0xe0>)
 8001210:	f107 0420 	add.w	r4, r7, #32
 8001214:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001216:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  xQueue1Handle = osMessageCreate(osMessageQ(xQueue1), NULL);
 800121a:	f107 0320 	add.w	r3, r7, #32
 800121e:	2100      	movs	r1, #0
 8001220:	4618      	mov	r0, r3
 8001222:	f006 ffa1 	bl	8008168 <osMessageCreate>
 8001226:	4603      	mov	r3, r0
 8001228:	4a0f      	ldr	r2, [pc, #60]	; (8001268 <main+0xe4>)
 800122a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of terminalTask */
  osThreadDef(terminalTask, terminalTaskHandler, osPriorityNormal, 0, 128);
 800122c:	4b0f      	ldr	r3, [pc, #60]	; (800126c <main+0xe8>)
 800122e:	1d3c      	adds	r4, r7, #4
 8001230:	461d      	mov	r5, r3
 8001232:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001234:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001236:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800123a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  terminalTaskHandle = osThreadCreate(osThread(terminalTask), NULL);
 800123e:	1d3b      	adds	r3, r7, #4
 8001240:	2100      	movs	r1, #0
 8001242:	4618      	mov	r0, r3
 8001244:	f006 ff18 	bl	8008078 <osThreadCreate>
 8001248:	4603      	mov	r3, r0
 800124a:	4a09      	ldr	r2, [pc, #36]	; (8001270 <main+0xec>)
 800124c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800124e:	f006 ff0c 	bl	800806a <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001252:	e7fe      	b.n	8001252 <main+0xce>
 8001254:	20000be8 	.word	0x20000be8
 8001258:	20000bec 	.word	0x20000bec
 800125c:	20000bf0 	.word	0x20000bf0
 8001260:	20000bf4 	.word	0x20000bf4
 8001264:	0800da90 	.word	0x0800da90
 8001268:	20000be4 	.word	0x20000be4
 800126c:	0800daa0 	.word	0x0800daa0
 8001270:	20000be0 	.word	0x20000be0

08001274 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b09a      	sub	sp, #104	; 0x68
 8001278:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800127a:	f107 0320 	add.w	r3, r7, #32
 800127e:	2248      	movs	r2, #72	; 0x48
 8001280:	2100      	movs	r1, #0
 8001282:	4618      	mov	r0, r3
 8001284:	f009 fd1b 	bl	800acbe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001288:	f107 0308 	add.w	r3, r7, #8
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]
 8001298:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800129a:	f002 f8c5 	bl	8003428 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800129e:	2000      	movs	r0, #0
 80012a0:	f7ff ff42 	bl	8001128 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012a4:	4b21      	ldr	r3, [pc, #132]	; (800132c <SystemClock_Config+0xb8>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012ac:	4a1f      	ldr	r2, [pc, #124]	; (800132c <SystemClock_Config+0xb8>)
 80012ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012b2:	6013      	str	r3, [r2, #0]
 80012b4:	4b1d      	ldr	r3, [pc, #116]	; (800132c <SystemClock_Config+0xb8>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012bc:	607b      	str	r3, [r7, #4]
 80012be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 80012c0:	2326      	movs	r3, #38	; 0x26
 80012c2:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80012c4:	2381      	movs	r3, #129	; 0x81
 80012c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012cc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80012ce:	2301      	movs	r3, #1
 80012d0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012d2:	2340      	movs	r3, #64	; 0x40
 80012d4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80012d6:	2300      	movs	r3, #0
 80012d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80012da:	23b0      	movs	r3, #176	; 0xb0
 80012dc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012de:	2300      	movs	r3, #0
 80012e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012e2:	f107 0320 	add.w	r3, r7, #32
 80012e6:	4618      	mov	r0, r3
 80012e8:	f002 fb48 	bl	800397c <HAL_RCC_OscConfig>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80012f2:	f000 faaf 	bl	8001854 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80012f6:	234f      	movs	r3, #79	; 0x4f
 80012f8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80012fa:	2300      	movs	r3, #0
 80012fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012fe:	2300      	movs	r3, #0
 8001300:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001302:	2300      	movs	r3, #0
 8001304:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001306:	2300      	movs	r3, #0
 8001308:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800130a:	2300      	movs	r3, #0
 800130c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800130e:	f107 0308 	add.w	r3, r7, #8
 8001312:	2102      	movs	r1, #2
 8001314:	4618      	mov	r0, r3
 8001316:	f002 feb3 	bl	8004080 <HAL_RCC_ClockConfig>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d001      	beq.n	8001324 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001320:	f000 fa98 	bl	8001854 <Error_Handler>
  }
}
 8001324:	bf00      	nop
 8001326:	3768      	adds	r7, #104	; 0x68
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	58000400 	.word	0x58000400

08001330 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8001334:	4b23      	ldr	r3, [pc, #140]	; (80013c4 <MX_ADC_Init+0x94>)
 8001336:	4a24      	ldr	r2, [pc, #144]	; (80013c8 <MX_ADC_Init+0x98>)
 8001338:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800133a:	4b22      	ldr	r3, [pc, #136]	; (80013c4 <MX_ADC_Init+0x94>)
 800133c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001340:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001342:	4b20      	ldr	r3, [pc, #128]	; (80013c4 <MX_ADC_Init+0x94>)
 8001344:	2200      	movs	r2, #0
 8001346:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001348:	4b1e      	ldr	r3, [pc, #120]	; (80013c4 <MX_ADC_Init+0x94>)
 800134a:	2200      	movs	r2, #0
 800134c:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800134e:	4b1d      	ldr	r3, [pc, #116]	; (80013c4 <MX_ADC_Init+0x94>)
 8001350:	2200      	movs	r2, #0
 8001352:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001354:	4b1b      	ldr	r3, [pc, #108]	; (80013c4 <MX_ADC_Init+0x94>)
 8001356:	2204      	movs	r2, #4
 8001358:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800135a:	4b1a      	ldr	r3, [pc, #104]	; (80013c4 <MX_ADC_Init+0x94>)
 800135c:	2200      	movs	r2, #0
 800135e:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8001360:	4b18      	ldr	r3, [pc, #96]	; (80013c4 <MX_ADC_Init+0x94>)
 8001362:	2200      	movs	r2, #0
 8001364:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001366:	4b17      	ldr	r3, [pc, #92]	; (80013c4 <MX_ADC_Init+0x94>)
 8001368:	2200      	movs	r2, #0
 800136a:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 800136c:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <MX_ADC_Init+0x94>)
 800136e:	2201      	movs	r2, #1
 8001370:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001372:	4b14      	ldr	r3, [pc, #80]	; (80013c4 <MX_ADC_Init+0x94>)
 8001374:	2200      	movs	r2, #0
 8001376:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800137a:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <MX_ADC_Init+0x94>)
 800137c:	2200      	movs	r2, #0
 800137e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001380:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <MX_ADC_Init+0x94>)
 8001382:	2200      	movs	r2, #0
 8001384:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001386:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <MX_ADC_Init+0x94>)
 8001388:	2200      	movs	r2, #0
 800138a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800138e:	4b0d      	ldr	r3, [pc, #52]	; (80013c4 <MX_ADC_Init+0x94>)
 8001390:	2200      	movs	r2, #0
 8001392:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8001394:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <MX_ADC_Init+0x94>)
 8001396:	2200      	movs	r2, #0
 8001398:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800139a:	4b0a      	ldr	r3, [pc, #40]	; (80013c4 <MX_ADC_Init+0x94>)
 800139c:	2200      	movs	r2, #0
 800139e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <MX_ADC_Init+0x94>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80013a8:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <MX_ADC_Init+0x94>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80013ae:	4805      	ldr	r0, [pc, #20]	; (80013c4 <MX_ADC_Init+0x94>)
 80013b0:	f000 ff4a 	bl	8002248 <HAL_ADC_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_ADC_Init+0x8e>
  {
    Error_Handler();
 80013ba:	f000 fa4b 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000964 	.word	0x20000964
 80013c8:	40012400 	.word	0x40012400

080013cc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80013d0:	4b1b      	ldr	r3, [pc, #108]	; (8001440 <MX_I2C2_Init+0x74>)
 80013d2:	4a1c      	ldr	r2, [pc, #112]	; (8001444 <MX_I2C2_Init+0x78>)
 80013d4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 80013d6:	4b1a      	ldr	r3, [pc, #104]	; (8001440 <MX_I2C2_Init+0x74>)
 80013d8:	4a1b      	ldr	r2, [pc, #108]	; (8001448 <MX_I2C2_Init+0x7c>)
 80013da:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80013dc:	4b18      	ldr	r3, [pc, #96]	; (8001440 <MX_I2C2_Init+0x74>)
 80013de:	2200      	movs	r2, #0
 80013e0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013e2:	4b17      	ldr	r3, [pc, #92]	; (8001440 <MX_I2C2_Init+0x74>)
 80013e4:	2201      	movs	r2, #1
 80013e6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013e8:	4b15      	ldr	r3, [pc, #84]	; (8001440 <MX_I2C2_Init+0x74>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80013ee:	4b14      	ldr	r3, [pc, #80]	; (8001440 <MX_I2C2_Init+0x74>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013f4:	4b12      	ldr	r3, [pc, #72]	; (8001440 <MX_I2C2_Init+0x74>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013fa:	4b11      	ldr	r3, [pc, #68]	; (8001440 <MX_I2C2_Init+0x74>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001400:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <MX_I2C2_Init+0x74>)
 8001402:	2200      	movs	r2, #0
 8001404:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001406:	480e      	ldr	r0, [pc, #56]	; (8001440 <MX_I2C2_Init+0x74>)
 8001408:	f001 fee9 	bl	80031de <HAL_I2C_Init>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001412:	f000 fa1f 	bl	8001854 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001416:	2100      	movs	r1, #0
 8001418:	4809      	ldr	r0, [pc, #36]	; (8001440 <MX_I2C2_Init+0x74>)
 800141a:	f001 ff6f 	bl	80032fc <HAL_I2CEx_ConfigAnalogFilter>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001424:	f000 fa16 	bl	8001854 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001428:	2100      	movs	r1, #0
 800142a:	4805      	ldr	r0, [pc, #20]	; (8001440 <MX_I2C2_Init+0x74>)
 800142c:	f001 ffb0 	bl	8003390 <HAL_I2CEx_ConfigDigitalFilter>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001436:	f000 fa0d 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	200009c8 	.word	0x200009c8
 8001444:	40005800 	.word	0x40005800
 8001448:	20303e5d 	.word	0x20303e5d

0800144c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001450:	4b20      	ldr	r3, [pc, #128]	; (80014d4 <MX_LPUART1_UART_Init+0x88>)
 8001452:	4a21      	ldr	r2, [pc, #132]	; (80014d8 <MX_LPUART1_UART_Init+0x8c>)
 8001454:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8001456:	4b1f      	ldr	r3, [pc, #124]	; (80014d4 <MX_LPUART1_UART_Init+0x88>)
 8001458:	4a20      	ldr	r2, [pc, #128]	; (80014dc <MX_LPUART1_UART_Init+0x90>)
 800145a:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800145c:	4b1d      	ldr	r3, [pc, #116]	; (80014d4 <MX_LPUART1_UART_Init+0x88>)
 800145e:	2200      	movs	r2, #0
 8001460:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001462:	4b1c      	ldr	r3, [pc, #112]	; (80014d4 <MX_LPUART1_UART_Init+0x88>)
 8001464:	2200      	movs	r2, #0
 8001466:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001468:	4b1a      	ldr	r3, [pc, #104]	; (80014d4 <MX_LPUART1_UART_Init+0x88>)
 800146a:	2200      	movs	r2, #0
 800146c:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_RX;
 800146e:	4b19      	ldr	r3, [pc, #100]	; (80014d4 <MX_LPUART1_UART_Init+0x88>)
 8001470:	2204      	movs	r2, #4
 8001472:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001474:	4b17      	ldr	r3, [pc, #92]	; (80014d4 <MX_LPUART1_UART_Init+0x88>)
 8001476:	2200      	movs	r2, #0
 8001478:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800147a:	4b16      	ldr	r3, [pc, #88]	; (80014d4 <MX_LPUART1_UART_Init+0x88>)
 800147c:	2200      	movs	r2, #0
 800147e:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001480:	4b14      	ldr	r3, [pc, #80]	; (80014d4 <MX_LPUART1_UART_Init+0x88>)
 8001482:	2200      	movs	r2, #0
 8001484:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001486:	4b13      	ldr	r3, [pc, #76]	; (80014d4 <MX_LPUART1_UART_Init+0x88>)
 8001488:	2200      	movs	r2, #0
 800148a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&hlpuart1) != HAL_OK)
 800148c:	4811      	ldr	r0, [pc, #68]	; (80014d4 <MX_LPUART1_UART_Init+0x88>)
 800148e:	f004 facb 	bl	8005a28 <HAL_HalfDuplex_Init>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8001498:	f000 f9dc 	bl	8001854 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800149c:	2100      	movs	r1, #0
 800149e:	480d      	ldr	r0, [pc, #52]	; (80014d4 <MX_LPUART1_UART_Init+0x88>)
 80014a0:	f006 fa8f 	bl	80079c2 <HAL_UARTEx_SetTxFifoThreshold>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 80014aa:	f000 f9d3 	bl	8001854 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014ae:	2100      	movs	r1, #0
 80014b0:	4808      	ldr	r0, [pc, #32]	; (80014d4 <MX_LPUART1_UART_Init+0x88>)
 80014b2:	f006 fac4 	bl	8007a3e <HAL_UARTEx_SetRxFifoThreshold>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 80014bc:	f000 f9ca 	bl	8001854 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80014c0:	4804      	ldr	r0, [pc, #16]	; (80014d4 <MX_LPUART1_UART_Init+0x88>)
 80014c2:	f006 fa46 	bl	8007952 <HAL_UARTEx_DisableFifoMode>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 80014cc:	f000 f9c2 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80014d0:	bf00      	nop
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	20000a1c 	.word	0x20000a1c
 80014d8:	40008000 	.word	0x40008000
 80014dc:	00033324 	.word	0x00033324

080014e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014e4:	4b22      	ldr	r3, [pc, #136]	; (8001570 <MX_USART2_UART_Init+0x90>)
 80014e6:	4a23      	ldr	r2, [pc, #140]	; (8001574 <MX_USART2_UART_Init+0x94>)
 80014e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014ea:	4b21      	ldr	r3, [pc, #132]	; (8001570 <MX_USART2_UART_Init+0x90>)
 80014ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014f2:	4b1f      	ldr	r3, [pc, #124]	; (8001570 <MX_USART2_UART_Init+0x90>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014f8:	4b1d      	ldr	r3, [pc, #116]	; (8001570 <MX_USART2_UART_Init+0x90>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014fe:	4b1c      	ldr	r3, [pc, #112]	; (8001570 <MX_USART2_UART_Init+0x90>)
 8001500:	2200      	movs	r2, #0
 8001502:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001504:	4b1a      	ldr	r3, [pc, #104]	; (8001570 <MX_USART2_UART_Init+0x90>)
 8001506:	220c      	movs	r2, #12
 8001508:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800150a:	4b19      	ldr	r3, [pc, #100]	; (8001570 <MX_USART2_UART_Init+0x90>)
 800150c:	2200      	movs	r2, #0
 800150e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001510:	4b17      	ldr	r3, [pc, #92]	; (8001570 <MX_USART2_UART_Init+0x90>)
 8001512:	2200      	movs	r2, #0
 8001514:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001516:	4b16      	ldr	r3, [pc, #88]	; (8001570 <MX_USART2_UART_Init+0x90>)
 8001518:	2200      	movs	r2, #0
 800151a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800151c:	4b14      	ldr	r3, [pc, #80]	; (8001570 <MX_USART2_UART_Init+0x90>)
 800151e:	2200      	movs	r2, #0
 8001520:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001522:	4b13      	ldr	r3, [pc, #76]	; (8001570 <MX_USART2_UART_Init+0x90>)
 8001524:	2200      	movs	r2, #0
 8001526:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001528:	4811      	ldr	r0, [pc, #68]	; (8001570 <MX_USART2_UART_Init+0x90>)
 800152a:	f004 fa2d 	bl	8005988 <HAL_UART_Init>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001534:	f000 f98e 	bl	8001854 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001538:	2100      	movs	r1, #0
 800153a:	480d      	ldr	r0, [pc, #52]	; (8001570 <MX_USART2_UART_Init+0x90>)
 800153c:	f006 fa41 	bl	80079c2 <HAL_UARTEx_SetTxFifoThreshold>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001546:	f000 f985 	bl	8001854 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800154a:	2100      	movs	r1, #0
 800154c:	4808      	ldr	r0, [pc, #32]	; (8001570 <MX_USART2_UART_Init+0x90>)
 800154e:	f006 fa76 	bl	8007a3e <HAL_UARTEx_SetRxFifoThreshold>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001558:	f000 f97c 	bl	8001854 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800155c:	4804      	ldr	r0, [pc, #16]	; (8001570 <MX_USART2_UART_Init+0x90>)
 800155e:	f006 f9f8 	bl	8007952 <HAL_UARTEx_DisableFifoMode>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001568:	f000 f974 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800156c:	bf00      	nop
 800156e:	bd80      	pop	{r7, pc}
 8001570:	20000ab0 	.word	0x20000ab0
 8001574:	40004400 	.word	0x40004400

08001578 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b092      	sub	sp, #72	; 0x48
 800157c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800157e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]
 8001588:	609a      	str	r2, [r3, #8]
 800158a:	60da      	str	r2, [r3, #12]
 800158c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800158e:	2300      	movs	r3, #0
 8001590:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8001592:	1d3b      	adds	r3, r7, #4
 8001594:	222c      	movs	r2, #44	; 0x2c
 8001596:	2100      	movs	r1, #0
 8001598:	4618      	mov	r0, r3
 800159a:	f009 fb90 	bl	800acbe <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800159e:	4b3f      	ldr	r3, [pc, #252]	; (800169c <MX_RTC_Init+0x124>)
 80015a0:	4a3f      	ldr	r2, [pc, #252]	; (80016a0 <MX_RTC_Init+0x128>)
 80015a2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80015a4:	4b3d      	ldr	r3, [pc, #244]	; (800169c <MX_RTC_Init+0x124>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80015aa:	4b3c      	ldr	r3, [pc, #240]	; (800169c <MX_RTC_Init+0x124>)
 80015ac:	227f      	movs	r2, #127	; 0x7f
 80015ae:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80015b0:	4b3a      	ldr	r3, [pc, #232]	; (800169c <MX_RTC_Init+0x124>)
 80015b2:	22ff      	movs	r2, #255	; 0xff
 80015b4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80015b6:	4b39      	ldr	r3, [pc, #228]	; (800169c <MX_RTC_Init+0x124>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80015bc:	4b37      	ldr	r3, [pc, #220]	; (800169c <MX_RTC_Init+0x124>)
 80015be:	2200      	movs	r2, #0
 80015c0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80015c2:	4b36      	ldr	r3, [pc, #216]	; (800169c <MX_RTC_Init+0x124>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80015c8:	4b34      	ldr	r3, [pc, #208]	; (800169c <MX_RTC_Init+0x124>)
 80015ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015ce:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80015d0:	4b32      	ldr	r3, [pc, #200]	; (800169c <MX_RTC_Init+0x124>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 80015d6:	4b31      	ldr	r3, [pc, #196]	; (800169c <MX_RTC_Init+0x124>)
 80015d8:	2200      	movs	r2, #0
 80015da:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80015dc:	482f      	ldr	r0, [pc, #188]	; (800169c <MX_RTC_Init+0x124>)
 80015de:	f003 fa49 	bl	8004a74 <HAL_RTC_Init>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_RTC_Init+0x74>
  {
    Error_Handler();
 80015e8:	f000 f934 	bl	8001854 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80015ec:	2300      	movs	r3, #0
 80015ee:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x0;
 80015f2:	2300      	movs	r3, #0
 80015f4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80015fe:	2300      	movs	r3, #0
 8001600:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001602:	2300      	movs	r3, #0
 8001604:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001606:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800160a:	2201      	movs	r2, #1
 800160c:	4619      	mov	r1, r3
 800160e:	4823      	ldr	r0, [pc, #140]	; (800169c <MX_RTC_Init+0x124>)
 8001610:	f003 fab2 	bl	8004b78 <HAL_RTC_SetTime>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_RTC_Init+0xa6>
  {
    Error_Handler();
 800161a:	f000 f91b 	bl	8001854 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800161e:	2301      	movs	r3, #1
 8001620:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 8001624:	2301      	movs	r3, #1
 8001626:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x1;
 800162a:	2301      	movs	r3, #1
 800162c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x0;
 8001630:	2300      	movs	r3, #0
 8001632:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001636:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800163a:	2201      	movs	r2, #1
 800163c:	4619      	mov	r1, r3
 800163e:	4817      	ldr	r0, [pc, #92]	; (800169c <MX_RTC_Init+0x124>)
 8001640:	f003 fb98 	bl	8004d74 <HAL_RTC_SetDate>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_RTC_Init+0xd6>
  {
    Error_Handler();
 800164a:	f000 f903 	bl	8001854 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800164e:	2300      	movs	r3, #0
 8001650:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001652:	2300      	movs	r3, #0
 8001654:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001656:	2300      	movs	r3, #0
 8001658:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800165a:	2300      	movs	r3, #0
 800165c:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800165e:	2300      	movs	r3, #0
 8001660:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001662:	2300      	movs	r3, #0
 8001664:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001666:	2300      	movs	r3, #0
 8001668:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800166a:	2300      	movs	r3, #0
 800166c:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800166e:	2300      	movs	r3, #0
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 8001672:	2301      	movs	r3, #1
 8001674:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8001678:	f44f 7380 	mov.w	r3, #256	; 0x100
 800167c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800167e:	1d3b      	adds	r3, r7, #4
 8001680:	2201      	movs	r2, #1
 8001682:	4619      	mov	r1, r3
 8001684:	4805      	ldr	r0, [pc, #20]	; (800169c <MX_RTC_Init+0x124>)
 8001686:	f003 fc49 	bl	8004f1c <HAL_RTC_SetAlarm>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_RTC_Init+0x11c>
  {
    Error_Handler();
 8001690:	f000 f8e0 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001694:	bf00      	nop
 8001696:	3748      	adds	r7, #72	; 0x48
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20000b44 	.word	0x20000b44
 80016a0:	40002800 	.word	0x40002800

080016a4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80016a8:	4b1b      	ldr	r3, [pc, #108]	; (8001718 <MX_SPI2_Init+0x74>)
 80016aa:	4a1c      	ldr	r2, [pc, #112]	; (800171c <MX_SPI2_Init+0x78>)
 80016ac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80016ae:	4b1a      	ldr	r3, [pc, #104]	; (8001718 <MX_SPI2_Init+0x74>)
 80016b0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80016b4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80016b6:	4b18      	ldr	r3, [pc, #96]	; (8001718 <MX_SPI2_Init+0x74>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80016bc:	4b16      	ldr	r3, [pc, #88]	; (8001718 <MX_SPI2_Init+0x74>)
 80016be:	f44f 7240 	mov.w	r2, #768	; 0x300
 80016c2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016c4:	4b14      	ldr	r3, [pc, #80]	; (8001718 <MX_SPI2_Init+0x74>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016ca:	4b13      	ldr	r3, [pc, #76]	; (8001718 <MX_SPI2_Init+0x74>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80016d0:	4b11      	ldr	r3, [pc, #68]	; (8001718 <MX_SPI2_Init+0x74>)
 80016d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016d6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016d8:	4b0f      	ldr	r3, [pc, #60]	; (8001718 <MX_SPI2_Init+0x74>)
 80016da:	2200      	movs	r2, #0
 80016dc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016de:	4b0e      	ldr	r3, [pc, #56]	; (8001718 <MX_SPI2_Init+0x74>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80016e4:	4b0c      	ldr	r3, [pc, #48]	; (8001718 <MX_SPI2_Init+0x74>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016ea:	4b0b      	ldr	r3, [pc, #44]	; (8001718 <MX_SPI2_Init+0x74>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80016f0:	4b09      	ldr	r3, [pc, #36]	; (8001718 <MX_SPI2_Init+0x74>)
 80016f2:	2207      	movs	r2, #7
 80016f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80016f6:	4b08      	ldr	r3, [pc, #32]	; (8001718 <MX_SPI2_Init+0x74>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016fc:	4b06      	ldr	r3, [pc, #24]	; (8001718 <MX_SPI2_Init+0x74>)
 80016fe:	2208      	movs	r2, #8
 8001700:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001702:	4805      	ldr	r0, [pc, #20]	; (8001718 <MX_SPI2_Init+0x74>)
 8001704:	f003 fdde 	bl	80052c4 <HAL_SPI_Init>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800170e:	f000 f8a1 	bl	8001854 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000b7c 	.word	0x20000b7c
 800171c:	40003800 	.word	0x40003800

08001720 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001726:	1d3b      	adds	r3, r7, #4
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	60da      	str	r2, [r3, #12]
 8001732:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001734:	2001      	movs	r0, #1
 8001736:	f7ff fd0c 	bl	8001152 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800173a:	2002      	movs	r0, #2
 800173c:	f7ff fd09 	bl	8001152 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001740:	2004      	movs	r0, #4
 8001742:	f7ff fd06 	bl	8001152 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ADC_SW_Pin|MB_OC_Pin|LED_Pin, GPIO_PIN_RESET);
 8001746:	2200      	movs	r2, #0
 8001748:	21e0      	movs	r1, #224	; 0xe0
 800174a:	481e      	ldr	r0, [pc, #120]	; (80017c4 <MX_GPIO_Init+0xa4>)
 800174c:	f001 fd30 	bl	80031b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MB_PWR_Pin|EXT_PWR_Pin, GPIO_PIN_RESET);
 8001750:	2200      	movs	r2, #0
 8001752:	f240 2101 	movw	r1, #513	; 0x201
 8001756:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800175a:	f001 fd29 	bl	80031b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MB_CTL_GPIO_Port, MB_CTL_Pin, GPIO_PIN_RESET);
 800175e:	2200      	movs	r2, #0
 8001760:	2101      	movs	r1, #1
 8001762:	4819      	ldr	r0, [pc, #100]	; (80017c8 <MX_GPIO_Init+0xa8>)
 8001764:	f001 fd24 	bl	80031b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADC_SW_Pin MB_OC_Pin LED_Pin */
  GPIO_InitStruct.Pin = ADC_SW_Pin|MB_OC_Pin|LED_Pin;
 8001768:	23e0      	movs	r3, #224	; 0xe0
 800176a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800176c:	2301      	movs	r3, #1
 800176e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001774:	2300      	movs	r3, #0
 8001776:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001778:	1d3b      	adds	r3, r7, #4
 800177a:	4619      	mov	r1, r3
 800177c:	4811      	ldr	r0, [pc, #68]	; (80017c4 <MX_GPIO_Init+0xa4>)
 800177e:	f001 fbb7 	bl	8002ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MB_PWR_Pin EXT_PWR_Pin */
  GPIO_InitStruct.Pin = MB_PWR_Pin|EXT_PWR_Pin;
 8001782:	f240 2301 	movw	r3, #513	; 0x201
 8001786:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001788:	2301      	movs	r3, #1
 800178a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178c:	2300      	movs	r3, #0
 800178e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001790:	2300      	movs	r3, #0
 8001792:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001794:	1d3b      	adds	r3, r7, #4
 8001796:	4619      	mov	r1, r3
 8001798:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800179c:	f001 fba8 	bl	8002ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MB_CTL_Pin */
  GPIO_InitStruct.Pin = MB_CTL_Pin;
 80017a0:	2301      	movs	r3, #1
 80017a2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a4:	2301      	movs	r3, #1
 80017a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ac:	2300      	movs	r3, #0
 80017ae:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(MB_CTL_GPIO_Port, &GPIO_InitStruct);
 80017b0:	1d3b      	adds	r3, r7, #4
 80017b2:	4619      	mov	r1, r3
 80017b4:	4804      	ldr	r0, [pc, #16]	; (80017c8 <MX_GPIO_Init+0xa8>)
 80017b6:	f001 fb9b 	bl	8002ef0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017ba:	bf00      	nop
 80017bc:	3718      	adds	r7, #24
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	48000400 	.word	0x48000400
 80017c8:	48000800 	.word	0x48000800

080017cc <Get_AdcHandle>:
  osDelay(Delay);
}


ADC_HandleTypeDef *Get_AdcHandle(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  return &hadc;
 80017d0:	4b02      	ldr	r3, [pc, #8]	; (80017dc <Get_AdcHandle+0x10>)
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bc80      	pop	{r7}
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	20000964 	.word	0x20000964

080017e0 <Get_DebugHandle>:


UART_HandleTypeDef *Get_DebugHandle(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  return &huart2;
 80017e4:	4b02      	ldr	r3, [pc, #8]	; (80017f0 <Get_DebugHandle+0x10>)
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bc80      	pop	{r7}
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	20000ab0 	.word	0x20000ab0

080017f4 <Get_SonarHandle>:

UART_HandleTypeDef *Get_SonarHandle(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  return &hlpuart1;;
 80017f8:	4b02      	ldr	r3, [pc, #8]	; (8001804 <Get_SonarHandle+0x10>)
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	20000a1c 	.word	0x20000a1c

08001808 <Get_RtcHandle>:

RTC_HandleTypeDef  *Get_RtcHandle(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  return &hrtc;
 800180c:	4b02      	ldr	r3, [pc, #8]	; (8001818 <Get_RtcHandle+0x10>)
}
 800180e:	4618      	mov	r0, r3
 8001810:	46bd      	mov	sp, r7
 8001812:	bc80      	pop	{r7}
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	20000b44 	.word	0x20000b44

0800181c <Get_TerminalQueueHandle>:




osMessageQId Get_TerminalQueueHandle(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  return xQueue1Handle;;
 8001820:	4b02      	ldr	r3, [pc, #8]	; (800182c <Get_TerminalQueueHandle+0x10>)
 8001822:	681b      	ldr	r3, [r3, #0]
}
 8001824:	4618      	mov	r0, r3
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr
 800182c:	20000be4 	.word	0x20000be4

08001830 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a04      	ldr	r2, [pc, #16]	; (8001850 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d101      	bne.n	8001846 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001842:	f000 fbdd 	bl	8002000 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001846:	bf00      	nop
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40012c00 	.word	0x40012c00

08001854 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001858:	b672      	cpsid	i
}
 800185a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800185c:	e7fe      	b.n	800185c <Error_Handler+0x8>

0800185e <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800185e:	b480      	push	{r7}
 8001860:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001862:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800186a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800186e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001872:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001876:	bf00      	nop
 8001878:	46bd      	mov	sp, r7
 800187a:	bc80      	pop	{r7}
 800187c:	4770      	bx	lr

0800187e <LL_AHB2_GRP1_EnableClock>:
{
 800187e:	b480      	push	{r7}
 8001880:	b085      	sub	sp, #20
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001886:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800188a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800188c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4313      	orrs	r3, r2
 8001894:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001896:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800189a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4013      	ands	r3, r2
 80018a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018a2:	68fb      	ldr	r3, [r7, #12]
}
 80018a4:	bf00      	nop
 80018a6:	3714      	adds	r7, #20
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bc80      	pop	{r7}
 80018ac:	4770      	bx	lr

080018ae <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80018ae:	b480      	push	{r7}
 80018b0:	b085      	sub	sp, #20
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80018b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ba:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80018bc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80018c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ca:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	4013      	ands	r3, r2
 80018d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018d2:	68fb      	ldr	r3, [r7, #12]
}
 80018d4:	bf00      	nop
 80018d6:	3714      	adds	r7, #20
 80018d8:	46bd      	mov	sp, r7
 80018da:	bc80      	pop	{r7}
 80018dc:	4770      	bx	lr

080018de <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM3

  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80018de:	b480      	push	{r7}
 80018e0:	b085      	sub	sp, #20
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80018e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80018ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80018f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4013      	ands	r3, r2
 8001900:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001902:	68fb      	ldr	r3, [r7, #12]
}
 8001904:	bf00      	nop
 8001906:	3714      	adds	r7, #20
 8001908:	46bd      	mov	sp, r7
 800190a:	bc80      	pop	{r7}
 800190c:	4770      	bx	lr

0800190e <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800190e:	b480      	push	{r7}
 8001910:	b085      	sub	sp, #20
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001916:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800191a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800191c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	4313      	orrs	r3, r2
 8001924:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001926:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800192a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	4013      	ands	r3, r2
 8001930:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001932:	68fb      	ldr	r3, [r7, #12]
}
 8001934:	bf00      	nop
 8001936:	3714      	adds	r7, #20
 8001938:	46bd      	mov	sp, r7
 800193a:	bc80      	pop	{r7}
 800193c:	4770      	bx	lr

0800193e <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800193e:	b580      	push	{r7, lr}
 8001940:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001942:	2200      	movs	r2, #0
 8001944:	210f      	movs	r1, #15
 8001946:	f06f 0001 	mvn.w	r0, #1
 800194a:	f001 f9ec 	bl	8002d26 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
	...

08001954 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b088      	sub	sp, #32
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195c:	f107 030c 	add.w	r3, r7, #12
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	60da      	str	r2, [r3, #12]
 800196a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a0c      	ldr	r2, [pc, #48]	; (80019a4 <HAL_ADC_MspInit+0x50>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d112      	bne.n	800199c <HAL_ADC_MspInit+0x48>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001976:	f44f 7000 	mov.w	r0, #512	; 0x200
 800197a:	f7ff ffc8 	bl	800190e <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800197e:	2002      	movs	r0, #2
 8001980:	f7ff ff7d 	bl	800187e <LL_AHB2_GRP1_EnableClock>
    /**ADC GPIO Configuration
    PB3     ------> ADC_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001984:	2308      	movs	r3, #8
 8001986:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001988:	2303      	movs	r3, #3
 800198a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001990:	f107 030c 	add.w	r3, r7, #12
 8001994:	4619      	mov	r1, r3
 8001996:	4804      	ldr	r0, [pc, #16]	; (80019a8 <HAL_ADC_MspInit+0x54>)
 8001998:	f001 faaa 	bl	8002ef0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }

}
 800199c:	bf00      	nop
 800199e:	3720      	adds	r7, #32
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40012400 	.word	0x40012400
 80019a8:	48000400 	.word	0x48000400

080019ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b096      	sub	sp, #88	; 0x58
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	60da      	str	r2, [r3, #12]
 80019c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019c4:	f107 030c 	add.w	r3, r7, #12
 80019c8:	2238      	movs	r2, #56	; 0x38
 80019ca:	2100      	movs	r1, #0
 80019cc:	4618      	mov	r0, r3
 80019ce:	f009 f976 	bl	800acbe <memset>
  if(hi2c->Instance==I2C2)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a21      	ldr	r2, [pc, #132]	; (8001a5c <HAL_I2C_MspInit+0xb0>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d13b      	bne.n	8001a54 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80019dc:	2380      	movs	r3, #128	; 0x80
 80019de:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80019e0:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019e6:	f107 030c 	add.w	r3, r7, #12
 80019ea:	4618      	mov	r0, r3
 80019ec:	f002 ff28 	bl	8004840 <HAL_RCCEx_PeriphCLKConfig>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80019f6:	f7ff ff2d 	bl	8001854 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fa:	2001      	movs	r0, #1
 80019fc:	f7ff ff3f 	bl	800187e <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a00:	2002      	movs	r0, #2
 8001a02:	f7ff ff3c 	bl	800187e <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA15     ------> I2C2_SDA
    PB15     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001a06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a0a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a0c:	2312      	movs	r3, #18
 8001a0e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a14:	2300      	movs	r3, #0
 8001a16:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001a18:	2304      	movs	r3, #4
 8001a1a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a1c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a20:	4619      	mov	r1, r3
 8001a22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a26:	f001 fa63 	bl	8002ef0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001a2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a2e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a30:	2312      	movs	r3, #18
 8001a32:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a34:	2300      	movs	r3, #0
 8001a36:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001a3c:	2304      	movs	r3, #4
 8001a3e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a40:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a44:	4619      	mov	r1, r3
 8001a46:	4806      	ldr	r0, [pc, #24]	; (8001a60 <HAL_I2C_MspInit+0xb4>)
 8001a48:	f001 fa52 	bl	8002ef0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a4c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001a50:	f7ff ff2d 	bl	80018ae <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001a54:	bf00      	nop
 8001a56:	3758      	adds	r7, #88	; 0x58
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40005800 	.word	0x40005800
 8001a60:	48000400 	.word	0x48000400

08001a64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b096      	sub	sp, #88	; 0x58
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a6c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	605a      	str	r2, [r3, #4]
 8001a76:	609a      	str	r2, [r3, #8]
 8001a78:	60da      	str	r2, [r3, #12]
 8001a7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a7c:	f107 030c 	add.w	r3, r7, #12
 8001a80:	2238      	movs	r2, #56	; 0x38
 8001a82:	2100      	movs	r1, #0
 8001a84:	4618      	mov	r0, r3
 8001a86:	f009 f91a 	bl	800acbe <memset>
  if(huart->Instance==LPUART1)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a34      	ldr	r2, [pc, #208]	; (8001b60 <HAL_UART_MspInit+0xfc>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d12c      	bne.n	8001aee <HAL_UART_MspInit+0x8a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001a94:	2320      	movs	r3, #32
 8001a96:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a9c:	f107 030c 	add.w	r3, r7, #12
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f002 fecd 	bl	8004840 <HAL_RCCEx_PeriphCLKConfig>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001aac:	f7ff fed2 	bl	8001854 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001ab0:	2001      	movs	r0, #1
 8001ab2:	f7ff ff14 	bl	80018de <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ab6:	2004      	movs	r0, #4
 8001ab8:	f7ff fee1 	bl	800187e <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = MB_RX_Pin;
 8001abc:	2302      	movs	r3, #2
 8001abe:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ac0:	2312      	movs	r3, #18
 8001ac2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001acc:	2308      	movs	r3, #8
 8001ace:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(MB_RX_GPIO_Port, &GPIO_InitStruct);
 8001ad0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4823      	ldr	r0, [pc, #140]	; (8001b64 <HAL_UART_MspInit+0x100>)
 8001ad8:	f001 fa0a 	bl	8002ef0 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8001adc:	2200      	movs	r2, #0
 8001ade:	2105      	movs	r1, #5
 8001ae0:	2026      	movs	r0, #38	; 0x26
 8001ae2:	f001 f920 	bl	8002d26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001ae6:	2026      	movs	r0, #38	; 0x26
 8001ae8:	f001 f937 	bl	8002d5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001aec:	e033      	b.n	8001b56 <HAL_UART_MspInit+0xf2>
  else if(huart->Instance==USART2)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a1d      	ldr	r2, [pc, #116]	; (8001b68 <HAL_UART_MspInit+0x104>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d12e      	bne.n	8001b56 <HAL_UART_MspInit+0xf2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001af8:	2302      	movs	r3, #2
 8001afa:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001afc:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8001b00:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b02:	f107 030c 	add.w	r3, r7, #12
 8001b06:	4618      	mov	r0, r3
 8001b08:	f002 fe9a 	bl	8004840 <HAL_RCCEx_PeriphCLKConfig>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <HAL_UART_MspInit+0xb2>
      Error_Handler();
 8001b12:	f7ff fe9f 	bl	8001854 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b16:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001b1a:	f7ff fec8 	bl	80018ae <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1e:	2001      	movs	r0, #1
 8001b20:	f7ff fead 	bl	800187e <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8001b24:	230c      	movs	r3, #12
 8001b26:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b30:	2300      	movs	r3, #0
 8001b32:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b34:	2307      	movs	r3, #7
 8001b36:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b38:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b42:	f001 f9d5 	bl	8002ef0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001b46:	2200      	movs	r2, #0
 8001b48:	2105      	movs	r1, #5
 8001b4a:	2025      	movs	r0, #37	; 0x25
 8001b4c:	f001 f8eb 	bl	8002d26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b50:	2025      	movs	r0, #37	; 0x25
 8001b52:	f001 f902 	bl	8002d5a <HAL_NVIC_EnableIRQ>
}
 8001b56:	bf00      	nop
 8001b58:	3758      	adds	r7, #88	; 0x58
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40008000 	.word	0x40008000
 8001b64:	48000800 	.word	0x48000800
 8001b68:	40004400 	.word	0x40004400

08001b6c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b090      	sub	sp, #64	; 0x40
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b74:	f107 0308 	add.w	r3, r7, #8
 8001b78:	2238      	movs	r2, #56	; 0x38
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f009 f89e 	bl	800acbe <memset>
  if(hrtc->Instance==RTC)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a0e      	ldr	r2, [pc, #56]	; (8001bc0 <HAL_RTC_MspInit+0x54>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d115      	bne.n	8001bb8 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001b8c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b90:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001b92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b96:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b98:	f107 0308 	add.w	r3, r7, #8
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f002 fe4f 	bl	8004840 <HAL_RCCEx_PeriphCLKConfig>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001ba8:	f7ff fe54 	bl	8001854 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001bac:	f7ff fe57 	bl	800185e <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8001bb0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001bb4:	f7ff fe7b 	bl	80018ae <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001bb8:	bf00      	nop
 8001bba:	3740      	adds	r7, #64	; 0x40
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	40002800 	.word	0x40002800

08001bc4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b096      	sub	sp, #88	; 0x58
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bcc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	60da      	str	r2, [r3, #12]
 8001bda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bdc:	f107 030c 	add.w	r3, r7, #12
 8001be0:	2238      	movs	r2, #56	; 0x38
 8001be2:	2100      	movs	r1, #0
 8001be4:	4618      	mov	r0, r3
 8001be6:	f009 f86a 	bl	800acbe <memset>
  if(hspi->Instance==SPI2)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a21      	ldr	r2, [pc, #132]	; (8001c74 <HAL_SPI_MspInit+0xb0>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d13b      	bne.n	8001c6c <HAL_SPI_MspInit+0xa8>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S2;
 8001bf4:	2310      	movs	r3, #16
 8001bf6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2s2ClockSelection = RCC_I2S2CLKSOURCE_HSI;
 8001bf8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bfc:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bfe:	f107 030c 	add.w	r3, r7, #12
 8001c02:	4618      	mov	r0, r3
 8001c04:	f002 fe1c 	bl	8004840 <HAL_RCCEx_PeriphCLKConfig>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001c0e:	f7ff fe21 	bl	8001854 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001c12:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001c16:	f7ff fe4a 	bl	80018ae <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c1a:	2002      	movs	r0, #2
 8001c1c:	f7ff fe2f 	bl	800187e <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c20:	2001      	movs	r0, #1
 8001c22:	f7ff fe2c 	bl	800187e <LL_AHB2_GRP1_EnableClock>
    /**SPI2 GPIO Configuration
    PB14     ------> SPI2_MISO
    PA10     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13;
 8001c26:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001c2a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c30:	2300      	movs	r3, #0
 8001c32:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c34:	2300      	movs	r3, #0
 8001c36:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c38:	2305      	movs	r3, #5
 8001c3a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c3c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c40:	4619      	mov	r1, r3
 8001c42:	480d      	ldr	r0, [pc, #52]	; (8001c78 <HAL_SPI_MspInit+0xb4>)
 8001c44:	f001 f954 	bl	8002ef0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c4c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4e:	2302      	movs	r3, #2
 8001c50:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c52:	2300      	movs	r3, #0
 8001c54:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c56:	2300      	movs	r3, #0
 8001c58:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c5a:	2305      	movs	r3, #5
 8001c5c:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c5e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c62:	4619      	mov	r1, r3
 8001c64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c68:	f001 f942 	bl	8002ef0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001c6c:	bf00      	nop
 8001c6e:	3758      	adds	r7, #88	; 0x58
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	40003800 	.word	0x40003800
 8001c78:	48000400 	.word	0x48000400

08001c7c <LL_APB2_GRP1_EnableClock>:
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001c84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c88:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c8a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001c94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c98:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
}
 8001ca2:	bf00      	nop
 8001ca4:	3714      	adds	r7, #20
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr

08001cac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b08c      	sub	sp, #48	; 0x30
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001cc2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001cc6:	f7ff ffd9 	bl	8001c7c <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001cca:	f107 0208 	add.w	r2, r7, #8
 8001cce:	f107 030c 	add.w	r3, r7, #12
 8001cd2:	4611      	mov	r1, r2
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f002 fbcf 	bl	8004478 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001cda:	f002 fbbb 	bl	8004454 <HAL_RCC_GetPCLK2Freq>
 8001cde:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ce2:	4a21      	ldr	r2, [pc, #132]	; (8001d68 <HAL_InitTick+0xbc>)
 8001ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce8:	0c9b      	lsrs	r3, r3, #18
 8001cea:	3b01      	subs	r3, #1
 8001cec:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001cee:	4b1f      	ldr	r3, [pc, #124]	; (8001d6c <HAL_InitTick+0xc0>)
 8001cf0:	4a1f      	ldr	r2, [pc, #124]	; (8001d70 <HAL_InitTick+0xc4>)
 8001cf2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001cf4:	4b1d      	ldr	r3, [pc, #116]	; (8001d6c <HAL_InitTick+0xc0>)
 8001cf6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001cfa:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001cfc:	4a1b      	ldr	r2, [pc, #108]	; (8001d6c <HAL_InitTick+0xc0>)
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d00:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001d02:	4b1a      	ldr	r3, [pc, #104]	; (8001d6c <HAL_InitTick+0xc0>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d08:	4b18      	ldr	r3, [pc, #96]	; (8001d6c <HAL_InitTick+0xc0>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8001d0e:	4817      	ldr	r0, [pc, #92]	; (8001d6c <HAL_InitTick+0xc0>)
 8001d10:	f003 fbac 	bl	800546c <HAL_TIM_Base_Init>
 8001d14:	4603      	mov	r3, r0
 8001d16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001d1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d11b      	bne.n	8001d5a <HAL_InitTick+0xae>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001d22:	4812      	ldr	r0, [pc, #72]	; (8001d6c <HAL_InitTick+0xc0>)
 8001d24:	f003 fc02 	bl	800552c <HAL_TIM_Base_Start_IT>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001d2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d111      	bne.n	8001d5a <HAL_InitTick+0xae>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001d36:	2018      	movs	r0, #24
 8001d38:	f001 f80f 	bl	8002d5a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b0f      	cmp	r3, #15
 8001d40:	d808      	bhi.n	8001d54 <HAL_InitTick+0xa8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8001d42:	2200      	movs	r2, #0
 8001d44:	6879      	ldr	r1, [r7, #4]
 8001d46:	2018      	movs	r0, #24
 8001d48:	f000 ffed 	bl	8002d26 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d4c:	4a09      	ldr	r2, [pc, #36]	; (8001d74 <HAL_InitTick+0xc8>)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6013      	str	r3, [r2, #0]
 8001d52:	e002      	b.n	8001d5a <HAL_InitTick+0xae>
      }
      else
      {
        status = HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001d5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3730      	adds	r7, #48	; 0x30
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	431bde83 	.word	0x431bde83
 8001d6c:	20000bf8 	.word	0x20000bf8
 8001d70:	40012c00 	.word	0x40012c00
 8001d74:	20000004 	.word	0x20000004

08001d78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d7c:	e7fe      	b.n	8001d7c <NMI_Handler+0x4>

08001d7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d82:	e7fe      	b.n	8001d82 <HardFault_Handler+0x4>

08001d84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d88:	e7fe      	b.n	8001d88 <MemManage_Handler+0x4>

08001d8a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d8e:	e7fe      	b.n	8001d8e <BusFault_Handler+0x4>

08001d90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d94:	e7fe      	b.n	8001d94 <UsageFault_Handler+0x4>

08001d96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d96:	b480      	push	{r7}
 8001d98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bc80      	pop	{r7}
 8001da0:	4770      	bx	lr
	...

08001da4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update Interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001da8:	4802      	ldr	r0, [pc, #8]	; (8001db4 <TIM1_UP_IRQHandler+0x10>)
 8001daa:	f003 fc0b 	bl	80055c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	20000bf8 	.word	0x20000bf8

08001db8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001dbc:	4802      	ldr	r0, [pc, #8]	; (8001dc8 <USART2_IRQHandler+0x10>)
 8001dbe:	f003 ff5d 	bl	8005c7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	20000ab0 	.word	0x20000ab0

08001dcc <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 Interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001dd0:	4802      	ldr	r0, [pc, #8]	; (8001ddc <LPUART1_IRQHandler+0x10>)
 8001dd2:	f003 ff53 	bl	8005c7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	20000a1c 	.word	0x20000a1c

08001de0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  return 1;
 8001de4:	2301      	movs	r3, #1
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bc80      	pop	{r7}
 8001dec:	4770      	bx	lr

08001dee <_kill>:

int _kill(int pid, int sig)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b082      	sub	sp, #8
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
 8001df6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001df8:	f008 fe30 	bl	800aa5c <__errno>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2216      	movs	r2, #22
 8001e00:	601a      	str	r2, [r3, #0]
  return -1;
 8001e02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <_exit>:

void _exit (int status)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b082      	sub	sp, #8
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e16:	f04f 31ff 	mov.w	r1, #4294967295
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f7ff ffe7 	bl	8001dee <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e20:	e7fe      	b.n	8001e20 <_exit+0x12>

08001e22 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b086      	sub	sp, #24
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	60f8      	str	r0, [r7, #12]
 8001e2a:	60b9      	str	r1, [r7, #8]
 8001e2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e2e:	2300      	movs	r3, #0
 8001e30:	617b      	str	r3, [r7, #20]
 8001e32:	e00a      	b.n	8001e4a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e34:	f3af 8000 	nop.w
 8001e38:	4601      	mov	r1, r0
 8001e3a:	68bb      	ldr	r3, [r7, #8]
 8001e3c:	1c5a      	adds	r2, r3, #1
 8001e3e:	60ba      	str	r2, [r7, #8]
 8001e40:	b2ca      	uxtb	r2, r1
 8001e42:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	3301      	adds	r3, #1
 8001e48:	617b      	str	r3, [r7, #20]
 8001e4a:	697a      	ldr	r2, [r7, #20]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	dbf0      	blt.n	8001e34 <_read+0x12>
  }

  return len;
 8001e52:	687b      	ldr	r3, [r7, #4]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3718      	adds	r7, #24
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]
 8001e6c:	e009      	b.n	8001e82 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	1c5a      	adds	r2, r3, #1
 8001e72:	60ba      	str	r2, [r7, #8]
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	3301      	adds	r3, #1
 8001e80:	617b      	str	r3, [r7, #20]
 8001e82:	697a      	ldr	r2, [r7, #20]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	dbf1      	blt.n	8001e6e <_write+0x12>
  }
  return len;
 8001e8a:	687b      	ldr	r3, [r7, #4]
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3718      	adds	r7, #24
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <_close>:

int _close(int file)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bc80      	pop	{r7}
 8001ea8:	4770      	bx	lr

08001eaa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001eaa:	b480      	push	{r7}
 8001eac:	b083      	sub	sp, #12
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
 8001eb2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001eba:	605a      	str	r2, [r3, #4]
  return 0;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bc80      	pop	{r7}
 8001ec6:	4770      	bx	lr

08001ec8 <_isatty>:

int _isatty(int file)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ed0:	2301      	movs	r3, #1
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bc80      	pop	{r7}
 8001eda:	4770      	bx	lr

08001edc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3714      	adds	r7, #20
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bc80      	pop	{r7}
 8001ef2:	4770      	bx	lr

08001ef4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b086      	sub	sp, #24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001efc:	4a14      	ldr	r2, [pc, #80]	; (8001f50 <_sbrk+0x5c>)
 8001efe:	4b15      	ldr	r3, [pc, #84]	; (8001f54 <_sbrk+0x60>)
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f08:	4b13      	ldr	r3, [pc, #76]	; (8001f58 <_sbrk+0x64>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d102      	bne.n	8001f16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f10:	4b11      	ldr	r3, [pc, #68]	; (8001f58 <_sbrk+0x64>)
 8001f12:	4a12      	ldr	r2, [pc, #72]	; (8001f5c <_sbrk+0x68>)
 8001f14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f16:	4b10      	ldr	r3, [pc, #64]	; (8001f58 <_sbrk+0x64>)
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d207      	bcs.n	8001f34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f24:	f008 fd9a 	bl	800aa5c <__errno>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	220c      	movs	r2, #12
 8001f2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f32:	e009      	b.n	8001f48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f34:	4b08      	ldr	r3, [pc, #32]	; (8001f58 <_sbrk+0x64>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f3a:	4b07      	ldr	r3, [pc, #28]	; (8001f58 <_sbrk+0x64>)
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4413      	add	r3, r2
 8001f42:	4a05      	ldr	r2, [pc, #20]	; (8001f58 <_sbrk+0x64>)
 8001f44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f46:	68fb      	ldr	r3, [r7, #12]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3718      	adds	r7, #24
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	20010000 	.word	0x20010000
 8001f54:	00000400 	.word	0x00000400
 8001f58:	20000c44 	.word	0x20000c44
 8001f5c:	20001d10 	.word	0x20001d10

08001f60 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001f64:	bf00      	nop
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bc80      	pop	{r7}
 8001f6a:	4770      	bx	lr

08001f6c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f6c:	480d      	ldr	r0, [pc, #52]	; (8001fa4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f6e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f70:	f7ff fff6 	bl	8001f60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f74:	480c      	ldr	r0, [pc, #48]	; (8001fa8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f76:	490d      	ldr	r1, [pc, #52]	; (8001fac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f78:	4a0d      	ldr	r2, [pc, #52]	; (8001fb0 <LoopForever+0xe>)
  movs r3, #0
 8001f7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f7c:	e002      	b.n	8001f84 <LoopCopyDataInit>

08001f7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f82:	3304      	adds	r3, #4

08001f84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f88:	d3f9      	bcc.n	8001f7e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f8a:	4a0a      	ldr	r2, [pc, #40]	; (8001fb4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f8c:	4c0a      	ldr	r4, [pc, #40]	; (8001fb8 <LoopForever+0x16>)
  movs r3, #0
 8001f8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f90:	e001      	b.n	8001f96 <LoopFillZerobss>

08001f92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f94:	3204      	adds	r2, #4

08001f96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f98:	d3fb      	bcc.n	8001f92 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001f9a:	f008 fe5b 	bl	800ac54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f9e:	f7ff f8f1 	bl	8001184 <main>

08001fa2 <LoopForever>:

LoopForever:
    b LoopForever
 8001fa2:	e7fe      	b.n	8001fa2 <LoopForever>
  ldr   r0, =_estack
 8001fa4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001fa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fac:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001fb0:	0800e720 	.word	0x0800e720
  ldr r2, =_sbss
 8001fb4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001fb8:	20001d0c 	.word	0x20001d0c

08001fbc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fbc:	e7fe      	b.n	8001fbc <ADC_IRQHandler>
	...

08001fc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fca:	2003      	movs	r0, #3
 8001fcc:	f000 fea0 	bl	8002d10 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001fd0:	f002 fa1a 	bl	8004408 <HAL_RCC_GetHCLKFreq>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	4a09      	ldr	r2, [pc, #36]	; (8001ffc <HAL_Init+0x3c>)
 8001fd8:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fda:	200f      	movs	r0, #15
 8001fdc:	f7ff fe66 	bl	8001cac <HAL_InitTick>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d002      	beq.n	8001fec <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	71fb      	strb	r3, [r7, #7]
 8001fea:	e001      	b.n	8001ff0 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001fec:	f7ff fca7 	bl	800193e <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ff0:	79fb      	ldrb	r3, [r7, #7]
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	20000000 	.word	0x20000000

08002000 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002004:	4b05      	ldr	r3, [pc, #20]	; (800201c <HAL_IncTick+0x1c>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	461a      	mov	r2, r3
 800200a:	4b05      	ldr	r3, [pc, #20]	; (8002020 <HAL_IncTick+0x20>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4413      	add	r3, r2
 8002010:	4a03      	ldr	r2, [pc, #12]	; (8002020 <HAL_IncTick+0x20>)
 8002012:	6013      	str	r3, [r2, #0]
}
 8002014:	bf00      	nop
 8002016:	46bd      	mov	sp, r7
 8002018:	bc80      	pop	{r7}
 800201a:	4770      	bx	lr
 800201c:	20000008 	.word	0x20000008
 8002020:	20000c48 	.word	0x20000c48

08002024 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  return uwTick;
 8002028:	4b02      	ldr	r3, [pc, #8]	; (8002034 <HAL_GetTick+0x10>)
 800202a:	681b      	ldr	r3, [r3, #0]
}
 800202c:	4618      	mov	r0, r3
 800202e:	46bd      	mov	sp, r7
 8002030:	bc80      	pop	{r7}
 8002032:	4770      	bx	lr
 8002034:	20000c48 	.word	0x20000c48

08002038 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 800203c:	4b02      	ldr	r3, [pc, #8]	; (8002048 <HAL_GetUIDw0+0x10>)
 800203e:	681b      	ldr	r3, [r3, #0]
}
 8002040:	4618      	mov	r0, r3
 8002042:	46bd      	mov	sp, r7
 8002044:	bc80      	pop	{r7}
 8002046:	4770      	bx	lr
 8002048:	1fff7590 	.word	0x1fff7590

0800204c <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8002050:	4b02      	ldr	r3, [pc, #8]	; (800205c <HAL_GetUIDw1+0x10>)
 8002052:	681b      	ldr	r3, [r3, #0]
}
 8002054:	4618      	mov	r0, r3
 8002056:	46bd      	mov	sp, r7
 8002058:	bc80      	pop	{r7}
 800205a:	4770      	bx	lr
 800205c:	1fff7594 	.word	0x1fff7594

08002060 <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8002064:	4b02      	ldr	r3, [pc, #8]	; (8002070 <HAL_GetUIDw2+0x10>)
 8002066:	681b      	ldr	r3, [r3, #0]
}
 8002068:	4618      	mov	r0, r3
 800206a:	46bd      	mov	sp, r7
 800206c:	bc80      	pop	{r7}
 800206e:	4770      	bx	lr
 8002070:	1fff7598 	.word	0x1fff7598

08002074 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002084:	4618      	mov	r0, r3
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	bc80      	pop	{r7}
 800208c:	4770      	bx	lr

0800208e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800208e:	b480      	push	{r7}
 8002090:	b085      	sub	sp, #20
 8002092:	af00      	add	r7, sp, #0
 8002094:	60f8      	str	r0, [r7, #12]
 8002096:	60b9      	str	r1, [r7, #8]
 8002098:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	695a      	ldr	r2, [r3, #20]
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	f003 0304 	and.w	r3, r3, #4
 80020a4:	2107      	movs	r1, #7
 80020a6:	fa01 f303 	lsl.w	r3, r1, r3
 80020aa:	43db      	mvns	r3, r3
 80020ac:	401a      	ands	r2, r3
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	f003 0304 	and.w	r3, r3, #4
 80020b4:	6879      	ldr	r1, [r7, #4]
 80020b6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ba:	431a      	orrs	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80020c0:	bf00      	nop
 80020c2:	3714      	adds	r7, #20
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bc80      	pop	{r7}
 80020c8:	4770      	bx	lr

080020ca <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80020ca:	b480      	push	{r7}
 80020cc:	b083      	sub	sp, #12
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
 80020d2:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	695a      	ldr	r2, [r3, #20]
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	f003 0304 	and.w	r3, r3, #4
 80020de:	2107      	movs	r1, #7
 80020e0:	fa01 f303 	lsl.w	r3, r1, r3
 80020e4:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80020ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bc80      	pop	{r7}
 80020f8:	4770      	bx	lr

080020fa <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80020fa:	b480      	push	{r7}
 80020fc:	b083      	sub	sp, #12
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800210e:	2301      	movs	r3, #1
 8002110:	e000      	b.n	8002114 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	bc80      	pop	{r7}
 800211c:	4770      	bx	lr

0800211e <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800211e:	b480      	push	{r7}
 8002120:	b083      	sub	sp, #12
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800212e:	f023 0317 	bic.w	r3, r3, #23
 8002132:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800213a:	bf00      	nop
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	bc80      	pop	{r7}
 8002142:	4770      	bx	lr

08002144 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002154:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002158:	d101      	bne.n	800215e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800215a:	2301      	movs	r3, #1
 800215c:	e000      	b.n	8002160 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	bc80      	pop	{r7}
 8002168:	4770      	bx	lr

0800216a <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800216a:	b480      	push	{r7}
 800216c:	b083      	sub	sp, #12
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800217a:	f023 0317 	bic.w	r3, r3, #23
 800217e:	f043 0201 	orr.w	r2, r3, #1
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002186:	bf00      	nop
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	bc80      	pop	{r7}
 800218e:	4770      	bx	lr

08002190 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80021a0:	f023 0317 	bic.w	r3, r3, #23
 80021a4:	f043 0202 	orr.w	r2, r3, #2
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bc80      	pop	{r7}
 80021b4:	4770      	bx	lr

080021b6 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80021b6:	b480      	push	{r7}
 80021b8:	b083      	sub	sp, #12
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d101      	bne.n	80021ce <LL_ADC_IsEnabled+0x18>
 80021ca:	2301      	movs	r3, #1
 80021cc:	e000      	b.n	80021d0 <LL_ADC_IsEnabled+0x1a>
 80021ce:	2300      	movs	r3, #0
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bc80      	pop	{r7}
 80021d8:	4770      	bx	lr

080021da <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80021da:	b480      	push	{r7}
 80021dc:	b083      	sub	sp, #12
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d101      	bne.n	80021f2 <LL_ADC_IsDisableOngoing+0x18>
 80021ee:	2301      	movs	r3, #1
 80021f0:	e000      	b.n	80021f4 <LL_ADC_IsDisableOngoing+0x1a>
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bc80      	pop	{r7}
 80021fc:	4770      	bx	lr

080021fe <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80021fe:	b480      	push	{r7}
 8002200:	b083      	sub	sp, #12
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800220e:	f023 0317 	bic.w	r3, r3, #23
 8002212:	f043 0204 	orr.w	r2, r3, #4
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800221a:	bf00      	nop
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	bc80      	pop	{r7}
 8002222:	4770      	bx	lr

08002224 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f003 0304 	and.w	r3, r3, #4
 8002234:	2b04      	cmp	r3, #4
 8002236:	d101      	bne.n	800223c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002238:	2301      	movs	r3, #1
 800223a:	e000      	b.n	800223e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	bc80      	pop	{r7}
 8002246:	4770      	bx	lr

08002248 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b088      	sub	sp, #32
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002250:	2300      	movs	r3, #0
 8002252:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8002254:	2300      	movs	r3, #0
 8002256:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002258:	2300      	movs	r3, #0
 800225a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800225c:	2300      	movs	r3, #0
 800225e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e17e      	b.n	8002568 <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002274:	2b00      	cmp	r3, #0
 8002276:	d109      	bne.n	800228c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f7ff fb6b 	bl	8001954 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4618      	mov	r0, r3
 8002292:	f7ff ff57 	bl	8002144 <LL_ADC_IsInternalRegulatorEnabled>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d115      	bne.n	80022c8 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff ff3c 	bl	800211e <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022a6:	4b9e      	ldr	r3, [pc, #632]	; (8002520 <HAL_ADC_Init+0x2d8>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	099b      	lsrs	r3, r3, #6
 80022ac:	4a9d      	ldr	r2, [pc, #628]	; (8002524 <HAL_ADC_Init+0x2dc>)
 80022ae:	fba2 2303 	umull	r2, r3, r2, r3
 80022b2:	099b      	lsrs	r3, r3, #6
 80022b4:	3301      	adds	r3, #1
 80022b6:	005b      	lsls	r3, r3, #1
 80022b8:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80022ba:	e002      	b.n	80022c2 <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	3b01      	subs	r3, #1
 80022c0:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d1f9      	bne.n	80022bc <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f7ff ff39 	bl	8002144 <LL_ADC_IsInternalRegulatorEnabled>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d10d      	bne.n	80022f4 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022dc:	f043 0210 	orr.w	r2, r3, #16
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e8:	f043 0201 	orr.w	r2, r3, #1
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff ff93 	bl	8002224 <LL_ADC_REG_IsConversionOngoing>
 80022fe:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002304:	f003 0310 	and.w	r3, r3, #16
 8002308:	2b00      	cmp	r3, #0
 800230a:	f040 8124 	bne.w	8002556 <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	2b00      	cmp	r3, #0
 8002312:	f040 8120 	bne.w	8002556 <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800231e:	f043 0202 	orr.w	r2, r3, #2
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff ff43 	bl	80021b6 <LL_ADC_IsEnabled>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	f040 80a7 	bne.w	8002486 <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	7e1b      	ldrb	r3, [r3, #24]
 8002340:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002342:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	7e5b      	ldrb	r3, [r3, #25]
 8002348:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800234a:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	7e9b      	ldrb	r3, [r3, #26]
 8002350:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002352:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002358:	2a00      	cmp	r2, #0
 800235a:	d002      	beq.n	8002362 <HAL_ADC_Init+0x11a>
 800235c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002360:	e000      	b.n	8002364 <HAL_ADC_Init+0x11c>
 8002362:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002364:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800236a:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	691b      	ldr	r3, [r3, #16]
 8002370:	2b00      	cmp	r3, #0
 8002372:	da04      	bge.n	800237e <HAL_ADC_Init+0x136>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800237c:	e001      	b.n	8002382 <HAL_ADC_Init+0x13a>
 800237e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 8002382:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800238a:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800238c:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	4313      	orrs	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f893 3020 	ldrb.w	r3, [r3, #32]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d114      	bne.n	80023c8 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	7e9b      	ldrb	r3, [r3, #26]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d104      	bne.n	80023b0 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ac:	61bb      	str	r3, [r7, #24]
 80023ae:	e00b      	b.n	80023c8 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b4:	f043 0220 	orr.w	r2, r3, #32
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023c0:	f043 0201 	orr.w	r2, r3, #1
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d009      	beq.n	80023e4 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d4:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80023dc:	4313      	orrs	r3, r2
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 80023ee:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	6812      	ldr	r2, [r2, #0]
 80023f6:	69b9      	ldr	r1, [r7, #24]
 80023f8:	430b      	orrs	r3, r1
 80023fa:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002408:	4313      	orrs	r3, r2
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	4313      	orrs	r3, r2
 800240e:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002416:	2b01      	cmp	r3, #1
 8002418:	d111      	bne.n	800243e <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002426:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 800242c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8002432:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	4313      	orrs	r3, r2
 8002438:	f043 0301 	orr.w	r3, r3, #1
 800243c:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	691a      	ldr	r2, [r3, #16]
 8002444:	4b38      	ldr	r3, [pc, #224]	; (8002528 <HAL_ADC_Init+0x2e0>)
 8002446:	4013      	ands	r3, r2
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	6812      	ldr	r2, [r2, #0]
 800244c:	6979      	ldr	r1, [r7, #20]
 800244e:	430b      	orrs	r3, r1
 8002450:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800245a:	d014      	beq.n	8002486 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002460:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002464:	d00f      	beq.n	8002486 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800246a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800246e:	d00a      	beq.n	8002486 <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8002470:	4b2e      	ldr	r3, [pc, #184]	; (800252c <HAL_ADC_Init+0x2e4>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002480:	492a      	ldr	r1, [pc, #168]	; (800252c <HAL_ADC_Init+0x2e4>)
 8002482:	4313      	orrs	r3, r2
 8002484:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6818      	ldr	r0, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800248e:	461a      	mov	r2, r3
 8002490:	2100      	movs	r1, #0
 8002492:	f7ff fdfc 	bl	800208e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6818      	ldr	r0, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800249e:	461a      	mov	r2, r3
 80024a0:	4923      	ldr	r1, [pc, #140]	; (8002530 <HAL_ADC_Init+0x2e8>)
 80024a2:	f7ff fdf4 	bl	800208e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d108      	bne.n	80024c0 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f062 020f 	orn	r2, r2, #15
 80024bc:	629a      	str	r2, [r3, #40]	; 0x28
 80024be:	e017      	b.n	80024f0 <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80024c8:	d112      	bne.n	80024f0 <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	69db      	ldr	r3, [r3, #28]
 80024d4:	3b01      	subs	r3, #1
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	f003 031c 	and.w	r3, r3, #28
 80024dc:	f06f 020f 	mvn.w	r2, #15
 80024e0:	fa02 f103 	lsl.w	r1, r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	430a      	orrs	r2, r1
 80024ee:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2100      	movs	r1, #0
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7ff fde7 	bl	80020ca <LL_ADC_GetSamplingTimeCommonChannels>
 80024fc:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002502:	429a      	cmp	r2, r3
 8002504:	d116      	bne.n	8002534 <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002510:	f023 0303 	bic.w	r3, r3, #3
 8002514:	f043 0201 	orr.w	r2, r3, #1
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800251c:	e023      	b.n	8002566 <HAL_ADC_Init+0x31e>
 800251e:	bf00      	nop
 8002520:	20000000 	.word	0x20000000
 8002524:	053e2d63 	.word	0x053e2d63
 8002528:	1ffffc02 	.word	0x1ffffc02
 800252c:	40012708 	.word	0x40012708
 8002530:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002538:	f023 0312 	bic.w	r3, r3, #18
 800253c:	f043 0210 	orr.w	r2, r3, #16
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002548:	f043 0201 	orr.w	r2, r3, #1
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002554:	e007      	b.n	8002566 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800255a:	f043 0210 	orr.w	r2, r3, #16
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8002566:	7ffb      	ldrb	r3, [r7, #31]
}
 8002568:	4618      	mov	r0, r3
 800256a:	3720      	adds	r7, #32
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}

08002570 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4618      	mov	r0, r3
 800257e:	f7ff fe51 	bl	8002224 <LL_ADC_REG_IsConversionOngoing>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d132      	bne.n	80025ee <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800258e:	2b01      	cmp	r3, #1
 8002590:	d101      	bne.n	8002596 <HAL_ADC_Start+0x26>
 8002592:	2302      	movs	r3, #2
 8002594:	e02e      	b.n	80025f4 <HAL_ADC_Start+0x84>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2201      	movs	r2, #1
 800259a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 f8da 	bl	8002758 <ADC_Enable>
 80025a4:	4603      	mov	r3, r0
 80025a6:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80025a8:	7bfb      	ldrb	r3, [r7, #15]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d11a      	bne.n	80025e4 <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80025b6:	f023 0301 	bic.w	r3, r3, #1
 80025ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	221c      	movs	r2, #28
 80025ce:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff fe0e 	bl	80021fe <LL_ADC_REG_StartConversion>
 80025e2:	e006      	b.n	80025f2 <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2200      	movs	r2, #0
 80025e8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80025ec:	e001      	b.n	80025f2 <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80025ee:	2302      	movs	r3, #2
 80025f0:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 80025f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3710      	adds	r7, #16
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	2b08      	cmp	r3, #8
 800260c:	d102      	bne.n	8002614 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800260e:	2308      	movs	r3, #8
 8002610:	60fb      	str	r3, [r7, #12]
 8002612:	e010      	b.n	8002636 <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b00      	cmp	r3, #0
 8002620:	d007      	beq.n	8002632 <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002626:	f043 0220 	orr.w	r2, r3, #32
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e077      	b.n	8002722 <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 8002632:	2304      	movs	r3, #4
 8002634:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002636:	f7ff fcf5 	bl	8002024 <HAL_GetTick>
 800263a:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800263c:	e021      	b.n	8002682 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002644:	d01d      	beq.n	8002682 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002646:	f7ff fced 	bl	8002024 <HAL_GetTick>
 800264a:	4602      	mov	r2, r0
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	1ad3      	subs	r3, r2, r3
 8002650:	683a      	ldr	r2, [r7, #0]
 8002652:	429a      	cmp	r2, r3
 8002654:	d302      	bcc.n	800265c <HAL_ADC_PollForConversion+0x60>
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d112      	bne.n	8002682 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	4013      	ands	r3, r2
 8002666:	2b00      	cmp	r3, #0
 8002668:	d10b      	bne.n	8002682 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800266e:	f043 0204 	orr.w	r2, r3, #4
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e04f      	b.n	8002722 <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	4013      	ands	r3, r2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d0d6      	beq.n	800263e <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002694:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7ff fd2a 	bl	80020fa <LL_ADC_REG_IsTriggerSourceSWStart>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d031      	beq.n	8002710 <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	7e9b      	ldrb	r3, [r3, #26]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d12d      	bne.n	8002710 <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0308 	and.w	r3, r3, #8
 80026be:	2b08      	cmp	r3, #8
 80026c0:	d126      	bne.n	8002710 <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff fdac 	bl	8002224 <LL_ADC_REG_IsConversionOngoing>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d112      	bne.n	80026f8 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	685a      	ldr	r2, [r3, #4]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 020c 	bic.w	r2, r2, #12
 80026e0:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026ea:	f023 0301 	bic.w	r3, r3, #1
 80026ee:	f043 0201 	orr.w	r2, r3, #1
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	659a      	str	r2, [r3, #88]	; 0x58
 80026f6:	e00b      	b.n	8002710 <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026fc:	f043 0220 	orr.w	r2, r3, #32
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002708:	f043 0201 	orr.w	r2, r3, #1
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	7e1b      	ldrb	r3, [r3, #24]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d103      	bne.n	8002720 <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	220c      	movs	r2, #12
 800271e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800272a:	b480      	push	{r7}
 800272c:	b083      	sub	sp, #12
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002738:	4618      	mov	r0, r3
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	bc80      	pop	{r7}
 8002740:	4770      	bx	lr

08002742 <HAL_ADC_GetState>:
  *           " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD1) != 0UL) "
  * @param hadc ADC handle
  * @retval ADC handle state (bitfield on 32 bits)
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef *hadc)
{
 8002742:	b480      	push	{r7}
 8002744:	b083      	sub	sp, #12
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Return ADC handle state */
  return hadc->State;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800274e:	4618      	mov	r0, r3
 8002750:	370c      	adds	r7, #12
 8002752:	46bd      	mov	sp, r7
 8002754:	bc80      	pop	{r7}
 8002756:	4770      	bx	lr

08002758 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002760:	2300      	movs	r3, #0
 8002762:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4618      	mov	r0, r3
 800276a:	f7ff fd24 	bl	80021b6 <LL_ADC_IsEnabled>
 800276e:	4603      	mov	r3, r0
 8002770:	2b00      	cmp	r3, #0
 8002772:	d169      	bne.n	8002848 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	689a      	ldr	r2, [r3, #8]
 800277a:	4b36      	ldr	r3, [pc, #216]	; (8002854 <ADC_Enable+0xfc>)
 800277c:	4013      	ands	r3, r2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00d      	beq.n	800279e <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002786:	f043 0210 	orr.w	r2, r3, #16
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002792:	f043 0201 	orr.w	r2, r3, #1
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e055      	b.n	800284a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7ff fce1 	bl	800216a <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 80027a8:	482b      	ldr	r0, [pc, #172]	; (8002858 <ADC_Enable+0x100>)
 80027aa:	f7ff fc63 	bl	8002074 <LL_ADC_GetCommonPathInternalCh>
 80027ae:	4603      	mov	r3, r0
 80027b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d00f      	beq.n	80027d8 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027b8:	4b28      	ldr	r3, [pc, #160]	; (800285c <ADC_Enable+0x104>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	099b      	lsrs	r3, r3, #6
 80027be:	4a28      	ldr	r2, [pc, #160]	; (8002860 <ADC_Enable+0x108>)
 80027c0:	fba2 2303 	umull	r2, r3, r2, r3
 80027c4:	099b      	lsrs	r3, r3, #6
 80027c6:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 80027c8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80027ca:	e002      	b.n	80027d2 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	3b01      	subs	r3, #1
 80027d0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d1f9      	bne.n	80027cc <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	7e5b      	ldrb	r3, [r3, #25]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d033      	beq.n	8002848 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80027e0:	f7ff fc20 	bl	8002024 <HAL_GetTick>
 80027e4:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80027e6:	e028      	b.n	800283a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff fce2 	bl	80021b6 <LL_ADC_IsEnabled>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d104      	bne.n	8002802 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff fcb4 	bl	800216a <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002802:	f7ff fc0f 	bl	8002024 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d914      	bls.n	800283a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b01      	cmp	r3, #1
 800281c:	d00d      	beq.n	800283a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002822:	f043 0210 	orr.w	r2, r3, #16
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800282e:	f043 0201 	orr.w	r2, r3, #1
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e007      	b.n	800284a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0301 	and.w	r3, r3, #1
 8002844:	2b01      	cmp	r3, #1
 8002846:	d1cf      	bne.n	80027e8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002848:	2300      	movs	r3, #0
}
 800284a:	4618      	mov	r0, r3
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	80000017 	.word	0x80000017
 8002858:	40012708 	.word	0x40012708
 800285c:	20000000 	.word	0x20000000
 8002860:	053e2d63 	.word	0x053e2d63

08002864 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4618      	mov	r0, r3
 8002872:	f7ff fcb2 	bl	80021da <LL_ADC_IsDisableOngoing>
 8002876:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4618      	mov	r0, r3
 800287e:	f7ff fc9a 	bl	80021b6 <LL_ADC_IsEnabled>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d047      	beq.n	8002918 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d144      	bne.n	8002918 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f003 0305 	and.w	r3, r3, #5
 8002898:	2b01      	cmp	r3, #1
 800289a:	d10c      	bne.n	80028b6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7ff fc75 	bl	8002190 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2203      	movs	r2, #3
 80028ac:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80028ae:	f7ff fbb9 	bl	8002024 <HAL_GetTick>
 80028b2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80028b4:	e029      	b.n	800290a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ba:	f043 0210 	orr.w	r2, r3, #16
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c6:	f043 0201 	orr.w	r2, r3, #1
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e023      	b.n	800291a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80028d2:	f7ff fba7 	bl	8002024 <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d914      	bls.n	800290a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d00d      	beq.n	800290a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f2:	f043 0210 	orr.w	r2, r3, #16
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028fe:	f043 0201 	orr.w	r2, r3, #1
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e007      	b.n	800291a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f003 0301 	and.w	r3, r3, #1
 8002914:	2b00      	cmp	r3, #0
 8002916:	d1dc      	bne.n	80028d2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3710      	adds	r7, #16
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}

08002922 <LL_ADC_SetCalibrationFactor>:
{
 8002922:	b480      	push	{r7}
 8002924:	b083      	sub	sp, #12
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
 800292a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002932:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	431a      	orrs	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	bc80      	pop	{r7}
 8002948:	4770      	bx	lr

0800294a <LL_ADC_GetCalibrationFactor>:
{
 800294a:	b480      	push	{r7}
 800294c:	b083      	sub	sp, #12
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002958:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800295c:	4618      	mov	r0, r3
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	bc80      	pop	{r7}
 8002964:	4770      	bx	lr

08002966 <LL_ADC_Enable>:
{
 8002966:	b480      	push	{r7}
 8002968:	b083      	sub	sp, #12
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002976:	f023 0317 	bic.w	r3, r3, #23
 800297a:	f043 0201 	orr.w	r2, r3, #1
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	609a      	str	r2, [r3, #8]
}
 8002982:	bf00      	nop
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	bc80      	pop	{r7}
 800298a:	4770      	bx	lr

0800298c <LL_ADC_Disable>:
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800299c:	f023 0317 	bic.w	r3, r3, #23
 80029a0:	f043 0202 	orr.w	r2, r3, #2
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	609a      	str	r2, [r3, #8]
}
 80029a8:	bf00      	nop
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bc80      	pop	{r7}
 80029b0:	4770      	bx	lr

080029b2 <LL_ADC_IsEnabled>:
{
 80029b2:	b480      	push	{r7}
 80029b4:	b083      	sub	sp, #12
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d101      	bne.n	80029ca <LL_ADC_IsEnabled+0x18>
 80029c6:	2301      	movs	r3, #1
 80029c8:	e000      	b.n	80029cc <LL_ADC_IsEnabled+0x1a>
 80029ca:	2300      	movs	r3, #0
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bc80      	pop	{r7}
 80029d4:	4770      	bx	lr

080029d6 <LL_ADC_StartCalibration>:
{
 80029d6:	b480      	push	{r7}
 80029d8:	b083      	sub	sp, #12
 80029da:	af00      	add	r7, sp, #0
 80029dc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80029e6:	f023 0317 	bic.w	r3, r3, #23
 80029ea:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	609a      	str	r2, [r3, #8]
}
 80029f2:	bf00      	nop
 80029f4:	370c      	adds	r7, #12
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bc80      	pop	{r7}
 80029fa:	4770      	bx	lr

080029fc <LL_ADC_IsCalibrationOnGoing>:
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002a0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a10:	d101      	bne.n	8002a16 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002a12:	2301      	movs	r3, #1
 8002a14:	e000      	b.n	8002a18 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002a16:	2300      	movs	r3, #0
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	370c      	adds	r7, #12
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bc80      	pop	{r7}
 8002a20:	4770      	bx	lr

08002a22 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b088      	sub	sp, #32
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d101      	bne.n	8002a40 <HAL_ADCEx_Calibration_Start+0x1e>
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	e0b9      	b.n	8002bb4 <HAL_ADCEx_Calibration_Start+0x192>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f7ff ff0b 	bl	8002864 <ADC_Disable>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff ffab 	bl	80029b2 <LL_ADC_IsEnabled>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	f040 809d 	bne.w	8002b9e <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a68:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002a6c:	f043 0202 	orr.w	r2, r3, #2
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	659a      	str	r2, [r3, #88]	; 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68da      	ldr	r2, [r3, #12]
 8002a7a:	f248 0303 	movw	r3, #32771	; 0x8003
 8002a7e:	4013      	ands	r3, r2
 8002a80:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	6812      	ldr	r2, [r2, #0]
 8002a8c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002a90:	f023 0303 	bic.w	r3, r3, #3
 8002a94:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8002a96:	2300      	movs	r3, #0
 8002a98:	61fb      	str	r3, [r7, #28]
 8002a9a:	e02e      	b.n	8002afa <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff ff98 	bl	80029d6 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002aa6:	e014      	b.n	8002ad2 <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	3301      	adds	r3, #1
 8002aac:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8002ab4:	d30d      	bcc.n	8002ad2 <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aba:	f023 0312 	bic.w	r3, r3, #18
 8002abe:	f043 0210 	orr.w	r2, r3, #16
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	659a      	str	r2, [r3, #88]	; 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e070      	b.n	8002bb4 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7ff ff90 	bl	80029fc <LL_ADC_IsCalibrationOnGoing>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1e2      	bne.n	8002aa8 <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7ff ff2f 	bl	800294a <LL_ADC_GetCalibrationFactor>
 8002aec:	4602      	mov	r2, r0
 8002aee:	69bb      	ldr	r3, [r7, #24]
 8002af0:	4413      	add	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	3301      	adds	r3, #1
 8002af8:	61fb      	str	r3, [r7, #28]
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	2b07      	cmp	r3, #7
 8002afe:	d9cd      	bls.n	8002a9c <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b08:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7ff ff29 	bl	8002966 <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	69b9      	ldr	r1, [r7, #24]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7ff ff01 	bl	8002922 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7ff ff31 	bl	800298c <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b2a:	f7ff fa7b 	bl	8002024 <HAL_GetTick>
 8002b2e:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002b30:	e01c      	b.n	8002b6c <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b32:	f7ff fa77 	bl	8002024 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d915      	bls.n	8002b6c <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7ff ff34 	bl	80029b2 <LL_ADC_IsEnabled>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00d      	beq.n	8002b6c <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b54:	f043 0210 	orr.w	r2, r3, #16
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b60:	f043 0201 	orr.w	r2, r3, #1
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e023      	b.n	8002bb4 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7ff ff1e 	bl	80029b2 <LL_ADC_IsEnabled>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d1da      	bne.n	8002b32 <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68d9      	ldr	r1, [r3, #12]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	693a      	ldr	r2, [r7, #16]
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b90:	f023 0303 	bic.w	r3, r3, #3
 8002b94:	f043 0201 	orr.w	r2, r3, #1
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	659a      	str	r2, [r3, #88]	; 0x58
 8002b9c:	e005      	b.n	8002baa <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba2:	f043 0210 	orr.w	r2, r3, #16
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	659a      	str	r2, [r3, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
 8002bb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3720      	adds	r7, #32
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f003 0307 	and.w	r3, r3, #7
 8002bca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bcc:	4b0c      	ldr	r3, [pc, #48]	; (8002c00 <__NVIC_SetPriorityGrouping+0x44>)
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bd2:	68ba      	ldr	r2, [r7, #8]
 8002bd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bd8:	4013      	ands	r3, r2
 8002bda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002be4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bee:	4a04      	ldr	r2, [pc, #16]	; (8002c00 <__NVIC_SetPriorityGrouping+0x44>)
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	60d3      	str	r3, [r2, #12]
}
 8002bf4:	bf00      	nop
 8002bf6:	3714      	adds	r7, #20
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bc80      	pop	{r7}
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	e000ed00 	.word	0xe000ed00

08002c04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c08:	4b04      	ldr	r3, [pc, #16]	; (8002c1c <__NVIC_GetPriorityGrouping+0x18>)
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	0a1b      	lsrs	r3, r3, #8
 8002c0e:	f003 0307 	and.w	r3, r3, #7
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bc80      	pop	{r7}
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	e000ed00 	.word	0xe000ed00

08002c20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	4603      	mov	r3, r0
 8002c28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	db0b      	blt.n	8002c4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c32:	79fb      	ldrb	r3, [r7, #7]
 8002c34:	f003 021f 	and.w	r2, r3, #31
 8002c38:	4906      	ldr	r1, [pc, #24]	; (8002c54 <__NVIC_EnableIRQ+0x34>)
 8002c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c3e:	095b      	lsrs	r3, r3, #5
 8002c40:	2001      	movs	r0, #1
 8002c42:	fa00 f202 	lsl.w	r2, r0, r2
 8002c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c4a:	bf00      	nop
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bc80      	pop	{r7}
 8002c52:	4770      	bx	lr
 8002c54:	e000e100 	.word	0xe000e100

08002c58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	4603      	mov	r3, r0
 8002c60:	6039      	str	r1, [r7, #0]
 8002c62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	db0a      	blt.n	8002c82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	b2da      	uxtb	r2, r3
 8002c70:	490c      	ldr	r1, [pc, #48]	; (8002ca4 <__NVIC_SetPriority+0x4c>)
 8002c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c76:	0112      	lsls	r2, r2, #4
 8002c78:	b2d2      	uxtb	r2, r2
 8002c7a:	440b      	add	r3, r1
 8002c7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c80:	e00a      	b.n	8002c98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	b2da      	uxtb	r2, r3
 8002c86:	4908      	ldr	r1, [pc, #32]	; (8002ca8 <__NVIC_SetPriority+0x50>)
 8002c88:	79fb      	ldrb	r3, [r7, #7]
 8002c8a:	f003 030f 	and.w	r3, r3, #15
 8002c8e:	3b04      	subs	r3, #4
 8002c90:	0112      	lsls	r2, r2, #4
 8002c92:	b2d2      	uxtb	r2, r2
 8002c94:	440b      	add	r3, r1
 8002c96:	761a      	strb	r2, [r3, #24]
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bc80      	pop	{r7}
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	e000e100 	.word	0xe000e100
 8002ca8:	e000ed00 	.word	0xe000ed00

08002cac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b089      	sub	sp, #36	; 0x24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f003 0307 	and.w	r3, r3, #7
 8002cbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	f1c3 0307 	rsb	r3, r3, #7
 8002cc6:	2b04      	cmp	r3, #4
 8002cc8:	bf28      	it	cs
 8002cca:	2304      	movcs	r3, #4
 8002ccc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	3304      	adds	r3, #4
 8002cd2:	2b06      	cmp	r3, #6
 8002cd4:	d902      	bls.n	8002cdc <NVIC_EncodePriority+0x30>
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	3b03      	subs	r3, #3
 8002cda:	e000      	b.n	8002cde <NVIC_EncodePriority+0x32>
 8002cdc:	2300      	movs	r3, #0
 8002cde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cea:	43da      	mvns	r2, r3
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	401a      	ands	r2, r3
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cf4:	f04f 31ff 	mov.w	r1, #4294967295
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8002cfe:	43d9      	mvns	r1, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d04:	4313      	orrs	r3, r2
         );
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3724      	adds	r7, #36	; 0x24
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bc80      	pop	{r7}
 8002d0e:	4770      	bx	lr

08002d10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f7ff ff4f 	bl	8002bbc <__NVIC_SetPriorityGrouping>
}
 8002d1e:	bf00      	nop
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b086      	sub	sp, #24
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	60b9      	str	r1, [r7, #8]
 8002d30:	607a      	str	r2, [r7, #4]
 8002d32:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d34:	f7ff ff66 	bl	8002c04 <__NVIC_GetPriorityGrouping>
 8002d38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	68b9      	ldr	r1, [r7, #8]
 8002d3e:	6978      	ldr	r0, [r7, #20]
 8002d40:	f7ff ffb4 	bl	8002cac <NVIC_EncodePriority>
 8002d44:	4602      	mov	r2, r0
 8002d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d4a:	4611      	mov	r1, r2
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7ff ff83 	bl	8002c58 <__NVIC_SetPriority>
}
 8002d52:	bf00      	nop
 8002d54:	3718      	adds	r7, #24
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}

08002d5a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b082      	sub	sp, #8
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	4603      	mov	r3, r0
 8002d62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7ff ff59 	bl	8002c20 <__NVIC_EnableIRQ>
}
 8002d6e:	bf00      	nop
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d76:	b480      	push	{r7}
 8002d78:	b083      	sub	sp, #12
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d101      	bne.n	8002d88 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e04f      	b.n	8002e28 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d008      	beq.n	8002da6 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2204      	movs	r2, #4
 8002d98:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e040      	b.n	8002e28 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f022 020e 	bic.w	r2, r2, #14
 8002db4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002dc4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f022 0201 	bic.w	r2, r2, #1
 8002dd4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dda:	f003 021c 	and.w	r2, r3, #28
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de2:	2101      	movs	r1, #1
 8002de4:	fa01 f202 	lsl.w	r2, r1, r2
 8002de8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002df2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d00c      	beq.n	8002e16 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e06:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e0a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002e14:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2201      	movs	r2, #1
 8002e1a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bc80      	pop	{r7}
 8002e30:	4770      	bx	lr

08002e32 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b084      	sub	sp, #16
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d005      	beq.n	8002e56 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2204      	movs	r2, #4
 8002e4e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	73fb      	strb	r3, [r7, #15]
 8002e54:	e047      	b.n	8002ee6 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f022 020e 	bic.w	r2, r2, #14
 8002e64:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f022 0201 	bic.w	r2, r2, #1
 8002e74:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e7a:	681a      	ldr	r2, [r3, #0]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e84:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8a:	f003 021c 	and.w	r2, r3, #28
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e92:	2101      	movs	r1, #1
 8002e94:	fa01 f202 	lsl.w	r2, r1, r2
 8002e98:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002ea2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00c      	beq.n	8002ec6 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002eba:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002ec4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d003      	beq.n	8002ee6 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	4798      	blx	r3
    }
  }
  return status;
 8002ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3710      	adds	r7, #16
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b087      	sub	sp, #28
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
 8002ef8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002efa:	2300      	movs	r3, #0
 8002efc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002efe:	e140      	b.n	8003182 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	2101      	movs	r1, #1
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	fa01 f303 	lsl.w	r3, r1, r3
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f000 8132 	beq.w	800317c <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f003 0303 	and.w	r3, r3, #3
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d005      	beq.n	8002f30 <HAL_GPIO_Init+0x40>
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f003 0303 	and.w	r3, r3, #3
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d130      	bne.n	8002f92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	005b      	lsls	r3, r3, #1
 8002f3a:	2203      	movs	r2, #3
 8002f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f40:	43db      	mvns	r3, r3
 8002f42:	693a      	ldr	r2, [r7, #16]
 8002f44:	4013      	ands	r3, r2
 8002f46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	68da      	ldr	r2, [r3, #12]
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	fa02 f303 	lsl.w	r3, r2, r3
 8002f54:	693a      	ldr	r2, [r7, #16]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f66:	2201      	movs	r2, #1
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6e:	43db      	mvns	r3, r3
 8002f70:	693a      	ldr	r2, [r7, #16]
 8002f72:	4013      	ands	r3, r2
 8002f74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	091b      	lsrs	r3, r3, #4
 8002f7c:	f003 0201 	and.w	r2, r3, #1
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	fa02 f303 	lsl.w	r3, r2, r3
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	693a      	ldr	r2, [r7, #16]
 8002f90:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f003 0303 	and.w	r3, r3, #3
 8002f9a:	2b03      	cmp	r3, #3
 8002f9c:	d017      	beq.n	8002fce <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	2203      	movs	r2, #3
 8002faa:	fa02 f303 	lsl.w	r3, r2, r3
 8002fae:	43db      	mvns	r3, r3
 8002fb0:	693a      	ldr	r2, [r7, #16]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	689a      	ldr	r2, [r3, #8]
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	f003 0303 	and.w	r3, r3, #3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d123      	bne.n	8003022 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	08da      	lsrs	r2, r3, #3
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	3208      	adds	r2, #8
 8002fe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fe6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	f003 0307 	and.w	r3, r3, #7
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	220f      	movs	r2, #15
 8002ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff6:	43db      	mvns	r3, r3
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	691a      	ldr	r2, [r3, #16]
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	f003 0307 	and.w	r3, r3, #7
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	fa02 f303 	lsl.w	r3, r2, r3
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	4313      	orrs	r3, r2
 8003012:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	08da      	lsrs	r2, r3, #3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	3208      	adds	r2, #8
 800301c:	6939      	ldr	r1, [r7, #16]
 800301e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	2203      	movs	r2, #3
 800302e:	fa02 f303 	lsl.w	r3, r2, r3
 8003032:	43db      	mvns	r3, r3
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	4013      	ands	r3, r2
 8003038:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f003 0203 	and.w	r2, r3, #3
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	fa02 f303 	lsl.w	r3, r2, r3
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	4313      	orrs	r3, r2
 800304e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	693a      	ldr	r2, [r7, #16]
 8003054:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800305e:	2b00      	cmp	r3, #0
 8003060:	f000 808c 	beq.w	800317c <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8003064:	4a4e      	ldr	r2, [pc, #312]	; (80031a0 <HAL_GPIO_Init+0x2b0>)
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	089b      	lsrs	r3, r3, #2
 800306a:	3302      	adds	r3, #2
 800306c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003070:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	f003 0303 	and.w	r3, r3, #3
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	2207      	movs	r2, #7
 800307c:	fa02 f303 	lsl.w	r3, r2, r3
 8003080:	43db      	mvns	r3, r3
 8003082:	693a      	ldr	r2, [r7, #16]
 8003084:	4013      	ands	r3, r2
 8003086:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800308e:	d00d      	beq.n	80030ac <HAL_GPIO_Init+0x1bc>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	4a44      	ldr	r2, [pc, #272]	; (80031a4 <HAL_GPIO_Init+0x2b4>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d007      	beq.n	80030a8 <HAL_GPIO_Init+0x1b8>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	4a43      	ldr	r2, [pc, #268]	; (80031a8 <HAL_GPIO_Init+0x2b8>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d101      	bne.n	80030a4 <HAL_GPIO_Init+0x1b4>
 80030a0:	2302      	movs	r3, #2
 80030a2:	e004      	b.n	80030ae <HAL_GPIO_Init+0x1be>
 80030a4:	2307      	movs	r3, #7
 80030a6:	e002      	b.n	80030ae <HAL_GPIO_Init+0x1be>
 80030a8:	2301      	movs	r3, #1
 80030aa:	e000      	b.n	80030ae <HAL_GPIO_Init+0x1be>
 80030ac:	2300      	movs	r3, #0
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	f002 0203 	and.w	r2, r2, #3
 80030b4:	0092      	lsls	r2, r2, #2
 80030b6:	4093      	lsls	r3, r2
 80030b8:	693a      	ldr	r2, [r7, #16]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80030be:	4938      	ldr	r1, [pc, #224]	; (80031a0 <HAL_GPIO_Init+0x2b0>)
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	089b      	lsrs	r3, r3, #2
 80030c4:	3302      	adds	r3, #2
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80030cc:	4b37      	ldr	r3, [pc, #220]	; (80031ac <HAL_GPIO_Init+0x2bc>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	43db      	mvns	r3, r3
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	4013      	ands	r3, r2
 80030da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d003      	beq.n	80030f0 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80030f0:	4a2e      	ldr	r2, [pc, #184]	; (80031ac <HAL_GPIO_Init+0x2bc>)
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80030f6:	4b2d      	ldr	r3, [pc, #180]	; (80031ac <HAL_GPIO_Init+0x2bc>)
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	43db      	mvns	r3, r3
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	4013      	ands	r3, r2
 8003104:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d003      	beq.n	800311a <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	4313      	orrs	r3, r2
 8003118:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800311a:	4a24      	ldr	r2, [pc, #144]	; (80031ac <HAL_GPIO_Init+0x2bc>)
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8003120:	4b22      	ldr	r3, [pc, #136]	; (80031ac <HAL_GPIO_Init+0x2bc>)
 8003122:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003126:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	43db      	mvns	r3, r3
 800312c:	693a      	ldr	r2, [r7, #16]
 800312e:	4013      	ands	r3, r2
 8003130:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d003      	beq.n	8003146 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	4313      	orrs	r3, r2
 8003144:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8003146:	4a19      	ldr	r2, [pc, #100]	; (80031ac <HAL_GPIO_Init+0x2bc>)
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 800314e:	4b17      	ldr	r3, [pc, #92]	; (80031ac <HAL_GPIO_Init+0x2bc>)
 8003150:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003154:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	43db      	mvns	r3, r3
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	4013      	ands	r3, r2
 800315e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d003      	beq.n	8003174 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	4313      	orrs	r3, r2
 8003172:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8003174:	4a0d      	ldr	r2, [pc, #52]	; (80031ac <HAL_GPIO_Init+0x2bc>)
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	3301      	adds	r3, #1
 8003180:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	fa22 f303 	lsr.w	r3, r2, r3
 800318c:	2b00      	cmp	r3, #0
 800318e:	f47f aeb7 	bne.w	8002f00 <HAL_GPIO_Init+0x10>
  }
}
 8003192:	bf00      	nop
 8003194:	bf00      	nop
 8003196:	371c      	adds	r7, #28
 8003198:	46bd      	mov	sp, r7
 800319a:	bc80      	pop	{r7}
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	40010000 	.word	0x40010000
 80031a4:	48000400 	.word	0x48000400
 80031a8:	48000800 	.word	0x48000800
 80031ac:	58000800 	.word	0x58000800

080031b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	460b      	mov	r3, r1
 80031ba:	807b      	strh	r3, [r7, #2]
 80031bc:	4613      	mov	r3, r2
 80031be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031c0:	787b      	ldrb	r3, [r7, #1]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d003      	beq.n	80031ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031c6:	887a      	ldrh	r2, [r7, #2]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80031cc:	e002      	b.n	80031d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80031ce:	887a      	ldrh	r2, [r7, #2]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80031d4:	bf00      	nop
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	bc80      	pop	{r7}
 80031dc:	4770      	bx	lr

080031de <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b082      	sub	sp, #8
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d101      	bne.n	80031f0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e081      	b.n	80032f4 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d106      	bne.n	800320a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	f7fe fbd1 	bl	80019ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2224      	movs	r2, #36	; 0x24
 800320e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f022 0201 	bic.w	r2, r2, #1
 8003220:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685a      	ldr	r2, [r3, #4]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800322e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689a      	ldr	r2, [r3, #8]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800323e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d107      	bne.n	8003258 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	689a      	ldr	r2, [r3, #8]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003254:	609a      	str	r2, [r3, #8]
 8003256:	e006      	b.n	8003266 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689a      	ldr	r2, [r3, #8]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003264:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	2b02      	cmp	r3, #2
 800326c:	d104      	bne.n	8003278 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003276:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	6812      	ldr	r2, [r2, #0]
 8003282:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003286:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800328a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	68da      	ldr	r2, [r3, #12]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800329a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	691a      	ldr	r2, [r3, #16]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	695b      	ldr	r3, [r3, #20]
 80032a4:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	430a      	orrs	r2, r1
 80032b4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	69d9      	ldr	r1, [r3, #28]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a1a      	ldr	r2, [r3, #32]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	430a      	orrs	r2, r1
 80032c4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f042 0201 	orr.w	r2, r2, #1
 80032d4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2220      	movs	r2, #32
 80032e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3708      	adds	r7, #8
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2b20      	cmp	r3, #32
 8003310:	d138      	bne.n	8003384 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003318:	2b01      	cmp	r3, #1
 800331a:	d101      	bne.n	8003320 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800331c:	2302      	movs	r3, #2
 800331e:	e032      	b.n	8003386 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2224      	movs	r2, #36	; 0x24
 800332c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f022 0201 	bic.w	r2, r2, #1
 800333e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800334e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	6819      	ldr	r1, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	683a      	ldr	r2, [r7, #0]
 800335c:	430a      	orrs	r2, r1
 800335e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f042 0201 	orr.w	r2, r2, #1
 800336e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2220      	movs	r2, #32
 8003374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003380:	2300      	movs	r3, #0
 8003382:	e000      	b.n	8003386 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003384:	2302      	movs	r3, #2
  }
}
 8003386:	4618      	mov	r0, r3
 8003388:	370c      	adds	r7, #12
 800338a:	46bd      	mov	sp, r7
 800338c:	bc80      	pop	{r7}
 800338e:	4770      	bx	lr

08003390 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003390:	b480      	push	{r7}
 8003392:	b085      	sub	sp, #20
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	2b20      	cmp	r3, #32
 80033a4:	d139      	bne.n	800341a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d101      	bne.n	80033b4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80033b0:	2302      	movs	r3, #2
 80033b2:	e033      	b.n	800341c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2224      	movs	r2, #36	; 0x24
 80033c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f022 0201 	bic.w	r2, r2, #1
 80033d2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80033e2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	021b      	lsls	r3, r3, #8
 80033e8:	68fa      	ldr	r2, [r7, #12]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f042 0201 	orr.w	r2, r2, #1
 8003404:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2220      	movs	r2, #32
 800340a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003416:	2300      	movs	r3, #0
 8003418:	e000      	b.n	800341c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800341a:	2302      	movs	r3, #2
  }
}
 800341c:	4618      	mov	r0, r3
 800341e:	3714      	adds	r7, #20
 8003420:	46bd      	mov	sp, r7
 8003422:	bc80      	pop	{r7}
 8003424:	4770      	bx	lr
	...

08003428 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003428:	b480      	push	{r7}
 800342a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800342c:	4b04      	ldr	r3, [pc, #16]	; (8003440 <HAL_PWR_EnableBkUpAccess+0x18>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a03      	ldr	r2, [pc, #12]	; (8003440 <HAL_PWR_EnableBkUpAccess+0x18>)
 8003432:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003436:	6013      	str	r3, [r2, #0]
}
 8003438:	bf00      	nop
 800343a:	46bd      	mov	sp, r7
 800343c:	bc80      	pop	{r7}
 800343e:	4770      	bx	lr
 8003440:	58000400 	.word	0x58000400

08003444 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003444:	b480      	push	{r7}
 8003446:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8003448:	4b03      	ldr	r3, [pc, #12]	; (8003458 <HAL_PWREx_GetVoltageRange+0x14>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003450:	4618      	mov	r0, r3
 8003452:	46bd      	mov	sp, r7
 8003454:	bc80      	pop	{r7}
 8003456:	4770      	bx	lr
 8003458:	58000400 	.word	0x58000400

0800345c <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8003460:	4b06      	ldr	r3, [pc, #24]	; (800347c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003468:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800346c:	d101      	bne.n	8003472 <LL_PWR_IsEnabledBkUpAccess+0x16>
 800346e:	2301      	movs	r3, #1
 8003470:	e000      	b.n	8003474 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	46bd      	mov	sp, r7
 8003478:	bc80      	pop	{r7}
 800347a:	4770      	bx	lr
 800347c:	58000400 	.word	0x58000400

08003480 <LL_RCC_HSE_EnableTcxo>:
{
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8003484:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800348e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003492:	6013      	str	r3, [r2, #0]
}
 8003494:	bf00      	nop
 8003496:	46bd      	mov	sp, r7
 8003498:	bc80      	pop	{r7}
 800349a:	4770      	bx	lr

0800349c <LL_RCC_HSE_DisableTcxo>:
{
 800349c:	b480      	push	{r7}
 800349e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80034a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80034ae:	6013      	str	r3, [r2, #0]
}
 80034b0:	bf00      	nop
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bc80      	pop	{r7}
 80034b6:	4770      	bx	lr

080034b8 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80034bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034ca:	d101      	bne.n	80034d0 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80034cc:	2301      	movs	r3, #1
 80034ce:	e000      	b.n	80034d2 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bc80      	pop	{r7}
 80034d8:	4770      	bx	lr

080034da <LL_RCC_HSE_Enable>:
{
 80034da:	b480      	push	{r7}
 80034dc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80034de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ec:	6013      	str	r3, [r2, #0]
}
 80034ee:	bf00      	nop
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bc80      	pop	{r7}
 80034f4:	4770      	bx	lr

080034f6 <LL_RCC_HSE_Disable>:
{
 80034f6:	b480      	push	{r7}
 80034f8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80034fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003504:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003508:	6013      	str	r3, [r2, #0]
}
 800350a:	bf00      	nop
 800350c:	46bd      	mov	sp, r7
 800350e:	bc80      	pop	{r7}
 8003510:	4770      	bx	lr

08003512 <LL_RCC_HSE_IsReady>:
{
 8003512:	b480      	push	{r7}
 8003514:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003516:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003520:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003524:	d101      	bne.n	800352a <LL_RCC_HSE_IsReady+0x18>
 8003526:	2301      	movs	r3, #1
 8003528:	e000      	b.n	800352c <LL_RCC_HSE_IsReady+0x1a>
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	46bd      	mov	sp, r7
 8003530:	bc80      	pop	{r7}
 8003532:	4770      	bx	lr

08003534 <LL_RCC_HSI_Enable>:
{
 8003534:	b480      	push	{r7}
 8003536:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003538:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003542:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003546:	6013      	str	r3, [r2, #0]
}
 8003548:	bf00      	nop
 800354a:	46bd      	mov	sp, r7
 800354c:	bc80      	pop	{r7}
 800354e:	4770      	bx	lr

08003550 <LL_RCC_HSI_Disable>:
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003554:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800355e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003562:	6013      	str	r3, [r2, #0]
}
 8003564:	bf00      	nop
 8003566:	46bd      	mov	sp, r7
 8003568:	bc80      	pop	{r7}
 800356a:	4770      	bx	lr

0800356c <LL_RCC_HSI_IsReady>:
{
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003570:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800357a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800357e:	d101      	bne.n	8003584 <LL_RCC_HSI_IsReady+0x18>
 8003580:	2301      	movs	r3, #1
 8003582:	e000      	b.n	8003586 <LL_RCC_HSI_IsReady+0x1a>
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	46bd      	mov	sp, r7
 800358a:	bc80      	pop	{r7}
 800358c:	4770      	bx	lr

0800358e <LL_RCC_HSI_SetCalibTrimming>:
{
 800358e:	b480      	push	{r7}
 8003590:	b083      	sub	sp, #12
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003596:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	061b      	lsls	r3, r3, #24
 80035a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80035a8:	4313      	orrs	r3, r2
 80035aa:	604b      	str	r3, [r1, #4]
}
 80035ac:	bf00      	nop
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bc80      	pop	{r7}
 80035b4:	4770      	bx	lr

080035b6 <LL_RCC_LSE_IsReady>:
{
 80035b6:	b480      	push	{r7}
 80035b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80035ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c2:	f003 0302 	and.w	r3, r3, #2
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d101      	bne.n	80035ce <LL_RCC_LSE_IsReady+0x18>
 80035ca:	2301      	movs	r3, #1
 80035cc:	e000      	b.n	80035d0 <LL_RCC_LSE_IsReady+0x1a>
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bc80      	pop	{r7}
 80035d6:	4770      	bx	lr

080035d8 <LL_RCC_LSI_Enable>:
{
 80035d8:	b480      	push	{r7}
 80035da:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80035dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035e8:	f043 0301 	orr.w	r3, r3, #1
 80035ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80035f0:	bf00      	nop
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bc80      	pop	{r7}
 80035f6:	4770      	bx	lr

080035f8 <LL_RCC_LSI_Disable>:
{
 80035f8:	b480      	push	{r7}
 80035fa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80035fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003600:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003604:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003608:	f023 0301 	bic.w	r3, r3, #1
 800360c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003610:	bf00      	nop
 8003612:	46bd      	mov	sp, r7
 8003614:	bc80      	pop	{r7}
 8003616:	4770      	bx	lr

08003618 <LL_RCC_LSI_IsReady>:
{
 8003618:	b480      	push	{r7}
 800361a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800361c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003620:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003624:	f003 0302 	and.w	r3, r3, #2
 8003628:	2b02      	cmp	r3, #2
 800362a:	d101      	bne.n	8003630 <LL_RCC_LSI_IsReady+0x18>
 800362c:	2301      	movs	r3, #1
 800362e:	e000      	b.n	8003632 <LL_RCC_LSI_IsReady+0x1a>
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	46bd      	mov	sp, r7
 8003636:	bc80      	pop	{r7}
 8003638:	4770      	bx	lr

0800363a <LL_RCC_MSI_Enable>:
{
 800363a:	b480      	push	{r7}
 800363c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800363e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003648:	f043 0301 	orr.w	r3, r3, #1
 800364c:	6013      	str	r3, [r2, #0]
}
 800364e:	bf00      	nop
 8003650:	46bd      	mov	sp, r7
 8003652:	bc80      	pop	{r7}
 8003654:	4770      	bx	lr

08003656 <LL_RCC_MSI_Disable>:
{
 8003656:	b480      	push	{r7}
 8003658:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800365a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003664:	f023 0301 	bic.w	r3, r3, #1
 8003668:	6013      	str	r3, [r2, #0]
}
 800366a:	bf00      	nop
 800366c:	46bd      	mov	sp, r7
 800366e:	bc80      	pop	{r7}
 8003670:	4770      	bx	lr

08003672 <LL_RCC_MSI_IsReady>:
{
 8003672:	b480      	push	{r7}
 8003674:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003676:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b02      	cmp	r3, #2
 8003682:	d101      	bne.n	8003688 <LL_RCC_MSI_IsReady+0x16>
 8003684:	2301      	movs	r3, #1
 8003686:	e000      	b.n	800368a <LL_RCC_MSI_IsReady+0x18>
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	46bd      	mov	sp, r7
 800368e:	bc80      	pop	{r7}
 8003690:	4770      	bx	lr

08003692 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8003692:	b480      	push	{r7}
 8003694:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8003696:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0308 	and.w	r3, r3, #8
 80036a0:	2b08      	cmp	r3, #8
 80036a2:	d101      	bne.n	80036a8 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80036a4:	2301      	movs	r3, #1
 80036a6:	e000      	b.n	80036aa <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bc80      	pop	{r7}
 80036b0:	4770      	bx	lr

080036b2 <LL_RCC_MSI_GetRange>:
{
 80036b2:	b480      	push	{r7}
 80036b4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80036b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bc80      	pop	{r7}
 80036c6:	4770      	bx	lr

080036c8 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 80036c8:	b480      	push	{r7}
 80036ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80036cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036d4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80036d8:	4618      	mov	r0, r3
 80036da:	46bd      	mov	sp, r7
 80036dc:	bc80      	pop	{r7}
 80036de:	4770      	bx	lr

080036e0 <LL_RCC_MSI_SetCalibTrimming>:
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80036e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	021b      	lsls	r3, r3, #8
 80036f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80036fa:	4313      	orrs	r3, r2
 80036fc:	604b      	str	r3, [r1, #4]
}
 80036fe:	bf00      	nop
 8003700:	370c      	adds	r7, #12
 8003702:	46bd      	mov	sp, r7
 8003704:	bc80      	pop	{r7}
 8003706:	4770      	bx	lr

08003708 <LL_RCC_SetSysClkSource>:
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003710:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f023 0203 	bic.w	r2, r3, #3
 800371a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4313      	orrs	r3, r2
 8003722:	608b      	str	r3, [r1, #8]
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	bc80      	pop	{r7}
 800372c:	4770      	bx	lr

0800372e <LL_RCC_GetSysClkSource>:
{
 800372e:	b480      	push	{r7}
 8003730:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003732:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f003 030c 	and.w	r3, r3, #12
}
 800373c:	4618      	mov	r0, r3
 800373e:	46bd      	mov	sp, r7
 8003740:	bc80      	pop	{r7}
 8003742:	4770      	bx	lr

08003744 <LL_RCC_SetAHBPrescaler>:
{
 8003744:	b480      	push	{r7}
 8003746:	b083      	sub	sp, #12
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800374c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003756:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4313      	orrs	r3, r2
 800375e:	608b      	str	r3, [r1, #8]
}
 8003760:	bf00      	nop
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	bc80      	pop	{r7}
 8003768:	4770      	bx	lr

0800376a <LL_RCC_SetAHB3Prescaler>:
{
 800376a:	b480      	push	{r7}
 800376c:	b083      	sub	sp, #12
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8003772:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003776:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800377a:	f023 020f 	bic.w	r2, r3, #15
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	091b      	lsrs	r3, r3, #4
 8003782:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003786:	4313      	orrs	r3, r2
 8003788:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	bc80      	pop	{r7}
 8003794:	4770      	bx	lr

08003796 <LL_RCC_SetAPB1Prescaler>:
{
 8003796:	b480      	push	{r7}
 8003798:	b083      	sub	sp, #12
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800379e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	608b      	str	r3, [r1, #8]
}
 80037b2:	bf00      	nop
 80037b4:	370c      	adds	r7, #12
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bc80      	pop	{r7}
 80037ba:	4770      	bx	lr

080037bc <LL_RCC_SetAPB2Prescaler>:
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80037c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80037ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	608b      	str	r3, [r1, #8]
}
 80037d8:	bf00      	nop
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	bc80      	pop	{r7}
 80037e0:	4770      	bx	lr

080037e2 <LL_RCC_GetAHBPrescaler>:
{
 80037e2:	b480      	push	{r7}
 80037e4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80037e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bc80      	pop	{r7}
 80037f6:	4770      	bx	lr

080037f8 <LL_RCC_GetAHB3Prescaler>:
{
 80037f8:	b480      	push	{r7}
 80037fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80037fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003800:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003804:	011b      	lsls	r3, r3, #4
 8003806:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800380a:	4618      	mov	r0, r3
 800380c:	46bd      	mov	sp, r7
 800380e:	bc80      	pop	{r7}
 8003810:	4770      	bx	lr

08003812 <LL_RCC_GetAPB1Prescaler>:
{
 8003812:	b480      	push	{r7}
 8003814:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003816:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8003820:	4618      	mov	r0, r3
 8003822:	46bd      	mov	sp, r7
 8003824:	bc80      	pop	{r7}
 8003826:	4770      	bx	lr

08003828 <LL_RCC_GetAPB2Prescaler>:
{
 8003828:	b480      	push	{r7}
 800382a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800382c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8003836:	4618      	mov	r0, r3
 8003838:	46bd      	mov	sp, r7
 800383a:	bc80      	pop	{r7}
 800383c:	4770      	bx	lr

0800383e <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800383e:	b480      	push	{r7}
 8003840:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8003842:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800384c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003850:	6013      	str	r3, [r2, #0]
}
 8003852:	bf00      	nop
 8003854:	46bd      	mov	sp, r7
 8003856:	bc80      	pop	{r7}
 8003858:	4770      	bx	lr

0800385a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800385a:	b480      	push	{r7}
 800385c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800385e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003868:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800386c:	6013      	str	r3, [r2, #0]
}
 800386e:	bf00      	nop
 8003870:	46bd      	mov	sp, r7
 8003872:	bc80      	pop	{r7}
 8003874:	4770      	bx	lr

08003876 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8003876:	b480      	push	{r7}
 8003878:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800387a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003884:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003888:	d101      	bne.n	800388e <LL_RCC_PLL_IsReady+0x18>
 800388a:	2301      	movs	r3, #1
 800388c:	e000      	b.n	8003890 <LL_RCC_PLL_IsReady+0x1a>
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	46bd      	mov	sp, r7
 8003894:	bc80      	pop	{r7}
 8003896:	4770      	bx	lr

08003898 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003898:	b480      	push	{r7}
 800389a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800389c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	0a1b      	lsrs	r3, r3, #8
 80038a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bc80      	pop	{r7}
 80038ae:	4770      	bx	lr

080038b0 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80038b0:	b480      	push	{r7}
 80038b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80038b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80038be:	4618      	mov	r0, r3
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bc80      	pop	{r7}
 80038c4:	4770      	bx	lr

080038c6 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80038c6:	b480      	push	{r7}
 80038c8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80038ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bc80      	pop	{r7}
 80038da:	4770      	bx	lr

080038dc <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80038e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	f003 0303 	and.w	r3, r3, #3
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bc80      	pop	{r7}
 80038f0:	4770      	bx	lr

080038f2 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80038f2:	b480      	push	{r7}
 80038f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80038f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003904:	d101      	bne.n	800390a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8003906:	2301      	movs	r3, #1
 8003908:	e000      	b.n	800390c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800390a:	2300      	movs	r3, #0
}
 800390c:	4618      	mov	r0, r3
 800390e:	46bd      	mov	sp, r7
 8003910:	bc80      	pop	{r7}
 8003912:	4770      	bx	lr

08003914 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8003914:	b480      	push	{r7}
 8003916:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8003918:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800391c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003920:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003928:	d101      	bne.n	800392e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800392a:	2301      	movs	r3, #1
 800392c:	e000      	b.n	8003930 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800392e:	2300      	movs	r3, #0
}
 8003930:	4618      	mov	r0, r3
 8003932:	46bd      	mov	sp, r7
 8003934:	bc80      	pop	{r7}
 8003936:	4770      	bx	lr

08003938 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8003938:	b480      	push	{r7}
 800393a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800393c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003946:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800394a:	d101      	bne.n	8003950 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800394c:	2301      	movs	r3, #1
 800394e:	e000      	b.n	8003952 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	46bd      	mov	sp, r7
 8003956:	bc80      	pop	{r7}
 8003958:	4770      	bx	lr

0800395a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800395a:	b480      	push	{r7}
 800395c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800395e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003968:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800396c:	d101      	bne.n	8003972 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800396e:	2301      	movs	r3, #1
 8003970:	e000      	b.n	8003974 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	46bd      	mov	sp, r7
 8003978:	bc80      	pop	{r7}
 800397a:	4770      	bx	lr

0800397c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b088      	sub	sp, #32
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d101      	bne.n	800398e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e36f      	b.n	800406e <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800398e:	f7ff fece 	bl	800372e <LL_RCC_GetSysClkSource>
 8003992:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003994:	f7ff ffa2 	bl	80038dc <LL_RCC_PLL_GetMainSource>
 8003998:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0320 	and.w	r3, r3, #32
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	f000 80c4 	beq.w	8003b30 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80039a8:	69fb      	ldr	r3, [r7, #28]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d005      	beq.n	80039ba <HAL_RCC_OscConfig+0x3e>
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	2b0c      	cmp	r3, #12
 80039b2:	d176      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d173      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a1b      	ldr	r3, [r3, #32]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d101      	bne.n	80039c6 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e353      	b.n	800406e <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f003 0308 	and.w	r3, r3, #8
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d005      	beq.n	80039e4 <HAL_RCC_OscConfig+0x68>
 80039d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039e2:	e006      	b.n	80039f2 <HAL_RCC_OscConfig+0x76>
 80039e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039ec:	091b      	lsrs	r3, r3, #4
 80039ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d222      	bcs.n	8003a3c <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fa:	4618      	mov	r0, r3
 80039fc:	f000 fd7a 	bl	80044f4 <RCC_SetFlashLatencyFromMSIRange>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d001      	beq.n	8003a0a <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e331      	b.n	800406e <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a14:	f043 0308 	orr.w	r3, r3, #8
 8003a18:	6013      	str	r3, [r2, #0]
 8003a1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a28:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a34:	4618      	mov	r0, r3
 8003a36:	f7ff fe53 	bl	80036e0 <LL_RCC_MSI_SetCalibTrimming>
 8003a3a:	e021      	b.n	8003a80 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a46:	f043 0308 	orr.w	r3, r3, #8
 8003a4a:	6013      	str	r3, [r2, #0]
 8003a4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7ff fe3a 	bl	80036e0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a70:	4618      	mov	r0, r3
 8003a72:	f000 fd3f 	bl	80044f4 <RCC_SetFlashLatencyFromMSIRange>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d001      	beq.n	8003a80 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e2f6      	b.n	800406e <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003a80:	f000 fcc2 	bl	8004408 <HAL_RCC_GetHCLKFreq>
 8003a84:	4603      	mov	r3, r0
 8003a86:	4aa7      	ldr	r2, [pc, #668]	; (8003d24 <HAL_RCC_OscConfig+0x3a8>)
 8003a88:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8003a8a:	4ba7      	ldr	r3, [pc, #668]	; (8003d28 <HAL_RCC_OscConfig+0x3ac>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f7fe f90c 	bl	8001cac <HAL_InitTick>
 8003a94:	4603      	mov	r3, r0
 8003a96:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8003a98:	7cfb      	ldrb	r3, [r7, #19]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d047      	beq.n	8003b2e <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8003a9e:	7cfb      	ldrb	r3, [r7, #19]
 8003aa0:	e2e5      	b.n	800406e <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d02c      	beq.n	8003b04 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003aaa:	f7ff fdc6 	bl	800363a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003aae:	f7fe fab9 	bl	8002024 <HAL_GetTick>
 8003ab2:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8003ab4:	e008      	b.n	8003ac8 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ab6:	f7fe fab5 	bl	8002024 <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d901      	bls.n	8003ac8 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e2d2      	b.n	800406e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8003ac8:	f7ff fdd3 	bl	8003672 <LL_RCC_MSI_IsReady>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d0f1      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ad2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003adc:	f043 0308 	orr.w	r3, r3, #8
 8003ae0:	6013      	str	r3, [r2, #0]
 8003ae2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003af4:	4313      	orrs	r3, r2
 8003af6:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7ff fdef 	bl	80036e0 <LL_RCC_MSI_SetCalibTrimming>
 8003b02:	e015      	b.n	8003b30 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003b04:	f7ff fda7 	bl	8003656 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b08:	f7fe fa8c 	bl	8002024 <HAL_GetTick>
 8003b0c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8003b0e:	e008      	b.n	8003b22 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b10:	f7fe fa88 	bl	8002024 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e2a5      	b.n	800406e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8003b22:	f7ff fda6 	bl	8003672 <LL_RCC_MSI_IsReady>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d1f1      	bne.n	8003b10 <HAL_RCC_OscConfig+0x194>
 8003b2c:	e000      	b.n	8003b30 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003b2e:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0301 	and.w	r3, r3, #1
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d058      	beq.n	8003bee <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	2b08      	cmp	r3, #8
 8003b40:	d005      	beq.n	8003b4e <HAL_RCC_OscConfig+0x1d2>
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	2b0c      	cmp	r3, #12
 8003b46:	d108      	bne.n	8003b5a <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	2b03      	cmp	r3, #3
 8003b4c:	d105      	bne.n	8003b5a <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d14b      	bne.n	8003bee <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e289      	b.n	800406e <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8003b5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b78:	d102      	bne.n	8003b80 <HAL_RCC_OscConfig+0x204>
 8003b7a:	f7ff fcae 	bl	80034da <LL_RCC_HSE_Enable>
 8003b7e:	e00d      	b.n	8003b9c <HAL_RCC_OscConfig+0x220>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8003b88:	d104      	bne.n	8003b94 <HAL_RCC_OscConfig+0x218>
 8003b8a:	f7ff fc79 	bl	8003480 <LL_RCC_HSE_EnableTcxo>
 8003b8e:	f7ff fca4 	bl	80034da <LL_RCC_HSE_Enable>
 8003b92:	e003      	b.n	8003b9c <HAL_RCC_OscConfig+0x220>
 8003b94:	f7ff fcaf 	bl	80034f6 <LL_RCC_HSE_Disable>
 8003b98:	f7ff fc80 	bl	800349c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d012      	beq.n	8003bca <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba4:	f7fe fa3e 	bl	8002024 <HAL_GetTick>
 8003ba8:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8003baa:	e008      	b.n	8003bbe <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bac:	f7fe fa3a 	bl	8002024 <HAL_GetTick>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	2b64      	cmp	r3, #100	; 0x64
 8003bb8:	d901      	bls.n	8003bbe <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e257      	b.n	800406e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8003bbe:	f7ff fca8 	bl	8003512 <LL_RCC_HSE_IsReady>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d0f1      	beq.n	8003bac <HAL_RCC_OscConfig+0x230>
 8003bc8:	e011      	b.n	8003bee <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bca:	f7fe fa2b 	bl	8002024 <HAL_GetTick>
 8003bce:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8003bd0:	e008      	b.n	8003be4 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bd2:	f7fe fa27 	bl	8002024 <HAL_GetTick>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	1ad3      	subs	r3, r2, r3
 8003bdc:	2b64      	cmp	r3, #100	; 0x64
 8003bde:	d901      	bls.n	8003be4 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e244      	b.n	800406e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8003be4:	f7ff fc95 	bl	8003512 <LL_RCC_HSE_IsReady>
 8003be8:	4603      	mov	r3, r0
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1f1      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0302 	and.w	r3, r3, #2
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d046      	beq.n	8003c88 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	2b04      	cmp	r3, #4
 8003bfe:	d005      	beq.n	8003c0c <HAL_RCC_OscConfig+0x290>
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	2b0c      	cmp	r3, #12
 8003c04:	d10e      	bne.n	8003c24 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d10b      	bne.n	8003c24 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d101      	bne.n	8003c18 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e22a      	b.n	800406e <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	695b      	ldr	r3, [r3, #20]
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f7ff fcb6 	bl	800358e <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003c22:	e031      	b.n	8003c88 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d019      	beq.n	8003c60 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c2c:	f7ff fc82 	bl	8003534 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c30:	f7fe f9f8 	bl	8002024 <HAL_GetTick>
 8003c34:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8003c36:	e008      	b.n	8003c4a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c38:	f7fe f9f4 	bl	8002024 <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d901      	bls.n	8003c4a <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e211      	b.n	800406e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8003c4a:	f7ff fc8f 	bl	800356c <LL_RCC_HSI_IsReady>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d0f1      	beq.n	8003c38 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	695b      	ldr	r3, [r3, #20]
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f7ff fc98 	bl	800358e <LL_RCC_HSI_SetCalibTrimming>
 8003c5e:	e013      	b.n	8003c88 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c60:	f7ff fc76 	bl	8003550 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c64:	f7fe f9de 	bl	8002024 <HAL_GetTick>
 8003c68:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8003c6a:	e008      	b.n	8003c7e <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c6c:	f7fe f9da 	bl	8002024 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e1f7      	b.n	800406e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8003c7e:	f7ff fc75 	bl	800356c <LL_RCC_HSI_IsReady>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1f1      	bne.n	8003c6c <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0308 	and.w	r3, r3, #8
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d06e      	beq.n	8003d72 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d056      	beq.n	8003d4a <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8003c9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ca0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ca4:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	69da      	ldr	r2, [r3, #28]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f003 0310 	and.w	r3, r3, #16
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d031      	beq.n	8003d18 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f003 0302 	and.w	r3, r3, #2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d006      	beq.n	8003ccc <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d101      	bne.n	8003ccc <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e1d0      	b.n	800406e <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f003 0301 	and.w	r3, r3, #1
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d013      	beq.n	8003cfe <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8003cd6:	f7ff fc8f 	bl	80035f8 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003cda:	f7fe f9a3 	bl	8002024 <HAL_GetTick>
 8003cde:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8003ce0:	e008      	b.n	8003cf4 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ce2:	f7fe f99f 	bl	8002024 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	1ad3      	subs	r3, r2, r3
 8003cec:	2b11      	cmp	r3, #17
 8003cee:	d901      	bls.n	8003cf4 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e1bc      	b.n	800406e <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8003cf4:	f7ff fc90 	bl	8003618 <LL_RCC_LSI_IsReady>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1f1      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8003cfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d06:	f023 0210 	bic.w	r2, r3, #16
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	69db      	ldr	r3, [r3, #28]
 8003d0e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d12:	4313      	orrs	r3, r2
 8003d14:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d18:	f7ff fc5e 	bl	80035d8 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d1c:	f7fe f982 	bl	8002024 <HAL_GetTick>
 8003d20:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8003d22:	e00c      	b.n	8003d3e <HAL_RCC_OscConfig+0x3c2>
 8003d24:	20000000 	.word	0x20000000
 8003d28:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d2c:	f7fe f97a 	bl	8002024 <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	1ad3      	subs	r3, r2, r3
 8003d36:	2b11      	cmp	r3, #17
 8003d38:	d901      	bls.n	8003d3e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e197      	b.n	800406e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8003d3e:	f7ff fc6b 	bl	8003618 <LL_RCC_LSI_IsReady>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d0f1      	beq.n	8003d2c <HAL_RCC_OscConfig+0x3b0>
 8003d48:	e013      	b.n	8003d72 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d4a:	f7ff fc55 	bl	80035f8 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d4e:	f7fe f969 	bl	8002024 <HAL_GetTick>
 8003d52:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8003d54:	e008      	b.n	8003d68 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d56:	f7fe f965 	bl	8002024 <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	2b11      	cmp	r3, #17
 8003d62:	d901      	bls.n	8003d68 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e182      	b.n	800406e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8003d68:	f7ff fc56 	bl	8003618 <LL_RCC_LSI_IsReady>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d1f1      	bne.n	8003d56 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0304 	and.w	r3, r3, #4
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	f000 80d8 	beq.w	8003f30 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003d80:	f7ff fb6c 	bl	800345c <LL_PWR_IsEnabledBkUpAccess>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d113      	bne.n	8003db2 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8003d8a:	f7ff fb4d 	bl	8003428 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d8e:	f7fe f949 	bl	8002024 <HAL_GetTick>
 8003d92:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003d94:	e008      	b.n	8003da8 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d96:	f7fe f945 	bl	8002024 <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d901      	bls.n	8003da8 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e162      	b.n	800406e <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8003da8:	f7ff fb58 	bl	800345c <LL_PWR_IsEnabledBkUpAccess>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d0f1      	beq.n	8003d96 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d07b      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	2b85      	cmp	r3, #133	; 0x85
 8003dc0:	d003      	beq.n	8003dca <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	2b05      	cmp	r3, #5
 8003dc8:	d109      	bne.n	8003dde <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003dca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003dd6:	f043 0304 	orr.w	r3, r3, #4
 8003dda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dde:	f7fe f921 	bl	8002024 <HAL_GetTick>
 8003de2:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003de4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003df0:	f043 0301 	orr.w	r3, r3, #1
 8003df4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8003df8:	e00a      	b.n	8003e10 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dfa:	f7fe f913 	bl	8002024 <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d901      	bls.n	8003e10 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e12e      	b.n	800406e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8003e10:	f7ff fbd1 	bl	80035b6 <LL_RCC_LSE_IsReady>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d0ef      	beq.n	8003dfa <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	2b81      	cmp	r3, #129	; 0x81
 8003e20:	d003      	beq.n	8003e2a <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	2b85      	cmp	r3, #133	; 0x85
 8003e28:	d121      	bne.n	8003e6e <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e2a:	f7fe f8fb 	bl	8002024 <HAL_GetTick>
 8003e2e:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003e30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003e44:	e00a      	b.n	8003e5c <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e46:	f7fe f8ed 	bl	8002024 <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d901      	bls.n	8003e5c <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	e108      	b.n	800406e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003e5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d0ec      	beq.n	8003e46 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003e6c:	e060      	b.n	8003f30 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e6e:	f7fe f8d9 	bl	8002024 <HAL_GetTick>
 8003e72:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003e74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003e88:	e00a      	b.n	8003ea0 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e8a:	f7fe f8cb 	bl	8002024 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d901      	bls.n	8003ea0 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e0e6      	b.n	800406e <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003ea0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d1ec      	bne.n	8003e8a <HAL_RCC_OscConfig+0x50e>
 8003eb0:	e03e      	b.n	8003f30 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eb2:	f7fe f8b7 	bl	8002024 <HAL_GetTick>
 8003eb6:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003eb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003ec4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003ec8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003ecc:	e00a      	b.n	8003ee4 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ece:	f7fe f8a9 	bl	8002024 <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d901      	bls.n	8003ee4 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e0c4      	b.n	800406e <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003ee4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d1ec      	bne.n	8003ece <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ef4:	f7fe f896 	bl	8002024 <HAL_GetTick>
 8003ef8:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003efa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f06:	f023 0301 	bic.w	r3, r3, #1
 8003f0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003f0e:	e00a      	b.n	8003f26 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f10:	f7fe f888 	bl	8002024 <HAL_GetTick>
 8003f14:	4602      	mov	r2, r0
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	1ad3      	subs	r3, r2, r3
 8003f1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e0a3      	b.n	800406e <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8003f26:	f7ff fb46 	bl	80035b6 <LL_RCC_LSE_IsReady>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d1ef      	bne.n	8003f10 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	f000 8099 	beq.w	800406c <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	2b0c      	cmp	r3, #12
 8003f3e:	d06c      	beq.n	800401a <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d14b      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f48:	f7ff fc87 	bl	800385a <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f4c:	f7fe f86a 	bl	8002024 <HAL_GetTick>
 8003f50:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003f52:	e008      	b.n	8003f66 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f54:	f7fe f866 	bl	8002024 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	2b0a      	cmp	r3, #10
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e083      	b.n	800406e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8003f66:	f7ff fc86 	bl	8003876 <LL_RCC_PLL_IsReady>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d1f1      	bne.n	8003f54 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f74:	68da      	ldr	r2, [r3, #12]
 8003f76:	4b40      	ldr	r3, [pc, #256]	; (8004078 <HAL_RCC_OscConfig+0x6fc>)
 8003f78:	4013      	ands	r3, r2
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003f82:	4311      	orrs	r1, r2
 8003f84:	687a      	ldr	r2, [r7, #4]
 8003f86:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f88:	0212      	lsls	r2, r2, #8
 8003f8a:	4311      	orrs	r1, r2
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003f90:	4311      	orrs	r1, r2
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003f96:	4311      	orrs	r1, r2
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003f9c:	430a      	orrs	r2, r1
 8003f9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fa6:	f7ff fc4a 	bl	800383e <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003faa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fb8:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fba:	f7fe f833 	bl	8002024 <HAL_GetTick>
 8003fbe:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8003fc0:	e008      	b.n	8003fd4 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fc2:	f7fe f82f 	bl	8002024 <HAL_GetTick>
 8003fc6:	4602      	mov	r2, r0
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	2b0a      	cmp	r3, #10
 8003fce:	d901      	bls.n	8003fd4 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e04c      	b.n	800406e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8003fd4:	f7ff fc4f 	bl	8003876 <LL_RCC_PLL_IsReady>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d0f1      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x646>
 8003fde:	e045      	b.n	800406c <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fe0:	f7ff fc3b 	bl	800385a <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe4:	f7fe f81e 	bl	8002024 <HAL_GetTick>
 8003fe8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003fea:	e008      	b.n	8003ffe <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fec:	f7fe f81a 	bl	8002024 <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	2b0a      	cmp	r3, #10
 8003ff8:	d901      	bls.n	8003ffe <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e037      	b.n	800406e <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8003ffe:	f7ff fc3a 	bl	8003876 <LL_RCC_PLL_IsReady>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d1f1      	bne.n	8003fec <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8004008:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800400c:	68da      	ldr	r2, [r3, #12]
 800400e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004012:	4b1a      	ldr	r3, [pc, #104]	; (800407c <HAL_RCC_OscConfig+0x700>)
 8004014:	4013      	ands	r3, r2
 8004016:	60cb      	str	r3, [r1, #12]
 8004018:	e028      	b.n	800406c <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401e:	2b01      	cmp	r3, #1
 8004020:	d101      	bne.n	8004026 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e023      	b.n	800406e <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004026:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	f003 0203 	and.w	r2, r3, #3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004038:	429a      	cmp	r2, r3
 800403a:	d115      	bne.n	8004068 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004046:	429a      	cmp	r2, r3
 8004048:	d10e      	bne.n	8004068 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004054:	021b      	lsls	r3, r3, #8
 8004056:	429a      	cmp	r2, r3
 8004058:	d106      	bne.n	8004068 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004064:	429a      	cmp	r2, r3
 8004066:	d001      	beq.n	800406c <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e000      	b.n	800406e <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 800406c:	2300      	movs	r3, #0
}
 800406e:	4618      	mov	r0, r3
 8004070:	3720      	adds	r7, #32
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	11c1808c 	.word	0x11c1808c
 800407c:	eefefffc 	.word	0xeefefffc

08004080 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d101      	bne.n	8004094 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e10f      	b.n	80042b4 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004094:	4b89      	ldr	r3, [pc, #548]	; (80042bc <HAL_RCC_ClockConfig+0x23c>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0307 	and.w	r3, r3, #7
 800409c:	683a      	ldr	r2, [r7, #0]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d91b      	bls.n	80040da <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040a2:	4b86      	ldr	r3, [pc, #536]	; (80042bc <HAL_RCC_ClockConfig+0x23c>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f023 0207 	bic.w	r2, r3, #7
 80040aa:	4984      	ldr	r1, [pc, #528]	; (80042bc <HAL_RCC_ClockConfig+0x23c>)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040b2:	f7fd ffb7 	bl	8002024 <HAL_GetTick>
 80040b6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040b8:	e008      	b.n	80040cc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80040ba:	f7fd ffb3 	bl	8002024 <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d901      	bls.n	80040cc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e0f3      	b.n	80042b4 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040cc:	4b7b      	ldr	r3, [pc, #492]	; (80042bc <HAL_RCC_ClockConfig+0x23c>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0307 	and.w	r3, r3, #7
 80040d4:	683a      	ldr	r2, [r7, #0]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d1ef      	bne.n	80040ba <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0302 	and.w	r3, r3, #2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d016      	beq.n	8004114 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	4618      	mov	r0, r3
 80040ec:	f7ff fb2a 	bl	8003744 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80040f0:	f7fd ff98 	bl	8002024 <HAL_GetTick>
 80040f4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80040f6:	e008      	b.n	800410a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80040f8:	f7fd ff94 	bl	8002024 <HAL_GetTick>
 80040fc:	4602      	mov	r2, r0
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	1ad3      	subs	r3, r2, r3
 8004102:	2b02      	cmp	r3, #2
 8004104:	d901      	bls.n	800410a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e0d4      	b.n	80042b4 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800410a:	f7ff fbf2 	bl	80038f2 <LL_RCC_IsActiveFlag_HPRE>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d0f1      	beq.n	80040f8 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800411c:	2b00      	cmp	r3, #0
 800411e:	d016      	beq.n	800414e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	695b      	ldr	r3, [r3, #20]
 8004124:	4618      	mov	r0, r3
 8004126:	f7ff fb20 	bl	800376a <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800412a:	f7fd ff7b 	bl	8002024 <HAL_GetTick>
 800412e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004130:	e008      	b.n	8004144 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004132:	f7fd ff77 	bl	8002024 <HAL_GetTick>
 8004136:	4602      	mov	r2, r0
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	2b02      	cmp	r3, #2
 800413e:	d901      	bls.n	8004144 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e0b7      	b.n	80042b4 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004144:	f7ff fbe6 	bl	8003914 <LL_RCC_IsActiveFlag_SHDHPRE>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d0f1      	beq.n	8004132 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0304 	and.w	r3, r3, #4
 8004156:	2b00      	cmp	r3, #0
 8004158:	d016      	beq.n	8004188 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	4618      	mov	r0, r3
 8004160:	f7ff fb19 	bl	8003796 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004164:	f7fd ff5e 	bl	8002024 <HAL_GetTick>
 8004168:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800416a:	e008      	b.n	800417e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800416c:	f7fd ff5a 	bl	8002024 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	2b02      	cmp	r3, #2
 8004178:	d901      	bls.n	800417e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e09a      	b.n	80042b4 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800417e:	f7ff fbdb 	bl	8003938 <LL_RCC_IsActiveFlag_PPRE1>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d0f1      	beq.n	800416c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0308 	and.w	r3, r3, #8
 8004190:	2b00      	cmp	r3, #0
 8004192:	d017      	beq.n	80041c4 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	00db      	lsls	r3, r3, #3
 800419a:	4618      	mov	r0, r3
 800419c:	f7ff fb0e 	bl	80037bc <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80041a0:	f7fd ff40 	bl	8002024 <HAL_GetTick>
 80041a4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80041a6:	e008      	b.n	80041ba <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80041a8:	f7fd ff3c 	bl	8002024 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d901      	bls.n	80041ba <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e07c      	b.n	80042b4 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80041ba:	f7ff fbce 	bl	800395a <LL_RCC_IsActiveFlag_PPRE2>
 80041be:	4603      	mov	r3, r0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d0f1      	beq.n	80041a8 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0301 	and.w	r3, r3, #1
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d043      	beq.n	8004258 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d106      	bne.n	80041e6 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80041d8:	f7ff f99b 	bl	8003512 <LL_RCC_HSE_IsReady>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d11e      	bne.n	8004220 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e066      	b.n	80042b4 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	2b03      	cmp	r3, #3
 80041ec:	d106      	bne.n	80041fc <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80041ee:	f7ff fb42 	bl	8003876 <LL_RCC_PLL_IsReady>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d113      	bne.n	8004220 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e05b      	b.n	80042b4 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d106      	bne.n	8004212 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004204:	f7ff fa35 	bl	8003672 <LL_RCC_MSI_IsReady>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d108      	bne.n	8004220 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e050      	b.n	80042b4 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004212:	f7ff f9ab 	bl	800356c <LL_RCC_HSI_IsReady>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d101      	bne.n	8004220 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e049      	b.n	80042b4 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	4618      	mov	r0, r3
 8004226:	f7ff fa6f 	bl	8003708 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800422a:	f7fd fefb 	bl	8002024 <HAL_GetTick>
 800422e:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004230:	e00a      	b.n	8004248 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004232:	f7fd fef7 	bl	8002024 <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004240:	4293      	cmp	r3, r2
 8004242:	d901      	bls.n	8004248 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	e035      	b.n	80042b4 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004248:	f7ff fa71 	bl	800372e <LL_RCC_GetSysClkSource>
 800424c:	4602      	mov	r2, r0
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	429a      	cmp	r2, r3
 8004256:	d1ec      	bne.n	8004232 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004258:	4b18      	ldr	r3, [pc, #96]	; (80042bc <HAL_RCC_ClockConfig+0x23c>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0307 	and.w	r3, r3, #7
 8004260:	683a      	ldr	r2, [r7, #0]
 8004262:	429a      	cmp	r2, r3
 8004264:	d21b      	bcs.n	800429e <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004266:	4b15      	ldr	r3, [pc, #84]	; (80042bc <HAL_RCC_ClockConfig+0x23c>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f023 0207 	bic.w	r2, r3, #7
 800426e:	4913      	ldr	r1, [pc, #76]	; (80042bc <HAL_RCC_ClockConfig+0x23c>)
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	4313      	orrs	r3, r2
 8004274:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004276:	f7fd fed5 	bl	8002024 <HAL_GetTick>
 800427a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800427c:	e008      	b.n	8004290 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800427e:	f7fd fed1 	bl	8002024 <HAL_GetTick>
 8004282:	4602      	mov	r2, r0
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	2b02      	cmp	r3, #2
 800428a:	d901      	bls.n	8004290 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e011      	b.n	80042b4 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004290:	4b0a      	ldr	r3, [pc, #40]	; (80042bc <HAL_RCC_ClockConfig+0x23c>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0307 	and.w	r3, r3, #7
 8004298:	683a      	ldr	r2, [r7, #0]
 800429a:	429a      	cmp	r2, r3
 800429c:	d1ef      	bne.n	800427e <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800429e:	f000 f8b3 	bl	8004408 <HAL_RCC_GetHCLKFreq>
 80042a2:	4603      	mov	r3, r0
 80042a4:	4a06      	ldr	r2, [pc, #24]	; (80042c0 <HAL_RCC_ClockConfig+0x240>)
 80042a6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 80042a8:	4b06      	ldr	r3, [pc, #24]	; (80042c4 <HAL_RCC_ClockConfig+0x244>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4618      	mov	r0, r3
 80042ae:	f7fd fcfd 	bl	8001cac <HAL_InitTick>
 80042b2:	4603      	mov	r3, r0
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3710      	adds	r7, #16
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	58004000 	.word	0x58004000
 80042c0:	20000000 	.word	0x20000000
 80042c4:	20000004 	.word	0x20000004

080042c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042c8:	b590      	push	{r4, r7, lr}
 80042ca:	b087      	sub	sp, #28
 80042cc:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80042ce:	2300      	movs	r3, #0
 80042d0:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80042d2:	2300      	movs	r3, #0
 80042d4:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042d6:	f7ff fa2a 	bl	800372e <LL_RCC_GetSysClkSource>
 80042da:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042dc:	f7ff fafe 	bl	80038dc <LL_RCC_PLL_GetMainSource>
 80042e0:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d005      	beq.n	80042f4 <HAL_RCC_GetSysClockFreq+0x2c>
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	2b0c      	cmp	r3, #12
 80042ec:	d139      	bne.n	8004362 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d136      	bne.n	8004362 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80042f4:	f7ff f9cd 	bl	8003692 <LL_RCC_MSI_IsEnabledRangeSelect>
 80042f8:	4603      	mov	r3, r0
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d115      	bne.n	800432a <HAL_RCC_GetSysClockFreq+0x62>
 80042fe:	f7ff f9c8 	bl	8003692 <LL_RCC_MSI_IsEnabledRangeSelect>
 8004302:	4603      	mov	r3, r0
 8004304:	2b01      	cmp	r3, #1
 8004306:	d106      	bne.n	8004316 <HAL_RCC_GetSysClockFreq+0x4e>
 8004308:	f7ff f9d3 	bl	80036b2 <LL_RCC_MSI_GetRange>
 800430c:	4603      	mov	r3, r0
 800430e:	0a1b      	lsrs	r3, r3, #8
 8004310:	f003 030f 	and.w	r3, r3, #15
 8004314:	e005      	b.n	8004322 <HAL_RCC_GetSysClockFreq+0x5a>
 8004316:	f7ff f9d7 	bl	80036c8 <LL_RCC_MSI_GetRangeAfterStandby>
 800431a:	4603      	mov	r3, r0
 800431c:	0a1b      	lsrs	r3, r3, #8
 800431e:	f003 030f 	and.w	r3, r3, #15
 8004322:	4a36      	ldr	r2, [pc, #216]	; (80043fc <HAL_RCC_GetSysClockFreq+0x134>)
 8004324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004328:	e014      	b.n	8004354 <HAL_RCC_GetSysClockFreq+0x8c>
 800432a:	f7ff f9b2 	bl	8003692 <LL_RCC_MSI_IsEnabledRangeSelect>
 800432e:	4603      	mov	r3, r0
 8004330:	2b01      	cmp	r3, #1
 8004332:	d106      	bne.n	8004342 <HAL_RCC_GetSysClockFreq+0x7a>
 8004334:	f7ff f9bd 	bl	80036b2 <LL_RCC_MSI_GetRange>
 8004338:	4603      	mov	r3, r0
 800433a:	091b      	lsrs	r3, r3, #4
 800433c:	f003 030f 	and.w	r3, r3, #15
 8004340:	e005      	b.n	800434e <HAL_RCC_GetSysClockFreq+0x86>
 8004342:	f7ff f9c1 	bl	80036c8 <LL_RCC_MSI_GetRangeAfterStandby>
 8004346:	4603      	mov	r3, r0
 8004348:	091b      	lsrs	r3, r3, #4
 800434a:	f003 030f 	and.w	r3, r3, #15
 800434e:	4a2b      	ldr	r2, [pc, #172]	; (80043fc <HAL_RCC_GetSysClockFreq+0x134>)
 8004350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004354:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d115      	bne.n	8004388 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004360:	e012      	b.n	8004388 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	2b04      	cmp	r3, #4
 8004366:	d102      	bne.n	800436e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004368:	4b25      	ldr	r3, [pc, #148]	; (8004400 <HAL_RCC_GetSysClockFreq+0x138>)
 800436a:	617b      	str	r3, [r7, #20]
 800436c:	e00c      	b.n	8004388 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	2b08      	cmp	r3, #8
 8004372:	d109      	bne.n	8004388 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004374:	f7ff f8a0 	bl	80034b8 <LL_RCC_HSE_IsEnabledDiv2>
 8004378:	4603      	mov	r3, r0
 800437a:	2b01      	cmp	r3, #1
 800437c:	d102      	bne.n	8004384 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800437e:	4b20      	ldr	r3, [pc, #128]	; (8004400 <HAL_RCC_GetSysClockFreq+0x138>)
 8004380:	617b      	str	r3, [r7, #20]
 8004382:	e001      	b.n	8004388 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004384:	4b1f      	ldr	r3, [pc, #124]	; (8004404 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004386:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004388:	f7ff f9d1 	bl	800372e <LL_RCC_GetSysClkSource>
 800438c:	4603      	mov	r3, r0
 800438e:	2b0c      	cmp	r3, #12
 8004390:	d12f      	bne.n	80043f2 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004392:	f7ff faa3 	bl	80038dc <LL_RCC_PLL_GetMainSource>
 8004396:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2b02      	cmp	r3, #2
 800439c:	d003      	beq.n	80043a6 <HAL_RCC_GetSysClockFreq+0xde>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2b03      	cmp	r3, #3
 80043a2:	d003      	beq.n	80043ac <HAL_RCC_GetSysClockFreq+0xe4>
 80043a4:	e00d      	b.n	80043c2 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80043a6:	4b16      	ldr	r3, [pc, #88]	; (8004400 <HAL_RCC_GetSysClockFreq+0x138>)
 80043a8:	60fb      	str	r3, [r7, #12]
        break;
 80043aa:	e00d      	b.n	80043c8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80043ac:	f7ff f884 	bl	80034b8 <LL_RCC_HSE_IsEnabledDiv2>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d102      	bne.n	80043bc <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80043b6:	4b12      	ldr	r3, [pc, #72]	; (8004400 <HAL_RCC_GetSysClockFreq+0x138>)
 80043b8:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80043ba:	e005      	b.n	80043c8 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80043bc:	4b11      	ldr	r3, [pc, #68]	; (8004404 <HAL_RCC_GetSysClockFreq+0x13c>)
 80043be:	60fb      	str	r3, [r7, #12]
        break;
 80043c0:	e002      	b.n	80043c8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	60fb      	str	r3, [r7, #12]
        break;
 80043c6:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80043c8:	f7ff fa66 	bl	8003898 <LL_RCC_PLL_GetN>
 80043cc:	4602      	mov	r2, r0
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	fb03 f402 	mul.w	r4, r3, r2
 80043d4:	f7ff fa77 	bl	80038c6 <LL_RCC_PLL_GetDivider>
 80043d8:	4603      	mov	r3, r0
 80043da:	091b      	lsrs	r3, r3, #4
 80043dc:	3301      	adds	r3, #1
 80043de:	fbb4 f4f3 	udiv	r4, r4, r3
 80043e2:	f7ff fa65 	bl	80038b0 <LL_RCC_PLL_GetR>
 80043e6:	4603      	mov	r3, r0
 80043e8:	0f5b      	lsrs	r3, r3, #29
 80043ea:	3301      	adds	r3, #1
 80043ec:	fbb4 f3f3 	udiv	r3, r4, r3
 80043f0:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80043f2:	697b      	ldr	r3, [r7, #20]
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	371c      	adds	r7, #28
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd90      	pop	{r4, r7, pc}
 80043fc:	0800dc30 	.word	0x0800dc30
 8004400:	00f42400 	.word	0x00f42400
 8004404:	01e84800 	.word	0x01e84800

08004408 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004408:	b598      	push	{r3, r4, r7, lr}
 800440a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800440c:	f7ff ff5c 	bl	80042c8 <HAL_RCC_GetSysClockFreq>
 8004410:	4604      	mov	r4, r0
 8004412:	f7ff f9e6 	bl	80037e2 <LL_RCC_GetAHBPrescaler>
 8004416:	4603      	mov	r3, r0
 8004418:	091b      	lsrs	r3, r3, #4
 800441a:	f003 030f 	and.w	r3, r3, #15
 800441e:	4a03      	ldr	r2, [pc, #12]	; (800442c <HAL_RCC_GetHCLKFreq+0x24>)
 8004420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004424:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004428:	4618      	mov	r0, r3
 800442a:	bd98      	pop	{r3, r4, r7, pc}
 800442c:	0800dbd0 	.word	0x0800dbd0

08004430 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004430:	b598      	push	{r3, r4, r7, lr}
 8004432:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004434:	f7ff ffe8 	bl	8004408 <HAL_RCC_GetHCLKFreq>
 8004438:	4604      	mov	r4, r0
 800443a:	f7ff f9ea 	bl	8003812 <LL_RCC_GetAPB1Prescaler>
 800443e:	4603      	mov	r3, r0
 8004440:	0a1b      	lsrs	r3, r3, #8
 8004442:	4a03      	ldr	r2, [pc, #12]	; (8004450 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004448:	fa24 f303 	lsr.w	r3, r4, r3
}
 800444c:	4618      	mov	r0, r3
 800444e:	bd98      	pop	{r3, r4, r7, pc}
 8004450:	0800dc10 	.word	0x0800dc10

08004454 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004454:	b598      	push	{r3, r4, r7, lr}
 8004456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8004458:	f7ff ffd6 	bl	8004408 <HAL_RCC_GetHCLKFreq>
 800445c:	4604      	mov	r4, r0
 800445e:	f7ff f9e3 	bl	8003828 <LL_RCC_GetAPB2Prescaler>
 8004462:	4603      	mov	r3, r0
 8004464:	0adb      	lsrs	r3, r3, #11
 8004466:	4a03      	ldr	r2, [pc, #12]	; (8004474 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004468:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800446c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8004470:	4618      	mov	r0, r3
 8004472:	bd98      	pop	{r3, r4, r7, pc}
 8004474:	0800dc10 	.word	0x0800dc10

08004478 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer to the Flash Latency variable.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004478:	b480      	push	{r7}
 800447a:	b085      	sub	sp, #20
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
  uint32_t regvalue;

  /* Check the parameters */
  if ((RCC_ClkInitStruct != NULL) && (pFLatency != NULL))
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d02d      	beq.n	80044e4 <HAL_RCC_GetClockConfig+0x6c>
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d02a      	beq.n	80044e4 <HAL_RCC_GetClockConfig+0x6c>
  {
    /* Set all possible values for the Clock type parameter --------------------*/
    RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 \
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	224f      	movs	r2, #79	; 0x4f
 8004492:	601a      	str	r2, [r3, #0]
#if defined(DUAL_CORE)
    RCC_ClkInitStruct->ClockType |= RCC_CLOCKTYPE_HCLK2;
#endif  /* DUAL_CORE */

    /* Get Clock Configuration Register */
    regvalue = RCC->CFGR;
 8004494:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	60fb      	str	r3, [r7, #12]

    /* Get the SYSCLK configuration --------------------------------------------*/
    RCC_ClkInitStruct->SYSCLKSource = (regvalue & RCC_CFGR_SWS);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f003 020c 	and.w	r2, r3, #12
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	605a      	str	r2, [r3, #4]

    /* Get the HCLK configuration ----------------------------------------------*/
    RCC_ClkInitStruct->AHBCLKDivider = (regvalue & RCC_CFGR_HPRE);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	609a      	str	r2, [r3, #8]

    /* Get the APB1 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB1CLKDivider = (regvalue & RCC_CFGR_PPRE1);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	60da      	str	r2, [r3, #12]

    /* Get the APB2 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB2CLKDivider = (regvalue & RCC_CFGR_PPRE2);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	611a      	str	r2, [r3, #16]

    /* Get Extended Clock Recovery Register */
    regvalue = RCC->EXTCFGR;
 80044c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044c8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80044cc:	60fb      	str	r3, [r7, #12]
    /* Get the AHBCLK2Divider configuration ------------------------------------*/
    RCC_ClkInitStruct->AHBCLK2Divider =  (regvalue & RCC_EXTCFGR_C2HPRE);
#endif  /* DUAL_CORE */

    /* Get the AHBCLK3Divider configuration ------------------------------------*/
    RCC_ClkInitStruct->AHBCLK3Divider = ((regvalue & RCC_EXTCFGR_SHDHPRE) << 4);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	011b      	lsls	r3, r3, #4
 80044d2:	b2da      	uxtb	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	615a      	str	r2, [r3, #20]

    /* Get the Flash Wait State (Latency) configuration ------------------------*/
    *pFLatency = __HAL_FLASH_GET_LATENCY();
 80044d8:	4b05      	ldr	r3, [pc, #20]	; (80044f0 <HAL_RCC_GetClockConfig+0x78>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 0207 	and.w	r2, r3, #7
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	601a      	str	r2, [r3, #0]
  }
}
 80044e4:	bf00      	nop
 80044e6:	3714      	adds	r7, #20
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bc80      	pop	{r7}
 80044ec:	4770      	bx	lr
 80044ee:	bf00      	nop
 80044f0:	58004000 	.word	0x58004000

080044f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80044f4:	b590      	push	{r4, r7, lr}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	091b      	lsrs	r3, r3, #4
 8004500:	f003 030f 	and.w	r3, r3, #15
 8004504:	4a10      	ldr	r2, [pc, #64]	; (8004548 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8004506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800450a:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 800450c:	f7ff f974 	bl	80037f8 <LL_RCC_GetAHB3Prescaler>
 8004510:	4603      	mov	r3, r0
 8004512:	091b      	lsrs	r3, r3, #4
 8004514:	f003 030f 	and.w	r3, r3, #15
 8004518:	4a0c      	ldr	r2, [pc, #48]	; (800454c <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800451a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800451e:	68fa      	ldr	r2, [r7, #12]
 8004520:	fbb2 f3f3 	udiv	r3, r2, r3
 8004524:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	4a09      	ldr	r2, [pc, #36]	; (8004550 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800452a:	fba2 2303 	umull	r2, r3, r2, r3
 800452e:	0c9c      	lsrs	r4, r3, #18
 8004530:	f7fe ff88 	bl	8003444 <HAL_PWREx_GetVoltageRange>
 8004534:	4603      	mov	r3, r0
 8004536:	4619      	mov	r1, r3
 8004538:	4620      	mov	r0, r4
 800453a:	f000 f80b 	bl	8004554 <RCC_SetFlashLatency>
 800453e:	4603      	mov	r3, r0
}
 8004540:	4618      	mov	r0, r3
 8004542:	3714      	adds	r7, #20
 8004544:	46bd      	mov	sp, r7
 8004546:	bd90      	pop	{r4, r7, pc}
 8004548:	0800dc30 	.word	0x0800dc30
 800454c:	0800dbd0 	.word	0x0800dbd0
 8004550:	431bde83 	.word	0x431bde83

08004554 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b08e      	sub	sp, #56	; 0x38
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800455e:	4a3a      	ldr	r2, [pc, #232]	; (8004648 <RCC_SetFlashLatency+0xf4>)
 8004560:	f107 0320 	add.w	r3, r7, #32
 8004564:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004568:	6018      	str	r0, [r3, #0]
 800456a:	3304      	adds	r3, #4
 800456c:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800456e:	4a37      	ldr	r2, [pc, #220]	; (800464c <RCC_SetFlashLatency+0xf8>)
 8004570:	f107 0318 	add.w	r3, r7, #24
 8004574:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004578:	6018      	str	r0, [r3, #0]
 800457a:	3304      	adds	r3, #4
 800457c:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800457e:	4a34      	ldr	r2, [pc, #208]	; (8004650 <RCC_SetFlashLatency+0xfc>)
 8004580:	f107 030c 	add.w	r3, r7, #12
 8004584:	ca07      	ldmia	r2, {r0, r1, r2}
 8004586:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800458a:	2300      	movs	r3, #0
 800458c:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004594:	d11b      	bne.n	80045ce <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004596:	2300      	movs	r3, #0
 8004598:	633b      	str	r3, [r7, #48]	; 0x30
 800459a:	e014      	b.n	80045c6 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800459c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800459e:	005b      	lsls	r3, r3, #1
 80045a0:	3338      	adds	r3, #56	; 0x38
 80045a2:	443b      	add	r3, r7
 80045a4:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80045a8:	461a      	mov	r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d807      	bhi.n	80045c0 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80045b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	3338      	adds	r3, #56	; 0x38
 80045b6:	443b      	add	r3, r7
 80045b8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80045bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80045be:	e021      	b.n	8004604 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80045c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c2:	3301      	adds	r3, #1
 80045c4:	633b      	str	r3, [r7, #48]	; 0x30
 80045c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d9e7      	bls.n	800459c <RCC_SetFlashLatency+0x48>
 80045cc:	e01a      	b.n	8004604 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80045ce:	2300      	movs	r3, #0
 80045d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045d2:	e014      	b.n	80045fe <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80045d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d6:	005b      	lsls	r3, r3, #1
 80045d8:	3338      	adds	r3, #56	; 0x38
 80045da:	443b      	add	r3, r7
 80045dc:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80045e0:	461a      	mov	r2, r3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d807      	bhi.n	80045f8 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80045e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	3338      	adds	r3, #56	; 0x38
 80045ee:	443b      	add	r3, r7
 80045f0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80045f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80045f6:	e005      	b.n	8004604 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80045f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045fa:	3301      	adds	r3, #1
 80045fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004600:	2b02      	cmp	r3, #2
 8004602:	d9e7      	bls.n	80045d4 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004604:	4b13      	ldr	r3, [pc, #76]	; (8004654 <RCC_SetFlashLatency+0x100>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f023 0207 	bic.w	r2, r3, #7
 800460c:	4911      	ldr	r1, [pc, #68]	; (8004654 <RCC_SetFlashLatency+0x100>)
 800460e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004610:	4313      	orrs	r3, r2
 8004612:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004614:	f7fd fd06 	bl	8002024 <HAL_GetTick>
 8004618:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800461a:	e008      	b.n	800462e <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800461c:	f7fd fd02 	bl	8002024 <HAL_GetTick>
 8004620:	4602      	mov	r2, r0
 8004622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	2b02      	cmp	r3, #2
 8004628:	d901      	bls.n	800462e <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 800462a:	2303      	movs	r3, #3
 800462c:	e007      	b.n	800463e <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800462e:	4b09      	ldr	r3, [pc, #36]	; (8004654 <RCC_SetFlashLatency+0x100>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0307 	and.w	r3, r3, #7
 8004636:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004638:	429a      	cmp	r2, r3
 800463a:	d1ef      	bne.n	800461c <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3738      	adds	r7, #56	; 0x38
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	0800dabc 	.word	0x0800dabc
 800464c:	0800dac4 	.word	0x0800dac4
 8004650:	0800dacc 	.word	0x0800dacc
 8004654:	58004000 	.word	0x58004000

08004658 <LL_RCC_LSE_IsReady>:
{
 8004658:	b480      	push	{r7}
 800465a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800465c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004664:	f003 0302 	and.w	r3, r3, #2
 8004668:	2b02      	cmp	r3, #2
 800466a:	d101      	bne.n	8004670 <LL_RCC_LSE_IsReady+0x18>
 800466c:	2301      	movs	r3, #1
 800466e:	e000      	b.n	8004672 <LL_RCC_LSE_IsReady+0x1a>
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	46bd      	mov	sp, r7
 8004676:	bc80      	pop	{r7}
 8004678:	4770      	bx	lr

0800467a <LL_RCC_SetUSARTClockSource>:
{
 800467a:	b480      	push	{r7}
 800467c:	b083      	sub	sp, #12
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8004682:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004686:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	0c1b      	lsrs	r3, r3, #16
 800468e:	43db      	mvns	r3, r3
 8004690:	401a      	ands	r2, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	b29b      	uxth	r3, r3
 8004696:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800469a:	4313      	orrs	r3, r2
 800469c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bc80      	pop	{r7}
 80046a8:	4770      	bx	lr

080046aa <LL_RCC_SetI2SClockSource>:
{
 80046aa:	b480      	push	{r7}
 80046ac:	b083      	sub	sp, #12
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80046b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80046ca:	bf00      	nop
 80046cc:	370c      	adds	r7, #12
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bc80      	pop	{r7}
 80046d2:	4770      	bx	lr

080046d4 <LL_RCC_SetLPUARTClockSource>:
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80046dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046e4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80046e8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80046f4:	bf00      	nop
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bc80      	pop	{r7}
 80046fc:	4770      	bx	lr

080046fe <LL_RCC_SetI2CClockSource>:
{
 80046fe:	b480      	push	{r7}
 8004700:	b083      	sub	sp, #12
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004706:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800470a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	091b      	lsrs	r3, r3, #4
 8004712:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004716:	43db      	mvns	r3, r3
 8004718:	401a      	ands	r2, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	011b      	lsls	r3, r3, #4
 800471e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004722:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004726:	4313      	orrs	r3, r2
 8004728:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800472c:	bf00      	nop
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	bc80      	pop	{r7}
 8004734:	4770      	bx	lr

08004736 <LL_RCC_SetLPTIMClockSource>:
{
 8004736:	b480      	push	{r7}
 8004738:	b083      	sub	sp, #12
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800473e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004742:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	0c1b      	lsrs	r3, r3, #16
 800474a:	041b      	lsls	r3, r3, #16
 800474c:	43db      	mvns	r3, r3
 800474e:	401a      	ands	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	041b      	lsls	r3, r3, #16
 8004754:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004758:	4313      	orrs	r3, r2
 800475a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800475e:	bf00      	nop
 8004760:	370c      	adds	r7, #12
 8004762:	46bd      	mov	sp, r7
 8004764:	bc80      	pop	{r7}
 8004766:	4770      	bx	lr

08004768 <LL_RCC_SetRNGClockSource>:
{
 8004768:	b480      	push	{r7}
 800476a:	b083      	sub	sp, #12
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8004770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004778:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800477c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4313      	orrs	r3, r2
 8004784:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004788:	bf00      	nop
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	bc80      	pop	{r7}
 8004790:	4770      	bx	lr

08004792 <LL_RCC_SetADCClockSource>:
{
 8004792:	b480      	push	{r7}
 8004794:	b083      	sub	sp, #12
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800479a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800479e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80047a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80047b2:	bf00      	nop
 80047b4:	370c      	adds	r7, #12
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bc80      	pop	{r7}
 80047ba:	4770      	bx	lr

080047bc <LL_RCC_SetRTCClockSource>:
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80047c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80047dc:	bf00      	nop
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bc80      	pop	{r7}
 80047e4:	4770      	bx	lr

080047e6 <LL_RCC_GetRTCClockSource>:
{
 80047e6:	b480      	push	{r7}
 80047e8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80047ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bc80      	pop	{r7}
 80047fc:	4770      	bx	lr

080047fe <LL_RCC_ForceBackupDomainReset>:
{
 80047fe:	b480      	push	{r7}
 8004800:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004802:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800480a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800480e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004812:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004816:	bf00      	nop
 8004818:	46bd      	mov	sp, r7
 800481a:	bc80      	pop	{r7}
 800481c:	4770      	bx	lr

0800481e <LL_RCC_ReleaseBackupDomainReset>:
{
 800481e:	b480      	push	{r7}
 8004820:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8004822:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800482a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800482e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004832:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8004836:	bf00      	nop
 8004838:	46bd      	mov	sp, r7
 800483a:	bc80      	pop	{r7}
 800483c:	4770      	bx	lr
	...

08004840 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b086      	sub	sp, #24
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8004848:	2300      	movs	r3, #0
 800484a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 800484c:	2300      	movs	r3, #0
 800484e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8004850:	2300      	movs	r3, #0
 8004852:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d058      	beq.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8004860:	f7fe fde2 	bl	8003428 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004864:	f7fd fbde 	bl	8002024 <HAL_GetTick>
 8004868:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800486a:	e009      	b.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800486c:	f7fd fbda 	bl	8002024 <HAL_GetTick>
 8004870:	4602      	mov	r2, r0
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	2b02      	cmp	r3, #2
 8004878:	d902      	bls.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 800487a:	2303      	movs	r3, #3
 800487c:	74fb      	strb	r3, [r7, #19]
        break;
 800487e:	e006      	b.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8004880:	4b7b      	ldr	r3, [pc, #492]	; (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004888:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800488c:	d1ee      	bne.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 800488e:	7cfb      	ldrb	r3, [r7, #19]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d13c      	bne.n	800490e <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8004894:	f7ff ffa7 	bl	80047e6 <LL_RCC_GetRTCClockSource>
 8004898:	4602      	mov	r2, r0
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800489e:	429a      	cmp	r2, r3
 80048a0:	d00f      	beq.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80048a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048ae:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80048b0:	f7ff ffa5 	bl	80047fe <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80048b4:	f7ff ffb3 	bl	800481e <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80048b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	f003 0302 	and.w	r3, r3, #2
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d014      	beq.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048cc:	f7fd fbaa 	bl	8002024 <HAL_GetTick>
 80048d0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80048d2:	e00b      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048d4:	f7fd fba6 	bl	8002024 <HAL_GetTick>
 80048d8:	4602      	mov	r2, r0
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	1ad3      	subs	r3, r2, r3
 80048de:	f241 3288 	movw	r2, #5000	; 0x1388
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d902      	bls.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80048e6:	2303      	movs	r3, #3
 80048e8:	74fb      	strb	r3, [r7, #19]
            break;
 80048ea:	e004      	b.n	80048f6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80048ec:	f7ff feb4 	bl	8004658 <LL_RCC_LSE_IsReady>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d1ee      	bne.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80048f6:	7cfb      	ldrb	r3, [r7, #19]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d105      	bne.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004900:	4618      	mov	r0, r3
 8004902:	f7ff ff5b 	bl	80047bc <LL_RCC_SetRTCClockSource>
 8004906:	e004      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004908:	7cfb      	ldrb	r3, [r7, #19]
 800490a:	74bb      	strb	r3, [r7, #18]
 800490c:	e001      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800490e:	7cfb      	ldrb	r3, [r7, #19]
 8004910:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f003 0301 	and.w	r3, r3, #1
 800491a:	2b00      	cmp	r3, #0
 800491c:	d004      	beq.n	8004928 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	4618      	mov	r0, r3
 8004924:	f7ff fea9 	bl	800467a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0302 	and.w	r3, r3, #2
 8004930:	2b00      	cmp	r3, #0
 8004932:	d004      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	4618      	mov	r0, r3
 800493a:	f7ff fe9e 	bl	800467a <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0320 	and.w	r3, r3, #32
 8004946:	2b00      	cmp	r3, #0
 8004948:	d004      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	4618      	mov	r0, r3
 8004950:	f7ff fec0 	bl	80046d4 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800495c:	2b00      	cmp	r3, #0
 800495e:	d004      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a1b      	ldr	r3, [r3, #32]
 8004964:	4618      	mov	r0, r3
 8004966:	f7ff fee6 	bl	8004736 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004972:	2b00      	cmp	r3, #0
 8004974:	d004      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497a:	4618      	mov	r0, r3
 800497c:	f7ff fedb 	bl	8004736 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004988:	2b00      	cmp	r3, #0
 800498a:	d004      	beq.n	8004996 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004990:	4618      	mov	r0, r3
 8004992:	f7ff fed0 	bl	8004736 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d004      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	695b      	ldr	r3, [r3, #20]
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7ff fea9 	bl	80046fe <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d004      	beq.n	80049c2 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	4618      	mov	r0, r3
 80049be:	f7ff fe9e 	bl	80046fe <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d004      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	69db      	ldr	r3, [r3, #28]
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7ff fe93 	bl	80046fe <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0310 	and.w	r3, r3, #16
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d011      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	4618      	mov	r0, r3
 80049ea:	f7ff fe5e 	bl	80046aa <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049f6:	d107      	bne.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80049f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a06:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d010      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f7ff fea5 	bl	8004768 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d107      	bne.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8004a26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a34:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d011      	beq.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7ff fea3 	bl	8004792 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a54:	d107      	bne.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004a56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004a60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a64:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8004a66:	7cbb      	ldrb	r3, [r7, #18]
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3718      	adds	r7, #24
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	58000400 	.word	0x58000400

08004a74 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d071      	beq.n	8004b6a <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d106      	bne.n	8004aa0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f7fd f866 	bl	8001b6c <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2202      	movs	r2, #2
 8004aa4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004aa8:	4b32      	ldr	r3, [pc, #200]	; (8004b74 <HAL_RTC_Init+0x100>)
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	f003 0310 	and.w	r3, r3, #16
 8004ab0:	2b10      	cmp	r3, #16
 8004ab2:	d051      	beq.n	8004b58 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ab4:	4b2f      	ldr	r3, [pc, #188]	; (8004b74 <HAL_RTC_Init+0x100>)
 8004ab6:	22ca      	movs	r2, #202	; 0xca
 8004ab8:	625a      	str	r2, [r3, #36]	; 0x24
 8004aba:	4b2e      	ldr	r3, [pc, #184]	; (8004b74 <HAL_RTC_Init+0x100>)
 8004abc:	2253      	movs	r2, #83	; 0x53
 8004abe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f000 fb53 	bl	800516c <RTC_EnterInitMode>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8004aca:	7bfb      	ldrb	r3, [r7, #15]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d13f      	bne.n	8004b50 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8004ad0:	4b28      	ldr	r3, [pc, #160]	; (8004b74 <HAL_RTC_Init+0x100>)
 8004ad2:	699b      	ldr	r3, [r3, #24]
 8004ad4:	4a27      	ldr	r2, [pc, #156]	; (8004b74 <HAL_RTC_Init+0x100>)
 8004ad6:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8004ada:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ade:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8004ae0:	4b24      	ldr	r3, [pc, #144]	; (8004b74 <HAL_RTC_Init+0x100>)
 8004ae2:	699a      	ldr	r2, [r3, #24]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6859      	ldr	r1, [r3, #4]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	691b      	ldr	r3, [r3, #16]
 8004aec:	4319      	orrs	r1, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	699b      	ldr	r3, [r3, #24]
 8004af2:	430b      	orrs	r3, r1
 8004af4:	491f      	ldr	r1, [pc, #124]	; (8004b74 <HAL_RTC_Init+0x100>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	68da      	ldr	r2, [r3, #12]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	041b      	lsls	r3, r3, #16
 8004b04:	491b      	ldr	r1, [pc, #108]	; (8004b74 <HAL_RTC_Init+0x100>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8004b0a:	4b1a      	ldr	r3, [pc, #104]	; (8004b74 <HAL_RTC_Init+0x100>)
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b1a:	430b      	orrs	r3, r1
 8004b1c:	4915      	ldr	r1, [pc, #84]	; (8004b74 <HAL_RTC_Init+0x100>)
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 fb56 	bl	80051d4 <RTC_ExitInitMode>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 8004b2c:	7bfb      	ldrb	r3, [r7, #15]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d10e      	bne.n	8004b50 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 8004b32:	4b10      	ldr	r3, [pc, #64]	; (8004b74 <HAL_RTC_Init+0x100>)
 8004b34:	699b      	ldr	r3, [r3, #24]
 8004b36:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a19      	ldr	r1, [r3, #32]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	69db      	ldr	r3, [r3, #28]
 8004b42:	4319      	orrs	r1, r3
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	695b      	ldr	r3, [r3, #20]
 8004b48:	430b      	orrs	r3, r1
 8004b4a:	490a      	ldr	r1, [pc, #40]	; (8004b74 <HAL_RTC_Init+0x100>)
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b50:	4b08      	ldr	r3, [pc, #32]	; (8004b74 <HAL_RTC_Init+0x100>)
 8004b52:	22ff      	movs	r2, #255	; 0xff
 8004b54:	625a      	str	r2, [r3, #36]	; 0x24
 8004b56:	e001      	b.n	8004b5c <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8004b5c:	7bfb      	ldrb	r3, [r7, #15]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d103      	bne.n	8004b6a <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8004b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3710      	adds	r7, #16
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}
 8004b74:	40002800 	.word	0x40002800

08004b78 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004b78:	b590      	push	{r4, r7, lr}
 8004b7a:	b087      	sub	sp, #28
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d101      	bne.n	8004b92 <HAL_RTC_SetTime+0x1a>
 8004b8e:	2302      	movs	r3, #2
 8004b90:	e088      	b.n	8004ca4 <HAL_RTC_SetTime+0x12c>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2201      	movs	r2, #1
 8004b96:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2202      	movs	r2, #2
 8004b9e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004ba2:	4b42      	ldr	r3, [pc, #264]	; (8004cac <HAL_RTC_SetTime+0x134>)
 8004ba4:	22ca      	movs	r2, #202	; 0xca
 8004ba6:	625a      	str	r2, [r3, #36]	; 0x24
 8004ba8:	4b40      	ldr	r3, [pc, #256]	; (8004cac <HAL_RTC_SetTime+0x134>)
 8004baa:	2253      	movs	r2, #83	; 0x53
 8004bac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004bae:	68f8      	ldr	r0, [r7, #12]
 8004bb0:	f000 fadc 	bl	800516c <RTC_EnterInitMode>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004bb8:	7cfb      	ldrb	r3, [r7, #19]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d15e      	bne.n	8004c7c <HAL_RTC_SetTime+0x104>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8004bbe:	4b3b      	ldr	r3, [pc, #236]	; (8004cac <HAL_RTC_SetTime+0x134>)
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bca:	d057      	beq.n	8004c7c <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d125      	bne.n	8004c1e <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8004bd2:	4b36      	ldr	r3, [pc, #216]	; (8004cac <HAL_RTC_SetTime+0x134>)
 8004bd4:	699b      	ldr	r3, [r3, #24]
 8004bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d102      	bne.n	8004be4 <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	2200      	movs	r2, #0
 8004be2:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	4618      	mov	r0, r3
 8004bea:	f000 fb31 	bl	8005250 <RTC_ByteToBcd2>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	785b      	ldrb	r3, [r3, #1]
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f000 fb2a 	bl	8005250 <RTC_ByteToBcd2>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004c00:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	789b      	ldrb	r3, [r3, #2]
 8004c06:	4618      	mov	r0, r3
 8004c08:	f000 fb22 	bl	8005250 <RTC_ByteToBcd2>
 8004c0c:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004c0e:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	78db      	ldrb	r3, [r3, #3]
 8004c16:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	617b      	str	r3, [r7, #20]
 8004c1c:	e017      	b.n	8004c4e <HAL_RTC_SetTime+0xd6>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8004c1e:	4b23      	ldr	r3, [pc, #140]	; (8004cac <HAL_RTC_SetTime+0x134>)
 8004c20:	699b      	ldr	r3, [r3, #24]
 8004c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d102      	bne.n	8004c30 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	785b      	ldrb	r3, [r3, #1]
 8004c3a:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004c3c:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8004c3e:	68ba      	ldr	r2, [r7, #8]
 8004c40:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004c42:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	78db      	ldrb	r3, [r3, #3]
 8004c48:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8004c4e:	4a17      	ldr	r2, [pc, #92]	; (8004cac <HAL_RTC_SetTime+0x134>)
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004c56:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004c5a:	6013      	str	r3, [r2, #0]
      
      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8004c5c:	4b13      	ldr	r3, [pc, #76]	; (8004cac <HAL_RTC_SetTime+0x134>)
 8004c5e:	699b      	ldr	r3, [r3, #24]
 8004c60:	4a12      	ldr	r2, [pc, #72]	; (8004cac <HAL_RTC_SetTime+0x134>)
 8004c62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c66:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8004c68:	4b10      	ldr	r3, [pc, #64]	; (8004cac <HAL_RTC_SetTime+0x134>)
 8004c6a:	699a      	ldr	r2, [r3, #24]
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	68d9      	ldr	r1, [r3, #12]
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	430b      	orrs	r3, r1
 8004c76:	490d      	ldr	r1, [pc, #52]	; (8004cac <HAL_RTC_SetTime+0x134>)
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	f000 faa9 	bl	80051d4 <RTC_ExitInitMode>
 8004c82:	4603      	mov	r3, r0
 8004c84:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004c86:	4b09      	ldr	r3, [pc, #36]	; (8004cac <HAL_RTC_SetTime+0x134>)
 8004c88:	22ff      	movs	r2, #255	; 0xff
 8004c8a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004c8c:	7cfb      	ldrb	r3, [r7, #19]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d103      	bne.n	8004c9a <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2201      	movs	r2, #1
 8004c96:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8004ca2:	7cfb      	ldrb	r3, [r7, #19]
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	371c      	adds	r7, #28
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd90      	pop	{r4, r7, pc}
 8004cac:	40002800 	.word	0x40002800

08004cb0 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b086      	sub	sp, #24
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg;

  UNUSED(hrtc);
  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 8004cbc:	4b2c      	ldr	r3, [pc, #176]	; (8004d70 <HAL_RTC_GetTime+0xc0>)
 8004cbe:	689a      	ldr	r2, [r3, #8]
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	605a      	str	r2, [r3, #4]

  if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8004cc4:	4b2a      	ldr	r3, [pc, #168]	; (8004d70 <HAL_RTC_GetTime+0xc0>)
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ccc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cd0:	d049      	beq.n	8004d66 <HAL_RTC_GetTime+0xb6>
  {
    /* Check the parameters */
    assert_param(IS_RTC_FORMAT(Format));

    /* Get SecondFraction structure field from the corresponding register field*/
    sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 8004cd2:	4b27      	ldr	r3, [pc, #156]	; (8004d70 <HAL_RTC_GetTime+0xc0>)
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	609a      	str	r2, [r3, #8]

    /* Get the TR register */
    tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 8004cde:	4b24      	ldr	r3, [pc, #144]	; (8004d70 <HAL_RTC_GetTime+0xc0>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8004ce6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004cea:	617b      	str	r3, [r7, #20]

    /* Fill the structure fields with the read parameters */
    sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	0c1b      	lsrs	r3, r3, #16
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cf6:	b2da      	uxtb	r2, r3
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	0a1b      	lsrs	r3, r3, #8
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d06:	b2da      	uxtb	r2, r3
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d14:	b2da      	uxtb	r2, r3
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	709a      	strb	r2, [r3, #2]
    sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	0d9b      	lsrs	r3, r3, #22
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	f003 0301 	and.w	r3, r3, #1
 8004d24:	b2da      	uxtb	r2, r3
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	70da      	strb	r2, [r3, #3]

    /* Check the input parameters format */
    if (Format == RTC_FORMAT_BIN)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d11a      	bne.n	8004d66 <HAL_RTC_GetTime+0xb6>
    {
      /* Convert the time structure parameters to Binary format */
      sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	4618      	mov	r0, r3
 8004d36:	f000 faaa 	bl	800528e <RTC_Bcd2ToByte>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	701a      	strb	r2, [r3, #0]
      sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	785b      	ldrb	r3, [r3, #1]
 8004d46:	4618      	mov	r0, r3
 8004d48:	f000 faa1 	bl	800528e <RTC_Bcd2ToByte>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	461a      	mov	r2, r3
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	705a      	strb	r2, [r3, #1]
      sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	789b      	ldrb	r3, [r3, #2]
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f000 fa98 	bl	800528e <RTC_Bcd2ToByte>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	461a      	mov	r2, r3
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	709a      	strb	r2, [r3, #2]
    }
  }

  return HAL_OK;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3718      	adds	r7, #24
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	40002800 	.word	0x40002800

08004d74 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004d74:	b590      	push	{r4, r7, lr}
 8004d76:	b087      	sub	sp, #28
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d101      	bne.n	8004d8e <HAL_RTC_SetDate+0x1a>
 8004d8a:	2302      	movs	r3, #2
 8004d8c:	e071      	b.n	8004e72 <HAL_RTC_SetDate+0xfe>
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2201      	movs	r2, #1
 8004d92:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2202      	movs	r2, #2
 8004d9a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d10e      	bne.n	8004dc2 <HAL_RTC_SetDate+0x4e>
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	785b      	ldrb	r3, [r3, #1]
 8004da8:	f003 0310 	and.w	r3, r3, #16
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d008      	beq.n	8004dc2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	785b      	ldrb	r3, [r3, #1]
 8004db4:	f023 0310 	bic.w	r3, r3, #16
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	330a      	adds	r3, #10
 8004dbc:	b2da      	uxtb	r2, r3
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d11c      	bne.n	8004e02 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	78db      	ldrb	r3, [r3, #3]
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f000 fa3f 	bl	8005250 <RTC_ByteToBcd2>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	785b      	ldrb	r3, [r3, #1]
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f000 fa38 	bl	8005250 <RTC_ByteToBcd2>
 8004de0:	4603      	mov	r3, r0
 8004de2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004de4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	789b      	ldrb	r3, [r3, #2]
 8004dea:	4618      	mov	r0, r3
 8004dec:	f000 fa30 	bl	8005250 <RTC_ByteToBcd2>
 8004df0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004df2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	781b      	ldrb	r3, [r3, #0]
 8004dfa:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	617b      	str	r3, [r7, #20]
 8004e00:	e00e      	b.n	8004e20 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	78db      	ldrb	r3, [r3, #3]
 8004e06:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	785b      	ldrb	r3, [r3, #1]
 8004e0c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004e0e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8004e10:	68ba      	ldr	r2, [r7, #8]
 8004e12:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8004e14:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e20:	4b16      	ldr	r3, [pc, #88]	; (8004e7c <HAL_RTC_SetDate+0x108>)
 8004e22:	22ca      	movs	r2, #202	; 0xca
 8004e24:	625a      	str	r2, [r3, #36]	; 0x24
 8004e26:	4b15      	ldr	r3, [pc, #84]	; (8004e7c <HAL_RTC_SetDate+0x108>)
 8004e28:	2253      	movs	r2, #83	; 0x53
 8004e2a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004e2c:	68f8      	ldr	r0, [r7, #12]
 8004e2e:	f000 f99d 	bl	800516c <RTC_EnterInitMode>
 8004e32:	4603      	mov	r3, r0
 8004e34:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004e36:	7cfb      	ldrb	r3, [r7, #19]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d10b      	bne.n	8004e54 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8004e3c:	4a0f      	ldr	r2, [pc, #60]	; (8004e7c <HAL_RTC_SetDate+0x108>)
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004e44:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004e48:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004e4a:	68f8      	ldr	r0, [r7, #12]
 8004e4c:	f000 f9c2 	bl	80051d4 <RTC_ExitInitMode>
 8004e50:	4603      	mov	r3, r0
 8004e52:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e54:	4b09      	ldr	r3, [pc, #36]	; (8004e7c <HAL_RTC_SetDate+0x108>)
 8004e56:	22ff      	movs	r2, #255	; 0xff
 8004e58:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8004e5a:	7cfb      	ldrb	r3, [r7, #19]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d103      	bne.n	8004e68 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8004e70:	7cfb      	ldrb	r3, [r7, #19]
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	371c      	adds	r7, #28
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd90      	pop	{r4, r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	40002800 	.word	0x40002800

08004e80 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b086      	sub	sp, #24
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 8004e8c:	4b22      	ldr	r3, [pc, #136]	; (8004f18 <HAL_RTC_GetDate+0x98>)
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004e94:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004e98:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	0c1b      	lsrs	r3, r3, #16
 8004e9e:	b2da      	uxtb	r2, r3
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	0a1b      	lsrs	r3, r3, #8
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	f003 031f 	and.w	r3, r3, #31
 8004eae:	b2da      	uxtb	r2, r3
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ebc:	b2da      	uxtb	r2, r3
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	0b5b      	lsrs	r3, r3, #13
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	f003 0307 	and.w	r3, r3, #7
 8004ecc:	b2da      	uxtb	r2, r3
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d11a      	bne.n	8004f0e <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	78db      	ldrb	r3, [r3, #3]
 8004edc:	4618      	mov	r0, r3
 8004ede:	f000 f9d6 	bl	800528e <RTC_Bcd2ToByte>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	785b      	ldrb	r3, [r3, #1]
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f000 f9cd 	bl	800528e <RTC_Bcd2ToByte>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	789b      	ldrb	r3, [r3, #2]
 8004f00:	4618      	mov	r0, r3
 8004f02:	f000 f9c4 	bl	800528e <RTC_Bcd2ToByte>
 8004f06:	4603      	mov	r3, r0
 8004f08:	461a      	mov	r2, r3
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004f0e:	2300      	movs	r3, #0
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3718      	adds	r7, #24
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	40002800 	.word	0x40002800

08004f1c <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8004f1c:	b590      	push	{r4, r7, lr}
 8004f1e:	b087      	sub	sp, #28
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  __HAL_LOCK(hrtc);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d101      	bne.n	8004f3a <HAL_RTC_SetAlarm+0x1e>
 8004f36:	2302      	movs	r3, #2
 8004f38:	e0eb      	b.n	8005112 <HAL_RTC_SetAlarm+0x1f6>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2202      	movs	r2, #2
 8004f46:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8004f4a:	4b74      	ldr	r3, [pc, #464]	; (800511c <HAL_RTC_SetAlarm+0x200>)
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f52:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f5a:	d06a      	beq.n	8005032 <HAL_RTC_SetAlarm+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d13a      	bne.n	8004fd8 <HAL_RTC_SetAlarm+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8004f62:	4b6e      	ldr	r3, [pc, #440]	; (800511c <HAL_RTC_SetAlarm+0x200>)
 8004f64:	699b      	ldr	r3, [r3, #24]
 8004f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d102      	bne.n	8004f74 <HAL_RTC_SetAlarm+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	2200      	movs	r2, #0
 8004f72:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	695b      	ldr	r3, [r3, #20]
 8004f78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	4618      	mov	r0, r3
 8004f82:	f000 f965 	bl	8005250 <RTC_ByteToBcd2>
 8004f86:	4603      	mov	r3, r0
 8004f88:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	785b      	ldrb	r3, [r3, #1]
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f000 f95e 	bl	8005250 <RTC_ByteToBcd2>
 8004f94:	4603      	mov	r3, r0
 8004f96:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004f98:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	789b      	ldrb	r3, [r3, #2]
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f000 f956 	bl	8005250 <RTC_ByteToBcd2>
 8004fa4:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8004fa6:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	78db      	ldrb	r3, [r3, #3]
 8004fae:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004fb0:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f000 f948 	bl	8005250 <RTC_ByteToBcd2>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8004fc4:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8004fcc:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	617b      	str	r3, [r7, #20]
 8004fd6:	e02c      	b.n	8005032 <HAL_RTC_SetAlarm+0x116>
    }
    else /* format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	695b      	ldr	r3, [r3, #20]
 8004fdc:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8004fe0:	d00d      	beq.n	8004ffe <HAL_RTC_SetAlarm+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004fea:	d008      	beq.n	8004ffe <HAL_RTC_SetAlarm+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8004fec:	4b4b      	ldr	r3, [pc, #300]	; (800511c <HAL_RTC_SetAlarm+0x200>)
 8004fee:	699b      	ldr	r3, [r3, #24]
 8004ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d102      	bne.n	8004ffe <HAL_RTC_SetAlarm+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	785b      	ldrb	r3, [r3, #1]
 8005008:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800500a:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800500c:	68ba      	ldr	r2, [r7, #8]
 800500e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005010:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	78db      	ldrb	r3, [r3, #3]
 8005016:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8005018:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005020:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8005022:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8005028:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800502e:	4313      	orrs	r3, r2
 8005030:	617b      	str	r3, [r7, #20]
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005032:	4b3a      	ldr	r3, [pc, #232]	; (800511c <HAL_RTC_SetAlarm+0x200>)
 8005034:	22ca      	movs	r2, #202	; 0xca
 8005036:	625a      	str	r2, [r3, #36]	; 0x24
 8005038:	4b38      	ldr	r3, [pc, #224]	; (800511c <HAL_RTC_SetAlarm+0x200>)
 800503a:	2253      	movs	r2, #83	; 0x53
 800503c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005042:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005046:	d12c      	bne.n	80050a2 <HAL_RTC_SetAlarm+0x186>
  {
    /* Disable the Alarm A interrupt */
    /* In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, (RTC_CR_ALRAE | RTC_CR_ALRAIE));
 8005048:	4b34      	ldr	r3, [pc, #208]	; (800511c <HAL_RTC_SetAlarm+0x200>)
 800504a:	699b      	ldr	r3, [r3, #24]
 800504c:	4a33      	ldr	r2, [pc, #204]	; (800511c <HAL_RTC_SetAlarm+0x200>)
 800504e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005052:	6193      	str	r3, [r2, #24]

    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8005054:	4b31      	ldr	r3, [pc, #196]	; (800511c <HAL_RTC_SetAlarm+0x200>)
 8005056:	2201      	movs	r2, #1
 8005058:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005060:	d107      	bne.n	8005072 <HAL_RTC_SetAlarm+0x156>
    {
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	699a      	ldr	r2, [r3, #24]
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	69db      	ldr	r3, [r3, #28]
 800506a:	492c      	ldr	r1, [pc, #176]	; (800511c <HAL_RTC_SetAlarm+0x200>)
 800506c:	4313      	orrs	r3, r2
 800506e:	644b      	str	r3, [r1, #68]	; 0x44
 8005070:	e006      	b.n	8005080 <HAL_RTC_SetAlarm+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8005072:	4a2a      	ldr	r2, [pc, #168]	; (800511c <HAL_RTC_SetAlarm+0x200>)
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8005078:	4a28      	ldr	r2, [pc, #160]	; (800511c <HAL_RTC_SetAlarm+0x200>)
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	699b      	ldr	r3, [r3, #24]
 800507e:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8005080:	4a26      	ldr	r2, [pc, #152]	; (800511c <HAL_RTC_SetAlarm+0x200>)
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800508c:	f043 0201 	orr.w	r2, r3, #1
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm state: Enable Alarm */
    SET_BIT(RTC->CR, RTC_CR_ALRAE);
 8005094:	4b21      	ldr	r3, [pc, #132]	; (800511c <HAL_RTC_SetAlarm+0x200>)
 8005096:	699b      	ldr	r3, [r3, #24]
 8005098:	4a20      	ldr	r2, [pc, #128]	; (800511c <HAL_RTC_SetAlarm+0x200>)
 800509a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800509e:	6193      	str	r3, [r2, #24]
 80050a0:	e02b      	b.n	80050fa <HAL_RTC_SetAlarm+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    /* In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, (RTC_CR_ALRBE | RTC_CR_ALRBIE));
 80050a2:	4b1e      	ldr	r3, [pc, #120]	; (800511c <HAL_RTC_SetAlarm+0x200>)
 80050a4:	699b      	ldr	r3, [r3, #24]
 80050a6:	4a1d      	ldr	r2, [pc, #116]	; (800511c <HAL_RTC_SetAlarm+0x200>)
 80050a8:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 80050ac:	6193      	str	r3, [r2, #24]

    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80050ae:	4b1b      	ldr	r3, [pc, #108]	; (800511c <HAL_RTC_SetAlarm+0x200>)
 80050b0:	2202      	movs	r2, #2
 80050b2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050ba:	d107      	bne.n	80050cc <HAL_RTC_SetAlarm+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	699a      	ldr	r2, [r3, #24]
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	69db      	ldr	r3, [r3, #28]
 80050c4:	4915      	ldr	r1, [pc, #84]	; (800511c <HAL_RTC_SetAlarm+0x200>)
 80050c6:	4313      	orrs	r3, r2
 80050c8:	64cb      	str	r3, [r1, #76]	; 0x4c
 80050ca:	e006      	b.n	80050da <HAL_RTC_SetAlarm+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 80050cc:	4a13      	ldr	r2, [pc, #76]	; (800511c <HAL_RTC_SetAlarm+0x200>)
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 80050d2:	4a12      	ldr	r2, [pc, #72]	; (800511c <HAL_RTC_SetAlarm+0x200>)
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	699b      	ldr	r3, [r3, #24]
 80050d8:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 80050da:	4a10      	ldr	r2, [pc, #64]	; (800511c <HAL_RTC_SetAlarm+0x200>)
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e6:	f043 0202 	orr.w	r2, r3, #2
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm state: Enable Alarm */
    SET_BIT(RTC->CR, RTC_CR_ALRBE);
 80050ee:	4b0b      	ldr	r3, [pc, #44]	; (800511c <HAL_RTC_SetAlarm+0x200>)
 80050f0:	699b      	ldr	r3, [r3, #24]
 80050f2:	4a0a      	ldr	r2, [pc, #40]	; (800511c <HAL_RTC_SetAlarm+0x200>)
 80050f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80050f8:	6193      	str	r3, [r2, #24]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050fa:	4b08      	ldr	r3, [pc, #32]	; (800511c <HAL_RTC_SetAlarm+0x200>)
 80050fc:	22ff      	movs	r2, #255	; 0xff
 80050fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2200      	movs	r2, #0
 800510c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	371c      	adds	r7, #28
 8005116:	46bd      	mov	sp, r7
 8005118:	bd90      	pop	{r4, r7, pc}
 800511a:	bf00      	nop
 800511c:	40002800 	.word	0x40002800

08005120 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8005128:	4b0f      	ldr	r3, [pc, #60]	; (8005168 <HAL_RTC_WaitForSynchro+0x48>)
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	4a0e      	ldr	r2, [pc, #56]	; (8005168 <HAL_RTC_WaitForSynchro+0x48>)
 800512e:	f023 0320 	bic.w	r3, r3, #32
 8005132:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8005134:	f7fc ff76 	bl	8002024 <HAL_GetTick>
 8005138:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800513a:	e009      	b.n	8005150 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800513c:	f7fc ff72 	bl	8002024 <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800514a:	d901      	bls.n	8005150 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800514c:	2303      	movs	r3, #3
 800514e:	e006      	b.n	800515e <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8005150:	4b05      	ldr	r3, [pc, #20]	; (8005168 <HAL_RTC_WaitForSynchro+0x48>)
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	f003 0320 	and.w	r3, r3, #32
 8005158:	2b00      	cmp	r3, #0
 800515a:	d0ef      	beq.n	800513c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3710      	adds	r7, #16
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	40002800 	.word	0x40002800

0800516c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b084      	sub	sp, #16
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005174:	2300      	movs	r3, #0
 8005176:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8005178:	4b15      	ldr	r3, [pc, #84]	; (80051d0 <RTC_EnterInitMode+0x64>)
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005180:	2b00      	cmp	r3, #0
 8005182:	d120      	bne.n	80051c6 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005184:	4b12      	ldr	r3, [pc, #72]	; (80051d0 <RTC_EnterInitMode+0x64>)
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	4a11      	ldr	r2, [pc, #68]	; (80051d0 <RTC_EnterInitMode+0x64>)
 800518a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800518e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8005190:	f7fc ff48 	bl	8002024 <HAL_GetTick>
 8005194:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005196:	e00d      	b.n	80051b4 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005198:	f7fc ff44 	bl	8002024 <HAL_GetTick>
 800519c:	4602      	mov	r2, r0
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80051a6:	d905      	bls.n	80051b4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2203      	movs	r2, #3
 80051b0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80051b4:	4b06      	ldr	r3, [pc, #24]	; (80051d0 <RTC_EnterInitMode+0x64>)
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d102      	bne.n	80051c6 <RTC_EnterInitMode+0x5a>
 80051c0:	7bfb      	ldrb	r3, [r7, #15]
 80051c2:	2b03      	cmp	r3, #3
 80051c4:	d1e8      	bne.n	8005198 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 80051c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3710      	adds	r7, #16
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	40002800 	.word	0x40002800

080051d4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051dc:	2300      	movs	r3, #0
 80051de:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80051e0:	4b1a      	ldr	r3, [pc, #104]	; (800524c <RTC_ExitInitMode+0x78>)
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	4a19      	ldr	r2, [pc, #100]	; (800524c <RTC_ExitInitMode+0x78>)
 80051e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051ea:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80051ec:	4b17      	ldr	r3, [pc, #92]	; (800524c <RTC_ExitInitMode+0x78>)
 80051ee:	699b      	ldr	r3, [r3, #24]
 80051f0:	f003 0320 	and.w	r3, r3, #32
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d10c      	bne.n	8005212 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f7ff ff91 	bl	8005120 <HAL_RTC_WaitForSynchro>
 80051fe:	4603      	mov	r3, r0
 8005200:	2b00      	cmp	r3, #0
 8005202:	d01e      	beq.n	8005242 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2203      	movs	r2, #3
 8005208:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800520c:	2303      	movs	r3, #3
 800520e:	73fb      	strb	r3, [r7, #15]
 8005210:	e017      	b.n	8005242 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005212:	4b0e      	ldr	r3, [pc, #56]	; (800524c <RTC_ExitInitMode+0x78>)
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	4a0d      	ldr	r2, [pc, #52]	; (800524c <RTC_ExitInitMode+0x78>)
 8005218:	f023 0320 	bic.w	r3, r3, #32
 800521c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f7ff ff7e 	bl	8005120 <HAL_RTC_WaitForSynchro>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d005      	beq.n	8005236 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2203      	movs	r2, #3
 800522e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005236:	4b05      	ldr	r3, [pc, #20]	; (800524c <RTC_ExitInitMode+0x78>)
 8005238:	699b      	ldr	r3, [r3, #24]
 800523a:	4a04      	ldr	r2, [pc, #16]	; (800524c <RTC_ExitInitMode+0x78>)
 800523c:	f043 0320 	orr.w	r3, r3, #32
 8005240:	6193      	str	r3, [r2, #24]
  }

  return status;
 8005242:	7bfb      	ldrb	r3, [r7, #15]
}
 8005244:	4618      	mov	r0, r3
 8005246:	3710      	adds	r7, #16
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}
 800524c:	40002800 	.word	0x40002800

08005250 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005250:	b480      	push	{r7}
 8005252:	b085      	sub	sp, #20
 8005254:	af00      	add	r7, sp, #0
 8005256:	4603      	mov	r3, r0
 8005258:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800525a:	2300      	movs	r3, #0
 800525c:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800525e:	79fb      	ldrb	r3, [r7, #7]
 8005260:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8005262:	e005      	b.n	8005270 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	3301      	adds	r3, #1
 8005268:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 800526a:	7afb      	ldrb	r3, [r7, #11]
 800526c:	3b0a      	subs	r3, #10
 800526e:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8005270:	7afb      	ldrb	r3, [r7, #11]
 8005272:	2b09      	cmp	r3, #9
 8005274:	d8f6      	bhi.n	8005264 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	b2db      	uxtb	r3, r3
 800527a:	011b      	lsls	r3, r3, #4
 800527c:	b2da      	uxtb	r2, r3
 800527e:	7afb      	ldrb	r3, [r7, #11]
 8005280:	4313      	orrs	r3, r2
 8005282:	b2db      	uxtb	r3, r3
}
 8005284:	4618      	mov	r0, r3
 8005286:	3714      	adds	r7, #20
 8005288:	46bd      	mov	sp, r7
 800528a:	bc80      	pop	{r7}
 800528c:	4770      	bx	lr

0800528e <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800528e:	b480      	push	{r7}
 8005290:	b085      	sub	sp, #20
 8005292:	af00      	add	r7, sp, #0
 8005294:	4603      	mov	r3, r0
 8005296:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 8005298:	79fb      	ldrb	r3, [r7, #7]
 800529a:	091b      	lsrs	r3, r3, #4
 800529c:	b2db      	uxtb	r3, r3
 800529e:	461a      	mov	r2, r3
 80052a0:	4613      	mov	r3, r2
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	4413      	add	r3, r2
 80052a6:	005b      	lsls	r3, r3, #1
 80052a8:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	b2da      	uxtb	r2, r3
 80052ae:	79fb      	ldrb	r3, [r7, #7]
 80052b0:	f003 030f 	and.w	r3, r3, #15
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	4413      	add	r3, r2
 80052b8:	b2db      	uxtb	r3, r3
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3714      	adds	r7, #20
 80052be:	46bd      	mov	sp, r7
 80052c0:	bc80      	pop	{r7}
 80052c2:	4770      	bx	lr

080052c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d101      	bne.n	80052d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e0c6      	b.n	8005464 <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d108      	bne.n	80052f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80052e6:	d009      	beq.n	80052fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	61da      	str	r2, [r3, #28]
 80052ee:	e005      	b.n	80052fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005302:	b2db      	uxtb	r3, r3
 8005304:	2b00      	cmp	r3, #0
 8005306:	d106      	bne.n	8005316 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f7fc fc57 	bl	8001bc4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2202      	movs	r2, #2
 800531a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	681a      	ldr	r2, [r3, #0]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800532c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005336:	d902      	bls.n	800533e <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005338:	2300      	movs	r3, #0
 800533a:	60fb      	str	r3, [r7, #12]
 800533c:	e002      	b.n	8005344 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800533e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005342:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800534c:	d007      	beq.n	800535e <HAL_SPI_Init+0x9a>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005356:	d002      	beq.n	800535e <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2200      	movs	r2, #0
 800535c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800536e:	431a      	orrs	r2, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	691b      	ldr	r3, [r3, #16]
 8005374:	f003 0302 	and.w	r3, r3, #2
 8005378:	431a      	orrs	r2, r3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	695b      	ldr	r3, [r3, #20]
 800537e:	f003 0301 	and.w	r3, r3, #1
 8005382:	431a      	orrs	r2, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	699b      	ldr	r3, [r3, #24]
 8005388:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800538c:	431a      	orrs	r2, r3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	69db      	ldr	r3, [r3, #28]
 8005392:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005396:	431a      	orrs	r2, r3
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6a1b      	ldr	r3, [r3, #32]
 800539c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053a0:	ea42 0103 	orr.w	r1, r2, r3
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	430a      	orrs	r2, r1
 80053b2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053bc:	d11b      	bne.n	80053f6 <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d10b      	bne.n	80053de <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	68db      	ldr	r3, [r3, #12]
 80053ca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80053ce:	d903      	bls.n	80053d8 <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2202      	movs	r2, #2
 80053d4:	631a      	str	r2, [r3, #48]	; 0x30
 80053d6:	e002      	b.n	80053de <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d107      	bne.n	80053f6 <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053f4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	699b      	ldr	r3, [r3, #24]
 80053fa:	0c1b      	lsrs	r3, r3, #16
 80053fc:	f003 0204 	and.w	r2, r3, #4
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005404:	f003 0310 	and.w	r3, r3, #16
 8005408:	431a      	orrs	r2, r3
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800540e:	f003 0308 	and.w	r3, r3, #8
 8005412:	431a      	orrs	r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800541c:	ea42 0103 	orr.w	r1, r2, r3
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	430a      	orrs	r2, r1
 800542c:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005432:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005436:	d105      	bne.n	8005444 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	b292      	uxth	r2, r2
 8005442:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	69da      	ldr	r2, [r3, #28]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005452:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2200      	movs	r2, #0
 8005458:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2201      	movs	r2, #1
 800545e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005462:	2300      	movs	r3, #0
}
 8005464:	4618      	mov	r0, r3
 8005466:	3710      	adds	r7, #16
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b082      	sub	sp, #8
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d101      	bne.n	800547e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e049      	b.n	8005512 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005484:	b2db      	uxtb	r3, r3
 8005486:	2b00      	cmp	r3, #0
 8005488:	d106      	bne.n	8005498 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 f841 	bl	800551a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2202      	movs	r2, #2
 800549c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	3304      	adds	r3, #4
 80054a8:	4619      	mov	r1, r3
 80054aa:	4610      	mov	r0, r2
 80054ac:	f000 f9ce 	bl	800584c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2201      	movs	r2, #1
 80054bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2201      	movs	r2, #1
 80054cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2201      	movs	r2, #1
 80054d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	3708      	adds	r7, #8
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}

0800551a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800551a:	b480      	push	{r7}
 800551c:	b083      	sub	sp, #12
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005522:	bf00      	nop
 8005524:	370c      	adds	r7, #12
 8005526:	46bd      	mov	sp, r7
 8005528:	bc80      	pop	{r7}
 800552a:	4770      	bx	lr

0800552c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800552c:	b480      	push	{r7}
 800552e:	b085      	sub	sp, #20
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800553a:	b2db      	uxtb	r3, r3
 800553c:	2b01      	cmp	r3, #1
 800553e:	d001      	beq.n	8005544 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e036      	b.n	80055b2 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2202      	movs	r2, #2
 8005548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	68da      	ldr	r2, [r3, #12]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f042 0201 	orr.w	r2, r2, #1
 800555a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	4a16      	ldr	r2, [pc, #88]	; (80055bc <HAL_TIM_Base_Start_IT+0x90>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d004      	beq.n	8005570 <HAL_TIM_Base_Start_IT+0x44>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800556e:	d115      	bne.n	800559c <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	689a      	ldr	r2, [r3, #8]
 8005576:	4b12      	ldr	r3, [pc, #72]	; (80055c0 <HAL_TIM_Base_Start_IT+0x94>)
 8005578:	4013      	ands	r3, r2
 800557a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	2b06      	cmp	r3, #6
 8005580:	d015      	beq.n	80055ae <HAL_TIM_Base_Start_IT+0x82>
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005588:	d011      	beq.n	80055ae <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f042 0201 	orr.w	r2, r2, #1
 8005598:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800559a:	e008      	b.n	80055ae <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f042 0201 	orr.w	r2, r2, #1
 80055aa:	601a      	str	r2, [r3, #0]
 80055ac:	e000      	b.n	80055b0 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3714      	adds	r7, #20
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bc80      	pop	{r7}
 80055ba:	4770      	bx	lr
 80055bc:	40012c00 	.word	0x40012c00
 80055c0:	00010007 	.word	0x00010007

080055c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b082      	sub	sp, #8
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	f003 0302 	and.w	r3, r3, #2
 80055d6:	2b02      	cmp	r3, #2
 80055d8:	d122      	bne.n	8005620 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	f003 0302 	and.w	r3, r3, #2
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	d11b      	bne.n	8005620 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f06f 0202 	mvn.w	r2, #2
 80055f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2201      	movs	r2, #1
 80055f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	699b      	ldr	r3, [r3, #24]
 80055fe:	f003 0303 	and.w	r3, r3, #3
 8005602:	2b00      	cmp	r3, #0
 8005604:	d003      	beq.n	800560e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f000 f904 	bl	8005814 <HAL_TIM_IC_CaptureCallback>
 800560c:	e005      	b.n	800561a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f000 f8f7 	bl	8005802 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f000 f906 	bl	8005826 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	f003 0304 	and.w	r3, r3, #4
 800562a:	2b04      	cmp	r3, #4
 800562c:	d122      	bne.n	8005674 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	f003 0304 	and.w	r3, r3, #4
 8005638:	2b04      	cmp	r3, #4
 800563a:	d11b      	bne.n	8005674 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f06f 0204 	mvn.w	r2, #4
 8005644:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2202      	movs	r2, #2
 800564a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	699b      	ldr	r3, [r3, #24]
 8005652:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005656:	2b00      	cmp	r3, #0
 8005658:	d003      	beq.n	8005662 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 f8da 	bl	8005814 <HAL_TIM_IC_CaptureCallback>
 8005660:	e005      	b.n	800566e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 f8cd 	bl	8005802 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f000 f8dc 	bl	8005826 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	691b      	ldr	r3, [r3, #16]
 800567a:	f003 0308 	and.w	r3, r3, #8
 800567e:	2b08      	cmp	r3, #8
 8005680:	d122      	bne.n	80056c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	f003 0308 	and.w	r3, r3, #8
 800568c:	2b08      	cmp	r3, #8
 800568e:	d11b      	bne.n	80056c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f06f 0208 	mvn.w	r2, #8
 8005698:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2204      	movs	r2, #4
 800569e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	69db      	ldr	r3, [r3, #28]
 80056a6:	f003 0303 	and.w	r3, r3, #3
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d003      	beq.n	80056b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 f8b0 	bl	8005814 <HAL_TIM_IC_CaptureCallback>
 80056b4:	e005      	b.n	80056c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 f8a3 	bl	8005802 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 f8b2 	bl	8005826 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	f003 0310 	and.w	r3, r3, #16
 80056d2:	2b10      	cmp	r3, #16
 80056d4:	d122      	bne.n	800571c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	f003 0310 	and.w	r3, r3, #16
 80056e0:	2b10      	cmp	r3, #16
 80056e2:	d11b      	bne.n	800571c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f06f 0210 	mvn.w	r2, #16
 80056ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2208      	movs	r2, #8
 80056f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	69db      	ldr	r3, [r3, #28]
 80056fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d003      	beq.n	800570a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 f886 	bl	8005814 <HAL_TIM_IC_CaptureCallback>
 8005708:	e005      	b.n	8005716 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 f879 	bl	8005802 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 f888 	bl	8005826 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	f003 0301 	and.w	r3, r3, #1
 8005726:	2b01      	cmp	r3, #1
 8005728:	d10e      	bne.n	8005748 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	f003 0301 	and.w	r3, r3, #1
 8005734:	2b01      	cmp	r3, #1
 8005736:	d107      	bne.n	8005748 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f06f 0201 	mvn.w	r2, #1
 8005740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f7fc f874 	bl	8001830 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005752:	2b80      	cmp	r3, #128	; 0x80
 8005754:	d10e      	bne.n	8005774 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005760:	2b80      	cmp	r3, #128	; 0x80
 8005762:	d107      	bne.n	8005774 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800576c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 f8d7 	bl	8005922 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800577e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005782:	d10e      	bne.n	80057a2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800578e:	2b80      	cmp	r3, #128	; 0x80
 8005790:	d107      	bne.n	80057a2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800579a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f000 f8c9 	bl	8005934 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ac:	2b40      	cmp	r3, #64	; 0x40
 80057ae:	d10e      	bne.n	80057ce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ba:	2b40      	cmp	r3, #64	; 0x40
 80057bc:	d107      	bne.n	80057ce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f000 f835 	bl	8005838 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	691b      	ldr	r3, [r3, #16]
 80057d4:	f003 0320 	and.w	r3, r3, #32
 80057d8:	2b20      	cmp	r3, #32
 80057da:	d10e      	bne.n	80057fa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	f003 0320 	and.w	r3, r3, #32
 80057e6:	2b20      	cmp	r3, #32
 80057e8:	d107      	bne.n	80057fa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f06f 0220 	mvn.w	r2, #32
 80057f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f000 f88b 	bl	8005910 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057fa:	bf00      	nop
 80057fc:	3708      	adds	r7, #8
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}

08005802 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005802:	b480      	push	{r7}
 8005804:	b083      	sub	sp, #12
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800580a:	bf00      	nop
 800580c:	370c      	adds	r7, #12
 800580e:	46bd      	mov	sp, r7
 8005810:	bc80      	pop	{r7}
 8005812:	4770      	bx	lr

08005814 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800581c:	bf00      	nop
 800581e:	370c      	adds	r7, #12
 8005820:	46bd      	mov	sp, r7
 8005822:	bc80      	pop	{r7}
 8005824:	4770      	bx	lr

08005826 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005826:	b480      	push	{r7}
 8005828:	b083      	sub	sp, #12
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800582e:	bf00      	nop
 8005830:	370c      	adds	r7, #12
 8005832:	46bd      	mov	sp, r7
 8005834:	bc80      	pop	{r7}
 8005836:	4770      	bx	lr

08005838 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005840:	bf00      	nop
 8005842:	370c      	adds	r7, #12
 8005844:	46bd      	mov	sp, r7
 8005846:	bc80      	pop	{r7}
 8005848:	4770      	bx	lr
	...

0800584c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800584c:	b480      	push	{r7}
 800584e:	b085      	sub	sp, #20
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4a29      	ldr	r2, [pc, #164]	; (8005904 <TIM_Base_SetConfig+0xb8>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d003      	beq.n	800586c <TIM_Base_SetConfig+0x20>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800586a:	d108      	bne.n	800587e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005872:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	4313      	orrs	r3, r2
 800587c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a20      	ldr	r2, [pc, #128]	; (8005904 <TIM_Base_SetConfig+0xb8>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d00b      	beq.n	800589e <TIM_Base_SetConfig+0x52>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800588c:	d007      	beq.n	800589e <TIM_Base_SetConfig+0x52>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	4a1d      	ldr	r2, [pc, #116]	; (8005908 <TIM_Base_SetConfig+0xbc>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d003      	beq.n	800589e <TIM_Base_SetConfig+0x52>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	4a1c      	ldr	r2, [pc, #112]	; (800590c <TIM_Base_SetConfig+0xc0>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d108      	bne.n	80058b0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	695b      	ldr	r3, [r3, #20]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	689a      	ldr	r2, [r3, #8]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4a0b      	ldr	r2, [pc, #44]	; (8005904 <TIM_Base_SetConfig+0xb8>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d007      	beq.n	80058ec <TIM_Base_SetConfig+0xa0>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4a0a      	ldr	r2, [pc, #40]	; (8005908 <TIM_Base_SetConfig+0xbc>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d003      	beq.n	80058ec <TIM_Base_SetConfig+0xa0>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4a09      	ldr	r2, [pc, #36]	; (800590c <TIM_Base_SetConfig+0xc0>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d103      	bne.n	80058f4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	691a      	ldr	r2, [r3, #16]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	615a      	str	r2, [r3, #20]
}
 80058fa:	bf00      	nop
 80058fc:	3714      	adds	r7, #20
 80058fe:	46bd      	mov	sp, r7
 8005900:	bc80      	pop	{r7}
 8005902:	4770      	bx	lr
 8005904:	40012c00 	.word	0x40012c00
 8005908:	40014400 	.word	0x40014400
 800590c:	40014800 	.word	0x40014800

08005910 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005918:	bf00      	nop
 800591a:	370c      	adds	r7, #12
 800591c:	46bd      	mov	sp, r7
 800591e:	bc80      	pop	{r7}
 8005920:	4770      	bx	lr

08005922 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005922:	b480      	push	{r7}
 8005924:	b083      	sub	sp, #12
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800592a:	bf00      	nop
 800592c:	370c      	adds	r7, #12
 800592e:	46bd      	mov	sp, r7
 8005930:	bc80      	pop	{r7}
 8005932:	4770      	bx	lr

08005934 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800593c:	bf00      	nop
 800593e:	370c      	adds	r7, #12
 8005940:	46bd      	mov	sp, r7
 8005942:	bc80      	pop	{r7}
 8005944:	4770      	bx	lr

08005946 <LL_RCC_GetUSARTClockSource>:
{
 8005946:	b480      	push	{r7}
 8005948:	b083      	sub	sp, #12
 800594a:	af00      	add	r7, sp, #0
 800594c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 800594e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005952:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	401a      	ands	r2, r3
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	041b      	lsls	r3, r3, #16
 800595e:	4313      	orrs	r3, r2
}
 8005960:	4618      	mov	r0, r3
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	bc80      	pop	{r7}
 8005968:	4770      	bx	lr

0800596a <LL_RCC_GetLPUARTClockSource>:
{
 800596a:	b480      	push	{r7}
 800596c:	b083      	sub	sp, #12
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8005972:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005976:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4013      	ands	r3, r2
}
 800597e:	4618      	mov	r0, r3
 8005980:	370c      	adds	r7, #12
 8005982:	46bd      	mov	sp, r7
 8005984:	bc80      	pop	{r7}
 8005986:	4770      	bx	lr

08005988 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d101      	bne.n	800599a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	e042      	b.n	8005a20 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d106      	bne.n	80059b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f7fc f859 	bl	8001a64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2224      	movs	r2, #36	; 0x24
 80059b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f022 0201 	bic.w	r2, r2, #1
 80059c8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 fc98 	bl	8006300 <UART_SetConfig>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d101      	bne.n	80059da <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e022      	b.n	8005a20 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d002      	beq.n	80059e8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 ff00 	bl	80067e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	685a      	ldr	r2, [r3, #4]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	689a      	ldr	r2, [r3, #8]
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f042 0201 	orr.w	r2, r2, #1
 8005a16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f000 ff86 	bl	800692a <UART_CheckIdleState>
 8005a1e:	4603      	mov	r3, r0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3708      	adds	r7, #8
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d101      	bne.n	8005a3a <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e04a      	b.n	8005ad0 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d106      	bne.n	8005a52 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f7fc f809 	bl	8001a64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2224      	movs	r2, #36	; 0x24
 8005a56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	681a      	ldr	r2, [r3, #0]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f022 0201 	bic.w	r2, r2, #1
 8005a68:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 fc48 	bl	8006300 <UART_SetConfig>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d101      	bne.n	8005a7a <HAL_HalfDuplex_Init+0x52>
  {
    return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e02a      	b.n	8005ad0 <HAL_HalfDuplex_Init+0xa8>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d002      	beq.n	8005a88 <HAL_HalfDuplex_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 feb0 	bl	80067e8 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	685a      	ldr	r2, [r3, #4]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	689a      	ldr	r2, [r3, #8]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 8005aa6:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	689a      	ldr	r2, [r3, #8]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f042 0208 	orr.w	r2, r2, #8
 8005ab6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f042 0201 	orr.w	r2, r2, #1
 8005ac6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 ff2e 	bl	800692a <UART_CheckIdleState>
 8005ace:	4603      	mov	r3, r0
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3708      	adds	r7, #8
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}

08005ad8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b08a      	sub	sp, #40	; 0x28
 8005adc:	af02      	add	r7, sp, #8
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	603b      	str	r3, [r7, #0]
 8005ae4:	4613      	mov	r3, r2
 8005ae6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aee:	2b20      	cmp	r3, #32
 8005af0:	d173      	bne.n	8005bda <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d002      	beq.n	8005afe <HAL_UART_Transmit+0x26>
 8005af8:	88fb      	ldrh	r3, [r7, #6]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d101      	bne.n	8005b02 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e06c      	b.n	8005bdc <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	2221      	movs	r2, #33	; 0x21
 8005b0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b12:	f7fc fa87 	bl	8002024 <HAL_GetTick>
 8005b16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	88fa      	ldrh	r2, [r7, #6]
 8005b1c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	88fa      	ldrh	r2, [r7, #6]
 8005b24:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b30:	d108      	bne.n	8005b44 <HAL_UART_Transmit+0x6c>
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d104      	bne.n	8005b44 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	61bb      	str	r3, [r7, #24]
 8005b42:	e003      	b.n	8005b4c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005b4c:	e02c      	b.n	8005ba8 <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	9300      	str	r3, [sp, #0]
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	2200      	movs	r2, #0
 8005b56:	2180      	movs	r1, #128	; 0x80
 8005b58:	68f8      	ldr	r0, [r7, #12]
 8005b5a:	f000 ff34 	bl	80069c6 <UART_WaitOnFlagUntilTimeout>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d001      	beq.n	8005b68 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005b64:	2303      	movs	r3, #3
 8005b66:	e039      	b.n	8005bdc <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d10b      	bne.n	8005b86 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	881b      	ldrh	r3, [r3, #0]
 8005b72:	461a      	mov	r2, r3
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b7c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	3302      	adds	r3, #2
 8005b82:	61bb      	str	r3, [r7, #24]
 8005b84:	e007      	b.n	8005b96 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	781a      	ldrb	r2, [r3, #0]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	3301      	adds	r3, #1
 8005b94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	3b01      	subs	r3, #1
 8005ba0:	b29a      	uxth	r2, r3
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d1cc      	bne.n	8005b4e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	9300      	str	r3, [sp, #0]
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	2140      	movs	r1, #64	; 0x40
 8005bbe:	68f8      	ldr	r0, [r7, #12]
 8005bc0:	f000 ff01 	bl	80069c6 <UART_WaitOnFlagUntilTimeout>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d001      	beq.n	8005bce <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8005bca:	2303      	movs	r3, #3
 8005bcc:	e006      	b.n	8005bdc <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2220      	movs	r2, #32
 8005bd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	e000      	b.n	8005bdc <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 8005bda:	2302      	movs	r3, #2
  }
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3720      	adds	r7, #32
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b08a      	sub	sp, #40	; 0x28
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	60b9      	str	r1, [r7, #8]
 8005bee:	4613      	mov	r3, r2
 8005bf0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bf8:	2b20      	cmp	r3, #32
 8005bfa:	d137      	bne.n	8005c6c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d002      	beq.n	8005c08 <HAL_UART_Receive_IT+0x24>
 8005c02:	88fb      	ldrh	r3, [r7, #6]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d101      	bne.n	8005c0c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e030      	b.n	8005c6e <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a18      	ldr	r2, [pc, #96]	; (8005c78 <HAL_UART_Receive_IT+0x94>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d01f      	beq.n	8005c5c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d018      	beq.n	8005c5c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	e853 3f00 	ldrex	r3, [r3]
 8005c36:	613b      	str	r3, [r7, #16]
   return(result);
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005c3e:	627b      	str	r3, [r7, #36]	; 0x24
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	461a      	mov	r2, r3
 8005c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c48:	623b      	str	r3, [r7, #32]
 8005c4a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c4c:	69f9      	ldr	r1, [r7, #28]
 8005c4e:	6a3a      	ldr	r2, [r7, #32]
 8005c50:	e841 2300 	strex	r3, r2, [r1]
 8005c54:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c56:	69bb      	ldr	r3, [r7, #24]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d1e6      	bne.n	8005c2a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005c5c:	88fb      	ldrh	r3, [r7, #6]
 8005c5e:	461a      	mov	r2, r3
 8005c60:	68b9      	ldr	r1, [r7, #8]
 8005c62:	68f8      	ldr	r0, [r7, #12]
 8005c64:	f000 ff78 	bl	8006b58 <UART_Start_Receive_IT>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	e000      	b.n	8005c6e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005c6c:	2302      	movs	r3, #2
  }
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3728      	adds	r7, #40	; 0x28
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	40008000 	.word	0x40008000

08005c7c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b0ba      	sub	sp, #232	; 0xe8
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	69db      	ldr	r3, [r3, #28]
 8005c8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005ca2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005ca6:	f640 030f 	movw	r3, #2063	; 0x80f
 8005caa:	4013      	ands	r3, r2
 8005cac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005cb0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d11b      	bne.n	8005cf0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005cb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cbc:	f003 0320 	and.w	r3, r3, #32
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d015      	beq.n	8005cf0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005cc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cc8:	f003 0320 	and.w	r3, r3, #32
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d105      	bne.n	8005cdc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005cd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d009      	beq.n	8005cf0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	f000 82e3 	beq.w	80062ac <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	4798      	blx	r3
      }
      return;
 8005cee:	e2dd      	b.n	80062ac <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005cf0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	f000 8123 	beq.w	8005f40 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005cfa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005cfe:	4b8d      	ldr	r3, [pc, #564]	; (8005f34 <HAL_UART_IRQHandler+0x2b8>)
 8005d00:	4013      	ands	r3, r2
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d106      	bne.n	8005d14 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005d06:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005d0a:	4b8b      	ldr	r3, [pc, #556]	; (8005f38 <HAL_UART_IRQHandler+0x2bc>)
 8005d0c:	4013      	ands	r3, r2
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	f000 8116 	beq.w	8005f40 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005d14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d18:	f003 0301 	and.w	r3, r3, #1
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d011      	beq.n	8005d44 <HAL_UART_IRQHandler+0xc8>
 8005d20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d00b      	beq.n	8005d44 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	2201      	movs	r2, #1
 8005d32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d3a:	f043 0201 	orr.w	r2, r3, #1
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d48:	f003 0302 	and.w	r3, r3, #2
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d011      	beq.n	8005d74 <HAL_UART_IRQHandler+0xf8>
 8005d50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d54:	f003 0301 	and.w	r3, r3, #1
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d00b      	beq.n	8005d74 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	2202      	movs	r2, #2
 8005d62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d6a:	f043 0204 	orr.w	r2, r3, #4
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d78:	f003 0304 	and.w	r3, r3, #4
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d011      	beq.n	8005da4 <HAL_UART_IRQHandler+0x128>
 8005d80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d84:	f003 0301 	and.w	r3, r3, #1
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d00b      	beq.n	8005da4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	2204      	movs	r2, #4
 8005d92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d9a:	f043 0202 	orr.w	r2, r3, #2
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005da4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005da8:	f003 0308 	and.w	r3, r3, #8
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d017      	beq.n	8005de0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005db0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005db4:	f003 0320 	and.w	r3, r3, #32
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d105      	bne.n	8005dc8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005dbc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005dc0:	4b5c      	ldr	r3, [pc, #368]	; (8005f34 <HAL_UART_IRQHandler+0x2b8>)
 8005dc2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d00b      	beq.n	8005de0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2208      	movs	r2, #8
 8005dce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dd6:	f043 0208 	orr.w	r2, r3, #8
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005de0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005de4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d012      	beq.n	8005e12 <HAL_UART_IRQHandler+0x196>
 8005dec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005df0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d00c      	beq.n	8005e12 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e08:	f043 0220 	orr.w	r2, r3, #32
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	f000 8249 	beq.w	80062b0 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e22:	f003 0320 	and.w	r3, r3, #32
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d013      	beq.n	8005e52 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005e2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e2e:	f003 0320 	and.w	r3, r3, #32
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d105      	bne.n	8005e42 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005e36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d007      	beq.n	8005e52 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d003      	beq.n	8005e52 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e58:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e66:	2b40      	cmp	r3, #64	; 0x40
 8005e68:	d005      	beq.n	8005e76 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005e6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e6e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d054      	beq.n	8005f20 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 ff8e 	bl	8006d98 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e86:	2b40      	cmp	r3, #64	; 0x40
 8005e88:	d146      	bne.n	8005f18 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	3308      	adds	r3, #8
 8005e90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005e98:	e853 3f00 	ldrex	r3, [r3]
 8005e9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005ea0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ea4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ea8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	3308      	adds	r3, #8
 8005eb2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005eb6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005eba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ebe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005ec2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005ec6:	e841 2300 	strex	r3, r2, [r1]
 8005eca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005ece:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d1d9      	bne.n	8005e8a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d017      	beq.n	8005f10 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ee6:	4a15      	ldr	r2, [pc, #84]	; (8005f3c <HAL_UART_IRQHandler+0x2c0>)
 8005ee8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f7fc ff9e 	bl	8002e32 <HAL_DMA_Abort_IT>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d019      	beq.n	8005f30 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8005f0a:	4610      	mov	r0, r2
 8005f0c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f0e:	e00f      	b.n	8005f30 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 f9e0 	bl	80062d6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f16:	e00b      	b.n	8005f30 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f000 f9dc 	bl	80062d6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f1e:	e007      	b.n	8005f30 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f000 f9d8 	bl	80062d6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8005f2e:	e1bf      	b.n	80062b0 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f30:	bf00      	nop
    return;
 8005f32:	e1bd      	b.n	80062b0 <HAL_UART_IRQHandler+0x634>
 8005f34:	10000001 	.word	0x10000001
 8005f38:	04000120 	.word	0x04000120
 8005f3c:	08006e63 	.word	0x08006e63

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	f040 8153 	bne.w	80061f0 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f4e:	f003 0310 	and.w	r3, r3, #16
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	f000 814c 	beq.w	80061f0 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005f58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f5c:	f003 0310 	and.w	r3, r3, #16
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	f000 8145 	beq.w	80061f0 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	2210      	movs	r2, #16
 8005f6c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f78:	2b40      	cmp	r3, #64	; 0x40
 8005f7a:	f040 80bb 	bne.w	80060f4 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005f8c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	f000 818f 	beq.w	80062b4 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005f9c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	f080 8187 	bcs.w	80062b4 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005fac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f003 0320 	and.w	r3, r3, #32
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	f040 8087 	bne.w	80060d2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fcc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005fd0:	e853 3f00 	ldrex	r3, [r3]
 8005fd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005fd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005fdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005fe0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	461a      	mov	r2, r3
 8005fea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005fee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005ff2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005ffa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005ffe:	e841 2300 	strex	r3, r2, [r1]
 8006002:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006006:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800600a:	2b00      	cmp	r3, #0
 800600c:	d1da      	bne.n	8005fc4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	3308      	adds	r3, #8
 8006014:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006016:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006018:	e853 3f00 	ldrex	r3, [r3]
 800601c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800601e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006020:	f023 0301 	bic.w	r3, r3, #1
 8006024:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	3308      	adds	r3, #8
 800602e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006032:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006036:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006038:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800603a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800603e:	e841 2300 	strex	r3, r2, [r1]
 8006042:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006044:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006046:	2b00      	cmp	r3, #0
 8006048:	d1e1      	bne.n	800600e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	3308      	adds	r3, #8
 8006050:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006052:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006054:	e853 3f00 	ldrex	r3, [r3]
 8006058:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800605a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800605c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006060:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	3308      	adds	r3, #8
 800606a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800606e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006070:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006072:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006074:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006076:	e841 2300 	strex	r3, r2, [r1]
 800607a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800607c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800607e:	2b00      	cmp	r3, #0
 8006080:	d1e3      	bne.n	800604a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2220      	movs	r2, #32
 8006086:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006096:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006098:	e853 3f00 	ldrex	r3, [r3]
 800609c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800609e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060a0:	f023 0310 	bic.w	r3, r3, #16
 80060a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	461a      	mov	r2, r3
 80060ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80060b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80060b4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80060b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80060ba:	e841 2300 	strex	r3, r2, [r1]
 80060be:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80060c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1e4      	bne.n	8006090 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80060cc:	4618      	mov	r0, r3
 80060ce:	f7fc fe52 	bl	8002d76 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2202      	movs	r2, #2
 80060d6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	1ad3      	subs	r3, r2, r3
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	4619      	mov	r1, r3
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 f8fb 	bl	80062e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80060f2:	e0df      	b.n	80062b4 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006100:	b29b      	uxth	r3, r3
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800610e:	b29b      	uxth	r3, r3
 8006110:	2b00      	cmp	r3, #0
 8006112:	f000 80d1 	beq.w	80062b8 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8006116:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800611a:	2b00      	cmp	r3, #0
 800611c:	f000 80cc 	beq.w	80062b8 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006128:	e853 3f00 	ldrex	r3, [r3]
 800612c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800612e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006130:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006134:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	461a      	mov	r2, r3
 800613e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006142:	647b      	str	r3, [r7, #68]	; 0x44
 8006144:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006146:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006148:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800614a:	e841 2300 	strex	r3, r2, [r1]
 800614e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006152:	2b00      	cmp	r3, #0
 8006154:	d1e4      	bne.n	8006120 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	3308      	adds	r3, #8
 800615c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800615e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006160:	e853 3f00 	ldrex	r3, [r3]
 8006164:	623b      	str	r3, [r7, #32]
   return(result);
 8006166:	6a3b      	ldr	r3, [r7, #32]
 8006168:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800616c:	f023 0301 	bic.w	r3, r3, #1
 8006170:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	3308      	adds	r3, #8
 800617a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800617e:	633a      	str	r2, [r7, #48]	; 0x30
 8006180:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006182:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006184:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006186:	e841 2300 	strex	r3, r2, [r1]
 800618a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800618c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618e:	2b00      	cmp	r3, #0
 8006190:	d1e1      	bne.n	8006156 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2220      	movs	r2, #32
 8006196:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2200      	movs	r2, #0
 800619e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	e853 3f00 	ldrex	r3, [r3]
 80061b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f023 0310 	bic.w	r3, r3, #16
 80061ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	461a      	mov	r2, r3
 80061c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80061c8:	61fb      	str	r3, [r7, #28]
 80061ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061cc:	69b9      	ldr	r1, [r7, #24]
 80061ce:	69fa      	ldr	r2, [r7, #28]
 80061d0:	e841 2300 	strex	r3, r2, [r1]
 80061d4:	617b      	str	r3, [r7, #20]
   return(result);
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d1e4      	bne.n	80061a6 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2202      	movs	r2, #2
 80061e0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80061e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80061e6:	4619      	mov	r1, r3
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f000 f87d 	bl	80062e8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80061ee:	e063      	b.n	80062b8 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80061f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d00e      	beq.n	800621a <HAL_UART_IRQHandler+0x59e>
 80061fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006200:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006204:	2b00      	cmp	r3, #0
 8006206:	d008      	beq.n	800621a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006210:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f001 fb82 	bl	800791c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006218:	e051      	b.n	80062be <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800621a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800621e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006222:	2b00      	cmp	r3, #0
 8006224:	d014      	beq.n	8006250 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006226:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800622a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800622e:	2b00      	cmp	r3, #0
 8006230:	d105      	bne.n	800623e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006232:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006236:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800623a:	2b00      	cmp	r3, #0
 800623c:	d008      	beq.n	8006250 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006242:	2b00      	cmp	r3, #0
 8006244:	d03a      	beq.n	80062bc <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	4798      	blx	r3
    }
    return;
 800624e:	e035      	b.n	80062bc <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006258:	2b00      	cmp	r3, #0
 800625a:	d009      	beq.n	8006270 <HAL_UART_IRQHandler+0x5f4>
 800625c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006264:	2b00      	cmp	r3, #0
 8006266:	d003      	beq.n	8006270 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f000 fe10 	bl	8006e8e <UART_EndTransmit_IT>
    return;
 800626e:	e026      	b.n	80062be <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006274:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006278:	2b00      	cmp	r3, #0
 800627a:	d009      	beq.n	8006290 <HAL_UART_IRQHandler+0x614>
 800627c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006280:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006284:	2b00      	cmp	r3, #0
 8006286:	d003      	beq.n	8006290 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f001 fb59 	bl	8007940 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800628e:	e016      	b.n	80062be <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006290:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006294:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006298:	2b00      	cmp	r3, #0
 800629a:	d010      	beq.n	80062be <HAL_UART_IRQHandler+0x642>
 800629c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	da0c      	bge.n	80062be <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f001 fb42 	bl	800792e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80062aa:	e008      	b.n	80062be <HAL_UART_IRQHandler+0x642>
      return;
 80062ac:	bf00      	nop
 80062ae:	e006      	b.n	80062be <HAL_UART_IRQHandler+0x642>
    return;
 80062b0:	bf00      	nop
 80062b2:	e004      	b.n	80062be <HAL_UART_IRQHandler+0x642>
      return;
 80062b4:	bf00      	nop
 80062b6:	e002      	b.n	80062be <HAL_UART_IRQHandler+0x642>
      return;
 80062b8:	bf00      	nop
 80062ba:	e000      	b.n	80062be <HAL_UART_IRQHandler+0x642>
    return;
 80062bc:	bf00      	nop
  }
}
 80062be:	37e8      	adds	r7, #232	; 0xe8
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b083      	sub	sp, #12
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80062cc:	bf00      	nop
 80062ce:	370c      	adds	r7, #12
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bc80      	pop	{r7}
 80062d4:	4770      	bx	lr

080062d6 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80062d6:	b480      	push	{r7}
 80062d8:	b083      	sub	sp, #12
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80062de:	bf00      	nop
 80062e0:	370c      	adds	r7, #12
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bc80      	pop	{r7}
 80062e6:	4770      	bx	lr

080062e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	460b      	mov	r3, r1
 80062f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80062f4:	bf00      	nop
 80062f6:	370c      	adds	r7, #12
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bc80      	pop	{r7}
 80062fc:	4770      	bx	lr
	...

08006300 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006300:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006304:	b08c      	sub	sp, #48	; 0x30
 8006306:	af00      	add	r7, sp, #0
 8006308:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800630a:	2300      	movs	r3, #0
 800630c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	689a      	ldr	r2, [r3, #8]
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	691b      	ldr	r3, [r3, #16]
 8006318:	431a      	orrs	r2, r3
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	695b      	ldr	r3, [r3, #20]
 800631e:	431a      	orrs	r2, r3
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	69db      	ldr	r3, [r3, #28]
 8006324:	4313      	orrs	r3, r2
 8006326:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	4b94      	ldr	r3, [pc, #592]	; (8006580 <UART_SetConfig+0x280>)
 8006330:	4013      	ands	r3, r2
 8006332:	697a      	ldr	r2, [r7, #20]
 8006334:	6812      	ldr	r2, [r2, #0]
 8006336:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006338:	430b      	orrs	r3, r1
 800633a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	68da      	ldr	r2, [r3, #12]
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	430a      	orrs	r2, r1
 8006350:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	699b      	ldr	r3, [r3, #24]
 8006356:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a89      	ldr	r2, [pc, #548]	; (8006584 <UART_SetConfig+0x284>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d004      	beq.n	800636c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	6a1b      	ldr	r3, [r3, #32]
 8006366:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006368:	4313      	orrs	r3, r2
 800636a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006376:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800637a:	697a      	ldr	r2, [r7, #20]
 800637c:	6812      	ldr	r2, [r2, #0]
 800637e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006380:	430b      	orrs	r3, r1
 8006382:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800638a:	f023 010f 	bic.w	r1, r3, #15
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	430a      	orrs	r2, r1
 8006398:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a7a      	ldr	r2, [pc, #488]	; (8006588 <UART_SetConfig+0x288>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d127      	bne.n	80063f4 <UART_SetConfig+0xf4>
 80063a4:	2003      	movs	r0, #3
 80063a6:	f7ff face 	bl	8005946 <LL_RCC_GetUSARTClockSource>
 80063aa:	4603      	mov	r3, r0
 80063ac:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80063b0:	2b03      	cmp	r3, #3
 80063b2:	d81b      	bhi.n	80063ec <UART_SetConfig+0xec>
 80063b4:	a201      	add	r2, pc, #4	; (adr r2, 80063bc <UART_SetConfig+0xbc>)
 80063b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ba:	bf00      	nop
 80063bc:	080063cd 	.word	0x080063cd
 80063c0:	080063dd 	.word	0x080063dd
 80063c4:	080063d5 	.word	0x080063d5
 80063c8:	080063e5 	.word	0x080063e5
 80063cc:	2301      	movs	r3, #1
 80063ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063d2:	e080      	b.n	80064d6 <UART_SetConfig+0x1d6>
 80063d4:	2302      	movs	r3, #2
 80063d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063da:	e07c      	b.n	80064d6 <UART_SetConfig+0x1d6>
 80063dc:	2304      	movs	r3, #4
 80063de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063e2:	e078      	b.n	80064d6 <UART_SetConfig+0x1d6>
 80063e4:	2308      	movs	r3, #8
 80063e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063ea:	e074      	b.n	80064d6 <UART_SetConfig+0x1d6>
 80063ec:	2310      	movs	r3, #16
 80063ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063f2:	e070      	b.n	80064d6 <UART_SetConfig+0x1d6>
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a64      	ldr	r2, [pc, #400]	; (800658c <UART_SetConfig+0x28c>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d138      	bne.n	8006470 <UART_SetConfig+0x170>
 80063fe:	200c      	movs	r0, #12
 8006400:	f7ff faa1 	bl	8005946 <LL_RCC_GetUSARTClockSource>
 8006404:	4603      	mov	r3, r0
 8006406:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800640a:	2b0c      	cmp	r3, #12
 800640c:	d82c      	bhi.n	8006468 <UART_SetConfig+0x168>
 800640e:	a201      	add	r2, pc, #4	; (adr r2, 8006414 <UART_SetConfig+0x114>)
 8006410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006414:	08006449 	.word	0x08006449
 8006418:	08006469 	.word	0x08006469
 800641c:	08006469 	.word	0x08006469
 8006420:	08006469 	.word	0x08006469
 8006424:	08006459 	.word	0x08006459
 8006428:	08006469 	.word	0x08006469
 800642c:	08006469 	.word	0x08006469
 8006430:	08006469 	.word	0x08006469
 8006434:	08006451 	.word	0x08006451
 8006438:	08006469 	.word	0x08006469
 800643c:	08006469 	.word	0x08006469
 8006440:	08006469 	.word	0x08006469
 8006444:	08006461 	.word	0x08006461
 8006448:	2300      	movs	r3, #0
 800644a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800644e:	e042      	b.n	80064d6 <UART_SetConfig+0x1d6>
 8006450:	2302      	movs	r3, #2
 8006452:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006456:	e03e      	b.n	80064d6 <UART_SetConfig+0x1d6>
 8006458:	2304      	movs	r3, #4
 800645a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800645e:	e03a      	b.n	80064d6 <UART_SetConfig+0x1d6>
 8006460:	2308      	movs	r3, #8
 8006462:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006466:	e036      	b.n	80064d6 <UART_SetConfig+0x1d6>
 8006468:	2310      	movs	r3, #16
 800646a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800646e:	e032      	b.n	80064d6 <UART_SetConfig+0x1d6>
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a43      	ldr	r2, [pc, #268]	; (8006584 <UART_SetConfig+0x284>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d12a      	bne.n	80064d0 <UART_SetConfig+0x1d0>
 800647a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800647e:	f7ff fa74 	bl	800596a <LL_RCC_GetLPUARTClockSource>
 8006482:	4603      	mov	r3, r0
 8006484:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006488:	d01a      	beq.n	80064c0 <UART_SetConfig+0x1c0>
 800648a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800648e:	d81b      	bhi.n	80064c8 <UART_SetConfig+0x1c8>
 8006490:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006494:	d00c      	beq.n	80064b0 <UART_SetConfig+0x1b0>
 8006496:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800649a:	d815      	bhi.n	80064c8 <UART_SetConfig+0x1c8>
 800649c:	2b00      	cmp	r3, #0
 800649e:	d003      	beq.n	80064a8 <UART_SetConfig+0x1a8>
 80064a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064a4:	d008      	beq.n	80064b8 <UART_SetConfig+0x1b8>
 80064a6:	e00f      	b.n	80064c8 <UART_SetConfig+0x1c8>
 80064a8:	2300      	movs	r3, #0
 80064aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064ae:	e012      	b.n	80064d6 <UART_SetConfig+0x1d6>
 80064b0:	2302      	movs	r3, #2
 80064b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064b6:	e00e      	b.n	80064d6 <UART_SetConfig+0x1d6>
 80064b8:	2304      	movs	r3, #4
 80064ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064be:	e00a      	b.n	80064d6 <UART_SetConfig+0x1d6>
 80064c0:	2308      	movs	r3, #8
 80064c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064c6:	e006      	b.n	80064d6 <UART_SetConfig+0x1d6>
 80064c8:	2310      	movs	r3, #16
 80064ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064ce:	e002      	b.n	80064d6 <UART_SetConfig+0x1d6>
 80064d0:	2310      	movs	r3, #16
 80064d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	4a2a      	ldr	r2, [pc, #168]	; (8006584 <UART_SetConfig+0x284>)
 80064dc:	4293      	cmp	r3, r2
 80064de:	f040 80a4 	bne.w	800662a <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80064e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80064e6:	2b08      	cmp	r3, #8
 80064e8:	d823      	bhi.n	8006532 <UART_SetConfig+0x232>
 80064ea:	a201      	add	r2, pc, #4	; (adr r2, 80064f0 <UART_SetConfig+0x1f0>)
 80064ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f0:	08006515 	.word	0x08006515
 80064f4:	08006533 	.word	0x08006533
 80064f8:	0800651d 	.word	0x0800651d
 80064fc:	08006533 	.word	0x08006533
 8006500:	08006523 	.word	0x08006523
 8006504:	08006533 	.word	0x08006533
 8006508:	08006533 	.word	0x08006533
 800650c:	08006533 	.word	0x08006533
 8006510:	0800652b 	.word	0x0800652b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006514:	f7fd ff8c 	bl	8004430 <HAL_RCC_GetPCLK1Freq>
 8006518:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800651a:	e010      	b.n	800653e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800651c:	4b1c      	ldr	r3, [pc, #112]	; (8006590 <UART_SetConfig+0x290>)
 800651e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006520:	e00d      	b.n	800653e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006522:	f7fd fed1 	bl	80042c8 <HAL_RCC_GetSysClockFreq>
 8006526:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006528:	e009      	b.n	800653e <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800652a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800652e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006530:	e005      	b.n	800653e <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8006532:	2300      	movs	r3, #0
 8006534:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800653c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800653e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006540:	2b00      	cmp	r3, #0
 8006542:	f000 8137 	beq.w	80067b4 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654a:	4a12      	ldr	r2, [pc, #72]	; (8006594 <UART_SetConfig+0x294>)
 800654c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006550:	461a      	mov	r2, r3
 8006552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006554:	fbb3 f3f2 	udiv	r3, r3, r2
 8006558:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	685a      	ldr	r2, [r3, #4]
 800655e:	4613      	mov	r3, r2
 8006560:	005b      	lsls	r3, r3, #1
 8006562:	4413      	add	r3, r2
 8006564:	69ba      	ldr	r2, [r7, #24]
 8006566:	429a      	cmp	r2, r3
 8006568:	d305      	bcc.n	8006576 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800656a:	697b      	ldr	r3, [r7, #20]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006570:	69ba      	ldr	r2, [r7, #24]
 8006572:	429a      	cmp	r2, r3
 8006574:	d910      	bls.n	8006598 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800657c:	e11a      	b.n	80067b4 <UART_SetConfig+0x4b4>
 800657e:	bf00      	nop
 8006580:	cfff69f3 	.word	0xcfff69f3
 8006584:	40008000 	.word	0x40008000
 8006588:	40013800 	.word	0x40013800
 800658c:	40004400 	.word	0x40004400
 8006590:	00f42400 	.word	0x00f42400
 8006594:	0800dc70 	.word	0x0800dc70
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659a:	2200      	movs	r2, #0
 800659c:	60bb      	str	r3, [r7, #8]
 800659e:	60fa      	str	r2, [r7, #12]
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a4:	4a8e      	ldr	r2, [pc, #568]	; (80067e0 <UART_SetConfig+0x4e0>)
 80065a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	2200      	movs	r2, #0
 80065ae:	603b      	str	r3, [r7, #0]
 80065b0:	607a      	str	r2, [r7, #4]
 80065b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80065ba:	f7fa fbfb 	bl	8000db4 <__aeabi_uldivmod>
 80065be:	4602      	mov	r2, r0
 80065c0:	460b      	mov	r3, r1
 80065c2:	4610      	mov	r0, r2
 80065c4:	4619      	mov	r1, r3
 80065c6:	f04f 0200 	mov.w	r2, #0
 80065ca:	f04f 0300 	mov.w	r3, #0
 80065ce:	020b      	lsls	r3, r1, #8
 80065d0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80065d4:	0202      	lsls	r2, r0, #8
 80065d6:	6979      	ldr	r1, [r7, #20]
 80065d8:	6849      	ldr	r1, [r1, #4]
 80065da:	0849      	lsrs	r1, r1, #1
 80065dc:	2000      	movs	r0, #0
 80065de:	460c      	mov	r4, r1
 80065e0:	4605      	mov	r5, r0
 80065e2:	eb12 0804 	adds.w	r8, r2, r4
 80065e6:	eb43 0905 	adc.w	r9, r3, r5
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	469a      	mov	sl, r3
 80065f2:	4693      	mov	fp, r2
 80065f4:	4652      	mov	r2, sl
 80065f6:	465b      	mov	r3, fp
 80065f8:	4640      	mov	r0, r8
 80065fa:	4649      	mov	r1, r9
 80065fc:	f7fa fbda 	bl	8000db4 <__aeabi_uldivmod>
 8006600:	4602      	mov	r2, r0
 8006602:	460b      	mov	r3, r1
 8006604:	4613      	mov	r3, r2
 8006606:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006608:	6a3b      	ldr	r3, [r7, #32]
 800660a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800660e:	d308      	bcc.n	8006622 <UART_SetConfig+0x322>
 8006610:	6a3b      	ldr	r3, [r7, #32]
 8006612:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006616:	d204      	bcs.n	8006622 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	6a3a      	ldr	r2, [r7, #32]
 800661e:	60da      	str	r2, [r3, #12]
 8006620:	e0c8      	b.n	80067b4 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006628:	e0c4      	b.n	80067b4 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	69db      	ldr	r3, [r3, #28]
 800662e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006632:	d167      	bne.n	8006704 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8006634:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006638:	2b08      	cmp	r3, #8
 800663a:	d828      	bhi.n	800668e <UART_SetConfig+0x38e>
 800663c:	a201      	add	r2, pc, #4	; (adr r2, 8006644 <UART_SetConfig+0x344>)
 800663e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006642:	bf00      	nop
 8006644:	08006669 	.word	0x08006669
 8006648:	08006671 	.word	0x08006671
 800664c:	08006679 	.word	0x08006679
 8006650:	0800668f 	.word	0x0800668f
 8006654:	0800667f 	.word	0x0800667f
 8006658:	0800668f 	.word	0x0800668f
 800665c:	0800668f 	.word	0x0800668f
 8006660:	0800668f 	.word	0x0800668f
 8006664:	08006687 	.word	0x08006687
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006668:	f7fd fee2 	bl	8004430 <HAL_RCC_GetPCLK1Freq>
 800666c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800666e:	e014      	b.n	800669a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006670:	f7fd fef0 	bl	8004454 <HAL_RCC_GetPCLK2Freq>
 8006674:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006676:	e010      	b.n	800669a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006678:	4b5a      	ldr	r3, [pc, #360]	; (80067e4 <UART_SetConfig+0x4e4>)
 800667a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800667c:	e00d      	b.n	800669a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800667e:	f7fd fe23 	bl	80042c8 <HAL_RCC_GetSysClockFreq>
 8006682:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006684:	e009      	b.n	800669a <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006686:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800668a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800668c:	e005      	b.n	800669a <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 800668e:	2300      	movs	r3, #0
 8006690:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006698:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800669a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669c:	2b00      	cmp	r3, #0
 800669e:	f000 8089 	beq.w	80067b4 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a6:	4a4e      	ldr	r2, [pc, #312]	; (80067e0 <UART_SetConfig+0x4e0>)
 80066a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066ac:	461a      	mov	r2, r3
 80066ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80066b4:	005a      	lsls	r2, r3, #1
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	085b      	lsrs	r3, r3, #1
 80066bc:	441a      	add	r2, r3
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80066c6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066c8:	6a3b      	ldr	r3, [r7, #32]
 80066ca:	2b0f      	cmp	r3, #15
 80066cc:	d916      	bls.n	80066fc <UART_SetConfig+0x3fc>
 80066ce:	6a3b      	ldr	r3, [r7, #32]
 80066d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066d4:	d212      	bcs.n	80066fc <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80066d6:	6a3b      	ldr	r3, [r7, #32]
 80066d8:	b29b      	uxth	r3, r3
 80066da:	f023 030f 	bic.w	r3, r3, #15
 80066de:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80066e0:	6a3b      	ldr	r3, [r7, #32]
 80066e2:	085b      	lsrs	r3, r3, #1
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	f003 0307 	and.w	r3, r3, #7
 80066ea:	b29a      	uxth	r2, r3
 80066ec:	8bfb      	ldrh	r3, [r7, #30]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	8bfa      	ldrh	r2, [r7, #30]
 80066f8:	60da      	str	r2, [r3, #12]
 80066fa:	e05b      	b.n	80067b4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006702:	e057      	b.n	80067b4 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006704:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006708:	2b08      	cmp	r3, #8
 800670a:	d828      	bhi.n	800675e <UART_SetConfig+0x45e>
 800670c:	a201      	add	r2, pc, #4	; (adr r2, 8006714 <UART_SetConfig+0x414>)
 800670e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006712:	bf00      	nop
 8006714:	08006739 	.word	0x08006739
 8006718:	08006741 	.word	0x08006741
 800671c:	08006749 	.word	0x08006749
 8006720:	0800675f 	.word	0x0800675f
 8006724:	0800674f 	.word	0x0800674f
 8006728:	0800675f 	.word	0x0800675f
 800672c:	0800675f 	.word	0x0800675f
 8006730:	0800675f 	.word	0x0800675f
 8006734:	08006757 	.word	0x08006757
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006738:	f7fd fe7a 	bl	8004430 <HAL_RCC_GetPCLK1Freq>
 800673c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800673e:	e014      	b.n	800676a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006740:	f7fd fe88 	bl	8004454 <HAL_RCC_GetPCLK2Freq>
 8006744:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006746:	e010      	b.n	800676a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006748:	4b26      	ldr	r3, [pc, #152]	; (80067e4 <UART_SetConfig+0x4e4>)
 800674a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800674c:	e00d      	b.n	800676a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800674e:	f7fd fdbb 	bl	80042c8 <HAL_RCC_GetSysClockFreq>
 8006752:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006754:	e009      	b.n	800676a <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006756:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800675a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800675c:	e005      	b.n	800676a <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 800675e:	2300      	movs	r3, #0
 8006760:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006762:	2301      	movs	r3, #1
 8006764:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006768:	bf00      	nop
    }

    if (pclk != 0U)
 800676a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800676c:	2b00      	cmp	r3, #0
 800676e:	d021      	beq.n	80067b4 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006774:	4a1a      	ldr	r2, [pc, #104]	; (80067e0 <UART_SetConfig+0x4e0>)
 8006776:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800677a:	461a      	mov	r2, r3
 800677c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	085b      	lsrs	r3, r3, #1
 8006788:	441a      	add	r2, r3
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	685b      	ldr	r3, [r3, #4]
 800678e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006792:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006794:	6a3b      	ldr	r3, [r7, #32]
 8006796:	2b0f      	cmp	r3, #15
 8006798:	d909      	bls.n	80067ae <UART_SetConfig+0x4ae>
 800679a:	6a3b      	ldr	r3, [r7, #32]
 800679c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067a0:	d205      	bcs.n	80067ae <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80067a2:	6a3b      	ldr	r3, [r7, #32]
 80067a4:	b29a      	uxth	r2, r3
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	60da      	str	r2, [r3, #12]
 80067ac:	e002      	b.n	80067b4 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	2201      	movs	r2, #1
 80067c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	2200      	movs	r2, #0
 80067c8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	2200      	movs	r2, #0
 80067ce:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80067d0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3730      	adds	r7, #48	; 0x30
 80067d8:	46bd      	mov	sp, r7
 80067da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067de:	bf00      	nop
 80067e0:	0800dc70 	.word	0x0800dc70
 80067e4:	00f42400 	.word	0x00f42400

080067e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067f4:	f003 0301 	and.w	r3, r3, #1
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d00a      	beq.n	8006812 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	430a      	orrs	r2, r1
 8006810:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006816:	f003 0302 	and.w	r3, r3, #2
 800681a:	2b00      	cmp	r3, #0
 800681c:	d00a      	beq.n	8006834 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	430a      	orrs	r2, r1
 8006832:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006838:	f003 0304 	and.w	r3, r3, #4
 800683c:	2b00      	cmp	r3, #0
 800683e:	d00a      	beq.n	8006856 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	430a      	orrs	r2, r1
 8006854:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800685a:	f003 0308 	and.w	r3, r3, #8
 800685e:	2b00      	cmp	r3, #0
 8006860:	d00a      	beq.n	8006878 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	430a      	orrs	r2, r1
 8006876:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800687c:	f003 0310 	and.w	r3, r3, #16
 8006880:	2b00      	cmp	r3, #0
 8006882:	d00a      	beq.n	800689a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	430a      	orrs	r2, r1
 8006898:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800689e:	f003 0320 	and.w	r3, r3, #32
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d00a      	beq.n	80068bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	430a      	orrs	r2, r1
 80068ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d01a      	beq.n	80068fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	430a      	orrs	r2, r1
 80068dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068e6:	d10a      	bne.n	80068fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	430a      	orrs	r2, r1
 80068fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00a      	beq.n	8006920 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	430a      	orrs	r2, r1
 800691e:	605a      	str	r2, [r3, #4]
  }
}
 8006920:	bf00      	nop
 8006922:	370c      	adds	r7, #12
 8006924:	46bd      	mov	sp, r7
 8006926:	bc80      	pop	{r7}
 8006928:	4770      	bx	lr

0800692a <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800692a:	b580      	push	{r7, lr}
 800692c:	b086      	sub	sp, #24
 800692e:	af02      	add	r7, sp, #8
 8006930:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800693a:	f7fb fb73 	bl	8002024 <HAL_GetTick>
 800693e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f003 0308 	and.w	r3, r3, #8
 800694a:	2b08      	cmp	r3, #8
 800694c:	d10e      	bne.n	800696c <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800694e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006952:	9300      	str	r3, [sp, #0]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2200      	movs	r2, #0
 8006958:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 f832 	bl	80069c6 <UART_WaitOnFlagUntilTimeout>
 8006962:	4603      	mov	r3, r0
 8006964:	2b00      	cmp	r3, #0
 8006966:	d001      	beq.n	800696c <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006968:	2303      	movs	r3, #3
 800696a:	e028      	b.n	80069be <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f003 0304 	and.w	r3, r3, #4
 8006976:	2b04      	cmp	r3, #4
 8006978:	d10e      	bne.n	8006998 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800697a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800697e:	9300      	str	r3, [sp, #0]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2200      	movs	r2, #0
 8006984:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 f81c 	bl	80069c6 <UART_WaitOnFlagUntilTimeout>
 800698e:	4603      	mov	r3, r0
 8006990:	2b00      	cmp	r3, #0
 8006992:	d001      	beq.n	8006998 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006994:	2303      	movs	r3, #3
 8006996:	e012      	b.n	80069be <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2220      	movs	r2, #32
 800699c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2220      	movs	r2, #32
 80069a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2200      	movs	r2, #0
 80069ac:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80069bc:	2300      	movs	r3, #0
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3710      	adds	r7, #16
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}

080069c6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80069c6:	b580      	push	{r7, lr}
 80069c8:	b09c      	sub	sp, #112	; 0x70
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	60f8      	str	r0, [r7, #12]
 80069ce:	60b9      	str	r1, [r7, #8]
 80069d0:	603b      	str	r3, [r7, #0]
 80069d2:	4613      	mov	r3, r2
 80069d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069d6:	e0a9      	b.n	8006b2c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069de:	f000 80a5 	beq.w	8006b2c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069e2:	f7fb fb1f 	bl	8002024 <HAL_GetTick>
 80069e6:	4602      	mov	r2, r0
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	1ad3      	subs	r3, r2, r3
 80069ec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d302      	bcc.n	80069f8 <UART_WaitOnFlagUntilTimeout+0x32>
 80069f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d140      	bne.n	8006a7a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a00:	e853 3f00 	ldrex	r3, [r3]
 8006a04:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006a06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a08:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006a0c:	667b      	str	r3, [r7, #100]	; 0x64
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	461a      	mov	r2, r3
 8006a14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a18:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a1a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006a1c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006a1e:	e841 2300 	strex	r3, r2, [r1]
 8006a22:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006a24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d1e6      	bne.n	80069f8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	3308      	adds	r3, #8
 8006a30:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a34:	e853 3f00 	ldrex	r3, [r3]
 8006a38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a3c:	f023 0301 	bic.w	r3, r3, #1
 8006a40:	663b      	str	r3, [r7, #96]	; 0x60
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	3308      	adds	r3, #8
 8006a48:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006a4a:	64ba      	str	r2, [r7, #72]	; 0x48
 8006a4c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a4e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006a50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a52:	e841 2300 	strex	r3, r2, [r1]
 8006a56:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006a58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d1e5      	bne.n	8006a2a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2220      	movs	r2, #32
 8006a62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2220      	movs	r2, #32
 8006a6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2200      	movs	r2, #0
 8006a72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8006a76:	2303      	movs	r3, #3
 8006a78:	e069      	b.n	8006b4e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f003 0304 	and.w	r3, r3, #4
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d051      	beq.n	8006b2c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	69db      	ldr	r3, [r3, #28]
 8006a8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a96:	d149      	bne.n	8006b2c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006aa0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aaa:	e853 3f00 	ldrex	r3, [r3]
 8006aae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006ab6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	461a      	mov	r2, r3
 8006abe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ac0:	637b      	str	r3, [r7, #52]	; 0x34
 8006ac2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006ac6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ac8:	e841 2300 	strex	r3, r2, [r1]
 8006acc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d1e6      	bne.n	8006aa2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	3308      	adds	r3, #8
 8006ada:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	e853 3f00 	ldrex	r3, [r3]
 8006ae2:	613b      	str	r3, [r7, #16]
   return(result);
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	f023 0301 	bic.w	r3, r3, #1
 8006aea:	66bb      	str	r3, [r7, #104]	; 0x68
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	3308      	adds	r3, #8
 8006af2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006af4:	623a      	str	r2, [r7, #32]
 8006af6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af8:	69f9      	ldr	r1, [r7, #28]
 8006afa:	6a3a      	ldr	r2, [r7, #32]
 8006afc:	e841 2300 	strex	r3, r2, [r1]
 8006b00:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b02:	69bb      	ldr	r3, [r7, #24]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d1e5      	bne.n	8006ad4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2220      	movs	r2, #32
 8006b0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2220      	movs	r2, #32
 8006b14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2220      	movs	r2, #32
 8006b1c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006b28:	2303      	movs	r3, #3
 8006b2a:	e010      	b.n	8006b4e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	69da      	ldr	r2, [r3, #28]
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	4013      	ands	r3, r2
 8006b36:	68ba      	ldr	r2, [r7, #8]
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	bf0c      	ite	eq
 8006b3c:	2301      	moveq	r3, #1
 8006b3e:	2300      	movne	r3, #0
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	461a      	mov	r2, r3
 8006b44:	79fb      	ldrb	r3, [r7, #7]
 8006b46:	429a      	cmp	r2, r3
 8006b48:	f43f af46 	beq.w	80069d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3770      	adds	r7, #112	; 0x70
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
	...

08006b58 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b0a3      	sub	sp, #140	; 0x8c
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	4613      	mov	r3, r2
 8006b64:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	68ba      	ldr	r2, [r7, #8]
 8006b6a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	88fa      	ldrh	r2, [r7, #6]
 8006b70:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	88fa      	ldrh	r2, [r7, #6]
 8006b78:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	689b      	ldr	r3, [r3, #8]
 8006b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b8a:	d10e      	bne.n	8006baa <UART_Start_Receive_IT+0x52>
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	691b      	ldr	r3, [r3, #16]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d105      	bne.n	8006ba0 <UART_Start_Receive_IT+0x48>
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006b9a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006b9e:	e02d      	b.n	8006bfc <UART_Start_Receive_IT+0xa4>
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	22ff      	movs	r2, #255	; 0xff
 8006ba4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006ba8:	e028      	b.n	8006bfc <UART_Start_Receive_IT+0xa4>
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d10d      	bne.n	8006bce <UART_Start_Receive_IT+0x76>
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	691b      	ldr	r3, [r3, #16]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d104      	bne.n	8006bc4 <UART_Start_Receive_IT+0x6c>
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	22ff      	movs	r2, #255	; 0xff
 8006bbe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006bc2:	e01b      	b.n	8006bfc <UART_Start_Receive_IT+0xa4>
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	227f      	movs	r2, #127	; 0x7f
 8006bc8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006bcc:	e016      	b.n	8006bfc <UART_Start_Receive_IT+0xa4>
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006bd6:	d10d      	bne.n	8006bf4 <UART_Start_Receive_IT+0x9c>
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	691b      	ldr	r3, [r3, #16]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d104      	bne.n	8006bea <UART_Start_Receive_IT+0x92>
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	227f      	movs	r2, #127	; 0x7f
 8006be4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006be8:	e008      	b.n	8006bfc <UART_Start_Receive_IT+0xa4>
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	223f      	movs	r2, #63	; 0x3f
 8006bee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006bf2:	e003      	b.n	8006bfc <UART_Start_Receive_IT+0xa4>
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2222      	movs	r2, #34	; 0x22
 8006c08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	3308      	adds	r3, #8
 8006c12:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006c16:	e853 3f00 	ldrex	r3, [r3]
 8006c1a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006c1c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c1e:	f043 0301 	orr.w	r3, r3, #1
 8006c22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	3308      	adds	r3, #8
 8006c2c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006c30:	673a      	str	r2, [r7, #112]	; 0x70
 8006c32:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c34:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8006c36:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006c38:	e841 2300 	strex	r3, r2, [r1]
 8006c3c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8006c3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d1e3      	bne.n	8006c0c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c4c:	d14f      	bne.n	8006cee <UART_Start_Receive_IT+0x196>
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006c54:	88fa      	ldrh	r2, [r7, #6]
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d349      	bcc.n	8006cee <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c62:	d107      	bne.n	8006c74 <UART_Start_Receive_IT+0x11c>
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	691b      	ldr	r3, [r3, #16]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d103      	bne.n	8006c74 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	4a46      	ldr	r2, [pc, #280]	; (8006d88 <UART_Start_Receive_IT+0x230>)
 8006c70:	675a      	str	r2, [r3, #116]	; 0x74
 8006c72:	e002      	b.n	8006c7a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	4a45      	ldr	r2, [pc, #276]	; (8006d8c <UART_Start_Receive_IT+0x234>)
 8006c78:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	691b      	ldr	r3, [r3, #16]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d01a      	beq.n	8006cb8 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c8a:	e853 3f00 	ldrex	r3, [r3]
 8006c8e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006c90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c96:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006ca4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ca6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006caa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006cac:	e841 2300 	strex	r3, r2, [r1]
 8006cb0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006cb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d1e4      	bne.n	8006c82 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	3308      	adds	r3, #8
 8006cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cc2:	e853 3f00 	ldrex	r3, [r3]
 8006cc6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006cce:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	3308      	adds	r3, #8
 8006cd6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006cd8:	64ba      	str	r2, [r7, #72]	; 0x48
 8006cda:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cdc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006cde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ce0:	e841 2300 	strex	r3, r2, [r1]
 8006ce4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006ce6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d1e5      	bne.n	8006cb8 <UART_Start_Receive_IT+0x160>
 8006cec:	e046      	b.n	8006d7c <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cf6:	d107      	bne.n	8006d08 <UART_Start_Receive_IT+0x1b0>
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	691b      	ldr	r3, [r3, #16]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d103      	bne.n	8006d08 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	4a23      	ldr	r2, [pc, #140]	; (8006d90 <UART_Start_Receive_IT+0x238>)
 8006d04:	675a      	str	r2, [r3, #116]	; 0x74
 8006d06:	e002      	b.n	8006d0e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	4a22      	ldr	r2, [pc, #136]	; (8006d94 <UART_Start_Receive_IT+0x23c>)
 8006d0c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	691b      	ldr	r3, [r3, #16]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d019      	beq.n	8006d4a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d1e:	e853 3f00 	ldrex	r3, [r3]
 8006d22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d26:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006d2a:	677b      	str	r3, [r7, #116]	; 0x74
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	461a      	mov	r2, r3
 8006d32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d34:	637b      	str	r3, [r7, #52]	; 0x34
 8006d36:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006d3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d3c:	e841 2300 	strex	r3, r2, [r1]
 8006d40:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d1e6      	bne.n	8006d16 <UART_Start_Receive_IT+0x1be>
 8006d48:	e018      	b.n	8006d7c <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	e853 3f00 	ldrex	r3, [r3]
 8006d56:	613b      	str	r3, [r7, #16]
   return(result);
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	f043 0320 	orr.w	r3, r3, #32
 8006d5e:	67bb      	str	r3, [r7, #120]	; 0x78
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	461a      	mov	r2, r3
 8006d66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d68:	623b      	str	r3, [r7, #32]
 8006d6a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d6c:	69f9      	ldr	r1, [r7, #28]
 8006d6e:	6a3a      	ldr	r2, [r7, #32]
 8006d70:	e841 2300 	strex	r3, r2, [r1]
 8006d74:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d76:	69bb      	ldr	r3, [r7, #24]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d1e6      	bne.n	8006d4a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	378c      	adds	r7, #140	; 0x8c
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bc80      	pop	{r7}
 8006d86:	4770      	bx	lr
 8006d88:	080075b5 	.word	0x080075b5
 8006d8c:	08007255 	.word	0x08007255
 8006d90:	0800709d 	.word	0x0800709d
 8006d94:	08006ee5 	.word	0x08006ee5

08006d98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b095      	sub	sp, #84	; 0x54
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006da8:	e853 3f00 	ldrex	r3, [r3]
 8006dac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006db4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	461a      	mov	r2, r3
 8006dbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dbe:	643b      	str	r3, [r7, #64]	; 0x40
 8006dc0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006dc4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006dc6:	e841 2300 	strex	r3, r2, [r1]
 8006dca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d1e6      	bne.n	8006da0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	3308      	adds	r3, #8
 8006dd8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dda:	6a3b      	ldr	r3, [r7, #32]
 8006ddc:	e853 3f00 	ldrex	r3, [r3]
 8006de0:	61fb      	str	r3, [r7, #28]
   return(result);
 8006de2:	69fb      	ldr	r3, [r7, #28]
 8006de4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006de8:	f023 0301 	bic.w	r3, r3, #1
 8006dec:	64bb      	str	r3, [r7, #72]	; 0x48
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	3308      	adds	r3, #8
 8006df4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006df6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006df8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dfa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006dfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006dfe:	e841 2300 	strex	r3, r2, [r1]
 8006e02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d1e3      	bne.n	8006dd2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d118      	bne.n	8006e44 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	e853 3f00 	ldrex	r3, [r3]
 8006e1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	f023 0310 	bic.w	r3, r3, #16
 8006e26:	647b      	str	r3, [r7, #68]	; 0x44
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e30:	61bb      	str	r3, [r7, #24]
 8006e32:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e34:	6979      	ldr	r1, [r7, #20]
 8006e36:	69ba      	ldr	r2, [r7, #24]
 8006e38:	e841 2300 	strex	r3, r2, [r1]
 8006e3c:	613b      	str	r3, [r7, #16]
   return(result);
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d1e6      	bne.n	8006e12 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2220      	movs	r2, #32
 8006e48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2200      	movs	r2, #0
 8006e56:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006e58:	bf00      	nop
 8006e5a:	3754      	adds	r7, #84	; 0x54
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bc80      	pop	{r7}
 8006e60:	4770      	bx	lr

08006e62 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e62:	b580      	push	{r7, lr}
 8006e64:	b084      	sub	sp, #16
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e6e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2200      	movs	r2, #0
 8006e74:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e80:	68f8      	ldr	r0, [r7, #12]
 8006e82:	f7ff fa28 	bl	80062d6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e86:	bf00      	nop
 8006e88:	3710      	adds	r7, #16
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}

08006e8e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e8e:	b580      	push	{r7, lr}
 8006e90:	b088      	sub	sp, #32
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	e853 3f00 	ldrex	r3, [r3]
 8006ea2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006eaa:	61fb      	str	r3, [r7, #28]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	69fb      	ldr	r3, [r7, #28]
 8006eb4:	61bb      	str	r3, [r7, #24]
 8006eb6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb8:	6979      	ldr	r1, [r7, #20]
 8006eba:	69ba      	ldr	r2, [r7, #24]
 8006ebc:	e841 2300 	strex	r3, r2, [r1]
 8006ec0:	613b      	str	r3, [r7, #16]
   return(result);
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d1e6      	bne.n	8006e96 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2220      	movs	r2, #32
 8006ecc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f7ff f9f4 	bl	80062c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006edc:	bf00      	nop
 8006ede:	3720      	adds	r7, #32
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b09c      	sub	sp, #112	; 0x70
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006ef2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006efc:	2b22      	cmp	r3, #34	; 0x22
 8006efe:	f040 80be 	bne.w	800707e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f08:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006f0c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8006f10:	b2d9      	uxtb	r1, r3
 8006f12:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006f16:	b2da      	uxtb	r2, r3
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f1c:	400a      	ands	r2, r1
 8006f1e:	b2d2      	uxtb	r2, r2
 8006f20:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f26:	1c5a      	adds	r2, r3, #1
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	3b01      	subs	r3, #1
 8006f36:	b29a      	uxth	r2, r3
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	f040 80a1 	bne.w	800708e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f54:	e853 3f00 	ldrex	r3, [r3]
 8006f58:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006f5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f60:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	461a      	mov	r2, r3
 8006f68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f6a:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f6c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f6e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006f70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006f72:	e841 2300 	strex	r3, r2, [r1]
 8006f76:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006f78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d1e6      	bne.n	8006f4c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	3308      	adds	r3, #8
 8006f84:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f88:	e853 3f00 	ldrex	r3, [r3]
 8006f8c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006f8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f90:	f023 0301 	bic.w	r3, r3, #1
 8006f94:	667b      	str	r3, [r7, #100]	; 0x64
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	3308      	adds	r3, #8
 8006f9c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006f9e:	647a      	str	r2, [r7, #68]	; 0x44
 8006fa0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006fa4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006fa6:	e841 2300 	strex	r3, r2, [r1]
 8006faa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006fac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d1e5      	bne.n	8006f7e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2220      	movs	r2, #32
 8006fb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a33      	ldr	r2, [pc, #204]	; (8007098 <UART_RxISR_8BIT+0x1b4>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d01f      	beq.n	8007010 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d018      	beq.n	8007010 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe6:	e853 3f00 	ldrex	r3, [r3]
 8006fea:	623b      	str	r3, [r7, #32]
   return(result);
 8006fec:	6a3b      	ldr	r3, [r7, #32]
 8006fee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006ff2:	663b      	str	r3, [r7, #96]	; 0x60
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ffc:	633b      	str	r3, [r7, #48]	; 0x30
 8006ffe:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007000:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007002:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007004:	e841 2300 	strex	r3, r2, [r1]
 8007008:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800700a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800700c:	2b00      	cmp	r3, #0
 800700e:	d1e6      	bne.n	8006fde <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007014:	2b01      	cmp	r3, #1
 8007016:	d12e      	bne.n	8007076 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	e853 3f00 	ldrex	r3, [r3]
 800702a:	60fb      	str	r3, [r7, #12]
   return(result);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f023 0310 	bic.w	r3, r3, #16
 8007032:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	461a      	mov	r2, r3
 800703a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800703c:	61fb      	str	r3, [r7, #28]
 800703e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007040:	69b9      	ldr	r1, [r7, #24]
 8007042:	69fa      	ldr	r2, [r7, #28]
 8007044:	e841 2300 	strex	r3, r2, [r1]
 8007048:	617b      	str	r3, [r7, #20]
   return(result);
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d1e6      	bne.n	800701e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	69db      	ldr	r3, [r3, #28]
 8007056:	f003 0310 	and.w	r3, r3, #16
 800705a:	2b10      	cmp	r3, #16
 800705c:	d103      	bne.n	8007066 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	2210      	movs	r2, #16
 8007064:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800706c:	4619      	mov	r1, r3
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f7ff f93a 	bl	80062e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007074:	e00b      	b.n	800708e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 ffa6 	bl	8007fc8 <HAL_UART_RxCpltCallback>
}
 800707c:	e007      	b.n	800708e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	699a      	ldr	r2, [r3, #24]
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f042 0208 	orr.w	r2, r2, #8
 800708c:	619a      	str	r2, [r3, #24]
}
 800708e:	bf00      	nop
 8007090:	3770      	adds	r7, #112	; 0x70
 8007092:	46bd      	mov	sp, r7
 8007094:	bd80      	pop	{r7, pc}
 8007096:	bf00      	nop
 8007098:	40008000 	.word	0x40008000

0800709c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b09c      	sub	sp, #112	; 0x70
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80070aa:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070b4:	2b22      	cmp	r3, #34	; 0x22
 80070b6:	f040 80be 	bne.w	8007236 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070c0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070c8:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80070ca:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80070ce:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80070d2:	4013      	ands	r3, r2
 80070d4:	b29a      	uxth	r2, r3
 80070d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80070d8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070de:	1c9a      	adds	r2, r3, #2
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	3b01      	subs	r3, #1
 80070ee:	b29a      	uxth	r2, r3
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	2b00      	cmp	r3, #0
 8007100:	f040 80a1 	bne.w	8007246 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800710a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800710c:	e853 3f00 	ldrex	r3, [r3]
 8007110:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007112:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007114:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007118:	667b      	str	r3, [r7, #100]	; 0x64
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	461a      	mov	r2, r3
 8007120:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007122:	657b      	str	r3, [r7, #84]	; 0x54
 8007124:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007126:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007128:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800712a:	e841 2300 	strex	r3, r2, [r1]
 800712e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007130:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007132:	2b00      	cmp	r3, #0
 8007134:	d1e6      	bne.n	8007104 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	3308      	adds	r3, #8
 800713c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800713e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007140:	e853 3f00 	ldrex	r3, [r3]
 8007144:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007148:	f023 0301 	bic.w	r3, r3, #1
 800714c:	663b      	str	r3, [r7, #96]	; 0x60
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	3308      	adds	r3, #8
 8007154:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007156:	643a      	str	r2, [r7, #64]	; 0x40
 8007158:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800715a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800715c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800715e:	e841 2300 	strex	r3, r2, [r1]
 8007162:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007166:	2b00      	cmp	r3, #0
 8007168:	d1e5      	bne.n	8007136 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2220      	movs	r2, #32
 800716e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2200      	movs	r2, #0
 8007176:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a33      	ldr	r2, [pc, #204]	; (8007250 <UART_RxISR_16BIT+0x1b4>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d01f      	beq.n	80071c8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007192:	2b00      	cmp	r3, #0
 8007194:	d018      	beq.n	80071c8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800719c:	6a3b      	ldr	r3, [r7, #32]
 800719e:	e853 3f00 	ldrex	r3, [r3]
 80071a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80071a4:	69fb      	ldr	r3, [r7, #28]
 80071a6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80071aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	461a      	mov	r2, r3
 80071b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80071b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80071b6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071bc:	e841 2300 	strex	r3, r2, [r1]
 80071c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80071c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d1e6      	bne.n	8007196 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071cc:	2b01      	cmp	r3, #1
 80071ce:	d12e      	bne.n	800722e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2200      	movs	r2, #0
 80071d4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	e853 3f00 	ldrex	r3, [r3]
 80071e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	f023 0310 	bic.w	r3, r3, #16
 80071ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	461a      	mov	r2, r3
 80071f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80071f4:	61bb      	str	r3, [r7, #24]
 80071f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f8:	6979      	ldr	r1, [r7, #20]
 80071fa:	69ba      	ldr	r2, [r7, #24]
 80071fc:	e841 2300 	strex	r3, r2, [r1]
 8007200:	613b      	str	r3, [r7, #16]
   return(result);
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d1e6      	bne.n	80071d6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	69db      	ldr	r3, [r3, #28]
 800720e:	f003 0310 	and.w	r3, r3, #16
 8007212:	2b10      	cmp	r3, #16
 8007214:	d103      	bne.n	800721e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	2210      	movs	r2, #16
 800721c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007224:	4619      	mov	r1, r3
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f7ff f85e 	bl	80062e8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800722c:	e00b      	b.n	8007246 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 feca 	bl	8007fc8 <HAL_UART_RxCpltCallback>
}
 8007234:	e007      	b.n	8007246 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	699a      	ldr	r2, [r3, #24]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f042 0208 	orr.w	r2, r2, #8
 8007244:	619a      	str	r2, [r3, #24]
}
 8007246:	bf00      	nop
 8007248:	3770      	adds	r7, #112	; 0x70
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop
 8007250:	40008000 	.word	0x40008000

08007254 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b0ac      	sub	sp, #176	; 0xb0
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007262:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	69db      	ldr	r3, [r3, #28]
 800726c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	689b      	ldr	r3, [r3, #8]
 8007280:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800728a:	2b22      	cmp	r3, #34	; 0x22
 800728c:	f040 8182 	bne.w	8007594 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007296:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800729a:	e125      	b.n	80074e8 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a2:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80072a6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80072aa:	b2d9      	uxtb	r1, r3
 80072ac:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80072b0:	b2da      	uxtb	r2, r3
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072b6:	400a      	ands	r2, r1
 80072b8:	b2d2      	uxtb	r2, r2
 80072ba:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072c0:	1c5a      	adds	r2, r3, #1
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	3b01      	subs	r3, #1
 80072d0:	b29a      	uxth	r2, r3
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	69db      	ldr	r3, [r3, #28]
 80072de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80072e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80072e6:	f003 0307 	and.w	r3, r3, #7
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d053      	beq.n	8007396 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80072ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80072f2:	f003 0301 	and.w	r3, r3, #1
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d011      	beq.n	800731e <UART_RxISR_8BIT_FIFOEN+0xca>
 80072fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80072fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007302:	2b00      	cmp	r3, #0
 8007304:	d00b      	beq.n	800731e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	2201      	movs	r2, #1
 800730c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007314:	f043 0201 	orr.w	r2, r3, #1
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800731e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007322:	f003 0302 	and.w	r3, r3, #2
 8007326:	2b00      	cmp	r3, #0
 8007328:	d011      	beq.n	800734e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800732a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800732e:	f003 0301 	and.w	r3, r3, #1
 8007332:	2b00      	cmp	r3, #0
 8007334:	d00b      	beq.n	800734e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	2202      	movs	r2, #2
 800733c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007344:	f043 0204 	orr.w	r2, r3, #4
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800734e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007352:	f003 0304 	and.w	r3, r3, #4
 8007356:	2b00      	cmp	r3, #0
 8007358:	d011      	beq.n	800737e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800735a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800735e:	f003 0301 	and.w	r3, r3, #1
 8007362:	2b00      	cmp	r3, #0
 8007364:	d00b      	beq.n	800737e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	2204      	movs	r2, #4
 800736c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007374:	f043 0202 	orr.w	r2, r3, #2
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007384:	2b00      	cmp	r3, #0
 8007386:	d006      	beq.n	8007396 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f7fe ffa4 	bl	80062d6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2200      	movs	r2, #0
 8007392:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800739c:	b29b      	uxth	r3, r3
 800739e:	2b00      	cmp	r3, #0
 80073a0:	f040 80a2 	bne.w	80074e8 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80073ac:	e853 3f00 	ldrex	r3, [r3]
 80073b0:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80073b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80073b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	461a      	mov	r2, r3
 80073c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80073c6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80073c8:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ca:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80073cc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80073ce:	e841 2300 	strex	r3, r2, [r1]
 80073d2:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80073d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d1e4      	bne.n	80073a4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	3308      	adds	r3, #8
 80073e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073e4:	e853 3f00 	ldrex	r3, [r3]
 80073e8:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80073ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80073ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80073f0:	f023 0301 	bic.w	r3, r3, #1
 80073f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	3308      	adds	r3, #8
 80073fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007402:	66ba      	str	r2, [r7, #104]	; 0x68
 8007404:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007406:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007408:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800740a:	e841 2300 	strex	r3, r2, [r1]
 800740e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007410:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007412:	2b00      	cmp	r3, #0
 8007414:	d1e1      	bne.n	80073da <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2220      	movs	r2, #32
 800741a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2200      	movs	r2, #0
 8007422:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a5f      	ldr	r2, [pc, #380]	; (80075ac <UART_RxISR_8BIT_FIFOEN+0x358>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d021      	beq.n	8007478 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800743e:	2b00      	cmp	r3, #0
 8007440:	d01a      	beq.n	8007478 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007448:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800744a:	e853 3f00 	ldrex	r3, [r3]
 800744e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007450:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007452:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007456:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	461a      	mov	r2, r3
 8007460:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007464:	657b      	str	r3, [r7, #84]	; 0x54
 8007466:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007468:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800746a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800746c:	e841 2300 	strex	r3, r2, [r1]
 8007470:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007472:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007474:	2b00      	cmp	r3, #0
 8007476:	d1e4      	bne.n	8007442 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800747c:	2b01      	cmp	r3, #1
 800747e:	d130      	bne.n	80074e2 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800748c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800748e:	e853 3f00 	ldrex	r3, [r3]
 8007492:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007496:	f023 0310 	bic.w	r3, r3, #16
 800749a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	461a      	mov	r2, r3
 80074a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80074a8:	643b      	str	r3, [r7, #64]	; 0x40
 80074aa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80074ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80074b0:	e841 2300 	strex	r3, r2, [r1]
 80074b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80074b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d1e4      	bne.n	8007486 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	69db      	ldr	r3, [r3, #28]
 80074c2:	f003 0310 	and.w	r3, r3, #16
 80074c6:	2b10      	cmp	r3, #16
 80074c8:	d103      	bne.n	80074d2 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	2210      	movs	r2, #16
 80074d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80074d8:	4619      	mov	r1, r3
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f7fe ff04 	bl	80062e8 <HAL_UARTEx_RxEventCallback>
 80074e0:	e002      	b.n	80074e8 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 fd70 	bl	8007fc8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80074e8:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d006      	beq.n	80074fe <UART_RxISR_8BIT_FIFOEN+0x2aa>
 80074f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80074f4:	f003 0320 	and.w	r3, r3, #32
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	f47f aecf 	bne.w	800729c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007504:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007508:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800750c:	2b00      	cmp	r3, #0
 800750e:	d049      	beq.n	80075a4 <UART_RxISR_8BIT_FIFOEN+0x350>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007516:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800751a:	429a      	cmp	r2, r3
 800751c:	d242      	bcs.n	80075a4 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	3308      	adds	r3, #8
 8007524:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007526:	6a3b      	ldr	r3, [r7, #32]
 8007528:	e853 3f00 	ldrex	r3, [r3]
 800752c:	61fb      	str	r3, [r7, #28]
   return(result);
 800752e:	69fb      	ldr	r3, [r7, #28]
 8007530:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007534:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	3308      	adds	r3, #8
 800753e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007542:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007544:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007546:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007548:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800754a:	e841 2300 	strex	r3, r2, [r1]
 800754e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007552:	2b00      	cmp	r3, #0
 8007554:	d1e3      	bne.n	800751e <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	4a15      	ldr	r2, [pc, #84]	; (80075b0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800755a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	e853 3f00 	ldrex	r3, [r3]
 8007568:	60bb      	str	r3, [r7, #8]
   return(result);
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	f043 0320 	orr.w	r3, r3, #32
 8007570:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	461a      	mov	r2, r3
 800757a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800757e:	61bb      	str	r3, [r7, #24]
 8007580:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007582:	6979      	ldr	r1, [r7, #20]
 8007584:	69ba      	ldr	r2, [r7, #24]
 8007586:	e841 2300 	strex	r3, r2, [r1]
 800758a:	613b      	str	r3, [r7, #16]
   return(result);
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d1e4      	bne.n	800755c <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007592:	e007      	b.n	80075a4 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	699a      	ldr	r2, [r3, #24]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f042 0208 	orr.w	r2, r2, #8
 80075a2:	619a      	str	r2, [r3, #24]
}
 80075a4:	bf00      	nop
 80075a6:	37b0      	adds	r7, #176	; 0xb0
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}
 80075ac:	40008000 	.word	0x40008000
 80075b0:	08006ee5 	.word	0x08006ee5

080075b4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b0ae      	sub	sp, #184	; 0xb8
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80075c2:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	69db      	ldr	r3, [r3, #28]
 80075cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075ea:	2b22      	cmp	r3, #34	; 0x22
 80075ec:	f040 8186 	bne.w	80078fc <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80075f6:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80075fa:	e129      	b.n	8007850 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007602:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800760a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800760e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8007612:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8007616:	4013      	ands	r3, r2
 8007618:	b29a      	uxth	r2, r3
 800761a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800761e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007624:	1c9a      	adds	r2, r3, #2
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007630:	b29b      	uxth	r3, r3
 8007632:	3b01      	subs	r3, #1
 8007634:	b29a      	uxth	r2, r3
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	69db      	ldr	r3, [r3, #28]
 8007642:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007646:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800764a:	f003 0307 	and.w	r3, r3, #7
 800764e:	2b00      	cmp	r3, #0
 8007650:	d053      	beq.n	80076fa <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007652:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007656:	f003 0301 	and.w	r3, r3, #1
 800765a:	2b00      	cmp	r3, #0
 800765c:	d011      	beq.n	8007682 <UART_RxISR_16BIT_FIFOEN+0xce>
 800765e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007666:	2b00      	cmp	r3, #0
 8007668:	d00b      	beq.n	8007682 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	2201      	movs	r2, #1
 8007670:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007678:	f043 0201 	orr.w	r2, r3, #1
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007682:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007686:	f003 0302 	and.w	r3, r3, #2
 800768a:	2b00      	cmp	r3, #0
 800768c:	d011      	beq.n	80076b2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800768e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007692:	f003 0301 	and.w	r3, r3, #1
 8007696:	2b00      	cmp	r3, #0
 8007698:	d00b      	beq.n	80076b2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	2202      	movs	r2, #2
 80076a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076a8:	f043 0204 	orr.w	r2, r3, #4
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80076b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80076b6:	f003 0304 	and.w	r3, r3, #4
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d011      	beq.n	80076e2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80076be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80076c2:	f003 0301 	and.w	r3, r3, #1
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d00b      	beq.n	80076e2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	2204      	movs	r2, #4
 80076d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076d8:	f043 0202 	orr.w	r2, r3, #2
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d006      	beq.n	80076fa <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80076ec:	6878      	ldr	r0, [r7, #4]
 80076ee:	f7fe fdf2 	bl	80062d6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2200      	movs	r2, #0
 80076f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007700:	b29b      	uxth	r3, r3
 8007702:	2b00      	cmp	r3, #0
 8007704:	f040 80a4 	bne.w	8007850 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800770e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007710:	e853 3f00 	ldrex	r3, [r3]
 8007714:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007716:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007718:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800771c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	461a      	mov	r2, r3
 8007726:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800772a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800772e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007730:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007732:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007736:	e841 2300 	strex	r3, r2, [r1]
 800773a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800773c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800773e:	2b00      	cmp	r3, #0
 8007740:	d1e2      	bne.n	8007708 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	3308      	adds	r3, #8
 8007748:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800774a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800774c:	e853 3f00 	ldrex	r3, [r3]
 8007750:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007752:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007754:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007758:	f023 0301 	bic.w	r3, r3, #1
 800775c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	3308      	adds	r3, #8
 8007766:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800776a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800776c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800776e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007770:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007772:	e841 2300 	strex	r3, r2, [r1]
 8007776:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007778:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800777a:	2b00      	cmp	r3, #0
 800777c:	d1e1      	bne.n	8007742 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2220      	movs	r2, #32
 8007782:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2200      	movs	r2, #0
 800778a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2200      	movs	r2, #0
 8007790:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a5f      	ldr	r2, [pc, #380]	; (8007914 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d021      	beq.n	80077e0 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d01a      	beq.n	80077e0 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077b2:	e853 3f00 	ldrex	r3, [r3]
 80077b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80077b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80077be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	461a      	mov	r2, r3
 80077c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80077cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80077ce:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80077d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80077d4:	e841 2300 	strex	r3, r2, [r1]
 80077d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80077da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d1e4      	bne.n	80077aa <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d130      	bne.n	800784a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077f6:	e853 3f00 	ldrex	r3, [r3]
 80077fa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80077fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077fe:	f023 0310 	bic.w	r3, r3, #16
 8007802:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	461a      	mov	r2, r3
 800780c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007810:	647b      	str	r3, [r7, #68]	; 0x44
 8007812:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007814:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007816:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007818:	e841 2300 	strex	r3, r2, [r1]
 800781c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800781e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007820:	2b00      	cmp	r3, #0
 8007822:	d1e4      	bne.n	80077ee <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	69db      	ldr	r3, [r3, #28]
 800782a:	f003 0310 	and.w	r3, r3, #16
 800782e:	2b10      	cmp	r3, #16
 8007830:	d103      	bne.n	800783a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	2210      	movs	r2, #16
 8007838:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007840:	4619      	mov	r1, r3
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f7fe fd50 	bl	80062e8 <HAL_UARTEx_RxEventCallback>
 8007848:	e002      	b.n	8007850 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 fbbc 	bl	8007fc8 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007850:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8007854:	2b00      	cmp	r3, #0
 8007856:	d006      	beq.n	8007866 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8007858:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800785c:	f003 0320 	and.w	r3, r3, #32
 8007860:	2b00      	cmp	r3, #0
 8007862:	f47f aecb 	bne.w	80075fc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800786c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007870:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007874:	2b00      	cmp	r3, #0
 8007876:	d049      	beq.n	800790c <UART_RxISR_16BIT_FIFOEN+0x358>
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800787e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8007882:	429a      	cmp	r2, r3
 8007884:	d242      	bcs.n	800790c <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	3308      	adds	r3, #8
 800788c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800788e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007890:	e853 3f00 	ldrex	r3, [r3]
 8007894:	623b      	str	r3, [r7, #32]
   return(result);
 8007896:	6a3b      	ldr	r3, [r7, #32]
 8007898:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800789c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	3308      	adds	r3, #8
 80078a6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80078aa:	633a      	str	r2, [r7, #48]	; 0x30
 80078ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80078b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078b2:	e841 2300 	strex	r3, r2, [r1]
 80078b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80078b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d1e3      	bne.n	8007886 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	4a15      	ldr	r2, [pc, #84]	; (8007918 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80078c2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	e853 3f00 	ldrex	r3, [r3]
 80078d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f043 0320 	orr.w	r3, r3, #32
 80078d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	461a      	mov	r2, r3
 80078e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80078e6:	61fb      	str	r3, [r7, #28]
 80078e8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ea:	69b9      	ldr	r1, [r7, #24]
 80078ec:	69fa      	ldr	r2, [r7, #28]
 80078ee:	e841 2300 	strex	r3, r2, [r1]
 80078f2:	617b      	str	r3, [r7, #20]
   return(result);
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d1e4      	bne.n	80078c4 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80078fa:	e007      	b.n	800790c <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	699a      	ldr	r2, [r3, #24]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f042 0208 	orr.w	r2, r2, #8
 800790a:	619a      	str	r2, [r3, #24]
}
 800790c:	bf00      	nop
 800790e:	37b8      	adds	r7, #184	; 0xb8
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}
 8007914:	40008000 	.word	0x40008000
 8007918:	0800709d 	.word	0x0800709d

0800791c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800791c:	b480      	push	{r7}
 800791e:	b083      	sub	sp, #12
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007924:	bf00      	nop
 8007926:	370c      	adds	r7, #12
 8007928:	46bd      	mov	sp, r7
 800792a:	bc80      	pop	{r7}
 800792c:	4770      	bx	lr

0800792e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800792e:	b480      	push	{r7}
 8007930:	b083      	sub	sp, #12
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007936:	bf00      	nop
 8007938:	370c      	adds	r7, #12
 800793a:	46bd      	mov	sp, r7
 800793c:	bc80      	pop	{r7}
 800793e:	4770      	bx	lr

08007940 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007940:	b480      	push	{r7}
 8007942:	b083      	sub	sp, #12
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007948:	bf00      	nop
 800794a:	370c      	adds	r7, #12
 800794c:	46bd      	mov	sp, r7
 800794e:	bc80      	pop	{r7}
 8007950:	4770      	bx	lr

08007952 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007952:	b480      	push	{r7}
 8007954:	b085      	sub	sp, #20
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007960:	2b01      	cmp	r3, #1
 8007962:	d101      	bne.n	8007968 <HAL_UARTEx_DisableFifoMode+0x16>
 8007964:	2302      	movs	r3, #2
 8007966:	e027      	b.n	80079b8 <HAL_UARTEx_DisableFifoMode+0x66>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2201      	movs	r2, #1
 800796c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2224      	movs	r2, #36	; 0x24
 8007974:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	681a      	ldr	r2, [r3, #0]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f022 0201 	bic.w	r2, r2, #1
 800798e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007996:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	68fa      	ldr	r2, [r7, #12]
 80079a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2220      	movs	r2, #32
 80079aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2200      	movs	r2, #0
 80079b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80079b6:	2300      	movs	r3, #0
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3714      	adds	r7, #20
 80079bc:	46bd      	mov	sp, r7
 80079be:	bc80      	pop	{r7}
 80079c0:	4770      	bx	lr

080079c2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80079c2:	b580      	push	{r7, lr}
 80079c4:	b084      	sub	sp, #16
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
 80079ca:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d101      	bne.n	80079da <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80079d6:	2302      	movs	r3, #2
 80079d8:	e02d      	b.n	8007a36 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	2201      	movs	r2, #1
 80079de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2224      	movs	r2, #36	; 0x24
 80079e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	681a      	ldr	r2, [r3, #0]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f022 0201 	bic.w	r2, r2, #1
 8007a00:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	689b      	ldr	r3, [r3, #8]
 8007a08:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	683a      	ldr	r2, [r7, #0]
 8007a12:	430a      	orrs	r2, r1
 8007a14:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 f850 	bl	8007abc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	68fa      	ldr	r2, [r7, #12]
 8007a22:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2220      	movs	r2, #32
 8007a28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007a34:	2300      	movs	r3, #0
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3710      	adds	r7, #16
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}

08007a3e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a3e:	b580      	push	{r7, lr}
 8007a40:	b084      	sub	sp, #16
 8007a42:	af00      	add	r7, sp, #0
 8007a44:	6078      	str	r0, [r7, #4]
 8007a46:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d101      	bne.n	8007a56 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007a52:	2302      	movs	r3, #2
 8007a54:	e02d      	b.n	8007ab2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2201      	movs	r2, #1
 8007a5a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2224      	movs	r2, #36	; 0x24
 8007a62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	681a      	ldr	r2, [r3, #0]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f022 0201 	bic.w	r2, r2, #1
 8007a7c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	689b      	ldr	r3, [r3, #8]
 8007a84:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	683a      	ldr	r2, [r7, #0]
 8007a8e:	430a      	orrs	r2, r1
 8007a90:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 f812 	bl	8007abc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	68fa      	ldr	r2, [r7, #12]
 8007a9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2220      	movs	r2, #32
 8007aa4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007ab0:	2300      	movs	r3, #0
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3710      	adds	r7, #16
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}
	...

08007abc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007abc:	b480      	push	{r7}
 8007abe:	b085      	sub	sp, #20
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d108      	bne.n	8007ade <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2201      	movs	r2, #1
 8007ad0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007adc:	e031      	b.n	8007b42 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007ade:	2308      	movs	r3, #8
 8007ae0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007ae2:	2308      	movs	r3, #8
 8007ae4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	689b      	ldr	r3, [r3, #8]
 8007aec:	0e5b      	lsrs	r3, r3, #25
 8007aee:	b2db      	uxtb	r3, r3
 8007af0:	f003 0307 	and.w	r3, r3, #7
 8007af4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	689b      	ldr	r3, [r3, #8]
 8007afc:	0f5b      	lsrs	r3, r3, #29
 8007afe:	b2db      	uxtb	r3, r3
 8007b00:	f003 0307 	and.w	r3, r3, #7
 8007b04:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007b06:	7bbb      	ldrb	r3, [r7, #14]
 8007b08:	7b3a      	ldrb	r2, [r7, #12]
 8007b0a:	4910      	ldr	r1, [pc, #64]	; (8007b4c <UARTEx_SetNbDataToProcess+0x90>)
 8007b0c:	5c8a      	ldrb	r2, [r1, r2]
 8007b0e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007b12:	7b3a      	ldrb	r2, [r7, #12]
 8007b14:	490e      	ldr	r1, [pc, #56]	; (8007b50 <UARTEx_SetNbDataToProcess+0x94>)
 8007b16:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007b18:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b1c:	b29a      	uxth	r2, r3
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007b24:	7bfb      	ldrb	r3, [r7, #15]
 8007b26:	7b7a      	ldrb	r2, [r7, #13]
 8007b28:	4908      	ldr	r1, [pc, #32]	; (8007b4c <UARTEx_SetNbDataToProcess+0x90>)
 8007b2a:	5c8a      	ldrb	r2, [r1, r2]
 8007b2c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007b30:	7b7a      	ldrb	r2, [r7, #13]
 8007b32:	4907      	ldr	r1, [pc, #28]	; (8007b50 <UARTEx_SetNbDataToProcess+0x94>)
 8007b34:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007b36:	fb93 f3f2 	sdiv	r3, r3, r2
 8007b3a:	b29a      	uxth	r2, r3
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007b42:	bf00      	nop
 8007b44:	3714      	adds	r7, #20
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bc80      	pop	{r7}
 8007b4a:	4770      	bx	lr
 8007b4c:	0800dc88 	.word	0x0800dc88
 8007b50:	0800dc90 	.word	0x0800dc90

08007b54 <ReadADCChannel>:
#define CONVERSION_POLL_TIME 10

static uint16_t ReadADCChannel(uint32_t Channel);

static uint16_t ReadADCChannel(uint32_t Channel)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b084      	sub	sp, #16
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
	uint16_t result = 0.00;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	81fb      	strh	r3, [r7, #14]
	HAL_GPIO_WritePin(GPIOB, ADC_SW_Pin, GPIO_PIN_RESET);
 8007b60:	2200      	movs	r2, #0
 8007b62:	2180      	movs	r1, #128	; 0x80
 8007b64:	481b      	ldr	r0, [pc, #108]	; (8007bd4 <ReadADCChannel+0x80>)
 8007b66:	f7fb fb23 	bl	80031b0 <HAL_GPIO_WritePin>
	if (HAL_ADCEx_Calibration_Start(Get_AdcHandle()) != HAL_OK) {
 8007b6a:	f7f9 fe2f 	bl	80017cc <Get_AdcHandle>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	4618      	mov	r0, r3
 8007b72:	f7fa ff56 	bl	8002a22 <HAL_ADCEx_Calibration_Start>
 8007b76:	4603      	mov	r3, r0
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d001      	beq.n	8007b80 <ReadADCChannel+0x2c>
	    Error_Handler();
 8007b7c:	f7f9 fe6a 	bl	8001854 <Error_Handler>
	  }
	HAL_ADC_Start(Get_AdcHandle());
 8007b80:	f7f9 fe24 	bl	80017cc <Get_AdcHandle>
 8007b84:	4603      	mov	r3, r0
 8007b86:	4618      	mov	r0, r3
 8007b88:	f7fa fcf2 	bl	8002570 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(Get_AdcHandle(), HAL_MAX_DELAY);
 8007b8c:	f7f9 fe1e 	bl	80017cc <Get_AdcHandle>
 8007b90:	4603      	mov	r3, r0
 8007b92:	f04f 31ff 	mov.w	r1, #4294967295
 8007b96:	4618      	mov	r0, r3
 8007b98:	f7fa fd30 	bl	80025fc <HAL_ADC_PollForConversion>

	if((HAL_ADC_GetState(Get_AdcHandle()) & HAL_ADC_STATE_EOC_REG) == HAL_ADC_STATE_EOC_REG)
 8007b9c:	f7f9 fe16 	bl	80017cc <Get_AdcHandle>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f7fa fdcd 	bl	8002742 <HAL_ADC_GetState>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007bae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bb2:	d109      	bne.n	8007bc8 <ReadADCChannel+0x74>
	{
		/*##-5- Get the converted value of regular channel  ######################*/
		rawValue = HAL_ADC_GetValue(Get_AdcHandle());
 8007bb4:	f7f9 fe0a 	bl	80017cc <Get_AdcHandle>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f7fa fdb5 	bl	800272a <HAL_ADC_GetValue>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	b29a      	uxth	r2, r3
 8007bc4:	4b04      	ldr	r3, [pc, #16]	; (8007bd8 <ReadADCChannel+0x84>)
 8007bc6:	801a      	strh	r2, [r3, #0]
	}
	return result;
 8007bc8:	89fb      	ldrh	r3, [r7, #14]
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3710      	adds	r7, #16
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}
 8007bd2:	bf00      	nop
 8007bd4:	48000400 	.word	0x48000400
 8007bd8:	20000c4c 	.word	0x20000c4c

08007bdc <AdcRead_VBatt>:


uint16_t AdcRead_VBatt(void)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	af00      	add	r7, sp, #0
	adcResult = ReadADCChannel(ADC_CHANNEL_2);
 8007be0:	4809      	ldr	r0, [pc, #36]	; (8007c08 <AdcRead_VBatt+0x2c>)
 8007be2:	f7ff ffb7 	bl	8007b54 <ReadADCChannel>
 8007be6:	4603      	mov	r3, r0
 8007be8:	4618      	mov	r0, r3
 8007bea:	f7f9 f86b 	bl	8000cc4 <__aeabi_ui2f>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	4a06      	ldr	r2, [pc, #24]	; (8007c0c <AdcRead_VBatt+0x30>)
 8007bf2:	6013      	str	r3, [r2, #0]
	return adcResult;
 8007bf4:	4b05      	ldr	r3, [pc, #20]	; (8007c0c <AdcRead_VBatt+0x30>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	f7f9 f8bb 	bl	8000d74 <__aeabi_f2uiz>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	b29b      	uxth	r3, r3
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	bd80      	pop	{r7, pc}
 8007c06:	bf00      	nop
 8007c08:	08000004 	.word	0x08000004
 8007c0c:	20000c50 	.word	0x20000c50

08007c10 <commandReadDeviceId>:


char DataBuffer[200];

void commandReadDeviceId(char *data)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b096      	sub	sp, #88	; 0x58
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  /* Read MCU Id, 32-bit access */
  uint8_t i;
  char DeviceId[50];
  uint8_t serialNumber[12]={0};
 8007c18:	2300      	movs	r3, #0
 8007c1a:	61bb      	str	r3, [r7, #24]
 8007c1c:	f107 031c 	add.w	r3, r7, #28
 8007c20:	2200      	movs	r2, #0
 8007c22:	601a      	str	r2, [r3, #0]
 8007c24:	605a      	str	r2, [r3, #4]
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = HAL_GetUIDw0();
 8007c26:	f7fa fa07 	bl	8002038 <HAL_GetUIDw0>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	617b      	str	r3, [r7, #20]
  deviceserial1 = HAL_GetUIDw1();
 8007c2e:	f7fa fa0d 	bl	800204c <HAL_GetUIDw1>
 8007c32:	4603      	mov	r3, r0
 8007c34:	613b      	str	r3, [r7, #16]
  deviceserial2 = HAL_GetUIDw2();
 8007c36:	f7fa fa13 	bl	8002060 <HAL_GetUIDw2>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	60fb      	str	r3, [r7, #12]
  memset(serialNumber, 0, 12);
 8007c3e:	f107 0318 	add.w	r3, r7, #24
 8007c42:	220c      	movs	r2, #12
 8007c44:	2100      	movs	r1, #0
 8007c46:	4618      	mov	r0, r3
 8007c48:	f003 f839 	bl	800acbe <memset>
 8007c4c:	697b      	ldr	r3, [r7, #20]
  memcpy(&serialNumber[0], &deviceserial0, 4);
 8007c4e:	61bb      	str	r3, [r7, #24]
 8007c50:	693b      	ldr	r3, [r7, #16]
  memcpy(&serialNumber[4], &deviceserial1, 4);
 8007c52:	61fb      	str	r3, [r7, #28]
 8007c54:	68fb      	ldr	r3, [r7, #12]
  memcpy(&serialNumber[8], &deviceserial2, 4);
 8007c56:	623b      	str	r3, [r7, #32]
  snprintf(DeviceId, sizeof(DeviceId), "OK,STDEVICEID,");
 8007c58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c5c:	4a1e      	ldr	r2, [pc, #120]	; (8007cd8 <commandReadDeviceId+0xc8>)
 8007c5e:	2132      	movs	r1, #50	; 0x32
 8007c60:	4618      	mov	r0, r3
 8007c62:	f003 fd9f 	bl	800b7a4 <sniprintf>
  serialPutStr(DeviceId);
 8007c66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f000 f8ce 	bl	8007e0c <serialPutStr>
  for(i=0; i<12; i++)
 8007c70:	2300      	movs	r3, #0
 8007c72:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8007c76:	e026      	b.n	8007cc6 <commandReadDeviceId+0xb6>
  {
    i < 11 ? snprintf(DeviceId, sizeof(DeviceId), "%x", serialNumber[i]) : snprintf(DeviceId, sizeof(DeviceId), "%d\n", serialNumber[i]);
 8007c78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007c7c:	2b0a      	cmp	r3, #10
 8007c7e:	d80c      	bhi.n	8007c9a <commandReadDeviceId+0x8a>
 8007c80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007c84:	3358      	adds	r3, #88	; 0x58
 8007c86:	443b      	add	r3, r7
 8007c88:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 8007c8c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007c90:	4a12      	ldr	r2, [pc, #72]	; (8007cdc <commandReadDeviceId+0xcc>)
 8007c92:	2132      	movs	r1, #50	; 0x32
 8007c94:	f003 fd86 	bl	800b7a4 <sniprintf>
 8007c98:	e00b      	b.n	8007cb2 <commandReadDeviceId+0xa2>
 8007c9a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007c9e:	3358      	adds	r3, #88	; 0x58
 8007ca0:	443b      	add	r3, r7
 8007ca2:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 8007ca6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007caa:	4a0d      	ldr	r2, [pc, #52]	; (8007ce0 <commandReadDeviceId+0xd0>)
 8007cac:	2132      	movs	r1, #50	; 0x32
 8007cae:	f003 fd79 	bl	800b7a4 <sniprintf>
    serialPutStr(DeviceId);
 8007cb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f000 f8a8 	bl	8007e0c <serialPutStr>
  for(i=0; i<12; i++)
 8007cbc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007cc0:	3301      	adds	r3, #1
 8007cc2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8007cc6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007cca:	2b0b      	cmp	r3, #11
 8007ccc:	d9d4      	bls.n	8007c78 <commandReadDeviceId+0x68>
  }
}
 8007cce:	bf00      	nop
 8007cd0:	bf00      	nop
 8007cd2:	3758      	adds	r7, #88	; 0x58
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	bd80      	pop	{r7, pc}
 8007cd8:	0800dad8 	.word	0x0800dad8
 8007cdc:	0800dae8 	.word	0x0800dae8
 8007ce0:	0800daec 	.word	0x0800daec

08007ce4 <commandReadDeviceBattery>:


void commandReadDeviceBattery(char *data)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b082      	sub	sp, #8
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]

	 serialPutStr("OK,BATTREAD");
 8007cec:	4808      	ldr	r0, [pc, #32]	; (8007d10 <commandReadDeviceBattery+0x2c>)
 8007cee:	f000 f88d 	bl	8007e0c <serialPutStr>
	 sprintf(DataBuffer,"OK,BATTREAD %d",AdcRead_VBatt());
 8007cf2:	f7ff ff73 	bl	8007bdc <AdcRead_VBatt>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	461a      	mov	r2, r3
 8007cfa:	4906      	ldr	r1, [pc, #24]	; (8007d14 <commandReadDeviceBattery+0x30>)
 8007cfc:	4806      	ldr	r0, [pc, #24]	; (8007d18 <commandReadDeviceBattery+0x34>)
 8007cfe:	f003 fd85 	bl	800b80c <siprintf>
	 serialPutStr(DataBuffer);
 8007d02:	4805      	ldr	r0, [pc, #20]	; (8007d18 <commandReadDeviceBattery+0x34>)
 8007d04:	f000 f882 	bl	8007e0c <serialPutStr>
}
 8007d08:	bf00      	nop
 8007d0a:	3708      	adds	r7, #8
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}
 8007d10:	0800daf0 	.word	0x0800daf0
 8007d14:	0800dafc 	.word	0x0800dafc
 8007d18:	20000c54 	.word	0x20000c54

08007d1c <commandInvalid>:

void commandInvalid(char *data)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b082      	sub	sp, #8
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  serialPutStr("ERROR,Invalid Command Handler!\n");
 8007d24:	4803      	ldr	r0, [pc, #12]	; (8007d34 <commandInvalid+0x18>)
 8007d26:	f000 f871 	bl	8007e0c <serialPutStr>
}
 8007d2a:	bf00      	nop
 8007d2c:	3708      	adds	r7, #8
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}
 8007d32:	bf00      	nop
 8007d34:	0800db0c 	.word	0x0800db0c

08007d38 <commandGetTime>:

char dateTime[100];
void commandGetTime(char *data)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b082      	sub	sp, #8
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
	RTC_TimeShow(dateTime);
 8007d40:	4806      	ldr	r0, [pc, #24]	; (8007d5c <commandGetTime+0x24>)
 8007d42:	f000 f825 	bl	8007d90 <RTC_TimeShow>
	serialPutStr("OK,GETTIME\n");
 8007d46:	4806      	ldr	r0, [pc, #24]	; (8007d60 <commandGetTime+0x28>)
 8007d48:	f000 f860 	bl	8007e0c <serialPutStr>
	serialPutStr(dateTime);
 8007d4c:	4803      	ldr	r0, [pc, #12]	; (8007d5c <commandGetTime+0x24>)
 8007d4e:	f000 f85d 	bl	8007e0c <serialPutStr>

}
 8007d52:	bf00      	nop
 8007d54:	3708      	adds	r7, #8
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}
 8007d5a:	bf00      	nop
 8007d5c:	20000d1c 	.word	0x20000d1c
 8007d60:	0800db2c 	.word	0x0800db2c

08007d64 <commandGetDate>:

void commandGetDate(char *data)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b082      	sub	sp, #8
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
	RTC_DateShow(dateTime);
 8007d6c:	4806      	ldr	r0, [pc, #24]	; (8007d88 <commandGetDate+0x24>)
 8007d6e:	f000 f82d 	bl	8007dcc <RTC_DateShow>
    serialPutStr("OK,GETDATE\n");
 8007d72:	4806      	ldr	r0, [pc, #24]	; (8007d8c <commandGetDate+0x28>)
 8007d74:	f000 f84a 	bl	8007e0c <serialPutStr>
    serialPutStr(dateTime);
 8007d78:	4803      	ldr	r0, [pc, #12]	; (8007d88 <commandGetDate+0x24>)
 8007d7a:	f000 f847 	bl	8007e0c <serialPutStr>
}
 8007d7e:	bf00      	nop
 8007d80:	3708      	adds	r7, #8
 8007d82:	46bd      	mov	sp, r7
 8007d84:	bd80      	pop	{r7, pc}
 8007d86:	bf00      	nop
 8007d88:	20000d1c 	.word	0x20000d1c
 8007d8c:	0800db38 	.word	0x0800db38

08007d90 <RTC_TimeShow>:
  * @brief  Display the current time.
  * @param  showtime : pointer to buffer
  * @retval None
  */
void RTC_TimeShow(char *showtime)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b08a      	sub	sp, #40	; 0x28
 8007d94:	af02      	add	r7, sp, #8
 8007d96:	6078      	str	r0, [r7, #4]

  RTC_TimeTypeDef stimestructureget;
  /* Get the RTC current Time */
  HAL_RTC_GetTime(Get_RtcHandle(), &stimestructureget, RTC_FORMAT_BIN);
 8007d98:	f7f9 fd36 	bl	8001808 <Get_RtcHandle>
 8007d9c:	f107 030c 	add.w	r3, r7, #12
 8007da0:	2200      	movs	r2, #0
 8007da2:	4619      	mov	r1, r3
 8007da4:	f7fc ff84 	bl	8004cb0 <HAL_RTC_GetTime>

  /* Display time Format : hh:mm:ss */
  sprintf((char *)showtime, "%02d:%02d:%02d", stimestructureget.Hours, stimestructureget.Minutes, stimestructureget.Seconds);
 8007da8:	7b3b      	ldrb	r3, [r7, #12]
 8007daa:	461a      	mov	r2, r3
 8007dac:	7b7b      	ldrb	r3, [r7, #13]
 8007dae:	4619      	mov	r1, r3
 8007db0:	7bbb      	ldrb	r3, [r7, #14]
 8007db2:	9300      	str	r3, [sp, #0]
 8007db4:	460b      	mov	r3, r1
 8007db6:	4904      	ldr	r1, [pc, #16]	; (8007dc8 <RTC_TimeShow+0x38>)
 8007db8:	6878      	ldr	r0, [r7, #4]
 8007dba:	f003 fd27 	bl	800b80c <siprintf>
}
 8007dbe:	bf00      	nop
 8007dc0:	3720      	adds	r7, #32
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}
 8007dc6:	bf00      	nop
 8007dc8:	0800db44 	.word	0x0800db44

08007dcc <RTC_DateShow>:
  * @brief  Display the current time.
  * @param  showtime : pointer to buffer
  * @retval None
  */
void RTC_DateShow(char *showdate)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b086      	sub	sp, #24
 8007dd0:	af02      	add	r7, sp, #8
 8007dd2:	6078      	str	r0, [r7, #4]
  RTC_DateTypeDef sdatestructureget;

  /* Get the RTC current Date */
  HAL_RTC_GetDate(Get_RtcHandle(), &sdatestructureget, RTC_FORMAT_BIN);
 8007dd4:	f7f9 fd18 	bl	8001808 <Get_RtcHandle>
 8007dd8:	f107 030c 	add.w	r3, r7, #12
 8007ddc:	2200      	movs	r2, #0
 8007dde:	4619      	mov	r1, r3
 8007de0:	f7fd f84e 	bl	8004e80 <HAL_RTC_GetDate>
  /* Display date Format: mm-dd-yy */
  sprintf((char *)showdate, "%02d:%02d:%02d", sdatestructureget.Date, sdatestructureget.Month, 2000 + sdatestructureget.Year);
 8007de4:	7bbb      	ldrb	r3, [r7, #14]
 8007de6:	461a      	mov	r2, r3
 8007de8:	7b7b      	ldrb	r3, [r7, #13]
 8007dea:	4619      	mov	r1, r3
 8007dec:	7bfb      	ldrb	r3, [r7, #15]
 8007dee:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8007df2:	9300      	str	r3, [sp, #0]
 8007df4:	460b      	mov	r3, r1
 8007df6:	4904      	ldr	r1, [pc, #16]	; (8007e08 <RTC_DateShow+0x3c>)
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f003 fd07 	bl	800b80c <siprintf>
}
 8007dfe:	bf00      	nop
 8007e00:	3710      	adds	r7, #16
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	bf00      	nop
 8007e08:	0800db44 	.word	0x0800db44

08007e0c <serialPutStr>:

#include "Uart.h"


void serialPutStr(const char *data)
{
 8007e0c:	b590      	push	{r4, r7, lr}
 8007e0e:	b083      	sub	sp, #12
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
   //Get exclusive access
  //osAcquireMutex(&uartMutex);
  HAL_UART_Transmit(Get_DebugHandle(),(uint8_t *)data, strlen(data),DEBUG_UART_TIMEOUT);
 8007e14:	f7f9 fce4 	bl	80017e0 <Get_DebugHandle>
 8007e18:	4604      	mov	r4, r0
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f7f8 f9b0 	bl	8000180 <strlen>
 8007e20:	4603      	mov	r3, r0
 8007e22:	b29a      	uxth	r2, r3
 8007e24:	230a      	movs	r3, #10
 8007e26:	6879      	ldr	r1, [r7, #4]
 8007e28:	4620      	mov	r0, r4
 8007e2a:	f7fd fe55 	bl	8005ad8 <HAL_UART_Transmit>
  //osReleaseMutex(&uartMutex);

}
 8007e2e:	bf00      	nop
 8007e30:	370c      	adds	r7, #12
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd90      	pop	{r4, r7, pc}
	...

08007e38 <terminalTaskHandler>:



/* USER CODE END Header_terminalTaskHandler */
void terminalTaskHandler(void const * argument)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b084      	sub	sp, #16
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	int tCommandReady = 0;
 8007e40:	2300      	movs	r3, #0
 8007e42:	60fb      	str	r3, [r7, #12]
	char tRxedChar;
	HAL_UART_Receive_IT(Get_DebugHandle(),(uint8_t*)uartData,UART_RECEIVE_SIZE);
 8007e44:	f7f9 fccc 	bl	80017e0 <Get_DebugHandle>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	4911      	ldr	r1, [pc, #68]	; (8007e94 <terminalTaskHandler+0x5c>)
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f7fd fec8 	bl	8005be4 <HAL_UART_Receive_IT>
	//HAL_UART_Receive_IT(Get_SonarHandle(),(uint8_t*)uartSonic,UART_RECEIVE_SIZE);

	/* Infinite loop */
	serialPutStr("Terminal Thread Initialized");
 8007e54:	4810      	ldr	r0, [pc, #64]	; (8007e98 <terminalTaskHandler+0x60>)
 8007e56:	f7ff ffd9 	bl	8007e0c <serialPutStr>
	for(;;)
	{
		/* Process Terminal Commands */
		if(xQueueReceive(Get_TerminalQueueHandle(),&tRxedChar,QUEUE_TIMEOUT))
 8007e5a:	f7f9 fcdf 	bl	800181c <Get_TerminalQueueHandle>
 8007e5e:	f107 030b 	add.w	r3, r7, #11
 8007e62:	220a      	movs	r2, #10
 8007e64:	4619      	mov	r1, r3
 8007e66:	f000 fd79 	bl	800895c <xQueueReceive>
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d00c      	beq.n	8007e8a <terminalTaskHandler+0x52>
		{
			tCommandReady = CommandLineBuildCommand(tRxedChar);
 8007e70:	7afb      	ldrb	r3, [r7, #11]
 8007e72:	4618      	mov	r0, r3
 8007e74:	f000 f814 	bl	8007ea0 <CommandLineBuildCommand>
 8007e78:	60f8      	str	r0, [r7, #12]
			if(tCommandReady)
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d004      	beq.n	8007e8a <terminalTaskHandler+0x52>
			{
				CommandLineProcessCommand(gCommandBuffer);
 8007e80:	4806      	ldr	r0, [pc, #24]	; (8007e9c <terminalTaskHandler+0x64>)
 8007e82:	f000 f855 	bl	8007f30 <CommandLineProcessCommand>
				tCommandReady = 0;
 8007e86:	2300      	movs	r3, #0
 8007e88:	60fb      	str	r3, [r7, #12]
			}
		}
		osDelay(1);
 8007e8a:	2001      	movs	r0, #1
 8007e8c:	f000 f940 	bl	8008110 <osDelay>
		if(xQueueReceive(Get_TerminalQueueHandle(),&tRxedChar,QUEUE_TIMEOUT))
 8007e90:	e7e3      	b.n	8007e5a <terminalTaskHandler+0x22>
 8007e92:	bf00      	nop
 8007e94:	20000d84 	.word	0x20000d84
 8007e98:	0800db7c 	.word	0x0800db7c
 8007e9c:	20000d8c 	.word	0x20000d8c

08007ea0 <CommandLineBuildCommand>:
}


static uint16_t commandBuilderIdx = 0;
int CommandLineBuildCommand(char nextChar)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b083      	sub	sp, #12
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	71fb      	strb	r3, [r7, #7]
	/* Don't store any new line characters or spaces. */
	if ((nextChar == '\n') || (nextChar == ' ') || (nextChar == '\t'))
 8007eaa:	79fb      	ldrb	r3, [r7, #7]
 8007eac:	2b0a      	cmp	r3, #10
 8007eae:	d005      	beq.n	8007ebc <CommandLineBuildCommand+0x1c>
 8007eb0:	79fb      	ldrb	r3, [r7, #7]
 8007eb2:	2b20      	cmp	r3, #32
 8007eb4:	d002      	beq.n	8007ebc <CommandLineBuildCommand+0x1c>
 8007eb6:	79fb      	ldrb	r3, [r7, #7]
 8007eb8:	2b09      	cmp	r3, #9
 8007eba:	d101      	bne.n	8007ec0 <CommandLineBuildCommand+0x20>
	{
		return false;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	e02d      	b.n	8007f1c <CommandLineBuildCommand+0x7c>
	}
	/* The completed command has been received. Replace the final carriage
	 * return character with a NULL character to help with processing the
	 * command. */
	if (nextChar == '\r')
 8007ec0:	79fb      	ldrb	r3, [r7, #7]
 8007ec2:	2b0d      	cmp	r3, #13
 8007ec4:	d10a      	bne.n	8007edc <CommandLineBuildCommand+0x3c>
	{
		gCommandBuffer[commandBuilderIdx] = '\0';
 8007ec6:	4b18      	ldr	r3, [pc, #96]	; (8007f28 <CommandLineBuildCommand+0x88>)
 8007ec8:	881b      	ldrh	r3, [r3, #0]
 8007eca:	461a      	mov	r2, r3
 8007ecc:	4b17      	ldr	r3, [pc, #92]	; (8007f2c <CommandLineBuildCommand+0x8c>)
 8007ece:	2100      	movs	r1, #0
 8007ed0:	5499      	strb	r1, [r3, r2]
		commandBuilderIdx = 0;
 8007ed2:	4b15      	ldr	r3, [pc, #84]	; (8007f28 <CommandLineBuildCommand+0x88>)
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	801a      	strh	r2, [r3, #0]
		return true;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	e01f      	b.n	8007f1c <CommandLineBuildCommand+0x7c>
	}
	/* Convert the incoming character to uppercase. This matches the case
	 * of commands in the command table. Then store the received character
	 * in the command buffer. */
	gCommandBuffer[commandBuilderIdx] = TO_UPPER(nextChar);
 8007edc:	79fb      	ldrb	r3, [r7, #7]
 8007ede:	2b60      	cmp	r3, #96	; 0x60
 8007ee0:	d906      	bls.n	8007ef0 <CommandLineBuildCommand+0x50>
 8007ee2:	79fb      	ldrb	r3, [r7, #7]
 8007ee4:	2b7a      	cmp	r3, #122	; 0x7a
 8007ee6:	d803      	bhi.n	8007ef0 <CommandLineBuildCommand+0x50>
 8007ee8:	79fb      	ldrb	r3, [r7, #7]
 8007eea:	3b20      	subs	r3, #32
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	e000      	b.n	8007ef2 <CommandLineBuildCommand+0x52>
 8007ef0:	79fb      	ldrb	r3, [r7, #7]
 8007ef2:	4a0d      	ldr	r2, [pc, #52]	; (8007f28 <CommandLineBuildCommand+0x88>)
 8007ef4:	8812      	ldrh	r2, [r2, #0]
 8007ef6:	4611      	mov	r1, r2
 8007ef8:	4a0c      	ldr	r2, [pc, #48]	; (8007f2c <CommandLineBuildCommand+0x8c>)
 8007efa:	5453      	strb	r3, [r2, r1]
	commandBuilderIdx++;
 8007efc:	4b0a      	ldr	r3, [pc, #40]	; (8007f28 <CommandLineBuildCommand+0x88>)
 8007efe:	881b      	ldrh	r3, [r3, #0]
 8007f00:	3301      	adds	r3, #1
 8007f02:	b29a      	uxth	r2, r3
 8007f04:	4b08      	ldr	r3, [pc, #32]	; (8007f28 <CommandLineBuildCommand+0x88>)
 8007f06:	801a      	strh	r2, [r3, #0]
	/* If the command is too long, reset the index and process
	 * the current command buffer. */
	if (commandBuilderIdx >= MAX_COMMAND_LEN)
 8007f08:	4b07      	ldr	r3, [pc, #28]	; (8007f28 <CommandLineBuildCommand+0x88>)
 8007f0a:	881b      	ldrh	r3, [r3, #0]
 8007f0c:	2b77      	cmp	r3, #119	; 0x77
 8007f0e:	d904      	bls.n	8007f1a <CommandLineBuildCommand+0x7a>
	{
		commandBuilderIdx = 0;
 8007f10:	4b05      	ldr	r3, [pc, #20]	; (8007f28 <CommandLineBuildCommand+0x88>)
 8007f12:	2200      	movs	r2, #0
 8007f14:	801a      	strh	r2, [r3, #0]
		return true;
 8007f16:	2301      	movs	r3, #1
 8007f18:	e000      	b.n	8007f1c <CommandLineBuildCommand+0x7c>
	}

	return false;
 8007f1a:	2300      	movs	r3, #0

}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	370c      	adds	r7, #12
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bc80      	pop	{r7}
 8007f24:	4770      	bx	lr
 8007f26:	bf00      	nop
 8007f28:	20000e70 	.word	0x20000e70
 8007f2c:	20000d8c 	.word	0x20000d8c

08007f30 <CommandLineProcessCommand>:

void CommandLineProcessCommand(char * buffer)
{
 8007f30:	b590      	push	{r4, r7, lr}
 8007f32:	b087      	sub	sp, #28
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]

	int idx;
	int CommandFound = false;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	613b      	str	r3, [r7, #16]
	//char *Com= strtok(buffer,"+");
	char *Arg = strtok(NULL,"+");
 8007f3c:	491e      	ldr	r1, [pc, #120]	; (8007fb8 <CommandLineProcessCommand+0x88>)
 8007f3e:	2000      	movs	r0, #0
 8007f40:	f003 fcdc 	bl	800b8fc <strtok>
 8007f44:	60f8      	str	r0, [r7, #12]

	/* Search for the command in the command table until it is found or
	 * the end of the table is reached. If the command is found, break
	 * out of the loop. */
	for (idx = 0; gCommandTable[idx].name != NULL; idx++)
 8007f46:	2300      	movs	r3, #0
 8007f48:	617b      	str	r3, [r7, #20]
 8007f4a:	e020      	b.n	8007f8e <CommandLineProcessCommand+0x5e>
	{
		if (strncmp(gCommandTable[idx].name, buffer,strlen(gCommandTable[idx].name)) == 0)
 8007f4c:	4a1b      	ldr	r2, [pc, #108]	; (8007fbc <CommandLineProcessCommand+0x8c>)
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 8007f54:	4a19      	ldr	r2, [pc, #100]	; (8007fbc <CommandLineProcessCommand+0x8c>)
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f7f8 f90f 	bl	8000180 <strlen>
 8007f62:	4603      	mov	r3, r0
 8007f64:	461a      	mov	r2, r3
 8007f66:	6879      	ldr	r1, [r7, #4]
 8007f68:	4620      	mov	r0, r4
 8007f6a:	f003 fcb2 	bl	800b8d2 <strncmp>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d109      	bne.n	8007f88 <CommandLineProcessCommand+0x58>
		{
			CommandFound = true;
 8007f74:	2301      	movs	r3, #1
 8007f76:	613b      	str	r3, [r7, #16]
			(*gCommandTable[idx].function)(Arg);
 8007f78:	4a10      	ldr	r2, [pc, #64]	; (8007fbc <CommandLineProcessCommand+0x8c>)
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	00db      	lsls	r3, r3, #3
 8007f7e:	4413      	add	r3, r2
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	68f8      	ldr	r0, [r7, #12]
 8007f84:	4798      	blx	r3
			break;
 8007f86:	e008      	b.n	8007f9a <CommandLineProcessCommand+0x6a>
	for (idx = 0; gCommandTable[idx].name != NULL; idx++)
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	3301      	adds	r3, #1
 8007f8c:	617b      	str	r3, [r7, #20]
 8007f8e:	4a0b      	ldr	r2, [pc, #44]	; (8007fbc <CommandLineProcessCommand+0x8c>)
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d1d8      	bne.n	8007f4c <CommandLineProcessCommand+0x1c>
		}
	}
	/* If the command was found, call the command function. Otherwise,
	 * output an error message.*/
	if (CommandFound==false)
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d107      	bne.n	8007fb0 <CommandLineProcessCommand+0x80>
	{
		snprintf(TerminalMsgBuffer, sizeof(TerminalMsgBuffer), "ERROR,Command not found\n");
 8007fa0:	4a07      	ldr	r2, [pc, #28]	; (8007fc0 <CommandLineProcessCommand+0x90>)
 8007fa2:	2164      	movs	r1, #100	; 0x64
 8007fa4:	4807      	ldr	r0, [pc, #28]	; (8007fc4 <CommandLineProcessCommand+0x94>)
 8007fa6:	f003 fbfd 	bl	800b7a4 <sniprintf>
		serialPutStr(TerminalMsgBuffer);
 8007faa:	4806      	ldr	r0, [pc, #24]	; (8007fc4 <CommandLineProcessCommand+0x94>)
 8007fac:	f7ff ff2e 	bl	8007e0c <serialPutStr>
	}
}
 8007fb0:	bf00      	nop
 8007fb2:	371c      	adds	r7, #28
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd90      	pop	{r4, r7, pc}
 8007fb8:	0800db98 	.word	0x0800db98
 8007fbc:	0800dc98 	.word	0x0800dc98
 8007fc0:	0800db9c 	.word	0x0800db9c
 8007fc4:	20000e08 	.word	0x20000e08

08007fc8 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b082      	sub	sp, #8
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]

	if(huart->Instance==USART2)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	4a13      	ldr	r2, [pc, #76]	; (8008024 <HAL_UART_RxCpltCallback+0x5c>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d112      	bne.n	8008000 <HAL_UART_RxCpltCallback+0x38>
	{
		HAL_UART_Receive_IT(Get_DebugHandle(),(uint8_t*)uartData,UART_RECEIVE_SIZE);
 8007fda:	f7f9 fc01 	bl	80017e0 <Get_DebugHandle>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	2201      	movs	r2, #1
 8007fe2:	4911      	ldr	r1, [pc, #68]	; (8008028 <HAL_UART_RxCpltCallback+0x60>)
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f7fd fdfd 	bl	8005be4 <HAL_UART_Receive_IT>
		cValuetoPost = (char)uartData[0];
 8007fea:	4b0f      	ldr	r3, [pc, #60]	; (8008028 <HAL_UART_RxCpltCallback+0x60>)
 8007fec:	781a      	ldrb	r2, [r3, #0]
 8007fee:	4b0f      	ldr	r3, [pc, #60]	; (800802c <HAL_UART_RxCpltCallback+0x64>)
 8007ff0:	701a      	strb	r2, [r3, #0]
		xQueueSendToBackFromISR(Get_TerminalQueueHandle(),(void*)&cValuetoPost,&xHigherPrioritTaskWoken);
 8007ff2:	f7f9 fc13 	bl	800181c <Get_TerminalQueueHandle>
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	4a0d      	ldr	r2, [pc, #52]	; (8008030 <HAL_UART_RxCpltCallback+0x68>)
 8007ffa:	490c      	ldr	r1, [pc, #48]	; (800802c <HAL_UART_RxCpltCallback+0x64>)
 8007ffc:	f000 fc16 	bl	800882c <xQueueGenericSendFromISR>
	}
	if(huart->Instance==LPUART1)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a0b      	ldr	r2, [pc, #44]	; (8008034 <HAL_UART_RxCpltCallback+0x6c>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d107      	bne.n	800801a <HAL_UART_RxCpltCallback+0x52>
	{
		HAL_UART_Receive_IT(Get_SonarHandle(),(uint8_t*)uartSonic,UART_RECEIVE_SIZE);
 800800a:	f7f9 fbf3 	bl	80017f4 <Get_SonarHandle>
 800800e:	4603      	mov	r3, r0
 8008010:	2201      	movs	r2, #1
 8008012:	4909      	ldr	r1, [pc, #36]	; (8008038 <HAL_UART_RxCpltCallback+0x70>)
 8008014:	4618      	mov	r0, r3
 8008016:	f7fd fde5 	bl	8005be4 <HAL_UART_Receive_IT>
		//cValuetoPost = (char)uartData[0];
		//xQueueSendToBackFromISR(Get_TerminalQueueHandle(),(void*)&cValuetoPost,&xHigherPrioritTaskWoken);
	}
	//HAL_UART_Receive_IT(Get_SonarHandle(),(uint8_t*)uartSonic,UART_RECEIVE_SIZE);
}
 800801a:	bf00      	nop
 800801c:	3708      	adds	r7, #8
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
 8008022:	bf00      	nop
 8008024:	40004400 	.word	0x40004400
 8008028:	20000d84 	.word	0x20000d84
 800802c:	20000d80 	.word	0x20000d80
 8008030:	20000e6c 	.word	0x20000e6c
 8008034:	40008000 	.word	0x40008000
 8008038:	20000d88 	.word	0x20000d88

0800803c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800803c:	b480      	push	{r7}
 800803e:	b085      	sub	sp, #20
 8008040:	af00      	add	r7, sp, #0
 8008042:	4603      	mov	r3, r0
 8008044:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008046:	2300      	movs	r3, #0
 8008048:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800804a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800804e:	2b84      	cmp	r3, #132	; 0x84
 8008050:	d005      	beq.n	800805e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008052:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	4413      	add	r3, r2
 800805a:	3303      	adds	r3, #3
 800805c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800805e:	68fb      	ldr	r3, [r7, #12]
}
 8008060:	4618      	mov	r0, r3
 8008062:	3714      	adds	r7, #20
 8008064:	46bd      	mov	sp, r7
 8008066:	bc80      	pop	{r7}
 8008068:	4770      	bx	lr

0800806a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800806a:	b580      	push	{r7, lr}
 800806c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800806e:	f001 f89f 	bl	80091b0 <vTaskStartScheduler>
  
  return osOK;
 8008072:	2300      	movs	r3, #0
}
 8008074:	4618      	mov	r0, r3
 8008076:	bd80      	pop	{r7, pc}

08008078 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008078:	b5f0      	push	{r4, r5, r6, r7, lr}
 800807a:	b089      	sub	sp, #36	; 0x24
 800807c:	af04      	add	r7, sp, #16
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	695b      	ldr	r3, [r3, #20]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d020      	beq.n	80080cc <osThreadCreate+0x54>
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	699b      	ldr	r3, [r3, #24]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d01c      	beq.n	80080cc <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	685c      	ldr	r4, [r3, #4]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681d      	ldr	r5, [r3, #0]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	691e      	ldr	r6, [r3, #16]
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80080a4:	4618      	mov	r0, r3
 80080a6:	f7ff ffc9 	bl	800803c <makeFreeRtosPriority>
 80080aa:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	695b      	ldr	r3, [r3, #20]
 80080b0:	687a      	ldr	r2, [r7, #4]
 80080b2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80080b4:	9202      	str	r2, [sp, #8]
 80080b6:	9301      	str	r3, [sp, #4]
 80080b8:	9100      	str	r1, [sp, #0]
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	4632      	mov	r2, r6
 80080be:	4629      	mov	r1, r5
 80080c0:	4620      	mov	r0, r4
 80080c2:	f000 fe97 	bl	8008df4 <xTaskCreateStatic>
 80080c6:	4603      	mov	r3, r0
 80080c8:	60fb      	str	r3, [r7, #12]
 80080ca:	e01c      	b.n	8008106 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	685c      	ldr	r4, [r3, #4]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80080d8:	b29e      	uxth	r6, r3
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80080e0:	4618      	mov	r0, r3
 80080e2:	f7ff ffab 	bl	800803c <makeFreeRtosPriority>
 80080e6:	4602      	mov	r2, r0
 80080e8:	f107 030c 	add.w	r3, r7, #12
 80080ec:	9301      	str	r3, [sp, #4]
 80080ee:	9200      	str	r2, [sp, #0]
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	4632      	mov	r2, r6
 80080f4:	4629      	mov	r1, r5
 80080f6:	4620      	mov	r0, r4
 80080f8:	f000 fed9 	bl	8008eae <xTaskCreate>
 80080fc:	4603      	mov	r3, r0
 80080fe:	2b01      	cmp	r3, #1
 8008100:	d001      	beq.n	8008106 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008102:	2300      	movs	r3, #0
 8008104:	e000      	b.n	8008108 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8008106:	68fb      	ldr	r3, [r7, #12]
}
 8008108:	4618      	mov	r0, r3
 800810a:	3714      	adds	r7, #20
 800810c:	46bd      	mov	sp, r7
 800810e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008110 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d001      	beq.n	8008126 <osDelay+0x16>
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	e000      	b.n	8008128 <osDelay+0x18>
 8008126:	2301      	movs	r3, #1
 8008128:	4618      	mov	r0, r3
 800812a:	f001 f80d 	bl	8009148 <vTaskDelay>
  
  return osOK;
 800812e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008130:	4618      	mov	r0, r3
 8008132:	3710      	adds	r7, #16
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b082      	sub	sp, #8
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	685b      	ldr	r3, [r3, #4]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d007      	beq.n	8008158 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	4619      	mov	r1, r3
 800814e:	2001      	movs	r0, #1
 8008150:	f000 fa53 	bl	80085fa <xQueueCreateMutexStatic>
 8008154:	4603      	mov	r3, r0
 8008156:	e003      	b.n	8008160 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8008158:	2001      	movs	r0, #1
 800815a:	f000 fa36 	bl	80085ca <xQueueCreateMutex>
 800815e:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8008160:	4618      	mov	r0, r3
 8008162:	3708      	adds	r7, #8
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8008168:	b590      	push	{r4, r7, lr}
 800816a:	b085      	sub	sp, #20
 800816c:	af02      	add	r7, sp, #8
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	689b      	ldr	r3, [r3, #8]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d011      	beq.n	800819e <osMessageCreate+0x36>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	68db      	ldr	r3, [r3, #12]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d00d      	beq.n	800819e <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6818      	ldr	r0, [r3, #0]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6859      	ldr	r1, [r3, #4]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	689a      	ldr	r2, [r3, #8]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	68db      	ldr	r3, [r3, #12]
 8008192:	2400      	movs	r4, #0
 8008194:	9400      	str	r4, [sp, #0]
 8008196:	f000 f927 	bl	80083e8 <xQueueGenericCreateStatic>
 800819a:	4603      	mov	r3, r0
 800819c:	e008      	b.n	80081b0 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6818      	ldr	r0, [r3, #0]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	2200      	movs	r2, #0
 80081a8:	4619      	mov	r1, r3
 80081aa:	f000 f995 	bl	80084d8 <xQueueGenericCreate>
 80081ae:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80081b0:	4618      	mov	r0, r3
 80081b2:	370c      	adds	r7, #12
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd90      	pop	{r4, r7, pc}

080081b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80081b8:	b480      	push	{r7}
 80081ba:	b083      	sub	sp, #12
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	f103 0208 	add.w	r2, r3, #8
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f04f 32ff 	mov.w	r2, #4294967295
 80081d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f103 0208 	add.w	r2, r3, #8
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f103 0208 	add.w	r2, r3, #8
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	2200      	movs	r2, #0
 80081ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80081ec:	bf00      	nop
 80081ee:	370c      	adds	r7, #12
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bc80      	pop	{r7}
 80081f4:	4770      	bx	lr

080081f6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80081f6:	b480      	push	{r7}
 80081f8:	b083      	sub	sp, #12
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2200      	movs	r2, #0
 8008202:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008204:	bf00      	nop
 8008206:	370c      	adds	r7, #12
 8008208:	46bd      	mov	sp, r7
 800820a:	bc80      	pop	{r7}
 800820c:	4770      	bx	lr

0800820e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800820e:	b480      	push	{r7}
 8008210:	b085      	sub	sp, #20
 8008212:	af00      	add	r7, sp, #0
 8008214:	6078      	str	r0, [r7, #4]
 8008216:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	68fa      	ldr	r2, [r7, #12]
 8008222:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	689a      	ldr	r2, [r3, #8]
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	689b      	ldr	r3, [r3, #8]
 8008230:	683a      	ldr	r2, [r7, #0]
 8008232:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	683a      	ldr	r2, [r7, #0]
 8008238:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	687a      	ldr	r2, [r7, #4]
 800823e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	1c5a      	adds	r2, r3, #1
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	601a      	str	r2, [r3, #0]
}
 800824a:	bf00      	nop
 800824c:	3714      	adds	r7, #20
 800824e:	46bd      	mov	sp, r7
 8008250:	bc80      	pop	{r7}
 8008252:	4770      	bx	lr

08008254 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008254:	b480      	push	{r7}
 8008256:	b085      	sub	sp, #20
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800826a:	d103      	bne.n	8008274 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	691b      	ldr	r3, [r3, #16]
 8008270:	60fb      	str	r3, [r7, #12]
 8008272:	e00c      	b.n	800828e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	3308      	adds	r3, #8
 8008278:	60fb      	str	r3, [r7, #12]
 800827a:	e002      	b.n	8008282 <vListInsert+0x2e>
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	60fb      	str	r3, [r7, #12]
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	68ba      	ldr	r2, [r7, #8]
 800828a:	429a      	cmp	r2, r3
 800828c:	d2f6      	bcs.n	800827c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	685a      	ldr	r2, [r3, #4]
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	683a      	ldr	r2, [r7, #0]
 800829c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	68fa      	ldr	r2, [r7, #12]
 80082a2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	683a      	ldr	r2, [r7, #0]
 80082a8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	687a      	ldr	r2, [r7, #4]
 80082ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	1c5a      	adds	r2, r3, #1
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	601a      	str	r2, [r3, #0]
}
 80082ba:	bf00      	nop
 80082bc:	3714      	adds	r7, #20
 80082be:	46bd      	mov	sp, r7
 80082c0:	bc80      	pop	{r7}
 80082c2:	4770      	bx	lr

080082c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80082c4:	b480      	push	{r7}
 80082c6:	b085      	sub	sp, #20
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	691b      	ldr	r3, [r3, #16]
 80082d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	685b      	ldr	r3, [r3, #4]
 80082d6:	687a      	ldr	r2, [r7, #4]
 80082d8:	6892      	ldr	r2, [r2, #8]
 80082da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	689b      	ldr	r3, [r3, #8]
 80082e0:	687a      	ldr	r2, [r7, #4]
 80082e2:	6852      	ldr	r2, [r2, #4]
 80082e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	685b      	ldr	r3, [r3, #4]
 80082ea:	687a      	ldr	r2, [r7, #4]
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d103      	bne.n	80082f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	689a      	ldr	r2, [r3, #8]
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2200      	movs	r2, #0
 80082fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	1e5a      	subs	r2, r3, #1
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
}
 800830c:	4618      	mov	r0, r3
 800830e:	3714      	adds	r7, #20
 8008310:	46bd      	mov	sp, r7
 8008312:	bc80      	pop	{r7}
 8008314:	4770      	bx	lr
	...

08008318 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b084      	sub	sp, #16
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d10a      	bne.n	8008342 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800832c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008330:	f383 8811 	msr	BASEPRI, r3
 8008334:	f3bf 8f6f 	isb	sy
 8008338:	f3bf 8f4f 	dsb	sy
 800833c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800833e:	bf00      	nop
 8008340:	e7fe      	b.n	8008340 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008342:	f002 f8b3 	bl	800a4ac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681a      	ldr	r2, [r3, #0]
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800834e:	68f9      	ldr	r1, [r7, #12]
 8008350:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008352:	fb01 f303 	mul.w	r3, r1, r3
 8008356:	441a      	add	r2, r3
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	2200      	movs	r2, #0
 8008360:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681a      	ldr	r2, [r3, #0]
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681a      	ldr	r2, [r3, #0]
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008372:	3b01      	subs	r3, #1
 8008374:	68f9      	ldr	r1, [r7, #12]
 8008376:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008378:	fb01 f303 	mul.w	r3, r1, r3
 800837c:	441a      	add	r2, r3
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	22ff      	movs	r2, #255	; 0xff
 8008386:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	22ff      	movs	r2, #255	; 0xff
 800838e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d114      	bne.n	80083c2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	691b      	ldr	r3, [r3, #16]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d01a      	beq.n	80083d6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	3310      	adds	r3, #16
 80083a4:	4618      	mov	r0, r3
 80083a6:	f001 f995 	bl	80096d4 <xTaskRemoveFromEventList>
 80083aa:	4603      	mov	r3, r0
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d012      	beq.n	80083d6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80083b0:	4b0c      	ldr	r3, [pc, #48]	; (80083e4 <xQueueGenericReset+0xcc>)
 80083b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083b6:	601a      	str	r2, [r3, #0]
 80083b8:	f3bf 8f4f 	dsb	sy
 80083bc:	f3bf 8f6f 	isb	sy
 80083c0:	e009      	b.n	80083d6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	3310      	adds	r3, #16
 80083c6:	4618      	mov	r0, r3
 80083c8:	f7ff fef6 	bl	80081b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	3324      	adds	r3, #36	; 0x24
 80083d0:	4618      	mov	r0, r3
 80083d2:	f7ff fef1 	bl	80081b8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80083d6:	f002 f899 	bl	800a50c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80083da:	2301      	movs	r3, #1
}
 80083dc:	4618      	mov	r0, r3
 80083de:	3710      	adds	r7, #16
 80083e0:	46bd      	mov	sp, r7
 80083e2:	bd80      	pop	{r7, pc}
 80083e4:	e000ed04 	.word	0xe000ed04

080083e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b08e      	sub	sp, #56	; 0x38
 80083ec:	af02      	add	r7, sp, #8
 80083ee:	60f8      	str	r0, [r7, #12]
 80083f0:	60b9      	str	r1, [r7, #8]
 80083f2:	607a      	str	r2, [r7, #4]
 80083f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d10a      	bne.n	8008412 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80083fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008400:	f383 8811 	msr	BASEPRI, r3
 8008404:	f3bf 8f6f 	isb	sy
 8008408:	f3bf 8f4f 	dsb	sy
 800840c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800840e:	bf00      	nop
 8008410:	e7fe      	b.n	8008410 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d10a      	bne.n	800842e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800841c:	f383 8811 	msr	BASEPRI, r3
 8008420:	f3bf 8f6f 	isb	sy
 8008424:	f3bf 8f4f 	dsb	sy
 8008428:	627b      	str	r3, [r7, #36]	; 0x24
}
 800842a:	bf00      	nop
 800842c:	e7fe      	b.n	800842c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d002      	beq.n	800843a <xQueueGenericCreateStatic+0x52>
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d001      	beq.n	800843e <xQueueGenericCreateStatic+0x56>
 800843a:	2301      	movs	r3, #1
 800843c:	e000      	b.n	8008440 <xQueueGenericCreateStatic+0x58>
 800843e:	2300      	movs	r3, #0
 8008440:	2b00      	cmp	r3, #0
 8008442:	d10a      	bne.n	800845a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008448:	f383 8811 	msr	BASEPRI, r3
 800844c:	f3bf 8f6f 	isb	sy
 8008450:	f3bf 8f4f 	dsb	sy
 8008454:	623b      	str	r3, [r7, #32]
}
 8008456:	bf00      	nop
 8008458:	e7fe      	b.n	8008458 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d102      	bne.n	8008466 <xQueueGenericCreateStatic+0x7e>
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d101      	bne.n	800846a <xQueueGenericCreateStatic+0x82>
 8008466:	2301      	movs	r3, #1
 8008468:	e000      	b.n	800846c <xQueueGenericCreateStatic+0x84>
 800846a:	2300      	movs	r3, #0
 800846c:	2b00      	cmp	r3, #0
 800846e:	d10a      	bne.n	8008486 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008470:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008474:	f383 8811 	msr	BASEPRI, r3
 8008478:	f3bf 8f6f 	isb	sy
 800847c:	f3bf 8f4f 	dsb	sy
 8008480:	61fb      	str	r3, [r7, #28]
}
 8008482:	bf00      	nop
 8008484:	e7fe      	b.n	8008484 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008486:	2348      	movs	r3, #72	; 0x48
 8008488:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	2b48      	cmp	r3, #72	; 0x48
 800848e:	d00a      	beq.n	80084a6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008494:	f383 8811 	msr	BASEPRI, r3
 8008498:	f3bf 8f6f 	isb	sy
 800849c:	f3bf 8f4f 	dsb	sy
 80084a0:	61bb      	str	r3, [r7, #24]
}
 80084a2:	bf00      	nop
 80084a4:	e7fe      	b.n	80084a4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80084a6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80084ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d00d      	beq.n	80084ce <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80084b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084b4:	2201      	movs	r2, #1
 80084b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80084ba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80084be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084c0:	9300      	str	r3, [sp, #0]
 80084c2:	4613      	mov	r3, r2
 80084c4:	687a      	ldr	r2, [r7, #4]
 80084c6:	68b9      	ldr	r1, [r7, #8]
 80084c8:	68f8      	ldr	r0, [r7, #12]
 80084ca:	f000 f845 	bl	8008558 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80084ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3730      	adds	r7, #48	; 0x30
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b08a      	sub	sp, #40	; 0x28
 80084dc:	af02      	add	r7, sp, #8
 80084de:	60f8      	str	r0, [r7, #12]
 80084e0:	60b9      	str	r1, [r7, #8]
 80084e2:	4613      	mov	r3, r2
 80084e4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d10a      	bne.n	8008502 <xQueueGenericCreate+0x2a>
	__asm volatile
 80084ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084f0:	f383 8811 	msr	BASEPRI, r3
 80084f4:	f3bf 8f6f 	isb	sy
 80084f8:	f3bf 8f4f 	dsb	sy
 80084fc:	613b      	str	r3, [r7, #16]
}
 80084fe:	bf00      	nop
 8008500:	e7fe      	b.n	8008500 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d102      	bne.n	800850e <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8008508:	2300      	movs	r3, #0
 800850a:	61fb      	str	r3, [r7, #28]
 800850c:	e004      	b.n	8008518 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	68ba      	ldr	r2, [r7, #8]
 8008512:	fb02 f303 	mul.w	r3, r2, r3
 8008516:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008518:	69fb      	ldr	r3, [r7, #28]
 800851a:	3348      	adds	r3, #72	; 0x48
 800851c:	4618      	mov	r0, r3
 800851e:	f002 f8c5 	bl	800a6ac <pvPortMalloc>
 8008522:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008524:	69bb      	ldr	r3, [r7, #24]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d011      	beq.n	800854e <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800852a:	69bb      	ldr	r3, [r7, #24]
 800852c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	3348      	adds	r3, #72	; 0x48
 8008532:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008534:	69bb      	ldr	r3, [r7, #24]
 8008536:	2200      	movs	r2, #0
 8008538:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800853c:	79fa      	ldrb	r2, [r7, #7]
 800853e:	69bb      	ldr	r3, [r7, #24]
 8008540:	9300      	str	r3, [sp, #0]
 8008542:	4613      	mov	r3, r2
 8008544:	697a      	ldr	r2, [r7, #20]
 8008546:	68b9      	ldr	r1, [r7, #8]
 8008548:	68f8      	ldr	r0, [r7, #12]
 800854a:	f000 f805 	bl	8008558 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800854e:	69bb      	ldr	r3, [r7, #24]
	}
 8008550:	4618      	mov	r0, r3
 8008552:	3720      	adds	r7, #32
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}

08008558 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b084      	sub	sp, #16
 800855c:	af00      	add	r7, sp, #0
 800855e:	60f8      	str	r0, [r7, #12]
 8008560:	60b9      	str	r1, [r7, #8]
 8008562:	607a      	str	r2, [r7, #4]
 8008564:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d103      	bne.n	8008574 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800856c:	69bb      	ldr	r3, [r7, #24]
 800856e:	69ba      	ldr	r2, [r7, #24]
 8008570:	601a      	str	r2, [r3, #0]
 8008572:	e002      	b.n	800857a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008574:	69bb      	ldr	r3, [r7, #24]
 8008576:	687a      	ldr	r2, [r7, #4]
 8008578:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800857a:	69bb      	ldr	r3, [r7, #24]
 800857c:	68fa      	ldr	r2, [r7, #12]
 800857e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008580:	69bb      	ldr	r3, [r7, #24]
 8008582:	68ba      	ldr	r2, [r7, #8]
 8008584:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008586:	2101      	movs	r1, #1
 8008588:	69b8      	ldr	r0, [r7, #24]
 800858a:	f7ff fec5 	bl	8008318 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800858e:	bf00      	nop
 8008590:	3710      	adds	r7, #16
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}

08008596 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8008596:	b580      	push	{r7, lr}
 8008598:	b082      	sub	sp, #8
 800859a:	af00      	add	r7, sp, #0
 800859c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d00e      	beq.n	80085c2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2200      	movs	r2, #0
 80085a8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2200      	movs	r2, #0
 80085ae:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2200      	movs	r2, #0
 80085b4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80085b6:	2300      	movs	r3, #0
 80085b8:	2200      	movs	r2, #0
 80085ba:	2100      	movs	r1, #0
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f000 f837 	bl	8008630 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80085c2:	bf00      	nop
 80085c4:	3708      	adds	r7, #8
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}

080085ca <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80085ca:	b580      	push	{r7, lr}
 80085cc:	b086      	sub	sp, #24
 80085ce:	af00      	add	r7, sp, #0
 80085d0:	4603      	mov	r3, r0
 80085d2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80085d4:	2301      	movs	r3, #1
 80085d6:	617b      	str	r3, [r7, #20]
 80085d8:	2300      	movs	r3, #0
 80085da:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80085dc:	79fb      	ldrb	r3, [r7, #7]
 80085de:	461a      	mov	r2, r3
 80085e0:	6939      	ldr	r1, [r7, #16]
 80085e2:	6978      	ldr	r0, [r7, #20]
 80085e4:	f7ff ff78 	bl	80084d8 <xQueueGenericCreate>
 80085e8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80085ea:	68f8      	ldr	r0, [r7, #12]
 80085ec:	f7ff ffd3 	bl	8008596 <prvInitialiseMutex>

		return xNewQueue;
 80085f0:	68fb      	ldr	r3, [r7, #12]
	}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3718      	adds	r7, #24
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}

080085fa <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80085fa:	b580      	push	{r7, lr}
 80085fc:	b088      	sub	sp, #32
 80085fe:	af02      	add	r7, sp, #8
 8008600:	4603      	mov	r3, r0
 8008602:	6039      	str	r1, [r7, #0]
 8008604:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8008606:	2301      	movs	r3, #1
 8008608:	617b      	str	r3, [r7, #20]
 800860a:	2300      	movs	r3, #0
 800860c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800860e:	79fb      	ldrb	r3, [r7, #7]
 8008610:	9300      	str	r3, [sp, #0]
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	2200      	movs	r2, #0
 8008616:	6939      	ldr	r1, [r7, #16]
 8008618:	6978      	ldr	r0, [r7, #20]
 800861a:	f7ff fee5 	bl	80083e8 <xQueueGenericCreateStatic>
 800861e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8008620:	68f8      	ldr	r0, [r7, #12]
 8008622:	f7ff ffb8 	bl	8008596 <prvInitialiseMutex>

		return xNewQueue;
 8008626:	68fb      	ldr	r3, [r7, #12]
	}
 8008628:	4618      	mov	r0, r3
 800862a:	3718      	adds	r7, #24
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b08e      	sub	sp, #56	; 0x38
 8008634:	af00      	add	r7, sp, #0
 8008636:	60f8      	str	r0, [r7, #12]
 8008638:	60b9      	str	r1, [r7, #8]
 800863a:	607a      	str	r2, [r7, #4]
 800863c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800863e:	2300      	movs	r3, #0
 8008640:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008648:	2b00      	cmp	r3, #0
 800864a:	d10a      	bne.n	8008662 <xQueueGenericSend+0x32>
	__asm volatile
 800864c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008650:	f383 8811 	msr	BASEPRI, r3
 8008654:	f3bf 8f6f 	isb	sy
 8008658:	f3bf 8f4f 	dsb	sy
 800865c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800865e:	bf00      	nop
 8008660:	e7fe      	b.n	8008660 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d103      	bne.n	8008670 <xQueueGenericSend+0x40>
 8008668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800866a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800866c:	2b00      	cmp	r3, #0
 800866e:	d101      	bne.n	8008674 <xQueueGenericSend+0x44>
 8008670:	2301      	movs	r3, #1
 8008672:	e000      	b.n	8008676 <xQueueGenericSend+0x46>
 8008674:	2300      	movs	r3, #0
 8008676:	2b00      	cmp	r3, #0
 8008678:	d10a      	bne.n	8008690 <xQueueGenericSend+0x60>
	__asm volatile
 800867a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800867e:	f383 8811 	msr	BASEPRI, r3
 8008682:	f3bf 8f6f 	isb	sy
 8008686:	f3bf 8f4f 	dsb	sy
 800868a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800868c:	bf00      	nop
 800868e:	e7fe      	b.n	800868e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	2b02      	cmp	r3, #2
 8008694:	d103      	bne.n	800869e <xQueueGenericSend+0x6e>
 8008696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800869a:	2b01      	cmp	r3, #1
 800869c:	d101      	bne.n	80086a2 <xQueueGenericSend+0x72>
 800869e:	2301      	movs	r3, #1
 80086a0:	e000      	b.n	80086a4 <xQueueGenericSend+0x74>
 80086a2:	2300      	movs	r3, #0
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d10a      	bne.n	80086be <xQueueGenericSend+0x8e>
	__asm volatile
 80086a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ac:	f383 8811 	msr	BASEPRI, r3
 80086b0:	f3bf 8f6f 	isb	sy
 80086b4:	f3bf 8f4f 	dsb	sy
 80086b8:	623b      	str	r3, [r7, #32]
}
 80086ba:	bf00      	nop
 80086bc:	e7fe      	b.n	80086bc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80086be:	f001 f9cb 	bl	8009a58 <xTaskGetSchedulerState>
 80086c2:	4603      	mov	r3, r0
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d102      	bne.n	80086ce <xQueueGenericSend+0x9e>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d101      	bne.n	80086d2 <xQueueGenericSend+0xa2>
 80086ce:	2301      	movs	r3, #1
 80086d0:	e000      	b.n	80086d4 <xQueueGenericSend+0xa4>
 80086d2:	2300      	movs	r3, #0
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d10a      	bne.n	80086ee <xQueueGenericSend+0xbe>
	__asm volatile
 80086d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086dc:	f383 8811 	msr	BASEPRI, r3
 80086e0:	f3bf 8f6f 	isb	sy
 80086e4:	f3bf 8f4f 	dsb	sy
 80086e8:	61fb      	str	r3, [r7, #28]
}
 80086ea:	bf00      	nop
 80086ec:	e7fe      	b.n	80086ec <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80086ee:	f001 fedd 	bl	800a4ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80086f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d302      	bcc.n	8008704 <xQueueGenericSend+0xd4>
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	2b02      	cmp	r3, #2
 8008702:	d129      	bne.n	8008758 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008704:	683a      	ldr	r2, [r7, #0]
 8008706:	68b9      	ldr	r1, [r7, #8]
 8008708:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800870a:	f000 fa07 	bl	8008b1c <prvCopyDataToQueue>
 800870e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008714:	2b00      	cmp	r3, #0
 8008716:	d010      	beq.n	800873a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800871a:	3324      	adds	r3, #36	; 0x24
 800871c:	4618      	mov	r0, r3
 800871e:	f000 ffd9 	bl	80096d4 <xTaskRemoveFromEventList>
 8008722:	4603      	mov	r3, r0
 8008724:	2b00      	cmp	r3, #0
 8008726:	d013      	beq.n	8008750 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008728:	4b3f      	ldr	r3, [pc, #252]	; (8008828 <xQueueGenericSend+0x1f8>)
 800872a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800872e:	601a      	str	r2, [r3, #0]
 8008730:	f3bf 8f4f 	dsb	sy
 8008734:	f3bf 8f6f 	isb	sy
 8008738:	e00a      	b.n	8008750 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800873a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800873c:	2b00      	cmp	r3, #0
 800873e:	d007      	beq.n	8008750 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008740:	4b39      	ldr	r3, [pc, #228]	; (8008828 <xQueueGenericSend+0x1f8>)
 8008742:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008746:	601a      	str	r2, [r3, #0]
 8008748:	f3bf 8f4f 	dsb	sy
 800874c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008750:	f001 fedc 	bl	800a50c <vPortExitCritical>
				return pdPASS;
 8008754:	2301      	movs	r3, #1
 8008756:	e063      	b.n	8008820 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d103      	bne.n	8008766 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800875e:	f001 fed5 	bl	800a50c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008762:	2300      	movs	r3, #0
 8008764:	e05c      	b.n	8008820 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008768:	2b00      	cmp	r3, #0
 800876a:	d106      	bne.n	800877a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800876c:	f107 0314 	add.w	r3, r7, #20
 8008770:	4618      	mov	r0, r3
 8008772:	f001 f811 	bl	8009798 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008776:	2301      	movs	r3, #1
 8008778:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800877a:	f001 fec7 	bl	800a50c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800877e:	f000 fd87 	bl	8009290 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008782:	f001 fe93 	bl	800a4ac <vPortEnterCritical>
 8008786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008788:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800878c:	b25b      	sxtb	r3, r3
 800878e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008792:	d103      	bne.n	800879c <xQueueGenericSend+0x16c>
 8008794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008796:	2200      	movs	r2, #0
 8008798:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800879c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800879e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80087a2:	b25b      	sxtb	r3, r3
 80087a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087a8:	d103      	bne.n	80087b2 <xQueueGenericSend+0x182>
 80087aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ac:	2200      	movs	r2, #0
 80087ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80087b2:	f001 feab 	bl	800a50c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80087b6:	1d3a      	adds	r2, r7, #4
 80087b8:	f107 0314 	add.w	r3, r7, #20
 80087bc:	4611      	mov	r1, r2
 80087be:	4618      	mov	r0, r3
 80087c0:	f001 f800 	bl	80097c4 <xTaskCheckForTimeOut>
 80087c4:	4603      	mov	r3, r0
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d124      	bne.n	8008814 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80087ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80087cc:	f000 fa9e 	bl	8008d0c <prvIsQueueFull>
 80087d0:	4603      	mov	r3, r0
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d018      	beq.n	8008808 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80087d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087d8:	3310      	adds	r3, #16
 80087da:	687a      	ldr	r2, [r7, #4]
 80087dc:	4611      	mov	r1, r2
 80087de:	4618      	mov	r0, r3
 80087e0:	f000 ff28 	bl	8009634 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80087e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80087e6:	f000 fa29 	bl	8008c3c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80087ea:	f000 fd5f 	bl	80092ac <xTaskResumeAll>
 80087ee:	4603      	mov	r3, r0
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	f47f af7c 	bne.w	80086ee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80087f6:	4b0c      	ldr	r3, [pc, #48]	; (8008828 <xQueueGenericSend+0x1f8>)
 80087f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087fc:	601a      	str	r2, [r3, #0]
 80087fe:	f3bf 8f4f 	dsb	sy
 8008802:	f3bf 8f6f 	isb	sy
 8008806:	e772      	b.n	80086ee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008808:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800880a:	f000 fa17 	bl	8008c3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800880e:	f000 fd4d 	bl	80092ac <xTaskResumeAll>
 8008812:	e76c      	b.n	80086ee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008814:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008816:	f000 fa11 	bl	8008c3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800881a:	f000 fd47 	bl	80092ac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800881e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008820:	4618      	mov	r0, r3
 8008822:	3738      	adds	r7, #56	; 0x38
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}
 8008828:	e000ed04 	.word	0xe000ed04

0800882c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b08e      	sub	sp, #56	; 0x38
 8008830:	af00      	add	r7, sp, #0
 8008832:	60f8      	str	r0, [r7, #12]
 8008834:	60b9      	str	r1, [r7, #8]
 8008836:	607a      	str	r2, [r7, #4]
 8008838:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800883e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008840:	2b00      	cmp	r3, #0
 8008842:	d10a      	bne.n	800885a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008848:	f383 8811 	msr	BASEPRI, r3
 800884c:	f3bf 8f6f 	isb	sy
 8008850:	f3bf 8f4f 	dsb	sy
 8008854:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008856:	bf00      	nop
 8008858:	e7fe      	b.n	8008858 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d103      	bne.n	8008868 <xQueueGenericSendFromISR+0x3c>
 8008860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008864:	2b00      	cmp	r3, #0
 8008866:	d101      	bne.n	800886c <xQueueGenericSendFromISR+0x40>
 8008868:	2301      	movs	r3, #1
 800886a:	e000      	b.n	800886e <xQueueGenericSendFromISR+0x42>
 800886c:	2300      	movs	r3, #0
 800886e:	2b00      	cmp	r3, #0
 8008870:	d10a      	bne.n	8008888 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008876:	f383 8811 	msr	BASEPRI, r3
 800887a:	f3bf 8f6f 	isb	sy
 800887e:	f3bf 8f4f 	dsb	sy
 8008882:	623b      	str	r3, [r7, #32]
}
 8008884:	bf00      	nop
 8008886:	e7fe      	b.n	8008886 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	2b02      	cmp	r3, #2
 800888c:	d103      	bne.n	8008896 <xQueueGenericSendFromISR+0x6a>
 800888e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008892:	2b01      	cmp	r3, #1
 8008894:	d101      	bne.n	800889a <xQueueGenericSendFromISR+0x6e>
 8008896:	2301      	movs	r3, #1
 8008898:	e000      	b.n	800889c <xQueueGenericSendFromISR+0x70>
 800889a:	2300      	movs	r3, #0
 800889c:	2b00      	cmp	r3, #0
 800889e:	d10a      	bne.n	80088b6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80088a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a4:	f383 8811 	msr	BASEPRI, r3
 80088a8:	f3bf 8f6f 	isb	sy
 80088ac:	f3bf 8f4f 	dsb	sy
 80088b0:	61fb      	str	r3, [r7, #28]
}
 80088b2:	bf00      	nop
 80088b4:	e7fe      	b.n	80088b4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80088b6:	f001 febb 	bl	800a630 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80088ba:	f3ef 8211 	mrs	r2, BASEPRI
 80088be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c2:	f383 8811 	msr	BASEPRI, r3
 80088c6:	f3bf 8f6f 	isb	sy
 80088ca:	f3bf 8f4f 	dsb	sy
 80088ce:	61ba      	str	r2, [r7, #24]
 80088d0:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80088d2:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80088d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80088d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088de:	429a      	cmp	r2, r3
 80088e0:	d302      	bcc.n	80088e8 <xQueueGenericSendFromISR+0xbc>
 80088e2:	683b      	ldr	r3, [r7, #0]
 80088e4:	2b02      	cmp	r3, #2
 80088e6:	d12c      	bne.n	8008942 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80088e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80088ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80088f2:	683a      	ldr	r2, [r7, #0]
 80088f4:	68b9      	ldr	r1, [r7, #8]
 80088f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80088f8:	f000 f910 	bl	8008b1c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80088fc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8008900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008904:	d112      	bne.n	800892c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800890a:	2b00      	cmp	r3, #0
 800890c:	d016      	beq.n	800893c <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800890e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008910:	3324      	adds	r3, #36	; 0x24
 8008912:	4618      	mov	r0, r3
 8008914:	f000 fede 	bl	80096d4 <xTaskRemoveFromEventList>
 8008918:	4603      	mov	r3, r0
 800891a:	2b00      	cmp	r3, #0
 800891c:	d00e      	beq.n	800893c <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d00b      	beq.n	800893c <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2201      	movs	r2, #1
 8008928:	601a      	str	r2, [r3, #0]
 800892a:	e007      	b.n	800893c <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800892c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008930:	3301      	adds	r3, #1
 8008932:	b2db      	uxtb	r3, r3
 8008934:	b25a      	sxtb	r2, r3
 8008936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008938:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800893c:	2301      	movs	r3, #1
 800893e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8008940:	e001      	b.n	8008946 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008942:	2300      	movs	r3, #0
 8008944:	637b      	str	r3, [r7, #52]	; 0x34
 8008946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008948:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008950:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008954:	4618      	mov	r0, r3
 8008956:	3738      	adds	r7, #56	; 0x38
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b08c      	sub	sp, #48	; 0x30
 8008960:	af00      	add	r7, sp, #0
 8008962:	60f8      	str	r0, [r7, #12]
 8008964:	60b9      	str	r1, [r7, #8]
 8008966:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008968:	2300      	movs	r3, #0
 800896a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008972:	2b00      	cmp	r3, #0
 8008974:	d10a      	bne.n	800898c <xQueueReceive+0x30>
	__asm volatile
 8008976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800897a:	f383 8811 	msr	BASEPRI, r3
 800897e:	f3bf 8f6f 	isb	sy
 8008982:	f3bf 8f4f 	dsb	sy
 8008986:	623b      	str	r3, [r7, #32]
}
 8008988:	bf00      	nop
 800898a:	e7fe      	b.n	800898a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d103      	bne.n	800899a <xQueueReceive+0x3e>
 8008992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008996:	2b00      	cmp	r3, #0
 8008998:	d101      	bne.n	800899e <xQueueReceive+0x42>
 800899a:	2301      	movs	r3, #1
 800899c:	e000      	b.n	80089a0 <xQueueReceive+0x44>
 800899e:	2300      	movs	r3, #0
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d10a      	bne.n	80089ba <xQueueReceive+0x5e>
	__asm volatile
 80089a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a8:	f383 8811 	msr	BASEPRI, r3
 80089ac:	f3bf 8f6f 	isb	sy
 80089b0:	f3bf 8f4f 	dsb	sy
 80089b4:	61fb      	str	r3, [r7, #28]
}
 80089b6:	bf00      	nop
 80089b8:	e7fe      	b.n	80089b8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80089ba:	f001 f84d 	bl	8009a58 <xTaskGetSchedulerState>
 80089be:	4603      	mov	r3, r0
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d102      	bne.n	80089ca <xQueueReceive+0x6e>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d101      	bne.n	80089ce <xQueueReceive+0x72>
 80089ca:	2301      	movs	r3, #1
 80089cc:	e000      	b.n	80089d0 <xQueueReceive+0x74>
 80089ce:	2300      	movs	r3, #0
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d10a      	bne.n	80089ea <xQueueReceive+0x8e>
	__asm volatile
 80089d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d8:	f383 8811 	msr	BASEPRI, r3
 80089dc:	f3bf 8f6f 	isb	sy
 80089e0:	f3bf 8f4f 	dsb	sy
 80089e4:	61bb      	str	r3, [r7, #24]
}
 80089e6:	bf00      	nop
 80089e8:	e7fe      	b.n	80089e8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80089ea:	f001 fd5f 	bl	800a4ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80089ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089f2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80089f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d01f      	beq.n	8008a3a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80089fa:	68b9      	ldr	r1, [r7, #8]
 80089fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089fe:	f000 f8f7 	bl	8008bf0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a04:	1e5a      	subs	r2, r3, #1
 8008a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a08:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a0c:	691b      	ldr	r3, [r3, #16]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d00f      	beq.n	8008a32 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a14:	3310      	adds	r3, #16
 8008a16:	4618      	mov	r0, r3
 8008a18:	f000 fe5c 	bl	80096d4 <xTaskRemoveFromEventList>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d007      	beq.n	8008a32 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008a22:	4b3d      	ldr	r3, [pc, #244]	; (8008b18 <xQueueReceive+0x1bc>)
 8008a24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a28:	601a      	str	r2, [r3, #0]
 8008a2a:	f3bf 8f4f 	dsb	sy
 8008a2e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008a32:	f001 fd6b 	bl	800a50c <vPortExitCritical>
				return pdPASS;
 8008a36:	2301      	movs	r3, #1
 8008a38:	e069      	b.n	8008b0e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d103      	bne.n	8008a48 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008a40:	f001 fd64 	bl	800a50c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008a44:	2300      	movs	r3, #0
 8008a46:	e062      	b.n	8008b0e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d106      	bne.n	8008a5c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008a4e:	f107 0310 	add.w	r3, r7, #16
 8008a52:	4618      	mov	r0, r3
 8008a54:	f000 fea0 	bl	8009798 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008a58:	2301      	movs	r3, #1
 8008a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008a5c:	f001 fd56 	bl	800a50c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008a60:	f000 fc16 	bl	8009290 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008a64:	f001 fd22 	bl	800a4ac <vPortEnterCritical>
 8008a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008a6e:	b25b      	sxtb	r3, r3
 8008a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a74:	d103      	bne.n	8008a7e <xQueueReceive+0x122>
 8008a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a78:	2200      	movs	r2, #0
 8008a7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008a84:	b25b      	sxtb	r3, r3
 8008a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a8a:	d103      	bne.n	8008a94 <xQueueReceive+0x138>
 8008a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a8e:	2200      	movs	r2, #0
 8008a90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008a94:	f001 fd3a 	bl	800a50c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008a98:	1d3a      	adds	r2, r7, #4
 8008a9a:	f107 0310 	add.w	r3, r7, #16
 8008a9e:	4611      	mov	r1, r2
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f000 fe8f 	bl	80097c4 <xTaskCheckForTimeOut>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d123      	bne.n	8008af4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008aac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008aae:	f000 f917 	bl	8008ce0 <prvIsQueueEmpty>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d017      	beq.n	8008ae8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aba:	3324      	adds	r3, #36	; 0x24
 8008abc:	687a      	ldr	r2, [r7, #4]
 8008abe:	4611      	mov	r1, r2
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f000 fdb7 	bl	8009634 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008ac6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008ac8:	f000 f8b8 	bl	8008c3c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008acc:	f000 fbee 	bl	80092ac <xTaskResumeAll>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d189      	bne.n	80089ea <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008ad6:	4b10      	ldr	r3, [pc, #64]	; (8008b18 <xQueueReceive+0x1bc>)
 8008ad8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008adc:	601a      	str	r2, [r3, #0]
 8008ade:	f3bf 8f4f 	dsb	sy
 8008ae2:	f3bf 8f6f 	isb	sy
 8008ae6:	e780      	b.n	80089ea <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008ae8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008aea:	f000 f8a7 	bl	8008c3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008aee:	f000 fbdd 	bl	80092ac <xTaskResumeAll>
 8008af2:	e77a      	b.n	80089ea <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008af4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008af6:	f000 f8a1 	bl	8008c3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008afa:	f000 fbd7 	bl	80092ac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008afe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b00:	f000 f8ee 	bl	8008ce0 <prvIsQueueEmpty>
 8008b04:	4603      	mov	r3, r0
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	f43f af6f 	beq.w	80089ea <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008b0c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3730      	adds	r7, #48	; 0x30
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}
 8008b16:	bf00      	nop
 8008b18:	e000ed04 	.word	0xe000ed04

08008b1c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b086      	sub	sp, #24
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	60f8      	str	r0, [r7, #12]
 8008b24:	60b9      	str	r1, [r7, #8]
 8008b26:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b30:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d10d      	bne.n	8008b56 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d14d      	bne.n	8008bde <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	689b      	ldr	r3, [r3, #8]
 8008b46:	4618      	mov	r0, r3
 8008b48:	f000 ffa4 	bl	8009a94 <xTaskPriorityDisinherit>
 8008b4c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2200      	movs	r2, #0
 8008b52:	609a      	str	r2, [r3, #8]
 8008b54:	e043      	b.n	8008bde <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d119      	bne.n	8008b90 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	6858      	ldr	r0, [r3, #4]
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b64:	461a      	mov	r2, r3
 8008b66:	68b9      	ldr	r1, [r7, #8]
 8008b68:	f002 f89b 	bl	800aca2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	685a      	ldr	r2, [r3, #4]
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b74:	441a      	add	r2, r3
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	685a      	ldr	r2, [r3, #4]
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	689b      	ldr	r3, [r3, #8]
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d32b      	bcc.n	8008bde <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681a      	ldr	r2, [r3, #0]
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	605a      	str	r2, [r3, #4]
 8008b8e:	e026      	b.n	8008bde <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	68d8      	ldr	r0, [r3, #12]
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b98:	461a      	mov	r2, r3
 8008b9a:	68b9      	ldr	r1, [r7, #8]
 8008b9c:	f002 f881 	bl	800aca2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	68da      	ldr	r2, [r3, #12]
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ba8:	425b      	negs	r3, r3
 8008baa:	441a      	add	r2, r3
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	68da      	ldr	r2, [r3, #12]
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	d207      	bcs.n	8008bcc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	689a      	ldr	r2, [r3, #8]
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bc4:	425b      	negs	r3, r3
 8008bc6:	441a      	add	r2, r3
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2b02      	cmp	r3, #2
 8008bd0:	d105      	bne.n	8008bde <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008bd2:	693b      	ldr	r3, [r7, #16]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d002      	beq.n	8008bde <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	3b01      	subs	r3, #1
 8008bdc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008bde:	693b      	ldr	r3, [r7, #16]
 8008be0:	1c5a      	adds	r2, r3, #1
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008be6:	697b      	ldr	r3, [r7, #20]
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3718      	adds	r7, #24
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}

08008bf0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b082      	sub	sp, #8
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d018      	beq.n	8008c34 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	68da      	ldr	r2, [r3, #12]
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c0a:	441a      	add	r2, r3
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	68da      	ldr	r2, [r3, #12]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	689b      	ldr	r3, [r3, #8]
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d303      	bcc.n	8008c24 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681a      	ldr	r2, [r3, #0]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	68d9      	ldr	r1, [r3, #12]
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c2c:	461a      	mov	r2, r3
 8008c2e:	6838      	ldr	r0, [r7, #0]
 8008c30:	f002 f837 	bl	800aca2 <memcpy>
	}
}
 8008c34:	bf00      	nop
 8008c36:	3708      	adds	r7, #8
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b084      	sub	sp, #16
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008c44:	f001 fc32 	bl	800a4ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c4e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008c50:	e011      	b.n	8008c76 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d012      	beq.n	8008c80 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	3324      	adds	r3, #36	; 0x24
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f000 fd38 	bl	80096d4 <xTaskRemoveFromEventList>
 8008c64:	4603      	mov	r3, r0
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d001      	beq.n	8008c6e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008c6a:	f000 fe0d 	bl	8009888 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008c6e:	7bfb      	ldrb	r3, [r7, #15]
 8008c70:	3b01      	subs	r3, #1
 8008c72:	b2db      	uxtb	r3, r3
 8008c74:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008c76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	dce9      	bgt.n	8008c52 <prvUnlockQueue+0x16>
 8008c7e:	e000      	b.n	8008c82 <prvUnlockQueue+0x46>
					break;
 8008c80:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	22ff      	movs	r2, #255	; 0xff
 8008c86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008c8a:	f001 fc3f 	bl	800a50c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008c8e:	f001 fc0d 	bl	800a4ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008c98:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008c9a:	e011      	b.n	8008cc0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	691b      	ldr	r3, [r3, #16]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d012      	beq.n	8008cca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	3310      	adds	r3, #16
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f000 fd13 	bl	80096d4 <xTaskRemoveFromEventList>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d001      	beq.n	8008cb8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008cb4:	f000 fde8 	bl	8009888 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008cb8:	7bbb      	ldrb	r3, [r7, #14]
 8008cba:	3b01      	subs	r3, #1
 8008cbc:	b2db      	uxtb	r3, r3
 8008cbe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008cc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	dce9      	bgt.n	8008c9c <prvUnlockQueue+0x60>
 8008cc8:	e000      	b.n	8008ccc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008cca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	22ff      	movs	r2, #255	; 0xff
 8008cd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008cd4:	f001 fc1a 	bl	800a50c <vPortExitCritical>
}
 8008cd8:	bf00      	nop
 8008cda:	3710      	adds	r7, #16
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}

08008ce0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b084      	sub	sp, #16
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008ce8:	f001 fbe0 	bl	800a4ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d102      	bne.n	8008cfa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	60fb      	str	r3, [r7, #12]
 8008cf8:	e001      	b.n	8008cfe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008cfe:	f001 fc05 	bl	800a50c <vPortExitCritical>

	return xReturn;
 8008d02:	68fb      	ldr	r3, [r7, #12]
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3710      	adds	r7, #16
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}

08008d0c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b084      	sub	sp, #16
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008d14:	f001 fbca 	bl	800a4ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d20:	429a      	cmp	r2, r3
 8008d22:	d102      	bne.n	8008d2a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008d24:	2301      	movs	r3, #1
 8008d26:	60fb      	str	r3, [r7, #12]
 8008d28:	e001      	b.n	8008d2e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008d2e:	f001 fbed 	bl	800a50c <vPortExitCritical>

	return xReturn;
 8008d32:	68fb      	ldr	r3, [r7, #12]
}
 8008d34:	4618      	mov	r0, r3
 8008d36:	3710      	adds	r7, #16
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}

08008d3c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b085      	sub	sp, #20
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008d46:	2300      	movs	r3, #0
 8008d48:	60fb      	str	r3, [r7, #12]
 8008d4a:	e014      	b.n	8008d76 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008d4c:	4a0e      	ldr	r2, [pc, #56]	; (8008d88 <vQueueAddToRegistry+0x4c>)
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d10b      	bne.n	8008d70 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008d58:	490b      	ldr	r1, [pc, #44]	; (8008d88 <vQueueAddToRegistry+0x4c>)
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	683a      	ldr	r2, [r7, #0]
 8008d5e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008d62:	4a09      	ldr	r2, [pc, #36]	; (8008d88 <vQueueAddToRegistry+0x4c>)
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	00db      	lsls	r3, r3, #3
 8008d68:	4413      	add	r3, r2
 8008d6a:	687a      	ldr	r2, [r7, #4]
 8008d6c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008d6e:	e006      	b.n	8008d7e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	3301      	adds	r3, #1
 8008d74:	60fb      	str	r3, [r7, #12]
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2b07      	cmp	r3, #7
 8008d7a:	d9e7      	bls.n	8008d4c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008d7c:	bf00      	nop
 8008d7e:	bf00      	nop
 8008d80:	3714      	adds	r7, #20
 8008d82:	46bd      	mov	sp, r7
 8008d84:	bc80      	pop	{r7}
 8008d86:	4770      	bx	lr
 8008d88:	20000e74 	.word	0x20000e74

08008d8c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b086      	sub	sp, #24
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	60f8      	str	r0, [r7, #12]
 8008d94:	60b9      	str	r1, [r7, #8]
 8008d96:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008d9c:	f001 fb86 	bl	800a4ac <vPortEnterCritical>
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008da6:	b25b      	sxtb	r3, r3
 8008da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dac:	d103      	bne.n	8008db6 <vQueueWaitForMessageRestricted+0x2a>
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	2200      	movs	r2, #0
 8008db2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008dbc:	b25b      	sxtb	r3, r3
 8008dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dc2:	d103      	bne.n	8008dcc <vQueueWaitForMessageRestricted+0x40>
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008dcc:	f001 fb9e 	bl	800a50c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d106      	bne.n	8008de6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	3324      	adds	r3, #36	; 0x24
 8008ddc:	687a      	ldr	r2, [r7, #4]
 8008dde:	68b9      	ldr	r1, [r7, #8]
 8008de0:	4618      	mov	r0, r3
 8008de2:	f000 fc4b 	bl	800967c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008de6:	6978      	ldr	r0, [r7, #20]
 8008de8:	f7ff ff28 	bl	8008c3c <prvUnlockQueue>
	}
 8008dec:	bf00      	nop
 8008dee:	3718      	adds	r7, #24
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}

08008df4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b08e      	sub	sp, #56	; 0x38
 8008df8:	af04      	add	r7, sp, #16
 8008dfa:	60f8      	str	r0, [r7, #12]
 8008dfc:	60b9      	str	r1, [r7, #8]
 8008dfe:	607a      	str	r2, [r7, #4]
 8008e00:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d10a      	bne.n	8008e1e <xTaskCreateStatic+0x2a>
	__asm volatile
 8008e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e0c:	f383 8811 	msr	BASEPRI, r3
 8008e10:	f3bf 8f6f 	isb	sy
 8008e14:	f3bf 8f4f 	dsb	sy
 8008e18:	623b      	str	r3, [r7, #32]
}
 8008e1a:	bf00      	nop
 8008e1c:	e7fe      	b.n	8008e1c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d10a      	bne.n	8008e3a <xTaskCreateStatic+0x46>
	__asm volatile
 8008e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e28:	f383 8811 	msr	BASEPRI, r3
 8008e2c:	f3bf 8f6f 	isb	sy
 8008e30:	f3bf 8f4f 	dsb	sy
 8008e34:	61fb      	str	r3, [r7, #28]
}
 8008e36:	bf00      	nop
 8008e38:	e7fe      	b.n	8008e38 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008e3a:	23b4      	movs	r3, #180	; 0xb4
 8008e3c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	2bb4      	cmp	r3, #180	; 0xb4
 8008e42:	d00a      	beq.n	8008e5a <xTaskCreateStatic+0x66>
	__asm volatile
 8008e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e48:	f383 8811 	msr	BASEPRI, r3
 8008e4c:	f3bf 8f6f 	isb	sy
 8008e50:	f3bf 8f4f 	dsb	sy
 8008e54:	61bb      	str	r3, [r7, #24]
}
 8008e56:	bf00      	nop
 8008e58:	e7fe      	b.n	8008e58 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008e5a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d01e      	beq.n	8008ea0 <xTaskCreateStatic+0xac>
 8008e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d01b      	beq.n	8008ea0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e6a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e70:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e74:	2202      	movs	r2, #2
 8008e76:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	9303      	str	r3, [sp, #12]
 8008e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e80:	9302      	str	r3, [sp, #8]
 8008e82:	f107 0314 	add.w	r3, r7, #20
 8008e86:	9301      	str	r3, [sp, #4]
 8008e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e8a:	9300      	str	r3, [sp, #0]
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	687a      	ldr	r2, [r7, #4]
 8008e90:	68b9      	ldr	r1, [r7, #8]
 8008e92:	68f8      	ldr	r0, [r7, #12]
 8008e94:	f000 f850 	bl	8008f38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008e98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008e9a:	f000 f8eb 	bl	8009074 <prvAddNewTaskToReadyList>
 8008e9e:	e001      	b.n	8008ea4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008ea4:	697b      	ldr	r3, [r7, #20]
	}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3728      	adds	r7, #40	; 0x28
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}

08008eae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008eae:	b580      	push	{r7, lr}
 8008eb0:	b08c      	sub	sp, #48	; 0x30
 8008eb2:	af04      	add	r7, sp, #16
 8008eb4:	60f8      	str	r0, [r7, #12]
 8008eb6:	60b9      	str	r1, [r7, #8]
 8008eb8:	603b      	str	r3, [r7, #0]
 8008eba:	4613      	mov	r3, r2
 8008ebc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008ebe:	88fb      	ldrh	r3, [r7, #6]
 8008ec0:	009b      	lsls	r3, r3, #2
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f001 fbf2 	bl	800a6ac <pvPortMalloc>
 8008ec8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d00e      	beq.n	8008eee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008ed0:	20b4      	movs	r0, #180	; 0xb4
 8008ed2:	f001 fbeb 	bl	800a6ac <pvPortMalloc>
 8008ed6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008ed8:	69fb      	ldr	r3, [r7, #28]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d003      	beq.n	8008ee6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008ede:	69fb      	ldr	r3, [r7, #28]
 8008ee0:	697a      	ldr	r2, [r7, #20]
 8008ee2:	631a      	str	r2, [r3, #48]	; 0x30
 8008ee4:	e005      	b.n	8008ef2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008ee6:	6978      	ldr	r0, [r7, #20]
 8008ee8:	f001 fca4 	bl	800a834 <vPortFree>
 8008eec:	e001      	b.n	8008ef2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008eee:	2300      	movs	r3, #0
 8008ef0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008ef2:	69fb      	ldr	r3, [r7, #28]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d017      	beq.n	8008f28 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008ef8:	69fb      	ldr	r3, [r7, #28]
 8008efa:	2200      	movs	r2, #0
 8008efc:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008f00:	88fa      	ldrh	r2, [r7, #6]
 8008f02:	2300      	movs	r3, #0
 8008f04:	9303      	str	r3, [sp, #12]
 8008f06:	69fb      	ldr	r3, [r7, #28]
 8008f08:	9302      	str	r3, [sp, #8]
 8008f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f0c:	9301      	str	r3, [sp, #4]
 8008f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f10:	9300      	str	r3, [sp, #0]
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	68b9      	ldr	r1, [r7, #8]
 8008f16:	68f8      	ldr	r0, [r7, #12]
 8008f18:	f000 f80e 	bl	8008f38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008f1c:	69f8      	ldr	r0, [r7, #28]
 8008f1e:	f000 f8a9 	bl	8009074 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008f22:	2301      	movs	r3, #1
 8008f24:	61bb      	str	r3, [r7, #24]
 8008f26:	e002      	b.n	8008f2e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008f28:	f04f 33ff 	mov.w	r3, #4294967295
 8008f2c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008f2e:	69bb      	ldr	r3, [r7, #24]
	}
 8008f30:	4618      	mov	r0, r3
 8008f32:	3720      	adds	r7, #32
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}

08008f38 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b088      	sub	sp, #32
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	60f8      	str	r0, [r7, #12]
 8008f40:	60b9      	str	r1, [r7, #8]
 8008f42:	607a      	str	r2, [r7, #4]
 8008f44:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008f50:	3b01      	subs	r3, #1
 8008f52:	009b      	lsls	r3, r3, #2
 8008f54:	4413      	add	r3, r2
 8008f56:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008f58:	69bb      	ldr	r3, [r7, #24]
 8008f5a:	f023 0307 	bic.w	r3, r3, #7
 8008f5e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008f60:	69bb      	ldr	r3, [r7, #24]
 8008f62:	f003 0307 	and.w	r3, r3, #7
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d00a      	beq.n	8008f80 <prvInitialiseNewTask+0x48>
	__asm volatile
 8008f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f6e:	f383 8811 	msr	BASEPRI, r3
 8008f72:	f3bf 8f6f 	isb	sy
 8008f76:	f3bf 8f4f 	dsb	sy
 8008f7a:	617b      	str	r3, [r7, #20]
}
 8008f7c:	bf00      	nop
 8008f7e:	e7fe      	b.n	8008f7e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d01f      	beq.n	8008fc6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008f86:	2300      	movs	r3, #0
 8008f88:	61fb      	str	r3, [r7, #28]
 8008f8a:	e012      	b.n	8008fb2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008f8c:	68ba      	ldr	r2, [r7, #8]
 8008f8e:	69fb      	ldr	r3, [r7, #28]
 8008f90:	4413      	add	r3, r2
 8008f92:	7819      	ldrb	r1, [r3, #0]
 8008f94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f96:	69fb      	ldr	r3, [r7, #28]
 8008f98:	4413      	add	r3, r2
 8008f9a:	3334      	adds	r3, #52	; 0x34
 8008f9c:	460a      	mov	r2, r1
 8008f9e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008fa0:	68ba      	ldr	r2, [r7, #8]
 8008fa2:	69fb      	ldr	r3, [r7, #28]
 8008fa4:	4413      	add	r3, r2
 8008fa6:	781b      	ldrb	r3, [r3, #0]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d006      	beq.n	8008fba <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008fac:	69fb      	ldr	r3, [r7, #28]
 8008fae:	3301      	adds	r3, #1
 8008fb0:	61fb      	str	r3, [r7, #28]
 8008fb2:	69fb      	ldr	r3, [r7, #28]
 8008fb4:	2b0f      	cmp	r3, #15
 8008fb6:	d9e9      	bls.n	8008f8c <prvInitialiseNewTask+0x54>
 8008fb8:	e000      	b.n	8008fbc <prvInitialiseNewTask+0x84>
			{
				break;
 8008fba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008fc4:	e003      	b.n	8008fce <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc8:	2200      	movs	r2, #0
 8008fca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fd0:	2b06      	cmp	r3, #6
 8008fd2:	d901      	bls.n	8008fd8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008fd4:	2306      	movs	r3, #6
 8008fd6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008fdc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fe0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008fe2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fec:	3304      	adds	r3, #4
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f7ff f901 	bl	80081f6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff6:	3318      	adds	r3, #24
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f7ff f8fc 	bl	80081f6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009000:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009002:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009006:	f1c3 0207 	rsb	r2, r3, #7
 800900a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800900c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800900e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009010:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009012:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009016:	2200      	movs	r2, #0
 8009018:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800901c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800901e:	2200      	movs	r2, #0
 8009020:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009026:	334c      	adds	r3, #76	; 0x4c
 8009028:	2260      	movs	r2, #96	; 0x60
 800902a:	2100      	movs	r1, #0
 800902c:	4618      	mov	r0, r3
 800902e:	f001 fe46 	bl	800acbe <memset>
 8009032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009034:	4a0c      	ldr	r2, [pc, #48]	; (8009068 <prvInitialiseNewTask+0x130>)
 8009036:	651a      	str	r2, [r3, #80]	; 0x50
 8009038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800903a:	4a0c      	ldr	r2, [pc, #48]	; (800906c <prvInitialiseNewTask+0x134>)
 800903c:	655a      	str	r2, [r3, #84]	; 0x54
 800903e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009040:	4a0b      	ldr	r2, [pc, #44]	; (8009070 <prvInitialiseNewTask+0x138>)
 8009042:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009044:	683a      	ldr	r2, [r7, #0]
 8009046:	68f9      	ldr	r1, [r7, #12]
 8009048:	69b8      	ldr	r0, [r7, #24]
 800904a:	f001 f93f 	bl	800a2cc <pxPortInitialiseStack>
 800904e:	4602      	mov	r2, r0
 8009050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009052:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009056:	2b00      	cmp	r3, #0
 8009058:	d002      	beq.n	8009060 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800905a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800905c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800905e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009060:	bf00      	nop
 8009062:	3720      	adds	r7, #32
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}
 8009068:	0800e2f8 	.word	0x0800e2f8
 800906c:	0800e318 	.word	0x0800e318
 8009070:	0800e2d8 	.word	0x0800e2d8

08009074 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b082      	sub	sp, #8
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800907c:	f001 fa16 	bl	800a4ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009080:	4b2a      	ldr	r3, [pc, #168]	; (800912c <prvAddNewTaskToReadyList+0xb8>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	3301      	adds	r3, #1
 8009086:	4a29      	ldr	r2, [pc, #164]	; (800912c <prvAddNewTaskToReadyList+0xb8>)
 8009088:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800908a:	4b29      	ldr	r3, [pc, #164]	; (8009130 <prvAddNewTaskToReadyList+0xbc>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d109      	bne.n	80090a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009092:	4a27      	ldr	r2, [pc, #156]	; (8009130 <prvAddNewTaskToReadyList+0xbc>)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009098:	4b24      	ldr	r3, [pc, #144]	; (800912c <prvAddNewTaskToReadyList+0xb8>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	2b01      	cmp	r3, #1
 800909e:	d110      	bne.n	80090c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80090a0:	f000 fc18 	bl	80098d4 <prvInitialiseTaskLists>
 80090a4:	e00d      	b.n	80090c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80090a6:	4b23      	ldr	r3, [pc, #140]	; (8009134 <prvAddNewTaskToReadyList+0xc0>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d109      	bne.n	80090c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80090ae:	4b20      	ldr	r3, [pc, #128]	; (8009130 <prvAddNewTaskToReadyList+0xbc>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090b8:	429a      	cmp	r2, r3
 80090ba:	d802      	bhi.n	80090c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80090bc:	4a1c      	ldr	r2, [pc, #112]	; (8009130 <prvAddNewTaskToReadyList+0xbc>)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80090c2:	4b1d      	ldr	r3, [pc, #116]	; (8009138 <prvAddNewTaskToReadyList+0xc4>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	3301      	adds	r3, #1
 80090c8:	4a1b      	ldr	r2, [pc, #108]	; (8009138 <prvAddNewTaskToReadyList+0xc4>)
 80090ca:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090d0:	2201      	movs	r2, #1
 80090d2:	409a      	lsls	r2, r3
 80090d4:	4b19      	ldr	r3, [pc, #100]	; (800913c <prvAddNewTaskToReadyList+0xc8>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4313      	orrs	r3, r2
 80090da:	4a18      	ldr	r2, [pc, #96]	; (800913c <prvAddNewTaskToReadyList+0xc8>)
 80090dc:	6013      	str	r3, [r2, #0]
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090e2:	4613      	mov	r3, r2
 80090e4:	009b      	lsls	r3, r3, #2
 80090e6:	4413      	add	r3, r2
 80090e8:	009b      	lsls	r3, r3, #2
 80090ea:	4a15      	ldr	r2, [pc, #84]	; (8009140 <prvAddNewTaskToReadyList+0xcc>)
 80090ec:	441a      	add	r2, r3
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	3304      	adds	r3, #4
 80090f2:	4619      	mov	r1, r3
 80090f4:	4610      	mov	r0, r2
 80090f6:	f7ff f88a 	bl	800820e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80090fa:	f001 fa07 	bl	800a50c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80090fe:	4b0d      	ldr	r3, [pc, #52]	; (8009134 <prvAddNewTaskToReadyList+0xc0>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d00e      	beq.n	8009124 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009106:	4b0a      	ldr	r3, [pc, #40]	; (8009130 <prvAddNewTaskToReadyList+0xbc>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009110:	429a      	cmp	r2, r3
 8009112:	d207      	bcs.n	8009124 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009114:	4b0b      	ldr	r3, [pc, #44]	; (8009144 <prvAddNewTaskToReadyList+0xd0>)
 8009116:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800911a:	601a      	str	r2, [r3, #0]
 800911c:	f3bf 8f4f 	dsb	sy
 8009120:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009124:	bf00      	nop
 8009126:	3708      	adds	r7, #8
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}
 800912c:	20000fb4 	.word	0x20000fb4
 8009130:	20000eb4 	.word	0x20000eb4
 8009134:	20000fc0 	.word	0x20000fc0
 8009138:	20000fd0 	.word	0x20000fd0
 800913c:	20000fbc 	.word	0x20000fbc
 8009140:	20000eb8 	.word	0x20000eb8
 8009144:	e000ed04 	.word	0xe000ed04

08009148 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009148:	b580      	push	{r7, lr}
 800914a:	b084      	sub	sp, #16
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009150:	2300      	movs	r3, #0
 8009152:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d017      	beq.n	800918a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800915a:	4b13      	ldr	r3, [pc, #76]	; (80091a8 <vTaskDelay+0x60>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d00a      	beq.n	8009178 <vTaskDelay+0x30>
	__asm volatile
 8009162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009166:	f383 8811 	msr	BASEPRI, r3
 800916a:	f3bf 8f6f 	isb	sy
 800916e:	f3bf 8f4f 	dsb	sy
 8009172:	60bb      	str	r3, [r7, #8]
}
 8009174:	bf00      	nop
 8009176:	e7fe      	b.n	8009176 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009178:	f000 f88a 	bl	8009290 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800917c:	2100      	movs	r1, #0
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 fd0e 	bl	8009ba0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009184:	f000 f892 	bl	80092ac <xTaskResumeAll>
 8009188:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d107      	bne.n	80091a0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009190:	4b06      	ldr	r3, [pc, #24]	; (80091ac <vTaskDelay+0x64>)
 8009192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009196:	601a      	str	r2, [r3, #0]
 8009198:	f3bf 8f4f 	dsb	sy
 800919c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80091a0:	bf00      	nop
 80091a2:	3710      	adds	r7, #16
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}
 80091a8:	20000fdc 	.word	0x20000fdc
 80091ac:	e000ed04 	.word	0xe000ed04

080091b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b08a      	sub	sp, #40	; 0x28
 80091b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80091b6:	2300      	movs	r3, #0
 80091b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80091ba:	2300      	movs	r3, #0
 80091bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80091be:	463a      	mov	r2, r7
 80091c0:	1d39      	adds	r1, r7, #4
 80091c2:	f107 0308 	add.w	r3, r7, #8
 80091c6:	4618      	mov	r0, r3
 80091c8:	f7f7 ff7c 	bl	80010c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80091cc:	6839      	ldr	r1, [r7, #0]
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	68ba      	ldr	r2, [r7, #8]
 80091d2:	9202      	str	r2, [sp, #8]
 80091d4:	9301      	str	r3, [sp, #4]
 80091d6:	2300      	movs	r3, #0
 80091d8:	9300      	str	r3, [sp, #0]
 80091da:	2300      	movs	r3, #0
 80091dc:	460a      	mov	r2, r1
 80091de:	4924      	ldr	r1, [pc, #144]	; (8009270 <vTaskStartScheduler+0xc0>)
 80091e0:	4824      	ldr	r0, [pc, #144]	; (8009274 <vTaskStartScheduler+0xc4>)
 80091e2:	f7ff fe07 	bl	8008df4 <xTaskCreateStatic>
 80091e6:	4603      	mov	r3, r0
 80091e8:	4a23      	ldr	r2, [pc, #140]	; (8009278 <vTaskStartScheduler+0xc8>)
 80091ea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80091ec:	4b22      	ldr	r3, [pc, #136]	; (8009278 <vTaskStartScheduler+0xc8>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d002      	beq.n	80091fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80091f4:	2301      	movs	r3, #1
 80091f6:	617b      	str	r3, [r7, #20]
 80091f8:	e001      	b.n	80091fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80091fa:	2300      	movs	r3, #0
 80091fc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	2b01      	cmp	r3, #1
 8009202:	d102      	bne.n	800920a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009204:	f000 fd32 	bl	8009c6c <xTimerCreateTimerTask>
 8009208:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	2b01      	cmp	r3, #1
 800920e:	d11b      	bne.n	8009248 <vTaskStartScheduler+0x98>
	__asm volatile
 8009210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009214:	f383 8811 	msr	BASEPRI, r3
 8009218:	f3bf 8f6f 	isb	sy
 800921c:	f3bf 8f4f 	dsb	sy
 8009220:	613b      	str	r3, [r7, #16]
}
 8009222:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009224:	4b15      	ldr	r3, [pc, #84]	; (800927c <vTaskStartScheduler+0xcc>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	334c      	adds	r3, #76	; 0x4c
 800922a:	4a15      	ldr	r2, [pc, #84]	; (8009280 <vTaskStartScheduler+0xd0>)
 800922c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800922e:	4b15      	ldr	r3, [pc, #84]	; (8009284 <vTaskStartScheduler+0xd4>)
 8009230:	f04f 32ff 	mov.w	r2, #4294967295
 8009234:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009236:	4b14      	ldr	r3, [pc, #80]	; (8009288 <vTaskStartScheduler+0xd8>)
 8009238:	2201      	movs	r2, #1
 800923a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800923c:	4b13      	ldr	r3, [pc, #76]	; (800928c <vTaskStartScheduler+0xdc>)
 800923e:	2200      	movs	r2, #0
 8009240:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009242:	f001 f8c1 	bl	800a3c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009246:	e00e      	b.n	8009266 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009248:	697b      	ldr	r3, [r7, #20]
 800924a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800924e:	d10a      	bne.n	8009266 <vTaskStartScheduler+0xb6>
	__asm volatile
 8009250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009254:	f383 8811 	msr	BASEPRI, r3
 8009258:	f3bf 8f6f 	isb	sy
 800925c:	f3bf 8f4f 	dsb	sy
 8009260:	60fb      	str	r3, [r7, #12]
}
 8009262:	bf00      	nop
 8009264:	e7fe      	b.n	8009264 <vTaskStartScheduler+0xb4>
}
 8009266:	bf00      	nop
 8009268:	3718      	adds	r7, #24
 800926a:	46bd      	mov	sp, r7
 800926c:	bd80      	pop	{r7, pc}
 800926e:	bf00      	nop
 8009270:	0800dbb8 	.word	0x0800dbb8
 8009274:	080098a1 	.word	0x080098a1
 8009278:	20000fd8 	.word	0x20000fd8
 800927c:	20000eb4 	.word	0x20000eb4
 8009280:	20000010 	.word	0x20000010
 8009284:	20000fd4 	.word	0x20000fd4
 8009288:	20000fc0 	.word	0x20000fc0
 800928c:	20000fb8 	.word	0x20000fb8

08009290 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009290:	b480      	push	{r7}
 8009292:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8009294:	4b04      	ldr	r3, [pc, #16]	; (80092a8 <vTaskSuspendAll+0x18>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	3301      	adds	r3, #1
 800929a:	4a03      	ldr	r2, [pc, #12]	; (80092a8 <vTaskSuspendAll+0x18>)
 800929c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800929e:	bf00      	nop
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bc80      	pop	{r7}
 80092a4:	4770      	bx	lr
 80092a6:	bf00      	nop
 80092a8:	20000fdc 	.word	0x20000fdc

080092ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b084      	sub	sp, #16
 80092b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80092b2:	2300      	movs	r3, #0
 80092b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80092b6:	2300      	movs	r3, #0
 80092b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80092ba:	4b41      	ldr	r3, [pc, #260]	; (80093c0 <xTaskResumeAll+0x114>)
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d10a      	bne.n	80092d8 <xTaskResumeAll+0x2c>
	__asm volatile
 80092c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c6:	f383 8811 	msr	BASEPRI, r3
 80092ca:	f3bf 8f6f 	isb	sy
 80092ce:	f3bf 8f4f 	dsb	sy
 80092d2:	603b      	str	r3, [r7, #0]
}
 80092d4:	bf00      	nop
 80092d6:	e7fe      	b.n	80092d6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80092d8:	f001 f8e8 	bl	800a4ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80092dc:	4b38      	ldr	r3, [pc, #224]	; (80093c0 <xTaskResumeAll+0x114>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	3b01      	subs	r3, #1
 80092e2:	4a37      	ldr	r2, [pc, #220]	; (80093c0 <xTaskResumeAll+0x114>)
 80092e4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092e6:	4b36      	ldr	r3, [pc, #216]	; (80093c0 <xTaskResumeAll+0x114>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d161      	bne.n	80093b2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80092ee:	4b35      	ldr	r3, [pc, #212]	; (80093c4 <xTaskResumeAll+0x118>)
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d05d      	beq.n	80093b2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80092f6:	e02e      	b.n	8009356 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092f8:	4b33      	ldr	r3, [pc, #204]	; (80093c8 <xTaskResumeAll+0x11c>)
 80092fa:	68db      	ldr	r3, [r3, #12]
 80092fc:	68db      	ldr	r3, [r3, #12]
 80092fe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	3318      	adds	r3, #24
 8009304:	4618      	mov	r0, r3
 8009306:	f7fe ffdd 	bl	80082c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	3304      	adds	r3, #4
 800930e:	4618      	mov	r0, r3
 8009310:	f7fe ffd8 	bl	80082c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009318:	2201      	movs	r2, #1
 800931a:	409a      	lsls	r2, r3
 800931c:	4b2b      	ldr	r3, [pc, #172]	; (80093cc <xTaskResumeAll+0x120>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	4313      	orrs	r3, r2
 8009322:	4a2a      	ldr	r2, [pc, #168]	; (80093cc <xTaskResumeAll+0x120>)
 8009324:	6013      	str	r3, [r2, #0]
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800932a:	4613      	mov	r3, r2
 800932c:	009b      	lsls	r3, r3, #2
 800932e:	4413      	add	r3, r2
 8009330:	009b      	lsls	r3, r3, #2
 8009332:	4a27      	ldr	r2, [pc, #156]	; (80093d0 <xTaskResumeAll+0x124>)
 8009334:	441a      	add	r2, r3
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	3304      	adds	r3, #4
 800933a:	4619      	mov	r1, r3
 800933c:	4610      	mov	r0, r2
 800933e:	f7fe ff66 	bl	800820e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009346:	4b23      	ldr	r3, [pc, #140]	; (80093d4 <xTaskResumeAll+0x128>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800934c:	429a      	cmp	r2, r3
 800934e:	d302      	bcc.n	8009356 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8009350:	4b21      	ldr	r3, [pc, #132]	; (80093d8 <xTaskResumeAll+0x12c>)
 8009352:	2201      	movs	r2, #1
 8009354:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009356:	4b1c      	ldr	r3, [pc, #112]	; (80093c8 <xTaskResumeAll+0x11c>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d1cc      	bne.n	80092f8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d001      	beq.n	8009368 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009364:	f000 fb58 	bl	8009a18 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009368:	4b1c      	ldr	r3, [pc, #112]	; (80093dc <xTaskResumeAll+0x130>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d010      	beq.n	8009396 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009374:	f000 f844 	bl	8009400 <xTaskIncrementTick>
 8009378:	4603      	mov	r3, r0
 800937a:	2b00      	cmp	r3, #0
 800937c:	d002      	beq.n	8009384 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800937e:	4b16      	ldr	r3, [pc, #88]	; (80093d8 <xTaskResumeAll+0x12c>)
 8009380:	2201      	movs	r2, #1
 8009382:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	3b01      	subs	r3, #1
 8009388:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d1f1      	bne.n	8009374 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8009390:	4b12      	ldr	r3, [pc, #72]	; (80093dc <xTaskResumeAll+0x130>)
 8009392:	2200      	movs	r2, #0
 8009394:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009396:	4b10      	ldr	r3, [pc, #64]	; (80093d8 <xTaskResumeAll+0x12c>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d009      	beq.n	80093b2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800939e:	2301      	movs	r3, #1
 80093a0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80093a2:	4b0f      	ldr	r3, [pc, #60]	; (80093e0 <xTaskResumeAll+0x134>)
 80093a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093a8:	601a      	str	r2, [r3, #0]
 80093aa:	f3bf 8f4f 	dsb	sy
 80093ae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80093b2:	f001 f8ab 	bl	800a50c <vPortExitCritical>

	return xAlreadyYielded;
 80093b6:	68bb      	ldr	r3, [r7, #8]
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	3710      	adds	r7, #16
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}
 80093c0:	20000fdc 	.word	0x20000fdc
 80093c4:	20000fb4 	.word	0x20000fb4
 80093c8:	20000f74 	.word	0x20000f74
 80093cc:	20000fbc 	.word	0x20000fbc
 80093d0:	20000eb8 	.word	0x20000eb8
 80093d4:	20000eb4 	.word	0x20000eb4
 80093d8:	20000fc8 	.word	0x20000fc8
 80093dc:	20000fc4 	.word	0x20000fc4
 80093e0:	e000ed04 	.word	0xe000ed04

080093e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80093e4:	b480      	push	{r7}
 80093e6:	b083      	sub	sp, #12
 80093e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80093ea:	4b04      	ldr	r3, [pc, #16]	; (80093fc <xTaskGetTickCount+0x18>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80093f0:	687b      	ldr	r3, [r7, #4]
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	370c      	adds	r7, #12
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bc80      	pop	{r7}
 80093fa:	4770      	bx	lr
 80093fc:	20000fb8 	.word	0x20000fb8

08009400 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b086      	sub	sp, #24
 8009404:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009406:	2300      	movs	r3, #0
 8009408:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800940a:	4b4e      	ldr	r3, [pc, #312]	; (8009544 <xTaskIncrementTick+0x144>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	2b00      	cmp	r3, #0
 8009410:	f040 8088 	bne.w	8009524 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009414:	4b4c      	ldr	r3, [pc, #304]	; (8009548 <xTaskIncrementTick+0x148>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	3301      	adds	r3, #1
 800941a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800941c:	4a4a      	ldr	r2, [pc, #296]	; (8009548 <xTaskIncrementTick+0x148>)
 800941e:	693b      	ldr	r3, [r7, #16]
 8009420:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d120      	bne.n	800946a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009428:	4b48      	ldr	r3, [pc, #288]	; (800954c <xTaskIncrementTick+0x14c>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d00a      	beq.n	8009448 <xTaskIncrementTick+0x48>
	__asm volatile
 8009432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009436:	f383 8811 	msr	BASEPRI, r3
 800943a:	f3bf 8f6f 	isb	sy
 800943e:	f3bf 8f4f 	dsb	sy
 8009442:	603b      	str	r3, [r7, #0]
}
 8009444:	bf00      	nop
 8009446:	e7fe      	b.n	8009446 <xTaskIncrementTick+0x46>
 8009448:	4b40      	ldr	r3, [pc, #256]	; (800954c <xTaskIncrementTick+0x14c>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	60fb      	str	r3, [r7, #12]
 800944e:	4b40      	ldr	r3, [pc, #256]	; (8009550 <xTaskIncrementTick+0x150>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	4a3e      	ldr	r2, [pc, #248]	; (800954c <xTaskIncrementTick+0x14c>)
 8009454:	6013      	str	r3, [r2, #0]
 8009456:	4a3e      	ldr	r2, [pc, #248]	; (8009550 <xTaskIncrementTick+0x150>)
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	6013      	str	r3, [r2, #0]
 800945c:	4b3d      	ldr	r3, [pc, #244]	; (8009554 <xTaskIncrementTick+0x154>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	3301      	adds	r3, #1
 8009462:	4a3c      	ldr	r2, [pc, #240]	; (8009554 <xTaskIncrementTick+0x154>)
 8009464:	6013      	str	r3, [r2, #0]
 8009466:	f000 fad7 	bl	8009a18 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800946a:	4b3b      	ldr	r3, [pc, #236]	; (8009558 <xTaskIncrementTick+0x158>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	693a      	ldr	r2, [r7, #16]
 8009470:	429a      	cmp	r2, r3
 8009472:	d348      	bcc.n	8009506 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009474:	4b35      	ldr	r3, [pc, #212]	; (800954c <xTaskIncrementTick+0x14c>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d104      	bne.n	8009488 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800947e:	4b36      	ldr	r3, [pc, #216]	; (8009558 <xTaskIncrementTick+0x158>)
 8009480:	f04f 32ff 	mov.w	r2, #4294967295
 8009484:	601a      	str	r2, [r3, #0]
					break;
 8009486:	e03e      	b.n	8009506 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009488:	4b30      	ldr	r3, [pc, #192]	; (800954c <xTaskIncrementTick+0x14c>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	68db      	ldr	r3, [r3, #12]
 800948e:	68db      	ldr	r3, [r3, #12]
 8009490:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009498:	693a      	ldr	r2, [r7, #16]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	429a      	cmp	r2, r3
 800949e:	d203      	bcs.n	80094a8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80094a0:	4a2d      	ldr	r2, [pc, #180]	; (8009558 <xTaskIncrementTick+0x158>)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80094a6:	e02e      	b.n	8009506 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	3304      	adds	r3, #4
 80094ac:	4618      	mov	r0, r3
 80094ae:	f7fe ff09 	bl	80082c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d004      	beq.n	80094c4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	3318      	adds	r3, #24
 80094be:	4618      	mov	r0, r3
 80094c0:	f7fe ff00 	bl	80082c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094c8:	2201      	movs	r2, #1
 80094ca:	409a      	lsls	r2, r3
 80094cc:	4b23      	ldr	r3, [pc, #140]	; (800955c <xTaskIncrementTick+0x15c>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4313      	orrs	r3, r2
 80094d2:	4a22      	ldr	r2, [pc, #136]	; (800955c <xTaskIncrementTick+0x15c>)
 80094d4:	6013      	str	r3, [r2, #0]
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094da:	4613      	mov	r3, r2
 80094dc:	009b      	lsls	r3, r3, #2
 80094de:	4413      	add	r3, r2
 80094e0:	009b      	lsls	r3, r3, #2
 80094e2:	4a1f      	ldr	r2, [pc, #124]	; (8009560 <xTaskIncrementTick+0x160>)
 80094e4:	441a      	add	r2, r3
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	3304      	adds	r3, #4
 80094ea:	4619      	mov	r1, r3
 80094ec:	4610      	mov	r0, r2
 80094ee:	f7fe fe8e 	bl	800820e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094f6:	4b1b      	ldr	r3, [pc, #108]	; (8009564 <xTaskIncrementTick+0x164>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094fc:	429a      	cmp	r2, r3
 80094fe:	d3b9      	bcc.n	8009474 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009500:	2301      	movs	r3, #1
 8009502:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009504:	e7b6      	b.n	8009474 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009506:	4b17      	ldr	r3, [pc, #92]	; (8009564 <xTaskIncrementTick+0x164>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800950c:	4914      	ldr	r1, [pc, #80]	; (8009560 <xTaskIncrementTick+0x160>)
 800950e:	4613      	mov	r3, r2
 8009510:	009b      	lsls	r3, r3, #2
 8009512:	4413      	add	r3, r2
 8009514:	009b      	lsls	r3, r3, #2
 8009516:	440b      	add	r3, r1
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	2b01      	cmp	r3, #1
 800951c:	d907      	bls.n	800952e <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800951e:	2301      	movs	r3, #1
 8009520:	617b      	str	r3, [r7, #20]
 8009522:	e004      	b.n	800952e <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8009524:	4b10      	ldr	r3, [pc, #64]	; (8009568 <xTaskIncrementTick+0x168>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	3301      	adds	r3, #1
 800952a:	4a0f      	ldr	r2, [pc, #60]	; (8009568 <xTaskIncrementTick+0x168>)
 800952c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800952e:	4b0f      	ldr	r3, [pc, #60]	; (800956c <xTaskIncrementTick+0x16c>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d001      	beq.n	800953a <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8009536:	2301      	movs	r3, #1
 8009538:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800953a:	697b      	ldr	r3, [r7, #20]
}
 800953c:	4618      	mov	r0, r3
 800953e:	3718      	adds	r7, #24
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}
 8009544:	20000fdc 	.word	0x20000fdc
 8009548:	20000fb8 	.word	0x20000fb8
 800954c:	20000f6c 	.word	0x20000f6c
 8009550:	20000f70 	.word	0x20000f70
 8009554:	20000fcc 	.word	0x20000fcc
 8009558:	20000fd4 	.word	0x20000fd4
 800955c:	20000fbc 	.word	0x20000fbc
 8009560:	20000eb8 	.word	0x20000eb8
 8009564:	20000eb4 	.word	0x20000eb4
 8009568:	20000fc4 	.word	0x20000fc4
 800956c:	20000fc8 	.word	0x20000fc8

08009570 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009570:	b480      	push	{r7}
 8009572:	b087      	sub	sp, #28
 8009574:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009576:	4b29      	ldr	r3, [pc, #164]	; (800961c <vTaskSwitchContext+0xac>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d003      	beq.n	8009586 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800957e:	4b28      	ldr	r3, [pc, #160]	; (8009620 <vTaskSwitchContext+0xb0>)
 8009580:	2201      	movs	r2, #1
 8009582:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009584:	e044      	b.n	8009610 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8009586:	4b26      	ldr	r3, [pc, #152]	; (8009620 <vTaskSwitchContext+0xb0>)
 8009588:	2200      	movs	r2, #0
 800958a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800958c:	4b25      	ldr	r3, [pc, #148]	; (8009624 <vTaskSwitchContext+0xb4>)
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	fab3 f383 	clz	r3, r3
 8009598:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800959a:	7afb      	ldrb	r3, [r7, #11]
 800959c:	f1c3 031f 	rsb	r3, r3, #31
 80095a0:	617b      	str	r3, [r7, #20]
 80095a2:	4921      	ldr	r1, [pc, #132]	; (8009628 <vTaskSwitchContext+0xb8>)
 80095a4:	697a      	ldr	r2, [r7, #20]
 80095a6:	4613      	mov	r3, r2
 80095a8:	009b      	lsls	r3, r3, #2
 80095aa:	4413      	add	r3, r2
 80095ac:	009b      	lsls	r3, r3, #2
 80095ae:	440b      	add	r3, r1
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d10a      	bne.n	80095cc <vTaskSwitchContext+0x5c>
	__asm volatile
 80095b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ba:	f383 8811 	msr	BASEPRI, r3
 80095be:	f3bf 8f6f 	isb	sy
 80095c2:	f3bf 8f4f 	dsb	sy
 80095c6:	607b      	str	r3, [r7, #4]
}
 80095c8:	bf00      	nop
 80095ca:	e7fe      	b.n	80095ca <vTaskSwitchContext+0x5a>
 80095cc:	697a      	ldr	r2, [r7, #20]
 80095ce:	4613      	mov	r3, r2
 80095d0:	009b      	lsls	r3, r3, #2
 80095d2:	4413      	add	r3, r2
 80095d4:	009b      	lsls	r3, r3, #2
 80095d6:	4a14      	ldr	r2, [pc, #80]	; (8009628 <vTaskSwitchContext+0xb8>)
 80095d8:	4413      	add	r3, r2
 80095da:	613b      	str	r3, [r7, #16]
 80095dc:	693b      	ldr	r3, [r7, #16]
 80095de:	685b      	ldr	r3, [r3, #4]
 80095e0:	685a      	ldr	r2, [r3, #4]
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	605a      	str	r2, [r3, #4]
 80095e6:	693b      	ldr	r3, [r7, #16]
 80095e8:	685a      	ldr	r2, [r3, #4]
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	3308      	adds	r3, #8
 80095ee:	429a      	cmp	r2, r3
 80095f0:	d104      	bne.n	80095fc <vTaskSwitchContext+0x8c>
 80095f2:	693b      	ldr	r3, [r7, #16]
 80095f4:	685b      	ldr	r3, [r3, #4]
 80095f6:	685a      	ldr	r2, [r3, #4]
 80095f8:	693b      	ldr	r3, [r7, #16]
 80095fa:	605a      	str	r2, [r3, #4]
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	685b      	ldr	r3, [r3, #4]
 8009600:	68db      	ldr	r3, [r3, #12]
 8009602:	4a0a      	ldr	r2, [pc, #40]	; (800962c <vTaskSwitchContext+0xbc>)
 8009604:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009606:	4b09      	ldr	r3, [pc, #36]	; (800962c <vTaskSwitchContext+0xbc>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	334c      	adds	r3, #76	; 0x4c
 800960c:	4a08      	ldr	r2, [pc, #32]	; (8009630 <vTaskSwitchContext+0xc0>)
 800960e:	6013      	str	r3, [r2, #0]
}
 8009610:	bf00      	nop
 8009612:	371c      	adds	r7, #28
 8009614:	46bd      	mov	sp, r7
 8009616:	bc80      	pop	{r7}
 8009618:	4770      	bx	lr
 800961a:	bf00      	nop
 800961c:	20000fdc 	.word	0x20000fdc
 8009620:	20000fc8 	.word	0x20000fc8
 8009624:	20000fbc 	.word	0x20000fbc
 8009628:	20000eb8 	.word	0x20000eb8
 800962c:	20000eb4 	.word	0x20000eb4
 8009630:	20000010 	.word	0x20000010

08009634 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b084      	sub	sp, #16
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
 800963c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d10a      	bne.n	800965a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009648:	f383 8811 	msr	BASEPRI, r3
 800964c:	f3bf 8f6f 	isb	sy
 8009650:	f3bf 8f4f 	dsb	sy
 8009654:	60fb      	str	r3, [r7, #12]
}
 8009656:	bf00      	nop
 8009658:	e7fe      	b.n	8009658 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800965a:	4b07      	ldr	r3, [pc, #28]	; (8009678 <vTaskPlaceOnEventList+0x44>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	3318      	adds	r3, #24
 8009660:	4619      	mov	r1, r3
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f7fe fdf6 	bl	8008254 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009668:	2101      	movs	r1, #1
 800966a:	6838      	ldr	r0, [r7, #0]
 800966c:	f000 fa98 	bl	8009ba0 <prvAddCurrentTaskToDelayedList>
}
 8009670:	bf00      	nop
 8009672:	3710      	adds	r7, #16
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}
 8009678:	20000eb4 	.word	0x20000eb4

0800967c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800967c:	b580      	push	{r7, lr}
 800967e:	b086      	sub	sp, #24
 8009680:	af00      	add	r7, sp, #0
 8009682:	60f8      	str	r0, [r7, #12]
 8009684:	60b9      	str	r1, [r7, #8]
 8009686:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d10a      	bne.n	80096a4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800968e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009692:	f383 8811 	msr	BASEPRI, r3
 8009696:	f3bf 8f6f 	isb	sy
 800969a:	f3bf 8f4f 	dsb	sy
 800969e:	617b      	str	r3, [r7, #20]
}
 80096a0:	bf00      	nop
 80096a2:	e7fe      	b.n	80096a2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80096a4:	4b0a      	ldr	r3, [pc, #40]	; (80096d0 <vTaskPlaceOnEventListRestricted+0x54>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	3318      	adds	r3, #24
 80096aa:	4619      	mov	r1, r3
 80096ac:	68f8      	ldr	r0, [r7, #12]
 80096ae:	f7fe fdae 	bl	800820e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d002      	beq.n	80096be <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80096b8:	f04f 33ff 	mov.w	r3, #4294967295
 80096bc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80096be:	6879      	ldr	r1, [r7, #4]
 80096c0:	68b8      	ldr	r0, [r7, #8]
 80096c2:	f000 fa6d 	bl	8009ba0 <prvAddCurrentTaskToDelayedList>
	}
 80096c6:	bf00      	nop
 80096c8:	3718      	adds	r7, #24
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}
 80096ce:	bf00      	nop
 80096d0:	20000eb4 	.word	0x20000eb4

080096d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b086      	sub	sp, #24
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	68db      	ldr	r3, [r3, #12]
 80096e0:	68db      	ldr	r3, [r3, #12]
 80096e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d10a      	bne.n	8009700 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80096ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ee:	f383 8811 	msr	BASEPRI, r3
 80096f2:	f3bf 8f6f 	isb	sy
 80096f6:	f3bf 8f4f 	dsb	sy
 80096fa:	60fb      	str	r3, [r7, #12]
}
 80096fc:	bf00      	nop
 80096fe:	e7fe      	b.n	80096fe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009700:	693b      	ldr	r3, [r7, #16]
 8009702:	3318      	adds	r3, #24
 8009704:	4618      	mov	r0, r3
 8009706:	f7fe fddd 	bl	80082c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800970a:	4b1d      	ldr	r3, [pc, #116]	; (8009780 <xTaskRemoveFromEventList+0xac>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d11c      	bne.n	800974c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009712:	693b      	ldr	r3, [r7, #16]
 8009714:	3304      	adds	r3, #4
 8009716:	4618      	mov	r0, r3
 8009718:	f7fe fdd4 	bl	80082c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009720:	2201      	movs	r2, #1
 8009722:	409a      	lsls	r2, r3
 8009724:	4b17      	ldr	r3, [pc, #92]	; (8009784 <xTaskRemoveFromEventList+0xb0>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	4313      	orrs	r3, r2
 800972a:	4a16      	ldr	r2, [pc, #88]	; (8009784 <xTaskRemoveFromEventList+0xb0>)
 800972c:	6013      	str	r3, [r2, #0]
 800972e:	693b      	ldr	r3, [r7, #16]
 8009730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009732:	4613      	mov	r3, r2
 8009734:	009b      	lsls	r3, r3, #2
 8009736:	4413      	add	r3, r2
 8009738:	009b      	lsls	r3, r3, #2
 800973a:	4a13      	ldr	r2, [pc, #76]	; (8009788 <xTaskRemoveFromEventList+0xb4>)
 800973c:	441a      	add	r2, r3
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	3304      	adds	r3, #4
 8009742:	4619      	mov	r1, r3
 8009744:	4610      	mov	r0, r2
 8009746:	f7fe fd62 	bl	800820e <vListInsertEnd>
 800974a:	e005      	b.n	8009758 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	3318      	adds	r3, #24
 8009750:	4619      	mov	r1, r3
 8009752:	480e      	ldr	r0, [pc, #56]	; (800978c <xTaskRemoveFromEventList+0xb8>)
 8009754:	f7fe fd5b 	bl	800820e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009758:	693b      	ldr	r3, [r7, #16]
 800975a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800975c:	4b0c      	ldr	r3, [pc, #48]	; (8009790 <xTaskRemoveFromEventList+0xbc>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009762:	429a      	cmp	r2, r3
 8009764:	d905      	bls.n	8009772 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009766:	2301      	movs	r3, #1
 8009768:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800976a:	4b0a      	ldr	r3, [pc, #40]	; (8009794 <xTaskRemoveFromEventList+0xc0>)
 800976c:	2201      	movs	r2, #1
 800976e:	601a      	str	r2, [r3, #0]
 8009770:	e001      	b.n	8009776 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8009772:	2300      	movs	r3, #0
 8009774:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009776:	697b      	ldr	r3, [r7, #20]
}
 8009778:	4618      	mov	r0, r3
 800977a:	3718      	adds	r7, #24
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}
 8009780:	20000fdc 	.word	0x20000fdc
 8009784:	20000fbc 	.word	0x20000fbc
 8009788:	20000eb8 	.word	0x20000eb8
 800978c:	20000f74 	.word	0x20000f74
 8009790:	20000eb4 	.word	0x20000eb4
 8009794:	20000fc8 	.word	0x20000fc8

08009798 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009798:	b480      	push	{r7}
 800979a:	b083      	sub	sp, #12
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80097a0:	4b06      	ldr	r3, [pc, #24]	; (80097bc <vTaskInternalSetTimeOutState+0x24>)
 80097a2:	681a      	ldr	r2, [r3, #0]
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80097a8:	4b05      	ldr	r3, [pc, #20]	; (80097c0 <vTaskInternalSetTimeOutState+0x28>)
 80097aa:	681a      	ldr	r2, [r3, #0]
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	605a      	str	r2, [r3, #4]
}
 80097b0:	bf00      	nop
 80097b2:	370c      	adds	r7, #12
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bc80      	pop	{r7}
 80097b8:	4770      	bx	lr
 80097ba:	bf00      	nop
 80097bc:	20000fcc 	.word	0x20000fcc
 80097c0:	20000fb8 	.word	0x20000fb8

080097c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b088      	sub	sp, #32
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
 80097cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d10a      	bne.n	80097ea <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80097d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d8:	f383 8811 	msr	BASEPRI, r3
 80097dc:	f3bf 8f6f 	isb	sy
 80097e0:	f3bf 8f4f 	dsb	sy
 80097e4:	613b      	str	r3, [r7, #16]
}
 80097e6:	bf00      	nop
 80097e8:	e7fe      	b.n	80097e8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d10a      	bne.n	8009806 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80097f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f4:	f383 8811 	msr	BASEPRI, r3
 80097f8:	f3bf 8f6f 	isb	sy
 80097fc:	f3bf 8f4f 	dsb	sy
 8009800:	60fb      	str	r3, [r7, #12]
}
 8009802:	bf00      	nop
 8009804:	e7fe      	b.n	8009804 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009806:	f000 fe51 	bl	800a4ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800980a:	4b1d      	ldr	r3, [pc, #116]	; (8009880 <xTaskCheckForTimeOut+0xbc>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	685b      	ldr	r3, [r3, #4]
 8009814:	69ba      	ldr	r2, [r7, #24]
 8009816:	1ad3      	subs	r3, r2, r3
 8009818:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009822:	d102      	bne.n	800982a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009824:	2300      	movs	r3, #0
 8009826:	61fb      	str	r3, [r7, #28]
 8009828:	e023      	b.n	8009872 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681a      	ldr	r2, [r3, #0]
 800982e:	4b15      	ldr	r3, [pc, #84]	; (8009884 <xTaskCheckForTimeOut+0xc0>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	429a      	cmp	r2, r3
 8009834:	d007      	beq.n	8009846 <xTaskCheckForTimeOut+0x82>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	685b      	ldr	r3, [r3, #4]
 800983a:	69ba      	ldr	r2, [r7, #24]
 800983c:	429a      	cmp	r2, r3
 800983e:	d302      	bcc.n	8009846 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009840:	2301      	movs	r3, #1
 8009842:	61fb      	str	r3, [r7, #28]
 8009844:	e015      	b.n	8009872 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	697a      	ldr	r2, [r7, #20]
 800984c:	429a      	cmp	r2, r3
 800984e:	d20b      	bcs.n	8009868 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	681a      	ldr	r2, [r3, #0]
 8009854:	697b      	ldr	r3, [r7, #20]
 8009856:	1ad2      	subs	r2, r2, r3
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f7ff ff9b 	bl	8009798 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009862:	2300      	movs	r3, #0
 8009864:	61fb      	str	r3, [r7, #28]
 8009866:	e004      	b.n	8009872 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	2200      	movs	r2, #0
 800986c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800986e:	2301      	movs	r3, #1
 8009870:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009872:	f000 fe4b 	bl	800a50c <vPortExitCritical>

	return xReturn;
 8009876:	69fb      	ldr	r3, [r7, #28]
}
 8009878:	4618      	mov	r0, r3
 800987a:	3720      	adds	r7, #32
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}
 8009880:	20000fb8 	.word	0x20000fb8
 8009884:	20000fcc 	.word	0x20000fcc

08009888 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009888:	b480      	push	{r7}
 800988a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800988c:	4b03      	ldr	r3, [pc, #12]	; (800989c <vTaskMissedYield+0x14>)
 800988e:	2201      	movs	r2, #1
 8009890:	601a      	str	r2, [r3, #0]
}
 8009892:	bf00      	nop
 8009894:	46bd      	mov	sp, r7
 8009896:	bc80      	pop	{r7}
 8009898:	4770      	bx	lr
 800989a:	bf00      	nop
 800989c:	20000fc8 	.word	0x20000fc8

080098a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b082      	sub	sp, #8
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80098a8:	f000 f854 	bl	8009954 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80098ac:	4b07      	ldr	r3, [pc, #28]	; (80098cc <prvIdleTask+0x2c>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	d907      	bls.n	80098c4 <prvIdleTask+0x24>
			{
				taskYIELD();
 80098b4:	4b06      	ldr	r3, [pc, #24]	; (80098d0 <prvIdleTask+0x30>)
 80098b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098ba:	601a      	str	r2, [r3, #0]
 80098bc:	f3bf 8f4f 	dsb	sy
 80098c0:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 80098c4:	f7f7 fbf8 	bl	80010b8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 80098c8:	e7ee      	b.n	80098a8 <prvIdleTask+0x8>
 80098ca:	bf00      	nop
 80098cc:	20000eb8 	.word	0x20000eb8
 80098d0:	e000ed04 	.word	0xe000ed04

080098d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b082      	sub	sp, #8
 80098d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80098da:	2300      	movs	r3, #0
 80098dc:	607b      	str	r3, [r7, #4]
 80098de:	e00c      	b.n	80098fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80098e0:	687a      	ldr	r2, [r7, #4]
 80098e2:	4613      	mov	r3, r2
 80098e4:	009b      	lsls	r3, r3, #2
 80098e6:	4413      	add	r3, r2
 80098e8:	009b      	lsls	r3, r3, #2
 80098ea:	4a12      	ldr	r2, [pc, #72]	; (8009934 <prvInitialiseTaskLists+0x60>)
 80098ec:	4413      	add	r3, r2
 80098ee:	4618      	mov	r0, r3
 80098f0:	f7fe fc62 	bl	80081b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	3301      	adds	r3, #1
 80098f8:	607b      	str	r3, [r7, #4]
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2b06      	cmp	r3, #6
 80098fe:	d9ef      	bls.n	80098e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009900:	480d      	ldr	r0, [pc, #52]	; (8009938 <prvInitialiseTaskLists+0x64>)
 8009902:	f7fe fc59 	bl	80081b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009906:	480d      	ldr	r0, [pc, #52]	; (800993c <prvInitialiseTaskLists+0x68>)
 8009908:	f7fe fc56 	bl	80081b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800990c:	480c      	ldr	r0, [pc, #48]	; (8009940 <prvInitialiseTaskLists+0x6c>)
 800990e:	f7fe fc53 	bl	80081b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009912:	480c      	ldr	r0, [pc, #48]	; (8009944 <prvInitialiseTaskLists+0x70>)
 8009914:	f7fe fc50 	bl	80081b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009918:	480b      	ldr	r0, [pc, #44]	; (8009948 <prvInitialiseTaskLists+0x74>)
 800991a:	f7fe fc4d 	bl	80081b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800991e:	4b0b      	ldr	r3, [pc, #44]	; (800994c <prvInitialiseTaskLists+0x78>)
 8009920:	4a05      	ldr	r2, [pc, #20]	; (8009938 <prvInitialiseTaskLists+0x64>)
 8009922:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009924:	4b0a      	ldr	r3, [pc, #40]	; (8009950 <prvInitialiseTaskLists+0x7c>)
 8009926:	4a05      	ldr	r2, [pc, #20]	; (800993c <prvInitialiseTaskLists+0x68>)
 8009928:	601a      	str	r2, [r3, #0]
}
 800992a:	bf00      	nop
 800992c:	3708      	adds	r7, #8
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}
 8009932:	bf00      	nop
 8009934:	20000eb8 	.word	0x20000eb8
 8009938:	20000f44 	.word	0x20000f44
 800993c:	20000f58 	.word	0x20000f58
 8009940:	20000f74 	.word	0x20000f74
 8009944:	20000f88 	.word	0x20000f88
 8009948:	20000fa0 	.word	0x20000fa0
 800994c:	20000f6c 	.word	0x20000f6c
 8009950:	20000f70 	.word	0x20000f70

08009954 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b082      	sub	sp, #8
 8009958:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800995a:	e019      	b.n	8009990 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800995c:	f000 fda6 	bl	800a4ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009960:	4b10      	ldr	r3, [pc, #64]	; (80099a4 <prvCheckTasksWaitingTermination+0x50>)
 8009962:	68db      	ldr	r3, [r3, #12]
 8009964:	68db      	ldr	r3, [r3, #12]
 8009966:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	3304      	adds	r3, #4
 800996c:	4618      	mov	r0, r3
 800996e:	f7fe fca9 	bl	80082c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009972:	4b0d      	ldr	r3, [pc, #52]	; (80099a8 <prvCheckTasksWaitingTermination+0x54>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	3b01      	subs	r3, #1
 8009978:	4a0b      	ldr	r2, [pc, #44]	; (80099a8 <prvCheckTasksWaitingTermination+0x54>)
 800997a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800997c:	4b0b      	ldr	r3, [pc, #44]	; (80099ac <prvCheckTasksWaitingTermination+0x58>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	3b01      	subs	r3, #1
 8009982:	4a0a      	ldr	r2, [pc, #40]	; (80099ac <prvCheckTasksWaitingTermination+0x58>)
 8009984:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009986:	f000 fdc1 	bl	800a50c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f000 f810 	bl	80099b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009990:	4b06      	ldr	r3, [pc, #24]	; (80099ac <prvCheckTasksWaitingTermination+0x58>)
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d1e1      	bne.n	800995c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009998:	bf00      	nop
 800999a:	bf00      	nop
 800999c:	3708      	adds	r7, #8
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}
 80099a2:	bf00      	nop
 80099a4:	20000f88 	.word	0x20000f88
 80099a8:	20000fb4 	.word	0x20000fb4
 80099ac:	20000f9c 	.word	0x20000f9c

080099b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b084      	sub	sp, #16
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	334c      	adds	r3, #76	; 0x4c
 80099bc:	4618      	mov	r0, r3
 80099be:	f001 fe85 	bl	800b6cc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d108      	bne.n	80099de <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099d0:	4618      	mov	r0, r3
 80099d2:	f000 ff2f 	bl	800a834 <vPortFree>
				vPortFree( pxTCB );
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f000 ff2c 	bl	800a834 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80099dc:	e018      	b.n	8009a10 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80099e4:	2b01      	cmp	r3, #1
 80099e6:	d103      	bne.n	80099f0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f000 ff23 	bl	800a834 <vPortFree>
	}
 80099ee:	e00f      	b.n	8009a10 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 80099f6:	2b02      	cmp	r3, #2
 80099f8:	d00a      	beq.n	8009a10 <prvDeleteTCB+0x60>
	__asm volatile
 80099fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099fe:	f383 8811 	msr	BASEPRI, r3
 8009a02:	f3bf 8f6f 	isb	sy
 8009a06:	f3bf 8f4f 	dsb	sy
 8009a0a:	60fb      	str	r3, [r7, #12]
}
 8009a0c:	bf00      	nop
 8009a0e:	e7fe      	b.n	8009a0e <prvDeleteTCB+0x5e>
	}
 8009a10:	bf00      	nop
 8009a12:	3710      	adds	r7, #16
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}

08009a18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b083      	sub	sp, #12
 8009a1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009a1e:	4b0c      	ldr	r3, [pc, #48]	; (8009a50 <prvResetNextTaskUnblockTime+0x38>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d104      	bne.n	8009a32 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009a28:	4b0a      	ldr	r3, [pc, #40]	; (8009a54 <prvResetNextTaskUnblockTime+0x3c>)
 8009a2a:	f04f 32ff 	mov.w	r2, #4294967295
 8009a2e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009a30:	e008      	b.n	8009a44 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a32:	4b07      	ldr	r3, [pc, #28]	; (8009a50 <prvResetNextTaskUnblockTime+0x38>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	68db      	ldr	r3, [r3, #12]
 8009a38:	68db      	ldr	r3, [r3, #12]
 8009a3a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	685b      	ldr	r3, [r3, #4]
 8009a40:	4a04      	ldr	r2, [pc, #16]	; (8009a54 <prvResetNextTaskUnblockTime+0x3c>)
 8009a42:	6013      	str	r3, [r2, #0]
}
 8009a44:	bf00      	nop
 8009a46:	370c      	adds	r7, #12
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bc80      	pop	{r7}
 8009a4c:	4770      	bx	lr
 8009a4e:	bf00      	nop
 8009a50:	20000f6c 	.word	0x20000f6c
 8009a54:	20000fd4 	.word	0x20000fd4

08009a58 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009a58:	b480      	push	{r7}
 8009a5a:	b083      	sub	sp, #12
 8009a5c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009a5e:	4b0b      	ldr	r3, [pc, #44]	; (8009a8c <xTaskGetSchedulerState+0x34>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d102      	bne.n	8009a6c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009a66:	2301      	movs	r3, #1
 8009a68:	607b      	str	r3, [r7, #4]
 8009a6a:	e008      	b.n	8009a7e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009a6c:	4b08      	ldr	r3, [pc, #32]	; (8009a90 <xTaskGetSchedulerState+0x38>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d102      	bne.n	8009a7a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009a74:	2302      	movs	r3, #2
 8009a76:	607b      	str	r3, [r7, #4]
 8009a78:	e001      	b.n	8009a7e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009a7e:	687b      	ldr	r3, [r7, #4]
	}
 8009a80:	4618      	mov	r0, r3
 8009a82:	370c      	adds	r7, #12
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bc80      	pop	{r7}
 8009a88:	4770      	bx	lr
 8009a8a:	bf00      	nop
 8009a8c:	20000fc0 	.word	0x20000fc0
 8009a90:	20000fdc 	.word	0x20000fdc

08009a94 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b086      	sub	sp, #24
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d06e      	beq.n	8009b88 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009aaa:	4b3a      	ldr	r3, [pc, #232]	; (8009b94 <xTaskPriorityDisinherit+0x100>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	693a      	ldr	r2, [r7, #16]
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	d00a      	beq.n	8009aca <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab8:	f383 8811 	msr	BASEPRI, r3
 8009abc:	f3bf 8f6f 	isb	sy
 8009ac0:	f3bf 8f4f 	dsb	sy
 8009ac4:	60fb      	str	r3, [r7, #12]
}
 8009ac6:	bf00      	nop
 8009ac8:	e7fe      	b.n	8009ac8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009aca:	693b      	ldr	r3, [r7, #16]
 8009acc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d10a      	bne.n	8009ae8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad6:	f383 8811 	msr	BASEPRI, r3
 8009ada:	f3bf 8f6f 	isb	sy
 8009ade:	f3bf 8f4f 	dsb	sy
 8009ae2:	60bb      	str	r3, [r7, #8]
}
 8009ae4:	bf00      	nop
 8009ae6:	e7fe      	b.n	8009ae6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009aec:	1e5a      	subs	r2, r3, #1
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009af2:	693b      	ldr	r3, [r7, #16]
 8009af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009afa:	429a      	cmp	r2, r3
 8009afc:	d044      	beq.n	8009b88 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009afe:	693b      	ldr	r3, [r7, #16]
 8009b00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d140      	bne.n	8009b88 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009b06:	693b      	ldr	r3, [r7, #16]
 8009b08:	3304      	adds	r3, #4
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f7fe fbda 	bl	80082c4 <uxListRemove>
 8009b10:	4603      	mov	r3, r0
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d115      	bne.n	8009b42 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009b16:	693b      	ldr	r3, [r7, #16]
 8009b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b1a:	491f      	ldr	r1, [pc, #124]	; (8009b98 <xTaskPriorityDisinherit+0x104>)
 8009b1c:	4613      	mov	r3, r2
 8009b1e:	009b      	lsls	r3, r3, #2
 8009b20:	4413      	add	r3, r2
 8009b22:	009b      	lsls	r3, r3, #2
 8009b24:	440b      	add	r3, r1
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d10a      	bne.n	8009b42 <xTaskPriorityDisinherit+0xae>
 8009b2c:	693b      	ldr	r3, [r7, #16]
 8009b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b30:	2201      	movs	r2, #1
 8009b32:	fa02 f303 	lsl.w	r3, r2, r3
 8009b36:	43da      	mvns	r2, r3
 8009b38:	4b18      	ldr	r3, [pc, #96]	; (8009b9c <xTaskPriorityDisinherit+0x108>)
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	4013      	ands	r3, r2
 8009b3e:	4a17      	ldr	r2, [pc, #92]	; (8009b9c <xTaskPriorityDisinherit+0x108>)
 8009b40:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009b42:	693b      	ldr	r3, [r7, #16]
 8009b44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b4a:	693b      	ldr	r3, [r7, #16]
 8009b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b4e:	f1c3 0207 	rsb	r2, r3, #7
 8009b52:	693b      	ldr	r3, [r7, #16]
 8009b54:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b5a:	2201      	movs	r2, #1
 8009b5c:	409a      	lsls	r2, r3
 8009b5e:	4b0f      	ldr	r3, [pc, #60]	; (8009b9c <xTaskPriorityDisinherit+0x108>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	4313      	orrs	r3, r2
 8009b64:	4a0d      	ldr	r2, [pc, #52]	; (8009b9c <xTaskPriorityDisinherit+0x108>)
 8009b66:	6013      	str	r3, [r2, #0]
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b6c:	4613      	mov	r3, r2
 8009b6e:	009b      	lsls	r3, r3, #2
 8009b70:	4413      	add	r3, r2
 8009b72:	009b      	lsls	r3, r3, #2
 8009b74:	4a08      	ldr	r2, [pc, #32]	; (8009b98 <xTaskPriorityDisinherit+0x104>)
 8009b76:	441a      	add	r2, r3
 8009b78:	693b      	ldr	r3, [r7, #16]
 8009b7a:	3304      	adds	r3, #4
 8009b7c:	4619      	mov	r1, r3
 8009b7e:	4610      	mov	r0, r2
 8009b80:	f7fe fb45 	bl	800820e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009b84:	2301      	movs	r3, #1
 8009b86:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009b88:	697b      	ldr	r3, [r7, #20]
	}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	3718      	adds	r7, #24
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}
 8009b92:	bf00      	nop
 8009b94:	20000eb4 	.word	0x20000eb4
 8009b98:	20000eb8 	.word	0x20000eb8
 8009b9c:	20000fbc 	.word	0x20000fbc

08009ba0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b084      	sub	sp, #16
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
 8009ba8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009baa:	4b29      	ldr	r3, [pc, #164]	; (8009c50 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009bb0:	4b28      	ldr	r3, [pc, #160]	; (8009c54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	3304      	adds	r3, #4
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f7fe fb84 	bl	80082c4 <uxListRemove>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d10b      	bne.n	8009bda <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009bc2:	4b24      	ldr	r3, [pc, #144]	; (8009c54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bc8:	2201      	movs	r2, #1
 8009bca:	fa02 f303 	lsl.w	r3, r2, r3
 8009bce:	43da      	mvns	r2, r3
 8009bd0:	4b21      	ldr	r3, [pc, #132]	; (8009c58 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	4013      	ands	r3, r2
 8009bd6:	4a20      	ldr	r2, [pc, #128]	; (8009c58 <prvAddCurrentTaskToDelayedList+0xb8>)
 8009bd8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009be0:	d10a      	bne.n	8009bf8 <prvAddCurrentTaskToDelayedList+0x58>
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d007      	beq.n	8009bf8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009be8:	4b1a      	ldr	r3, [pc, #104]	; (8009c54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	3304      	adds	r3, #4
 8009bee:	4619      	mov	r1, r3
 8009bf0:	481a      	ldr	r0, [pc, #104]	; (8009c5c <prvAddCurrentTaskToDelayedList+0xbc>)
 8009bf2:	f7fe fb0c 	bl	800820e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009bf6:	e026      	b.n	8009c46 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009bf8:	68fa      	ldr	r2, [r7, #12]
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	4413      	add	r3, r2
 8009bfe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009c00:	4b14      	ldr	r3, [pc, #80]	; (8009c54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	68ba      	ldr	r2, [r7, #8]
 8009c06:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009c08:	68ba      	ldr	r2, [r7, #8]
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	429a      	cmp	r2, r3
 8009c0e:	d209      	bcs.n	8009c24 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c10:	4b13      	ldr	r3, [pc, #76]	; (8009c60 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009c12:	681a      	ldr	r2, [r3, #0]
 8009c14:	4b0f      	ldr	r3, [pc, #60]	; (8009c54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	3304      	adds	r3, #4
 8009c1a:	4619      	mov	r1, r3
 8009c1c:	4610      	mov	r0, r2
 8009c1e:	f7fe fb19 	bl	8008254 <vListInsert>
}
 8009c22:	e010      	b.n	8009c46 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c24:	4b0f      	ldr	r3, [pc, #60]	; (8009c64 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009c26:	681a      	ldr	r2, [r3, #0]
 8009c28:	4b0a      	ldr	r3, [pc, #40]	; (8009c54 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	3304      	adds	r3, #4
 8009c2e:	4619      	mov	r1, r3
 8009c30:	4610      	mov	r0, r2
 8009c32:	f7fe fb0f 	bl	8008254 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009c36:	4b0c      	ldr	r3, [pc, #48]	; (8009c68 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	68ba      	ldr	r2, [r7, #8]
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	d202      	bcs.n	8009c46 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009c40:	4a09      	ldr	r2, [pc, #36]	; (8009c68 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	6013      	str	r3, [r2, #0]
}
 8009c46:	bf00      	nop
 8009c48:	3710      	adds	r7, #16
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}
 8009c4e:	bf00      	nop
 8009c50:	20000fb8 	.word	0x20000fb8
 8009c54:	20000eb4 	.word	0x20000eb4
 8009c58:	20000fbc 	.word	0x20000fbc
 8009c5c:	20000fa0 	.word	0x20000fa0
 8009c60:	20000f70 	.word	0x20000f70
 8009c64:	20000f6c 	.word	0x20000f6c
 8009c68:	20000fd4 	.word	0x20000fd4

08009c6c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b08a      	sub	sp, #40	; 0x28
 8009c70:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009c72:	2300      	movs	r3, #0
 8009c74:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009c76:	f000 fae9 	bl	800a24c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009c7a:	4b1c      	ldr	r3, [pc, #112]	; (8009cec <xTimerCreateTimerTask+0x80>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d021      	beq.n	8009cc6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009c82:	2300      	movs	r3, #0
 8009c84:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009c86:	2300      	movs	r3, #0
 8009c88:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009c8a:	1d3a      	adds	r2, r7, #4
 8009c8c:	f107 0108 	add.w	r1, r7, #8
 8009c90:	f107 030c 	add.w	r3, r7, #12
 8009c94:	4618      	mov	r0, r3
 8009c96:	f7f7 fa2d 	bl	80010f4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009c9a:	6879      	ldr	r1, [r7, #4]
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	68fa      	ldr	r2, [r7, #12]
 8009ca0:	9202      	str	r2, [sp, #8]
 8009ca2:	9301      	str	r3, [sp, #4]
 8009ca4:	2302      	movs	r3, #2
 8009ca6:	9300      	str	r3, [sp, #0]
 8009ca8:	2300      	movs	r3, #0
 8009caa:	460a      	mov	r2, r1
 8009cac:	4910      	ldr	r1, [pc, #64]	; (8009cf0 <xTimerCreateTimerTask+0x84>)
 8009cae:	4811      	ldr	r0, [pc, #68]	; (8009cf4 <xTimerCreateTimerTask+0x88>)
 8009cb0:	f7ff f8a0 	bl	8008df4 <xTaskCreateStatic>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	4a10      	ldr	r2, [pc, #64]	; (8009cf8 <xTimerCreateTimerTask+0x8c>)
 8009cb8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009cba:	4b0f      	ldr	r3, [pc, #60]	; (8009cf8 <xTimerCreateTimerTask+0x8c>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d001      	beq.n	8009cc6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009cc6:	697b      	ldr	r3, [r7, #20]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d10a      	bne.n	8009ce2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8009ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd0:	f383 8811 	msr	BASEPRI, r3
 8009cd4:	f3bf 8f6f 	isb	sy
 8009cd8:	f3bf 8f4f 	dsb	sy
 8009cdc:	613b      	str	r3, [r7, #16]
}
 8009cde:	bf00      	nop
 8009ce0:	e7fe      	b.n	8009ce0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009ce2:	697b      	ldr	r3, [r7, #20]
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3718      	adds	r7, #24
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}
 8009cec:	20001010 	.word	0x20001010
 8009cf0:	0800dbc0 	.word	0x0800dbc0
 8009cf4:	08009e31 	.word	0x08009e31
 8009cf8:	20001014 	.word	0x20001014

08009cfc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b08a      	sub	sp, #40	; 0x28
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	60f8      	str	r0, [r7, #12]
 8009d04:	60b9      	str	r1, [r7, #8]
 8009d06:	607a      	str	r2, [r7, #4]
 8009d08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d10a      	bne.n	8009d2a <xTimerGenericCommand+0x2e>
	__asm volatile
 8009d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d18:	f383 8811 	msr	BASEPRI, r3
 8009d1c:	f3bf 8f6f 	isb	sy
 8009d20:	f3bf 8f4f 	dsb	sy
 8009d24:	623b      	str	r3, [r7, #32]
}
 8009d26:	bf00      	nop
 8009d28:	e7fe      	b.n	8009d28 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009d2a:	4b1a      	ldr	r3, [pc, #104]	; (8009d94 <xTimerGenericCommand+0x98>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d02a      	beq.n	8009d88 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009d3e:	68bb      	ldr	r3, [r7, #8]
 8009d40:	2b05      	cmp	r3, #5
 8009d42:	dc18      	bgt.n	8009d76 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009d44:	f7ff fe88 	bl	8009a58 <xTaskGetSchedulerState>
 8009d48:	4603      	mov	r3, r0
 8009d4a:	2b02      	cmp	r3, #2
 8009d4c:	d109      	bne.n	8009d62 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009d4e:	4b11      	ldr	r3, [pc, #68]	; (8009d94 <xTimerGenericCommand+0x98>)
 8009d50:	6818      	ldr	r0, [r3, #0]
 8009d52:	f107 0114 	add.w	r1, r7, #20
 8009d56:	2300      	movs	r3, #0
 8009d58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d5a:	f7fe fc69 	bl	8008630 <xQueueGenericSend>
 8009d5e:	6278      	str	r0, [r7, #36]	; 0x24
 8009d60:	e012      	b.n	8009d88 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009d62:	4b0c      	ldr	r3, [pc, #48]	; (8009d94 <xTimerGenericCommand+0x98>)
 8009d64:	6818      	ldr	r0, [r3, #0]
 8009d66:	f107 0114 	add.w	r1, r7, #20
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	f7fe fc5f 	bl	8008630 <xQueueGenericSend>
 8009d72:	6278      	str	r0, [r7, #36]	; 0x24
 8009d74:	e008      	b.n	8009d88 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009d76:	4b07      	ldr	r3, [pc, #28]	; (8009d94 <xTimerGenericCommand+0x98>)
 8009d78:	6818      	ldr	r0, [r3, #0]
 8009d7a:	f107 0114 	add.w	r1, r7, #20
 8009d7e:	2300      	movs	r3, #0
 8009d80:	683a      	ldr	r2, [r7, #0]
 8009d82:	f7fe fd53 	bl	800882c <xQueueGenericSendFromISR>
 8009d86:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3728      	adds	r7, #40	; 0x28
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}
 8009d92:	bf00      	nop
 8009d94:	20001010 	.word	0x20001010

08009d98 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b088      	sub	sp, #32
 8009d9c:	af02      	add	r7, sp, #8
 8009d9e:	6078      	str	r0, [r7, #4]
 8009da0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009da2:	4b22      	ldr	r3, [pc, #136]	; (8009e2c <prvProcessExpiredTimer+0x94>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	68db      	ldr	r3, [r3, #12]
 8009da8:	68db      	ldr	r3, [r3, #12]
 8009daa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009dac:	697b      	ldr	r3, [r7, #20]
 8009dae:	3304      	adds	r3, #4
 8009db0:	4618      	mov	r0, r3
 8009db2:	f7fe fa87 	bl	80082c4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009db6:	697b      	ldr	r3, [r7, #20]
 8009db8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009dbc:	f003 0304 	and.w	r3, r3, #4
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d022      	beq.n	8009e0a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009dc4:	697b      	ldr	r3, [r7, #20]
 8009dc6:	699a      	ldr	r2, [r3, #24]
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	18d1      	adds	r1, r2, r3
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	683a      	ldr	r2, [r7, #0]
 8009dd0:	6978      	ldr	r0, [r7, #20]
 8009dd2:	f000 f8cf 	bl	8009f74 <prvInsertTimerInActiveList>
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d01f      	beq.n	8009e1c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009ddc:	2300      	movs	r3, #0
 8009dde:	9300      	str	r3, [sp, #0]
 8009de0:	2300      	movs	r3, #0
 8009de2:	687a      	ldr	r2, [r7, #4]
 8009de4:	2100      	movs	r1, #0
 8009de6:	6978      	ldr	r0, [r7, #20]
 8009de8:	f7ff ff88 	bl	8009cfc <xTimerGenericCommand>
 8009dec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d113      	bne.n	8009e1c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8009df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009df8:	f383 8811 	msr	BASEPRI, r3
 8009dfc:	f3bf 8f6f 	isb	sy
 8009e00:	f3bf 8f4f 	dsb	sy
 8009e04:	60fb      	str	r3, [r7, #12]
}
 8009e06:	bf00      	nop
 8009e08:	e7fe      	b.n	8009e08 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009e0a:	697b      	ldr	r3, [r7, #20]
 8009e0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009e10:	f023 0301 	bic.w	r3, r3, #1
 8009e14:	b2da      	uxtb	r2, r3
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009e1c:	697b      	ldr	r3, [r7, #20]
 8009e1e:	6a1b      	ldr	r3, [r3, #32]
 8009e20:	6978      	ldr	r0, [r7, #20]
 8009e22:	4798      	blx	r3
}
 8009e24:	bf00      	nop
 8009e26:	3718      	adds	r7, #24
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}
 8009e2c:	20001008 	.word	0x20001008

08009e30 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b084      	sub	sp, #16
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009e38:	f107 0308 	add.w	r3, r7, #8
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	f000 f857 	bl	8009ef0 <prvGetNextExpireTime>
 8009e42:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	4619      	mov	r1, r3
 8009e48:	68f8      	ldr	r0, [r7, #12]
 8009e4a:	f000 f803 	bl	8009e54 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009e4e:	f000 f8d3 	bl	8009ff8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009e52:	e7f1      	b.n	8009e38 <prvTimerTask+0x8>

08009e54 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b084      	sub	sp, #16
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009e5e:	f7ff fa17 	bl	8009290 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009e62:	f107 0308 	add.w	r3, r7, #8
 8009e66:	4618      	mov	r0, r3
 8009e68:	f000 f864 	bl	8009f34 <prvSampleTimeNow>
 8009e6c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d130      	bne.n	8009ed6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009e74:	683b      	ldr	r3, [r7, #0]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d10a      	bne.n	8009e90 <prvProcessTimerOrBlockTask+0x3c>
 8009e7a:	687a      	ldr	r2, [r7, #4]
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	429a      	cmp	r2, r3
 8009e80:	d806      	bhi.n	8009e90 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009e82:	f7ff fa13 	bl	80092ac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009e86:	68f9      	ldr	r1, [r7, #12]
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f7ff ff85 	bl	8009d98 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009e8e:	e024      	b.n	8009eda <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d008      	beq.n	8009ea8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009e96:	4b13      	ldr	r3, [pc, #76]	; (8009ee4 <prvProcessTimerOrBlockTask+0x90>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d101      	bne.n	8009ea4 <prvProcessTimerOrBlockTask+0x50>
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	e000      	b.n	8009ea6 <prvProcessTimerOrBlockTask+0x52>
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009ea8:	4b0f      	ldr	r3, [pc, #60]	; (8009ee8 <prvProcessTimerOrBlockTask+0x94>)
 8009eaa:	6818      	ldr	r0, [r3, #0]
 8009eac:	687a      	ldr	r2, [r7, #4]
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	1ad3      	subs	r3, r2, r3
 8009eb2:	683a      	ldr	r2, [r7, #0]
 8009eb4:	4619      	mov	r1, r3
 8009eb6:	f7fe ff69 	bl	8008d8c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009eba:	f7ff f9f7 	bl	80092ac <xTaskResumeAll>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d10a      	bne.n	8009eda <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009ec4:	4b09      	ldr	r3, [pc, #36]	; (8009eec <prvProcessTimerOrBlockTask+0x98>)
 8009ec6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009eca:	601a      	str	r2, [r3, #0]
 8009ecc:	f3bf 8f4f 	dsb	sy
 8009ed0:	f3bf 8f6f 	isb	sy
}
 8009ed4:	e001      	b.n	8009eda <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009ed6:	f7ff f9e9 	bl	80092ac <xTaskResumeAll>
}
 8009eda:	bf00      	nop
 8009edc:	3710      	adds	r7, #16
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}
 8009ee2:	bf00      	nop
 8009ee4:	2000100c 	.word	0x2000100c
 8009ee8:	20001010 	.word	0x20001010
 8009eec:	e000ed04 	.word	0xe000ed04

08009ef0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	b085      	sub	sp, #20
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009ef8:	4b0d      	ldr	r3, [pc, #52]	; (8009f30 <prvGetNextExpireTime+0x40>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d101      	bne.n	8009f06 <prvGetNextExpireTime+0x16>
 8009f02:	2201      	movs	r2, #1
 8009f04:	e000      	b.n	8009f08 <prvGetNextExpireTime+0x18>
 8009f06:	2200      	movs	r2, #0
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d105      	bne.n	8009f20 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009f14:	4b06      	ldr	r3, [pc, #24]	; (8009f30 <prvGetNextExpireTime+0x40>)
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	68db      	ldr	r3, [r3, #12]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	60fb      	str	r3, [r7, #12]
 8009f1e:	e001      	b.n	8009f24 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009f20:	2300      	movs	r3, #0
 8009f22:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009f24:	68fb      	ldr	r3, [r7, #12]
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3714      	adds	r7, #20
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bc80      	pop	{r7}
 8009f2e:	4770      	bx	lr
 8009f30:	20001008 	.word	0x20001008

08009f34 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b084      	sub	sp, #16
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009f3c:	f7ff fa52 	bl	80093e4 <xTaskGetTickCount>
 8009f40:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009f42:	4b0b      	ldr	r3, [pc, #44]	; (8009f70 <prvSampleTimeNow+0x3c>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	68fa      	ldr	r2, [r7, #12]
 8009f48:	429a      	cmp	r2, r3
 8009f4a:	d205      	bcs.n	8009f58 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009f4c:	f000 f91a 	bl	800a184 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2201      	movs	r2, #1
 8009f54:	601a      	str	r2, [r3, #0]
 8009f56:	e002      	b.n	8009f5e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009f5e:	4a04      	ldr	r2, [pc, #16]	; (8009f70 <prvSampleTimeNow+0x3c>)
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009f64:	68fb      	ldr	r3, [r7, #12]
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	3710      	adds	r7, #16
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}
 8009f6e:	bf00      	nop
 8009f70:	20001018 	.word	0x20001018

08009f74 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b086      	sub	sp, #24
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	60f8      	str	r0, [r7, #12]
 8009f7c:	60b9      	str	r1, [r7, #8]
 8009f7e:	607a      	str	r2, [r7, #4]
 8009f80:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009f82:	2300      	movs	r3, #0
 8009f84:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	68ba      	ldr	r2, [r7, #8]
 8009f8a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	68fa      	ldr	r2, [r7, #12]
 8009f90:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009f92:	68ba      	ldr	r2, [r7, #8]
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	429a      	cmp	r2, r3
 8009f98:	d812      	bhi.n	8009fc0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f9a:	687a      	ldr	r2, [r7, #4]
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	1ad2      	subs	r2, r2, r3
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	699b      	ldr	r3, [r3, #24]
 8009fa4:	429a      	cmp	r2, r3
 8009fa6:	d302      	bcc.n	8009fae <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009fa8:	2301      	movs	r3, #1
 8009faa:	617b      	str	r3, [r7, #20]
 8009fac:	e01b      	b.n	8009fe6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009fae:	4b10      	ldr	r3, [pc, #64]	; (8009ff0 <prvInsertTimerInActiveList+0x7c>)
 8009fb0:	681a      	ldr	r2, [r3, #0]
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	3304      	adds	r3, #4
 8009fb6:	4619      	mov	r1, r3
 8009fb8:	4610      	mov	r0, r2
 8009fba:	f7fe f94b 	bl	8008254 <vListInsert>
 8009fbe:	e012      	b.n	8009fe6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009fc0:	687a      	ldr	r2, [r7, #4]
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	429a      	cmp	r2, r3
 8009fc6:	d206      	bcs.n	8009fd6 <prvInsertTimerInActiveList+0x62>
 8009fc8:	68ba      	ldr	r2, [r7, #8]
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	429a      	cmp	r2, r3
 8009fce:	d302      	bcc.n	8009fd6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009fd0:	2301      	movs	r3, #1
 8009fd2:	617b      	str	r3, [r7, #20]
 8009fd4:	e007      	b.n	8009fe6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009fd6:	4b07      	ldr	r3, [pc, #28]	; (8009ff4 <prvInsertTimerInActiveList+0x80>)
 8009fd8:	681a      	ldr	r2, [r3, #0]
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	3304      	adds	r3, #4
 8009fde:	4619      	mov	r1, r3
 8009fe0:	4610      	mov	r0, r2
 8009fe2:	f7fe f937 	bl	8008254 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009fe6:	697b      	ldr	r3, [r7, #20]
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3718      	adds	r7, #24
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}
 8009ff0:	2000100c 	.word	0x2000100c
 8009ff4:	20001008 	.word	0x20001008

08009ff8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b08c      	sub	sp, #48	; 0x30
 8009ffc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009ffe:	e0ae      	b.n	800a15e <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	2b00      	cmp	r3, #0
 800a004:	f2c0 80aa 	blt.w	800a15c <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a008:	693b      	ldr	r3, [r7, #16]
 800a00a:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a00c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a00e:	695b      	ldr	r3, [r3, #20]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d004      	beq.n	800a01e <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a016:	3304      	adds	r3, #4
 800a018:	4618      	mov	r0, r3
 800a01a:	f7fe f953 	bl	80082c4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a01e:	1d3b      	adds	r3, r7, #4
 800a020:	4618      	mov	r0, r3
 800a022:	f7ff ff87 	bl	8009f34 <prvSampleTimeNow>
 800a026:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	2b09      	cmp	r3, #9
 800a02c:	f200 8097 	bhi.w	800a15e <prvProcessReceivedCommands+0x166>
 800a030:	a201      	add	r2, pc, #4	; (adr r2, 800a038 <prvProcessReceivedCommands+0x40>)
 800a032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a036:	bf00      	nop
 800a038:	0800a061 	.word	0x0800a061
 800a03c:	0800a061 	.word	0x0800a061
 800a040:	0800a061 	.word	0x0800a061
 800a044:	0800a0d5 	.word	0x0800a0d5
 800a048:	0800a0e9 	.word	0x0800a0e9
 800a04c:	0800a133 	.word	0x0800a133
 800a050:	0800a061 	.word	0x0800a061
 800a054:	0800a061 	.word	0x0800a061
 800a058:	0800a0d5 	.word	0x0800a0d5
 800a05c:	0800a0e9 	.word	0x0800a0e9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a062:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a066:	f043 0301 	orr.w	r3, r3, #1
 800a06a:	b2da      	uxtb	r2, r3
 800a06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a06e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a072:	68fa      	ldr	r2, [r7, #12]
 800a074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a076:	699b      	ldr	r3, [r3, #24]
 800a078:	18d1      	adds	r1, r2, r3
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	6a3a      	ldr	r2, [r7, #32]
 800a07e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a080:	f7ff ff78 	bl	8009f74 <prvInsertTimerInActiveList>
 800a084:	4603      	mov	r3, r0
 800a086:	2b00      	cmp	r3, #0
 800a088:	d069      	beq.n	800a15e <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a08a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a08c:	6a1b      	ldr	r3, [r3, #32]
 800a08e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a090:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a094:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a098:	f003 0304 	and.w	r3, r3, #4
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d05e      	beq.n	800a15e <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a0a0:	68fa      	ldr	r2, [r7, #12]
 800a0a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0a4:	699b      	ldr	r3, [r3, #24]
 800a0a6:	441a      	add	r2, r3
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	9300      	str	r3, [sp, #0]
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	2100      	movs	r1, #0
 800a0b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a0b2:	f7ff fe23 	bl	8009cfc <xTimerGenericCommand>
 800a0b6:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800a0b8:	69fb      	ldr	r3, [r7, #28]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d14f      	bne.n	800a15e <prvProcessReceivedCommands+0x166>
	__asm volatile
 800a0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c2:	f383 8811 	msr	BASEPRI, r3
 800a0c6:	f3bf 8f6f 	isb	sy
 800a0ca:	f3bf 8f4f 	dsb	sy
 800a0ce:	61bb      	str	r3, [r7, #24]
}
 800a0d0:	bf00      	nop
 800a0d2:	e7fe      	b.n	800a0d2 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0d6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a0da:	f023 0301 	bic.w	r3, r3, #1
 800a0de:	b2da      	uxtb	r2, r3
 800a0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800a0e6:	e03a      	b.n	800a15e <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a0ee:	f043 0301 	orr.w	r3, r3, #1
 800a0f2:	b2da      	uxtb	r2, r3
 800a0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a0fa:	68fa      	ldr	r2, [r7, #12]
 800a0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0fe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a102:	699b      	ldr	r3, [r3, #24]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d10a      	bne.n	800a11e <prvProcessReceivedCommands+0x126>
	__asm volatile
 800a108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a10c:	f383 8811 	msr	BASEPRI, r3
 800a110:	f3bf 8f6f 	isb	sy
 800a114:	f3bf 8f4f 	dsb	sy
 800a118:	617b      	str	r3, [r7, #20]
}
 800a11a:	bf00      	nop
 800a11c:	e7fe      	b.n	800a11c <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a120:	699a      	ldr	r2, [r3, #24]
 800a122:	6a3b      	ldr	r3, [r7, #32]
 800a124:	18d1      	adds	r1, r2, r3
 800a126:	6a3b      	ldr	r3, [r7, #32]
 800a128:	6a3a      	ldr	r2, [r7, #32]
 800a12a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a12c:	f7ff ff22 	bl	8009f74 <prvInsertTimerInActiveList>
					break;
 800a130:	e015      	b.n	800a15e <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a134:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a138:	f003 0302 	and.w	r3, r3, #2
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d103      	bne.n	800a148 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 800a140:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a142:	f000 fb77 	bl	800a834 <vPortFree>
 800a146:	e00a      	b.n	800a15e <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a14a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a14e:	f023 0301 	bic.w	r3, r3, #1
 800a152:	b2da      	uxtb	r2, r3
 800a154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a156:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a15a:	e000      	b.n	800a15e <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800a15c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a15e:	4b08      	ldr	r3, [pc, #32]	; (800a180 <prvProcessReceivedCommands+0x188>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f107 0108 	add.w	r1, r7, #8
 800a166:	2200      	movs	r2, #0
 800a168:	4618      	mov	r0, r3
 800a16a:	f7fe fbf7 	bl	800895c <xQueueReceive>
 800a16e:	4603      	mov	r3, r0
 800a170:	2b00      	cmp	r3, #0
 800a172:	f47f af45 	bne.w	800a000 <prvProcessReceivedCommands+0x8>
	}
}
 800a176:	bf00      	nop
 800a178:	bf00      	nop
 800a17a:	3728      	adds	r7, #40	; 0x28
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}
 800a180:	20001010 	.word	0x20001010

0800a184 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b088      	sub	sp, #32
 800a188:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a18a:	e048      	b.n	800a21e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a18c:	4b2d      	ldr	r3, [pc, #180]	; (800a244 <prvSwitchTimerLists+0xc0>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	68db      	ldr	r3, [r3, #12]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a196:	4b2b      	ldr	r3, [pc, #172]	; (800a244 <prvSwitchTimerLists+0xc0>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	68db      	ldr	r3, [r3, #12]
 800a19c:	68db      	ldr	r3, [r3, #12]
 800a19e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	3304      	adds	r3, #4
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	f7fe f88d 	bl	80082c4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	6a1b      	ldr	r3, [r3, #32]
 800a1ae:	68f8      	ldr	r0, [r7, #12]
 800a1b0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a1b8:	f003 0304 	and.w	r3, r3, #4
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d02e      	beq.n	800a21e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	699b      	ldr	r3, [r3, #24]
 800a1c4:	693a      	ldr	r2, [r7, #16]
 800a1c6:	4413      	add	r3, r2
 800a1c8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a1ca:	68ba      	ldr	r2, [r7, #8]
 800a1cc:	693b      	ldr	r3, [r7, #16]
 800a1ce:	429a      	cmp	r2, r3
 800a1d0:	d90e      	bls.n	800a1f0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	68ba      	ldr	r2, [r7, #8]
 800a1d6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	68fa      	ldr	r2, [r7, #12]
 800a1dc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a1de:	4b19      	ldr	r3, [pc, #100]	; (800a244 <prvSwitchTimerLists+0xc0>)
 800a1e0:	681a      	ldr	r2, [r3, #0]
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	3304      	adds	r3, #4
 800a1e6:	4619      	mov	r1, r3
 800a1e8:	4610      	mov	r0, r2
 800a1ea:	f7fe f833 	bl	8008254 <vListInsert>
 800a1ee:	e016      	b.n	800a21e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	9300      	str	r3, [sp, #0]
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	693a      	ldr	r2, [r7, #16]
 800a1f8:	2100      	movs	r1, #0
 800a1fa:	68f8      	ldr	r0, [r7, #12]
 800a1fc:	f7ff fd7e 	bl	8009cfc <xTimerGenericCommand>
 800a200:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d10a      	bne.n	800a21e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a20c:	f383 8811 	msr	BASEPRI, r3
 800a210:	f3bf 8f6f 	isb	sy
 800a214:	f3bf 8f4f 	dsb	sy
 800a218:	603b      	str	r3, [r7, #0]
}
 800a21a:	bf00      	nop
 800a21c:	e7fe      	b.n	800a21c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a21e:	4b09      	ldr	r3, [pc, #36]	; (800a244 <prvSwitchTimerLists+0xc0>)
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d1b1      	bne.n	800a18c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a228:	4b06      	ldr	r3, [pc, #24]	; (800a244 <prvSwitchTimerLists+0xc0>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a22e:	4b06      	ldr	r3, [pc, #24]	; (800a248 <prvSwitchTimerLists+0xc4>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	4a04      	ldr	r2, [pc, #16]	; (800a244 <prvSwitchTimerLists+0xc0>)
 800a234:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a236:	4a04      	ldr	r2, [pc, #16]	; (800a248 <prvSwitchTimerLists+0xc4>)
 800a238:	697b      	ldr	r3, [r7, #20]
 800a23a:	6013      	str	r3, [r2, #0]
}
 800a23c:	bf00      	nop
 800a23e:	3718      	adds	r7, #24
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}
 800a244:	20001008 	.word	0x20001008
 800a248:	2000100c 	.word	0x2000100c

0800a24c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b082      	sub	sp, #8
 800a250:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a252:	f000 f92b 	bl	800a4ac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a256:	4b15      	ldr	r3, [pc, #84]	; (800a2ac <prvCheckForValidListAndQueue+0x60>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d120      	bne.n	800a2a0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a25e:	4814      	ldr	r0, [pc, #80]	; (800a2b0 <prvCheckForValidListAndQueue+0x64>)
 800a260:	f7fd ffaa 	bl	80081b8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a264:	4813      	ldr	r0, [pc, #76]	; (800a2b4 <prvCheckForValidListAndQueue+0x68>)
 800a266:	f7fd ffa7 	bl	80081b8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a26a:	4b13      	ldr	r3, [pc, #76]	; (800a2b8 <prvCheckForValidListAndQueue+0x6c>)
 800a26c:	4a10      	ldr	r2, [pc, #64]	; (800a2b0 <prvCheckForValidListAndQueue+0x64>)
 800a26e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a270:	4b12      	ldr	r3, [pc, #72]	; (800a2bc <prvCheckForValidListAndQueue+0x70>)
 800a272:	4a10      	ldr	r2, [pc, #64]	; (800a2b4 <prvCheckForValidListAndQueue+0x68>)
 800a274:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a276:	2300      	movs	r3, #0
 800a278:	9300      	str	r3, [sp, #0]
 800a27a:	4b11      	ldr	r3, [pc, #68]	; (800a2c0 <prvCheckForValidListAndQueue+0x74>)
 800a27c:	4a11      	ldr	r2, [pc, #68]	; (800a2c4 <prvCheckForValidListAndQueue+0x78>)
 800a27e:	210c      	movs	r1, #12
 800a280:	200a      	movs	r0, #10
 800a282:	f7fe f8b1 	bl	80083e8 <xQueueGenericCreateStatic>
 800a286:	4603      	mov	r3, r0
 800a288:	4a08      	ldr	r2, [pc, #32]	; (800a2ac <prvCheckForValidListAndQueue+0x60>)
 800a28a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a28c:	4b07      	ldr	r3, [pc, #28]	; (800a2ac <prvCheckForValidListAndQueue+0x60>)
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d005      	beq.n	800a2a0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a294:	4b05      	ldr	r3, [pc, #20]	; (800a2ac <prvCheckForValidListAndQueue+0x60>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	490b      	ldr	r1, [pc, #44]	; (800a2c8 <prvCheckForValidListAndQueue+0x7c>)
 800a29a:	4618      	mov	r0, r3
 800a29c:	f7fe fd4e 	bl	8008d3c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a2a0:	f000 f934 	bl	800a50c <vPortExitCritical>
}
 800a2a4:	bf00      	nop
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}
 800a2aa:	bf00      	nop
 800a2ac:	20001010 	.word	0x20001010
 800a2b0:	20000fe0 	.word	0x20000fe0
 800a2b4:	20000ff4 	.word	0x20000ff4
 800a2b8:	20001008 	.word	0x20001008
 800a2bc:	2000100c 	.word	0x2000100c
 800a2c0:	20001094 	.word	0x20001094
 800a2c4:	2000101c 	.word	0x2000101c
 800a2c8:	0800dbc8 	.word	0x0800dbc8

0800a2cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b085      	sub	sp, #20
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	60f8      	str	r0, [r7, #12]
 800a2d4:	60b9      	str	r1, [r7, #8]
 800a2d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	3b04      	subs	r3, #4
 800a2dc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a2e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	3b04      	subs	r3, #4
 800a2ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	f023 0201 	bic.w	r2, r3, #1
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	3b04      	subs	r3, #4
 800a2fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a2fc:	4a08      	ldr	r2, [pc, #32]	; (800a320 <pxPortInitialiseStack+0x54>)
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	3b14      	subs	r3, #20
 800a306:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a308:	687a      	ldr	r2, [r7, #4]
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	3b20      	subs	r3, #32
 800a312:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a314:	68fb      	ldr	r3, [r7, #12]
}
 800a316:	4618      	mov	r0, r3
 800a318:	3714      	adds	r7, #20
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bc80      	pop	{r7}
 800a31e:	4770      	bx	lr
 800a320:	0800a325 	.word	0x0800a325

0800a324 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a324:	b480      	push	{r7}
 800a326:	b085      	sub	sp, #20
 800a328:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800a32a:	2300      	movs	r3, #0
 800a32c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a32e:	4b12      	ldr	r3, [pc, #72]	; (800a378 <prvTaskExitError+0x54>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a336:	d00a      	beq.n	800a34e <prvTaskExitError+0x2a>
	__asm volatile
 800a338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a33c:	f383 8811 	msr	BASEPRI, r3
 800a340:	f3bf 8f6f 	isb	sy
 800a344:	f3bf 8f4f 	dsb	sy
 800a348:	60fb      	str	r3, [r7, #12]
}
 800a34a:	bf00      	nop
 800a34c:	e7fe      	b.n	800a34c <prvTaskExitError+0x28>
	__asm volatile
 800a34e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a352:	f383 8811 	msr	BASEPRI, r3
 800a356:	f3bf 8f6f 	isb	sy
 800a35a:	f3bf 8f4f 	dsb	sy
 800a35e:	60bb      	str	r3, [r7, #8]
}
 800a360:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a362:	bf00      	nop
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d0fc      	beq.n	800a364 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a36a:	bf00      	nop
 800a36c:	bf00      	nop
 800a36e:	3714      	adds	r7, #20
 800a370:	46bd      	mov	sp, r7
 800a372:	bc80      	pop	{r7}
 800a374:	4770      	bx	lr
 800a376:	bf00      	nop
 800a378:	2000000c 	.word	0x2000000c
 800a37c:	00000000 	.word	0x00000000

0800a380 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a380:	4b07      	ldr	r3, [pc, #28]	; (800a3a0 <pxCurrentTCBConst2>)
 800a382:	6819      	ldr	r1, [r3, #0]
 800a384:	6808      	ldr	r0, [r1, #0]
 800a386:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a38a:	f380 8809 	msr	PSP, r0
 800a38e:	f3bf 8f6f 	isb	sy
 800a392:	f04f 0000 	mov.w	r0, #0
 800a396:	f380 8811 	msr	BASEPRI, r0
 800a39a:	f04e 0e0d 	orr.w	lr, lr, #13
 800a39e:	4770      	bx	lr

0800a3a0 <pxCurrentTCBConst2>:
 800a3a0:	20000eb4 	.word	0x20000eb4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a3a4:	bf00      	nop
 800a3a6:	bf00      	nop

0800a3a8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800a3a8:	4806      	ldr	r0, [pc, #24]	; (800a3c4 <prvPortStartFirstTask+0x1c>)
 800a3aa:	6800      	ldr	r0, [r0, #0]
 800a3ac:	6800      	ldr	r0, [r0, #0]
 800a3ae:	f380 8808 	msr	MSP, r0
 800a3b2:	b662      	cpsie	i
 800a3b4:	b661      	cpsie	f
 800a3b6:	f3bf 8f4f 	dsb	sy
 800a3ba:	f3bf 8f6f 	isb	sy
 800a3be:	df00      	svc	0
 800a3c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a3c2:	bf00      	nop
 800a3c4:	e000ed08 	.word	0xe000ed08

0800a3c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b084      	sub	sp, #16
 800a3cc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a3ce:	4b32      	ldr	r3, [pc, #200]	; (800a498 <xPortStartScheduler+0xd0>)
 800a3d0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	781b      	ldrb	r3, [r3, #0]
 800a3d6:	b2db      	uxtb	r3, r3
 800a3d8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	22ff      	movs	r2, #255	; 0xff
 800a3de:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	781b      	ldrb	r3, [r3, #0]
 800a3e4:	b2db      	uxtb	r3, r3
 800a3e6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a3e8:	78fb      	ldrb	r3, [r7, #3]
 800a3ea:	b2db      	uxtb	r3, r3
 800a3ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a3f0:	b2da      	uxtb	r2, r3
 800a3f2:	4b2a      	ldr	r3, [pc, #168]	; (800a49c <xPortStartScheduler+0xd4>)
 800a3f4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a3f6:	4b2a      	ldr	r3, [pc, #168]	; (800a4a0 <xPortStartScheduler+0xd8>)
 800a3f8:	2207      	movs	r2, #7
 800a3fa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a3fc:	e009      	b.n	800a412 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a3fe:	4b28      	ldr	r3, [pc, #160]	; (800a4a0 <xPortStartScheduler+0xd8>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	3b01      	subs	r3, #1
 800a404:	4a26      	ldr	r2, [pc, #152]	; (800a4a0 <xPortStartScheduler+0xd8>)
 800a406:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a408:	78fb      	ldrb	r3, [r7, #3]
 800a40a:	b2db      	uxtb	r3, r3
 800a40c:	005b      	lsls	r3, r3, #1
 800a40e:	b2db      	uxtb	r3, r3
 800a410:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a412:	78fb      	ldrb	r3, [r7, #3]
 800a414:	b2db      	uxtb	r3, r3
 800a416:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a41a:	2b80      	cmp	r3, #128	; 0x80
 800a41c:	d0ef      	beq.n	800a3fe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a41e:	4b20      	ldr	r3, [pc, #128]	; (800a4a0 <xPortStartScheduler+0xd8>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	f1c3 0307 	rsb	r3, r3, #7
 800a426:	2b04      	cmp	r3, #4
 800a428:	d00a      	beq.n	800a440 <xPortStartScheduler+0x78>
	__asm volatile
 800a42a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a42e:	f383 8811 	msr	BASEPRI, r3
 800a432:	f3bf 8f6f 	isb	sy
 800a436:	f3bf 8f4f 	dsb	sy
 800a43a:	60bb      	str	r3, [r7, #8]
}
 800a43c:	bf00      	nop
 800a43e:	e7fe      	b.n	800a43e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a440:	4b17      	ldr	r3, [pc, #92]	; (800a4a0 <xPortStartScheduler+0xd8>)
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	021b      	lsls	r3, r3, #8
 800a446:	4a16      	ldr	r2, [pc, #88]	; (800a4a0 <xPortStartScheduler+0xd8>)
 800a448:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a44a:	4b15      	ldr	r3, [pc, #84]	; (800a4a0 <xPortStartScheduler+0xd8>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a452:	4a13      	ldr	r2, [pc, #76]	; (800a4a0 <xPortStartScheduler+0xd8>)
 800a454:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	b2da      	uxtb	r2, r3
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a45e:	4b11      	ldr	r3, [pc, #68]	; (800a4a4 <xPortStartScheduler+0xdc>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	4a10      	ldr	r2, [pc, #64]	; (800a4a4 <xPortStartScheduler+0xdc>)
 800a464:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a468:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a46a:	4b0e      	ldr	r3, [pc, #56]	; (800a4a4 <xPortStartScheduler+0xdc>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	4a0d      	ldr	r2, [pc, #52]	; (800a4a4 <xPortStartScheduler+0xdc>)
 800a470:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a474:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a476:	f000 f8b9 	bl	800a5ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a47a:	4b0b      	ldr	r3, [pc, #44]	; (800a4a8 <xPortStartScheduler+0xe0>)
 800a47c:	2200      	movs	r2, #0
 800a47e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a480:	f7ff ff92 	bl	800a3a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a484:	f7ff f874 	bl	8009570 <vTaskSwitchContext>
	prvTaskExitError();
 800a488:	f7ff ff4c 	bl	800a324 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a48c:	2300      	movs	r3, #0
}
 800a48e:	4618      	mov	r0, r3
 800a490:	3710      	adds	r7, #16
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}
 800a496:	bf00      	nop
 800a498:	e000e400 	.word	0xe000e400
 800a49c:	200010dc 	.word	0x200010dc
 800a4a0:	200010e0 	.word	0x200010e0
 800a4a4:	e000ed20 	.word	0xe000ed20
 800a4a8:	2000000c 	.word	0x2000000c

0800a4ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a4ac:	b480      	push	{r7}
 800a4ae:	b083      	sub	sp, #12
 800a4b0:	af00      	add	r7, sp, #0
	__asm volatile
 800a4b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4b6:	f383 8811 	msr	BASEPRI, r3
 800a4ba:	f3bf 8f6f 	isb	sy
 800a4be:	f3bf 8f4f 	dsb	sy
 800a4c2:	607b      	str	r3, [r7, #4]
}
 800a4c4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a4c6:	4b0f      	ldr	r3, [pc, #60]	; (800a504 <vPortEnterCritical+0x58>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	3301      	adds	r3, #1
 800a4cc:	4a0d      	ldr	r2, [pc, #52]	; (800a504 <vPortEnterCritical+0x58>)
 800a4ce:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a4d0:	4b0c      	ldr	r3, [pc, #48]	; (800a504 <vPortEnterCritical+0x58>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	2b01      	cmp	r3, #1
 800a4d6:	d10f      	bne.n	800a4f8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a4d8:	4b0b      	ldr	r3, [pc, #44]	; (800a508 <vPortEnterCritical+0x5c>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	b2db      	uxtb	r3, r3
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d00a      	beq.n	800a4f8 <vPortEnterCritical+0x4c>
	__asm volatile
 800a4e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4e6:	f383 8811 	msr	BASEPRI, r3
 800a4ea:	f3bf 8f6f 	isb	sy
 800a4ee:	f3bf 8f4f 	dsb	sy
 800a4f2:	603b      	str	r3, [r7, #0]
}
 800a4f4:	bf00      	nop
 800a4f6:	e7fe      	b.n	800a4f6 <vPortEnterCritical+0x4a>
	}
}
 800a4f8:	bf00      	nop
 800a4fa:	370c      	adds	r7, #12
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bc80      	pop	{r7}
 800a500:	4770      	bx	lr
 800a502:	bf00      	nop
 800a504:	2000000c 	.word	0x2000000c
 800a508:	e000ed04 	.word	0xe000ed04

0800a50c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a50c:	b480      	push	{r7}
 800a50e:	b083      	sub	sp, #12
 800a510:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a512:	4b11      	ldr	r3, [pc, #68]	; (800a558 <vPortExitCritical+0x4c>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d10a      	bne.n	800a530 <vPortExitCritical+0x24>
	__asm volatile
 800a51a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a51e:	f383 8811 	msr	BASEPRI, r3
 800a522:	f3bf 8f6f 	isb	sy
 800a526:	f3bf 8f4f 	dsb	sy
 800a52a:	607b      	str	r3, [r7, #4]
}
 800a52c:	bf00      	nop
 800a52e:	e7fe      	b.n	800a52e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a530:	4b09      	ldr	r3, [pc, #36]	; (800a558 <vPortExitCritical+0x4c>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	3b01      	subs	r3, #1
 800a536:	4a08      	ldr	r2, [pc, #32]	; (800a558 <vPortExitCritical+0x4c>)
 800a538:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a53a:	4b07      	ldr	r3, [pc, #28]	; (800a558 <vPortExitCritical+0x4c>)
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d105      	bne.n	800a54e <vPortExitCritical+0x42>
 800a542:	2300      	movs	r3, #0
 800a544:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	f383 8811 	msr	BASEPRI, r3
}
 800a54c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a54e:	bf00      	nop
 800a550:	370c      	adds	r7, #12
 800a552:	46bd      	mov	sp, r7
 800a554:	bc80      	pop	{r7}
 800a556:	4770      	bx	lr
 800a558:	2000000c 	.word	0x2000000c
 800a55c:	00000000 	.word	0x00000000

0800a560 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a560:	f3ef 8009 	mrs	r0, PSP
 800a564:	f3bf 8f6f 	isb	sy
 800a568:	4b0d      	ldr	r3, [pc, #52]	; (800a5a0 <pxCurrentTCBConst>)
 800a56a:	681a      	ldr	r2, [r3, #0]
 800a56c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a570:	6010      	str	r0, [r2, #0]
 800a572:	e92d 4008 	stmdb	sp!, {r3, lr}
 800a576:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a57a:	f380 8811 	msr	BASEPRI, r0
 800a57e:	f7fe fff7 	bl	8009570 <vTaskSwitchContext>
 800a582:	f04f 0000 	mov.w	r0, #0
 800a586:	f380 8811 	msr	BASEPRI, r0
 800a58a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a58e:	6819      	ldr	r1, [r3, #0]
 800a590:	6808      	ldr	r0, [r1, #0]
 800a592:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a596:	f380 8809 	msr	PSP, r0
 800a59a:	f3bf 8f6f 	isb	sy
 800a59e:	4770      	bx	lr

0800a5a0 <pxCurrentTCBConst>:
 800a5a0:	20000eb4 	.word	0x20000eb4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a5a4:	bf00      	nop
 800a5a6:	bf00      	nop

0800a5a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b082      	sub	sp, #8
 800a5ac:	af00      	add	r7, sp, #0
	__asm volatile
 800a5ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5b2:	f383 8811 	msr	BASEPRI, r3
 800a5b6:	f3bf 8f6f 	isb	sy
 800a5ba:	f3bf 8f4f 	dsb	sy
 800a5be:	607b      	str	r3, [r7, #4]
}
 800a5c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a5c2:	f7fe ff1d 	bl	8009400 <xTaskIncrementTick>
 800a5c6:	4603      	mov	r3, r0
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d003      	beq.n	800a5d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a5cc:	4b06      	ldr	r3, [pc, #24]	; (800a5e8 <SysTick_Handler+0x40>)
 800a5ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5d2:	601a      	str	r2, [r3, #0]
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	f383 8811 	msr	BASEPRI, r3
}
 800a5de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a5e0:	bf00      	nop
 800a5e2:	3708      	adds	r7, #8
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	bd80      	pop	{r7, pc}
 800a5e8:	e000ed04 	.word	0xe000ed04

0800a5ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a5f0:	4b0a      	ldr	r3, [pc, #40]	; (800a61c <vPortSetupTimerInterrupt+0x30>)
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a5f6:	4b0a      	ldr	r3, [pc, #40]	; (800a620 <vPortSetupTimerInterrupt+0x34>)
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a5fc:	4b09      	ldr	r3, [pc, #36]	; (800a624 <vPortSetupTimerInterrupt+0x38>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	4a09      	ldr	r2, [pc, #36]	; (800a628 <vPortSetupTimerInterrupt+0x3c>)
 800a602:	fba2 2303 	umull	r2, r3, r2, r3
 800a606:	099b      	lsrs	r3, r3, #6
 800a608:	4a08      	ldr	r2, [pc, #32]	; (800a62c <vPortSetupTimerInterrupt+0x40>)
 800a60a:	3b01      	subs	r3, #1
 800a60c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a60e:	4b03      	ldr	r3, [pc, #12]	; (800a61c <vPortSetupTimerInterrupt+0x30>)
 800a610:	2207      	movs	r2, #7
 800a612:	601a      	str	r2, [r3, #0]
}
 800a614:	bf00      	nop
 800a616:	46bd      	mov	sp, r7
 800a618:	bc80      	pop	{r7}
 800a61a:	4770      	bx	lr
 800a61c:	e000e010 	.word	0xe000e010
 800a620:	e000e018 	.word	0xe000e018
 800a624:	20000000 	.word	0x20000000
 800a628:	10624dd3 	.word	0x10624dd3
 800a62c:	e000e014 	.word	0xe000e014

0800a630 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a630:	b480      	push	{r7}
 800a632:	b085      	sub	sp, #20
 800a634:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a636:	f3ef 8305 	mrs	r3, IPSR
 800a63a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	2b0f      	cmp	r3, #15
 800a640:	d914      	bls.n	800a66c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a642:	4a16      	ldr	r2, [pc, #88]	; (800a69c <vPortValidateInterruptPriority+0x6c>)
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	4413      	add	r3, r2
 800a648:	781b      	ldrb	r3, [r3, #0]
 800a64a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a64c:	4b14      	ldr	r3, [pc, #80]	; (800a6a0 <vPortValidateInterruptPriority+0x70>)
 800a64e:	781b      	ldrb	r3, [r3, #0]
 800a650:	7afa      	ldrb	r2, [r7, #11]
 800a652:	429a      	cmp	r2, r3
 800a654:	d20a      	bcs.n	800a66c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a65a:	f383 8811 	msr	BASEPRI, r3
 800a65e:	f3bf 8f6f 	isb	sy
 800a662:	f3bf 8f4f 	dsb	sy
 800a666:	607b      	str	r3, [r7, #4]
}
 800a668:	bf00      	nop
 800a66a:	e7fe      	b.n	800a66a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a66c:	4b0d      	ldr	r3, [pc, #52]	; (800a6a4 <vPortValidateInterruptPriority+0x74>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a674:	4b0c      	ldr	r3, [pc, #48]	; (800a6a8 <vPortValidateInterruptPriority+0x78>)
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	429a      	cmp	r2, r3
 800a67a:	d90a      	bls.n	800a692 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a67c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a680:	f383 8811 	msr	BASEPRI, r3
 800a684:	f3bf 8f6f 	isb	sy
 800a688:	f3bf 8f4f 	dsb	sy
 800a68c:	603b      	str	r3, [r7, #0]
}
 800a68e:	bf00      	nop
 800a690:	e7fe      	b.n	800a690 <vPortValidateInterruptPriority+0x60>
	}
 800a692:	bf00      	nop
 800a694:	3714      	adds	r7, #20
 800a696:	46bd      	mov	sp, r7
 800a698:	bc80      	pop	{r7}
 800a69a:	4770      	bx	lr
 800a69c:	e000e3f0 	.word	0xe000e3f0
 800a6a0:	200010dc 	.word	0x200010dc
 800a6a4:	e000ed0c 	.word	0xe000ed0c
 800a6a8:	200010e0 	.word	0x200010e0

0800a6ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a6ac:	b580      	push	{r7, lr}
 800a6ae:	b08a      	sub	sp, #40	; 0x28
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a6b4:	2300      	movs	r3, #0
 800a6b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a6b8:	f7fe fdea 	bl	8009290 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a6bc:	4b58      	ldr	r3, [pc, #352]	; (800a820 <pvPortMalloc+0x174>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d101      	bne.n	800a6c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a6c4:	f000 f910 	bl	800a8e8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a6c8:	4b56      	ldr	r3, [pc, #344]	; (800a824 <pvPortMalloc+0x178>)
 800a6ca:	681a      	ldr	r2, [r3, #0]
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	4013      	ands	r3, r2
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	f040 808e 	bne.w	800a7f2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d01d      	beq.n	800a718 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a6dc:	2208      	movs	r2, #8
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	4413      	add	r3, r2
 800a6e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	f003 0307 	and.w	r3, r3, #7
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d014      	beq.n	800a718 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	f023 0307 	bic.w	r3, r3, #7
 800a6f4:	3308      	adds	r3, #8
 800a6f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f003 0307 	and.w	r3, r3, #7
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d00a      	beq.n	800a718 <pvPortMalloc+0x6c>
	__asm volatile
 800a702:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a706:	f383 8811 	msr	BASEPRI, r3
 800a70a:	f3bf 8f6f 	isb	sy
 800a70e:	f3bf 8f4f 	dsb	sy
 800a712:	617b      	str	r3, [r7, #20]
}
 800a714:	bf00      	nop
 800a716:	e7fe      	b.n	800a716 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d069      	beq.n	800a7f2 <pvPortMalloc+0x146>
 800a71e:	4b42      	ldr	r3, [pc, #264]	; (800a828 <pvPortMalloc+0x17c>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	687a      	ldr	r2, [r7, #4]
 800a724:	429a      	cmp	r2, r3
 800a726:	d864      	bhi.n	800a7f2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a728:	4b40      	ldr	r3, [pc, #256]	; (800a82c <pvPortMalloc+0x180>)
 800a72a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a72c:	4b3f      	ldr	r3, [pc, #252]	; (800a82c <pvPortMalloc+0x180>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a732:	e004      	b.n	800a73e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a736:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a73e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a740:	685b      	ldr	r3, [r3, #4]
 800a742:	687a      	ldr	r2, [r7, #4]
 800a744:	429a      	cmp	r2, r3
 800a746:	d903      	bls.n	800a750 <pvPortMalloc+0xa4>
 800a748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d1f1      	bne.n	800a734 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a750:	4b33      	ldr	r3, [pc, #204]	; (800a820 <pvPortMalloc+0x174>)
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a756:	429a      	cmp	r2, r3
 800a758:	d04b      	beq.n	800a7f2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a75a:	6a3b      	ldr	r3, [r7, #32]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	2208      	movs	r2, #8
 800a760:	4413      	add	r3, r2
 800a762:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a766:	681a      	ldr	r2, [r3, #0]
 800a768:	6a3b      	ldr	r3, [r7, #32]
 800a76a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a76c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a76e:	685a      	ldr	r2, [r3, #4]
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	1ad2      	subs	r2, r2, r3
 800a774:	2308      	movs	r3, #8
 800a776:	005b      	lsls	r3, r3, #1
 800a778:	429a      	cmp	r2, r3
 800a77a:	d91f      	bls.n	800a7bc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a77c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	4413      	add	r3, r2
 800a782:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a784:	69bb      	ldr	r3, [r7, #24]
 800a786:	f003 0307 	and.w	r3, r3, #7
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d00a      	beq.n	800a7a4 <pvPortMalloc+0xf8>
	__asm volatile
 800a78e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a792:	f383 8811 	msr	BASEPRI, r3
 800a796:	f3bf 8f6f 	isb	sy
 800a79a:	f3bf 8f4f 	dsb	sy
 800a79e:	613b      	str	r3, [r7, #16]
}
 800a7a0:	bf00      	nop
 800a7a2:	e7fe      	b.n	800a7a2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a7a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7a6:	685a      	ldr	r2, [r3, #4]
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	1ad2      	subs	r2, r2, r3
 800a7ac:	69bb      	ldr	r3, [r7, #24]
 800a7ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7b2:	687a      	ldr	r2, [r7, #4]
 800a7b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a7b6:	69b8      	ldr	r0, [r7, #24]
 800a7b8:	f000 f8f8 	bl	800a9ac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a7bc:	4b1a      	ldr	r3, [pc, #104]	; (800a828 <pvPortMalloc+0x17c>)
 800a7be:	681a      	ldr	r2, [r3, #0]
 800a7c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7c2:	685b      	ldr	r3, [r3, #4]
 800a7c4:	1ad3      	subs	r3, r2, r3
 800a7c6:	4a18      	ldr	r2, [pc, #96]	; (800a828 <pvPortMalloc+0x17c>)
 800a7c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a7ca:	4b17      	ldr	r3, [pc, #92]	; (800a828 <pvPortMalloc+0x17c>)
 800a7cc:	681a      	ldr	r2, [r3, #0]
 800a7ce:	4b18      	ldr	r3, [pc, #96]	; (800a830 <pvPortMalloc+0x184>)
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	429a      	cmp	r2, r3
 800a7d4:	d203      	bcs.n	800a7de <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a7d6:	4b14      	ldr	r3, [pc, #80]	; (800a828 <pvPortMalloc+0x17c>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	4a15      	ldr	r2, [pc, #84]	; (800a830 <pvPortMalloc+0x184>)
 800a7dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a7de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e0:	685a      	ldr	r2, [r3, #4]
 800a7e2:	4b10      	ldr	r3, [pc, #64]	; (800a824 <pvPortMalloc+0x178>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	431a      	orrs	r2, r3
 800a7e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a7ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a7f2:	f7fe fd5b 	bl	80092ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a7f6:	69fb      	ldr	r3, [r7, #28]
 800a7f8:	f003 0307 	and.w	r3, r3, #7
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d00a      	beq.n	800a816 <pvPortMalloc+0x16a>
	__asm volatile
 800a800:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a804:	f383 8811 	msr	BASEPRI, r3
 800a808:	f3bf 8f6f 	isb	sy
 800a80c:	f3bf 8f4f 	dsb	sy
 800a810:	60fb      	str	r3, [r7, #12]
}
 800a812:	bf00      	nop
 800a814:	e7fe      	b.n	800a814 <pvPortMalloc+0x168>
	return pvReturn;
 800a816:	69fb      	ldr	r3, [r7, #28]
}
 800a818:	4618      	mov	r0, r3
 800a81a:	3728      	adds	r7, #40	; 0x28
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bd80      	pop	{r7, pc}
 800a820:	20001cec 	.word	0x20001cec
 800a824:	20001cf8 	.word	0x20001cf8
 800a828:	20001cf0 	.word	0x20001cf0
 800a82c:	20001ce4 	.word	0x20001ce4
 800a830:	20001cf4 	.word	0x20001cf4

0800a834 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b086      	sub	sp, #24
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d048      	beq.n	800a8d8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a846:	2308      	movs	r3, #8
 800a848:	425b      	negs	r3, r3
 800a84a:	697a      	ldr	r2, [r7, #20]
 800a84c:	4413      	add	r3, r2
 800a84e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a850:	697b      	ldr	r3, [r7, #20]
 800a852:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a854:	693b      	ldr	r3, [r7, #16]
 800a856:	685a      	ldr	r2, [r3, #4]
 800a858:	4b21      	ldr	r3, [pc, #132]	; (800a8e0 <vPortFree+0xac>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	4013      	ands	r3, r2
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d10a      	bne.n	800a878 <vPortFree+0x44>
	__asm volatile
 800a862:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a866:	f383 8811 	msr	BASEPRI, r3
 800a86a:	f3bf 8f6f 	isb	sy
 800a86e:	f3bf 8f4f 	dsb	sy
 800a872:	60fb      	str	r3, [r7, #12]
}
 800a874:	bf00      	nop
 800a876:	e7fe      	b.n	800a876 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a878:	693b      	ldr	r3, [r7, #16]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d00a      	beq.n	800a896 <vPortFree+0x62>
	__asm volatile
 800a880:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a884:	f383 8811 	msr	BASEPRI, r3
 800a888:	f3bf 8f6f 	isb	sy
 800a88c:	f3bf 8f4f 	dsb	sy
 800a890:	60bb      	str	r3, [r7, #8]
}
 800a892:	bf00      	nop
 800a894:	e7fe      	b.n	800a894 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a896:	693b      	ldr	r3, [r7, #16]
 800a898:	685a      	ldr	r2, [r3, #4]
 800a89a:	4b11      	ldr	r3, [pc, #68]	; (800a8e0 <vPortFree+0xac>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	4013      	ands	r3, r2
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d019      	beq.n	800a8d8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a8a4:	693b      	ldr	r3, [r7, #16]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d115      	bne.n	800a8d8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a8ac:	693b      	ldr	r3, [r7, #16]
 800a8ae:	685a      	ldr	r2, [r3, #4]
 800a8b0:	4b0b      	ldr	r3, [pc, #44]	; (800a8e0 <vPortFree+0xac>)
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	43db      	mvns	r3, r3
 800a8b6:	401a      	ands	r2, r3
 800a8b8:	693b      	ldr	r3, [r7, #16]
 800a8ba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a8bc:	f7fe fce8 	bl	8009290 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a8c0:	693b      	ldr	r3, [r7, #16]
 800a8c2:	685a      	ldr	r2, [r3, #4]
 800a8c4:	4b07      	ldr	r3, [pc, #28]	; (800a8e4 <vPortFree+0xb0>)
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	4413      	add	r3, r2
 800a8ca:	4a06      	ldr	r2, [pc, #24]	; (800a8e4 <vPortFree+0xb0>)
 800a8cc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a8ce:	6938      	ldr	r0, [r7, #16]
 800a8d0:	f000 f86c 	bl	800a9ac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a8d4:	f7fe fcea 	bl	80092ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a8d8:	bf00      	nop
 800a8da:	3718      	adds	r7, #24
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bd80      	pop	{r7, pc}
 800a8e0:	20001cf8 	.word	0x20001cf8
 800a8e4:	20001cf0 	.word	0x20001cf0

0800a8e8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	b085      	sub	sp, #20
 800a8ec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a8ee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a8f2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a8f4:	4b27      	ldr	r3, [pc, #156]	; (800a994 <prvHeapInit+0xac>)
 800a8f6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	f003 0307 	and.w	r3, r3, #7
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d00c      	beq.n	800a91c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	3307      	adds	r3, #7
 800a906:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	f023 0307 	bic.w	r3, r3, #7
 800a90e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a910:	68ba      	ldr	r2, [r7, #8]
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	1ad3      	subs	r3, r2, r3
 800a916:	4a1f      	ldr	r2, [pc, #124]	; (800a994 <prvHeapInit+0xac>)
 800a918:	4413      	add	r3, r2
 800a91a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a920:	4a1d      	ldr	r2, [pc, #116]	; (800a998 <prvHeapInit+0xb0>)
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a926:	4b1c      	ldr	r3, [pc, #112]	; (800a998 <prvHeapInit+0xb0>)
 800a928:	2200      	movs	r2, #0
 800a92a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	68ba      	ldr	r2, [r7, #8]
 800a930:	4413      	add	r3, r2
 800a932:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a934:	2208      	movs	r2, #8
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	1a9b      	subs	r3, r3, r2
 800a93a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	f023 0307 	bic.w	r3, r3, #7
 800a942:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	4a15      	ldr	r2, [pc, #84]	; (800a99c <prvHeapInit+0xb4>)
 800a948:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a94a:	4b14      	ldr	r3, [pc, #80]	; (800a99c <prvHeapInit+0xb4>)
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	2200      	movs	r2, #0
 800a950:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a952:	4b12      	ldr	r3, [pc, #72]	; (800a99c <prvHeapInit+0xb4>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	2200      	movs	r2, #0
 800a958:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	68fa      	ldr	r2, [r7, #12]
 800a962:	1ad2      	subs	r2, r2, r3
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a968:	4b0c      	ldr	r3, [pc, #48]	; (800a99c <prvHeapInit+0xb4>)
 800a96a:	681a      	ldr	r2, [r3, #0]
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	685b      	ldr	r3, [r3, #4]
 800a974:	4a0a      	ldr	r2, [pc, #40]	; (800a9a0 <prvHeapInit+0xb8>)
 800a976:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	685b      	ldr	r3, [r3, #4]
 800a97c:	4a09      	ldr	r2, [pc, #36]	; (800a9a4 <prvHeapInit+0xbc>)
 800a97e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a980:	4b09      	ldr	r3, [pc, #36]	; (800a9a8 <prvHeapInit+0xc0>)
 800a982:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a986:	601a      	str	r2, [r3, #0]
}
 800a988:	bf00      	nop
 800a98a:	3714      	adds	r7, #20
 800a98c:	46bd      	mov	sp, r7
 800a98e:	bc80      	pop	{r7}
 800a990:	4770      	bx	lr
 800a992:	bf00      	nop
 800a994:	200010e4 	.word	0x200010e4
 800a998:	20001ce4 	.word	0x20001ce4
 800a99c:	20001cec 	.word	0x20001cec
 800a9a0:	20001cf4 	.word	0x20001cf4
 800a9a4:	20001cf0 	.word	0x20001cf0
 800a9a8:	20001cf8 	.word	0x20001cf8

0800a9ac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b085      	sub	sp, #20
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a9b4:	4b27      	ldr	r3, [pc, #156]	; (800aa54 <prvInsertBlockIntoFreeList+0xa8>)
 800a9b6:	60fb      	str	r3, [r7, #12]
 800a9b8:	e002      	b.n	800a9c0 <prvInsertBlockIntoFreeList+0x14>
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	60fb      	str	r3, [r7, #12]
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	687a      	ldr	r2, [r7, #4]
 800a9c6:	429a      	cmp	r2, r3
 800a9c8:	d8f7      	bhi.n	800a9ba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	685b      	ldr	r3, [r3, #4]
 800a9d2:	68ba      	ldr	r2, [r7, #8]
 800a9d4:	4413      	add	r3, r2
 800a9d6:	687a      	ldr	r2, [r7, #4]
 800a9d8:	429a      	cmp	r2, r3
 800a9da:	d108      	bne.n	800a9ee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	685a      	ldr	r2, [r3, #4]
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	685b      	ldr	r3, [r3, #4]
 800a9e4:	441a      	add	r2, r3
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	685b      	ldr	r3, [r3, #4]
 800a9f6:	68ba      	ldr	r2, [r7, #8]
 800a9f8:	441a      	add	r2, r3
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	429a      	cmp	r2, r3
 800aa00:	d118      	bne.n	800aa34 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	681a      	ldr	r2, [r3, #0]
 800aa06:	4b14      	ldr	r3, [pc, #80]	; (800aa58 <prvInsertBlockIntoFreeList+0xac>)
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	429a      	cmp	r2, r3
 800aa0c:	d00d      	beq.n	800aa2a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	685a      	ldr	r2, [r3, #4]
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	685b      	ldr	r3, [r3, #4]
 800aa18:	441a      	add	r2, r3
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	681a      	ldr	r2, [r3, #0]
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	601a      	str	r2, [r3, #0]
 800aa28:	e008      	b.n	800aa3c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aa2a:	4b0b      	ldr	r3, [pc, #44]	; (800aa58 <prvInsertBlockIntoFreeList+0xac>)
 800aa2c:	681a      	ldr	r2, [r3, #0]
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	601a      	str	r2, [r3, #0]
 800aa32:	e003      	b.n	800aa3c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	681a      	ldr	r2, [r3, #0]
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800aa3c:	68fa      	ldr	r2, [r7, #12]
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	429a      	cmp	r2, r3
 800aa42:	d002      	beq.n	800aa4a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	687a      	ldr	r2, [r7, #4]
 800aa48:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aa4a:	bf00      	nop
 800aa4c:	3714      	adds	r7, #20
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bc80      	pop	{r7}
 800aa52:	4770      	bx	lr
 800aa54:	20001ce4 	.word	0x20001ce4
 800aa58:	20001cec 	.word	0x20001cec

0800aa5c <__errno>:
 800aa5c:	4b01      	ldr	r3, [pc, #4]	; (800aa64 <__errno+0x8>)
 800aa5e:	6818      	ldr	r0, [r3, #0]
 800aa60:	4770      	bx	lr
 800aa62:	bf00      	nop
 800aa64:	20000010 	.word	0x20000010

0800aa68 <std>:
 800aa68:	2300      	movs	r3, #0
 800aa6a:	b510      	push	{r4, lr}
 800aa6c:	4604      	mov	r4, r0
 800aa6e:	e9c0 3300 	strd	r3, r3, [r0]
 800aa72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aa76:	6083      	str	r3, [r0, #8]
 800aa78:	8181      	strh	r1, [r0, #12]
 800aa7a:	6643      	str	r3, [r0, #100]	; 0x64
 800aa7c:	81c2      	strh	r2, [r0, #14]
 800aa7e:	6183      	str	r3, [r0, #24]
 800aa80:	4619      	mov	r1, r3
 800aa82:	2208      	movs	r2, #8
 800aa84:	305c      	adds	r0, #92	; 0x5c
 800aa86:	f000 f91a 	bl	800acbe <memset>
 800aa8a:	4b05      	ldr	r3, [pc, #20]	; (800aaa0 <std+0x38>)
 800aa8c:	6263      	str	r3, [r4, #36]	; 0x24
 800aa8e:	4b05      	ldr	r3, [pc, #20]	; (800aaa4 <std+0x3c>)
 800aa90:	62a3      	str	r3, [r4, #40]	; 0x28
 800aa92:	4b05      	ldr	r3, [pc, #20]	; (800aaa8 <std+0x40>)
 800aa94:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aa96:	4b05      	ldr	r3, [pc, #20]	; (800aaac <std+0x44>)
 800aa98:	6224      	str	r4, [r4, #32]
 800aa9a:	6323      	str	r3, [r4, #48]	; 0x30
 800aa9c:	bd10      	pop	{r4, pc}
 800aa9e:	bf00      	nop
 800aaa0:	0800b84d 	.word	0x0800b84d
 800aaa4:	0800b86f 	.word	0x0800b86f
 800aaa8:	0800b8a7 	.word	0x0800b8a7
 800aaac:	0800b8cb 	.word	0x0800b8cb

0800aab0 <_cleanup_r>:
 800aab0:	4901      	ldr	r1, [pc, #4]	; (800aab8 <_cleanup_r+0x8>)
 800aab2:	f000 b8af 	b.w	800ac14 <_fwalk_reent>
 800aab6:	bf00      	nop
 800aab8:	0800c829 	.word	0x0800c829

0800aabc <__sfmoreglue>:
 800aabc:	b570      	push	{r4, r5, r6, lr}
 800aabe:	2268      	movs	r2, #104	; 0x68
 800aac0:	1e4d      	subs	r5, r1, #1
 800aac2:	4355      	muls	r5, r2
 800aac4:	460e      	mov	r6, r1
 800aac6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800aaca:	f000 f921 	bl	800ad10 <_malloc_r>
 800aace:	4604      	mov	r4, r0
 800aad0:	b140      	cbz	r0, 800aae4 <__sfmoreglue+0x28>
 800aad2:	2100      	movs	r1, #0
 800aad4:	e9c0 1600 	strd	r1, r6, [r0]
 800aad8:	300c      	adds	r0, #12
 800aada:	60a0      	str	r0, [r4, #8]
 800aadc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aae0:	f000 f8ed 	bl	800acbe <memset>
 800aae4:	4620      	mov	r0, r4
 800aae6:	bd70      	pop	{r4, r5, r6, pc}

0800aae8 <__sfp_lock_acquire>:
 800aae8:	4801      	ldr	r0, [pc, #4]	; (800aaf0 <__sfp_lock_acquire+0x8>)
 800aaea:	f000 b8d8 	b.w	800ac9e <__retarget_lock_acquire_recursive>
 800aaee:	bf00      	nop
 800aaf0:	20001cfd 	.word	0x20001cfd

0800aaf4 <__sfp_lock_release>:
 800aaf4:	4801      	ldr	r0, [pc, #4]	; (800aafc <__sfp_lock_release+0x8>)
 800aaf6:	f000 b8d3 	b.w	800aca0 <__retarget_lock_release_recursive>
 800aafa:	bf00      	nop
 800aafc:	20001cfd 	.word	0x20001cfd

0800ab00 <__sinit_lock_acquire>:
 800ab00:	4801      	ldr	r0, [pc, #4]	; (800ab08 <__sinit_lock_acquire+0x8>)
 800ab02:	f000 b8cc 	b.w	800ac9e <__retarget_lock_acquire_recursive>
 800ab06:	bf00      	nop
 800ab08:	20001cfe 	.word	0x20001cfe

0800ab0c <__sinit_lock_release>:
 800ab0c:	4801      	ldr	r0, [pc, #4]	; (800ab14 <__sinit_lock_release+0x8>)
 800ab0e:	f000 b8c7 	b.w	800aca0 <__retarget_lock_release_recursive>
 800ab12:	bf00      	nop
 800ab14:	20001cfe 	.word	0x20001cfe

0800ab18 <__sinit>:
 800ab18:	b510      	push	{r4, lr}
 800ab1a:	4604      	mov	r4, r0
 800ab1c:	f7ff fff0 	bl	800ab00 <__sinit_lock_acquire>
 800ab20:	69a3      	ldr	r3, [r4, #24]
 800ab22:	b11b      	cbz	r3, 800ab2c <__sinit+0x14>
 800ab24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab28:	f7ff bff0 	b.w	800ab0c <__sinit_lock_release>
 800ab2c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ab30:	6523      	str	r3, [r4, #80]	; 0x50
 800ab32:	4b13      	ldr	r3, [pc, #76]	; (800ab80 <__sinit+0x68>)
 800ab34:	4a13      	ldr	r2, [pc, #76]	; (800ab84 <__sinit+0x6c>)
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	62a2      	str	r2, [r4, #40]	; 0x28
 800ab3a:	42a3      	cmp	r3, r4
 800ab3c:	bf04      	itt	eq
 800ab3e:	2301      	moveq	r3, #1
 800ab40:	61a3      	streq	r3, [r4, #24]
 800ab42:	4620      	mov	r0, r4
 800ab44:	f000 f820 	bl	800ab88 <__sfp>
 800ab48:	6060      	str	r0, [r4, #4]
 800ab4a:	4620      	mov	r0, r4
 800ab4c:	f000 f81c 	bl	800ab88 <__sfp>
 800ab50:	60a0      	str	r0, [r4, #8]
 800ab52:	4620      	mov	r0, r4
 800ab54:	f000 f818 	bl	800ab88 <__sfp>
 800ab58:	2200      	movs	r2, #0
 800ab5a:	60e0      	str	r0, [r4, #12]
 800ab5c:	2104      	movs	r1, #4
 800ab5e:	6860      	ldr	r0, [r4, #4]
 800ab60:	f7ff ff82 	bl	800aa68 <std>
 800ab64:	68a0      	ldr	r0, [r4, #8]
 800ab66:	2201      	movs	r2, #1
 800ab68:	2109      	movs	r1, #9
 800ab6a:	f7ff ff7d 	bl	800aa68 <std>
 800ab6e:	68e0      	ldr	r0, [r4, #12]
 800ab70:	2202      	movs	r2, #2
 800ab72:	2112      	movs	r1, #18
 800ab74:	f7ff ff78 	bl	800aa68 <std>
 800ab78:	2301      	movs	r3, #1
 800ab7a:	61a3      	str	r3, [r4, #24]
 800ab7c:	e7d2      	b.n	800ab24 <__sinit+0xc>
 800ab7e:	bf00      	nop
 800ab80:	0800e338 	.word	0x0800e338
 800ab84:	0800aab1 	.word	0x0800aab1

0800ab88 <__sfp>:
 800ab88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab8a:	4607      	mov	r7, r0
 800ab8c:	f7ff ffac 	bl	800aae8 <__sfp_lock_acquire>
 800ab90:	4b1e      	ldr	r3, [pc, #120]	; (800ac0c <__sfp+0x84>)
 800ab92:	681e      	ldr	r6, [r3, #0]
 800ab94:	69b3      	ldr	r3, [r6, #24]
 800ab96:	b913      	cbnz	r3, 800ab9e <__sfp+0x16>
 800ab98:	4630      	mov	r0, r6
 800ab9a:	f7ff ffbd 	bl	800ab18 <__sinit>
 800ab9e:	3648      	adds	r6, #72	; 0x48
 800aba0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aba4:	3b01      	subs	r3, #1
 800aba6:	d503      	bpl.n	800abb0 <__sfp+0x28>
 800aba8:	6833      	ldr	r3, [r6, #0]
 800abaa:	b30b      	cbz	r3, 800abf0 <__sfp+0x68>
 800abac:	6836      	ldr	r6, [r6, #0]
 800abae:	e7f7      	b.n	800aba0 <__sfp+0x18>
 800abb0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800abb4:	b9d5      	cbnz	r5, 800abec <__sfp+0x64>
 800abb6:	4b16      	ldr	r3, [pc, #88]	; (800ac10 <__sfp+0x88>)
 800abb8:	60e3      	str	r3, [r4, #12]
 800abba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800abbe:	6665      	str	r5, [r4, #100]	; 0x64
 800abc0:	f000 f86c 	bl	800ac9c <__retarget_lock_init_recursive>
 800abc4:	f7ff ff96 	bl	800aaf4 <__sfp_lock_release>
 800abc8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800abcc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800abd0:	6025      	str	r5, [r4, #0]
 800abd2:	61a5      	str	r5, [r4, #24]
 800abd4:	2208      	movs	r2, #8
 800abd6:	4629      	mov	r1, r5
 800abd8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800abdc:	f000 f86f 	bl	800acbe <memset>
 800abe0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800abe4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800abe8:	4620      	mov	r0, r4
 800abea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abec:	3468      	adds	r4, #104	; 0x68
 800abee:	e7d9      	b.n	800aba4 <__sfp+0x1c>
 800abf0:	2104      	movs	r1, #4
 800abf2:	4638      	mov	r0, r7
 800abf4:	f7ff ff62 	bl	800aabc <__sfmoreglue>
 800abf8:	4604      	mov	r4, r0
 800abfa:	6030      	str	r0, [r6, #0]
 800abfc:	2800      	cmp	r0, #0
 800abfe:	d1d5      	bne.n	800abac <__sfp+0x24>
 800ac00:	f7ff ff78 	bl	800aaf4 <__sfp_lock_release>
 800ac04:	230c      	movs	r3, #12
 800ac06:	603b      	str	r3, [r7, #0]
 800ac08:	e7ee      	b.n	800abe8 <__sfp+0x60>
 800ac0a:	bf00      	nop
 800ac0c:	0800e338 	.word	0x0800e338
 800ac10:	ffff0001 	.word	0xffff0001

0800ac14 <_fwalk_reent>:
 800ac14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac18:	4606      	mov	r6, r0
 800ac1a:	4688      	mov	r8, r1
 800ac1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ac20:	2700      	movs	r7, #0
 800ac22:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ac26:	f1b9 0901 	subs.w	r9, r9, #1
 800ac2a:	d505      	bpl.n	800ac38 <_fwalk_reent+0x24>
 800ac2c:	6824      	ldr	r4, [r4, #0]
 800ac2e:	2c00      	cmp	r4, #0
 800ac30:	d1f7      	bne.n	800ac22 <_fwalk_reent+0xe>
 800ac32:	4638      	mov	r0, r7
 800ac34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac38:	89ab      	ldrh	r3, [r5, #12]
 800ac3a:	2b01      	cmp	r3, #1
 800ac3c:	d907      	bls.n	800ac4e <_fwalk_reent+0x3a>
 800ac3e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ac42:	3301      	adds	r3, #1
 800ac44:	d003      	beq.n	800ac4e <_fwalk_reent+0x3a>
 800ac46:	4629      	mov	r1, r5
 800ac48:	4630      	mov	r0, r6
 800ac4a:	47c0      	blx	r8
 800ac4c:	4307      	orrs	r7, r0
 800ac4e:	3568      	adds	r5, #104	; 0x68
 800ac50:	e7e9      	b.n	800ac26 <_fwalk_reent+0x12>
	...

0800ac54 <__libc_init_array>:
 800ac54:	b570      	push	{r4, r5, r6, lr}
 800ac56:	4d0d      	ldr	r5, [pc, #52]	; (800ac8c <__libc_init_array+0x38>)
 800ac58:	4c0d      	ldr	r4, [pc, #52]	; (800ac90 <__libc_init_array+0x3c>)
 800ac5a:	1b64      	subs	r4, r4, r5
 800ac5c:	10a4      	asrs	r4, r4, #2
 800ac5e:	2600      	movs	r6, #0
 800ac60:	42a6      	cmp	r6, r4
 800ac62:	d109      	bne.n	800ac78 <__libc_init_array+0x24>
 800ac64:	4d0b      	ldr	r5, [pc, #44]	; (800ac94 <__libc_init_array+0x40>)
 800ac66:	4c0c      	ldr	r4, [pc, #48]	; (800ac98 <__libc_init_array+0x44>)
 800ac68:	f002 fefc 	bl	800da64 <_init>
 800ac6c:	1b64      	subs	r4, r4, r5
 800ac6e:	10a4      	asrs	r4, r4, #2
 800ac70:	2600      	movs	r6, #0
 800ac72:	42a6      	cmp	r6, r4
 800ac74:	d105      	bne.n	800ac82 <__libc_init_array+0x2e>
 800ac76:	bd70      	pop	{r4, r5, r6, pc}
 800ac78:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac7c:	4798      	blx	r3
 800ac7e:	3601      	adds	r6, #1
 800ac80:	e7ee      	b.n	800ac60 <__libc_init_array+0xc>
 800ac82:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac86:	4798      	blx	r3
 800ac88:	3601      	adds	r6, #1
 800ac8a:	e7f2      	b.n	800ac72 <__libc_init_array+0x1e>
 800ac8c:	0800e718 	.word	0x0800e718
 800ac90:	0800e718 	.word	0x0800e718
 800ac94:	0800e718 	.word	0x0800e718
 800ac98:	0800e71c 	.word	0x0800e71c

0800ac9c <__retarget_lock_init_recursive>:
 800ac9c:	4770      	bx	lr

0800ac9e <__retarget_lock_acquire_recursive>:
 800ac9e:	4770      	bx	lr

0800aca0 <__retarget_lock_release_recursive>:
 800aca0:	4770      	bx	lr

0800aca2 <memcpy>:
 800aca2:	440a      	add	r2, r1
 800aca4:	4291      	cmp	r1, r2
 800aca6:	f100 33ff 	add.w	r3, r0, #4294967295
 800acaa:	d100      	bne.n	800acae <memcpy+0xc>
 800acac:	4770      	bx	lr
 800acae:	b510      	push	{r4, lr}
 800acb0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800acb4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800acb8:	4291      	cmp	r1, r2
 800acba:	d1f9      	bne.n	800acb0 <memcpy+0xe>
 800acbc:	bd10      	pop	{r4, pc}

0800acbe <memset>:
 800acbe:	4402      	add	r2, r0
 800acc0:	4603      	mov	r3, r0
 800acc2:	4293      	cmp	r3, r2
 800acc4:	d100      	bne.n	800acc8 <memset+0xa>
 800acc6:	4770      	bx	lr
 800acc8:	f803 1b01 	strb.w	r1, [r3], #1
 800accc:	e7f9      	b.n	800acc2 <memset+0x4>
	...

0800acd0 <sbrk_aligned>:
 800acd0:	b570      	push	{r4, r5, r6, lr}
 800acd2:	4e0e      	ldr	r6, [pc, #56]	; (800ad0c <sbrk_aligned+0x3c>)
 800acd4:	460c      	mov	r4, r1
 800acd6:	6831      	ldr	r1, [r6, #0]
 800acd8:	4605      	mov	r5, r0
 800acda:	b911      	cbnz	r1, 800ace2 <sbrk_aligned+0x12>
 800acdc:	f000 fd52 	bl	800b784 <_sbrk_r>
 800ace0:	6030      	str	r0, [r6, #0]
 800ace2:	4621      	mov	r1, r4
 800ace4:	4628      	mov	r0, r5
 800ace6:	f000 fd4d 	bl	800b784 <_sbrk_r>
 800acea:	1c43      	adds	r3, r0, #1
 800acec:	d00a      	beq.n	800ad04 <sbrk_aligned+0x34>
 800acee:	1cc4      	adds	r4, r0, #3
 800acf0:	f024 0403 	bic.w	r4, r4, #3
 800acf4:	42a0      	cmp	r0, r4
 800acf6:	d007      	beq.n	800ad08 <sbrk_aligned+0x38>
 800acf8:	1a21      	subs	r1, r4, r0
 800acfa:	4628      	mov	r0, r5
 800acfc:	f000 fd42 	bl	800b784 <_sbrk_r>
 800ad00:	3001      	adds	r0, #1
 800ad02:	d101      	bne.n	800ad08 <sbrk_aligned+0x38>
 800ad04:	f04f 34ff 	mov.w	r4, #4294967295
 800ad08:	4620      	mov	r0, r4
 800ad0a:	bd70      	pop	{r4, r5, r6, pc}
 800ad0c:	20001d04 	.word	0x20001d04

0800ad10 <_malloc_r>:
 800ad10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad14:	1ccd      	adds	r5, r1, #3
 800ad16:	f025 0503 	bic.w	r5, r5, #3
 800ad1a:	3508      	adds	r5, #8
 800ad1c:	2d0c      	cmp	r5, #12
 800ad1e:	bf38      	it	cc
 800ad20:	250c      	movcc	r5, #12
 800ad22:	2d00      	cmp	r5, #0
 800ad24:	4607      	mov	r7, r0
 800ad26:	db01      	blt.n	800ad2c <_malloc_r+0x1c>
 800ad28:	42a9      	cmp	r1, r5
 800ad2a:	d905      	bls.n	800ad38 <_malloc_r+0x28>
 800ad2c:	230c      	movs	r3, #12
 800ad2e:	603b      	str	r3, [r7, #0]
 800ad30:	2600      	movs	r6, #0
 800ad32:	4630      	mov	r0, r6
 800ad34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad38:	4e2e      	ldr	r6, [pc, #184]	; (800adf4 <_malloc_r+0xe4>)
 800ad3a:	f001 fde1 	bl	800c900 <__malloc_lock>
 800ad3e:	6833      	ldr	r3, [r6, #0]
 800ad40:	461c      	mov	r4, r3
 800ad42:	bb34      	cbnz	r4, 800ad92 <_malloc_r+0x82>
 800ad44:	4629      	mov	r1, r5
 800ad46:	4638      	mov	r0, r7
 800ad48:	f7ff ffc2 	bl	800acd0 <sbrk_aligned>
 800ad4c:	1c43      	adds	r3, r0, #1
 800ad4e:	4604      	mov	r4, r0
 800ad50:	d14d      	bne.n	800adee <_malloc_r+0xde>
 800ad52:	6834      	ldr	r4, [r6, #0]
 800ad54:	4626      	mov	r6, r4
 800ad56:	2e00      	cmp	r6, #0
 800ad58:	d140      	bne.n	800addc <_malloc_r+0xcc>
 800ad5a:	6823      	ldr	r3, [r4, #0]
 800ad5c:	4631      	mov	r1, r6
 800ad5e:	4638      	mov	r0, r7
 800ad60:	eb04 0803 	add.w	r8, r4, r3
 800ad64:	f000 fd0e 	bl	800b784 <_sbrk_r>
 800ad68:	4580      	cmp	r8, r0
 800ad6a:	d13a      	bne.n	800ade2 <_malloc_r+0xd2>
 800ad6c:	6821      	ldr	r1, [r4, #0]
 800ad6e:	3503      	adds	r5, #3
 800ad70:	1a6d      	subs	r5, r5, r1
 800ad72:	f025 0503 	bic.w	r5, r5, #3
 800ad76:	3508      	adds	r5, #8
 800ad78:	2d0c      	cmp	r5, #12
 800ad7a:	bf38      	it	cc
 800ad7c:	250c      	movcc	r5, #12
 800ad7e:	4629      	mov	r1, r5
 800ad80:	4638      	mov	r0, r7
 800ad82:	f7ff ffa5 	bl	800acd0 <sbrk_aligned>
 800ad86:	3001      	adds	r0, #1
 800ad88:	d02b      	beq.n	800ade2 <_malloc_r+0xd2>
 800ad8a:	6823      	ldr	r3, [r4, #0]
 800ad8c:	442b      	add	r3, r5
 800ad8e:	6023      	str	r3, [r4, #0]
 800ad90:	e00e      	b.n	800adb0 <_malloc_r+0xa0>
 800ad92:	6822      	ldr	r2, [r4, #0]
 800ad94:	1b52      	subs	r2, r2, r5
 800ad96:	d41e      	bmi.n	800add6 <_malloc_r+0xc6>
 800ad98:	2a0b      	cmp	r2, #11
 800ad9a:	d916      	bls.n	800adca <_malloc_r+0xba>
 800ad9c:	1961      	adds	r1, r4, r5
 800ad9e:	42a3      	cmp	r3, r4
 800ada0:	6025      	str	r5, [r4, #0]
 800ada2:	bf18      	it	ne
 800ada4:	6059      	strne	r1, [r3, #4]
 800ada6:	6863      	ldr	r3, [r4, #4]
 800ada8:	bf08      	it	eq
 800adaa:	6031      	streq	r1, [r6, #0]
 800adac:	5162      	str	r2, [r4, r5]
 800adae:	604b      	str	r3, [r1, #4]
 800adb0:	4638      	mov	r0, r7
 800adb2:	f104 060b 	add.w	r6, r4, #11
 800adb6:	f001 fda9 	bl	800c90c <__malloc_unlock>
 800adba:	f026 0607 	bic.w	r6, r6, #7
 800adbe:	1d23      	adds	r3, r4, #4
 800adc0:	1af2      	subs	r2, r6, r3
 800adc2:	d0b6      	beq.n	800ad32 <_malloc_r+0x22>
 800adc4:	1b9b      	subs	r3, r3, r6
 800adc6:	50a3      	str	r3, [r4, r2]
 800adc8:	e7b3      	b.n	800ad32 <_malloc_r+0x22>
 800adca:	6862      	ldr	r2, [r4, #4]
 800adcc:	42a3      	cmp	r3, r4
 800adce:	bf0c      	ite	eq
 800add0:	6032      	streq	r2, [r6, #0]
 800add2:	605a      	strne	r2, [r3, #4]
 800add4:	e7ec      	b.n	800adb0 <_malloc_r+0xa0>
 800add6:	4623      	mov	r3, r4
 800add8:	6864      	ldr	r4, [r4, #4]
 800adda:	e7b2      	b.n	800ad42 <_malloc_r+0x32>
 800addc:	4634      	mov	r4, r6
 800adde:	6876      	ldr	r6, [r6, #4]
 800ade0:	e7b9      	b.n	800ad56 <_malloc_r+0x46>
 800ade2:	230c      	movs	r3, #12
 800ade4:	603b      	str	r3, [r7, #0]
 800ade6:	4638      	mov	r0, r7
 800ade8:	f001 fd90 	bl	800c90c <__malloc_unlock>
 800adec:	e7a1      	b.n	800ad32 <_malloc_r+0x22>
 800adee:	6025      	str	r5, [r4, #0]
 800adf0:	e7de      	b.n	800adb0 <_malloc_r+0xa0>
 800adf2:	bf00      	nop
 800adf4:	20001d00 	.word	0x20001d00

0800adf8 <__cvt>:
 800adf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800adfc:	b088      	sub	sp, #32
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	461f      	mov	r7, r3
 800ae02:	4614      	mov	r4, r2
 800ae04:	bfb8      	it	lt
 800ae06:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800ae0a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ae0c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800ae0e:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800ae12:	bfb6      	itet	lt
 800ae14:	461f      	movlt	r7, r3
 800ae16:	2300      	movge	r3, #0
 800ae18:	232d      	movlt	r3, #45	; 0x2d
 800ae1a:	7013      	strb	r3, [r2, #0]
 800ae1c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ae1e:	f023 0820 	bic.w	r8, r3, #32
 800ae22:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ae26:	d005      	beq.n	800ae34 <__cvt+0x3c>
 800ae28:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ae2c:	d100      	bne.n	800ae30 <__cvt+0x38>
 800ae2e:	3501      	adds	r5, #1
 800ae30:	2302      	movs	r3, #2
 800ae32:	e000      	b.n	800ae36 <__cvt+0x3e>
 800ae34:	2303      	movs	r3, #3
 800ae36:	aa07      	add	r2, sp, #28
 800ae38:	9204      	str	r2, [sp, #16]
 800ae3a:	aa06      	add	r2, sp, #24
 800ae3c:	e9cd a202 	strd	sl, r2, [sp, #8]
 800ae40:	e9cd 3500 	strd	r3, r5, [sp]
 800ae44:	4622      	mov	r2, r4
 800ae46:	463b      	mov	r3, r7
 800ae48:	f000 fe7e 	bl	800bb48 <_dtoa_r>
 800ae4c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ae50:	4606      	mov	r6, r0
 800ae52:	d102      	bne.n	800ae5a <__cvt+0x62>
 800ae54:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ae56:	07db      	lsls	r3, r3, #31
 800ae58:	d522      	bpl.n	800aea0 <__cvt+0xa8>
 800ae5a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ae5e:	eb06 0905 	add.w	r9, r6, r5
 800ae62:	d110      	bne.n	800ae86 <__cvt+0x8e>
 800ae64:	7833      	ldrb	r3, [r6, #0]
 800ae66:	2b30      	cmp	r3, #48	; 0x30
 800ae68:	d10a      	bne.n	800ae80 <__cvt+0x88>
 800ae6a:	2200      	movs	r2, #0
 800ae6c:	2300      	movs	r3, #0
 800ae6e:	4620      	mov	r0, r4
 800ae70:	4639      	mov	r1, r7
 800ae72:	f7f5 fe01 	bl	8000a78 <__aeabi_dcmpeq>
 800ae76:	b918      	cbnz	r0, 800ae80 <__cvt+0x88>
 800ae78:	f1c5 0501 	rsb	r5, r5, #1
 800ae7c:	f8ca 5000 	str.w	r5, [sl]
 800ae80:	f8da 3000 	ldr.w	r3, [sl]
 800ae84:	4499      	add	r9, r3
 800ae86:	2200      	movs	r2, #0
 800ae88:	2300      	movs	r3, #0
 800ae8a:	4620      	mov	r0, r4
 800ae8c:	4639      	mov	r1, r7
 800ae8e:	f7f5 fdf3 	bl	8000a78 <__aeabi_dcmpeq>
 800ae92:	b108      	cbz	r0, 800ae98 <__cvt+0xa0>
 800ae94:	f8cd 901c 	str.w	r9, [sp, #28]
 800ae98:	2230      	movs	r2, #48	; 0x30
 800ae9a:	9b07      	ldr	r3, [sp, #28]
 800ae9c:	454b      	cmp	r3, r9
 800ae9e:	d307      	bcc.n	800aeb0 <__cvt+0xb8>
 800aea0:	9b07      	ldr	r3, [sp, #28]
 800aea2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800aea4:	1b9b      	subs	r3, r3, r6
 800aea6:	4630      	mov	r0, r6
 800aea8:	6013      	str	r3, [r2, #0]
 800aeaa:	b008      	add	sp, #32
 800aeac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aeb0:	1c59      	adds	r1, r3, #1
 800aeb2:	9107      	str	r1, [sp, #28]
 800aeb4:	701a      	strb	r2, [r3, #0]
 800aeb6:	e7f0      	b.n	800ae9a <__cvt+0xa2>

0800aeb8 <__exponent>:
 800aeb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aeba:	4603      	mov	r3, r0
 800aebc:	2900      	cmp	r1, #0
 800aebe:	bfb8      	it	lt
 800aec0:	4249      	neglt	r1, r1
 800aec2:	f803 2b02 	strb.w	r2, [r3], #2
 800aec6:	bfb4      	ite	lt
 800aec8:	222d      	movlt	r2, #45	; 0x2d
 800aeca:	222b      	movge	r2, #43	; 0x2b
 800aecc:	2909      	cmp	r1, #9
 800aece:	7042      	strb	r2, [r0, #1]
 800aed0:	dd2a      	ble.n	800af28 <__exponent+0x70>
 800aed2:	f10d 0407 	add.w	r4, sp, #7
 800aed6:	46a4      	mov	ip, r4
 800aed8:	270a      	movs	r7, #10
 800aeda:	46a6      	mov	lr, r4
 800aedc:	460a      	mov	r2, r1
 800aede:	fb91 f6f7 	sdiv	r6, r1, r7
 800aee2:	fb07 1516 	mls	r5, r7, r6, r1
 800aee6:	3530      	adds	r5, #48	; 0x30
 800aee8:	2a63      	cmp	r2, #99	; 0x63
 800aeea:	f104 34ff 	add.w	r4, r4, #4294967295
 800aeee:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800aef2:	4631      	mov	r1, r6
 800aef4:	dcf1      	bgt.n	800aeda <__exponent+0x22>
 800aef6:	3130      	adds	r1, #48	; 0x30
 800aef8:	f1ae 0502 	sub.w	r5, lr, #2
 800aefc:	f804 1c01 	strb.w	r1, [r4, #-1]
 800af00:	1c44      	adds	r4, r0, #1
 800af02:	4629      	mov	r1, r5
 800af04:	4561      	cmp	r1, ip
 800af06:	d30a      	bcc.n	800af1e <__exponent+0x66>
 800af08:	f10d 0209 	add.w	r2, sp, #9
 800af0c:	eba2 020e 	sub.w	r2, r2, lr
 800af10:	4565      	cmp	r5, ip
 800af12:	bf88      	it	hi
 800af14:	2200      	movhi	r2, #0
 800af16:	4413      	add	r3, r2
 800af18:	1a18      	subs	r0, r3, r0
 800af1a:	b003      	add	sp, #12
 800af1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800af22:	f804 2f01 	strb.w	r2, [r4, #1]!
 800af26:	e7ed      	b.n	800af04 <__exponent+0x4c>
 800af28:	2330      	movs	r3, #48	; 0x30
 800af2a:	3130      	adds	r1, #48	; 0x30
 800af2c:	7083      	strb	r3, [r0, #2]
 800af2e:	70c1      	strb	r1, [r0, #3]
 800af30:	1d03      	adds	r3, r0, #4
 800af32:	e7f1      	b.n	800af18 <__exponent+0x60>

0800af34 <_printf_float>:
 800af34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af38:	b091      	sub	sp, #68	; 0x44
 800af3a:	460c      	mov	r4, r1
 800af3c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 800af40:	4616      	mov	r6, r2
 800af42:	461f      	mov	r7, r3
 800af44:	4605      	mov	r5, r0
 800af46:	f001 fcbd 	bl	800c8c4 <_localeconv_r>
 800af4a:	6803      	ldr	r3, [r0, #0]
 800af4c:	9309      	str	r3, [sp, #36]	; 0x24
 800af4e:	4618      	mov	r0, r3
 800af50:	f7f5 f916 	bl	8000180 <strlen>
 800af54:	2300      	movs	r3, #0
 800af56:	930e      	str	r3, [sp, #56]	; 0x38
 800af58:	f8d8 3000 	ldr.w	r3, [r8]
 800af5c:	900a      	str	r0, [sp, #40]	; 0x28
 800af5e:	3307      	adds	r3, #7
 800af60:	f023 0307 	bic.w	r3, r3, #7
 800af64:	f103 0208 	add.w	r2, r3, #8
 800af68:	f894 9018 	ldrb.w	r9, [r4, #24]
 800af6c:	f8d4 b000 	ldr.w	fp, [r4]
 800af70:	f8c8 2000 	str.w	r2, [r8]
 800af74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af78:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800af7c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800af80:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800af84:	930b      	str	r3, [sp, #44]	; 0x2c
 800af86:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800af88:	4b9c      	ldr	r3, [pc, #624]	; (800b1fc <_printf_float+0x2c8>)
 800af8a:	f04f 32ff 	mov.w	r2, #4294967295
 800af8e:	4640      	mov	r0, r8
 800af90:	f7f5 fda4 	bl	8000adc <__aeabi_dcmpun>
 800af94:	bb70      	cbnz	r0, 800aff4 <_printf_float+0xc0>
 800af96:	4b99      	ldr	r3, [pc, #612]	; (800b1fc <_printf_float+0x2c8>)
 800af98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800af9a:	f04f 32ff 	mov.w	r2, #4294967295
 800af9e:	4640      	mov	r0, r8
 800afa0:	f7f5 fd7e 	bl	8000aa0 <__aeabi_dcmple>
 800afa4:	bb30      	cbnz	r0, 800aff4 <_printf_float+0xc0>
 800afa6:	2200      	movs	r2, #0
 800afa8:	2300      	movs	r3, #0
 800afaa:	4640      	mov	r0, r8
 800afac:	4651      	mov	r1, sl
 800afae:	f7f5 fd6d 	bl	8000a8c <__aeabi_dcmplt>
 800afb2:	b110      	cbz	r0, 800afba <_printf_float+0x86>
 800afb4:	232d      	movs	r3, #45	; 0x2d
 800afb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800afba:	4b91      	ldr	r3, [pc, #580]	; (800b200 <_printf_float+0x2cc>)
 800afbc:	4891      	ldr	r0, [pc, #580]	; (800b204 <_printf_float+0x2d0>)
 800afbe:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800afc2:	bf94      	ite	ls
 800afc4:	4698      	movls	r8, r3
 800afc6:	4680      	movhi	r8, r0
 800afc8:	2303      	movs	r3, #3
 800afca:	6123      	str	r3, [r4, #16]
 800afcc:	f02b 0304 	bic.w	r3, fp, #4
 800afd0:	6023      	str	r3, [r4, #0]
 800afd2:	f04f 0a00 	mov.w	sl, #0
 800afd6:	9700      	str	r7, [sp, #0]
 800afd8:	4633      	mov	r3, r6
 800afda:	aa0f      	add	r2, sp, #60	; 0x3c
 800afdc:	4621      	mov	r1, r4
 800afde:	4628      	mov	r0, r5
 800afe0:	f000 f9d2 	bl	800b388 <_printf_common>
 800afe4:	3001      	adds	r0, #1
 800afe6:	f040 808f 	bne.w	800b108 <_printf_float+0x1d4>
 800afea:	f04f 30ff 	mov.w	r0, #4294967295
 800afee:	b011      	add	sp, #68	; 0x44
 800aff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aff4:	4642      	mov	r2, r8
 800aff6:	4653      	mov	r3, sl
 800aff8:	4640      	mov	r0, r8
 800affa:	4651      	mov	r1, sl
 800affc:	f7f5 fd6e 	bl	8000adc <__aeabi_dcmpun>
 800b000:	b140      	cbz	r0, 800b014 <_printf_float+0xe0>
 800b002:	f1ba 0f00 	cmp.w	sl, #0
 800b006:	bfbc      	itt	lt
 800b008:	232d      	movlt	r3, #45	; 0x2d
 800b00a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b00e:	487e      	ldr	r0, [pc, #504]	; (800b208 <_printf_float+0x2d4>)
 800b010:	4b7e      	ldr	r3, [pc, #504]	; (800b20c <_printf_float+0x2d8>)
 800b012:	e7d4      	b.n	800afbe <_printf_float+0x8a>
 800b014:	6863      	ldr	r3, [r4, #4]
 800b016:	1c5a      	adds	r2, r3, #1
 800b018:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800b01c:	d142      	bne.n	800b0a4 <_printf_float+0x170>
 800b01e:	2306      	movs	r3, #6
 800b020:	6063      	str	r3, [r4, #4]
 800b022:	2200      	movs	r2, #0
 800b024:	9206      	str	r2, [sp, #24]
 800b026:	aa0e      	add	r2, sp, #56	; 0x38
 800b028:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800b02c:	aa0d      	add	r2, sp, #52	; 0x34
 800b02e:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800b032:	9203      	str	r2, [sp, #12]
 800b034:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800b038:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800b03c:	6023      	str	r3, [r4, #0]
 800b03e:	6863      	ldr	r3, [r4, #4]
 800b040:	9300      	str	r3, [sp, #0]
 800b042:	4642      	mov	r2, r8
 800b044:	4653      	mov	r3, sl
 800b046:	4628      	mov	r0, r5
 800b048:	910b      	str	r1, [sp, #44]	; 0x2c
 800b04a:	f7ff fed5 	bl	800adf8 <__cvt>
 800b04e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b050:	2947      	cmp	r1, #71	; 0x47
 800b052:	4680      	mov	r8, r0
 800b054:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b056:	d108      	bne.n	800b06a <_printf_float+0x136>
 800b058:	1cc8      	adds	r0, r1, #3
 800b05a:	db02      	blt.n	800b062 <_printf_float+0x12e>
 800b05c:	6863      	ldr	r3, [r4, #4]
 800b05e:	4299      	cmp	r1, r3
 800b060:	dd40      	ble.n	800b0e4 <_printf_float+0x1b0>
 800b062:	f1a9 0902 	sub.w	r9, r9, #2
 800b066:	fa5f f989 	uxtb.w	r9, r9
 800b06a:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b06e:	d81f      	bhi.n	800b0b0 <_printf_float+0x17c>
 800b070:	3901      	subs	r1, #1
 800b072:	464a      	mov	r2, r9
 800b074:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b078:	910d      	str	r1, [sp, #52]	; 0x34
 800b07a:	f7ff ff1d 	bl	800aeb8 <__exponent>
 800b07e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b080:	1813      	adds	r3, r2, r0
 800b082:	2a01      	cmp	r2, #1
 800b084:	4682      	mov	sl, r0
 800b086:	6123      	str	r3, [r4, #16]
 800b088:	dc02      	bgt.n	800b090 <_printf_float+0x15c>
 800b08a:	6822      	ldr	r2, [r4, #0]
 800b08c:	07d2      	lsls	r2, r2, #31
 800b08e:	d501      	bpl.n	800b094 <_printf_float+0x160>
 800b090:	3301      	adds	r3, #1
 800b092:	6123      	str	r3, [r4, #16]
 800b094:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d09c      	beq.n	800afd6 <_printf_float+0xa2>
 800b09c:	232d      	movs	r3, #45	; 0x2d
 800b09e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0a2:	e798      	b.n	800afd6 <_printf_float+0xa2>
 800b0a4:	2947      	cmp	r1, #71	; 0x47
 800b0a6:	d1bc      	bne.n	800b022 <_printf_float+0xee>
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d1ba      	bne.n	800b022 <_printf_float+0xee>
 800b0ac:	2301      	movs	r3, #1
 800b0ae:	e7b7      	b.n	800b020 <_printf_float+0xec>
 800b0b0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800b0b4:	d118      	bne.n	800b0e8 <_printf_float+0x1b4>
 800b0b6:	2900      	cmp	r1, #0
 800b0b8:	6863      	ldr	r3, [r4, #4]
 800b0ba:	dd0b      	ble.n	800b0d4 <_printf_float+0x1a0>
 800b0bc:	6121      	str	r1, [r4, #16]
 800b0be:	b913      	cbnz	r3, 800b0c6 <_printf_float+0x192>
 800b0c0:	6822      	ldr	r2, [r4, #0]
 800b0c2:	07d0      	lsls	r0, r2, #31
 800b0c4:	d502      	bpl.n	800b0cc <_printf_float+0x198>
 800b0c6:	3301      	adds	r3, #1
 800b0c8:	440b      	add	r3, r1
 800b0ca:	6123      	str	r3, [r4, #16]
 800b0cc:	65a1      	str	r1, [r4, #88]	; 0x58
 800b0ce:	f04f 0a00 	mov.w	sl, #0
 800b0d2:	e7df      	b.n	800b094 <_printf_float+0x160>
 800b0d4:	b913      	cbnz	r3, 800b0dc <_printf_float+0x1a8>
 800b0d6:	6822      	ldr	r2, [r4, #0]
 800b0d8:	07d2      	lsls	r2, r2, #31
 800b0da:	d501      	bpl.n	800b0e0 <_printf_float+0x1ac>
 800b0dc:	3302      	adds	r3, #2
 800b0de:	e7f4      	b.n	800b0ca <_printf_float+0x196>
 800b0e0:	2301      	movs	r3, #1
 800b0e2:	e7f2      	b.n	800b0ca <_printf_float+0x196>
 800b0e4:	f04f 0967 	mov.w	r9, #103	; 0x67
 800b0e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b0ea:	4299      	cmp	r1, r3
 800b0ec:	db05      	blt.n	800b0fa <_printf_float+0x1c6>
 800b0ee:	6823      	ldr	r3, [r4, #0]
 800b0f0:	6121      	str	r1, [r4, #16]
 800b0f2:	07d8      	lsls	r0, r3, #31
 800b0f4:	d5ea      	bpl.n	800b0cc <_printf_float+0x198>
 800b0f6:	1c4b      	adds	r3, r1, #1
 800b0f8:	e7e7      	b.n	800b0ca <_printf_float+0x196>
 800b0fa:	2900      	cmp	r1, #0
 800b0fc:	bfd4      	ite	le
 800b0fe:	f1c1 0202 	rsble	r2, r1, #2
 800b102:	2201      	movgt	r2, #1
 800b104:	4413      	add	r3, r2
 800b106:	e7e0      	b.n	800b0ca <_printf_float+0x196>
 800b108:	6823      	ldr	r3, [r4, #0]
 800b10a:	055a      	lsls	r2, r3, #21
 800b10c:	d407      	bmi.n	800b11e <_printf_float+0x1ea>
 800b10e:	6923      	ldr	r3, [r4, #16]
 800b110:	4642      	mov	r2, r8
 800b112:	4631      	mov	r1, r6
 800b114:	4628      	mov	r0, r5
 800b116:	47b8      	blx	r7
 800b118:	3001      	adds	r0, #1
 800b11a:	d12b      	bne.n	800b174 <_printf_float+0x240>
 800b11c:	e765      	b.n	800afea <_printf_float+0xb6>
 800b11e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b122:	f240 80dc 	bls.w	800b2de <_printf_float+0x3aa>
 800b126:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b12a:	2200      	movs	r2, #0
 800b12c:	2300      	movs	r3, #0
 800b12e:	f7f5 fca3 	bl	8000a78 <__aeabi_dcmpeq>
 800b132:	2800      	cmp	r0, #0
 800b134:	d033      	beq.n	800b19e <_printf_float+0x26a>
 800b136:	4a36      	ldr	r2, [pc, #216]	; (800b210 <_printf_float+0x2dc>)
 800b138:	2301      	movs	r3, #1
 800b13a:	4631      	mov	r1, r6
 800b13c:	4628      	mov	r0, r5
 800b13e:	47b8      	blx	r7
 800b140:	3001      	adds	r0, #1
 800b142:	f43f af52 	beq.w	800afea <_printf_float+0xb6>
 800b146:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b14a:	429a      	cmp	r2, r3
 800b14c:	db02      	blt.n	800b154 <_printf_float+0x220>
 800b14e:	6823      	ldr	r3, [r4, #0]
 800b150:	07d8      	lsls	r0, r3, #31
 800b152:	d50f      	bpl.n	800b174 <_printf_float+0x240>
 800b154:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b158:	4631      	mov	r1, r6
 800b15a:	4628      	mov	r0, r5
 800b15c:	47b8      	blx	r7
 800b15e:	3001      	adds	r0, #1
 800b160:	f43f af43 	beq.w	800afea <_printf_float+0xb6>
 800b164:	f04f 0800 	mov.w	r8, #0
 800b168:	f104 091a 	add.w	r9, r4, #26
 800b16c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b16e:	3b01      	subs	r3, #1
 800b170:	4543      	cmp	r3, r8
 800b172:	dc09      	bgt.n	800b188 <_printf_float+0x254>
 800b174:	6823      	ldr	r3, [r4, #0]
 800b176:	079b      	lsls	r3, r3, #30
 800b178:	f100 8101 	bmi.w	800b37e <_printf_float+0x44a>
 800b17c:	68e0      	ldr	r0, [r4, #12]
 800b17e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b180:	4298      	cmp	r0, r3
 800b182:	bfb8      	it	lt
 800b184:	4618      	movlt	r0, r3
 800b186:	e732      	b.n	800afee <_printf_float+0xba>
 800b188:	2301      	movs	r3, #1
 800b18a:	464a      	mov	r2, r9
 800b18c:	4631      	mov	r1, r6
 800b18e:	4628      	mov	r0, r5
 800b190:	47b8      	blx	r7
 800b192:	3001      	adds	r0, #1
 800b194:	f43f af29 	beq.w	800afea <_printf_float+0xb6>
 800b198:	f108 0801 	add.w	r8, r8, #1
 800b19c:	e7e6      	b.n	800b16c <_printf_float+0x238>
 800b19e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	dc37      	bgt.n	800b214 <_printf_float+0x2e0>
 800b1a4:	4a1a      	ldr	r2, [pc, #104]	; (800b210 <_printf_float+0x2dc>)
 800b1a6:	2301      	movs	r3, #1
 800b1a8:	4631      	mov	r1, r6
 800b1aa:	4628      	mov	r0, r5
 800b1ac:	47b8      	blx	r7
 800b1ae:	3001      	adds	r0, #1
 800b1b0:	f43f af1b 	beq.w	800afea <_printf_float+0xb6>
 800b1b4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b1b8:	4313      	orrs	r3, r2
 800b1ba:	d102      	bne.n	800b1c2 <_printf_float+0x28e>
 800b1bc:	6823      	ldr	r3, [r4, #0]
 800b1be:	07d9      	lsls	r1, r3, #31
 800b1c0:	d5d8      	bpl.n	800b174 <_printf_float+0x240>
 800b1c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b1c6:	4631      	mov	r1, r6
 800b1c8:	4628      	mov	r0, r5
 800b1ca:	47b8      	blx	r7
 800b1cc:	3001      	adds	r0, #1
 800b1ce:	f43f af0c 	beq.w	800afea <_printf_float+0xb6>
 800b1d2:	f04f 0900 	mov.w	r9, #0
 800b1d6:	f104 0a1a 	add.w	sl, r4, #26
 800b1da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b1dc:	425b      	negs	r3, r3
 800b1de:	454b      	cmp	r3, r9
 800b1e0:	dc01      	bgt.n	800b1e6 <_printf_float+0x2b2>
 800b1e2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b1e4:	e794      	b.n	800b110 <_printf_float+0x1dc>
 800b1e6:	2301      	movs	r3, #1
 800b1e8:	4652      	mov	r2, sl
 800b1ea:	4631      	mov	r1, r6
 800b1ec:	4628      	mov	r0, r5
 800b1ee:	47b8      	blx	r7
 800b1f0:	3001      	adds	r0, #1
 800b1f2:	f43f aefa 	beq.w	800afea <_printf_float+0xb6>
 800b1f6:	f109 0901 	add.w	r9, r9, #1
 800b1fa:	e7ee      	b.n	800b1da <_printf_float+0x2a6>
 800b1fc:	7fefffff 	.word	0x7fefffff
 800b200:	0800e33c 	.word	0x0800e33c
 800b204:	0800e340 	.word	0x0800e340
 800b208:	0800e348 	.word	0x0800e348
 800b20c:	0800e344 	.word	0x0800e344
 800b210:	0800e34c 	.word	0x0800e34c
 800b214:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b216:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b218:	429a      	cmp	r2, r3
 800b21a:	bfa8      	it	ge
 800b21c:	461a      	movge	r2, r3
 800b21e:	2a00      	cmp	r2, #0
 800b220:	4691      	mov	r9, r2
 800b222:	dc37      	bgt.n	800b294 <_printf_float+0x360>
 800b224:	f04f 0b00 	mov.w	fp, #0
 800b228:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b22c:	f104 021a 	add.w	r2, r4, #26
 800b230:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800b234:	ebaa 0309 	sub.w	r3, sl, r9
 800b238:	455b      	cmp	r3, fp
 800b23a:	dc33      	bgt.n	800b2a4 <_printf_float+0x370>
 800b23c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b240:	429a      	cmp	r2, r3
 800b242:	db3b      	blt.n	800b2bc <_printf_float+0x388>
 800b244:	6823      	ldr	r3, [r4, #0]
 800b246:	07da      	lsls	r2, r3, #31
 800b248:	d438      	bmi.n	800b2bc <_printf_float+0x388>
 800b24a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b24c:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b24e:	eba3 020a 	sub.w	r2, r3, sl
 800b252:	eba3 0901 	sub.w	r9, r3, r1
 800b256:	4591      	cmp	r9, r2
 800b258:	bfa8      	it	ge
 800b25a:	4691      	movge	r9, r2
 800b25c:	f1b9 0f00 	cmp.w	r9, #0
 800b260:	dc34      	bgt.n	800b2cc <_printf_float+0x398>
 800b262:	f04f 0800 	mov.w	r8, #0
 800b266:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b26a:	f104 0a1a 	add.w	sl, r4, #26
 800b26e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800b272:	1a9b      	subs	r3, r3, r2
 800b274:	eba3 0309 	sub.w	r3, r3, r9
 800b278:	4543      	cmp	r3, r8
 800b27a:	f77f af7b 	ble.w	800b174 <_printf_float+0x240>
 800b27e:	2301      	movs	r3, #1
 800b280:	4652      	mov	r2, sl
 800b282:	4631      	mov	r1, r6
 800b284:	4628      	mov	r0, r5
 800b286:	47b8      	blx	r7
 800b288:	3001      	adds	r0, #1
 800b28a:	f43f aeae 	beq.w	800afea <_printf_float+0xb6>
 800b28e:	f108 0801 	add.w	r8, r8, #1
 800b292:	e7ec      	b.n	800b26e <_printf_float+0x33a>
 800b294:	4613      	mov	r3, r2
 800b296:	4631      	mov	r1, r6
 800b298:	4642      	mov	r2, r8
 800b29a:	4628      	mov	r0, r5
 800b29c:	47b8      	blx	r7
 800b29e:	3001      	adds	r0, #1
 800b2a0:	d1c0      	bne.n	800b224 <_printf_float+0x2f0>
 800b2a2:	e6a2      	b.n	800afea <_printf_float+0xb6>
 800b2a4:	2301      	movs	r3, #1
 800b2a6:	4631      	mov	r1, r6
 800b2a8:	4628      	mov	r0, r5
 800b2aa:	920b      	str	r2, [sp, #44]	; 0x2c
 800b2ac:	47b8      	blx	r7
 800b2ae:	3001      	adds	r0, #1
 800b2b0:	f43f ae9b 	beq.w	800afea <_printf_float+0xb6>
 800b2b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b2b6:	f10b 0b01 	add.w	fp, fp, #1
 800b2ba:	e7b9      	b.n	800b230 <_printf_float+0x2fc>
 800b2bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b2c0:	4631      	mov	r1, r6
 800b2c2:	4628      	mov	r0, r5
 800b2c4:	47b8      	blx	r7
 800b2c6:	3001      	adds	r0, #1
 800b2c8:	d1bf      	bne.n	800b24a <_printf_float+0x316>
 800b2ca:	e68e      	b.n	800afea <_printf_float+0xb6>
 800b2cc:	464b      	mov	r3, r9
 800b2ce:	eb08 020a 	add.w	r2, r8, sl
 800b2d2:	4631      	mov	r1, r6
 800b2d4:	4628      	mov	r0, r5
 800b2d6:	47b8      	blx	r7
 800b2d8:	3001      	adds	r0, #1
 800b2da:	d1c2      	bne.n	800b262 <_printf_float+0x32e>
 800b2dc:	e685      	b.n	800afea <_printf_float+0xb6>
 800b2de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b2e0:	2a01      	cmp	r2, #1
 800b2e2:	dc01      	bgt.n	800b2e8 <_printf_float+0x3b4>
 800b2e4:	07db      	lsls	r3, r3, #31
 800b2e6:	d537      	bpl.n	800b358 <_printf_float+0x424>
 800b2e8:	2301      	movs	r3, #1
 800b2ea:	4642      	mov	r2, r8
 800b2ec:	4631      	mov	r1, r6
 800b2ee:	4628      	mov	r0, r5
 800b2f0:	47b8      	blx	r7
 800b2f2:	3001      	adds	r0, #1
 800b2f4:	f43f ae79 	beq.w	800afea <_printf_float+0xb6>
 800b2f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b2fc:	4631      	mov	r1, r6
 800b2fe:	4628      	mov	r0, r5
 800b300:	47b8      	blx	r7
 800b302:	3001      	adds	r0, #1
 800b304:	f43f ae71 	beq.w	800afea <_printf_float+0xb6>
 800b308:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b30c:	2200      	movs	r2, #0
 800b30e:	2300      	movs	r3, #0
 800b310:	f7f5 fbb2 	bl	8000a78 <__aeabi_dcmpeq>
 800b314:	b9d8      	cbnz	r0, 800b34e <_printf_float+0x41a>
 800b316:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b318:	f108 0201 	add.w	r2, r8, #1
 800b31c:	3b01      	subs	r3, #1
 800b31e:	4631      	mov	r1, r6
 800b320:	4628      	mov	r0, r5
 800b322:	47b8      	blx	r7
 800b324:	3001      	adds	r0, #1
 800b326:	d10e      	bne.n	800b346 <_printf_float+0x412>
 800b328:	e65f      	b.n	800afea <_printf_float+0xb6>
 800b32a:	2301      	movs	r3, #1
 800b32c:	464a      	mov	r2, r9
 800b32e:	4631      	mov	r1, r6
 800b330:	4628      	mov	r0, r5
 800b332:	47b8      	blx	r7
 800b334:	3001      	adds	r0, #1
 800b336:	f43f ae58 	beq.w	800afea <_printf_float+0xb6>
 800b33a:	f108 0801 	add.w	r8, r8, #1
 800b33e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b340:	3b01      	subs	r3, #1
 800b342:	4543      	cmp	r3, r8
 800b344:	dcf1      	bgt.n	800b32a <_printf_float+0x3f6>
 800b346:	4653      	mov	r3, sl
 800b348:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b34c:	e6e1      	b.n	800b112 <_printf_float+0x1de>
 800b34e:	f04f 0800 	mov.w	r8, #0
 800b352:	f104 091a 	add.w	r9, r4, #26
 800b356:	e7f2      	b.n	800b33e <_printf_float+0x40a>
 800b358:	2301      	movs	r3, #1
 800b35a:	4642      	mov	r2, r8
 800b35c:	e7df      	b.n	800b31e <_printf_float+0x3ea>
 800b35e:	2301      	movs	r3, #1
 800b360:	464a      	mov	r2, r9
 800b362:	4631      	mov	r1, r6
 800b364:	4628      	mov	r0, r5
 800b366:	47b8      	blx	r7
 800b368:	3001      	adds	r0, #1
 800b36a:	f43f ae3e 	beq.w	800afea <_printf_float+0xb6>
 800b36e:	f108 0801 	add.w	r8, r8, #1
 800b372:	68e3      	ldr	r3, [r4, #12]
 800b374:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b376:	1a5b      	subs	r3, r3, r1
 800b378:	4543      	cmp	r3, r8
 800b37a:	dcf0      	bgt.n	800b35e <_printf_float+0x42a>
 800b37c:	e6fe      	b.n	800b17c <_printf_float+0x248>
 800b37e:	f04f 0800 	mov.w	r8, #0
 800b382:	f104 0919 	add.w	r9, r4, #25
 800b386:	e7f4      	b.n	800b372 <_printf_float+0x43e>

0800b388 <_printf_common>:
 800b388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b38c:	4616      	mov	r6, r2
 800b38e:	4699      	mov	r9, r3
 800b390:	688a      	ldr	r2, [r1, #8]
 800b392:	690b      	ldr	r3, [r1, #16]
 800b394:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b398:	4293      	cmp	r3, r2
 800b39a:	bfb8      	it	lt
 800b39c:	4613      	movlt	r3, r2
 800b39e:	6033      	str	r3, [r6, #0]
 800b3a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b3a4:	4607      	mov	r7, r0
 800b3a6:	460c      	mov	r4, r1
 800b3a8:	b10a      	cbz	r2, 800b3ae <_printf_common+0x26>
 800b3aa:	3301      	adds	r3, #1
 800b3ac:	6033      	str	r3, [r6, #0]
 800b3ae:	6823      	ldr	r3, [r4, #0]
 800b3b0:	0699      	lsls	r1, r3, #26
 800b3b2:	bf42      	ittt	mi
 800b3b4:	6833      	ldrmi	r3, [r6, #0]
 800b3b6:	3302      	addmi	r3, #2
 800b3b8:	6033      	strmi	r3, [r6, #0]
 800b3ba:	6825      	ldr	r5, [r4, #0]
 800b3bc:	f015 0506 	ands.w	r5, r5, #6
 800b3c0:	d106      	bne.n	800b3d0 <_printf_common+0x48>
 800b3c2:	f104 0a19 	add.w	sl, r4, #25
 800b3c6:	68e3      	ldr	r3, [r4, #12]
 800b3c8:	6832      	ldr	r2, [r6, #0]
 800b3ca:	1a9b      	subs	r3, r3, r2
 800b3cc:	42ab      	cmp	r3, r5
 800b3ce:	dc26      	bgt.n	800b41e <_printf_common+0x96>
 800b3d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b3d4:	1e13      	subs	r3, r2, #0
 800b3d6:	6822      	ldr	r2, [r4, #0]
 800b3d8:	bf18      	it	ne
 800b3da:	2301      	movne	r3, #1
 800b3dc:	0692      	lsls	r2, r2, #26
 800b3de:	d42b      	bmi.n	800b438 <_printf_common+0xb0>
 800b3e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b3e4:	4649      	mov	r1, r9
 800b3e6:	4638      	mov	r0, r7
 800b3e8:	47c0      	blx	r8
 800b3ea:	3001      	adds	r0, #1
 800b3ec:	d01e      	beq.n	800b42c <_printf_common+0xa4>
 800b3ee:	6823      	ldr	r3, [r4, #0]
 800b3f0:	68e5      	ldr	r5, [r4, #12]
 800b3f2:	6832      	ldr	r2, [r6, #0]
 800b3f4:	f003 0306 	and.w	r3, r3, #6
 800b3f8:	2b04      	cmp	r3, #4
 800b3fa:	bf08      	it	eq
 800b3fc:	1aad      	subeq	r5, r5, r2
 800b3fe:	68a3      	ldr	r3, [r4, #8]
 800b400:	6922      	ldr	r2, [r4, #16]
 800b402:	bf0c      	ite	eq
 800b404:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b408:	2500      	movne	r5, #0
 800b40a:	4293      	cmp	r3, r2
 800b40c:	bfc4      	itt	gt
 800b40e:	1a9b      	subgt	r3, r3, r2
 800b410:	18ed      	addgt	r5, r5, r3
 800b412:	2600      	movs	r6, #0
 800b414:	341a      	adds	r4, #26
 800b416:	42b5      	cmp	r5, r6
 800b418:	d11a      	bne.n	800b450 <_printf_common+0xc8>
 800b41a:	2000      	movs	r0, #0
 800b41c:	e008      	b.n	800b430 <_printf_common+0xa8>
 800b41e:	2301      	movs	r3, #1
 800b420:	4652      	mov	r2, sl
 800b422:	4649      	mov	r1, r9
 800b424:	4638      	mov	r0, r7
 800b426:	47c0      	blx	r8
 800b428:	3001      	adds	r0, #1
 800b42a:	d103      	bne.n	800b434 <_printf_common+0xac>
 800b42c:	f04f 30ff 	mov.w	r0, #4294967295
 800b430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b434:	3501      	adds	r5, #1
 800b436:	e7c6      	b.n	800b3c6 <_printf_common+0x3e>
 800b438:	18e1      	adds	r1, r4, r3
 800b43a:	1c5a      	adds	r2, r3, #1
 800b43c:	2030      	movs	r0, #48	; 0x30
 800b43e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b442:	4422      	add	r2, r4
 800b444:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b448:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b44c:	3302      	adds	r3, #2
 800b44e:	e7c7      	b.n	800b3e0 <_printf_common+0x58>
 800b450:	2301      	movs	r3, #1
 800b452:	4622      	mov	r2, r4
 800b454:	4649      	mov	r1, r9
 800b456:	4638      	mov	r0, r7
 800b458:	47c0      	blx	r8
 800b45a:	3001      	adds	r0, #1
 800b45c:	d0e6      	beq.n	800b42c <_printf_common+0xa4>
 800b45e:	3601      	adds	r6, #1
 800b460:	e7d9      	b.n	800b416 <_printf_common+0x8e>
	...

0800b464 <_printf_i>:
 800b464:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b468:	7e0f      	ldrb	r7, [r1, #24]
 800b46a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b46c:	2f78      	cmp	r7, #120	; 0x78
 800b46e:	4691      	mov	r9, r2
 800b470:	4680      	mov	r8, r0
 800b472:	460c      	mov	r4, r1
 800b474:	469a      	mov	sl, r3
 800b476:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b47a:	d807      	bhi.n	800b48c <_printf_i+0x28>
 800b47c:	2f62      	cmp	r7, #98	; 0x62
 800b47e:	d80a      	bhi.n	800b496 <_printf_i+0x32>
 800b480:	2f00      	cmp	r7, #0
 800b482:	f000 80d8 	beq.w	800b636 <_printf_i+0x1d2>
 800b486:	2f58      	cmp	r7, #88	; 0x58
 800b488:	f000 80a3 	beq.w	800b5d2 <_printf_i+0x16e>
 800b48c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b490:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b494:	e03a      	b.n	800b50c <_printf_i+0xa8>
 800b496:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b49a:	2b15      	cmp	r3, #21
 800b49c:	d8f6      	bhi.n	800b48c <_printf_i+0x28>
 800b49e:	a101      	add	r1, pc, #4	; (adr r1, 800b4a4 <_printf_i+0x40>)
 800b4a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b4a4:	0800b4fd 	.word	0x0800b4fd
 800b4a8:	0800b511 	.word	0x0800b511
 800b4ac:	0800b48d 	.word	0x0800b48d
 800b4b0:	0800b48d 	.word	0x0800b48d
 800b4b4:	0800b48d 	.word	0x0800b48d
 800b4b8:	0800b48d 	.word	0x0800b48d
 800b4bc:	0800b511 	.word	0x0800b511
 800b4c0:	0800b48d 	.word	0x0800b48d
 800b4c4:	0800b48d 	.word	0x0800b48d
 800b4c8:	0800b48d 	.word	0x0800b48d
 800b4cc:	0800b48d 	.word	0x0800b48d
 800b4d0:	0800b61d 	.word	0x0800b61d
 800b4d4:	0800b541 	.word	0x0800b541
 800b4d8:	0800b5ff 	.word	0x0800b5ff
 800b4dc:	0800b48d 	.word	0x0800b48d
 800b4e0:	0800b48d 	.word	0x0800b48d
 800b4e4:	0800b63f 	.word	0x0800b63f
 800b4e8:	0800b48d 	.word	0x0800b48d
 800b4ec:	0800b541 	.word	0x0800b541
 800b4f0:	0800b48d 	.word	0x0800b48d
 800b4f4:	0800b48d 	.word	0x0800b48d
 800b4f8:	0800b607 	.word	0x0800b607
 800b4fc:	682b      	ldr	r3, [r5, #0]
 800b4fe:	1d1a      	adds	r2, r3, #4
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	602a      	str	r2, [r5, #0]
 800b504:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b508:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b50c:	2301      	movs	r3, #1
 800b50e:	e0a3      	b.n	800b658 <_printf_i+0x1f4>
 800b510:	6820      	ldr	r0, [r4, #0]
 800b512:	6829      	ldr	r1, [r5, #0]
 800b514:	0606      	lsls	r6, r0, #24
 800b516:	f101 0304 	add.w	r3, r1, #4
 800b51a:	d50a      	bpl.n	800b532 <_printf_i+0xce>
 800b51c:	680e      	ldr	r6, [r1, #0]
 800b51e:	602b      	str	r3, [r5, #0]
 800b520:	2e00      	cmp	r6, #0
 800b522:	da03      	bge.n	800b52c <_printf_i+0xc8>
 800b524:	232d      	movs	r3, #45	; 0x2d
 800b526:	4276      	negs	r6, r6
 800b528:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b52c:	485e      	ldr	r0, [pc, #376]	; (800b6a8 <_printf_i+0x244>)
 800b52e:	230a      	movs	r3, #10
 800b530:	e019      	b.n	800b566 <_printf_i+0x102>
 800b532:	680e      	ldr	r6, [r1, #0]
 800b534:	602b      	str	r3, [r5, #0]
 800b536:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b53a:	bf18      	it	ne
 800b53c:	b236      	sxthne	r6, r6
 800b53e:	e7ef      	b.n	800b520 <_printf_i+0xbc>
 800b540:	682b      	ldr	r3, [r5, #0]
 800b542:	6820      	ldr	r0, [r4, #0]
 800b544:	1d19      	adds	r1, r3, #4
 800b546:	6029      	str	r1, [r5, #0]
 800b548:	0601      	lsls	r1, r0, #24
 800b54a:	d501      	bpl.n	800b550 <_printf_i+0xec>
 800b54c:	681e      	ldr	r6, [r3, #0]
 800b54e:	e002      	b.n	800b556 <_printf_i+0xf2>
 800b550:	0646      	lsls	r6, r0, #25
 800b552:	d5fb      	bpl.n	800b54c <_printf_i+0xe8>
 800b554:	881e      	ldrh	r6, [r3, #0]
 800b556:	4854      	ldr	r0, [pc, #336]	; (800b6a8 <_printf_i+0x244>)
 800b558:	2f6f      	cmp	r7, #111	; 0x6f
 800b55a:	bf0c      	ite	eq
 800b55c:	2308      	moveq	r3, #8
 800b55e:	230a      	movne	r3, #10
 800b560:	2100      	movs	r1, #0
 800b562:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b566:	6865      	ldr	r5, [r4, #4]
 800b568:	60a5      	str	r5, [r4, #8]
 800b56a:	2d00      	cmp	r5, #0
 800b56c:	bfa2      	ittt	ge
 800b56e:	6821      	ldrge	r1, [r4, #0]
 800b570:	f021 0104 	bicge.w	r1, r1, #4
 800b574:	6021      	strge	r1, [r4, #0]
 800b576:	b90e      	cbnz	r6, 800b57c <_printf_i+0x118>
 800b578:	2d00      	cmp	r5, #0
 800b57a:	d04d      	beq.n	800b618 <_printf_i+0x1b4>
 800b57c:	4615      	mov	r5, r2
 800b57e:	fbb6 f1f3 	udiv	r1, r6, r3
 800b582:	fb03 6711 	mls	r7, r3, r1, r6
 800b586:	5dc7      	ldrb	r7, [r0, r7]
 800b588:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b58c:	4637      	mov	r7, r6
 800b58e:	42bb      	cmp	r3, r7
 800b590:	460e      	mov	r6, r1
 800b592:	d9f4      	bls.n	800b57e <_printf_i+0x11a>
 800b594:	2b08      	cmp	r3, #8
 800b596:	d10b      	bne.n	800b5b0 <_printf_i+0x14c>
 800b598:	6823      	ldr	r3, [r4, #0]
 800b59a:	07de      	lsls	r6, r3, #31
 800b59c:	d508      	bpl.n	800b5b0 <_printf_i+0x14c>
 800b59e:	6923      	ldr	r3, [r4, #16]
 800b5a0:	6861      	ldr	r1, [r4, #4]
 800b5a2:	4299      	cmp	r1, r3
 800b5a4:	bfde      	ittt	le
 800b5a6:	2330      	movle	r3, #48	; 0x30
 800b5a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b5ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b5b0:	1b52      	subs	r2, r2, r5
 800b5b2:	6122      	str	r2, [r4, #16]
 800b5b4:	f8cd a000 	str.w	sl, [sp]
 800b5b8:	464b      	mov	r3, r9
 800b5ba:	aa03      	add	r2, sp, #12
 800b5bc:	4621      	mov	r1, r4
 800b5be:	4640      	mov	r0, r8
 800b5c0:	f7ff fee2 	bl	800b388 <_printf_common>
 800b5c4:	3001      	adds	r0, #1
 800b5c6:	d14c      	bne.n	800b662 <_printf_i+0x1fe>
 800b5c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b5cc:	b004      	add	sp, #16
 800b5ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5d2:	4835      	ldr	r0, [pc, #212]	; (800b6a8 <_printf_i+0x244>)
 800b5d4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b5d8:	6829      	ldr	r1, [r5, #0]
 800b5da:	6823      	ldr	r3, [r4, #0]
 800b5dc:	f851 6b04 	ldr.w	r6, [r1], #4
 800b5e0:	6029      	str	r1, [r5, #0]
 800b5e2:	061d      	lsls	r5, r3, #24
 800b5e4:	d514      	bpl.n	800b610 <_printf_i+0x1ac>
 800b5e6:	07df      	lsls	r7, r3, #31
 800b5e8:	bf44      	itt	mi
 800b5ea:	f043 0320 	orrmi.w	r3, r3, #32
 800b5ee:	6023      	strmi	r3, [r4, #0]
 800b5f0:	b91e      	cbnz	r6, 800b5fa <_printf_i+0x196>
 800b5f2:	6823      	ldr	r3, [r4, #0]
 800b5f4:	f023 0320 	bic.w	r3, r3, #32
 800b5f8:	6023      	str	r3, [r4, #0]
 800b5fa:	2310      	movs	r3, #16
 800b5fc:	e7b0      	b.n	800b560 <_printf_i+0xfc>
 800b5fe:	6823      	ldr	r3, [r4, #0]
 800b600:	f043 0320 	orr.w	r3, r3, #32
 800b604:	6023      	str	r3, [r4, #0]
 800b606:	2378      	movs	r3, #120	; 0x78
 800b608:	4828      	ldr	r0, [pc, #160]	; (800b6ac <_printf_i+0x248>)
 800b60a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b60e:	e7e3      	b.n	800b5d8 <_printf_i+0x174>
 800b610:	0659      	lsls	r1, r3, #25
 800b612:	bf48      	it	mi
 800b614:	b2b6      	uxthmi	r6, r6
 800b616:	e7e6      	b.n	800b5e6 <_printf_i+0x182>
 800b618:	4615      	mov	r5, r2
 800b61a:	e7bb      	b.n	800b594 <_printf_i+0x130>
 800b61c:	682b      	ldr	r3, [r5, #0]
 800b61e:	6826      	ldr	r6, [r4, #0]
 800b620:	6961      	ldr	r1, [r4, #20]
 800b622:	1d18      	adds	r0, r3, #4
 800b624:	6028      	str	r0, [r5, #0]
 800b626:	0635      	lsls	r5, r6, #24
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	d501      	bpl.n	800b630 <_printf_i+0x1cc>
 800b62c:	6019      	str	r1, [r3, #0]
 800b62e:	e002      	b.n	800b636 <_printf_i+0x1d2>
 800b630:	0670      	lsls	r0, r6, #25
 800b632:	d5fb      	bpl.n	800b62c <_printf_i+0x1c8>
 800b634:	8019      	strh	r1, [r3, #0]
 800b636:	2300      	movs	r3, #0
 800b638:	6123      	str	r3, [r4, #16]
 800b63a:	4615      	mov	r5, r2
 800b63c:	e7ba      	b.n	800b5b4 <_printf_i+0x150>
 800b63e:	682b      	ldr	r3, [r5, #0]
 800b640:	1d1a      	adds	r2, r3, #4
 800b642:	602a      	str	r2, [r5, #0]
 800b644:	681d      	ldr	r5, [r3, #0]
 800b646:	6862      	ldr	r2, [r4, #4]
 800b648:	2100      	movs	r1, #0
 800b64a:	4628      	mov	r0, r5
 800b64c:	f7f4 fda0 	bl	8000190 <memchr>
 800b650:	b108      	cbz	r0, 800b656 <_printf_i+0x1f2>
 800b652:	1b40      	subs	r0, r0, r5
 800b654:	6060      	str	r0, [r4, #4]
 800b656:	6863      	ldr	r3, [r4, #4]
 800b658:	6123      	str	r3, [r4, #16]
 800b65a:	2300      	movs	r3, #0
 800b65c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b660:	e7a8      	b.n	800b5b4 <_printf_i+0x150>
 800b662:	6923      	ldr	r3, [r4, #16]
 800b664:	462a      	mov	r2, r5
 800b666:	4649      	mov	r1, r9
 800b668:	4640      	mov	r0, r8
 800b66a:	47d0      	blx	sl
 800b66c:	3001      	adds	r0, #1
 800b66e:	d0ab      	beq.n	800b5c8 <_printf_i+0x164>
 800b670:	6823      	ldr	r3, [r4, #0]
 800b672:	079b      	lsls	r3, r3, #30
 800b674:	d413      	bmi.n	800b69e <_printf_i+0x23a>
 800b676:	68e0      	ldr	r0, [r4, #12]
 800b678:	9b03      	ldr	r3, [sp, #12]
 800b67a:	4298      	cmp	r0, r3
 800b67c:	bfb8      	it	lt
 800b67e:	4618      	movlt	r0, r3
 800b680:	e7a4      	b.n	800b5cc <_printf_i+0x168>
 800b682:	2301      	movs	r3, #1
 800b684:	4632      	mov	r2, r6
 800b686:	4649      	mov	r1, r9
 800b688:	4640      	mov	r0, r8
 800b68a:	47d0      	blx	sl
 800b68c:	3001      	adds	r0, #1
 800b68e:	d09b      	beq.n	800b5c8 <_printf_i+0x164>
 800b690:	3501      	adds	r5, #1
 800b692:	68e3      	ldr	r3, [r4, #12]
 800b694:	9903      	ldr	r1, [sp, #12]
 800b696:	1a5b      	subs	r3, r3, r1
 800b698:	42ab      	cmp	r3, r5
 800b69a:	dcf2      	bgt.n	800b682 <_printf_i+0x21e>
 800b69c:	e7eb      	b.n	800b676 <_printf_i+0x212>
 800b69e:	2500      	movs	r5, #0
 800b6a0:	f104 0619 	add.w	r6, r4, #25
 800b6a4:	e7f5      	b.n	800b692 <_printf_i+0x22e>
 800b6a6:	bf00      	nop
 800b6a8:	0800e34e 	.word	0x0800e34e
 800b6ac:	0800e35f 	.word	0x0800e35f

0800b6b0 <cleanup_glue>:
 800b6b0:	b538      	push	{r3, r4, r5, lr}
 800b6b2:	460c      	mov	r4, r1
 800b6b4:	6809      	ldr	r1, [r1, #0]
 800b6b6:	4605      	mov	r5, r0
 800b6b8:	b109      	cbz	r1, 800b6be <cleanup_glue+0xe>
 800b6ba:	f7ff fff9 	bl	800b6b0 <cleanup_glue>
 800b6be:	4621      	mov	r1, r4
 800b6c0:	4628      	mov	r0, r5
 800b6c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b6c6:	f001 bcb9 	b.w	800d03c <_free_r>
	...

0800b6cc <_reclaim_reent>:
 800b6cc:	4b2c      	ldr	r3, [pc, #176]	; (800b780 <_reclaim_reent+0xb4>)
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	4283      	cmp	r3, r0
 800b6d2:	b570      	push	{r4, r5, r6, lr}
 800b6d4:	4604      	mov	r4, r0
 800b6d6:	d051      	beq.n	800b77c <_reclaim_reent+0xb0>
 800b6d8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b6da:	b143      	cbz	r3, 800b6ee <_reclaim_reent+0x22>
 800b6dc:	68db      	ldr	r3, [r3, #12]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d14a      	bne.n	800b778 <_reclaim_reent+0xac>
 800b6e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b6e4:	6819      	ldr	r1, [r3, #0]
 800b6e6:	b111      	cbz	r1, 800b6ee <_reclaim_reent+0x22>
 800b6e8:	4620      	mov	r0, r4
 800b6ea:	f001 fca7 	bl	800d03c <_free_r>
 800b6ee:	6961      	ldr	r1, [r4, #20]
 800b6f0:	b111      	cbz	r1, 800b6f8 <_reclaim_reent+0x2c>
 800b6f2:	4620      	mov	r0, r4
 800b6f4:	f001 fca2 	bl	800d03c <_free_r>
 800b6f8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b6fa:	b111      	cbz	r1, 800b702 <_reclaim_reent+0x36>
 800b6fc:	4620      	mov	r0, r4
 800b6fe:	f001 fc9d 	bl	800d03c <_free_r>
 800b702:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b704:	b111      	cbz	r1, 800b70c <_reclaim_reent+0x40>
 800b706:	4620      	mov	r0, r4
 800b708:	f001 fc98 	bl	800d03c <_free_r>
 800b70c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b70e:	b111      	cbz	r1, 800b716 <_reclaim_reent+0x4a>
 800b710:	4620      	mov	r0, r4
 800b712:	f001 fc93 	bl	800d03c <_free_r>
 800b716:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b718:	b111      	cbz	r1, 800b720 <_reclaim_reent+0x54>
 800b71a:	4620      	mov	r0, r4
 800b71c:	f001 fc8e 	bl	800d03c <_free_r>
 800b720:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b722:	b111      	cbz	r1, 800b72a <_reclaim_reent+0x5e>
 800b724:	4620      	mov	r0, r4
 800b726:	f001 fc89 	bl	800d03c <_free_r>
 800b72a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b72c:	b111      	cbz	r1, 800b734 <_reclaim_reent+0x68>
 800b72e:	4620      	mov	r0, r4
 800b730:	f001 fc84 	bl	800d03c <_free_r>
 800b734:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b736:	b111      	cbz	r1, 800b73e <_reclaim_reent+0x72>
 800b738:	4620      	mov	r0, r4
 800b73a:	f001 fc7f 	bl	800d03c <_free_r>
 800b73e:	69a3      	ldr	r3, [r4, #24]
 800b740:	b1e3      	cbz	r3, 800b77c <_reclaim_reent+0xb0>
 800b742:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b744:	4620      	mov	r0, r4
 800b746:	4798      	blx	r3
 800b748:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b74a:	b1b9      	cbz	r1, 800b77c <_reclaim_reent+0xb0>
 800b74c:	4620      	mov	r0, r4
 800b74e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b752:	f7ff bfad 	b.w	800b6b0 <cleanup_glue>
 800b756:	5949      	ldr	r1, [r1, r5]
 800b758:	b941      	cbnz	r1, 800b76c <_reclaim_reent+0xa0>
 800b75a:	3504      	adds	r5, #4
 800b75c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b75e:	2d80      	cmp	r5, #128	; 0x80
 800b760:	68d9      	ldr	r1, [r3, #12]
 800b762:	d1f8      	bne.n	800b756 <_reclaim_reent+0x8a>
 800b764:	4620      	mov	r0, r4
 800b766:	f001 fc69 	bl	800d03c <_free_r>
 800b76a:	e7ba      	b.n	800b6e2 <_reclaim_reent+0x16>
 800b76c:	680e      	ldr	r6, [r1, #0]
 800b76e:	4620      	mov	r0, r4
 800b770:	f001 fc64 	bl	800d03c <_free_r>
 800b774:	4631      	mov	r1, r6
 800b776:	e7ef      	b.n	800b758 <_reclaim_reent+0x8c>
 800b778:	2500      	movs	r5, #0
 800b77a:	e7ef      	b.n	800b75c <_reclaim_reent+0x90>
 800b77c:	bd70      	pop	{r4, r5, r6, pc}
 800b77e:	bf00      	nop
 800b780:	20000010 	.word	0x20000010

0800b784 <_sbrk_r>:
 800b784:	b538      	push	{r3, r4, r5, lr}
 800b786:	4d06      	ldr	r5, [pc, #24]	; (800b7a0 <_sbrk_r+0x1c>)
 800b788:	2300      	movs	r3, #0
 800b78a:	4604      	mov	r4, r0
 800b78c:	4608      	mov	r0, r1
 800b78e:	602b      	str	r3, [r5, #0]
 800b790:	f7f6 fbb0 	bl	8001ef4 <_sbrk>
 800b794:	1c43      	adds	r3, r0, #1
 800b796:	d102      	bne.n	800b79e <_sbrk_r+0x1a>
 800b798:	682b      	ldr	r3, [r5, #0]
 800b79a:	b103      	cbz	r3, 800b79e <_sbrk_r+0x1a>
 800b79c:	6023      	str	r3, [r4, #0]
 800b79e:	bd38      	pop	{r3, r4, r5, pc}
 800b7a0:	20001d08 	.word	0x20001d08

0800b7a4 <sniprintf>:
 800b7a4:	b40c      	push	{r2, r3}
 800b7a6:	b530      	push	{r4, r5, lr}
 800b7a8:	4b17      	ldr	r3, [pc, #92]	; (800b808 <sniprintf+0x64>)
 800b7aa:	1e0c      	subs	r4, r1, #0
 800b7ac:	681d      	ldr	r5, [r3, #0]
 800b7ae:	b09d      	sub	sp, #116	; 0x74
 800b7b0:	da08      	bge.n	800b7c4 <sniprintf+0x20>
 800b7b2:	238b      	movs	r3, #139	; 0x8b
 800b7b4:	602b      	str	r3, [r5, #0]
 800b7b6:	f04f 30ff 	mov.w	r0, #4294967295
 800b7ba:	b01d      	add	sp, #116	; 0x74
 800b7bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b7c0:	b002      	add	sp, #8
 800b7c2:	4770      	bx	lr
 800b7c4:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b7c8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b7cc:	bf14      	ite	ne
 800b7ce:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b7d2:	4623      	moveq	r3, r4
 800b7d4:	9304      	str	r3, [sp, #16]
 800b7d6:	9307      	str	r3, [sp, #28]
 800b7d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b7dc:	9002      	str	r0, [sp, #8]
 800b7de:	9006      	str	r0, [sp, #24]
 800b7e0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b7e4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b7e6:	ab21      	add	r3, sp, #132	; 0x84
 800b7e8:	a902      	add	r1, sp, #8
 800b7ea:	4628      	mov	r0, r5
 800b7ec:	9301      	str	r3, [sp, #4]
 800b7ee:	f001 fccb 	bl	800d188 <_svfiprintf_r>
 800b7f2:	1c43      	adds	r3, r0, #1
 800b7f4:	bfbc      	itt	lt
 800b7f6:	238b      	movlt	r3, #139	; 0x8b
 800b7f8:	602b      	strlt	r3, [r5, #0]
 800b7fa:	2c00      	cmp	r4, #0
 800b7fc:	d0dd      	beq.n	800b7ba <sniprintf+0x16>
 800b7fe:	9b02      	ldr	r3, [sp, #8]
 800b800:	2200      	movs	r2, #0
 800b802:	701a      	strb	r2, [r3, #0]
 800b804:	e7d9      	b.n	800b7ba <sniprintf+0x16>
 800b806:	bf00      	nop
 800b808:	20000010 	.word	0x20000010

0800b80c <siprintf>:
 800b80c:	b40e      	push	{r1, r2, r3}
 800b80e:	b500      	push	{lr}
 800b810:	b09c      	sub	sp, #112	; 0x70
 800b812:	ab1d      	add	r3, sp, #116	; 0x74
 800b814:	9002      	str	r0, [sp, #8]
 800b816:	9006      	str	r0, [sp, #24]
 800b818:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b81c:	4809      	ldr	r0, [pc, #36]	; (800b844 <siprintf+0x38>)
 800b81e:	9107      	str	r1, [sp, #28]
 800b820:	9104      	str	r1, [sp, #16]
 800b822:	4909      	ldr	r1, [pc, #36]	; (800b848 <siprintf+0x3c>)
 800b824:	f853 2b04 	ldr.w	r2, [r3], #4
 800b828:	9105      	str	r1, [sp, #20]
 800b82a:	6800      	ldr	r0, [r0, #0]
 800b82c:	9301      	str	r3, [sp, #4]
 800b82e:	a902      	add	r1, sp, #8
 800b830:	f001 fcaa 	bl	800d188 <_svfiprintf_r>
 800b834:	9b02      	ldr	r3, [sp, #8]
 800b836:	2200      	movs	r2, #0
 800b838:	701a      	strb	r2, [r3, #0]
 800b83a:	b01c      	add	sp, #112	; 0x70
 800b83c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b840:	b003      	add	sp, #12
 800b842:	4770      	bx	lr
 800b844:	20000010 	.word	0x20000010
 800b848:	ffff0208 	.word	0xffff0208

0800b84c <__sread>:
 800b84c:	b510      	push	{r4, lr}
 800b84e:	460c      	mov	r4, r1
 800b850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b854:	f001 fef0 	bl	800d638 <_read_r>
 800b858:	2800      	cmp	r0, #0
 800b85a:	bfab      	itete	ge
 800b85c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b85e:	89a3      	ldrhlt	r3, [r4, #12]
 800b860:	181b      	addge	r3, r3, r0
 800b862:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b866:	bfac      	ite	ge
 800b868:	6563      	strge	r3, [r4, #84]	; 0x54
 800b86a:	81a3      	strhlt	r3, [r4, #12]
 800b86c:	bd10      	pop	{r4, pc}

0800b86e <__swrite>:
 800b86e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b872:	461f      	mov	r7, r3
 800b874:	898b      	ldrh	r3, [r1, #12]
 800b876:	05db      	lsls	r3, r3, #23
 800b878:	4605      	mov	r5, r0
 800b87a:	460c      	mov	r4, r1
 800b87c:	4616      	mov	r6, r2
 800b87e:	d505      	bpl.n	800b88c <__swrite+0x1e>
 800b880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b884:	2302      	movs	r3, #2
 800b886:	2200      	movs	r2, #0
 800b888:	f001 f820 	bl	800c8cc <_lseek_r>
 800b88c:	89a3      	ldrh	r3, [r4, #12]
 800b88e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b892:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b896:	81a3      	strh	r3, [r4, #12]
 800b898:	4632      	mov	r2, r6
 800b89a:	463b      	mov	r3, r7
 800b89c:	4628      	mov	r0, r5
 800b89e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b8a2:	f000 b887 	b.w	800b9b4 <_write_r>

0800b8a6 <__sseek>:
 800b8a6:	b510      	push	{r4, lr}
 800b8a8:	460c      	mov	r4, r1
 800b8aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8ae:	f001 f80d 	bl	800c8cc <_lseek_r>
 800b8b2:	1c43      	adds	r3, r0, #1
 800b8b4:	89a3      	ldrh	r3, [r4, #12]
 800b8b6:	bf15      	itete	ne
 800b8b8:	6560      	strne	r0, [r4, #84]	; 0x54
 800b8ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b8be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b8c2:	81a3      	strheq	r3, [r4, #12]
 800b8c4:	bf18      	it	ne
 800b8c6:	81a3      	strhne	r3, [r4, #12]
 800b8c8:	bd10      	pop	{r4, pc}

0800b8ca <__sclose>:
 800b8ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8ce:	f000 b8a1 	b.w	800ba14 <_close_r>

0800b8d2 <strncmp>:
 800b8d2:	b510      	push	{r4, lr}
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	b172      	cbz	r2, 800b8f6 <strncmp+0x24>
 800b8d8:	3901      	subs	r1, #1
 800b8da:	1884      	adds	r4, r0, r2
 800b8dc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b8e0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b8e4:	4290      	cmp	r0, r2
 800b8e6:	d101      	bne.n	800b8ec <strncmp+0x1a>
 800b8e8:	42a3      	cmp	r3, r4
 800b8ea:	d101      	bne.n	800b8f0 <strncmp+0x1e>
 800b8ec:	1a80      	subs	r0, r0, r2
 800b8ee:	bd10      	pop	{r4, pc}
 800b8f0:	2800      	cmp	r0, #0
 800b8f2:	d1f3      	bne.n	800b8dc <strncmp+0xa>
 800b8f4:	e7fa      	b.n	800b8ec <strncmp+0x1a>
 800b8f6:	4610      	mov	r0, r2
 800b8f8:	e7f9      	b.n	800b8ee <strncmp+0x1c>
	...

0800b8fc <strtok>:
 800b8fc:	4b16      	ldr	r3, [pc, #88]	; (800b958 <strtok+0x5c>)
 800b8fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b902:	681f      	ldr	r7, [r3, #0]
 800b904:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800b906:	4605      	mov	r5, r0
 800b908:	460e      	mov	r6, r1
 800b90a:	b9ec      	cbnz	r4, 800b948 <strtok+0x4c>
 800b90c:	2050      	movs	r0, #80	; 0x50
 800b90e:	f000 ffef 	bl	800c8f0 <malloc>
 800b912:	4602      	mov	r2, r0
 800b914:	65b8      	str	r0, [r7, #88]	; 0x58
 800b916:	b920      	cbnz	r0, 800b922 <strtok+0x26>
 800b918:	4b10      	ldr	r3, [pc, #64]	; (800b95c <strtok+0x60>)
 800b91a:	4811      	ldr	r0, [pc, #68]	; (800b960 <strtok+0x64>)
 800b91c:	2157      	movs	r1, #87	; 0x57
 800b91e:	f000 f85b 	bl	800b9d8 <__assert_func>
 800b922:	e9c0 4400 	strd	r4, r4, [r0]
 800b926:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800b92a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800b92e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800b932:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800b936:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800b93a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800b93e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800b942:	6184      	str	r4, [r0, #24]
 800b944:	7704      	strb	r4, [r0, #28]
 800b946:	6244      	str	r4, [r0, #36]	; 0x24
 800b948:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b94a:	4631      	mov	r1, r6
 800b94c:	4628      	mov	r0, r5
 800b94e:	2301      	movs	r3, #1
 800b950:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b954:	f000 b806 	b.w	800b964 <__strtok_r>
 800b958:	20000010 	.word	0x20000010
 800b95c:	0800e370 	.word	0x0800e370
 800b960:	0800e387 	.word	0x0800e387

0800b964 <__strtok_r>:
 800b964:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b966:	b908      	cbnz	r0, 800b96c <__strtok_r+0x8>
 800b968:	6810      	ldr	r0, [r2, #0]
 800b96a:	b188      	cbz	r0, 800b990 <__strtok_r+0x2c>
 800b96c:	4604      	mov	r4, r0
 800b96e:	4620      	mov	r0, r4
 800b970:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b974:	460f      	mov	r7, r1
 800b976:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b97a:	b91e      	cbnz	r6, 800b984 <__strtok_r+0x20>
 800b97c:	b965      	cbnz	r5, 800b998 <__strtok_r+0x34>
 800b97e:	6015      	str	r5, [r2, #0]
 800b980:	4628      	mov	r0, r5
 800b982:	e005      	b.n	800b990 <__strtok_r+0x2c>
 800b984:	42b5      	cmp	r5, r6
 800b986:	d1f6      	bne.n	800b976 <__strtok_r+0x12>
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d1f0      	bne.n	800b96e <__strtok_r+0xa>
 800b98c:	6014      	str	r4, [r2, #0]
 800b98e:	7003      	strb	r3, [r0, #0]
 800b990:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b992:	461c      	mov	r4, r3
 800b994:	e00c      	b.n	800b9b0 <__strtok_r+0x4c>
 800b996:	b915      	cbnz	r5, 800b99e <__strtok_r+0x3a>
 800b998:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b99c:	460e      	mov	r6, r1
 800b99e:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b9a2:	42ab      	cmp	r3, r5
 800b9a4:	d1f7      	bne.n	800b996 <__strtok_r+0x32>
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d0f3      	beq.n	800b992 <__strtok_r+0x2e>
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b9b0:	6014      	str	r4, [r2, #0]
 800b9b2:	e7ed      	b.n	800b990 <__strtok_r+0x2c>

0800b9b4 <_write_r>:
 800b9b4:	b538      	push	{r3, r4, r5, lr}
 800b9b6:	4d07      	ldr	r5, [pc, #28]	; (800b9d4 <_write_r+0x20>)
 800b9b8:	4604      	mov	r4, r0
 800b9ba:	4608      	mov	r0, r1
 800b9bc:	4611      	mov	r1, r2
 800b9be:	2200      	movs	r2, #0
 800b9c0:	602a      	str	r2, [r5, #0]
 800b9c2:	461a      	mov	r2, r3
 800b9c4:	f7f6 fa4a 	bl	8001e5c <_write>
 800b9c8:	1c43      	adds	r3, r0, #1
 800b9ca:	d102      	bne.n	800b9d2 <_write_r+0x1e>
 800b9cc:	682b      	ldr	r3, [r5, #0]
 800b9ce:	b103      	cbz	r3, 800b9d2 <_write_r+0x1e>
 800b9d0:	6023      	str	r3, [r4, #0]
 800b9d2:	bd38      	pop	{r3, r4, r5, pc}
 800b9d4:	20001d08 	.word	0x20001d08

0800b9d8 <__assert_func>:
 800b9d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b9da:	4614      	mov	r4, r2
 800b9dc:	461a      	mov	r2, r3
 800b9de:	4b09      	ldr	r3, [pc, #36]	; (800ba04 <__assert_func+0x2c>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	4605      	mov	r5, r0
 800b9e4:	68d8      	ldr	r0, [r3, #12]
 800b9e6:	b14c      	cbz	r4, 800b9fc <__assert_func+0x24>
 800b9e8:	4b07      	ldr	r3, [pc, #28]	; (800ba08 <__assert_func+0x30>)
 800b9ea:	9100      	str	r1, [sp, #0]
 800b9ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b9f0:	4906      	ldr	r1, [pc, #24]	; (800ba0c <__assert_func+0x34>)
 800b9f2:	462b      	mov	r3, r5
 800b9f4:	f000 ff54 	bl	800c8a0 <fiprintf>
 800b9f8:	f001 fef0 	bl	800d7dc <abort>
 800b9fc:	4b04      	ldr	r3, [pc, #16]	; (800ba10 <__assert_func+0x38>)
 800b9fe:	461c      	mov	r4, r3
 800ba00:	e7f3      	b.n	800b9ea <__assert_func+0x12>
 800ba02:	bf00      	nop
 800ba04:	20000010 	.word	0x20000010
 800ba08:	0800e3e4 	.word	0x0800e3e4
 800ba0c:	0800e3f1 	.word	0x0800e3f1
 800ba10:	0800e41f 	.word	0x0800e41f

0800ba14 <_close_r>:
 800ba14:	b538      	push	{r3, r4, r5, lr}
 800ba16:	4d06      	ldr	r5, [pc, #24]	; (800ba30 <_close_r+0x1c>)
 800ba18:	2300      	movs	r3, #0
 800ba1a:	4604      	mov	r4, r0
 800ba1c:	4608      	mov	r0, r1
 800ba1e:	602b      	str	r3, [r5, #0]
 800ba20:	f7f6 fa38 	bl	8001e94 <_close>
 800ba24:	1c43      	adds	r3, r0, #1
 800ba26:	d102      	bne.n	800ba2e <_close_r+0x1a>
 800ba28:	682b      	ldr	r3, [r5, #0]
 800ba2a:	b103      	cbz	r3, 800ba2e <_close_r+0x1a>
 800ba2c:	6023      	str	r3, [r4, #0]
 800ba2e:	bd38      	pop	{r3, r4, r5, pc}
 800ba30:	20001d08 	.word	0x20001d08

0800ba34 <quorem>:
 800ba34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba38:	6903      	ldr	r3, [r0, #16]
 800ba3a:	690c      	ldr	r4, [r1, #16]
 800ba3c:	42a3      	cmp	r3, r4
 800ba3e:	4607      	mov	r7, r0
 800ba40:	db7d      	blt.n	800bb3e <quorem+0x10a>
 800ba42:	3c01      	subs	r4, #1
 800ba44:	f101 0814 	add.w	r8, r1, #20
 800ba48:	f100 0514 	add.w	r5, r0, #20
 800ba4c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ba50:	9301      	str	r3, [sp, #4]
 800ba52:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ba56:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ba5a:	3301      	adds	r3, #1
 800ba5c:	429a      	cmp	r2, r3
 800ba5e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ba62:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ba66:	fbb2 f6f3 	udiv	r6, r2, r3
 800ba6a:	d32e      	bcc.n	800baca <quorem+0x96>
 800ba6c:	f04f 0e00 	mov.w	lr, #0
 800ba70:	4640      	mov	r0, r8
 800ba72:	46ac      	mov	ip, r5
 800ba74:	46f2      	mov	sl, lr
 800ba76:	f850 2b04 	ldr.w	r2, [r0], #4
 800ba7a:	b293      	uxth	r3, r2
 800ba7c:	fb06 e303 	mla	r3, r6, r3, lr
 800ba80:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ba84:	0c12      	lsrs	r2, r2, #16
 800ba86:	b29b      	uxth	r3, r3
 800ba88:	fb06 e202 	mla	r2, r6, r2, lr
 800ba8c:	ebaa 0303 	sub.w	r3, sl, r3
 800ba90:	f8dc a000 	ldr.w	sl, [ip]
 800ba94:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ba98:	b292      	uxth	r2, r2
 800ba9a:	fa13 f38a 	uxtah	r3, r3, sl
 800ba9e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800baa2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800baa6:	b29b      	uxth	r3, r3
 800baa8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800baac:	4581      	cmp	r9, r0
 800baae:	f84c 3b04 	str.w	r3, [ip], #4
 800bab2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bab6:	d2de      	bcs.n	800ba76 <quorem+0x42>
 800bab8:	f855 300b 	ldr.w	r3, [r5, fp]
 800babc:	b92b      	cbnz	r3, 800baca <quorem+0x96>
 800babe:	9b01      	ldr	r3, [sp, #4]
 800bac0:	3b04      	subs	r3, #4
 800bac2:	429d      	cmp	r5, r3
 800bac4:	461a      	mov	r2, r3
 800bac6:	d32e      	bcc.n	800bb26 <quorem+0xf2>
 800bac8:	613c      	str	r4, [r7, #16]
 800baca:	4638      	mov	r0, r7
 800bacc:	f001 f9a2 	bl	800ce14 <__mcmp>
 800bad0:	2800      	cmp	r0, #0
 800bad2:	db24      	blt.n	800bb1e <quorem+0xea>
 800bad4:	3601      	adds	r6, #1
 800bad6:	4628      	mov	r0, r5
 800bad8:	f04f 0c00 	mov.w	ip, #0
 800badc:	f858 2b04 	ldr.w	r2, [r8], #4
 800bae0:	f8d0 e000 	ldr.w	lr, [r0]
 800bae4:	b293      	uxth	r3, r2
 800bae6:	ebac 0303 	sub.w	r3, ip, r3
 800baea:	0c12      	lsrs	r2, r2, #16
 800baec:	fa13 f38e 	uxtah	r3, r3, lr
 800baf0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800baf4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800baf8:	b29b      	uxth	r3, r3
 800bafa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bafe:	45c1      	cmp	r9, r8
 800bb00:	f840 3b04 	str.w	r3, [r0], #4
 800bb04:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bb08:	d2e8      	bcs.n	800badc <quorem+0xa8>
 800bb0a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bb0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bb12:	b922      	cbnz	r2, 800bb1e <quorem+0xea>
 800bb14:	3b04      	subs	r3, #4
 800bb16:	429d      	cmp	r5, r3
 800bb18:	461a      	mov	r2, r3
 800bb1a:	d30a      	bcc.n	800bb32 <quorem+0xfe>
 800bb1c:	613c      	str	r4, [r7, #16]
 800bb1e:	4630      	mov	r0, r6
 800bb20:	b003      	add	sp, #12
 800bb22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb26:	6812      	ldr	r2, [r2, #0]
 800bb28:	3b04      	subs	r3, #4
 800bb2a:	2a00      	cmp	r2, #0
 800bb2c:	d1cc      	bne.n	800bac8 <quorem+0x94>
 800bb2e:	3c01      	subs	r4, #1
 800bb30:	e7c7      	b.n	800bac2 <quorem+0x8e>
 800bb32:	6812      	ldr	r2, [r2, #0]
 800bb34:	3b04      	subs	r3, #4
 800bb36:	2a00      	cmp	r2, #0
 800bb38:	d1f0      	bne.n	800bb1c <quorem+0xe8>
 800bb3a:	3c01      	subs	r4, #1
 800bb3c:	e7eb      	b.n	800bb16 <quorem+0xe2>
 800bb3e:	2000      	movs	r0, #0
 800bb40:	e7ee      	b.n	800bb20 <quorem+0xec>
 800bb42:	0000      	movs	r0, r0
 800bb44:	0000      	movs	r0, r0
	...

0800bb48 <_dtoa_r>:
 800bb48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb4c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800bb4e:	b099      	sub	sp, #100	; 0x64
 800bb50:	4616      	mov	r6, r2
 800bb52:	461f      	mov	r7, r3
 800bb54:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800bb58:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800bb5c:	4605      	mov	r5, r0
 800bb5e:	b974      	cbnz	r4, 800bb7e <_dtoa_r+0x36>
 800bb60:	2010      	movs	r0, #16
 800bb62:	f000 fec5 	bl	800c8f0 <malloc>
 800bb66:	4602      	mov	r2, r0
 800bb68:	6268      	str	r0, [r5, #36]	; 0x24
 800bb6a:	b920      	cbnz	r0, 800bb76 <_dtoa_r+0x2e>
 800bb6c:	4ba8      	ldr	r3, [pc, #672]	; (800be10 <_dtoa_r+0x2c8>)
 800bb6e:	21ea      	movs	r1, #234	; 0xea
 800bb70:	48a8      	ldr	r0, [pc, #672]	; (800be14 <_dtoa_r+0x2cc>)
 800bb72:	f7ff ff31 	bl	800b9d8 <__assert_func>
 800bb76:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bb7a:	6004      	str	r4, [r0, #0]
 800bb7c:	60c4      	str	r4, [r0, #12]
 800bb7e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bb80:	6819      	ldr	r1, [r3, #0]
 800bb82:	b151      	cbz	r1, 800bb9a <_dtoa_r+0x52>
 800bb84:	685a      	ldr	r2, [r3, #4]
 800bb86:	604a      	str	r2, [r1, #4]
 800bb88:	2301      	movs	r3, #1
 800bb8a:	4093      	lsls	r3, r2
 800bb8c:	608b      	str	r3, [r1, #8]
 800bb8e:	4628      	mov	r0, r5
 800bb90:	f000 ff02 	bl	800c998 <_Bfree>
 800bb94:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bb96:	2200      	movs	r2, #0
 800bb98:	601a      	str	r2, [r3, #0]
 800bb9a:	1e3b      	subs	r3, r7, #0
 800bb9c:	bfb9      	ittee	lt
 800bb9e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bba2:	9305      	strlt	r3, [sp, #20]
 800bba4:	2300      	movge	r3, #0
 800bba6:	f8c8 3000 	strge.w	r3, [r8]
 800bbaa:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800bbae:	4b9a      	ldr	r3, [pc, #616]	; (800be18 <_dtoa_r+0x2d0>)
 800bbb0:	bfbc      	itt	lt
 800bbb2:	2201      	movlt	r2, #1
 800bbb4:	f8c8 2000 	strlt.w	r2, [r8]
 800bbb8:	ea33 0309 	bics.w	r3, r3, r9
 800bbbc:	d119      	bne.n	800bbf2 <_dtoa_r+0xaa>
 800bbbe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800bbc0:	f242 730f 	movw	r3, #9999	; 0x270f
 800bbc4:	6013      	str	r3, [r2, #0]
 800bbc6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bbca:	4333      	orrs	r3, r6
 800bbcc:	f000 8580 	beq.w	800c6d0 <_dtoa_r+0xb88>
 800bbd0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bbd2:	b953      	cbnz	r3, 800bbea <_dtoa_r+0xa2>
 800bbd4:	4b91      	ldr	r3, [pc, #580]	; (800be1c <_dtoa_r+0x2d4>)
 800bbd6:	e022      	b.n	800bc1e <_dtoa_r+0xd6>
 800bbd8:	4b91      	ldr	r3, [pc, #580]	; (800be20 <_dtoa_r+0x2d8>)
 800bbda:	9303      	str	r3, [sp, #12]
 800bbdc:	3308      	adds	r3, #8
 800bbde:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800bbe0:	6013      	str	r3, [r2, #0]
 800bbe2:	9803      	ldr	r0, [sp, #12]
 800bbe4:	b019      	add	sp, #100	; 0x64
 800bbe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbea:	4b8c      	ldr	r3, [pc, #560]	; (800be1c <_dtoa_r+0x2d4>)
 800bbec:	9303      	str	r3, [sp, #12]
 800bbee:	3303      	adds	r3, #3
 800bbf0:	e7f5      	b.n	800bbde <_dtoa_r+0x96>
 800bbf2:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800bbf6:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800bbfa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bbfe:	2200      	movs	r2, #0
 800bc00:	2300      	movs	r3, #0
 800bc02:	f7f4 ff39 	bl	8000a78 <__aeabi_dcmpeq>
 800bc06:	4680      	mov	r8, r0
 800bc08:	b158      	cbz	r0, 800bc22 <_dtoa_r+0xda>
 800bc0a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800bc0c:	2301      	movs	r3, #1
 800bc0e:	6013      	str	r3, [r2, #0]
 800bc10:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	f000 8559 	beq.w	800c6ca <_dtoa_r+0xb82>
 800bc18:	4882      	ldr	r0, [pc, #520]	; (800be24 <_dtoa_r+0x2dc>)
 800bc1a:	6018      	str	r0, [r3, #0]
 800bc1c:	1e43      	subs	r3, r0, #1
 800bc1e:	9303      	str	r3, [sp, #12]
 800bc20:	e7df      	b.n	800bbe2 <_dtoa_r+0x9a>
 800bc22:	ab16      	add	r3, sp, #88	; 0x58
 800bc24:	9301      	str	r3, [sp, #4]
 800bc26:	ab17      	add	r3, sp, #92	; 0x5c
 800bc28:	9300      	str	r3, [sp, #0]
 800bc2a:	4628      	mov	r0, r5
 800bc2c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bc30:	f001 f994 	bl	800cf5c <__d2b>
 800bc34:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800bc38:	4683      	mov	fp, r0
 800bc3a:	2c00      	cmp	r4, #0
 800bc3c:	d07e      	beq.n	800bd3c <_dtoa_r+0x1f4>
 800bc3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bc40:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800bc44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bc48:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bc4c:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800bc50:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800bc54:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800bc58:	4b73      	ldr	r3, [pc, #460]	; (800be28 <_dtoa_r+0x2e0>)
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	f7f4 faec 	bl	8000238 <__aeabi_dsub>
 800bc60:	a365      	add	r3, pc, #404	; (adr r3, 800bdf8 <_dtoa_r+0x2b0>)
 800bc62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc66:	f7f4 fc9f 	bl	80005a8 <__aeabi_dmul>
 800bc6a:	a365      	add	r3, pc, #404	; (adr r3, 800be00 <_dtoa_r+0x2b8>)
 800bc6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc70:	f7f4 fae4 	bl	800023c <__adddf3>
 800bc74:	4606      	mov	r6, r0
 800bc76:	4620      	mov	r0, r4
 800bc78:	460f      	mov	r7, r1
 800bc7a:	f7f4 fc2b 	bl	80004d4 <__aeabi_i2d>
 800bc7e:	a362      	add	r3, pc, #392	; (adr r3, 800be08 <_dtoa_r+0x2c0>)
 800bc80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc84:	f7f4 fc90 	bl	80005a8 <__aeabi_dmul>
 800bc88:	4602      	mov	r2, r0
 800bc8a:	460b      	mov	r3, r1
 800bc8c:	4630      	mov	r0, r6
 800bc8e:	4639      	mov	r1, r7
 800bc90:	f7f4 fad4 	bl	800023c <__adddf3>
 800bc94:	4606      	mov	r6, r0
 800bc96:	460f      	mov	r7, r1
 800bc98:	f7f4 ff36 	bl	8000b08 <__aeabi_d2iz>
 800bc9c:	2200      	movs	r2, #0
 800bc9e:	4682      	mov	sl, r0
 800bca0:	2300      	movs	r3, #0
 800bca2:	4630      	mov	r0, r6
 800bca4:	4639      	mov	r1, r7
 800bca6:	f7f4 fef1 	bl	8000a8c <__aeabi_dcmplt>
 800bcaa:	b148      	cbz	r0, 800bcc0 <_dtoa_r+0x178>
 800bcac:	4650      	mov	r0, sl
 800bcae:	f7f4 fc11 	bl	80004d4 <__aeabi_i2d>
 800bcb2:	4632      	mov	r2, r6
 800bcb4:	463b      	mov	r3, r7
 800bcb6:	f7f4 fedf 	bl	8000a78 <__aeabi_dcmpeq>
 800bcba:	b908      	cbnz	r0, 800bcc0 <_dtoa_r+0x178>
 800bcbc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bcc0:	f1ba 0f16 	cmp.w	sl, #22
 800bcc4:	d857      	bhi.n	800bd76 <_dtoa_r+0x22e>
 800bcc6:	4b59      	ldr	r3, [pc, #356]	; (800be2c <_dtoa_r+0x2e4>)
 800bcc8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcd0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bcd4:	f7f4 feda 	bl	8000a8c <__aeabi_dcmplt>
 800bcd8:	2800      	cmp	r0, #0
 800bcda:	d04e      	beq.n	800bd7a <_dtoa_r+0x232>
 800bcdc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bce0:	2300      	movs	r3, #0
 800bce2:	930f      	str	r3, [sp, #60]	; 0x3c
 800bce4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800bce6:	1b1c      	subs	r4, r3, r4
 800bce8:	1e63      	subs	r3, r4, #1
 800bcea:	9309      	str	r3, [sp, #36]	; 0x24
 800bcec:	bf45      	ittet	mi
 800bcee:	f1c4 0301 	rsbmi	r3, r4, #1
 800bcf2:	9306      	strmi	r3, [sp, #24]
 800bcf4:	2300      	movpl	r3, #0
 800bcf6:	2300      	movmi	r3, #0
 800bcf8:	bf4c      	ite	mi
 800bcfa:	9309      	strmi	r3, [sp, #36]	; 0x24
 800bcfc:	9306      	strpl	r3, [sp, #24]
 800bcfe:	f1ba 0f00 	cmp.w	sl, #0
 800bd02:	db3c      	blt.n	800bd7e <_dtoa_r+0x236>
 800bd04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd06:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800bd0a:	4453      	add	r3, sl
 800bd0c:	9309      	str	r3, [sp, #36]	; 0x24
 800bd0e:	2300      	movs	r3, #0
 800bd10:	930a      	str	r3, [sp, #40]	; 0x28
 800bd12:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bd14:	2b09      	cmp	r3, #9
 800bd16:	f200 808d 	bhi.w	800be34 <_dtoa_r+0x2ec>
 800bd1a:	2b05      	cmp	r3, #5
 800bd1c:	bfc4      	itt	gt
 800bd1e:	3b04      	subgt	r3, #4
 800bd20:	9322      	strgt	r3, [sp, #136]	; 0x88
 800bd22:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bd24:	f1a3 0302 	sub.w	r3, r3, #2
 800bd28:	bfcc      	ite	gt
 800bd2a:	2400      	movgt	r4, #0
 800bd2c:	2401      	movle	r4, #1
 800bd2e:	2b03      	cmp	r3, #3
 800bd30:	f200 808c 	bhi.w	800be4c <_dtoa_r+0x304>
 800bd34:	e8df f003 	tbb	[pc, r3]
 800bd38:	5b4d4f2d 	.word	0x5b4d4f2d
 800bd3c:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800bd40:	441c      	add	r4, r3
 800bd42:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800bd46:	2b20      	cmp	r3, #32
 800bd48:	bfc3      	ittte	gt
 800bd4a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bd4e:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800bd52:	fa09 f303 	lslgt.w	r3, r9, r3
 800bd56:	f1c3 0320 	rsble	r3, r3, #32
 800bd5a:	bfc6      	itte	gt
 800bd5c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800bd60:	4318      	orrgt	r0, r3
 800bd62:	fa06 f003 	lslle.w	r0, r6, r3
 800bd66:	f7f4 fba5 	bl	80004b4 <__aeabi_ui2d>
 800bd6a:	2301      	movs	r3, #1
 800bd6c:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800bd70:	3c01      	subs	r4, #1
 800bd72:	9313      	str	r3, [sp, #76]	; 0x4c
 800bd74:	e770      	b.n	800bc58 <_dtoa_r+0x110>
 800bd76:	2301      	movs	r3, #1
 800bd78:	e7b3      	b.n	800bce2 <_dtoa_r+0x19a>
 800bd7a:	900f      	str	r0, [sp, #60]	; 0x3c
 800bd7c:	e7b2      	b.n	800bce4 <_dtoa_r+0x19c>
 800bd7e:	9b06      	ldr	r3, [sp, #24]
 800bd80:	eba3 030a 	sub.w	r3, r3, sl
 800bd84:	9306      	str	r3, [sp, #24]
 800bd86:	f1ca 0300 	rsb	r3, sl, #0
 800bd8a:	930a      	str	r3, [sp, #40]	; 0x28
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	930e      	str	r3, [sp, #56]	; 0x38
 800bd90:	e7bf      	b.n	800bd12 <_dtoa_r+0x1ca>
 800bd92:	2300      	movs	r3, #0
 800bd94:	930b      	str	r3, [sp, #44]	; 0x2c
 800bd96:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	dc5a      	bgt.n	800be52 <_dtoa_r+0x30a>
 800bd9c:	f04f 0901 	mov.w	r9, #1
 800bda0:	f8cd 9020 	str.w	r9, [sp, #32]
 800bda4:	464b      	mov	r3, r9
 800bda6:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800bdaa:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800bdac:	2200      	movs	r2, #0
 800bdae:	6042      	str	r2, [r0, #4]
 800bdb0:	2204      	movs	r2, #4
 800bdb2:	f102 0614 	add.w	r6, r2, #20
 800bdb6:	429e      	cmp	r6, r3
 800bdb8:	6841      	ldr	r1, [r0, #4]
 800bdba:	d950      	bls.n	800be5e <_dtoa_r+0x316>
 800bdbc:	4628      	mov	r0, r5
 800bdbe:	f000 fdab 	bl	800c918 <_Balloc>
 800bdc2:	9003      	str	r0, [sp, #12]
 800bdc4:	2800      	cmp	r0, #0
 800bdc6:	d14e      	bne.n	800be66 <_dtoa_r+0x31e>
 800bdc8:	4b19      	ldr	r3, [pc, #100]	; (800be30 <_dtoa_r+0x2e8>)
 800bdca:	4602      	mov	r2, r0
 800bdcc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bdd0:	e6ce      	b.n	800bb70 <_dtoa_r+0x28>
 800bdd2:	2301      	movs	r3, #1
 800bdd4:	e7de      	b.n	800bd94 <_dtoa_r+0x24c>
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	930b      	str	r3, [sp, #44]	; 0x2c
 800bdda:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bddc:	eb0a 0903 	add.w	r9, sl, r3
 800bde0:	f109 0301 	add.w	r3, r9, #1
 800bde4:	2b01      	cmp	r3, #1
 800bde6:	9308      	str	r3, [sp, #32]
 800bde8:	bfb8      	it	lt
 800bdea:	2301      	movlt	r3, #1
 800bdec:	e7dd      	b.n	800bdaa <_dtoa_r+0x262>
 800bdee:	2301      	movs	r3, #1
 800bdf0:	e7f2      	b.n	800bdd8 <_dtoa_r+0x290>
 800bdf2:	bf00      	nop
 800bdf4:	f3af 8000 	nop.w
 800bdf8:	636f4361 	.word	0x636f4361
 800bdfc:	3fd287a7 	.word	0x3fd287a7
 800be00:	8b60c8b3 	.word	0x8b60c8b3
 800be04:	3fc68a28 	.word	0x3fc68a28
 800be08:	509f79fb 	.word	0x509f79fb
 800be0c:	3fd34413 	.word	0x3fd34413
 800be10:	0800e370 	.word	0x0800e370
 800be14:	0800e42d 	.word	0x0800e42d
 800be18:	7ff00000 	.word	0x7ff00000
 800be1c:	0800e429 	.word	0x0800e429
 800be20:	0800e420 	.word	0x0800e420
 800be24:	0800e34d 	.word	0x0800e34d
 800be28:	3ff80000 	.word	0x3ff80000
 800be2c:	0800e520 	.word	0x0800e520
 800be30:	0800e488 	.word	0x0800e488
 800be34:	2401      	movs	r4, #1
 800be36:	2300      	movs	r3, #0
 800be38:	9322      	str	r3, [sp, #136]	; 0x88
 800be3a:	940b      	str	r4, [sp, #44]	; 0x2c
 800be3c:	f04f 39ff 	mov.w	r9, #4294967295
 800be40:	2200      	movs	r2, #0
 800be42:	f8cd 9020 	str.w	r9, [sp, #32]
 800be46:	2312      	movs	r3, #18
 800be48:	9223      	str	r2, [sp, #140]	; 0x8c
 800be4a:	e7ae      	b.n	800bdaa <_dtoa_r+0x262>
 800be4c:	2301      	movs	r3, #1
 800be4e:	930b      	str	r3, [sp, #44]	; 0x2c
 800be50:	e7f4      	b.n	800be3c <_dtoa_r+0x2f4>
 800be52:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800be56:	f8cd 9020 	str.w	r9, [sp, #32]
 800be5a:	464b      	mov	r3, r9
 800be5c:	e7a5      	b.n	800bdaa <_dtoa_r+0x262>
 800be5e:	3101      	adds	r1, #1
 800be60:	6041      	str	r1, [r0, #4]
 800be62:	0052      	lsls	r2, r2, #1
 800be64:	e7a5      	b.n	800bdb2 <_dtoa_r+0x26a>
 800be66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800be68:	9a03      	ldr	r2, [sp, #12]
 800be6a:	601a      	str	r2, [r3, #0]
 800be6c:	9b08      	ldr	r3, [sp, #32]
 800be6e:	2b0e      	cmp	r3, #14
 800be70:	f200 80a8 	bhi.w	800bfc4 <_dtoa_r+0x47c>
 800be74:	2c00      	cmp	r4, #0
 800be76:	f000 80a5 	beq.w	800bfc4 <_dtoa_r+0x47c>
 800be7a:	f1ba 0f00 	cmp.w	sl, #0
 800be7e:	dd34      	ble.n	800beea <_dtoa_r+0x3a2>
 800be80:	4a9a      	ldr	r2, [pc, #616]	; (800c0ec <_dtoa_r+0x5a4>)
 800be82:	f00a 030f 	and.w	r3, sl, #15
 800be86:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800be8a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800be8e:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800be92:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800be96:	ea4f 142a 	mov.w	r4, sl, asr #4
 800be9a:	d016      	beq.n	800beca <_dtoa_r+0x382>
 800be9c:	4b94      	ldr	r3, [pc, #592]	; (800c0f0 <_dtoa_r+0x5a8>)
 800be9e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bea2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bea6:	f7f4 fca9 	bl	80007fc <__aeabi_ddiv>
 800beaa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800beae:	f004 040f 	and.w	r4, r4, #15
 800beb2:	2703      	movs	r7, #3
 800beb4:	4e8e      	ldr	r6, [pc, #568]	; (800c0f0 <_dtoa_r+0x5a8>)
 800beb6:	b954      	cbnz	r4, 800bece <_dtoa_r+0x386>
 800beb8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800bebc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bec0:	f7f4 fc9c 	bl	80007fc <__aeabi_ddiv>
 800bec4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bec8:	e029      	b.n	800bf1e <_dtoa_r+0x3d6>
 800beca:	2702      	movs	r7, #2
 800becc:	e7f2      	b.n	800beb4 <_dtoa_r+0x36c>
 800bece:	07e1      	lsls	r1, r4, #31
 800bed0:	d508      	bpl.n	800bee4 <_dtoa_r+0x39c>
 800bed2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bed6:	e9d6 2300 	ldrd	r2, r3, [r6]
 800beda:	f7f4 fb65 	bl	80005a8 <__aeabi_dmul>
 800bede:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bee2:	3701      	adds	r7, #1
 800bee4:	1064      	asrs	r4, r4, #1
 800bee6:	3608      	adds	r6, #8
 800bee8:	e7e5      	b.n	800beb6 <_dtoa_r+0x36e>
 800beea:	f000 80a5 	beq.w	800c038 <_dtoa_r+0x4f0>
 800beee:	f1ca 0400 	rsb	r4, sl, #0
 800bef2:	4b7e      	ldr	r3, [pc, #504]	; (800c0ec <_dtoa_r+0x5a4>)
 800bef4:	4e7e      	ldr	r6, [pc, #504]	; (800c0f0 <_dtoa_r+0x5a8>)
 800bef6:	f004 020f 	and.w	r2, r4, #15
 800befa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800befe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf02:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bf06:	f7f4 fb4f 	bl	80005a8 <__aeabi_dmul>
 800bf0a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bf0e:	1124      	asrs	r4, r4, #4
 800bf10:	2300      	movs	r3, #0
 800bf12:	2702      	movs	r7, #2
 800bf14:	2c00      	cmp	r4, #0
 800bf16:	f040 8084 	bne.w	800c022 <_dtoa_r+0x4da>
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d1d2      	bne.n	800bec4 <_dtoa_r+0x37c>
 800bf1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	f000 808b 	beq.w	800c03c <_dtoa_r+0x4f4>
 800bf26:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800bf2a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800bf2e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bf32:	4b70      	ldr	r3, [pc, #448]	; (800c0f4 <_dtoa_r+0x5ac>)
 800bf34:	2200      	movs	r2, #0
 800bf36:	f7f4 fda9 	bl	8000a8c <__aeabi_dcmplt>
 800bf3a:	2800      	cmp	r0, #0
 800bf3c:	d07e      	beq.n	800c03c <_dtoa_r+0x4f4>
 800bf3e:	9b08      	ldr	r3, [sp, #32]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d07b      	beq.n	800c03c <_dtoa_r+0x4f4>
 800bf44:	f1b9 0f00 	cmp.w	r9, #0
 800bf48:	dd38      	ble.n	800bfbc <_dtoa_r+0x474>
 800bf4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bf4e:	4b6a      	ldr	r3, [pc, #424]	; (800c0f8 <_dtoa_r+0x5b0>)
 800bf50:	2200      	movs	r2, #0
 800bf52:	f7f4 fb29 	bl	80005a8 <__aeabi_dmul>
 800bf56:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bf5a:	f10a 38ff 	add.w	r8, sl, #4294967295
 800bf5e:	3701      	adds	r7, #1
 800bf60:	464c      	mov	r4, r9
 800bf62:	4638      	mov	r0, r7
 800bf64:	f7f4 fab6 	bl	80004d4 <__aeabi_i2d>
 800bf68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf6c:	f7f4 fb1c 	bl	80005a8 <__aeabi_dmul>
 800bf70:	4b62      	ldr	r3, [pc, #392]	; (800c0fc <_dtoa_r+0x5b4>)
 800bf72:	2200      	movs	r2, #0
 800bf74:	f7f4 f962 	bl	800023c <__adddf3>
 800bf78:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800bf7c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800bf80:	9611      	str	r6, [sp, #68]	; 0x44
 800bf82:	2c00      	cmp	r4, #0
 800bf84:	d15d      	bne.n	800c042 <_dtoa_r+0x4fa>
 800bf86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bf8a:	4b5d      	ldr	r3, [pc, #372]	; (800c100 <_dtoa_r+0x5b8>)
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	f7f4 f953 	bl	8000238 <__aeabi_dsub>
 800bf92:	4602      	mov	r2, r0
 800bf94:	460b      	mov	r3, r1
 800bf96:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bf9a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bf9c:	4633      	mov	r3, r6
 800bf9e:	f7f4 fd93 	bl	8000ac8 <__aeabi_dcmpgt>
 800bfa2:	2800      	cmp	r0, #0
 800bfa4:	f040 829c 	bne.w	800c4e0 <_dtoa_r+0x998>
 800bfa8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bfac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bfae:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800bfb2:	f7f4 fd6b 	bl	8000a8c <__aeabi_dcmplt>
 800bfb6:	2800      	cmp	r0, #0
 800bfb8:	f040 8290 	bne.w	800c4dc <_dtoa_r+0x994>
 800bfbc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800bfc0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800bfc4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	f2c0 8152 	blt.w	800c270 <_dtoa_r+0x728>
 800bfcc:	f1ba 0f0e 	cmp.w	sl, #14
 800bfd0:	f300 814e 	bgt.w	800c270 <_dtoa_r+0x728>
 800bfd4:	4b45      	ldr	r3, [pc, #276]	; (800c0ec <_dtoa_r+0x5a4>)
 800bfd6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bfda:	e9d3 3400 	ldrd	r3, r4, [r3]
 800bfde:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800bfe2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	f280 80db 	bge.w	800c1a0 <_dtoa_r+0x658>
 800bfea:	9b08      	ldr	r3, [sp, #32]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	f300 80d7 	bgt.w	800c1a0 <_dtoa_r+0x658>
 800bff2:	f040 8272 	bne.w	800c4da <_dtoa_r+0x992>
 800bff6:	4b42      	ldr	r3, [pc, #264]	; (800c100 <_dtoa_r+0x5b8>)
 800bff8:	2200      	movs	r2, #0
 800bffa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bffe:	f7f4 fad3 	bl	80005a8 <__aeabi_dmul>
 800c002:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c006:	f7f4 fd55 	bl	8000ab4 <__aeabi_dcmpge>
 800c00a:	9c08      	ldr	r4, [sp, #32]
 800c00c:	4626      	mov	r6, r4
 800c00e:	2800      	cmp	r0, #0
 800c010:	f040 8248 	bne.w	800c4a4 <_dtoa_r+0x95c>
 800c014:	9f03      	ldr	r7, [sp, #12]
 800c016:	2331      	movs	r3, #49	; 0x31
 800c018:	f807 3b01 	strb.w	r3, [r7], #1
 800c01c:	f10a 0a01 	add.w	sl, sl, #1
 800c020:	e244      	b.n	800c4ac <_dtoa_r+0x964>
 800c022:	07e2      	lsls	r2, r4, #31
 800c024:	d505      	bpl.n	800c032 <_dtoa_r+0x4ea>
 800c026:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c02a:	f7f4 fabd 	bl	80005a8 <__aeabi_dmul>
 800c02e:	3701      	adds	r7, #1
 800c030:	2301      	movs	r3, #1
 800c032:	1064      	asrs	r4, r4, #1
 800c034:	3608      	adds	r6, #8
 800c036:	e76d      	b.n	800bf14 <_dtoa_r+0x3cc>
 800c038:	2702      	movs	r7, #2
 800c03a:	e770      	b.n	800bf1e <_dtoa_r+0x3d6>
 800c03c:	9c08      	ldr	r4, [sp, #32]
 800c03e:	46d0      	mov	r8, sl
 800c040:	e78f      	b.n	800bf62 <_dtoa_r+0x41a>
 800c042:	9903      	ldr	r1, [sp, #12]
 800c044:	4b29      	ldr	r3, [pc, #164]	; (800c0ec <_dtoa_r+0x5a4>)
 800c046:	4421      	add	r1, r4
 800c048:	9112      	str	r1, [sp, #72]	; 0x48
 800c04a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c04c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c050:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800c054:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c058:	2900      	cmp	r1, #0
 800c05a:	d055      	beq.n	800c108 <_dtoa_r+0x5c0>
 800c05c:	4929      	ldr	r1, [pc, #164]	; (800c104 <_dtoa_r+0x5bc>)
 800c05e:	2000      	movs	r0, #0
 800c060:	f7f4 fbcc 	bl	80007fc <__aeabi_ddiv>
 800c064:	463b      	mov	r3, r7
 800c066:	4632      	mov	r2, r6
 800c068:	f7f4 f8e6 	bl	8000238 <__aeabi_dsub>
 800c06c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c070:	9f03      	ldr	r7, [sp, #12]
 800c072:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c076:	f7f4 fd47 	bl	8000b08 <__aeabi_d2iz>
 800c07a:	4604      	mov	r4, r0
 800c07c:	f7f4 fa2a 	bl	80004d4 <__aeabi_i2d>
 800c080:	4602      	mov	r2, r0
 800c082:	460b      	mov	r3, r1
 800c084:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c088:	f7f4 f8d6 	bl	8000238 <__aeabi_dsub>
 800c08c:	3430      	adds	r4, #48	; 0x30
 800c08e:	4602      	mov	r2, r0
 800c090:	460b      	mov	r3, r1
 800c092:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c096:	f807 4b01 	strb.w	r4, [r7], #1
 800c09a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c09e:	f7f4 fcf5 	bl	8000a8c <__aeabi_dcmplt>
 800c0a2:	2800      	cmp	r0, #0
 800c0a4:	d174      	bne.n	800c190 <_dtoa_r+0x648>
 800c0a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c0aa:	4912      	ldr	r1, [pc, #72]	; (800c0f4 <_dtoa_r+0x5ac>)
 800c0ac:	2000      	movs	r0, #0
 800c0ae:	f7f4 f8c3 	bl	8000238 <__aeabi_dsub>
 800c0b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c0b6:	f7f4 fce9 	bl	8000a8c <__aeabi_dcmplt>
 800c0ba:	2800      	cmp	r0, #0
 800c0bc:	f040 80b7 	bne.w	800c22e <_dtoa_r+0x6e6>
 800c0c0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c0c2:	429f      	cmp	r7, r3
 800c0c4:	f43f af7a 	beq.w	800bfbc <_dtoa_r+0x474>
 800c0c8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c0cc:	4b0a      	ldr	r3, [pc, #40]	; (800c0f8 <_dtoa_r+0x5b0>)
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	f7f4 fa6a 	bl	80005a8 <__aeabi_dmul>
 800c0d4:	4b08      	ldr	r3, [pc, #32]	; (800c0f8 <_dtoa_r+0x5b0>)
 800c0d6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c0da:	2200      	movs	r2, #0
 800c0dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c0e0:	f7f4 fa62 	bl	80005a8 <__aeabi_dmul>
 800c0e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c0e8:	e7c3      	b.n	800c072 <_dtoa_r+0x52a>
 800c0ea:	bf00      	nop
 800c0ec:	0800e520 	.word	0x0800e520
 800c0f0:	0800e4f8 	.word	0x0800e4f8
 800c0f4:	3ff00000 	.word	0x3ff00000
 800c0f8:	40240000 	.word	0x40240000
 800c0fc:	401c0000 	.word	0x401c0000
 800c100:	40140000 	.word	0x40140000
 800c104:	3fe00000 	.word	0x3fe00000
 800c108:	4630      	mov	r0, r6
 800c10a:	4639      	mov	r1, r7
 800c10c:	f7f4 fa4c 	bl	80005a8 <__aeabi_dmul>
 800c110:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800c114:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c116:	9c03      	ldr	r4, [sp, #12]
 800c118:	9314      	str	r3, [sp, #80]	; 0x50
 800c11a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c11e:	f7f4 fcf3 	bl	8000b08 <__aeabi_d2iz>
 800c122:	9015      	str	r0, [sp, #84]	; 0x54
 800c124:	f7f4 f9d6 	bl	80004d4 <__aeabi_i2d>
 800c128:	4602      	mov	r2, r0
 800c12a:	460b      	mov	r3, r1
 800c12c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c130:	f7f4 f882 	bl	8000238 <__aeabi_dsub>
 800c134:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c136:	3330      	adds	r3, #48	; 0x30
 800c138:	f804 3b01 	strb.w	r3, [r4], #1
 800c13c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c13e:	429c      	cmp	r4, r3
 800c140:	4606      	mov	r6, r0
 800c142:	460f      	mov	r7, r1
 800c144:	f04f 0200 	mov.w	r2, #0
 800c148:	d124      	bne.n	800c194 <_dtoa_r+0x64c>
 800c14a:	4ba4      	ldr	r3, [pc, #656]	; (800c3dc <_dtoa_r+0x894>)
 800c14c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c150:	f7f4 f874 	bl	800023c <__adddf3>
 800c154:	4602      	mov	r2, r0
 800c156:	460b      	mov	r3, r1
 800c158:	4630      	mov	r0, r6
 800c15a:	4639      	mov	r1, r7
 800c15c:	f7f4 fcb4 	bl	8000ac8 <__aeabi_dcmpgt>
 800c160:	2800      	cmp	r0, #0
 800c162:	d163      	bne.n	800c22c <_dtoa_r+0x6e4>
 800c164:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c168:	499c      	ldr	r1, [pc, #624]	; (800c3dc <_dtoa_r+0x894>)
 800c16a:	2000      	movs	r0, #0
 800c16c:	f7f4 f864 	bl	8000238 <__aeabi_dsub>
 800c170:	4602      	mov	r2, r0
 800c172:	460b      	mov	r3, r1
 800c174:	4630      	mov	r0, r6
 800c176:	4639      	mov	r1, r7
 800c178:	f7f4 fc88 	bl	8000a8c <__aeabi_dcmplt>
 800c17c:	2800      	cmp	r0, #0
 800c17e:	f43f af1d 	beq.w	800bfbc <_dtoa_r+0x474>
 800c182:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800c184:	1e7b      	subs	r3, r7, #1
 800c186:	9314      	str	r3, [sp, #80]	; 0x50
 800c188:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800c18c:	2b30      	cmp	r3, #48	; 0x30
 800c18e:	d0f8      	beq.n	800c182 <_dtoa_r+0x63a>
 800c190:	46c2      	mov	sl, r8
 800c192:	e03b      	b.n	800c20c <_dtoa_r+0x6c4>
 800c194:	4b92      	ldr	r3, [pc, #584]	; (800c3e0 <_dtoa_r+0x898>)
 800c196:	f7f4 fa07 	bl	80005a8 <__aeabi_dmul>
 800c19a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c19e:	e7bc      	b.n	800c11a <_dtoa_r+0x5d2>
 800c1a0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800c1a4:	9f03      	ldr	r7, [sp, #12]
 800c1a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c1aa:	4640      	mov	r0, r8
 800c1ac:	4649      	mov	r1, r9
 800c1ae:	f7f4 fb25 	bl	80007fc <__aeabi_ddiv>
 800c1b2:	f7f4 fca9 	bl	8000b08 <__aeabi_d2iz>
 800c1b6:	4604      	mov	r4, r0
 800c1b8:	f7f4 f98c 	bl	80004d4 <__aeabi_i2d>
 800c1bc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c1c0:	f7f4 f9f2 	bl	80005a8 <__aeabi_dmul>
 800c1c4:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800c1c8:	4602      	mov	r2, r0
 800c1ca:	460b      	mov	r3, r1
 800c1cc:	4640      	mov	r0, r8
 800c1ce:	4649      	mov	r1, r9
 800c1d0:	f7f4 f832 	bl	8000238 <__aeabi_dsub>
 800c1d4:	f807 6b01 	strb.w	r6, [r7], #1
 800c1d8:	9e03      	ldr	r6, [sp, #12]
 800c1da:	f8dd c020 	ldr.w	ip, [sp, #32]
 800c1de:	1bbe      	subs	r6, r7, r6
 800c1e0:	45b4      	cmp	ip, r6
 800c1e2:	4602      	mov	r2, r0
 800c1e4:	460b      	mov	r3, r1
 800c1e6:	d136      	bne.n	800c256 <_dtoa_r+0x70e>
 800c1e8:	f7f4 f828 	bl	800023c <__adddf3>
 800c1ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c1f0:	4680      	mov	r8, r0
 800c1f2:	4689      	mov	r9, r1
 800c1f4:	f7f4 fc68 	bl	8000ac8 <__aeabi_dcmpgt>
 800c1f8:	bb58      	cbnz	r0, 800c252 <_dtoa_r+0x70a>
 800c1fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c1fe:	4640      	mov	r0, r8
 800c200:	4649      	mov	r1, r9
 800c202:	f7f4 fc39 	bl	8000a78 <__aeabi_dcmpeq>
 800c206:	b108      	cbz	r0, 800c20c <_dtoa_r+0x6c4>
 800c208:	07e1      	lsls	r1, r4, #31
 800c20a:	d422      	bmi.n	800c252 <_dtoa_r+0x70a>
 800c20c:	4628      	mov	r0, r5
 800c20e:	4659      	mov	r1, fp
 800c210:	f000 fbc2 	bl	800c998 <_Bfree>
 800c214:	2300      	movs	r3, #0
 800c216:	703b      	strb	r3, [r7, #0]
 800c218:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c21a:	f10a 0001 	add.w	r0, sl, #1
 800c21e:	6018      	str	r0, [r3, #0]
 800c220:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c222:	2b00      	cmp	r3, #0
 800c224:	f43f acdd 	beq.w	800bbe2 <_dtoa_r+0x9a>
 800c228:	601f      	str	r7, [r3, #0]
 800c22a:	e4da      	b.n	800bbe2 <_dtoa_r+0x9a>
 800c22c:	4627      	mov	r7, r4
 800c22e:	463b      	mov	r3, r7
 800c230:	461f      	mov	r7, r3
 800c232:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c236:	2a39      	cmp	r2, #57	; 0x39
 800c238:	d107      	bne.n	800c24a <_dtoa_r+0x702>
 800c23a:	9a03      	ldr	r2, [sp, #12]
 800c23c:	429a      	cmp	r2, r3
 800c23e:	d1f7      	bne.n	800c230 <_dtoa_r+0x6e8>
 800c240:	9903      	ldr	r1, [sp, #12]
 800c242:	2230      	movs	r2, #48	; 0x30
 800c244:	f108 0801 	add.w	r8, r8, #1
 800c248:	700a      	strb	r2, [r1, #0]
 800c24a:	781a      	ldrb	r2, [r3, #0]
 800c24c:	3201      	adds	r2, #1
 800c24e:	701a      	strb	r2, [r3, #0]
 800c250:	e79e      	b.n	800c190 <_dtoa_r+0x648>
 800c252:	46d0      	mov	r8, sl
 800c254:	e7eb      	b.n	800c22e <_dtoa_r+0x6e6>
 800c256:	4b62      	ldr	r3, [pc, #392]	; (800c3e0 <_dtoa_r+0x898>)
 800c258:	2200      	movs	r2, #0
 800c25a:	f7f4 f9a5 	bl	80005a8 <__aeabi_dmul>
 800c25e:	2200      	movs	r2, #0
 800c260:	2300      	movs	r3, #0
 800c262:	4680      	mov	r8, r0
 800c264:	4689      	mov	r9, r1
 800c266:	f7f4 fc07 	bl	8000a78 <__aeabi_dcmpeq>
 800c26a:	2800      	cmp	r0, #0
 800c26c:	d09b      	beq.n	800c1a6 <_dtoa_r+0x65e>
 800c26e:	e7cd      	b.n	800c20c <_dtoa_r+0x6c4>
 800c270:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c272:	2a00      	cmp	r2, #0
 800c274:	f000 80d0 	beq.w	800c418 <_dtoa_r+0x8d0>
 800c278:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800c27a:	2a01      	cmp	r2, #1
 800c27c:	f300 80b2 	bgt.w	800c3e4 <_dtoa_r+0x89c>
 800c280:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c282:	2a00      	cmp	r2, #0
 800c284:	f000 80a6 	beq.w	800c3d4 <_dtoa_r+0x88c>
 800c288:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c28c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c28e:	9f06      	ldr	r7, [sp, #24]
 800c290:	9a06      	ldr	r2, [sp, #24]
 800c292:	441a      	add	r2, r3
 800c294:	9206      	str	r2, [sp, #24]
 800c296:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c298:	2101      	movs	r1, #1
 800c29a:	441a      	add	r2, r3
 800c29c:	4628      	mov	r0, r5
 800c29e:	9209      	str	r2, [sp, #36]	; 0x24
 800c2a0:	f000 fc30 	bl	800cb04 <__i2b>
 800c2a4:	4606      	mov	r6, r0
 800c2a6:	2f00      	cmp	r7, #0
 800c2a8:	dd0c      	ble.n	800c2c4 <_dtoa_r+0x77c>
 800c2aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	dd09      	ble.n	800c2c4 <_dtoa_r+0x77c>
 800c2b0:	42bb      	cmp	r3, r7
 800c2b2:	9a06      	ldr	r2, [sp, #24]
 800c2b4:	bfa8      	it	ge
 800c2b6:	463b      	movge	r3, r7
 800c2b8:	1ad2      	subs	r2, r2, r3
 800c2ba:	9206      	str	r2, [sp, #24]
 800c2bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c2be:	1aff      	subs	r7, r7, r3
 800c2c0:	1ad3      	subs	r3, r2, r3
 800c2c2:	9309      	str	r3, [sp, #36]	; 0x24
 800c2c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2c6:	b1f3      	cbz	r3, 800c306 <_dtoa_r+0x7be>
 800c2c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	f000 80a8 	beq.w	800c420 <_dtoa_r+0x8d8>
 800c2d0:	2c00      	cmp	r4, #0
 800c2d2:	dd10      	ble.n	800c2f6 <_dtoa_r+0x7ae>
 800c2d4:	4631      	mov	r1, r6
 800c2d6:	4622      	mov	r2, r4
 800c2d8:	4628      	mov	r0, r5
 800c2da:	f000 fcd1 	bl	800cc80 <__pow5mult>
 800c2de:	465a      	mov	r2, fp
 800c2e0:	4601      	mov	r1, r0
 800c2e2:	4606      	mov	r6, r0
 800c2e4:	4628      	mov	r0, r5
 800c2e6:	f000 fc23 	bl	800cb30 <__multiply>
 800c2ea:	4659      	mov	r1, fp
 800c2ec:	4680      	mov	r8, r0
 800c2ee:	4628      	mov	r0, r5
 800c2f0:	f000 fb52 	bl	800c998 <_Bfree>
 800c2f4:	46c3      	mov	fp, r8
 800c2f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2f8:	1b1a      	subs	r2, r3, r4
 800c2fa:	d004      	beq.n	800c306 <_dtoa_r+0x7be>
 800c2fc:	4659      	mov	r1, fp
 800c2fe:	4628      	mov	r0, r5
 800c300:	f000 fcbe 	bl	800cc80 <__pow5mult>
 800c304:	4683      	mov	fp, r0
 800c306:	2101      	movs	r1, #1
 800c308:	4628      	mov	r0, r5
 800c30a:	f000 fbfb 	bl	800cb04 <__i2b>
 800c30e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c310:	2b00      	cmp	r3, #0
 800c312:	4604      	mov	r4, r0
 800c314:	f340 8086 	ble.w	800c424 <_dtoa_r+0x8dc>
 800c318:	461a      	mov	r2, r3
 800c31a:	4601      	mov	r1, r0
 800c31c:	4628      	mov	r0, r5
 800c31e:	f000 fcaf 	bl	800cc80 <__pow5mult>
 800c322:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c324:	2b01      	cmp	r3, #1
 800c326:	4604      	mov	r4, r0
 800c328:	dd7f      	ble.n	800c42a <_dtoa_r+0x8e2>
 800c32a:	f04f 0800 	mov.w	r8, #0
 800c32e:	6923      	ldr	r3, [r4, #16]
 800c330:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c334:	6918      	ldr	r0, [r3, #16]
 800c336:	f000 fb97 	bl	800ca68 <__hi0bits>
 800c33a:	f1c0 0020 	rsb	r0, r0, #32
 800c33e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c340:	4418      	add	r0, r3
 800c342:	f010 001f 	ands.w	r0, r0, #31
 800c346:	f000 8092 	beq.w	800c46e <_dtoa_r+0x926>
 800c34a:	f1c0 0320 	rsb	r3, r0, #32
 800c34e:	2b04      	cmp	r3, #4
 800c350:	f340 808a 	ble.w	800c468 <_dtoa_r+0x920>
 800c354:	f1c0 001c 	rsb	r0, r0, #28
 800c358:	9b06      	ldr	r3, [sp, #24]
 800c35a:	4403      	add	r3, r0
 800c35c:	9306      	str	r3, [sp, #24]
 800c35e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c360:	4403      	add	r3, r0
 800c362:	4407      	add	r7, r0
 800c364:	9309      	str	r3, [sp, #36]	; 0x24
 800c366:	9b06      	ldr	r3, [sp, #24]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	dd05      	ble.n	800c378 <_dtoa_r+0x830>
 800c36c:	4659      	mov	r1, fp
 800c36e:	461a      	mov	r2, r3
 800c370:	4628      	mov	r0, r5
 800c372:	f000 fcdf 	bl	800cd34 <__lshift>
 800c376:	4683      	mov	fp, r0
 800c378:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	dd05      	ble.n	800c38a <_dtoa_r+0x842>
 800c37e:	4621      	mov	r1, r4
 800c380:	461a      	mov	r2, r3
 800c382:	4628      	mov	r0, r5
 800c384:	f000 fcd6 	bl	800cd34 <__lshift>
 800c388:	4604      	mov	r4, r0
 800c38a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d070      	beq.n	800c472 <_dtoa_r+0x92a>
 800c390:	4621      	mov	r1, r4
 800c392:	4658      	mov	r0, fp
 800c394:	f000 fd3e 	bl	800ce14 <__mcmp>
 800c398:	2800      	cmp	r0, #0
 800c39a:	da6a      	bge.n	800c472 <_dtoa_r+0x92a>
 800c39c:	2300      	movs	r3, #0
 800c39e:	4659      	mov	r1, fp
 800c3a0:	220a      	movs	r2, #10
 800c3a2:	4628      	mov	r0, r5
 800c3a4:	f000 fb1a 	bl	800c9dc <__multadd>
 800c3a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c3aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c3ae:	4683      	mov	fp, r0
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	f000 8194 	beq.w	800c6de <_dtoa_r+0xb96>
 800c3b6:	4631      	mov	r1, r6
 800c3b8:	2300      	movs	r3, #0
 800c3ba:	220a      	movs	r2, #10
 800c3bc:	4628      	mov	r0, r5
 800c3be:	f000 fb0d 	bl	800c9dc <__multadd>
 800c3c2:	f1b9 0f00 	cmp.w	r9, #0
 800c3c6:	4606      	mov	r6, r0
 800c3c8:	f300 8093 	bgt.w	800c4f2 <_dtoa_r+0x9aa>
 800c3cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c3ce:	2b02      	cmp	r3, #2
 800c3d0:	dc57      	bgt.n	800c482 <_dtoa_r+0x93a>
 800c3d2:	e08e      	b.n	800c4f2 <_dtoa_r+0x9aa>
 800c3d4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800c3d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c3da:	e757      	b.n	800c28c <_dtoa_r+0x744>
 800c3dc:	3fe00000 	.word	0x3fe00000
 800c3e0:	40240000 	.word	0x40240000
 800c3e4:	9b08      	ldr	r3, [sp, #32]
 800c3e6:	1e5c      	subs	r4, r3, #1
 800c3e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3ea:	42a3      	cmp	r3, r4
 800c3ec:	bfbf      	itttt	lt
 800c3ee:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c3f0:	940a      	strlt	r4, [sp, #40]	; 0x28
 800c3f2:	1ae2      	sublt	r2, r4, r3
 800c3f4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800c3f6:	bfb6      	itet	lt
 800c3f8:	189b      	addlt	r3, r3, r2
 800c3fa:	1b1c      	subge	r4, r3, r4
 800c3fc:	930e      	strlt	r3, [sp, #56]	; 0x38
 800c3fe:	9b08      	ldr	r3, [sp, #32]
 800c400:	bfb8      	it	lt
 800c402:	2400      	movlt	r4, #0
 800c404:	2b00      	cmp	r3, #0
 800c406:	bfb9      	ittee	lt
 800c408:	9b06      	ldrlt	r3, [sp, #24]
 800c40a:	9a08      	ldrlt	r2, [sp, #32]
 800c40c:	9f06      	ldrge	r7, [sp, #24]
 800c40e:	9b08      	ldrge	r3, [sp, #32]
 800c410:	bfbc      	itt	lt
 800c412:	1a9f      	sublt	r7, r3, r2
 800c414:	2300      	movlt	r3, #0
 800c416:	e73b      	b.n	800c290 <_dtoa_r+0x748>
 800c418:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800c41a:	9f06      	ldr	r7, [sp, #24]
 800c41c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800c41e:	e742      	b.n	800c2a6 <_dtoa_r+0x75e>
 800c420:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c422:	e76b      	b.n	800c2fc <_dtoa_r+0x7b4>
 800c424:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c426:	2b01      	cmp	r3, #1
 800c428:	dc19      	bgt.n	800c45e <_dtoa_r+0x916>
 800c42a:	9b04      	ldr	r3, [sp, #16]
 800c42c:	b9bb      	cbnz	r3, 800c45e <_dtoa_r+0x916>
 800c42e:	9b05      	ldr	r3, [sp, #20]
 800c430:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c434:	b99b      	cbnz	r3, 800c45e <_dtoa_r+0x916>
 800c436:	9b05      	ldr	r3, [sp, #20]
 800c438:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c43c:	0d1b      	lsrs	r3, r3, #20
 800c43e:	051b      	lsls	r3, r3, #20
 800c440:	b183      	cbz	r3, 800c464 <_dtoa_r+0x91c>
 800c442:	9b06      	ldr	r3, [sp, #24]
 800c444:	3301      	adds	r3, #1
 800c446:	9306      	str	r3, [sp, #24]
 800c448:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c44a:	3301      	adds	r3, #1
 800c44c:	9309      	str	r3, [sp, #36]	; 0x24
 800c44e:	f04f 0801 	mov.w	r8, #1
 800c452:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c454:	2b00      	cmp	r3, #0
 800c456:	f47f af6a 	bne.w	800c32e <_dtoa_r+0x7e6>
 800c45a:	2001      	movs	r0, #1
 800c45c:	e76f      	b.n	800c33e <_dtoa_r+0x7f6>
 800c45e:	f04f 0800 	mov.w	r8, #0
 800c462:	e7f6      	b.n	800c452 <_dtoa_r+0x90a>
 800c464:	4698      	mov	r8, r3
 800c466:	e7f4      	b.n	800c452 <_dtoa_r+0x90a>
 800c468:	f43f af7d 	beq.w	800c366 <_dtoa_r+0x81e>
 800c46c:	4618      	mov	r0, r3
 800c46e:	301c      	adds	r0, #28
 800c470:	e772      	b.n	800c358 <_dtoa_r+0x810>
 800c472:	9b08      	ldr	r3, [sp, #32]
 800c474:	2b00      	cmp	r3, #0
 800c476:	dc36      	bgt.n	800c4e6 <_dtoa_r+0x99e>
 800c478:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c47a:	2b02      	cmp	r3, #2
 800c47c:	dd33      	ble.n	800c4e6 <_dtoa_r+0x99e>
 800c47e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c482:	f1b9 0f00 	cmp.w	r9, #0
 800c486:	d10d      	bne.n	800c4a4 <_dtoa_r+0x95c>
 800c488:	4621      	mov	r1, r4
 800c48a:	464b      	mov	r3, r9
 800c48c:	2205      	movs	r2, #5
 800c48e:	4628      	mov	r0, r5
 800c490:	f000 faa4 	bl	800c9dc <__multadd>
 800c494:	4601      	mov	r1, r0
 800c496:	4604      	mov	r4, r0
 800c498:	4658      	mov	r0, fp
 800c49a:	f000 fcbb 	bl	800ce14 <__mcmp>
 800c49e:	2800      	cmp	r0, #0
 800c4a0:	f73f adb8 	bgt.w	800c014 <_dtoa_r+0x4cc>
 800c4a4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c4a6:	9f03      	ldr	r7, [sp, #12]
 800c4a8:	ea6f 0a03 	mvn.w	sl, r3
 800c4ac:	f04f 0800 	mov.w	r8, #0
 800c4b0:	4621      	mov	r1, r4
 800c4b2:	4628      	mov	r0, r5
 800c4b4:	f000 fa70 	bl	800c998 <_Bfree>
 800c4b8:	2e00      	cmp	r6, #0
 800c4ba:	f43f aea7 	beq.w	800c20c <_dtoa_r+0x6c4>
 800c4be:	f1b8 0f00 	cmp.w	r8, #0
 800c4c2:	d005      	beq.n	800c4d0 <_dtoa_r+0x988>
 800c4c4:	45b0      	cmp	r8, r6
 800c4c6:	d003      	beq.n	800c4d0 <_dtoa_r+0x988>
 800c4c8:	4641      	mov	r1, r8
 800c4ca:	4628      	mov	r0, r5
 800c4cc:	f000 fa64 	bl	800c998 <_Bfree>
 800c4d0:	4631      	mov	r1, r6
 800c4d2:	4628      	mov	r0, r5
 800c4d4:	f000 fa60 	bl	800c998 <_Bfree>
 800c4d8:	e698      	b.n	800c20c <_dtoa_r+0x6c4>
 800c4da:	2400      	movs	r4, #0
 800c4dc:	4626      	mov	r6, r4
 800c4de:	e7e1      	b.n	800c4a4 <_dtoa_r+0x95c>
 800c4e0:	46c2      	mov	sl, r8
 800c4e2:	4626      	mov	r6, r4
 800c4e4:	e596      	b.n	800c014 <_dtoa_r+0x4cc>
 800c4e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c4e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	f000 80fd 	beq.w	800c6ec <_dtoa_r+0xba4>
 800c4f2:	2f00      	cmp	r7, #0
 800c4f4:	dd05      	ble.n	800c502 <_dtoa_r+0x9ba>
 800c4f6:	4631      	mov	r1, r6
 800c4f8:	463a      	mov	r2, r7
 800c4fa:	4628      	mov	r0, r5
 800c4fc:	f000 fc1a 	bl	800cd34 <__lshift>
 800c500:	4606      	mov	r6, r0
 800c502:	f1b8 0f00 	cmp.w	r8, #0
 800c506:	d05c      	beq.n	800c5c2 <_dtoa_r+0xa7a>
 800c508:	6871      	ldr	r1, [r6, #4]
 800c50a:	4628      	mov	r0, r5
 800c50c:	f000 fa04 	bl	800c918 <_Balloc>
 800c510:	4607      	mov	r7, r0
 800c512:	b928      	cbnz	r0, 800c520 <_dtoa_r+0x9d8>
 800c514:	4b80      	ldr	r3, [pc, #512]	; (800c718 <_dtoa_r+0xbd0>)
 800c516:	4602      	mov	r2, r0
 800c518:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c51c:	f7ff bb28 	b.w	800bb70 <_dtoa_r+0x28>
 800c520:	6932      	ldr	r2, [r6, #16]
 800c522:	3202      	adds	r2, #2
 800c524:	0092      	lsls	r2, r2, #2
 800c526:	f106 010c 	add.w	r1, r6, #12
 800c52a:	300c      	adds	r0, #12
 800c52c:	f7fe fbb9 	bl	800aca2 <memcpy>
 800c530:	2201      	movs	r2, #1
 800c532:	4639      	mov	r1, r7
 800c534:	4628      	mov	r0, r5
 800c536:	f000 fbfd 	bl	800cd34 <__lshift>
 800c53a:	9b03      	ldr	r3, [sp, #12]
 800c53c:	3301      	adds	r3, #1
 800c53e:	9308      	str	r3, [sp, #32]
 800c540:	9b03      	ldr	r3, [sp, #12]
 800c542:	444b      	add	r3, r9
 800c544:	930a      	str	r3, [sp, #40]	; 0x28
 800c546:	9b04      	ldr	r3, [sp, #16]
 800c548:	f003 0301 	and.w	r3, r3, #1
 800c54c:	46b0      	mov	r8, r6
 800c54e:	9309      	str	r3, [sp, #36]	; 0x24
 800c550:	4606      	mov	r6, r0
 800c552:	9b08      	ldr	r3, [sp, #32]
 800c554:	4621      	mov	r1, r4
 800c556:	3b01      	subs	r3, #1
 800c558:	4658      	mov	r0, fp
 800c55a:	9304      	str	r3, [sp, #16]
 800c55c:	f7ff fa6a 	bl	800ba34 <quorem>
 800c560:	4603      	mov	r3, r0
 800c562:	3330      	adds	r3, #48	; 0x30
 800c564:	9006      	str	r0, [sp, #24]
 800c566:	4641      	mov	r1, r8
 800c568:	4658      	mov	r0, fp
 800c56a:	930b      	str	r3, [sp, #44]	; 0x2c
 800c56c:	f000 fc52 	bl	800ce14 <__mcmp>
 800c570:	4632      	mov	r2, r6
 800c572:	4681      	mov	r9, r0
 800c574:	4621      	mov	r1, r4
 800c576:	4628      	mov	r0, r5
 800c578:	f000 fc68 	bl	800ce4c <__mdiff>
 800c57c:	68c2      	ldr	r2, [r0, #12]
 800c57e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c580:	4607      	mov	r7, r0
 800c582:	bb02      	cbnz	r2, 800c5c6 <_dtoa_r+0xa7e>
 800c584:	4601      	mov	r1, r0
 800c586:	4658      	mov	r0, fp
 800c588:	f000 fc44 	bl	800ce14 <__mcmp>
 800c58c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c58e:	4602      	mov	r2, r0
 800c590:	4639      	mov	r1, r7
 800c592:	4628      	mov	r0, r5
 800c594:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800c598:	f000 f9fe 	bl	800c998 <_Bfree>
 800c59c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c59e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c5a0:	9f08      	ldr	r7, [sp, #32]
 800c5a2:	ea43 0102 	orr.w	r1, r3, r2
 800c5a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5a8:	430b      	orrs	r3, r1
 800c5aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c5ac:	d10d      	bne.n	800c5ca <_dtoa_r+0xa82>
 800c5ae:	2b39      	cmp	r3, #57	; 0x39
 800c5b0:	d029      	beq.n	800c606 <_dtoa_r+0xabe>
 800c5b2:	f1b9 0f00 	cmp.w	r9, #0
 800c5b6:	dd01      	ble.n	800c5bc <_dtoa_r+0xa74>
 800c5b8:	9b06      	ldr	r3, [sp, #24]
 800c5ba:	3331      	adds	r3, #49	; 0x31
 800c5bc:	9a04      	ldr	r2, [sp, #16]
 800c5be:	7013      	strb	r3, [r2, #0]
 800c5c0:	e776      	b.n	800c4b0 <_dtoa_r+0x968>
 800c5c2:	4630      	mov	r0, r6
 800c5c4:	e7b9      	b.n	800c53a <_dtoa_r+0x9f2>
 800c5c6:	2201      	movs	r2, #1
 800c5c8:	e7e2      	b.n	800c590 <_dtoa_r+0xa48>
 800c5ca:	f1b9 0f00 	cmp.w	r9, #0
 800c5ce:	db06      	blt.n	800c5de <_dtoa_r+0xa96>
 800c5d0:	9922      	ldr	r1, [sp, #136]	; 0x88
 800c5d2:	ea41 0909 	orr.w	r9, r1, r9
 800c5d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c5d8:	ea59 0101 	orrs.w	r1, r9, r1
 800c5dc:	d120      	bne.n	800c620 <_dtoa_r+0xad8>
 800c5de:	2a00      	cmp	r2, #0
 800c5e0:	ddec      	ble.n	800c5bc <_dtoa_r+0xa74>
 800c5e2:	4659      	mov	r1, fp
 800c5e4:	2201      	movs	r2, #1
 800c5e6:	4628      	mov	r0, r5
 800c5e8:	9308      	str	r3, [sp, #32]
 800c5ea:	f000 fba3 	bl	800cd34 <__lshift>
 800c5ee:	4621      	mov	r1, r4
 800c5f0:	4683      	mov	fp, r0
 800c5f2:	f000 fc0f 	bl	800ce14 <__mcmp>
 800c5f6:	2800      	cmp	r0, #0
 800c5f8:	9b08      	ldr	r3, [sp, #32]
 800c5fa:	dc02      	bgt.n	800c602 <_dtoa_r+0xaba>
 800c5fc:	d1de      	bne.n	800c5bc <_dtoa_r+0xa74>
 800c5fe:	07da      	lsls	r2, r3, #31
 800c600:	d5dc      	bpl.n	800c5bc <_dtoa_r+0xa74>
 800c602:	2b39      	cmp	r3, #57	; 0x39
 800c604:	d1d8      	bne.n	800c5b8 <_dtoa_r+0xa70>
 800c606:	9a04      	ldr	r2, [sp, #16]
 800c608:	2339      	movs	r3, #57	; 0x39
 800c60a:	7013      	strb	r3, [r2, #0]
 800c60c:	463b      	mov	r3, r7
 800c60e:	461f      	mov	r7, r3
 800c610:	3b01      	subs	r3, #1
 800c612:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800c616:	2a39      	cmp	r2, #57	; 0x39
 800c618:	d050      	beq.n	800c6bc <_dtoa_r+0xb74>
 800c61a:	3201      	adds	r2, #1
 800c61c:	701a      	strb	r2, [r3, #0]
 800c61e:	e747      	b.n	800c4b0 <_dtoa_r+0x968>
 800c620:	2a00      	cmp	r2, #0
 800c622:	dd03      	ble.n	800c62c <_dtoa_r+0xae4>
 800c624:	2b39      	cmp	r3, #57	; 0x39
 800c626:	d0ee      	beq.n	800c606 <_dtoa_r+0xabe>
 800c628:	3301      	adds	r3, #1
 800c62a:	e7c7      	b.n	800c5bc <_dtoa_r+0xa74>
 800c62c:	9a08      	ldr	r2, [sp, #32]
 800c62e:	990a      	ldr	r1, [sp, #40]	; 0x28
 800c630:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c634:	428a      	cmp	r2, r1
 800c636:	d02a      	beq.n	800c68e <_dtoa_r+0xb46>
 800c638:	4659      	mov	r1, fp
 800c63a:	2300      	movs	r3, #0
 800c63c:	220a      	movs	r2, #10
 800c63e:	4628      	mov	r0, r5
 800c640:	f000 f9cc 	bl	800c9dc <__multadd>
 800c644:	45b0      	cmp	r8, r6
 800c646:	4683      	mov	fp, r0
 800c648:	f04f 0300 	mov.w	r3, #0
 800c64c:	f04f 020a 	mov.w	r2, #10
 800c650:	4641      	mov	r1, r8
 800c652:	4628      	mov	r0, r5
 800c654:	d107      	bne.n	800c666 <_dtoa_r+0xb1e>
 800c656:	f000 f9c1 	bl	800c9dc <__multadd>
 800c65a:	4680      	mov	r8, r0
 800c65c:	4606      	mov	r6, r0
 800c65e:	9b08      	ldr	r3, [sp, #32]
 800c660:	3301      	adds	r3, #1
 800c662:	9308      	str	r3, [sp, #32]
 800c664:	e775      	b.n	800c552 <_dtoa_r+0xa0a>
 800c666:	f000 f9b9 	bl	800c9dc <__multadd>
 800c66a:	4631      	mov	r1, r6
 800c66c:	4680      	mov	r8, r0
 800c66e:	2300      	movs	r3, #0
 800c670:	220a      	movs	r2, #10
 800c672:	4628      	mov	r0, r5
 800c674:	f000 f9b2 	bl	800c9dc <__multadd>
 800c678:	4606      	mov	r6, r0
 800c67a:	e7f0      	b.n	800c65e <_dtoa_r+0xb16>
 800c67c:	f1b9 0f00 	cmp.w	r9, #0
 800c680:	9a03      	ldr	r2, [sp, #12]
 800c682:	bfcc      	ite	gt
 800c684:	464f      	movgt	r7, r9
 800c686:	2701      	movle	r7, #1
 800c688:	4417      	add	r7, r2
 800c68a:	f04f 0800 	mov.w	r8, #0
 800c68e:	4659      	mov	r1, fp
 800c690:	2201      	movs	r2, #1
 800c692:	4628      	mov	r0, r5
 800c694:	9308      	str	r3, [sp, #32]
 800c696:	f000 fb4d 	bl	800cd34 <__lshift>
 800c69a:	4621      	mov	r1, r4
 800c69c:	4683      	mov	fp, r0
 800c69e:	f000 fbb9 	bl	800ce14 <__mcmp>
 800c6a2:	2800      	cmp	r0, #0
 800c6a4:	dcb2      	bgt.n	800c60c <_dtoa_r+0xac4>
 800c6a6:	d102      	bne.n	800c6ae <_dtoa_r+0xb66>
 800c6a8:	9b08      	ldr	r3, [sp, #32]
 800c6aa:	07db      	lsls	r3, r3, #31
 800c6ac:	d4ae      	bmi.n	800c60c <_dtoa_r+0xac4>
 800c6ae:	463b      	mov	r3, r7
 800c6b0:	461f      	mov	r7, r3
 800c6b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c6b6:	2a30      	cmp	r2, #48	; 0x30
 800c6b8:	d0fa      	beq.n	800c6b0 <_dtoa_r+0xb68>
 800c6ba:	e6f9      	b.n	800c4b0 <_dtoa_r+0x968>
 800c6bc:	9a03      	ldr	r2, [sp, #12]
 800c6be:	429a      	cmp	r2, r3
 800c6c0:	d1a5      	bne.n	800c60e <_dtoa_r+0xac6>
 800c6c2:	f10a 0a01 	add.w	sl, sl, #1
 800c6c6:	2331      	movs	r3, #49	; 0x31
 800c6c8:	e779      	b.n	800c5be <_dtoa_r+0xa76>
 800c6ca:	4b14      	ldr	r3, [pc, #80]	; (800c71c <_dtoa_r+0xbd4>)
 800c6cc:	f7ff baa7 	b.w	800bc1e <_dtoa_r+0xd6>
 800c6d0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	f47f aa80 	bne.w	800bbd8 <_dtoa_r+0x90>
 800c6d8:	4b11      	ldr	r3, [pc, #68]	; (800c720 <_dtoa_r+0xbd8>)
 800c6da:	f7ff baa0 	b.w	800bc1e <_dtoa_r+0xd6>
 800c6de:	f1b9 0f00 	cmp.w	r9, #0
 800c6e2:	dc03      	bgt.n	800c6ec <_dtoa_r+0xba4>
 800c6e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800c6e6:	2b02      	cmp	r3, #2
 800c6e8:	f73f aecb 	bgt.w	800c482 <_dtoa_r+0x93a>
 800c6ec:	9f03      	ldr	r7, [sp, #12]
 800c6ee:	4621      	mov	r1, r4
 800c6f0:	4658      	mov	r0, fp
 800c6f2:	f7ff f99f 	bl	800ba34 <quorem>
 800c6f6:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c6fa:	f807 3b01 	strb.w	r3, [r7], #1
 800c6fe:	9a03      	ldr	r2, [sp, #12]
 800c700:	1aba      	subs	r2, r7, r2
 800c702:	4591      	cmp	r9, r2
 800c704:	ddba      	ble.n	800c67c <_dtoa_r+0xb34>
 800c706:	4659      	mov	r1, fp
 800c708:	2300      	movs	r3, #0
 800c70a:	220a      	movs	r2, #10
 800c70c:	4628      	mov	r0, r5
 800c70e:	f000 f965 	bl	800c9dc <__multadd>
 800c712:	4683      	mov	fp, r0
 800c714:	e7eb      	b.n	800c6ee <_dtoa_r+0xba6>
 800c716:	bf00      	nop
 800c718:	0800e488 	.word	0x0800e488
 800c71c:	0800e34c 	.word	0x0800e34c
 800c720:	0800e420 	.word	0x0800e420

0800c724 <__sflush_r>:
 800c724:	898a      	ldrh	r2, [r1, #12]
 800c726:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c728:	4605      	mov	r5, r0
 800c72a:	0710      	lsls	r0, r2, #28
 800c72c:	460c      	mov	r4, r1
 800c72e:	d457      	bmi.n	800c7e0 <__sflush_r+0xbc>
 800c730:	684b      	ldr	r3, [r1, #4]
 800c732:	2b00      	cmp	r3, #0
 800c734:	dc04      	bgt.n	800c740 <__sflush_r+0x1c>
 800c736:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c738:	2b00      	cmp	r3, #0
 800c73a:	dc01      	bgt.n	800c740 <__sflush_r+0x1c>
 800c73c:	2000      	movs	r0, #0
 800c73e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c740:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c742:	2e00      	cmp	r6, #0
 800c744:	d0fa      	beq.n	800c73c <__sflush_r+0x18>
 800c746:	2300      	movs	r3, #0
 800c748:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c74c:	682f      	ldr	r7, [r5, #0]
 800c74e:	602b      	str	r3, [r5, #0]
 800c750:	d032      	beq.n	800c7b8 <__sflush_r+0x94>
 800c752:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c754:	89a3      	ldrh	r3, [r4, #12]
 800c756:	075a      	lsls	r2, r3, #29
 800c758:	d505      	bpl.n	800c766 <__sflush_r+0x42>
 800c75a:	6863      	ldr	r3, [r4, #4]
 800c75c:	1ac0      	subs	r0, r0, r3
 800c75e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c760:	b10b      	cbz	r3, 800c766 <__sflush_r+0x42>
 800c762:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c764:	1ac0      	subs	r0, r0, r3
 800c766:	2300      	movs	r3, #0
 800c768:	4602      	mov	r2, r0
 800c76a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c76c:	6a21      	ldr	r1, [r4, #32]
 800c76e:	4628      	mov	r0, r5
 800c770:	47b0      	blx	r6
 800c772:	1c43      	adds	r3, r0, #1
 800c774:	89a3      	ldrh	r3, [r4, #12]
 800c776:	d106      	bne.n	800c786 <__sflush_r+0x62>
 800c778:	6829      	ldr	r1, [r5, #0]
 800c77a:	291d      	cmp	r1, #29
 800c77c:	d82c      	bhi.n	800c7d8 <__sflush_r+0xb4>
 800c77e:	4a29      	ldr	r2, [pc, #164]	; (800c824 <__sflush_r+0x100>)
 800c780:	40ca      	lsrs	r2, r1
 800c782:	07d6      	lsls	r6, r2, #31
 800c784:	d528      	bpl.n	800c7d8 <__sflush_r+0xb4>
 800c786:	2200      	movs	r2, #0
 800c788:	6062      	str	r2, [r4, #4]
 800c78a:	04d9      	lsls	r1, r3, #19
 800c78c:	6922      	ldr	r2, [r4, #16]
 800c78e:	6022      	str	r2, [r4, #0]
 800c790:	d504      	bpl.n	800c79c <__sflush_r+0x78>
 800c792:	1c42      	adds	r2, r0, #1
 800c794:	d101      	bne.n	800c79a <__sflush_r+0x76>
 800c796:	682b      	ldr	r3, [r5, #0]
 800c798:	b903      	cbnz	r3, 800c79c <__sflush_r+0x78>
 800c79a:	6560      	str	r0, [r4, #84]	; 0x54
 800c79c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c79e:	602f      	str	r7, [r5, #0]
 800c7a0:	2900      	cmp	r1, #0
 800c7a2:	d0cb      	beq.n	800c73c <__sflush_r+0x18>
 800c7a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c7a8:	4299      	cmp	r1, r3
 800c7aa:	d002      	beq.n	800c7b2 <__sflush_r+0x8e>
 800c7ac:	4628      	mov	r0, r5
 800c7ae:	f000 fc45 	bl	800d03c <_free_r>
 800c7b2:	2000      	movs	r0, #0
 800c7b4:	6360      	str	r0, [r4, #52]	; 0x34
 800c7b6:	e7c2      	b.n	800c73e <__sflush_r+0x1a>
 800c7b8:	6a21      	ldr	r1, [r4, #32]
 800c7ba:	2301      	movs	r3, #1
 800c7bc:	4628      	mov	r0, r5
 800c7be:	47b0      	blx	r6
 800c7c0:	1c41      	adds	r1, r0, #1
 800c7c2:	d1c7      	bne.n	800c754 <__sflush_r+0x30>
 800c7c4:	682b      	ldr	r3, [r5, #0]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d0c4      	beq.n	800c754 <__sflush_r+0x30>
 800c7ca:	2b1d      	cmp	r3, #29
 800c7cc:	d001      	beq.n	800c7d2 <__sflush_r+0xae>
 800c7ce:	2b16      	cmp	r3, #22
 800c7d0:	d101      	bne.n	800c7d6 <__sflush_r+0xb2>
 800c7d2:	602f      	str	r7, [r5, #0]
 800c7d4:	e7b2      	b.n	800c73c <__sflush_r+0x18>
 800c7d6:	89a3      	ldrh	r3, [r4, #12]
 800c7d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7dc:	81a3      	strh	r3, [r4, #12]
 800c7de:	e7ae      	b.n	800c73e <__sflush_r+0x1a>
 800c7e0:	690f      	ldr	r7, [r1, #16]
 800c7e2:	2f00      	cmp	r7, #0
 800c7e4:	d0aa      	beq.n	800c73c <__sflush_r+0x18>
 800c7e6:	0793      	lsls	r3, r2, #30
 800c7e8:	680e      	ldr	r6, [r1, #0]
 800c7ea:	bf08      	it	eq
 800c7ec:	694b      	ldreq	r3, [r1, #20]
 800c7ee:	600f      	str	r7, [r1, #0]
 800c7f0:	bf18      	it	ne
 800c7f2:	2300      	movne	r3, #0
 800c7f4:	1bf6      	subs	r6, r6, r7
 800c7f6:	608b      	str	r3, [r1, #8]
 800c7f8:	2e00      	cmp	r6, #0
 800c7fa:	dd9f      	ble.n	800c73c <__sflush_r+0x18>
 800c7fc:	6a21      	ldr	r1, [r4, #32]
 800c7fe:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800c802:	4633      	mov	r3, r6
 800c804:	463a      	mov	r2, r7
 800c806:	4628      	mov	r0, r5
 800c808:	47e0      	blx	ip
 800c80a:	2800      	cmp	r0, #0
 800c80c:	dc06      	bgt.n	800c81c <__sflush_r+0xf8>
 800c80e:	89a3      	ldrh	r3, [r4, #12]
 800c810:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c814:	81a3      	strh	r3, [r4, #12]
 800c816:	f04f 30ff 	mov.w	r0, #4294967295
 800c81a:	e790      	b.n	800c73e <__sflush_r+0x1a>
 800c81c:	4407      	add	r7, r0
 800c81e:	1a36      	subs	r6, r6, r0
 800c820:	e7ea      	b.n	800c7f8 <__sflush_r+0xd4>
 800c822:	bf00      	nop
 800c824:	20400001 	.word	0x20400001

0800c828 <_fflush_r>:
 800c828:	b538      	push	{r3, r4, r5, lr}
 800c82a:	690b      	ldr	r3, [r1, #16]
 800c82c:	4605      	mov	r5, r0
 800c82e:	460c      	mov	r4, r1
 800c830:	b913      	cbnz	r3, 800c838 <_fflush_r+0x10>
 800c832:	2500      	movs	r5, #0
 800c834:	4628      	mov	r0, r5
 800c836:	bd38      	pop	{r3, r4, r5, pc}
 800c838:	b118      	cbz	r0, 800c842 <_fflush_r+0x1a>
 800c83a:	6983      	ldr	r3, [r0, #24]
 800c83c:	b90b      	cbnz	r3, 800c842 <_fflush_r+0x1a>
 800c83e:	f7fe f96b 	bl	800ab18 <__sinit>
 800c842:	4b14      	ldr	r3, [pc, #80]	; (800c894 <_fflush_r+0x6c>)
 800c844:	429c      	cmp	r4, r3
 800c846:	d11b      	bne.n	800c880 <_fflush_r+0x58>
 800c848:	686c      	ldr	r4, [r5, #4]
 800c84a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d0ef      	beq.n	800c832 <_fflush_r+0xa>
 800c852:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c854:	07d0      	lsls	r0, r2, #31
 800c856:	d404      	bmi.n	800c862 <_fflush_r+0x3a>
 800c858:	0599      	lsls	r1, r3, #22
 800c85a:	d402      	bmi.n	800c862 <_fflush_r+0x3a>
 800c85c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c85e:	f7fe fa1e 	bl	800ac9e <__retarget_lock_acquire_recursive>
 800c862:	4628      	mov	r0, r5
 800c864:	4621      	mov	r1, r4
 800c866:	f7ff ff5d 	bl	800c724 <__sflush_r>
 800c86a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c86c:	07da      	lsls	r2, r3, #31
 800c86e:	4605      	mov	r5, r0
 800c870:	d4e0      	bmi.n	800c834 <_fflush_r+0xc>
 800c872:	89a3      	ldrh	r3, [r4, #12]
 800c874:	059b      	lsls	r3, r3, #22
 800c876:	d4dd      	bmi.n	800c834 <_fflush_r+0xc>
 800c878:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c87a:	f7fe fa11 	bl	800aca0 <__retarget_lock_release_recursive>
 800c87e:	e7d9      	b.n	800c834 <_fflush_r+0xc>
 800c880:	4b05      	ldr	r3, [pc, #20]	; (800c898 <_fflush_r+0x70>)
 800c882:	429c      	cmp	r4, r3
 800c884:	d101      	bne.n	800c88a <_fflush_r+0x62>
 800c886:	68ac      	ldr	r4, [r5, #8]
 800c888:	e7df      	b.n	800c84a <_fflush_r+0x22>
 800c88a:	4b04      	ldr	r3, [pc, #16]	; (800c89c <_fflush_r+0x74>)
 800c88c:	429c      	cmp	r4, r3
 800c88e:	bf08      	it	eq
 800c890:	68ec      	ldreq	r4, [r5, #12]
 800c892:	e7da      	b.n	800c84a <_fflush_r+0x22>
 800c894:	0800e2f8 	.word	0x0800e2f8
 800c898:	0800e318 	.word	0x0800e318
 800c89c:	0800e2d8 	.word	0x0800e2d8

0800c8a0 <fiprintf>:
 800c8a0:	b40e      	push	{r1, r2, r3}
 800c8a2:	b503      	push	{r0, r1, lr}
 800c8a4:	4601      	mov	r1, r0
 800c8a6:	ab03      	add	r3, sp, #12
 800c8a8:	4805      	ldr	r0, [pc, #20]	; (800c8c0 <fiprintf+0x20>)
 800c8aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8ae:	6800      	ldr	r0, [r0, #0]
 800c8b0:	9301      	str	r3, [sp, #4]
 800c8b2:	f000 fd91 	bl	800d3d8 <_vfiprintf_r>
 800c8b6:	b002      	add	sp, #8
 800c8b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c8bc:	b003      	add	sp, #12
 800c8be:	4770      	bx	lr
 800c8c0:	20000010 	.word	0x20000010

0800c8c4 <_localeconv_r>:
 800c8c4:	4800      	ldr	r0, [pc, #0]	; (800c8c8 <_localeconv_r+0x4>)
 800c8c6:	4770      	bx	lr
 800c8c8:	20000164 	.word	0x20000164

0800c8cc <_lseek_r>:
 800c8cc:	b538      	push	{r3, r4, r5, lr}
 800c8ce:	4d07      	ldr	r5, [pc, #28]	; (800c8ec <_lseek_r+0x20>)
 800c8d0:	4604      	mov	r4, r0
 800c8d2:	4608      	mov	r0, r1
 800c8d4:	4611      	mov	r1, r2
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	602a      	str	r2, [r5, #0]
 800c8da:	461a      	mov	r2, r3
 800c8dc:	f7f5 fafe 	bl	8001edc <_lseek>
 800c8e0:	1c43      	adds	r3, r0, #1
 800c8e2:	d102      	bne.n	800c8ea <_lseek_r+0x1e>
 800c8e4:	682b      	ldr	r3, [r5, #0]
 800c8e6:	b103      	cbz	r3, 800c8ea <_lseek_r+0x1e>
 800c8e8:	6023      	str	r3, [r4, #0]
 800c8ea:	bd38      	pop	{r3, r4, r5, pc}
 800c8ec:	20001d08 	.word	0x20001d08

0800c8f0 <malloc>:
 800c8f0:	4b02      	ldr	r3, [pc, #8]	; (800c8fc <malloc+0xc>)
 800c8f2:	4601      	mov	r1, r0
 800c8f4:	6818      	ldr	r0, [r3, #0]
 800c8f6:	f7fe ba0b 	b.w	800ad10 <_malloc_r>
 800c8fa:	bf00      	nop
 800c8fc:	20000010 	.word	0x20000010

0800c900 <__malloc_lock>:
 800c900:	4801      	ldr	r0, [pc, #4]	; (800c908 <__malloc_lock+0x8>)
 800c902:	f7fe b9cc 	b.w	800ac9e <__retarget_lock_acquire_recursive>
 800c906:	bf00      	nop
 800c908:	20001cfc 	.word	0x20001cfc

0800c90c <__malloc_unlock>:
 800c90c:	4801      	ldr	r0, [pc, #4]	; (800c914 <__malloc_unlock+0x8>)
 800c90e:	f7fe b9c7 	b.w	800aca0 <__retarget_lock_release_recursive>
 800c912:	bf00      	nop
 800c914:	20001cfc 	.word	0x20001cfc

0800c918 <_Balloc>:
 800c918:	b570      	push	{r4, r5, r6, lr}
 800c91a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c91c:	4604      	mov	r4, r0
 800c91e:	460d      	mov	r5, r1
 800c920:	b976      	cbnz	r6, 800c940 <_Balloc+0x28>
 800c922:	2010      	movs	r0, #16
 800c924:	f7ff ffe4 	bl	800c8f0 <malloc>
 800c928:	4602      	mov	r2, r0
 800c92a:	6260      	str	r0, [r4, #36]	; 0x24
 800c92c:	b920      	cbnz	r0, 800c938 <_Balloc+0x20>
 800c92e:	4b18      	ldr	r3, [pc, #96]	; (800c990 <_Balloc+0x78>)
 800c930:	4818      	ldr	r0, [pc, #96]	; (800c994 <_Balloc+0x7c>)
 800c932:	2166      	movs	r1, #102	; 0x66
 800c934:	f7ff f850 	bl	800b9d8 <__assert_func>
 800c938:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c93c:	6006      	str	r6, [r0, #0]
 800c93e:	60c6      	str	r6, [r0, #12]
 800c940:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c942:	68f3      	ldr	r3, [r6, #12]
 800c944:	b183      	cbz	r3, 800c968 <_Balloc+0x50>
 800c946:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c948:	68db      	ldr	r3, [r3, #12]
 800c94a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c94e:	b9b8      	cbnz	r0, 800c980 <_Balloc+0x68>
 800c950:	2101      	movs	r1, #1
 800c952:	fa01 f605 	lsl.w	r6, r1, r5
 800c956:	1d72      	adds	r2, r6, #5
 800c958:	0092      	lsls	r2, r2, #2
 800c95a:	4620      	mov	r0, r4
 800c95c:	f000 fb5a 	bl	800d014 <_calloc_r>
 800c960:	b160      	cbz	r0, 800c97c <_Balloc+0x64>
 800c962:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c966:	e00e      	b.n	800c986 <_Balloc+0x6e>
 800c968:	2221      	movs	r2, #33	; 0x21
 800c96a:	2104      	movs	r1, #4
 800c96c:	4620      	mov	r0, r4
 800c96e:	f000 fb51 	bl	800d014 <_calloc_r>
 800c972:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c974:	60f0      	str	r0, [r6, #12]
 800c976:	68db      	ldr	r3, [r3, #12]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d1e4      	bne.n	800c946 <_Balloc+0x2e>
 800c97c:	2000      	movs	r0, #0
 800c97e:	bd70      	pop	{r4, r5, r6, pc}
 800c980:	6802      	ldr	r2, [r0, #0]
 800c982:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c986:	2300      	movs	r3, #0
 800c988:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c98c:	e7f7      	b.n	800c97e <_Balloc+0x66>
 800c98e:	bf00      	nop
 800c990:	0800e370 	.word	0x0800e370
 800c994:	0800e499 	.word	0x0800e499

0800c998 <_Bfree>:
 800c998:	b570      	push	{r4, r5, r6, lr}
 800c99a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c99c:	4605      	mov	r5, r0
 800c99e:	460c      	mov	r4, r1
 800c9a0:	b976      	cbnz	r6, 800c9c0 <_Bfree+0x28>
 800c9a2:	2010      	movs	r0, #16
 800c9a4:	f7ff ffa4 	bl	800c8f0 <malloc>
 800c9a8:	4602      	mov	r2, r0
 800c9aa:	6268      	str	r0, [r5, #36]	; 0x24
 800c9ac:	b920      	cbnz	r0, 800c9b8 <_Bfree+0x20>
 800c9ae:	4b09      	ldr	r3, [pc, #36]	; (800c9d4 <_Bfree+0x3c>)
 800c9b0:	4809      	ldr	r0, [pc, #36]	; (800c9d8 <_Bfree+0x40>)
 800c9b2:	218a      	movs	r1, #138	; 0x8a
 800c9b4:	f7ff f810 	bl	800b9d8 <__assert_func>
 800c9b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c9bc:	6006      	str	r6, [r0, #0]
 800c9be:	60c6      	str	r6, [r0, #12]
 800c9c0:	b13c      	cbz	r4, 800c9d2 <_Bfree+0x3a>
 800c9c2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c9c4:	6862      	ldr	r2, [r4, #4]
 800c9c6:	68db      	ldr	r3, [r3, #12]
 800c9c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c9cc:	6021      	str	r1, [r4, #0]
 800c9ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c9d2:	bd70      	pop	{r4, r5, r6, pc}
 800c9d4:	0800e370 	.word	0x0800e370
 800c9d8:	0800e499 	.word	0x0800e499

0800c9dc <__multadd>:
 800c9dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9e0:	690d      	ldr	r5, [r1, #16]
 800c9e2:	4607      	mov	r7, r0
 800c9e4:	460c      	mov	r4, r1
 800c9e6:	461e      	mov	r6, r3
 800c9e8:	f101 0c14 	add.w	ip, r1, #20
 800c9ec:	2000      	movs	r0, #0
 800c9ee:	f8dc 3000 	ldr.w	r3, [ip]
 800c9f2:	b299      	uxth	r1, r3
 800c9f4:	fb02 6101 	mla	r1, r2, r1, r6
 800c9f8:	0c1e      	lsrs	r6, r3, #16
 800c9fa:	0c0b      	lsrs	r3, r1, #16
 800c9fc:	fb02 3306 	mla	r3, r2, r6, r3
 800ca00:	b289      	uxth	r1, r1
 800ca02:	3001      	adds	r0, #1
 800ca04:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ca08:	4285      	cmp	r5, r0
 800ca0a:	f84c 1b04 	str.w	r1, [ip], #4
 800ca0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ca12:	dcec      	bgt.n	800c9ee <__multadd+0x12>
 800ca14:	b30e      	cbz	r6, 800ca5a <__multadd+0x7e>
 800ca16:	68a3      	ldr	r3, [r4, #8]
 800ca18:	42ab      	cmp	r3, r5
 800ca1a:	dc19      	bgt.n	800ca50 <__multadd+0x74>
 800ca1c:	6861      	ldr	r1, [r4, #4]
 800ca1e:	4638      	mov	r0, r7
 800ca20:	3101      	adds	r1, #1
 800ca22:	f7ff ff79 	bl	800c918 <_Balloc>
 800ca26:	4680      	mov	r8, r0
 800ca28:	b928      	cbnz	r0, 800ca36 <__multadd+0x5a>
 800ca2a:	4602      	mov	r2, r0
 800ca2c:	4b0c      	ldr	r3, [pc, #48]	; (800ca60 <__multadd+0x84>)
 800ca2e:	480d      	ldr	r0, [pc, #52]	; (800ca64 <__multadd+0x88>)
 800ca30:	21b5      	movs	r1, #181	; 0xb5
 800ca32:	f7fe ffd1 	bl	800b9d8 <__assert_func>
 800ca36:	6922      	ldr	r2, [r4, #16]
 800ca38:	3202      	adds	r2, #2
 800ca3a:	f104 010c 	add.w	r1, r4, #12
 800ca3e:	0092      	lsls	r2, r2, #2
 800ca40:	300c      	adds	r0, #12
 800ca42:	f7fe f92e 	bl	800aca2 <memcpy>
 800ca46:	4621      	mov	r1, r4
 800ca48:	4638      	mov	r0, r7
 800ca4a:	f7ff ffa5 	bl	800c998 <_Bfree>
 800ca4e:	4644      	mov	r4, r8
 800ca50:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ca54:	3501      	adds	r5, #1
 800ca56:	615e      	str	r6, [r3, #20]
 800ca58:	6125      	str	r5, [r4, #16]
 800ca5a:	4620      	mov	r0, r4
 800ca5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca60:	0800e488 	.word	0x0800e488
 800ca64:	0800e499 	.word	0x0800e499

0800ca68 <__hi0bits>:
 800ca68:	0c02      	lsrs	r2, r0, #16
 800ca6a:	0412      	lsls	r2, r2, #16
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	b9ca      	cbnz	r2, 800caa4 <__hi0bits+0x3c>
 800ca70:	0403      	lsls	r3, r0, #16
 800ca72:	2010      	movs	r0, #16
 800ca74:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ca78:	bf04      	itt	eq
 800ca7a:	021b      	lsleq	r3, r3, #8
 800ca7c:	3008      	addeq	r0, #8
 800ca7e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ca82:	bf04      	itt	eq
 800ca84:	011b      	lsleq	r3, r3, #4
 800ca86:	3004      	addeq	r0, #4
 800ca88:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ca8c:	bf04      	itt	eq
 800ca8e:	009b      	lsleq	r3, r3, #2
 800ca90:	3002      	addeq	r0, #2
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	db05      	blt.n	800caa2 <__hi0bits+0x3a>
 800ca96:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800ca9a:	f100 0001 	add.w	r0, r0, #1
 800ca9e:	bf08      	it	eq
 800caa0:	2020      	moveq	r0, #32
 800caa2:	4770      	bx	lr
 800caa4:	2000      	movs	r0, #0
 800caa6:	e7e5      	b.n	800ca74 <__hi0bits+0xc>

0800caa8 <__lo0bits>:
 800caa8:	6803      	ldr	r3, [r0, #0]
 800caaa:	4602      	mov	r2, r0
 800caac:	f013 0007 	ands.w	r0, r3, #7
 800cab0:	d00b      	beq.n	800caca <__lo0bits+0x22>
 800cab2:	07d9      	lsls	r1, r3, #31
 800cab4:	d421      	bmi.n	800cafa <__lo0bits+0x52>
 800cab6:	0798      	lsls	r0, r3, #30
 800cab8:	bf49      	itett	mi
 800caba:	085b      	lsrmi	r3, r3, #1
 800cabc:	089b      	lsrpl	r3, r3, #2
 800cabe:	2001      	movmi	r0, #1
 800cac0:	6013      	strmi	r3, [r2, #0]
 800cac2:	bf5c      	itt	pl
 800cac4:	6013      	strpl	r3, [r2, #0]
 800cac6:	2002      	movpl	r0, #2
 800cac8:	4770      	bx	lr
 800caca:	b299      	uxth	r1, r3
 800cacc:	b909      	cbnz	r1, 800cad2 <__lo0bits+0x2a>
 800cace:	0c1b      	lsrs	r3, r3, #16
 800cad0:	2010      	movs	r0, #16
 800cad2:	b2d9      	uxtb	r1, r3
 800cad4:	b909      	cbnz	r1, 800cada <__lo0bits+0x32>
 800cad6:	3008      	adds	r0, #8
 800cad8:	0a1b      	lsrs	r3, r3, #8
 800cada:	0719      	lsls	r1, r3, #28
 800cadc:	bf04      	itt	eq
 800cade:	091b      	lsreq	r3, r3, #4
 800cae0:	3004      	addeq	r0, #4
 800cae2:	0799      	lsls	r1, r3, #30
 800cae4:	bf04      	itt	eq
 800cae6:	089b      	lsreq	r3, r3, #2
 800cae8:	3002      	addeq	r0, #2
 800caea:	07d9      	lsls	r1, r3, #31
 800caec:	d403      	bmi.n	800caf6 <__lo0bits+0x4e>
 800caee:	085b      	lsrs	r3, r3, #1
 800caf0:	f100 0001 	add.w	r0, r0, #1
 800caf4:	d003      	beq.n	800cafe <__lo0bits+0x56>
 800caf6:	6013      	str	r3, [r2, #0]
 800caf8:	4770      	bx	lr
 800cafa:	2000      	movs	r0, #0
 800cafc:	4770      	bx	lr
 800cafe:	2020      	movs	r0, #32
 800cb00:	4770      	bx	lr
	...

0800cb04 <__i2b>:
 800cb04:	b510      	push	{r4, lr}
 800cb06:	460c      	mov	r4, r1
 800cb08:	2101      	movs	r1, #1
 800cb0a:	f7ff ff05 	bl	800c918 <_Balloc>
 800cb0e:	4602      	mov	r2, r0
 800cb10:	b928      	cbnz	r0, 800cb1e <__i2b+0x1a>
 800cb12:	4b05      	ldr	r3, [pc, #20]	; (800cb28 <__i2b+0x24>)
 800cb14:	4805      	ldr	r0, [pc, #20]	; (800cb2c <__i2b+0x28>)
 800cb16:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800cb1a:	f7fe ff5d 	bl	800b9d8 <__assert_func>
 800cb1e:	2301      	movs	r3, #1
 800cb20:	6144      	str	r4, [r0, #20]
 800cb22:	6103      	str	r3, [r0, #16]
 800cb24:	bd10      	pop	{r4, pc}
 800cb26:	bf00      	nop
 800cb28:	0800e488 	.word	0x0800e488
 800cb2c:	0800e499 	.word	0x0800e499

0800cb30 <__multiply>:
 800cb30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb34:	4691      	mov	r9, r2
 800cb36:	690a      	ldr	r2, [r1, #16]
 800cb38:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cb3c:	429a      	cmp	r2, r3
 800cb3e:	bfb8      	it	lt
 800cb40:	460b      	movlt	r3, r1
 800cb42:	460c      	mov	r4, r1
 800cb44:	bfbc      	itt	lt
 800cb46:	464c      	movlt	r4, r9
 800cb48:	4699      	movlt	r9, r3
 800cb4a:	6927      	ldr	r7, [r4, #16]
 800cb4c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cb50:	68a3      	ldr	r3, [r4, #8]
 800cb52:	6861      	ldr	r1, [r4, #4]
 800cb54:	eb07 060a 	add.w	r6, r7, sl
 800cb58:	42b3      	cmp	r3, r6
 800cb5a:	b085      	sub	sp, #20
 800cb5c:	bfb8      	it	lt
 800cb5e:	3101      	addlt	r1, #1
 800cb60:	f7ff feda 	bl	800c918 <_Balloc>
 800cb64:	b930      	cbnz	r0, 800cb74 <__multiply+0x44>
 800cb66:	4602      	mov	r2, r0
 800cb68:	4b43      	ldr	r3, [pc, #268]	; (800cc78 <__multiply+0x148>)
 800cb6a:	4844      	ldr	r0, [pc, #272]	; (800cc7c <__multiply+0x14c>)
 800cb6c:	f240 115d 	movw	r1, #349	; 0x15d
 800cb70:	f7fe ff32 	bl	800b9d8 <__assert_func>
 800cb74:	f100 0514 	add.w	r5, r0, #20
 800cb78:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cb7c:	462b      	mov	r3, r5
 800cb7e:	2200      	movs	r2, #0
 800cb80:	4543      	cmp	r3, r8
 800cb82:	d321      	bcc.n	800cbc8 <__multiply+0x98>
 800cb84:	f104 0314 	add.w	r3, r4, #20
 800cb88:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cb8c:	f109 0314 	add.w	r3, r9, #20
 800cb90:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cb94:	9202      	str	r2, [sp, #8]
 800cb96:	1b3a      	subs	r2, r7, r4
 800cb98:	3a15      	subs	r2, #21
 800cb9a:	f022 0203 	bic.w	r2, r2, #3
 800cb9e:	3204      	adds	r2, #4
 800cba0:	f104 0115 	add.w	r1, r4, #21
 800cba4:	428f      	cmp	r7, r1
 800cba6:	bf38      	it	cc
 800cba8:	2204      	movcc	r2, #4
 800cbaa:	9201      	str	r2, [sp, #4]
 800cbac:	9a02      	ldr	r2, [sp, #8]
 800cbae:	9303      	str	r3, [sp, #12]
 800cbb0:	429a      	cmp	r2, r3
 800cbb2:	d80c      	bhi.n	800cbce <__multiply+0x9e>
 800cbb4:	2e00      	cmp	r6, #0
 800cbb6:	dd03      	ble.n	800cbc0 <__multiply+0x90>
 800cbb8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d059      	beq.n	800cc74 <__multiply+0x144>
 800cbc0:	6106      	str	r6, [r0, #16]
 800cbc2:	b005      	add	sp, #20
 800cbc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbc8:	f843 2b04 	str.w	r2, [r3], #4
 800cbcc:	e7d8      	b.n	800cb80 <__multiply+0x50>
 800cbce:	f8b3 a000 	ldrh.w	sl, [r3]
 800cbd2:	f1ba 0f00 	cmp.w	sl, #0
 800cbd6:	d023      	beq.n	800cc20 <__multiply+0xf0>
 800cbd8:	f104 0e14 	add.w	lr, r4, #20
 800cbdc:	46a9      	mov	r9, r5
 800cbde:	f04f 0c00 	mov.w	ip, #0
 800cbe2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cbe6:	f8d9 1000 	ldr.w	r1, [r9]
 800cbea:	fa1f fb82 	uxth.w	fp, r2
 800cbee:	b289      	uxth	r1, r1
 800cbf0:	fb0a 110b 	mla	r1, sl, fp, r1
 800cbf4:	4461      	add	r1, ip
 800cbf6:	f8d9 c000 	ldr.w	ip, [r9]
 800cbfa:	0c12      	lsrs	r2, r2, #16
 800cbfc:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800cc00:	fb0a c202 	mla	r2, sl, r2, ip
 800cc04:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cc08:	b289      	uxth	r1, r1
 800cc0a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cc0e:	4577      	cmp	r7, lr
 800cc10:	f849 1b04 	str.w	r1, [r9], #4
 800cc14:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cc18:	d8e3      	bhi.n	800cbe2 <__multiply+0xb2>
 800cc1a:	9a01      	ldr	r2, [sp, #4]
 800cc1c:	f845 c002 	str.w	ip, [r5, r2]
 800cc20:	9a03      	ldr	r2, [sp, #12]
 800cc22:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cc26:	3304      	adds	r3, #4
 800cc28:	f1b9 0f00 	cmp.w	r9, #0
 800cc2c:	d020      	beq.n	800cc70 <__multiply+0x140>
 800cc2e:	6829      	ldr	r1, [r5, #0]
 800cc30:	f104 0c14 	add.w	ip, r4, #20
 800cc34:	46ae      	mov	lr, r5
 800cc36:	f04f 0a00 	mov.w	sl, #0
 800cc3a:	f8bc b000 	ldrh.w	fp, [ip]
 800cc3e:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800cc42:	fb09 220b 	mla	r2, r9, fp, r2
 800cc46:	4492      	add	sl, r2
 800cc48:	b289      	uxth	r1, r1
 800cc4a:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800cc4e:	f84e 1b04 	str.w	r1, [lr], #4
 800cc52:	f85c 2b04 	ldr.w	r2, [ip], #4
 800cc56:	f8be 1000 	ldrh.w	r1, [lr]
 800cc5a:	0c12      	lsrs	r2, r2, #16
 800cc5c:	fb09 1102 	mla	r1, r9, r2, r1
 800cc60:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800cc64:	4567      	cmp	r7, ip
 800cc66:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cc6a:	d8e6      	bhi.n	800cc3a <__multiply+0x10a>
 800cc6c:	9a01      	ldr	r2, [sp, #4]
 800cc6e:	50a9      	str	r1, [r5, r2]
 800cc70:	3504      	adds	r5, #4
 800cc72:	e79b      	b.n	800cbac <__multiply+0x7c>
 800cc74:	3e01      	subs	r6, #1
 800cc76:	e79d      	b.n	800cbb4 <__multiply+0x84>
 800cc78:	0800e488 	.word	0x0800e488
 800cc7c:	0800e499 	.word	0x0800e499

0800cc80 <__pow5mult>:
 800cc80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc84:	4615      	mov	r5, r2
 800cc86:	f012 0203 	ands.w	r2, r2, #3
 800cc8a:	4606      	mov	r6, r0
 800cc8c:	460f      	mov	r7, r1
 800cc8e:	d007      	beq.n	800cca0 <__pow5mult+0x20>
 800cc90:	4c25      	ldr	r4, [pc, #148]	; (800cd28 <__pow5mult+0xa8>)
 800cc92:	3a01      	subs	r2, #1
 800cc94:	2300      	movs	r3, #0
 800cc96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cc9a:	f7ff fe9f 	bl	800c9dc <__multadd>
 800cc9e:	4607      	mov	r7, r0
 800cca0:	10ad      	asrs	r5, r5, #2
 800cca2:	d03d      	beq.n	800cd20 <__pow5mult+0xa0>
 800cca4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800cca6:	b97c      	cbnz	r4, 800ccc8 <__pow5mult+0x48>
 800cca8:	2010      	movs	r0, #16
 800ccaa:	f7ff fe21 	bl	800c8f0 <malloc>
 800ccae:	4602      	mov	r2, r0
 800ccb0:	6270      	str	r0, [r6, #36]	; 0x24
 800ccb2:	b928      	cbnz	r0, 800ccc0 <__pow5mult+0x40>
 800ccb4:	4b1d      	ldr	r3, [pc, #116]	; (800cd2c <__pow5mult+0xac>)
 800ccb6:	481e      	ldr	r0, [pc, #120]	; (800cd30 <__pow5mult+0xb0>)
 800ccb8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ccbc:	f7fe fe8c 	bl	800b9d8 <__assert_func>
 800ccc0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ccc4:	6004      	str	r4, [r0, #0]
 800ccc6:	60c4      	str	r4, [r0, #12]
 800ccc8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cccc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ccd0:	b94c      	cbnz	r4, 800cce6 <__pow5mult+0x66>
 800ccd2:	f240 2171 	movw	r1, #625	; 0x271
 800ccd6:	4630      	mov	r0, r6
 800ccd8:	f7ff ff14 	bl	800cb04 <__i2b>
 800ccdc:	2300      	movs	r3, #0
 800ccde:	f8c8 0008 	str.w	r0, [r8, #8]
 800cce2:	4604      	mov	r4, r0
 800cce4:	6003      	str	r3, [r0, #0]
 800cce6:	f04f 0900 	mov.w	r9, #0
 800ccea:	07eb      	lsls	r3, r5, #31
 800ccec:	d50a      	bpl.n	800cd04 <__pow5mult+0x84>
 800ccee:	4639      	mov	r1, r7
 800ccf0:	4622      	mov	r2, r4
 800ccf2:	4630      	mov	r0, r6
 800ccf4:	f7ff ff1c 	bl	800cb30 <__multiply>
 800ccf8:	4639      	mov	r1, r7
 800ccfa:	4680      	mov	r8, r0
 800ccfc:	4630      	mov	r0, r6
 800ccfe:	f7ff fe4b 	bl	800c998 <_Bfree>
 800cd02:	4647      	mov	r7, r8
 800cd04:	106d      	asrs	r5, r5, #1
 800cd06:	d00b      	beq.n	800cd20 <__pow5mult+0xa0>
 800cd08:	6820      	ldr	r0, [r4, #0]
 800cd0a:	b938      	cbnz	r0, 800cd1c <__pow5mult+0x9c>
 800cd0c:	4622      	mov	r2, r4
 800cd0e:	4621      	mov	r1, r4
 800cd10:	4630      	mov	r0, r6
 800cd12:	f7ff ff0d 	bl	800cb30 <__multiply>
 800cd16:	6020      	str	r0, [r4, #0]
 800cd18:	f8c0 9000 	str.w	r9, [r0]
 800cd1c:	4604      	mov	r4, r0
 800cd1e:	e7e4      	b.n	800ccea <__pow5mult+0x6a>
 800cd20:	4638      	mov	r0, r7
 800cd22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd26:	bf00      	nop
 800cd28:	0800e5e8 	.word	0x0800e5e8
 800cd2c:	0800e370 	.word	0x0800e370
 800cd30:	0800e499 	.word	0x0800e499

0800cd34 <__lshift>:
 800cd34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd38:	460c      	mov	r4, r1
 800cd3a:	6849      	ldr	r1, [r1, #4]
 800cd3c:	6923      	ldr	r3, [r4, #16]
 800cd3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cd42:	68a3      	ldr	r3, [r4, #8]
 800cd44:	4607      	mov	r7, r0
 800cd46:	4691      	mov	r9, r2
 800cd48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cd4c:	f108 0601 	add.w	r6, r8, #1
 800cd50:	42b3      	cmp	r3, r6
 800cd52:	db0b      	blt.n	800cd6c <__lshift+0x38>
 800cd54:	4638      	mov	r0, r7
 800cd56:	f7ff fddf 	bl	800c918 <_Balloc>
 800cd5a:	4605      	mov	r5, r0
 800cd5c:	b948      	cbnz	r0, 800cd72 <__lshift+0x3e>
 800cd5e:	4602      	mov	r2, r0
 800cd60:	4b2a      	ldr	r3, [pc, #168]	; (800ce0c <__lshift+0xd8>)
 800cd62:	482b      	ldr	r0, [pc, #172]	; (800ce10 <__lshift+0xdc>)
 800cd64:	f240 11d9 	movw	r1, #473	; 0x1d9
 800cd68:	f7fe fe36 	bl	800b9d8 <__assert_func>
 800cd6c:	3101      	adds	r1, #1
 800cd6e:	005b      	lsls	r3, r3, #1
 800cd70:	e7ee      	b.n	800cd50 <__lshift+0x1c>
 800cd72:	2300      	movs	r3, #0
 800cd74:	f100 0114 	add.w	r1, r0, #20
 800cd78:	f100 0210 	add.w	r2, r0, #16
 800cd7c:	4618      	mov	r0, r3
 800cd7e:	4553      	cmp	r3, sl
 800cd80:	db37      	blt.n	800cdf2 <__lshift+0xbe>
 800cd82:	6920      	ldr	r0, [r4, #16]
 800cd84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cd88:	f104 0314 	add.w	r3, r4, #20
 800cd8c:	f019 091f 	ands.w	r9, r9, #31
 800cd90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cd94:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800cd98:	d02f      	beq.n	800cdfa <__lshift+0xc6>
 800cd9a:	f1c9 0e20 	rsb	lr, r9, #32
 800cd9e:	468a      	mov	sl, r1
 800cda0:	f04f 0c00 	mov.w	ip, #0
 800cda4:	681a      	ldr	r2, [r3, #0]
 800cda6:	fa02 f209 	lsl.w	r2, r2, r9
 800cdaa:	ea42 020c 	orr.w	r2, r2, ip
 800cdae:	f84a 2b04 	str.w	r2, [sl], #4
 800cdb2:	f853 2b04 	ldr.w	r2, [r3], #4
 800cdb6:	4298      	cmp	r0, r3
 800cdb8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800cdbc:	d8f2      	bhi.n	800cda4 <__lshift+0x70>
 800cdbe:	1b03      	subs	r3, r0, r4
 800cdc0:	3b15      	subs	r3, #21
 800cdc2:	f023 0303 	bic.w	r3, r3, #3
 800cdc6:	3304      	adds	r3, #4
 800cdc8:	f104 0215 	add.w	r2, r4, #21
 800cdcc:	4290      	cmp	r0, r2
 800cdce:	bf38      	it	cc
 800cdd0:	2304      	movcc	r3, #4
 800cdd2:	f841 c003 	str.w	ip, [r1, r3]
 800cdd6:	f1bc 0f00 	cmp.w	ip, #0
 800cdda:	d001      	beq.n	800cde0 <__lshift+0xac>
 800cddc:	f108 0602 	add.w	r6, r8, #2
 800cde0:	3e01      	subs	r6, #1
 800cde2:	4638      	mov	r0, r7
 800cde4:	612e      	str	r6, [r5, #16]
 800cde6:	4621      	mov	r1, r4
 800cde8:	f7ff fdd6 	bl	800c998 <_Bfree>
 800cdec:	4628      	mov	r0, r5
 800cdee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdf2:	f842 0f04 	str.w	r0, [r2, #4]!
 800cdf6:	3301      	adds	r3, #1
 800cdf8:	e7c1      	b.n	800cd7e <__lshift+0x4a>
 800cdfa:	3904      	subs	r1, #4
 800cdfc:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce00:	f841 2f04 	str.w	r2, [r1, #4]!
 800ce04:	4298      	cmp	r0, r3
 800ce06:	d8f9      	bhi.n	800cdfc <__lshift+0xc8>
 800ce08:	e7ea      	b.n	800cde0 <__lshift+0xac>
 800ce0a:	bf00      	nop
 800ce0c:	0800e488 	.word	0x0800e488
 800ce10:	0800e499 	.word	0x0800e499

0800ce14 <__mcmp>:
 800ce14:	690a      	ldr	r2, [r1, #16]
 800ce16:	4603      	mov	r3, r0
 800ce18:	6900      	ldr	r0, [r0, #16]
 800ce1a:	1a80      	subs	r0, r0, r2
 800ce1c:	b530      	push	{r4, r5, lr}
 800ce1e:	d10d      	bne.n	800ce3c <__mcmp+0x28>
 800ce20:	3314      	adds	r3, #20
 800ce22:	3114      	adds	r1, #20
 800ce24:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ce28:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ce2c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ce30:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ce34:	4295      	cmp	r5, r2
 800ce36:	d002      	beq.n	800ce3e <__mcmp+0x2a>
 800ce38:	d304      	bcc.n	800ce44 <__mcmp+0x30>
 800ce3a:	2001      	movs	r0, #1
 800ce3c:	bd30      	pop	{r4, r5, pc}
 800ce3e:	42a3      	cmp	r3, r4
 800ce40:	d3f4      	bcc.n	800ce2c <__mcmp+0x18>
 800ce42:	e7fb      	b.n	800ce3c <__mcmp+0x28>
 800ce44:	f04f 30ff 	mov.w	r0, #4294967295
 800ce48:	e7f8      	b.n	800ce3c <__mcmp+0x28>
	...

0800ce4c <__mdiff>:
 800ce4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce50:	460d      	mov	r5, r1
 800ce52:	4607      	mov	r7, r0
 800ce54:	4611      	mov	r1, r2
 800ce56:	4628      	mov	r0, r5
 800ce58:	4614      	mov	r4, r2
 800ce5a:	f7ff ffdb 	bl	800ce14 <__mcmp>
 800ce5e:	1e06      	subs	r6, r0, #0
 800ce60:	d111      	bne.n	800ce86 <__mdiff+0x3a>
 800ce62:	4631      	mov	r1, r6
 800ce64:	4638      	mov	r0, r7
 800ce66:	f7ff fd57 	bl	800c918 <_Balloc>
 800ce6a:	4602      	mov	r2, r0
 800ce6c:	b928      	cbnz	r0, 800ce7a <__mdiff+0x2e>
 800ce6e:	4b39      	ldr	r3, [pc, #228]	; (800cf54 <__mdiff+0x108>)
 800ce70:	f240 2132 	movw	r1, #562	; 0x232
 800ce74:	4838      	ldr	r0, [pc, #224]	; (800cf58 <__mdiff+0x10c>)
 800ce76:	f7fe fdaf 	bl	800b9d8 <__assert_func>
 800ce7a:	2301      	movs	r3, #1
 800ce7c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800ce80:	4610      	mov	r0, r2
 800ce82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce86:	bfa4      	itt	ge
 800ce88:	4623      	movge	r3, r4
 800ce8a:	462c      	movge	r4, r5
 800ce8c:	4638      	mov	r0, r7
 800ce8e:	6861      	ldr	r1, [r4, #4]
 800ce90:	bfa6      	itte	ge
 800ce92:	461d      	movge	r5, r3
 800ce94:	2600      	movge	r6, #0
 800ce96:	2601      	movlt	r6, #1
 800ce98:	f7ff fd3e 	bl	800c918 <_Balloc>
 800ce9c:	4602      	mov	r2, r0
 800ce9e:	b918      	cbnz	r0, 800cea8 <__mdiff+0x5c>
 800cea0:	4b2c      	ldr	r3, [pc, #176]	; (800cf54 <__mdiff+0x108>)
 800cea2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800cea6:	e7e5      	b.n	800ce74 <__mdiff+0x28>
 800cea8:	6927      	ldr	r7, [r4, #16]
 800ceaa:	60c6      	str	r6, [r0, #12]
 800ceac:	692e      	ldr	r6, [r5, #16]
 800ceae:	f104 0014 	add.w	r0, r4, #20
 800ceb2:	f105 0914 	add.w	r9, r5, #20
 800ceb6:	f102 0e14 	add.w	lr, r2, #20
 800ceba:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 800cebe:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800cec2:	3410      	adds	r4, #16
 800cec4:	46f2      	mov	sl, lr
 800cec6:	2100      	movs	r1, #0
 800cec8:	f859 3b04 	ldr.w	r3, [r9], #4
 800cecc:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800ced0:	fa1f f883 	uxth.w	r8, r3
 800ced4:	fa11 f18b 	uxtah	r1, r1, fp
 800ced8:	0c1b      	lsrs	r3, r3, #16
 800ceda:	eba1 0808 	sub.w	r8, r1, r8
 800cede:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cee2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cee6:	fa1f f888 	uxth.w	r8, r8
 800ceea:	1419      	asrs	r1, r3, #16
 800ceec:	454e      	cmp	r6, r9
 800ceee:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cef2:	f84a 3b04 	str.w	r3, [sl], #4
 800cef6:	d8e7      	bhi.n	800cec8 <__mdiff+0x7c>
 800cef8:	1b73      	subs	r3, r6, r5
 800cefa:	3b15      	subs	r3, #21
 800cefc:	f023 0303 	bic.w	r3, r3, #3
 800cf00:	3304      	adds	r3, #4
 800cf02:	3515      	adds	r5, #21
 800cf04:	42ae      	cmp	r6, r5
 800cf06:	bf38      	it	cc
 800cf08:	2304      	movcc	r3, #4
 800cf0a:	4418      	add	r0, r3
 800cf0c:	4473      	add	r3, lr
 800cf0e:	469e      	mov	lr, r3
 800cf10:	4606      	mov	r6, r0
 800cf12:	4566      	cmp	r6, ip
 800cf14:	d30e      	bcc.n	800cf34 <__mdiff+0xe8>
 800cf16:	f10c 0103 	add.w	r1, ip, #3
 800cf1a:	1a09      	subs	r1, r1, r0
 800cf1c:	f021 0103 	bic.w	r1, r1, #3
 800cf20:	3803      	subs	r0, #3
 800cf22:	4584      	cmp	ip, r0
 800cf24:	bf38      	it	cc
 800cf26:	2100      	movcc	r1, #0
 800cf28:	4419      	add	r1, r3
 800cf2a:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800cf2e:	b17b      	cbz	r3, 800cf50 <__mdiff+0x104>
 800cf30:	6117      	str	r7, [r2, #16]
 800cf32:	e7a5      	b.n	800ce80 <__mdiff+0x34>
 800cf34:	f856 8b04 	ldr.w	r8, [r6], #4
 800cf38:	fa11 f488 	uxtah	r4, r1, r8
 800cf3c:	1425      	asrs	r5, r4, #16
 800cf3e:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 800cf42:	b2a4      	uxth	r4, r4
 800cf44:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800cf48:	f84e 4b04 	str.w	r4, [lr], #4
 800cf4c:	1429      	asrs	r1, r5, #16
 800cf4e:	e7e0      	b.n	800cf12 <__mdiff+0xc6>
 800cf50:	3f01      	subs	r7, #1
 800cf52:	e7ea      	b.n	800cf2a <__mdiff+0xde>
 800cf54:	0800e488 	.word	0x0800e488
 800cf58:	0800e499 	.word	0x0800e499

0800cf5c <__d2b>:
 800cf5c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800cf60:	2101      	movs	r1, #1
 800cf62:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800cf66:	4690      	mov	r8, r2
 800cf68:	461d      	mov	r5, r3
 800cf6a:	f7ff fcd5 	bl	800c918 <_Balloc>
 800cf6e:	4604      	mov	r4, r0
 800cf70:	b930      	cbnz	r0, 800cf80 <__d2b+0x24>
 800cf72:	4602      	mov	r2, r0
 800cf74:	4b25      	ldr	r3, [pc, #148]	; (800d00c <__d2b+0xb0>)
 800cf76:	4826      	ldr	r0, [pc, #152]	; (800d010 <__d2b+0xb4>)
 800cf78:	f240 310a 	movw	r1, #778	; 0x30a
 800cf7c:	f7fe fd2c 	bl	800b9d8 <__assert_func>
 800cf80:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800cf84:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800cf88:	bb2d      	cbnz	r5, 800cfd6 <__d2b+0x7a>
 800cf8a:	9301      	str	r3, [sp, #4]
 800cf8c:	f1b8 0300 	subs.w	r3, r8, #0
 800cf90:	d026      	beq.n	800cfe0 <__d2b+0x84>
 800cf92:	4668      	mov	r0, sp
 800cf94:	9300      	str	r3, [sp, #0]
 800cf96:	f7ff fd87 	bl	800caa8 <__lo0bits>
 800cf9a:	9900      	ldr	r1, [sp, #0]
 800cf9c:	b1f0      	cbz	r0, 800cfdc <__d2b+0x80>
 800cf9e:	9a01      	ldr	r2, [sp, #4]
 800cfa0:	f1c0 0320 	rsb	r3, r0, #32
 800cfa4:	fa02 f303 	lsl.w	r3, r2, r3
 800cfa8:	430b      	orrs	r3, r1
 800cfaa:	40c2      	lsrs	r2, r0
 800cfac:	6163      	str	r3, [r4, #20]
 800cfae:	9201      	str	r2, [sp, #4]
 800cfb0:	9b01      	ldr	r3, [sp, #4]
 800cfb2:	61a3      	str	r3, [r4, #24]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	bf14      	ite	ne
 800cfb8:	2102      	movne	r1, #2
 800cfba:	2101      	moveq	r1, #1
 800cfbc:	6121      	str	r1, [r4, #16]
 800cfbe:	b1c5      	cbz	r5, 800cff2 <__d2b+0x96>
 800cfc0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cfc4:	4405      	add	r5, r0
 800cfc6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cfca:	603d      	str	r5, [r7, #0]
 800cfcc:	6030      	str	r0, [r6, #0]
 800cfce:	4620      	mov	r0, r4
 800cfd0:	b002      	add	sp, #8
 800cfd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cfda:	e7d6      	b.n	800cf8a <__d2b+0x2e>
 800cfdc:	6161      	str	r1, [r4, #20]
 800cfde:	e7e7      	b.n	800cfb0 <__d2b+0x54>
 800cfe0:	a801      	add	r0, sp, #4
 800cfe2:	f7ff fd61 	bl	800caa8 <__lo0bits>
 800cfe6:	9b01      	ldr	r3, [sp, #4]
 800cfe8:	6163      	str	r3, [r4, #20]
 800cfea:	2101      	movs	r1, #1
 800cfec:	6121      	str	r1, [r4, #16]
 800cfee:	3020      	adds	r0, #32
 800cff0:	e7e5      	b.n	800cfbe <__d2b+0x62>
 800cff2:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800cff6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cffa:	6038      	str	r0, [r7, #0]
 800cffc:	6918      	ldr	r0, [r3, #16]
 800cffe:	f7ff fd33 	bl	800ca68 <__hi0bits>
 800d002:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800d006:	6031      	str	r1, [r6, #0]
 800d008:	e7e1      	b.n	800cfce <__d2b+0x72>
 800d00a:	bf00      	nop
 800d00c:	0800e488 	.word	0x0800e488
 800d010:	0800e499 	.word	0x0800e499

0800d014 <_calloc_r>:
 800d014:	b570      	push	{r4, r5, r6, lr}
 800d016:	fba1 5402 	umull	r5, r4, r1, r2
 800d01a:	b934      	cbnz	r4, 800d02a <_calloc_r+0x16>
 800d01c:	4629      	mov	r1, r5
 800d01e:	f7fd fe77 	bl	800ad10 <_malloc_r>
 800d022:	4606      	mov	r6, r0
 800d024:	b928      	cbnz	r0, 800d032 <_calloc_r+0x1e>
 800d026:	4630      	mov	r0, r6
 800d028:	bd70      	pop	{r4, r5, r6, pc}
 800d02a:	220c      	movs	r2, #12
 800d02c:	6002      	str	r2, [r0, #0]
 800d02e:	2600      	movs	r6, #0
 800d030:	e7f9      	b.n	800d026 <_calloc_r+0x12>
 800d032:	462a      	mov	r2, r5
 800d034:	4621      	mov	r1, r4
 800d036:	f7fd fe42 	bl	800acbe <memset>
 800d03a:	e7f4      	b.n	800d026 <_calloc_r+0x12>

0800d03c <_free_r>:
 800d03c:	b538      	push	{r3, r4, r5, lr}
 800d03e:	4605      	mov	r5, r0
 800d040:	2900      	cmp	r1, #0
 800d042:	d041      	beq.n	800d0c8 <_free_r+0x8c>
 800d044:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d048:	1f0c      	subs	r4, r1, #4
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	bfb8      	it	lt
 800d04e:	18e4      	addlt	r4, r4, r3
 800d050:	f7ff fc56 	bl	800c900 <__malloc_lock>
 800d054:	4a1d      	ldr	r2, [pc, #116]	; (800d0cc <_free_r+0x90>)
 800d056:	6813      	ldr	r3, [r2, #0]
 800d058:	b933      	cbnz	r3, 800d068 <_free_r+0x2c>
 800d05a:	6063      	str	r3, [r4, #4]
 800d05c:	6014      	str	r4, [r2, #0]
 800d05e:	4628      	mov	r0, r5
 800d060:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d064:	f7ff bc52 	b.w	800c90c <__malloc_unlock>
 800d068:	42a3      	cmp	r3, r4
 800d06a:	d908      	bls.n	800d07e <_free_r+0x42>
 800d06c:	6820      	ldr	r0, [r4, #0]
 800d06e:	1821      	adds	r1, r4, r0
 800d070:	428b      	cmp	r3, r1
 800d072:	bf01      	itttt	eq
 800d074:	6819      	ldreq	r1, [r3, #0]
 800d076:	685b      	ldreq	r3, [r3, #4]
 800d078:	1809      	addeq	r1, r1, r0
 800d07a:	6021      	streq	r1, [r4, #0]
 800d07c:	e7ed      	b.n	800d05a <_free_r+0x1e>
 800d07e:	461a      	mov	r2, r3
 800d080:	685b      	ldr	r3, [r3, #4]
 800d082:	b10b      	cbz	r3, 800d088 <_free_r+0x4c>
 800d084:	42a3      	cmp	r3, r4
 800d086:	d9fa      	bls.n	800d07e <_free_r+0x42>
 800d088:	6811      	ldr	r1, [r2, #0]
 800d08a:	1850      	adds	r0, r2, r1
 800d08c:	42a0      	cmp	r0, r4
 800d08e:	d10b      	bne.n	800d0a8 <_free_r+0x6c>
 800d090:	6820      	ldr	r0, [r4, #0]
 800d092:	4401      	add	r1, r0
 800d094:	1850      	adds	r0, r2, r1
 800d096:	4283      	cmp	r3, r0
 800d098:	6011      	str	r1, [r2, #0]
 800d09a:	d1e0      	bne.n	800d05e <_free_r+0x22>
 800d09c:	6818      	ldr	r0, [r3, #0]
 800d09e:	685b      	ldr	r3, [r3, #4]
 800d0a0:	6053      	str	r3, [r2, #4]
 800d0a2:	4401      	add	r1, r0
 800d0a4:	6011      	str	r1, [r2, #0]
 800d0a6:	e7da      	b.n	800d05e <_free_r+0x22>
 800d0a8:	d902      	bls.n	800d0b0 <_free_r+0x74>
 800d0aa:	230c      	movs	r3, #12
 800d0ac:	602b      	str	r3, [r5, #0]
 800d0ae:	e7d6      	b.n	800d05e <_free_r+0x22>
 800d0b0:	6820      	ldr	r0, [r4, #0]
 800d0b2:	1821      	adds	r1, r4, r0
 800d0b4:	428b      	cmp	r3, r1
 800d0b6:	bf04      	itt	eq
 800d0b8:	6819      	ldreq	r1, [r3, #0]
 800d0ba:	685b      	ldreq	r3, [r3, #4]
 800d0bc:	6063      	str	r3, [r4, #4]
 800d0be:	bf04      	itt	eq
 800d0c0:	1809      	addeq	r1, r1, r0
 800d0c2:	6021      	streq	r1, [r4, #0]
 800d0c4:	6054      	str	r4, [r2, #4]
 800d0c6:	e7ca      	b.n	800d05e <_free_r+0x22>
 800d0c8:	bd38      	pop	{r3, r4, r5, pc}
 800d0ca:	bf00      	nop
 800d0cc:	20001d00 	.word	0x20001d00

0800d0d0 <__ssputs_r>:
 800d0d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d0d4:	688e      	ldr	r6, [r1, #8]
 800d0d6:	429e      	cmp	r6, r3
 800d0d8:	4682      	mov	sl, r0
 800d0da:	460c      	mov	r4, r1
 800d0dc:	4690      	mov	r8, r2
 800d0de:	461f      	mov	r7, r3
 800d0e0:	d838      	bhi.n	800d154 <__ssputs_r+0x84>
 800d0e2:	898a      	ldrh	r2, [r1, #12]
 800d0e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d0e8:	d032      	beq.n	800d150 <__ssputs_r+0x80>
 800d0ea:	6825      	ldr	r5, [r4, #0]
 800d0ec:	6909      	ldr	r1, [r1, #16]
 800d0ee:	eba5 0901 	sub.w	r9, r5, r1
 800d0f2:	6965      	ldr	r5, [r4, #20]
 800d0f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d0f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d0fc:	3301      	adds	r3, #1
 800d0fe:	444b      	add	r3, r9
 800d100:	106d      	asrs	r5, r5, #1
 800d102:	429d      	cmp	r5, r3
 800d104:	bf38      	it	cc
 800d106:	461d      	movcc	r5, r3
 800d108:	0553      	lsls	r3, r2, #21
 800d10a:	d531      	bpl.n	800d170 <__ssputs_r+0xa0>
 800d10c:	4629      	mov	r1, r5
 800d10e:	f7fd fdff 	bl	800ad10 <_malloc_r>
 800d112:	4606      	mov	r6, r0
 800d114:	b950      	cbnz	r0, 800d12c <__ssputs_r+0x5c>
 800d116:	230c      	movs	r3, #12
 800d118:	f8ca 3000 	str.w	r3, [sl]
 800d11c:	89a3      	ldrh	r3, [r4, #12]
 800d11e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d122:	81a3      	strh	r3, [r4, #12]
 800d124:	f04f 30ff 	mov.w	r0, #4294967295
 800d128:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d12c:	6921      	ldr	r1, [r4, #16]
 800d12e:	464a      	mov	r2, r9
 800d130:	f7fd fdb7 	bl	800aca2 <memcpy>
 800d134:	89a3      	ldrh	r3, [r4, #12]
 800d136:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d13a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d13e:	81a3      	strh	r3, [r4, #12]
 800d140:	6126      	str	r6, [r4, #16]
 800d142:	6165      	str	r5, [r4, #20]
 800d144:	444e      	add	r6, r9
 800d146:	eba5 0509 	sub.w	r5, r5, r9
 800d14a:	6026      	str	r6, [r4, #0]
 800d14c:	60a5      	str	r5, [r4, #8]
 800d14e:	463e      	mov	r6, r7
 800d150:	42be      	cmp	r6, r7
 800d152:	d900      	bls.n	800d156 <__ssputs_r+0x86>
 800d154:	463e      	mov	r6, r7
 800d156:	6820      	ldr	r0, [r4, #0]
 800d158:	4632      	mov	r2, r6
 800d15a:	4641      	mov	r1, r8
 800d15c:	f000 fbbc 	bl	800d8d8 <memmove>
 800d160:	68a3      	ldr	r3, [r4, #8]
 800d162:	1b9b      	subs	r3, r3, r6
 800d164:	60a3      	str	r3, [r4, #8]
 800d166:	6823      	ldr	r3, [r4, #0]
 800d168:	4433      	add	r3, r6
 800d16a:	6023      	str	r3, [r4, #0]
 800d16c:	2000      	movs	r0, #0
 800d16e:	e7db      	b.n	800d128 <__ssputs_r+0x58>
 800d170:	462a      	mov	r2, r5
 800d172:	f000 fbcb 	bl	800d90c <_realloc_r>
 800d176:	4606      	mov	r6, r0
 800d178:	2800      	cmp	r0, #0
 800d17a:	d1e1      	bne.n	800d140 <__ssputs_r+0x70>
 800d17c:	6921      	ldr	r1, [r4, #16]
 800d17e:	4650      	mov	r0, sl
 800d180:	f7ff ff5c 	bl	800d03c <_free_r>
 800d184:	e7c7      	b.n	800d116 <__ssputs_r+0x46>
	...

0800d188 <_svfiprintf_r>:
 800d188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d18c:	4698      	mov	r8, r3
 800d18e:	898b      	ldrh	r3, [r1, #12]
 800d190:	061b      	lsls	r3, r3, #24
 800d192:	b09d      	sub	sp, #116	; 0x74
 800d194:	4607      	mov	r7, r0
 800d196:	460d      	mov	r5, r1
 800d198:	4614      	mov	r4, r2
 800d19a:	d50e      	bpl.n	800d1ba <_svfiprintf_r+0x32>
 800d19c:	690b      	ldr	r3, [r1, #16]
 800d19e:	b963      	cbnz	r3, 800d1ba <_svfiprintf_r+0x32>
 800d1a0:	2140      	movs	r1, #64	; 0x40
 800d1a2:	f7fd fdb5 	bl	800ad10 <_malloc_r>
 800d1a6:	6028      	str	r0, [r5, #0]
 800d1a8:	6128      	str	r0, [r5, #16]
 800d1aa:	b920      	cbnz	r0, 800d1b6 <_svfiprintf_r+0x2e>
 800d1ac:	230c      	movs	r3, #12
 800d1ae:	603b      	str	r3, [r7, #0]
 800d1b0:	f04f 30ff 	mov.w	r0, #4294967295
 800d1b4:	e0d1      	b.n	800d35a <_svfiprintf_r+0x1d2>
 800d1b6:	2340      	movs	r3, #64	; 0x40
 800d1b8:	616b      	str	r3, [r5, #20]
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	9309      	str	r3, [sp, #36]	; 0x24
 800d1be:	2320      	movs	r3, #32
 800d1c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d1c4:	f8cd 800c 	str.w	r8, [sp, #12]
 800d1c8:	2330      	movs	r3, #48	; 0x30
 800d1ca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d374 <_svfiprintf_r+0x1ec>
 800d1ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d1d2:	f04f 0901 	mov.w	r9, #1
 800d1d6:	4623      	mov	r3, r4
 800d1d8:	469a      	mov	sl, r3
 800d1da:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d1de:	b10a      	cbz	r2, 800d1e4 <_svfiprintf_r+0x5c>
 800d1e0:	2a25      	cmp	r2, #37	; 0x25
 800d1e2:	d1f9      	bne.n	800d1d8 <_svfiprintf_r+0x50>
 800d1e4:	ebba 0b04 	subs.w	fp, sl, r4
 800d1e8:	d00b      	beq.n	800d202 <_svfiprintf_r+0x7a>
 800d1ea:	465b      	mov	r3, fp
 800d1ec:	4622      	mov	r2, r4
 800d1ee:	4629      	mov	r1, r5
 800d1f0:	4638      	mov	r0, r7
 800d1f2:	f7ff ff6d 	bl	800d0d0 <__ssputs_r>
 800d1f6:	3001      	adds	r0, #1
 800d1f8:	f000 80aa 	beq.w	800d350 <_svfiprintf_r+0x1c8>
 800d1fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d1fe:	445a      	add	r2, fp
 800d200:	9209      	str	r2, [sp, #36]	; 0x24
 800d202:	f89a 3000 	ldrb.w	r3, [sl]
 800d206:	2b00      	cmp	r3, #0
 800d208:	f000 80a2 	beq.w	800d350 <_svfiprintf_r+0x1c8>
 800d20c:	2300      	movs	r3, #0
 800d20e:	f04f 32ff 	mov.w	r2, #4294967295
 800d212:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d216:	f10a 0a01 	add.w	sl, sl, #1
 800d21a:	9304      	str	r3, [sp, #16]
 800d21c:	9307      	str	r3, [sp, #28]
 800d21e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d222:	931a      	str	r3, [sp, #104]	; 0x68
 800d224:	4654      	mov	r4, sl
 800d226:	2205      	movs	r2, #5
 800d228:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d22c:	4851      	ldr	r0, [pc, #324]	; (800d374 <_svfiprintf_r+0x1ec>)
 800d22e:	f7f2 ffaf 	bl	8000190 <memchr>
 800d232:	9a04      	ldr	r2, [sp, #16]
 800d234:	b9d8      	cbnz	r0, 800d26e <_svfiprintf_r+0xe6>
 800d236:	06d0      	lsls	r0, r2, #27
 800d238:	bf44      	itt	mi
 800d23a:	2320      	movmi	r3, #32
 800d23c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d240:	0711      	lsls	r1, r2, #28
 800d242:	bf44      	itt	mi
 800d244:	232b      	movmi	r3, #43	; 0x2b
 800d246:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d24a:	f89a 3000 	ldrb.w	r3, [sl]
 800d24e:	2b2a      	cmp	r3, #42	; 0x2a
 800d250:	d015      	beq.n	800d27e <_svfiprintf_r+0xf6>
 800d252:	9a07      	ldr	r2, [sp, #28]
 800d254:	4654      	mov	r4, sl
 800d256:	2000      	movs	r0, #0
 800d258:	f04f 0c0a 	mov.w	ip, #10
 800d25c:	4621      	mov	r1, r4
 800d25e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d262:	3b30      	subs	r3, #48	; 0x30
 800d264:	2b09      	cmp	r3, #9
 800d266:	d94e      	bls.n	800d306 <_svfiprintf_r+0x17e>
 800d268:	b1b0      	cbz	r0, 800d298 <_svfiprintf_r+0x110>
 800d26a:	9207      	str	r2, [sp, #28]
 800d26c:	e014      	b.n	800d298 <_svfiprintf_r+0x110>
 800d26e:	eba0 0308 	sub.w	r3, r0, r8
 800d272:	fa09 f303 	lsl.w	r3, r9, r3
 800d276:	4313      	orrs	r3, r2
 800d278:	9304      	str	r3, [sp, #16]
 800d27a:	46a2      	mov	sl, r4
 800d27c:	e7d2      	b.n	800d224 <_svfiprintf_r+0x9c>
 800d27e:	9b03      	ldr	r3, [sp, #12]
 800d280:	1d19      	adds	r1, r3, #4
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	9103      	str	r1, [sp, #12]
 800d286:	2b00      	cmp	r3, #0
 800d288:	bfbb      	ittet	lt
 800d28a:	425b      	neglt	r3, r3
 800d28c:	f042 0202 	orrlt.w	r2, r2, #2
 800d290:	9307      	strge	r3, [sp, #28]
 800d292:	9307      	strlt	r3, [sp, #28]
 800d294:	bfb8      	it	lt
 800d296:	9204      	strlt	r2, [sp, #16]
 800d298:	7823      	ldrb	r3, [r4, #0]
 800d29a:	2b2e      	cmp	r3, #46	; 0x2e
 800d29c:	d10c      	bne.n	800d2b8 <_svfiprintf_r+0x130>
 800d29e:	7863      	ldrb	r3, [r4, #1]
 800d2a0:	2b2a      	cmp	r3, #42	; 0x2a
 800d2a2:	d135      	bne.n	800d310 <_svfiprintf_r+0x188>
 800d2a4:	9b03      	ldr	r3, [sp, #12]
 800d2a6:	1d1a      	adds	r2, r3, #4
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	9203      	str	r2, [sp, #12]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	bfb8      	it	lt
 800d2b0:	f04f 33ff 	movlt.w	r3, #4294967295
 800d2b4:	3402      	adds	r4, #2
 800d2b6:	9305      	str	r3, [sp, #20]
 800d2b8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800d378 <_svfiprintf_r+0x1f0>
 800d2bc:	7821      	ldrb	r1, [r4, #0]
 800d2be:	2203      	movs	r2, #3
 800d2c0:	4650      	mov	r0, sl
 800d2c2:	f7f2 ff65 	bl	8000190 <memchr>
 800d2c6:	b140      	cbz	r0, 800d2da <_svfiprintf_r+0x152>
 800d2c8:	2340      	movs	r3, #64	; 0x40
 800d2ca:	eba0 000a 	sub.w	r0, r0, sl
 800d2ce:	fa03 f000 	lsl.w	r0, r3, r0
 800d2d2:	9b04      	ldr	r3, [sp, #16]
 800d2d4:	4303      	orrs	r3, r0
 800d2d6:	3401      	adds	r4, #1
 800d2d8:	9304      	str	r3, [sp, #16]
 800d2da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2de:	4827      	ldr	r0, [pc, #156]	; (800d37c <_svfiprintf_r+0x1f4>)
 800d2e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d2e4:	2206      	movs	r2, #6
 800d2e6:	f7f2 ff53 	bl	8000190 <memchr>
 800d2ea:	2800      	cmp	r0, #0
 800d2ec:	d038      	beq.n	800d360 <_svfiprintf_r+0x1d8>
 800d2ee:	4b24      	ldr	r3, [pc, #144]	; (800d380 <_svfiprintf_r+0x1f8>)
 800d2f0:	bb1b      	cbnz	r3, 800d33a <_svfiprintf_r+0x1b2>
 800d2f2:	9b03      	ldr	r3, [sp, #12]
 800d2f4:	3307      	adds	r3, #7
 800d2f6:	f023 0307 	bic.w	r3, r3, #7
 800d2fa:	3308      	adds	r3, #8
 800d2fc:	9303      	str	r3, [sp, #12]
 800d2fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d300:	4433      	add	r3, r6
 800d302:	9309      	str	r3, [sp, #36]	; 0x24
 800d304:	e767      	b.n	800d1d6 <_svfiprintf_r+0x4e>
 800d306:	fb0c 3202 	mla	r2, ip, r2, r3
 800d30a:	460c      	mov	r4, r1
 800d30c:	2001      	movs	r0, #1
 800d30e:	e7a5      	b.n	800d25c <_svfiprintf_r+0xd4>
 800d310:	2300      	movs	r3, #0
 800d312:	3401      	adds	r4, #1
 800d314:	9305      	str	r3, [sp, #20]
 800d316:	4619      	mov	r1, r3
 800d318:	f04f 0c0a 	mov.w	ip, #10
 800d31c:	4620      	mov	r0, r4
 800d31e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d322:	3a30      	subs	r2, #48	; 0x30
 800d324:	2a09      	cmp	r2, #9
 800d326:	d903      	bls.n	800d330 <_svfiprintf_r+0x1a8>
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d0c5      	beq.n	800d2b8 <_svfiprintf_r+0x130>
 800d32c:	9105      	str	r1, [sp, #20]
 800d32e:	e7c3      	b.n	800d2b8 <_svfiprintf_r+0x130>
 800d330:	fb0c 2101 	mla	r1, ip, r1, r2
 800d334:	4604      	mov	r4, r0
 800d336:	2301      	movs	r3, #1
 800d338:	e7f0      	b.n	800d31c <_svfiprintf_r+0x194>
 800d33a:	ab03      	add	r3, sp, #12
 800d33c:	9300      	str	r3, [sp, #0]
 800d33e:	462a      	mov	r2, r5
 800d340:	4b10      	ldr	r3, [pc, #64]	; (800d384 <_svfiprintf_r+0x1fc>)
 800d342:	a904      	add	r1, sp, #16
 800d344:	4638      	mov	r0, r7
 800d346:	f7fd fdf5 	bl	800af34 <_printf_float>
 800d34a:	1c42      	adds	r2, r0, #1
 800d34c:	4606      	mov	r6, r0
 800d34e:	d1d6      	bne.n	800d2fe <_svfiprintf_r+0x176>
 800d350:	89ab      	ldrh	r3, [r5, #12]
 800d352:	065b      	lsls	r3, r3, #25
 800d354:	f53f af2c 	bmi.w	800d1b0 <_svfiprintf_r+0x28>
 800d358:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d35a:	b01d      	add	sp, #116	; 0x74
 800d35c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d360:	ab03      	add	r3, sp, #12
 800d362:	9300      	str	r3, [sp, #0]
 800d364:	462a      	mov	r2, r5
 800d366:	4b07      	ldr	r3, [pc, #28]	; (800d384 <_svfiprintf_r+0x1fc>)
 800d368:	a904      	add	r1, sp, #16
 800d36a:	4638      	mov	r0, r7
 800d36c:	f7fe f87a 	bl	800b464 <_printf_i>
 800d370:	e7eb      	b.n	800d34a <_svfiprintf_r+0x1c2>
 800d372:	bf00      	nop
 800d374:	0800e5f4 	.word	0x0800e5f4
 800d378:	0800e5fa 	.word	0x0800e5fa
 800d37c:	0800e5fe 	.word	0x0800e5fe
 800d380:	0800af35 	.word	0x0800af35
 800d384:	0800d0d1 	.word	0x0800d0d1

0800d388 <__sfputc_r>:
 800d388:	6893      	ldr	r3, [r2, #8]
 800d38a:	3b01      	subs	r3, #1
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	b410      	push	{r4}
 800d390:	6093      	str	r3, [r2, #8]
 800d392:	da07      	bge.n	800d3a4 <__sfputc_r+0x1c>
 800d394:	6994      	ldr	r4, [r2, #24]
 800d396:	42a3      	cmp	r3, r4
 800d398:	db01      	blt.n	800d39e <__sfputc_r+0x16>
 800d39a:	290a      	cmp	r1, #10
 800d39c:	d102      	bne.n	800d3a4 <__sfputc_r+0x1c>
 800d39e:	bc10      	pop	{r4}
 800d3a0:	f000 b95c 	b.w	800d65c <__swbuf_r>
 800d3a4:	6813      	ldr	r3, [r2, #0]
 800d3a6:	1c58      	adds	r0, r3, #1
 800d3a8:	6010      	str	r0, [r2, #0]
 800d3aa:	7019      	strb	r1, [r3, #0]
 800d3ac:	4608      	mov	r0, r1
 800d3ae:	bc10      	pop	{r4}
 800d3b0:	4770      	bx	lr

0800d3b2 <__sfputs_r>:
 800d3b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3b4:	4606      	mov	r6, r0
 800d3b6:	460f      	mov	r7, r1
 800d3b8:	4614      	mov	r4, r2
 800d3ba:	18d5      	adds	r5, r2, r3
 800d3bc:	42ac      	cmp	r4, r5
 800d3be:	d101      	bne.n	800d3c4 <__sfputs_r+0x12>
 800d3c0:	2000      	movs	r0, #0
 800d3c2:	e007      	b.n	800d3d4 <__sfputs_r+0x22>
 800d3c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3c8:	463a      	mov	r2, r7
 800d3ca:	4630      	mov	r0, r6
 800d3cc:	f7ff ffdc 	bl	800d388 <__sfputc_r>
 800d3d0:	1c43      	adds	r3, r0, #1
 800d3d2:	d1f3      	bne.n	800d3bc <__sfputs_r+0xa>
 800d3d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d3d8 <_vfiprintf_r>:
 800d3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3dc:	460d      	mov	r5, r1
 800d3de:	b09d      	sub	sp, #116	; 0x74
 800d3e0:	4614      	mov	r4, r2
 800d3e2:	4698      	mov	r8, r3
 800d3e4:	4606      	mov	r6, r0
 800d3e6:	b118      	cbz	r0, 800d3f0 <_vfiprintf_r+0x18>
 800d3e8:	6983      	ldr	r3, [r0, #24]
 800d3ea:	b90b      	cbnz	r3, 800d3f0 <_vfiprintf_r+0x18>
 800d3ec:	f7fd fb94 	bl	800ab18 <__sinit>
 800d3f0:	4b89      	ldr	r3, [pc, #548]	; (800d618 <_vfiprintf_r+0x240>)
 800d3f2:	429d      	cmp	r5, r3
 800d3f4:	d11b      	bne.n	800d42e <_vfiprintf_r+0x56>
 800d3f6:	6875      	ldr	r5, [r6, #4]
 800d3f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d3fa:	07d9      	lsls	r1, r3, #31
 800d3fc:	d405      	bmi.n	800d40a <_vfiprintf_r+0x32>
 800d3fe:	89ab      	ldrh	r3, [r5, #12]
 800d400:	059a      	lsls	r2, r3, #22
 800d402:	d402      	bmi.n	800d40a <_vfiprintf_r+0x32>
 800d404:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d406:	f7fd fc4a 	bl	800ac9e <__retarget_lock_acquire_recursive>
 800d40a:	89ab      	ldrh	r3, [r5, #12]
 800d40c:	071b      	lsls	r3, r3, #28
 800d40e:	d501      	bpl.n	800d414 <_vfiprintf_r+0x3c>
 800d410:	692b      	ldr	r3, [r5, #16]
 800d412:	b9eb      	cbnz	r3, 800d450 <_vfiprintf_r+0x78>
 800d414:	4629      	mov	r1, r5
 800d416:	4630      	mov	r0, r6
 800d418:	f000 f972 	bl	800d700 <__swsetup_r>
 800d41c:	b1c0      	cbz	r0, 800d450 <_vfiprintf_r+0x78>
 800d41e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d420:	07dc      	lsls	r4, r3, #31
 800d422:	d50e      	bpl.n	800d442 <_vfiprintf_r+0x6a>
 800d424:	f04f 30ff 	mov.w	r0, #4294967295
 800d428:	b01d      	add	sp, #116	; 0x74
 800d42a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d42e:	4b7b      	ldr	r3, [pc, #492]	; (800d61c <_vfiprintf_r+0x244>)
 800d430:	429d      	cmp	r5, r3
 800d432:	d101      	bne.n	800d438 <_vfiprintf_r+0x60>
 800d434:	68b5      	ldr	r5, [r6, #8]
 800d436:	e7df      	b.n	800d3f8 <_vfiprintf_r+0x20>
 800d438:	4b79      	ldr	r3, [pc, #484]	; (800d620 <_vfiprintf_r+0x248>)
 800d43a:	429d      	cmp	r5, r3
 800d43c:	bf08      	it	eq
 800d43e:	68f5      	ldreq	r5, [r6, #12]
 800d440:	e7da      	b.n	800d3f8 <_vfiprintf_r+0x20>
 800d442:	89ab      	ldrh	r3, [r5, #12]
 800d444:	0598      	lsls	r0, r3, #22
 800d446:	d4ed      	bmi.n	800d424 <_vfiprintf_r+0x4c>
 800d448:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d44a:	f7fd fc29 	bl	800aca0 <__retarget_lock_release_recursive>
 800d44e:	e7e9      	b.n	800d424 <_vfiprintf_r+0x4c>
 800d450:	2300      	movs	r3, #0
 800d452:	9309      	str	r3, [sp, #36]	; 0x24
 800d454:	2320      	movs	r3, #32
 800d456:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d45a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d45e:	2330      	movs	r3, #48	; 0x30
 800d460:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d624 <_vfiprintf_r+0x24c>
 800d464:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d468:	f04f 0901 	mov.w	r9, #1
 800d46c:	4623      	mov	r3, r4
 800d46e:	469a      	mov	sl, r3
 800d470:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d474:	b10a      	cbz	r2, 800d47a <_vfiprintf_r+0xa2>
 800d476:	2a25      	cmp	r2, #37	; 0x25
 800d478:	d1f9      	bne.n	800d46e <_vfiprintf_r+0x96>
 800d47a:	ebba 0b04 	subs.w	fp, sl, r4
 800d47e:	d00b      	beq.n	800d498 <_vfiprintf_r+0xc0>
 800d480:	465b      	mov	r3, fp
 800d482:	4622      	mov	r2, r4
 800d484:	4629      	mov	r1, r5
 800d486:	4630      	mov	r0, r6
 800d488:	f7ff ff93 	bl	800d3b2 <__sfputs_r>
 800d48c:	3001      	adds	r0, #1
 800d48e:	f000 80aa 	beq.w	800d5e6 <_vfiprintf_r+0x20e>
 800d492:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d494:	445a      	add	r2, fp
 800d496:	9209      	str	r2, [sp, #36]	; 0x24
 800d498:	f89a 3000 	ldrb.w	r3, [sl]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	f000 80a2 	beq.w	800d5e6 <_vfiprintf_r+0x20e>
 800d4a2:	2300      	movs	r3, #0
 800d4a4:	f04f 32ff 	mov.w	r2, #4294967295
 800d4a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d4ac:	f10a 0a01 	add.w	sl, sl, #1
 800d4b0:	9304      	str	r3, [sp, #16]
 800d4b2:	9307      	str	r3, [sp, #28]
 800d4b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d4b8:	931a      	str	r3, [sp, #104]	; 0x68
 800d4ba:	4654      	mov	r4, sl
 800d4bc:	2205      	movs	r2, #5
 800d4be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4c2:	4858      	ldr	r0, [pc, #352]	; (800d624 <_vfiprintf_r+0x24c>)
 800d4c4:	f7f2 fe64 	bl	8000190 <memchr>
 800d4c8:	9a04      	ldr	r2, [sp, #16]
 800d4ca:	b9d8      	cbnz	r0, 800d504 <_vfiprintf_r+0x12c>
 800d4cc:	06d1      	lsls	r1, r2, #27
 800d4ce:	bf44      	itt	mi
 800d4d0:	2320      	movmi	r3, #32
 800d4d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d4d6:	0713      	lsls	r3, r2, #28
 800d4d8:	bf44      	itt	mi
 800d4da:	232b      	movmi	r3, #43	; 0x2b
 800d4dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d4e0:	f89a 3000 	ldrb.w	r3, [sl]
 800d4e4:	2b2a      	cmp	r3, #42	; 0x2a
 800d4e6:	d015      	beq.n	800d514 <_vfiprintf_r+0x13c>
 800d4e8:	9a07      	ldr	r2, [sp, #28]
 800d4ea:	4654      	mov	r4, sl
 800d4ec:	2000      	movs	r0, #0
 800d4ee:	f04f 0c0a 	mov.w	ip, #10
 800d4f2:	4621      	mov	r1, r4
 800d4f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d4f8:	3b30      	subs	r3, #48	; 0x30
 800d4fa:	2b09      	cmp	r3, #9
 800d4fc:	d94e      	bls.n	800d59c <_vfiprintf_r+0x1c4>
 800d4fe:	b1b0      	cbz	r0, 800d52e <_vfiprintf_r+0x156>
 800d500:	9207      	str	r2, [sp, #28]
 800d502:	e014      	b.n	800d52e <_vfiprintf_r+0x156>
 800d504:	eba0 0308 	sub.w	r3, r0, r8
 800d508:	fa09 f303 	lsl.w	r3, r9, r3
 800d50c:	4313      	orrs	r3, r2
 800d50e:	9304      	str	r3, [sp, #16]
 800d510:	46a2      	mov	sl, r4
 800d512:	e7d2      	b.n	800d4ba <_vfiprintf_r+0xe2>
 800d514:	9b03      	ldr	r3, [sp, #12]
 800d516:	1d19      	adds	r1, r3, #4
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	9103      	str	r1, [sp, #12]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	bfbb      	ittet	lt
 800d520:	425b      	neglt	r3, r3
 800d522:	f042 0202 	orrlt.w	r2, r2, #2
 800d526:	9307      	strge	r3, [sp, #28]
 800d528:	9307      	strlt	r3, [sp, #28]
 800d52a:	bfb8      	it	lt
 800d52c:	9204      	strlt	r2, [sp, #16]
 800d52e:	7823      	ldrb	r3, [r4, #0]
 800d530:	2b2e      	cmp	r3, #46	; 0x2e
 800d532:	d10c      	bne.n	800d54e <_vfiprintf_r+0x176>
 800d534:	7863      	ldrb	r3, [r4, #1]
 800d536:	2b2a      	cmp	r3, #42	; 0x2a
 800d538:	d135      	bne.n	800d5a6 <_vfiprintf_r+0x1ce>
 800d53a:	9b03      	ldr	r3, [sp, #12]
 800d53c:	1d1a      	adds	r2, r3, #4
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	9203      	str	r2, [sp, #12]
 800d542:	2b00      	cmp	r3, #0
 800d544:	bfb8      	it	lt
 800d546:	f04f 33ff 	movlt.w	r3, #4294967295
 800d54a:	3402      	adds	r4, #2
 800d54c:	9305      	str	r3, [sp, #20]
 800d54e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800d628 <_vfiprintf_r+0x250>
 800d552:	7821      	ldrb	r1, [r4, #0]
 800d554:	2203      	movs	r2, #3
 800d556:	4650      	mov	r0, sl
 800d558:	f7f2 fe1a 	bl	8000190 <memchr>
 800d55c:	b140      	cbz	r0, 800d570 <_vfiprintf_r+0x198>
 800d55e:	2340      	movs	r3, #64	; 0x40
 800d560:	eba0 000a 	sub.w	r0, r0, sl
 800d564:	fa03 f000 	lsl.w	r0, r3, r0
 800d568:	9b04      	ldr	r3, [sp, #16]
 800d56a:	4303      	orrs	r3, r0
 800d56c:	3401      	adds	r4, #1
 800d56e:	9304      	str	r3, [sp, #16]
 800d570:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d574:	482d      	ldr	r0, [pc, #180]	; (800d62c <_vfiprintf_r+0x254>)
 800d576:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d57a:	2206      	movs	r2, #6
 800d57c:	f7f2 fe08 	bl	8000190 <memchr>
 800d580:	2800      	cmp	r0, #0
 800d582:	d03f      	beq.n	800d604 <_vfiprintf_r+0x22c>
 800d584:	4b2a      	ldr	r3, [pc, #168]	; (800d630 <_vfiprintf_r+0x258>)
 800d586:	bb1b      	cbnz	r3, 800d5d0 <_vfiprintf_r+0x1f8>
 800d588:	9b03      	ldr	r3, [sp, #12]
 800d58a:	3307      	adds	r3, #7
 800d58c:	f023 0307 	bic.w	r3, r3, #7
 800d590:	3308      	adds	r3, #8
 800d592:	9303      	str	r3, [sp, #12]
 800d594:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d596:	443b      	add	r3, r7
 800d598:	9309      	str	r3, [sp, #36]	; 0x24
 800d59a:	e767      	b.n	800d46c <_vfiprintf_r+0x94>
 800d59c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d5a0:	460c      	mov	r4, r1
 800d5a2:	2001      	movs	r0, #1
 800d5a4:	e7a5      	b.n	800d4f2 <_vfiprintf_r+0x11a>
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	3401      	adds	r4, #1
 800d5aa:	9305      	str	r3, [sp, #20]
 800d5ac:	4619      	mov	r1, r3
 800d5ae:	f04f 0c0a 	mov.w	ip, #10
 800d5b2:	4620      	mov	r0, r4
 800d5b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d5b8:	3a30      	subs	r2, #48	; 0x30
 800d5ba:	2a09      	cmp	r2, #9
 800d5bc:	d903      	bls.n	800d5c6 <_vfiprintf_r+0x1ee>
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d0c5      	beq.n	800d54e <_vfiprintf_r+0x176>
 800d5c2:	9105      	str	r1, [sp, #20]
 800d5c4:	e7c3      	b.n	800d54e <_vfiprintf_r+0x176>
 800d5c6:	fb0c 2101 	mla	r1, ip, r1, r2
 800d5ca:	4604      	mov	r4, r0
 800d5cc:	2301      	movs	r3, #1
 800d5ce:	e7f0      	b.n	800d5b2 <_vfiprintf_r+0x1da>
 800d5d0:	ab03      	add	r3, sp, #12
 800d5d2:	9300      	str	r3, [sp, #0]
 800d5d4:	462a      	mov	r2, r5
 800d5d6:	4b17      	ldr	r3, [pc, #92]	; (800d634 <_vfiprintf_r+0x25c>)
 800d5d8:	a904      	add	r1, sp, #16
 800d5da:	4630      	mov	r0, r6
 800d5dc:	f7fd fcaa 	bl	800af34 <_printf_float>
 800d5e0:	4607      	mov	r7, r0
 800d5e2:	1c78      	adds	r0, r7, #1
 800d5e4:	d1d6      	bne.n	800d594 <_vfiprintf_r+0x1bc>
 800d5e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d5e8:	07d9      	lsls	r1, r3, #31
 800d5ea:	d405      	bmi.n	800d5f8 <_vfiprintf_r+0x220>
 800d5ec:	89ab      	ldrh	r3, [r5, #12]
 800d5ee:	059a      	lsls	r2, r3, #22
 800d5f0:	d402      	bmi.n	800d5f8 <_vfiprintf_r+0x220>
 800d5f2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d5f4:	f7fd fb54 	bl	800aca0 <__retarget_lock_release_recursive>
 800d5f8:	89ab      	ldrh	r3, [r5, #12]
 800d5fa:	065b      	lsls	r3, r3, #25
 800d5fc:	f53f af12 	bmi.w	800d424 <_vfiprintf_r+0x4c>
 800d600:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d602:	e711      	b.n	800d428 <_vfiprintf_r+0x50>
 800d604:	ab03      	add	r3, sp, #12
 800d606:	9300      	str	r3, [sp, #0]
 800d608:	462a      	mov	r2, r5
 800d60a:	4b0a      	ldr	r3, [pc, #40]	; (800d634 <_vfiprintf_r+0x25c>)
 800d60c:	a904      	add	r1, sp, #16
 800d60e:	4630      	mov	r0, r6
 800d610:	f7fd ff28 	bl	800b464 <_printf_i>
 800d614:	e7e4      	b.n	800d5e0 <_vfiprintf_r+0x208>
 800d616:	bf00      	nop
 800d618:	0800e2f8 	.word	0x0800e2f8
 800d61c:	0800e318 	.word	0x0800e318
 800d620:	0800e2d8 	.word	0x0800e2d8
 800d624:	0800e5f4 	.word	0x0800e5f4
 800d628:	0800e5fa 	.word	0x0800e5fa
 800d62c:	0800e5fe 	.word	0x0800e5fe
 800d630:	0800af35 	.word	0x0800af35
 800d634:	0800d3b3 	.word	0x0800d3b3

0800d638 <_read_r>:
 800d638:	b538      	push	{r3, r4, r5, lr}
 800d63a:	4d07      	ldr	r5, [pc, #28]	; (800d658 <_read_r+0x20>)
 800d63c:	4604      	mov	r4, r0
 800d63e:	4608      	mov	r0, r1
 800d640:	4611      	mov	r1, r2
 800d642:	2200      	movs	r2, #0
 800d644:	602a      	str	r2, [r5, #0]
 800d646:	461a      	mov	r2, r3
 800d648:	f7f4 fbeb 	bl	8001e22 <_read>
 800d64c:	1c43      	adds	r3, r0, #1
 800d64e:	d102      	bne.n	800d656 <_read_r+0x1e>
 800d650:	682b      	ldr	r3, [r5, #0]
 800d652:	b103      	cbz	r3, 800d656 <_read_r+0x1e>
 800d654:	6023      	str	r3, [r4, #0]
 800d656:	bd38      	pop	{r3, r4, r5, pc}
 800d658:	20001d08 	.word	0x20001d08

0800d65c <__swbuf_r>:
 800d65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d65e:	460e      	mov	r6, r1
 800d660:	4614      	mov	r4, r2
 800d662:	4605      	mov	r5, r0
 800d664:	b118      	cbz	r0, 800d66e <__swbuf_r+0x12>
 800d666:	6983      	ldr	r3, [r0, #24]
 800d668:	b90b      	cbnz	r3, 800d66e <__swbuf_r+0x12>
 800d66a:	f7fd fa55 	bl	800ab18 <__sinit>
 800d66e:	4b21      	ldr	r3, [pc, #132]	; (800d6f4 <__swbuf_r+0x98>)
 800d670:	429c      	cmp	r4, r3
 800d672:	d12b      	bne.n	800d6cc <__swbuf_r+0x70>
 800d674:	686c      	ldr	r4, [r5, #4]
 800d676:	69a3      	ldr	r3, [r4, #24]
 800d678:	60a3      	str	r3, [r4, #8]
 800d67a:	89a3      	ldrh	r3, [r4, #12]
 800d67c:	071a      	lsls	r2, r3, #28
 800d67e:	d52f      	bpl.n	800d6e0 <__swbuf_r+0x84>
 800d680:	6923      	ldr	r3, [r4, #16]
 800d682:	b36b      	cbz	r3, 800d6e0 <__swbuf_r+0x84>
 800d684:	6923      	ldr	r3, [r4, #16]
 800d686:	6820      	ldr	r0, [r4, #0]
 800d688:	1ac0      	subs	r0, r0, r3
 800d68a:	6963      	ldr	r3, [r4, #20]
 800d68c:	b2f6      	uxtb	r6, r6
 800d68e:	4283      	cmp	r3, r0
 800d690:	4637      	mov	r7, r6
 800d692:	dc04      	bgt.n	800d69e <__swbuf_r+0x42>
 800d694:	4621      	mov	r1, r4
 800d696:	4628      	mov	r0, r5
 800d698:	f7ff f8c6 	bl	800c828 <_fflush_r>
 800d69c:	bb30      	cbnz	r0, 800d6ec <__swbuf_r+0x90>
 800d69e:	68a3      	ldr	r3, [r4, #8]
 800d6a0:	3b01      	subs	r3, #1
 800d6a2:	60a3      	str	r3, [r4, #8]
 800d6a4:	6823      	ldr	r3, [r4, #0]
 800d6a6:	1c5a      	adds	r2, r3, #1
 800d6a8:	6022      	str	r2, [r4, #0]
 800d6aa:	701e      	strb	r6, [r3, #0]
 800d6ac:	6963      	ldr	r3, [r4, #20]
 800d6ae:	3001      	adds	r0, #1
 800d6b0:	4283      	cmp	r3, r0
 800d6b2:	d004      	beq.n	800d6be <__swbuf_r+0x62>
 800d6b4:	89a3      	ldrh	r3, [r4, #12]
 800d6b6:	07db      	lsls	r3, r3, #31
 800d6b8:	d506      	bpl.n	800d6c8 <__swbuf_r+0x6c>
 800d6ba:	2e0a      	cmp	r6, #10
 800d6bc:	d104      	bne.n	800d6c8 <__swbuf_r+0x6c>
 800d6be:	4621      	mov	r1, r4
 800d6c0:	4628      	mov	r0, r5
 800d6c2:	f7ff f8b1 	bl	800c828 <_fflush_r>
 800d6c6:	b988      	cbnz	r0, 800d6ec <__swbuf_r+0x90>
 800d6c8:	4638      	mov	r0, r7
 800d6ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6cc:	4b0a      	ldr	r3, [pc, #40]	; (800d6f8 <__swbuf_r+0x9c>)
 800d6ce:	429c      	cmp	r4, r3
 800d6d0:	d101      	bne.n	800d6d6 <__swbuf_r+0x7a>
 800d6d2:	68ac      	ldr	r4, [r5, #8]
 800d6d4:	e7cf      	b.n	800d676 <__swbuf_r+0x1a>
 800d6d6:	4b09      	ldr	r3, [pc, #36]	; (800d6fc <__swbuf_r+0xa0>)
 800d6d8:	429c      	cmp	r4, r3
 800d6da:	bf08      	it	eq
 800d6dc:	68ec      	ldreq	r4, [r5, #12]
 800d6de:	e7ca      	b.n	800d676 <__swbuf_r+0x1a>
 800d6e0:	4621      	mov	r1, r4
 800d6e2:	4628      	mov	r0, r5
 800d6e4:	f000 f80c 	bl	800d700 <__swsetup_r>
 800d6e8:	2800      	cmp	r0, #0
 800d6ea:	d0cb      	beq.n	800d684 <__swbuf_r+0x28>
 800d6ec:	f04f 37ff 	mov.w	r7, #4294967295
 800d6f0:	e7ea      	b.n	800d6c8 <__swbuf_r+0x6c>
 800d6f2:	bf00      	nop
 800d6f4:	0800e2f8 	.word	0x0800e2f8
 800d6f8:	0800e318 	.word	0x0800e318
 800d6fc:	0800e2d8 	.word	0x0800e2d8

0800d700 <__swsetup_r>:
 800d700:	4b32      	ldr	r3, [pc, #200]	; (800d7cc <__swsetup_r+0xcc>)
 800d702:	b570      	push	{r4, r5, r6, lr}
 800d704:	681d      	ldr	r5, [r3, #0]
 800d706:	4606      	mov	r6, r0
 800d708:	460c      	mov	r4, r1
 800d70a:	b125      	cbz	r5, 800d716 <__swsetup_r+0x16>
 800d70c:	69ab      	ldr	r3, [r5, #24]
 800d70e:	b913      	cbnz	r3, 800d716 <__swsetup_r+0x16>
 800d710:	4628      	mov	r0, r5
 800d712:	f7fd fa01 	bl	800ab18 <__sinit>
 800d716:	4b2e      	ldr	r3, [pc, #184]	; (800d7d0 <__swsetup_r+0xd0>)
 800d718:	429c      	cmp	r4, r3
 800d71a:	d10f      	bne.n	800d73c <__swsetup_r+0x3c>
 800d71c:	686c      	ldr	r4, [r5, #4]
 800d71e:	89a3      	ldrh	r3, [r4, #12]
 800d720:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d724:	0719      	lsls	r1, r3, #28
 800d726:	d42c      	bmi.n	800d782 <__swsetup_r+0x82>
 800d728:	06dd      	lsls	r5, r3, #27
 800d72a:	d411      	bmi.n	800d750 <__swsetup_r+0x50>
 800d72c:	2309      	movs	r3, #9
 800d72e:	6033      	str	r3, [r6, #0]
 800d730:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d734:	81a3      	strh	r3, [r4, #12]
 800d736:	f04f 30ff 	mov.w	r0, #4294967295
 800d73a:	e03e      	b.n	800d7ba <__swsetup_r+0xba>
 800d73c:	4b25      	ldr	r3, [pc, #148]	; (800d7d4 <__swsetup_r+0xd4>)
 800d73e:	429c      	cmp	r4, r3
 800d740:	d101      	bne.n	800d746 <__swsetup_r+0x46>
 800d742:	68ac      	ldr	r4, [r5, #8]
 800d744:	e7eb      	b.n	800d71e <__swsetup_r+0x1e>
 800d746:	4b24      	ldr	r3, [pc, #144]	; (800d7d8 <__swsetup_r+0xd8>)
 800d748:	429c      	cmp	r4, r3
 800d74a:	bf08      	it	eq
 800d74c:	68ec      	ldreq	r4, [r5, #12]
 800d74e:	e7e6      	b.n	800d71e <__swsetup_r+0x1e>
 800d750:	0758      	lsls	r0, r3, #29
 800d752:	d512      	bpl.n	800d77a <__swsetup_r+0x7a>
 800d754:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d756:	b141      	cbz	r1, 800d76a <__swsetup_r+0x6a>
 800d758:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d75c:	4299      	cmp	r1, r3
 800d75e:	d002      	beq.n	800d766 <__swsetup_r+0x66>
 800d760:	4630      	mov	r0, r6
 800d762:	f7ff fc6b 	bl	800d03c <_free_r>
 800d766:	2300      	movs	r3, #0
 800d768:	6363      	str	r3, [r4, #52]	; 0x34
 800d76a:	89a3      	ldrh	r3, [r4, #12]
 800d76c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d770:	81a3      	strh	r3, [r4, #12]
 800d772:	2300      	movs	r3, #0
 800d774:	6063      	str	r3, [r4, #4]
 800d776:	6923      	ldr	r3, [r4, #16]
 800d778:	6023      	str	r3, [r4, #0]
 800d77a:	89a3      	ldrh	r3, [r4, #12]
 800d77c:	f043 0308 	orr.w	r3, r3, #8
 800d780:	81a3      	strh	r3, [r4, #12]
 800d782:	6923      	ldr	r3, [r4, #16]
 800d784:	b94b      	cbnz	r3, 800d79a <__swsetup_r+0x9a>
 800d786:	89a3      	ldrh	r3, [r4, #12]
 800d788:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d78c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d790:	d003      	beq.n	800d79a <__swsetup_r+0x9a>
 800d792:	4621      	mov	r1, r4
 800d794:	4630      	mov	r0, r6
 800d796:	f000 f84d 	bl	800d834 <__smakebuf_r>
 800d79a:	89a0      	ldrh	r0, [r4, #12]
 800d79c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d7a0:	f010 0301 	ands.w	r3, r0, #1
 800d7a4:	d00a      	beq.n	800d7bc <__swsetup_r+0xbc>
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	60a3      	str	r3, [r4, #8]
 800d7aa:	6963      	ldr	r3, [r4, #20]
 800d7ac:	425b      	negs	r3, r3
 800d7ae:	61a3      	str	r3, [r4, #24]
 800d7b0:	6923      	ldr	r3, [r4, #16]
 800d7b2:	b943      	cbnz	r3, 800d7c6 <__swsetup_r+0xc6>
 800d7b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d7b8:	d1ba      	bne.n	800d730 <__swsetup_r+0x30>
 800d7ba:	bd70      	pop	{r4, r5, r6, pc}
 800d7bc:	0781      	lsls	r1, r0, #30
 800d7be:	bf58      	it	pl
 800d7c0:	6963      	ldrpl	r3, [r4, #20]
 800d7c2:	60a3      	str	r3, [r4, #8]
 800d7c4:	e7f4      	b.n	800d7b0 <__swsetup_r+0xb0>
 800d7c6:	2000      	movs	r0, #0
 800d7c8:	e7f7      	b.n	800d7ba <__swsetup_r+0xba>
 800d7ca:	bf00      	nop
 800d7cc:	20000010 	.word	0x20000010
 800d7d0:	0800e2f8 	.word	0x0800e2f8
 800d7d4:	0800e318 	.word	0x0800e318
 800d7d8:	0800e2d8 	.word	0x0800e2d8

0800d7dc <abort>:
 800d7dc:	b508      	push	{r3, lr}
 800d7de:	2006      	movs	r0, #6
 800d7e0:	f000 f8ec 	bl	800d9bc <raise>
 800d7e4:	2001      	movs	r0, #1
 800d7e6:	f7f4 fb12 	bl	8001e0e <_exit>

0800d7ea <__swhatbuf_r>:
 800d7ea:	b570      	push	{r4, r5, r6, lr}
 800d7ec:	460e      	mov	r6, r1
 800d7ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7f2:	2900      	cmp	r1, #0
 800d7f4:	b096      	sub	sp, #88	; 0x58
 800d7f6:	4614      	mov	r4, r2
 800d7f8:	461d      	mov	r5, r3
 800d7fa:	da08      	bge.n	800d80e <__swhatbuf_r+0x24>
 800d7fc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d800:	2200      	movs	r2, #0
 800d802:	602a      	str	r2, [r5, #0]
 800d804:	061a      	lsls	r2, r3, #24
 800d806:	d410      	bmi.n	800d82a <__swhatbuf_r+0x40>
 800d808:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d80c:	e00e      	b.n	800d82c <__swhatbuf_r+0x42>
 800d80e:	466a      	mov	r2, sp
 800d810:	f000 f8fe 	bl	800da10 <_fstat_r>
 800d814:	2800      	cmp	r0, #0
 800d816:	dbf1      	blt.n	800d7fc <__swhatbuf_r+0x12>
 800d818:	9a01      	ldr	r2, [sp, #4]
 800d81a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d81e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d822:	425a      	negs	r2, r3
 800d824:	415a      	adcs	r2, r3
 800d826:	602a      	str	r2, [r5, #0]
 800d828:	e7ee      	b.n	800d808 <__swhatbuf_r+0x1e>
 800d82a:	2340      	movs	r3, #64	; 0x40
 800d82c:	2000      	movs	r0, #0
 800d82e:	6023      	str	r3, [r4, #0]
 800d830:	b016      	add	sp, #88	; 0x58
 800d832:	bd70      	pop	{r4, r5, r6, pc}

0800d834 <__smakebuf_r>:
 800d834:	898b      	ldrh	r3, [r1, #12]
 800d836:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d838:	079d      	lsls	r5, r3, #30
 800d83a:	4606      	mov	r6, r0
 800d83c:	460c      	mov	r4, r1
 800d83e:	d507      	bpl.n	800d850 <__smakebuf_r+0x1c>
 800d840:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d844:	6023      	str	r3, [r4, #0]
 800d846:	6123      	str	r3, [r4, #16]
 800d848:	2301      	movs	r3, #1
 800d84a:	6163      	str	r3, [r4, #20]
 800d84c:	b002      	add	sp, #8
 800d84e:	bd70      	pop	{r4, r5, r6, pc}
 800d850:	ab01      	add	r3, sp, #4
 800d852:	466a      	mov	r2, sp
 800d854:	f7ff ffc9 	bl	800d7ea <__swhatbuf_r>
 800d858:	9900      	ldr	r1, [sp, #0]
 800d85a:	4605      	mov	r5, r0
 800d85c:	4630      	mov	r0, r6
 800d85e:	f7fd fa57 	bl	800ad10 <_malloc_r>
 800d862:	b948      	cbnz	r0, 800d878 <__smakebuf_r+0x44>
 800d864:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d868:	059a      	lsls	r2, r3, #22
 800d86a:	d4ef      	bmi.n	800d84c <__smakebuf_r+0x18>
 800d86c:	f023 0303 	bic.w	r3, r3, #3
 800d870:	f043 0302 	orr.w	r3, r3, #2
 800d874:	81a3      	strh	r3, [r4, #12]
 800d876:	e7e3      	b.n	800d840 <__smakebuf_r+0xc>
 800d878:	4b0d      	ldr	r3, [pc, #52]	; (800d8b0 <__smakebuf_r+0x7c>)
 800d87a:	62b3      	str	r3, [r6, #40]	; 0x28
 800d87c:	89a3      	ldrh	r3, [r4, #12]
 800d87e:	6020      	str	r0, [r4, #0]
 800d880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d884:	81a3      	strh	r3, [r4, #12]
 800d886:	9b00      	ldr	r3, [sp, #0]
 800d888:	6163      	str	r3, [r4, #20]
 800d88a:	9b01      	ldr	r3, [sp, #4]
 800d88c:	6120      	str	r0, [r4, #16]
 800d88e:	b15b      	cbz	r3, 800d8a8 <__smakebuf_r+0x74>
 800d890:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d894:	4630      	mov	r0, r6
 800d896:	f000 f8cd 	bl	800da34 <_isatty_r>
 800d89a:	b128      	cbz	r0, 800d8a8 <__smakebuf_r+0x74>
 800d89c:	89a3      	ldrh	r3, [r4, #12]
 800d89e:	f023 0303 	bic.w	r3, r3, #3
 800d8a2:	f043 0301 	orr.w	r3, r3, #1
 800d8a6:	81a3      	strh	r3, [r4, #12]
 800d8a8:	89a0      	ldrh	r0, [r4, #12]
 800d8aa:	4305      	orrs	r5, r0
 800d8ac:	81a5      	strh	r5, [r4, #12]
 800d8ae:	e7cd      	b.n	800d84c <__smakebuf_r+0x18>
 800d8b0:	0800aab1 	.word	0x0800aab1

0800d8b4 <__ascii_mbtowc>:
 800d8b4:	b082      	sub	sp, #8
 800d8b6:	b901      	cbnz	r1, 800d8ba <__ascii_mbtowc+0x6>
 800d8b8:	a901      	add	r1, sp, #4
 800d8ba:	b142      	cbz	r2, 800d8ce <__ascii_mbtowc+0x1a>
 800d8bc:	b14b      	cbz	r3, 800d8d2 <__ascii_mbtowc+0x1e>
 800d8be:	7813      	ldrb	r3, [r2, #0]
 800d8c0:	600b      	str	r3, [r1, #0]
 800d8c2:	7812      	ldrb	r2, [r2, #0]
 800d8c4:	1e10      	subs	r0, r2, #0
 800d8c6:	bf18      	it	ne
 800d8c8:	2001      	movne	r0, #1
 800d8ca:	b002      	add	sp, #8
 800d8cc:	4770      	bx	lr
 800d8ce:	4610      	mov	r0, r2
 800d8d0:	e7fb      	b.n	800d8ca <__ascii_mbtowc+0x16>
 800d8d2:	f06f 0001 	mvn.w	r0, #1
 800d8d6:	e7f8      	b.n	800d8ca <__ascii_mbtowc+0x16>

0800d8d8 <memmove>:
 800d8d8:	4288      	cmp	r0, r1
 800d8da:	b510      	push	{r4, lr}
 800d8dc:	eb01 0402 	add.w	r4, r1, r2
 800d8e0:	d902      	bls.n	800d8e8 <memmove+0x10>
 800d8e2:	4284      	cmp	r4, r0
 800d8e4:	4623      	mov	r3, r4
 800d8e6:	d807      	bhi.n	800d8f8 <memmove+0x20>
 800d8e8:	1e43      	subs	r3, r0, #1
 800d8ea:	42a1      	cmp	r1, r4
 800d8ec:	d008      	beq.n	800d900 <memmove+0x28>
 800d8ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d8f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d8f6:	e7f8      	b.n	800d8ea <memmove+0x12>
 800d8f8:	4402      	add	r2, r0
 800d8fa:	4601      	mov	r1, r0
 800d8fc:	428a      	cmp	r2, r1
 800d8fe:	d100      	bne.n	800d902 <memmove+0x2a>
 800d900:	bd10      	pop	{r4, pc}
 800d902:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d906:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d90a:	e7f7      	b.n	800d8fc <memmove+0x24>

0800d90c <_realloc_r>:
 800d90c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d910:	4680      	mov	r8, r0
 800d912:	4614      	mov	r4, r2
 800d914:	460e      	mov	r6, r1
 800d916:	b921      	cbnz	r1, 800d922 <_realloc_r+0x16>
 800d918:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d91c:	4611      	mov	r1, r2
 800d91e:	f7fd b9f7 	b.w	800ad10 <_malloc_r>
 800d922:	b92a      	cbnz	r2, 800d930 <_realloc_r+0x24>
 800d924:	f7ff fb8a 	bl	800d03c <_free_r>
 800d928:	4625      	mov	r5, r4
 800d92a:	4628      	mov	r0, r5
 800d92c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d930:	f000 f890 	bl	800da54 <_malloc_usable_size_r>
 800d934:	4284      	cmp	r4, r0
 800d936:	4607      	mov	r7, r0
 800d938:	d802      	bhi.n	800d940 <_realloc_r+0x34>
 800d93a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d93e:	d812      	bhi.n	800d966 <_realloc_r+0x5a>
 800d940:	4621      	mov	r1, r4
 800d942:	4640      	mov	r0, r8
 800d944:	f7fd f9e4 	bl	800ad10 <_malloc_r>
 800d948:	4605      	mov	r5, r0
 800d94a:	2800      	cmp	r0, #0
 800d94c:	d0ed      	beq.n	800d92a <_realloc_r+0x1e>
 800d94e:	42bc      	cmp	r4, r7
 800d950:	4622      	mov	r2, r4
 800d952:	4631      	mov	r1, r6
 800d954:	bf28      	it	cs
 800d956:	463a      	movcs	r2, r7
 800d958:	f7fd f9a3 	bl	800aca2 <memcpy>
 800d95c:	4631      	mov	r1, r6
 800d95e:	4640      	mov	r0, r8
 800d960:	f7ff fb6c 	bl	800d03c <_free_r>
 800d964:	e7e1      	b.n	800d92a <_realloc_r+0x1e>
 800d966:	4635      	mov	r5, r6
 800d968:	e7df      	b.n	800d92a <_realloc_r+0x1e>

0800d96a <_raise_r>:
 800d96a:	291f      	cmp	r1, #31
 800d96c:	b538      	push	{r3, r4, r5, lr}
 800d96e:	4604      	mov	r4, r0
 800d970:	460d      	mov	r5, r1
 800d972:	d904      	bls.n	800d97e <_raise_r+0x14>
 800d974:	2316      	movs	r3, #22
 800d976:	6003      	str	r3, [r0, #0]
 800d978:	f04f 30ff 	mov.w	r0, #4294967295
 800d97c:	bd38      	pop	{r3, r4, r5, pc}
 800d97e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d980:	b112      	cbz	r2, 800d988 <_raise_r+0x1e>
 800d982:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d986:	b94b      	cbnz	r3, 800d99c <_raise_r+0x32>
 800d988:	4620      	mov	r0, r4
 800d98a:	f000 f831 	bl	800d9f0 <_getpid_r>
 800d98e:	462a      	mov	r2, r5
 800d990:	4601      	mov	r1, r0
 800d992:	4620      	mov	r0, r4
 800d994:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d998:	f000 b818 	b.w	800d9cc <_kill_r>
 800d99c:	2b01      	cmp	r3, #1
 800d99e:	d00a      	beq.n	800d9b6 <_raise_r+0x4c>
 800d9a0:	1c59      	adds	r1, r3, #1
 800d9a2:	d103      	bne.n	800d9ac <_raise_r+0x42>
 800d9a4:	2316      	movs	r3, #22
 800d9a6:	6003      	str	r3, [r0, #0]
 800d9a8:	2001      	movs	r0, #1
 800d9aa:	e7e7      	b.n	800d97c <_raise_r+0x12>
 800d9ac:	2400      	movs	r4, #0
 800d9ae:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d9b2:	4628      	mov	r0, r5
 800d9b4:	4798      	blx	r3
 800d9b6:	2000      	movs	r0, #0
 800d9b8:	e7e0      	b.n	800d97c <_raise_r+0x12>
	...

0800d9bc <raise>:
 800d9bc:	4b02      	ldr	r3, [pc, #8]	; (800d9c8 <raise+0xc>)
 800d9be:	4601      	mov	r1, r0
 800d9c0:	6818      	ldr	r0, [r3, #0]
 800d9c2:	f7ff bfd2 	b.w	800d96a <_raise_r>
 800d9c6:	bf00      	nop
 800d9c8:	20000010 	.word	0x20000010

0800d9cc <_kill_r>:
 800d9cc:	b538      	push	{r3, r4, r5, lr}
 800d9ce:	4d07      	ldr	r5, [pc, #28]	; (800d9ec <_kill_r+0x20>)
 800d9d0:	2300      	movs	r3, #0
 800d9d2:	4604      	mov	r4, r0
 800d9d4:	4608      	mov	r0, r1
 800d9d6:	4611      	mov	r1, r2
 800d9d8:	602b      	str	r3, [r5, #0]
 800d9da:	f7f4 fa08 	bl	8001dee <_kill>
 800d9de:	1c43      	adds	r3, r0, #1
 800d9e0:	d102      	bne.n	800d9e8 <_kill_r+0x1c>
 800d9e2:	682b      	ldr	r3, [r5, #0]
 800d9e4:	b103      	cbz	r3, 800d9e8 <_kill_r+0x1c>
 800d9e6:	6023      	str	r3, [r4, #0]
 800d9e8:	bd38      	pop	{r3, r4, r5, pc}
 800d9ea:	bf00      	nop
 800d9ec:	20001d08 	.word	0x20001d08

0800d9f0 <_getpid_r>:
 800d9f0:	f7f4 b9f6 	b.w	8001de0 <_getpid>

0800d9f4 <__ascii_wctomb>:
 800d9f4:	4603      	mov	r3, r0
 800d9f6:	4608      	mov	r0, r1
 800d9f8:	b141      	cbz	r1, 800da0c <__ascii_wctomb+0x18>
 800d9fa:	2aff      	cmp	r2, #255	; 0xff
 800d9fc:	d904      	bls.n	800da08 <__ascii_wctomb+0x14>
 800d9fe:	228a      	movs	r2, #138	; 0x8a
 800da00:	601a      	str	r2, [r3, #0]
 800da02:	f04f 30ff 	mov.w	r0, #4294967295
 800da06:	4770      	bx	lr
 800da08:	700a      	strb	r2, [r1, #0]
 800da0a:	2001      	movs	r0, #1
 800da0c:	4770      	bx	lr
	...

0800da10 <_fstat_r>:
 800da10:	b538      	push	{r3, r4, r5, lr}
 800da12:	4d07      	ldr	r5, [pc, #28]	; (800da30 <_fstat_r+0x20>)
 800da14:	2300      	movs	r3, #0
 800da16:	4604      	mov	r4, r0
 800da18:	4608      	mov	r0, r1
 800da1a:	4611      	mov	r1, r2
 800da1c:	602b      	str	r3, [r5, #0]
 800da1e:	f7f4 fa44 	bl	8001eaa <_fstat>
 800da22:	1c43      	adds	r3, r0, #1
 800da24:	d102      	bne.n	800da2c <_fstat_r+0x1c>
 800da26:	682b      	ldr	r3, [r5, #0]
 800da28:	b103      	cbz	r3, 800da2c <_fstat_r+0x1c>
 800da2a:	6023      	str	r3, [r4, #0]
 800da2c:	bd38      	pop	{r3, r4, r5, pc}
 800da2e:	bf00      	nop
 800da30:	20001d08 	.word	0x20001d08

0800da34 <_isatty_r>:
 800da34:	b538      	push	{r3, r4, r5, lr}
 800da36:	4d06      	ldr	r5, [pc, #24]	; (800da50 <_isatty_r+0x1c>)
 800da38:	2300      	movs	r3, #0
 800da3a:	4604      	mov	r4, r0
 800da3c:	4608      	mov	r0, r1
 800da3e:	602b      	str	r3, [r5, #0]
 800da40:	f7f4 fa42 	bl	8001ec8 <_isatty>
 800da44:	1c43      	adds	r3, r0, #1
 800da46:	d102      	bne.n	800da4e <_isatty_r+0x1a>
 800da48:	682b      	ldr	r3, [r5, #0]
 800da4a:	b103      	cbz	r3, 800da4e <_isatty_r+0x1a>
 800da4c:	6023      	str	r3, [r4, #0]
 800da4e:	bd38      	pop	{r3, r4, r5, pc}
 800da50:	20001d08 	.word	0x20001d08

0800da54 <_malloc_usable_size_r>:
 800da54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da58:	1f18      	subs	r0, r3, #4
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	bfbc      	itt	lt
 800da5e:	580b      	ldrlt	r3, [r1, r0]
 800da60:	18c0      	addlt	r0, r0, r3
 800da62:	4770      	bx	lr

0800da64 <_init>:
 800da64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da66:	bf00      	nop
 800da68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da6a:	bc08      	pop	{r3}
 800da6c:	469e      	mov	lr, r3
 800da6e:	4770      	bx	lr

0800da70 <_fini>:
 800da70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da72:	bf00      	nop
 800da74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800da76:	bc08      	pop	{r3}
 800da78:	469e      	mov	lr, r3
 800da7a:	4770      	bx	lr
