
lora-e5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a770  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000908  0800a8b0  0800a8b0  0001a8b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b1b8  0800b1b8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800b1b8  0800b1b8  0001b1b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b1c0  0800b1c0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b1c0  0800b1c0  0001b1c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b1c4  0800b1c4  0001b1c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800b1c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019f4  20000074  0800b23c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a68  0800b23c  00021a68  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000296c1  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000051f9  00000000  00000000  0004975f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002508  00000000  00000000  0004e958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002310  00000000  00000000  00050e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021d50  00000000  00000000  00053170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028688  00000000  00000000  00074ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c94e6  00000000  00000000  0009d548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00166a2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a960  00000000  00000000  00166a80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000074 	.word	0x20000074
 800015c:	00000000 	.word	0x00000000
 8000160:	0800a898 	.word	0x0800a898

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000078 	.word	0x20000078
 800017c:	0800a898 	.word	0x0800a898

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b974 	b.w	8000530 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9e08      	ldr	r6, [sp, #32]
 8000266:	460d      	mov	r5, r1
 8000268:	4604      	mov	r4, r0
 800026a:	4688      	mov	r8, r1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d14d      	bne.n	800030c <__udivmoddi4+0xac>
 8000270:	428a      	cmp	r2, r1
 8000272:	4694      	mov	ip, r2
 8000274:	d968      	bls.n	8000348 <__udivmoddi4+0xe8>
 8000276:	fab2 f282 	clz	r2, r2
 800027a:	b152      	cbz	r2, 8000292 <__udivmoddi4+0x32>
 800027c:	fa01 f302 	lsl.w	r3, r1, r2
 8000280:	f1c2 0120 	rsb	r1, r2, #32
 8000284:	fa20 f101 	lsr.w	r1, r0, r1
 8000288:	fa0c fc02 	lsl.w	ip, ip, r2
 800028c:	ea41 0803 	orr.w	r8, r1, r3
 8000290:	4094      	lsls	r4, r2
 8000292:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000296:	0c21      	lsrs	r1, r4, #16
 8000298:	fbb8 fef5 	udiv	lr, r8, r5
 800029c:	fa1f f78c 	uxth.w	r7, ip
 80002a0:	fb05 831e 	mls	r3, r5, lr, r8
 80002a4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002a8:	fb0e f107 	mul.w	r1, lr, r7
 80002ac:	4299      	cmp	r1, r3
 80002ae:	d90b      	bls.n	80002c8 <__udivmoddi4+0x68>
 80002b0:	eb1c 0303 	adds.w	r3, ip, r3
 80002b4:	f10e 30ff 	add.w	r0, lr, #4294967295
 80002b8:	f080 811e 	bcs.w	80004f8 <__udivmoddi4+0x298>
 80002bc:	4299      	cmp	r1, r3
 80002be:	f240 811b 	bls.w	80004f8 <__udivmoddi4+0x298>
 80002c2:	f1ae 0e02 	sub.w	lr, lr, #2
 80002c6:	4463      	add	r3, ip
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f5 	udiv	r0, r3, r5
 80002d0:	fb05 3310 	mls	r3, r5, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 f707 	mul.w	r7, r0, r7
 80002dc:	42a7      	cmp	r7, r4
 80002de:	d90a      	bls.n	80002f6 <__udivmoddi4+0x96>
 80002e0:	eb1c 0404 	adds.w	r4, ip, r4
 80002e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e8:	f080 8108 	bcs.w	80004fc <__udivmoddi4+0x29c>
 80002ec:	42a7      	cmp	r7, r4
 80002ee:	f240 8105 	bls.w	80004fc <__udivmoddi4+0x29c>
 80002f2:	4464      	add	r4, ip
 80002f4:	3802      	subs	r0, #2
 80002f6:	1be4      	subs	r4, r4, r7
 80002f8:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80002fc:	2100      	movs	r1, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa8>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	428b      	cmp	r3, r1
 800030e:	d908      	bls.n	8000322 <__udivmoddi4+0xc2>
 8000310:	2e00      	cmp	r6, #0
 8000312:	f000 80ee 	beq.w	80004f2 <__udivmoddi4+0x292>
 8000316:	2100      	movs	r1, #0
 8000318:	e9c6 0500 	strd	r0, r5, [r6]
 800031c:	4608      	mov	r0, r1
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d14a      	bne.n	80003c0 <__udivmoddi4+0x160>
 800032a:	42ab      	cmp	r3, r5
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xd4>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80f9 	bhi.w	8000526 <__udivmoddi4+0x2c6>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb65 0303 	sbc.w	r3, r5, r3
 800033a:	2001      	movs	r0, #1
 800033c:	4698      	mov	r8, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d0e2      	beq.n	8000308 <__udivmoddi4+0xa8>
 8000342:	e9c6 4800 	strd	r4, r8, [r6]
 8000346:	e7df      	b.n	8000308 <__udivmoddi4+0xa8>
 8000348:	b902      	cbnz	r2, 800034c <__udivmoddi4+0xec>
 800034a:	deff      	udf	#255	; 0xff
 800034c:	fab2 f282 	clz	r2, r2
 8000350:	2a00      	cmp	r2, #0
 8000352:	f040 8091 	bne.w	8000478 <__udivmoddi4+0x218>
 8000356:	eba1 050c 	sub.w	r5, r1, ip
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2101      	movs	r1, #1
 8000364:	fbb5 f3f7 	udiv	r3, r5, r7
 8000368:	fb07 5013 	mls	r0, r7, r3, r5
 800036c:	0c25      	lsrs	r5, r4, #16
 800036e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000372:	fb0e f003 	mul.w	r0, lr, r3
 8000376:	42a8      	cmp	r0, r5
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x12c>
 800037a:	eb1c 0505 	adds.w	r5, ip, r5
 800037e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x12a>
 8000384:	42a8      	cmp	r0, r5
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2c0>
 800038a:	4643      	mov	r3, r8
 800038c:	1a2d      	subs	r5, r5, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb5 f0f7 	udiv	r0, r5, r7
 8000394:	fb07 5510 	mls	r5, r7, r0, r5
 8000398:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x156>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 35ff 	add.w	r5, r0, #4294967295
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x154>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2ca>
 80003b4:	4628      	mov	r0, r5
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003be:	e79e      	b.n	80002fe <__udivmoddi4+0x9e>
 80003c0:	f1c1 0720 	rsb	r7, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa20 f407 	lsr.w	r4, r0, r7
 80003d2:	fa05 f301 	lsl.w	r3, r5, r1
 80003d6:	431c      	orrs	r4, r3
 80003d8:	40fd      	lsrs	r5, r7
 80003da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003de:	fa00 f301 	lsl.w	r3, r0, r1
 80003e2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003e6:	0c20      	lsrs	r0, r4, #16
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	fb09 5518 	mls	r5, r9, r8, r5
 80003f0:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 80003f4:	fb08 f00e 	mul.w	r0, r8, lr
 80003f8:	42a8      	cmp	r0, r5
 80003fa:	fa02 f201 	lsl.w	r2, r2, r1
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b8>
 8000400:	eb1c 0505 	adds.w	r5, ip, r5
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2bc>
 800040c:	42a8      	cmp	r0, r5
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2bc>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4465      	add	r5, ip
 8000418:	1a2d      	subs	r5, r5, r0
 800041a:	b2a4      	uxth	r4, r4
 800041c:	fbb5 f0f9 	udiv	r0, r5, r9
 8000420:	fb09 5510 	mls	r5, r9, r0, r5
 8000424:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000428:	fb00 fe0e 	mul.w	lr, r0, lr
 800042c:	45ae      	cmp	lr, r5
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1e2>
 8000430:	eb1c 0505 	adds.w	r5, ip, r5
 8000434:	f100 34ff 	add.w	r4, r0, #4294967295
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2b4>
 800043a:	45ae      	cmp	lr, r5
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2b4>
 800043e:	3802      	subs	r0, #2
 8000440:	4465      	add	r5, ip
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	fba0 9402 	umull	r9, r4, r0, r2
 800044a:	eba5 050e 	sub.w	r5, r5, lr
 800044e:	42a5      	cmp	r5, r4
 8000450:	46c8      	mov	r8, r9
 8000452:	46a6      	mov	lr, r4
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x2a4>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x2a0>
 8000458:	b15e      	cbz	r6, 8000472 <__udivmoddi4+0x212>
 800045a:	ebb3 0208 	subs.w	r2, r3, r8
 800045e:	eb65 050e 	sbc.w	r5, r5, lr
 8000462:	fa05 f707 	lsl.w	r7, r5, r7
 8000466:	fa22 f301 	lsr.w	r3, r2, r1
 800046a:	40cd      	lsrs	r5, r1
 800046c:	431f      	orrs	r7, r3
 800046e:	e9c6 7500 	strd	r7, r5, [r6]
 8000472:	2100      	movs	r1, #0
 8000474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f103 	lsr.w	r1, r0, r3
 8000480:	fa0c fc02 	lsl.w	ip, ip, r2
 8000484:	fa25 f303 	lsr.w	r3, r5, r3
 8000488:	4095      	lsls	r5, r2
 800048a:	430d      	orrs	r5, r1
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb3 f1f7 	udiv	r1, r3, r7
 8000498:	fb07 3011 	mls	r0, r7, r1, r3
 800049c:	0c2b      	lsrs	r3, r5, #16
 800049e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80004a2:	fb01 f00e 	mul.w	r0, r1, lr
 80004a6:	4298      	cmp	r0, r3
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x260>
 80004ae:	eb1c 0303 	adds.w	r3, ip, r3
 80004b2:	f101 38ff 	add.w	r8, r1, #4294967295
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b8>
 80004b8:	4298      	cmp	r0, r3
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b8>
 80004bc:	3902      	subs	r1, #2
 80004be:	4463      	add	r3, ip
 80004c0:	1a1b      	subs	r3, r3, r0
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004c8:	fb07 3310 	mls	r3, r7, r0, r3
 80004cc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004d0:	fb00 f30e 	mul.w	r3, r0, lr
 80004d4:	42ab      	cmp	r3, r5
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x28a>
 80004d8:	eb1c 0505 	adds.w	r5, ip, r5
 80004dc:	f100 38ff 	add.w	r8, r0, #4294967295
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004e2:	42ab      	cmp	r3, r5
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4465      	add	r5, ip
 80004ea:	1aed      	subs	r5, r5, r3
 80004ec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0x104>
 80004f2:	4631      	mov	r1, r6
 80004f4:	4630      	mov	r0, r6
 80004f6:	e707      	b.n	8000308 <__udivmoddi4+0xa8>
 80004f8:	4686      	mov	lr, r0
 80004fa:	e6e5      	b.n	80002c8 <__udivmoddi4+0x68>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e6fa      	b.n	80002f6 <__udivmoddi4+0x96>
 8000500:	454b      	cmp	r3, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f8>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb64 0e0c 	sbc.w	lr, r4, ip
 800050c:	3801      	subs	r0, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f8>
 8000510:	4640      	mov	r0, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x28a>
 8000514:	4620      	mov	r0, r4
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1e2>
 8000518:	4641      	mov	r1, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x260>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b8>
 8000520:	3b02      	subs	r3, #2
 8000522:	4465      	add	r5, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x12c>
 8000526:	4608      	mov	r0, r1
 8000528:	e709      	b.n	800033e <__udivmoddi4+0xde>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x156>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr

08000540 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000540:	b480      	push	{r7}
 8000542:	b085      	sub	sp, #20
 8000544:	af00      	add	r7, sp, #0
 8000546:	60f8      	str	r0, [r7, #12]
 8000548:	60b9      	str	r1, [r7, #8]
 800054a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	4a06      	ldr	r2, [pc, #24]	; (8000568 <vApplicationGetIdleTaskMemory+0x28>)
 8000550:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000552:	68bb      	ldr	r3, [r7, #8]
 8000554:	4a05      	ldr	r2, [pc, #20]	; (800056c <vApplicationGetIdleTaskMemory+0x2c>)
 8000556:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	2280      	movs	r2, #128	; 0x80
 800055c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800055e:	bf00      	nop
 8000560:	3714      	adds	r7, #20
 8000562:	46bd      	mov	sp, r7
 8000564:	bc80      	pop	{r7}
 8000566:	4770      	bx	lr
 8000568:	20000090 	.word	0x20000090
 800056c:	20000144 	.word	0x20000144

08000570 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	4a07      	ldr	r2, [pc, #28]	; (800059c <vApplicationGetTimerTaskMemory+0x2c>)
 8000580:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000582:	68bb      	ldr	r3, [r7, #8]
 8000584:	4a06      	ldr	r2, [pc, #24]	; (80005a0 <vApplicationGetTimerTaskMemory+0x30>)
 8000586:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800058e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000590:	bf00      	nop
 8000592:	3714      	adds	r7, #20
 8000594:	46bd      	mov	sp, r7
 8000596:	bc80      	pop	{r7}
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	20000344 	.word	0x20000344
 80005a0:	200003f8 	.word	0x200003f8

080005a4 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80005ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005b4:	f023 0218 	bic.w	r2, r3, #24
 80005b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	4313      	orrs	r3, r2
 80005c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80005c4:	bf00      	nop
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bc80      	pop	{r7}
 80005cc:	4770      	bx	lr

080005ce <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005ce:	b480      	push	{r7}
 80005d0:	b085      	sub	sp, #20
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80005d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	4313      	orrs	r3, r2
 80005e4:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80005e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4013      	ands	r3, r2
 80005f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005f2:	68fb      	ldr	r3, [r7, #12]
}
 80005f4:	bf00      	nop
 80005f6:	3714      	adds	r7, #20
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bc80      	pop	{r7}
 80005fc:	4770      	bx	lr
	...

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b5b0      	push	{r4, r5, r7, lr}
 8000602:	b094      	sub	sp, #80	; 0x50
 8000604:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000606:	f000 feed 	bl	80013e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060a:	f000 f871 	bl	80006f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060e:	f000 fac9 	bl	8000ba4 <MX_GPIO_Init>
  MX_ADC_Init();
 8000612:	f000 f8cf 	bl	80007b4 <MX_ADC_Init>
  MX_LPUART1_UART_Init();
 8000616:	f000 f95b 	bl	80008d0 <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 800061a:	f000 f9a3 	bl	8000964 <MX_USART2_UART_Init>
  MX_RTC_Init();
 800061e:	f000 f9ed 	bl	80009fc <MX_RTC_Init>
  MX_SPI2_Init();
 8000622:	f000 fa81 	bl	8000b28 <MX_SPI2_Init>
  MX_I2C2_Init();
 8000626:	f000 f913 	bl	8000850 <MX_I2C2_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of UartMutex */
  osMutexDef(UartMutex);
 800062a:	2300      	movs	r3, #0
 800062c:	64bb      	str	r3, [r7, #72]	; 0x48
 800062e:	2300      	movs	r3, #0
 8000630:	64fb      	str	r3, [r7, #76]	; 0x4c
  UartMutexHandle = osMutexCreate(osMutex(UartMutex));
 8000632:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000636:	4618      	mov	r0, r3
 8000638:	f006 f9aa 	bl	8006990 <osMutexCreate>
 800063c:	4603      	mov	r3, r0
 800063e:	4a24      	ldr	r2, [pc, #144]	; (80006d0 <main+0xd0>)
 8000640:	6013      	str	r3, [r2, #0]

  /* definition and creation of SpiMutex */
  osMutexDef(SpiMutex);
 8000642:	2300      	movs	r3, #0
 8000644:	643b      	str	r3, [r7, #64]	; 0x40
 8000646:	2300      	movs	r3, #0
 8000648:	647b      	str	r3, [r7, #68]	; 0x44
  SpiMutexHandle = osMutexCreate(osMutex(SpiMutex));
 800064a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800064e:	4618      	mov	r0, r3
 8000650:	f006 f99e 	bl	8006990 <osMutexCreate>
 8000654:	4603      	mov	r3, r0
 8000656:	4a1f      	ldr	r2, [pc, #124]	; (80006d4 <main+0xd4>)
 8000658:	6013      	str	r3, [r2, #0]

  /* definition and creation of I2cMutex */
  osMutexDef(I2cMutex);
 800065a:	2300      	movs	r3, #0
 800065c:	63bb      	str	r3, [r7, #56]	; 0x38
 800065e:	2300      	movs	r3, #0
 8000660:	63fb      	str	r3, [r7, #60]	; 0x3c
  I2cMutexHandle = osMutexCreate(osMutex(I2cMutex));
 8000662:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000666:	4618      	mov	r0, r3
 8000668:	f006 f992 	bl	8006990 <osMutexCreate>
 800066c:	4603      	mov	r3, r0
 800066e:	4a1a      	ldr	r2, [pc, #104]	; (80006d8 <main+0xd8>)
 8000670:	6013      	str	r3, [r2, #0]

  /* definition and creation of RtcMutex */
  osMutexDef(RtcMutex);
 8000672:	2300      	movs	r3, #0
 8000674:	633b      	str	r3, [r7, #48]	; 0x30
 8000676:	2300      	movs	r3, #0
 8000678:	637b      	str	r3, [r7, #52]	; 0x34
  RtcMutexHandle = osMutexCreate(osMutex(RtcMutex));
 800067a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800067e:	4618      	mov	r0, r3
 8000680:	f006 f986 	bl	8006990 <osMutexCreate>
 8000684:	4603      	mov	r3, r0
 8000686:	4a15      	ldr	r2, [pc, #84]	; (80006dc <main+0xdc>)
 8000688:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of xQueue1 */
  osMessageQDef(xQueue1, 100, uint16_t);
 800068a:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <main+0xe0>)
 800068c:	f107 0420 	add.w	r4, r7, #32
 8000690:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000692:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  xQueue1Handle = osMessageCreate(osMessageQ(xQueue1), NULL);
 8000696:	f107 0320 	add.w	r3, r7, #32
 800069a:	2100      	movs	r1, #0
 800069c:	4618      	mov	r0, r3
 800069e:	f006 f98f 	bl	80069c0 <osMessageCreate>
 80006a2:	4603      	mov	r3, r0
 80006a4:	4a0f      	ldr	r2, [pc, #60]	; (80006e4 <main+0xe4>)
 80006a6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of terminalTask */
  osThreadDef(terminalTask, terminalTaskHandler, osPriorityNormal, 0, 128);
 80006a8:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <main+0xe8>)
 80006aa:	1d3c      	adds	r4, r7, #4
 80006ac:	461d      	mov	r5, r3
 80006ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006b2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  terminalTaskHandle = osThreadCreate(osThread(terminalTask), NULL);
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f006 f906 	bl	80068d0 <osThreadCreate>
 80006c4:	4603      	mov	r3, r0
 80006c6:	4a09      	ldr	r2, [pc, #36]	; (80006ec <main+0xec>)
 80006c8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006ca:	f006 f8fa 	bl	80068c2 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006ce:	e7fe      	b.n	80006ce <main+0xce>
 80006d0:	20000a7c 	.word	0x20000a7c
 80006d4:	20000a80 	.word	0x20000a80
 80006d8:	20000a84 	.word	0x20000a84
 80006dc:	20000a88 	.word	0x20000a88
 80006e0:	0800a8c0 	.word	0x0800a8c0
 80006e4:	20000a78 	.word	0x20000a78
 80006e8:	0800a8d0 	.word	0x0800a8d0
 80006ec:	20000a74 	.word	0x20000a74

080006f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b09a      	sub	sp, #104	; 0x68
 80006f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f6:	f107 0320 	add.w	r3, r7, #32
 80006fa:	2248      	movs	r2, #72	; 0x48
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f008 ff0d 	bl	800951e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000704:	f107 0308 	add.w	r3, r7, #8
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
 8000712:	611a      	str	r2, [r3, #16]
 8000714:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000716:	f001 fceb 	bl	80020f0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800071a:	2000      	movs	r0, #0
 800071c:	f7ff ff42 	bl	80005a4 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000720:	4b23      	ldr	r3, [pc, #140]	; (80007b0 <SystemClock_Config+0xc0>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000728:	4a21      	ldr	r2, [pc, #132]	; (80007b0 <SystemClock_Config+0xc0>)
 800072a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800072e:	6013      	str	r3, [r2, #0]
 8000730:	4b1f      	ldr	r3, [pc, #124]	; (80007b0 <SystemClock_Config+0xc0>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 800073c:	232e      	movs	r3, #46	; 0x2e
 800073e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000740:	2381      	movs	r3, #129	; 0x81
 8000742:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000744:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000748:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800074a:	2301      	movs	r3, #1
 800074c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800074e:	2340      	movs	r3, #64	; 0x40
 8000750:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000752:	2300      	movs	r3, #0
 8000754:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8000756:	23b0      	movs	r3, #176	; 0xb0
 8000758:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 800075a:	2300      	movs	r3, #0
 800075c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800075e:	2301      	movs	r3, #1
 8000760:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000762:	2300      	movs	r3, #0
 8000764:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000766:	f107 0320 	add.w	r3, r7, #32
 800076a:	4618      	mov	r0, r3
 800076c:	f001 ff6a 	bl	8002644 <HAL_RCC_OscConfig>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000776:	f000 fa91 	bl	8000c9c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 800077a:	234f      	movs	r3, #79	; 0x4f
 800077c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800077e:	2300      	movs	r3, #0
 8000780:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000782:	2300      	movs	r3, #0
 8000784:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000786:	2300      	movs	r3, #0
 8000788:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800078a:	2300      	movs	r3, #0
 800078c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800078e:	2300      	movs	r3, #0
 8000790:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000792:	f107 0308 	add.w	r3, r7, #8
 8000796:	2102      	movs	r1, #2
 8000798:	4618      	mov	r0, r3
 800079a:	f002 fad5 	bl	8002d48 <HAL_RCC_ClockConfig>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80007a4:	f000 fa7a 	bl	8000c9c <Error_Handler>
  }
}
 80007a8:	bf00      	nop
 80007aa:	3768      	adds	r7, #104	; 0x68
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	58000400 	.word	0x58000400

080007b4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 80007b8:	4b23      	ldr	r3, [pc, #140]	; (8000848 <MX_ADC_Init+0x94>)
 80007ba:	4a24      	ldr	r2, [pc, #144]	; (800084c <MX_ADC_Init+0x98>)
 80007bc:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80007be:	4b22      	ldr	r3, [pc, #136]	; (8000848 <MX_ADC_Init+0x94>)
 80007c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007c4:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80007c6:	4b20      	ldr	r3, [pc, #128]	; (8000848 <MX_ADC_Init+0x94>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007cc:	4b1e      	ldr	r3, [pc, #120]	; (8000848 <MX_ADC_Init+0x94>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007d2:	4b1d      	ldr	r3, [pc, #116]	; (8000848 <MX_ADC_Init+0x94>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007d8:	4b1b      	ldr	r3, [pc, #108]	; (8000848 <MX_ADC_Init+0x94>)
 80007da:	2204      	movs	r2, #4
 80007dc:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80007de:	4b1a      	ldr	r3, [pc, #104]	; (8000848 <MX_ADC_Init+0x94>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80007e4:	4b18      	ldr	r3, [pc, #96]	; (8000848 <MX_ADC_Init+0x94>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80007ea:	4b17      	ldr	r3, [pc, #92]	; (8000848 <MX_ADC_Init+0x94>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 80007f0:	4b15      	ldr	r3, [pc, #84]	; (8000848 <MX_ADC_Init+0x94>)
 80007f2:	2201      	movs	r2, #1
 80007f4:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80007f6:	4b14      	ldr	r3, [pc, #80]	; (8000848 <MX_ADC_Init+0x94>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007fe:	4b12      	ldr	r3, [pc, #72]	; (8000848 <MX_ADC_Init+0x94>)
 8000800:	2200      	movs	r2, #0
 8000802:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000804:	4b10      	ldr	r3, [pc, #64]	; (8000848 <MX_ADC_Init+0x94>)
 8000806:	2200      	movs	r2, #0
 8000808:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 800080a:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <MX_ADC_Init+0x94>)
 800080c:	2200      	movs	r2, #0
 800080e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000812:	4b0d      	ldr	r3, [pc, #52]	; (8000848 <MX_ADC_Init+0x94>)
 8000814:	2200      	movs	r2, #0
 8000816:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000818:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <MX_ADC_Init+0x94>)
 800081a:	2200      	movs	r2, #0
 800081c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800081e:	4b0a      	ldr	r3, [pc, #40]	; (8000848 <MX_ADC_Init+0x94>)
 8000820:	2200      	movs	r2, #0
 8000822:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8000824:	4b08      	ldr	r3, [pc, #32]	; (8000848 <MX_ADC_Init+0x94>)
 8000826:	2200      	movs	r2, #0
 8000828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <MX_ADC_Init+0x94>)
 800082e:	2200      	movs	r2, #0
 8000830:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000832:	4805      	ldr	r0, [pc, #20]	; (8000848 <MX_ADC_Init+0x94>)
 8000834:	f000 fe92 	bl	800155c <HAL_ADC_Init>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_ADC_Init+0x8e>
  {
    Error_Handler();
 800083e:	f000 fa2d 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	200007f8 	.word	0x200007f8
 800084c:	40012400 	.word	0x40012400

08000850 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000854:	4b1b      	ldr	r3, [pc, #108]	; (80008c4 <MX_I2C2_Init+0x74>)
 8000856:	4a1c      	ldr	r2, [pc, #112]	; (80008c8 <MX_I2C2_Init+0x78>)
 8000858:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20303E5D;
 800085a:	4b1a      	ldr	r3, [pc, #104]	; (80008c4 <MX_I2C2_Init+0x74>)
 800085c:	4a1b      	ldr	r2, [pc, #108]	; (80008cc <MX_I2C2_Init+0x7c>)
 800085e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000860:	4b18      	ldr	r3, [pc, #96]	; (80008c4 <MX_I2C2_Init+0x74>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000866:	4b17      	ldr	r3, [pc, #92]	; (80008c4 <MX_I2C2_Init+0x74>)
 8000868:	2201      	movs	r2, #1
 800086a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800086c:	4b15      	ldr	r3, [pc, #84]	; (80008c4 <MX_I2C2_Init+0x74>)
 800086e:	2200      	movs	r2, #0
 8000870:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000872:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <MX_I2C2_Init+0x74>)
 8000874:	2200      	movs	r2, #0
 8000876:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000878:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <MX_I2C2_Init+0x74>)
 800087a:	2200      	movs	r2, #0
 800087c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800087e:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <MX_I2C2_Init+0x74>)
 8000880:	2200      	movs	r2, #0
 8000882:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000884:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <MX_I2C2_Init+0x74>)
 8000886:	2200      	movs	r2, #0
 8000888:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800088a:	480e      	ldr	r0, [pc, #56]	; (80008c4 <MX_I2C2_Init+0x74>)
 800088c:	f001 fb0b 	bl	8001ea6 <HAL_I2C_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000896:	f000 fa01 	bl	8000c9c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800089a:	2100      	movs	r1, #0
 800089c:	4809      	ldr	r0, [pc, #36]	; (80008c4 <MX_I2C2_Init+0x74>)
 800089e:	f001 fb91 	bl	8001fc4 <HAL_I2CEx_ConfigAnalogFilter>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80008a8:	f000 f9f8 	bl	8000c9c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008ac:	2100      	movs	r1, #0
 80008ae:	4805      	ldr	r0, [pc, #20]	; (80008c4 <MX_I2C2_Init+0x74>)
 80008b0:	f001 fbd2 	bl	8002058 <HAL_I2CEx_ConfigDigitalFilter>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80008ba:	f000 f9ef 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	2000085c 	.word	0x2000085c
 80008c8:	40005800 	.word	0x40005800
 80008cc:	20303e5d 	.word	0x20303e5d

080008d0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80008d4:	4b20      	ldr	r3, [pc, #128]	; (8000958 <MX_LPUART1_UART_Init+0x88>)
 80008d6:	4a21      	ldr	r2, [pc, #132]	; (800095c <MX_LPUART1_UART_Init+0x8c>)
 80008d8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80008da:	4b1f      	ldr	r3, [pc, #124]	; (8000958 <MX_LPUART1_UART_Init+0x88>)
 80008dc:	4a20      	ldr	r2, [pc, #128]	; (8000960 <MX_LPUART1_UART_Init+0x90>)
 80008de:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008e0:	4b1d      	ldr	r3, [pc, #116]	; (8000958 <MX_LPUART1_UART_Init+0x88>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80008e6:	4b1c      	ldr	r3, [pc, #112]	; (8000958 <MX_LPUART1_UART_Init+0x88>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80008ec:	4b1a      	ldr	r3, [pc, #104]	; (8000958 <MX_LPUART1_UART_Init+0x88>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80008f2:	4b19      	ldr	r3, [pc, #100]	; (8000958 <MX_LPUART1_UART_Init+0x88>)
 80008f4:	220c      	movs	r2, #12
 80008f6:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008f8:	4b17      	ldr	r3, [pc, #92]	; (8000958 <MX_LPUART1_UART_Init+0x88>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008fe:	4b16      	ldr	r3, [pc, #88]	; (8000958 <MX_LPUART1_UART_Init+0x88>)
 8000900:	2200      	movs	r2, #0
 8000902:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000904:	4b14      	ldr	r3, [pc, #80]	; (8000958 <MX_LPUART1_UART_Init+0x88>)
 8000906:	2200      	movs	r2, #0
 8000908:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800090a:	4b13      	ldr	r3, [pc, #76]	; (8000958 <MX_LPUART1_UART_Init+0x88>)
 800090c:	2200      	movs	r2, #0
 800090e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&hlpuart1) != HAL_OK)
 8000910:	4811      	ldr	r0, [pc, #68]	; (8000958 <MX_LPUART1_UART_Init+0x88>)
 8000912:	f003 fe23 	bl	800455c <HAL_HalfDuplex_Init>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 800091c:	f000 f9be 	bl	8000c9c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000920:	2100      	movs	r1, #0
 8000922:	480d      	ldr	r0, [pc, #52]	; (8000958 <MX_LPUART1_UART_Init+0x88>)
 8000924:	f005 fde7 	bl	80064f6 <HAL_UARTEx_SetTxFifoThreshold>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 800092e:	f000 f9b5 	bl	8000c9c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000932:	2100      	movs	r1, #0
 8000934:	4808      	ldr	r0, [pc, #32]	; (8000958 <MX_LPUART1_UART_Init+0x88>)
 8000936:	f005 fe1c 	bl	8006572 <HAL_UARTEx_SetRxFifoThreshold>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8000940:	f000 f9ac 	bl	8000c9c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000944:	4804      	ldr	r0, [pc, #16]	; (8000958 <MX_LPUART1_UART_Init+0x88>)
 8000946:	f005 fd9e 	bl	8006486 <HAL_UARTEx_DisableFifoMode>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8000950:	f000 f9a4 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}
 8000958:	200008b0 	.word	0x200008b0
 800095c:	40008000 	.word	0x40008000
 8000960:	00033324 	.word	0x00033324

08000964 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000968:	4b22      	ldr	r3, [pc, #136]	; (80009f4 <MX_USART2_UART_Init+0x90>)
 800096a:	4a23      	ldr	r2, [pc, #140]	; (80009f8 <MX_USART2_UART_Init+0x94>)
 800096c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800096e:	4b21      	ldr	r3, [pc, #132]	; (80009f4 <MX_USART2_UART_Init+0x90>)
 8000970:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000974:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000976:	4b1f      	ldr	r3, [pc, #124]	; (80009f4 <MX_USART2_UART_Init+0x90>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800097c:	4b1d      	ldr	r3, [pc, #116]	; (80009f4 <MX_USART2_UART_Init+0x90>)
 800097e:	2200      	movs	r2, #0
 8000980:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000982:	4b1c      	ldr	r3, [pc, #112]	; (80009f4 <MX_USART2_UART_Init+0x90>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000988:	4b1a      	ldr	r3, [pc, #104]	; (80009f4 <MX_USART2_UART_Init+0x90>)
 800098a:	220c      	movs	r2, #12
 800098c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800098e:	4b19      	ldr	r3, [pc, #100]	; (80009f4 <MX_USART2_UART_Init+0x90>)
 8000990:	2200      	movs	r2, #0
 8000992:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000994:	4b17      	ldr	r3, [pc, #92]	; (80009f4 <MX_USART2_UART_Init+0x90>)
 8000996:	2200      	movs	r2, #0
 8000998:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800099a:	4b16      	ldr	r3, [pc, #88]	; (80009f4 <MX_USART2_UART_Init+0x90>)
 800099c:	2200      	movs	r2, #0
 800099e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009a0:	4b14      	ldr	r3, [pc, #80]	; (80009f4 <MX_USART2_UART_Init+0x90>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009a6:	4b13      	ldr	r3, [pc, #76]	; (80009f4 <MX_USART2_UART_Init+0x90>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009ac:	4811      	ldr	r0, [pc, #68]	; (80009f4 <MX_USART2_UART_Init+0x90>)
 80009ae:	f003 fd85 	bl	80044bc <HAL_UART_Init>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80009b8:	f000 f970 	bl	8000c9c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009bc:	2100      	movs	r1, #0
 80009be:	480d      	ldr	r0, [pc, #52]	; (80009f4 <MX_USART2_UART_Init+0x90>)
 80009c0:	f005 fd99 	bl	80064f6 <HAL_UARTEx_SetTxFifoThreshold>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80009ca:	f000 f967 	bl	8000c9c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ce:	2100      	movs	r1, #0
 80009d0:	4808      	ldr	r0, [pc, #32]	; (80009f4 <MX_USART2_UART_Init+0x90>)
 80009d2:	f005 fdce 	bl	8006572 <HAL_UARTEx_SetRxFifoThreshold>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80009dc:	f000 f95e 	bl	8000c9c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80009e0:	4804      	ldr	r0, [pc, #16]	; (80009f4 <MX_USART2_UART_Init+0x90>)
 80009e2:	f005 fd50 	bl	8006486 <HAL_UARTEx_DisableFifoMode>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d001      	beq.n	80009f0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80009ec:	f000 f956 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	20000944 	.word	0x20000944
 80009f8:	40004400 	.word	0x40004400

080009fc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b092      	sub	sp, #72	; 0x48
 8000a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000a02:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]
 8000a0c:	609a      	str	r2, [r3, #8]
 8000a0e:	60da      	str	r2, [r3, #12]
 8000a10:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000a12:	2300      	movs	r3, #0
 8000a14:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	222c      	movs	r2, #44	; 0x2c
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f008 fd7e 	bl	800951e <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a22:	4b3f      	ldr	r3, [pc, #252]	; (8000b20 <MX_RTC_Init+0x124>)
 8000a24:	4a3f      	ldr	r2, [pc, #252]	; (8000b24 <MX_RTC_Init+0x128>)
 8000a26:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a28:	4b3d      	ldr	r3, [pc, #244]	; (8000b20 <MX_RTC_Init+0x124>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a2e:	4b3c      	ldr	r3, [pc, #240]	; (8000b20 <MX_RTC_Init+0x124>)
 8000a30:	227f      	movs	r2, #127	; 0x7f
 8000a32:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a34:	4b3a      	ldr	r3, [pc, #232]	; (8000b20 <MX_RTC_Init+0x124>)
 8000a36:	22ff      	movs	r2, #255	; 0xff
 8000a38:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a3a:	4b39      	ldr	r3, [pc, #228]	; (8000b20 <MX_RTC_Init+0x124>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000a40:	4b37      	ldr	r3, [pc, #220]	; (8000b20 <MX_RTC_Init+0x124>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a46:	4b36      	ldr	r3, [pc, #216]	; (8000b20 <MX_RTC_Init+0x124>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a4c:	4b34      	ldr	r3, [pc, #208]	; (8000b20 <MX_RTC_Init+0x124>)
 8000a4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a52:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000a54:	4b32      	ldr	r3, [pc, #200]	; (8000b20 <MX_RTC_Init+0x124>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8000a5a:	4b31      	ldr	r3, [pc, #196]	; (8000b20 <MX_RTC_Init+0x124>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a60:	482f      	ldr	r0, [pc, #188]	; (8000b20 <MX_RTC_Init+0x124>)
 8000a62:	f002 fe6b 	bl	800373c <HAL_RTC_Init>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8000a6c:	f000 f916 	bl	8000c9c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000a70:	2300      	movs	r3, #0
 8000a72:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000a82:	2300      	movs	r3, #0
 8000a84:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000a86:	2300      	movs	r3, #0
 8000a88:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000a8a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a8e:	2201      	movs	r2, #1
 8000a90:	4619      	mov	r1, r3
 8000a92:	4823      	ldr	r0, [pc, #140]	; (8000b20 <MX_RTC_Init+0x124>)
 8000a94:	f002 fed4 	bl	8003840 <HAL_RTC_SetTime>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_RTC_Init+0xa6>
  {
    Error_Handler();
 8000a9e:	f000 f8fd 	bl	8000c9c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x1;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000aba:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000abe:	2201      	movs	r2, #1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4817      	ldr	r0, [pc, #92]	; (8000b20 <MX_RTC_Init+0x124>)
 8000ac4:	f002 ff58 	bl	8003978 <HAL_RTC_SetDate>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_RTC_Init+0xd6>
  {
    Error_Handler();
 8000ace:	f000 f8e5 	bl	8000c9c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000ada:	2300      	movs	r3, #0
 8000adc:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000aea:	2300      	movs	r3, #0
 8000aec:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000af2:	2300      	movs	r3, #0
 8000af4:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 8000af6:	2301      	movs	r3, #1
 8000af8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8000afc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b00:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000b02:	1d3b      	adds	r3, r7, #4
 8000b04:	2201      	movs	r2, #1
 8000b06:	4619      	mov	r1, r3
 8000b08:	4805      	ldr	r0, [pc, #20]	; (8000b20 <MX_RTC_Init+0x124>)
 8000b0a:	f002 ffbb 	bl	8003a84 <HAL_RTC_SetAlarm>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_RTC_Init+0x11c>
  {
    Error_Handler();
 8000b14:	f000 f8c2 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b18:	bf00      	nop
 8000b1a:	3748      	adds	r7, #72	; 0x48
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	200009d8 	.word	0x200009d8
 8000b24:	40002800 	.word	0x40002800

08000b28 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000b2c:	4b1b      	ldr	r3, [pc, #108]	; (8000b9c <MX_SPI2_Init+0x74>)
 8000b2e:	4a1c      	ldr	r2, [pc, #112]	; (8000ba0 <MX_SPI2_Init+0x78>)
 8000b30:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b32:	4b1a      	ldr	r3, [pc, #104]	; (8000b9c <MX_SPI2_Init+0x74>)
 8000b34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b38:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000b3a:	4b18      	ldr	r3, [pc, #96]	; (8000b9c <MX_SPI2_Init+0x74>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000b40:	4b16      	ldr	r3, [pc, #88]	; (8000b9c <MX_SPI2_Init+0x74>)
 8000b42:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000b46:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b48:	4b14      	ldr	r3, [pc, #80]	; (8000b9c <MX_SPI2_Init+0x74>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b4e:	4b13      	ldr	r3, [pc, #76]	; (8000b9c <MX_SPI2_Init+0x74>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000b54:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <MX_SPI2_Init+0x74>)
 8000b56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b5a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <MX_SPI2_Init+0x74>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b62:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <MX_SPI2_Init+0x74>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b68:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <MX_SPI2_Init+0x74>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b6e:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <MX_SPI2_Init+0x74>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000b74:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <MX_SPI2_Init+0x74>)
 8000b76:	2207      	movs	r2, #7
 8000b78:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b7a:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <MX_SPI2_Init+0x74>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <MX_SPI2_Init+0x74>)
 8000b82:	2208      	movs	r2, #8
 8000b84:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b86:	4805      	ldr	r0, [pc, #20]	; (8000b9c <MX_SPI2_Init+0x74>)
 8000b88:	f003 f935 	bl	8003df6 <HAL_SPI_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000b92:	f000 f883 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000a10 	.word	0x20000a10
 8000ba0:	40003800 	.word	0x40003800

08000ba4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b086      	sub	sp, #24
 8000ba8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000baa:	1d3b      	adds	r3, r7, #4
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb8:	2001      	movs	r0, #1
 8000bba:	f7ff fd08 	bl	80005ce <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bbe:	2002      	movs	r0, #2
 8000bc0:	f7ff fd05 	bl	80005ce <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc4:	2004      	movs	r0, #4
 8000bc6:	f7ff fd02 	bl	80005ce <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ADC_SW_Pin|MB_OC_Pin|LED_Pin, GPIO_PIN_RESET);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	21e0      	movs	r1, #224	; 0xe0
 8000bce:	481e      	ldr	r0, [pc, #120]	; (8000c48 <MX_GPIO_Init+0xa4>)
 8000bd0:	f001 f952 	bl	8001e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MB_PWR_Pin|EXT_PWR_Pin, GPIO_PIN_RESET);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f240 2101 	movw	r1, #513	; 0x201
 8000bda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bde:	f001 f94b 	bl	8001e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MB_CTL_GPIO_Port, MB_CTL_Pin, GPIO_PIN_RESET);
 8000be2:	2200      	movs	r2, #0
 8000be4:	2101      	movs	r1, #1
 8000be6:	4819      	ldr	r0, [pc, #100]	; (8000c4c <MX_GPIO_Init+0xa8>)
 8000be8:	f001 f946 	bl	8001e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADC_SW_Pin MB_OC_Pin LED_Pin */
  GPIO_InitStruct.Pin = ADC_SW_Pin|MB_OC_Pin|LED_Pin;
 8000bec:	23e0      	movs	r3, #224	; 0xe0
 8000bee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bfc:	1d3b      	adds	r3, r7, #4
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4811      	ldr	r0, [pc, #68]	; (8000c48 <MX_GPIO_Init+0xa4>)
 8000c02:	f000 ffd9 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MB_PWR_Pin EXT_PWR_Pin */
  GPIO_InitStruct.Pin = MB_PWR_Pin|EXT_PWR_Pin;
 8000c06:	f240 2301 	movw	r3, #513	; 0x201
 8000c0a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c14:	2300      	movs	r3, #0
 8000c16:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c18:	1d3b      	adds	r3, r7, #4
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c20:	f000 ffca 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MB_CTL_Pin */
  GPIO_InitStruct.Pin = MB_CTL_Pin;
 8000c24:	2301      	movs	r3, #1
 8000c26:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c30:	2300      	movs	r3, #0
 8000c32:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(MB_CTL_GPIO_Port, &GPIO_InitStruct);
 8000c34:	1d3b      	adds	r3, r7, #4
 8000c36:	4619      	mov	r1, r3
 8000c38:	4804      	ldr	r0, [pc, #16]	; (8000c4c <MX_GPIO_Init+0xa8>)
 8000c3a:	f000 ffbd 	bl	8001bb8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c3e:	bf00      	nop
 8000c40:	3718      	adds	r7, #24
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	48000400 	.word	0x48000400
 8000c4c:	48000800 	.word	0x48000800

08000c50 <Get_DebugHandle>:
  return &hadc;
}


UART_HandleTypeDef *Get_DebugHandle(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  return &huart2;
 8000c54:	4b02      	ldr	r3, [pc, #8]	; (8000c60 <Get_DebugHandle+0x10>)
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bc80      	pop	{r7}
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	20000944 	.word	0x20000944

08000c64 <Get_TerminalQueueHandle>:




osMessageQId Get_TerminalQueueHandle(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  return xQueue1Handle;;
 8000c68:	4b02      	ldr	r3, [pc, #8]	; (8000c74 <Get_TerminalQueueHandle+0x10>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
}
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bc80      	pop	{r7}
 8000c72:	4770      	bx	lr
 8000c74:	20000a78 	.word	0x20000a78

08000c78 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a04      	ldr	r2, [pc, #16]	; (8000c98 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d101      	bne.n	8000c8e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c8a:	f000 fbcb 	bl	8001424 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40012c00 	.word	0x40012c00

08000c9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca0:	b672      	cpsid	i
}
 8000ca2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca4:	e7fe      	b.n	8000ca4 <Error_Handler+0x8>

08000ca6 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000caa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000cb2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000cb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000cbe:	bf00      	nop
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bc80      	pop	{r7}
 8000cc4:	4770      	bx	lr

08000cc6 <LL_AHB2_GRP1_EnableClock>:
{
 8000cc6:	b480      	push	{r7}
 8000cc8:	b085      	sub	sp, #20
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000cce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000cd2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000cd4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000cde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ce2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000cea:	68fb      	ldr	r3, [r7, #12]
}
 8000cec:	bf00      	nop
 8000cee:	3714      	adds	r7, #20
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bc80      	pop	{r7}
 8000cf4:	4770      	bx	lr

08000cf6 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	b085      	sub	sp, #20
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000cfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d02:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000d04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	4313      	orrs	r3, r2
 8000d0c:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000d0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d12:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	4013      	ands	r3, r2
 8000d18:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d1a:	68fb      	ldr	r3, [r7, #12]
}
 8000d1c:	bf00      	nop
 8000d1e:	3714      	adds	r7, #20
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bc80      	pop	{r7}
 8000d24:	4770      	bx	lr

08000d26 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM3

  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000d26:	b480      	push	{r7}
 8000d28:	b085      	sub	sp, #20
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000d2e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d32:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000d34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	4313      	orrs	r3, r2
 8000d3c:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000d3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d42:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	4013      	ands	r3, r2
 8000d48:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d4a:	68fb      	ldr	r3, [r7, #12]
}
 8000d4c:	bf00      	nop
 8000d4e:	3714      	adds	r7, #20
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bc80      	pop	{r7}
 8000d54:	4770      	bx	lr

08000d56 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000d56:	b480      	push	{r7}
 8000d58:	b085      	sub	sp, #20
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000d5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d62:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000d64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000d6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000d72:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4013      	ands	r3, r2
 8000d78:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d7a:	68fb      	ldr	r3, [r7, #12]
}
 8000d7c:	bf00      	nop
 8000d7e:	3714      	adds	r7, #20
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bc80      	pop	{r7}
 8000d84:	4770      	bx	lr

08000d86 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	210f      	movs	r1, #15
 8000d8e:	f06f 0001 	mvn.w	r0, #1
 8000d92:	f000 fe2c 	bl	80019ee <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
	...

08000d9c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b088      	sub	sp, #32
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da4:	f107 030c 	add.w	r3, r7, #12
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a0c      	ldr	r2, [pc, #48]	; (8000dec <HAL_ADC_MspInit+0x50>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d112      	bne.n	8000de4 <HAL_ADC_MspInit+0x48>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000dbe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000dc2:	f7ff ffc8 	bl	8000d56 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc6:	2002      	movs	r0, #2
 8000dc8:	f7ff ff7d 	bl	8000cc6 <LL_AHB2_GRP1_EnableClock>
    /**ADC GPIO Configuration
    PB3     ------> ADC_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000dcc:	2308      	movs	r3, #8
 8000dce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd8:	f107 030c 	add.w	r3, r7, #12
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4804      	ldr	r0, [pc, #16]	; (8000df0 <HAL_ADC_MspInit+0x54>)
 8000de0:	f000 feea 	bl	8001bb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }

}
 8000de4:	bf00      	nop
 8000de6:	3720      	adds	r7, #32
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40012400 	.word	0x40012400
 8000df0:	48000400 	.word	0x48000400

08000df4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b096      	sub	sp, #88	; 0x58
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e0c:	f107 030c 	add.w	r3, r7, #12
 8000e10:	2238      	movs	r2, #56	; 0x38
 8000e12:	2100      	movs	r1, #0
 8000e14:	4618      	mov	r0, r3
 8000e16:	f008 fb82 	bl	800951e <memset>
  if(hi2c->Instance==I2C2)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a21      	ldr	r2, [pc, #132]	; (8000ea4 <HAL_I2C_MspInit+0xb0>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	d13b      	bne.n	8000e9c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000e24:	2380      	movs	r3, #128	; 0x80
 8000e26:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000e28:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8000e2c:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e2e:	f107 030c 	add.w	r3, r7, #12
 8000e32:	4618      	mov	r0, r3
 8000e34:	f002 fb68 	bl	8003508 <HAL_RCCEx_PeriphCLKConfig>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000e3e:	f7ff ff2d 	bl	8000c9c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e42:	2001      	movs	r0, #1
 8000e44:	f7ff ff3f 	bl	8000cc6 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e48:	2002      	movs	r0, #2
 8000e4a:	f7ff ff3c 	bl	8000cc6 <LL_AHB2_GRP1_EnableClock>
    /**I2C2 GPIO Configuration
    PA15     ------> I2C2_SDA
    PB15     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000e4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e52:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e54:	2312      	movs	r3, #18
 8000e56:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e60:	2304      	movs	r3, #4
 8000e62:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e64:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000e68:	4619      	mov	r1, r3
 8000e6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e6e:	f000 fea3 	bl	8001bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000e72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e76:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e78:	2312      	movs	r3, #18
 8000e7a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e80:	2300      	movs	r3, #0
 8000e82:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e84:	2304      	movs	r3, #4
 8000e86:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e88:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4806      	ldr	r0, [pc, #24]	; (8000ea8 <HAL_I2C_MspInit+0xb4>)
 8000e90:	f000 fe92 	bl	8001bb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e94:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000e98:	f7ff ff2d 	bl	8000cf6 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000e9c:	bf00      	nop
 8000e9e:	3758      	adds	r7, #88	; 0x58
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40005800 	.word	0x40005800
 8000ea8:	48000400 	.word	0x48000400

08000eac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b096      	sub	sp, #88	; 0x58
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ec4:	f107 030c 	add.w	r3, r7, #12
 8000ec8:	2238      	movs	r2, #56	; 0x38
 8000eca:	2100      	movs	r1, #0
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f008 fb26 	bl	800951e <memset>
  if(huart->Instance==LPUART1)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a30      	ldr	r2, [pc, #192]	; (8000f98 <HAL_UART_MspInit+0xec>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d124      	bne.n	8000f26 <HAL_UART_MspInit+0x7a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000edc:	2320      	movs	r3, #32
 8000ede:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ee4:	f107 030c 	add.w	r3, r7, #12
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f002 fb0d 	bl	8003508 <HAL_RCCEx_PeriphCLKConfig>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ef4:	f7ff fed2 	bl	8000c9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000ef8:	2001      	movs	r0, #1
 8000efa:	f7ff ff14 	bl	8000d26 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000efe:	2004      	movs	r0, #4
 8000f00:	f7ff fee1 	bl	8000cc6 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000f04:	2302      	movs	r3, #2
 8000f06:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f08:	2312      	movs	r3, #18
 8000f0a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f10:	2300      	movs	r3, #0
 8000f12:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000f14:	2308      	movs	r3, #8
 8000f16:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f18:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	481f      	ldr	r0, [pc, #124]	; (8000f9c <HAL_UART_MspInit+0xf0>)
 8000f20:	f000 fe4a 	bl	8001bb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f24:	e033      	b.n	8000f8e <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART2)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a1d      	ldr	r2, [pc, #116]	; (8000fa0 <HAL_UART_MspInit+0xf4>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d12e      	bne.n	8000f8e <HAL_UART_MspInit+0xe2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f30:	2302      	movs	r3, #2
 8000f32:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f34:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8000f38:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f3a:	f107 030c 	add.w	r3, r7, #12
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f002 fae2 	bl	8003508 <HAL_RCCEx_PeriphCLKConfig>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <HAL_UART_MspInit+0xa2>
      Error_Handler();
 8000f4a:	f7ff fea7 	bl	8000c9c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f4e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000f52:	f7ff fed0 	bl	8000cf6 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f56:	2001      	movs	r0, #1
 8000f58:	f7ff feb5 	bl	8000cc6 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8000f5c:	230c      	movs	r3, #12
 8000f5e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f60:	2302      	movs	r3, #2
 8000f62:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f6c:	2307      	movs	r3, #7
 8000f6e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f70:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000f74:	4619      	mov	r1, r3
 8000f76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f7a:	f000 fe1d 	bl	8001bb8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2105      	movs	r1, #5
 8000f82:	2025      	movs	r0, #37	; 0x25
 8000f84:	f000 fd33 	bl	80019ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f88:	2025      	movs	r0, #37	; 0x25
 8000f8a:	f000 fd4a 	bl	8001a22 <HAL_NVIC_EnableIRQ>
}
 8000f8e:	bf00      	nop
 8000f90:	3758      	adds	r7, #88	; 0x58
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40008000 	.word	0x40008000
 8000f9c:	48000800 	.word	0x48000800
 8000fa0:	40004400 	.word	0x40004400

08000fa4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b090      	sub	sp, #64	; 0x40
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fac:	f107 0308 	add.w	r3, r7, #8
 8000fb0:	2238      	movs	r2, #56	; 0x38
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f008 fab2 	bl	800951e <memset>
  if(hrtc->Instance==RTC)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a0e      	ldr	r2, [pc, #56]	; (8000ff8 <HAL_RTC_MspInit+0x54>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d115      	bne.n	8000ff0 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000fc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fc8:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000fca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fce:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fd0:	f107 0308 	add.w	r3, r7, #8
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f002 fa97 	bl	8003508 <HAL_RCCEx_PeriphCLKConfig>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000fe0:	f7ff fe5c 	bl	8000c9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000fe4:	f7ff fe5f 	bl	8000ca6 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000fe8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000fec:	f7ff fe83 	bl	8000cf6 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000ff0:	bf00      	nop
 8000ff2:	3740      	adds	r7, #64	; 0x40
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40002800 	.word	0x40002800

08000ffc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b096      	sub	sp, #88	; 0x58
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001004:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001014:	f107 030c 	add.w	r3, r7, #12
 8001018:	2238      	movs	r2, #56	; 0x38
 800101a:	2100      	movs	r1, #0
 800101c:	4618      	mov	r0, r3
 800101e:	f008 fa7e 	bl	800951e <memset>
  if(hspi->Instance==SPI2)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a21      	ldr	r2, [pc, #132]	; (80010ac <HAL_SPI_MspInit+0xb0>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d13b      	bne.n	80010a4 <HAL_SPI_MspInit+0xa8>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S2;
 800102c:	2310      	movs	r3, #16
 800102e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2s2ClockSelection = RCC_I2S2CLKSOURCE_HSI;
 8001030:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001034:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001036:	f107 030c 	add.w	r3, r7, #12
 800103a:	4618      	mov	r0, r3
 800103c:	f002 fa64 	bl	8003508 <HAL_RCCEx_PeriphCLKConfig>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001046:	f7ff fe29 	bl	8000c9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800104a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800104e:	f7ff fe52 	bl	8000cf6 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001052:	2002      	movs	r0, #2
 8001054:	f7ff fe37 	bl	8000cc6 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001058:	2001      	movs	r0, #1
 800105a:	f7ff fe34 	bl	8000cc6 <LL_AHB2_GRP1_EnableClock>
    /**SPI2 GPIO Configuration
    PB14     ------> SPI2_MISO
    PA10     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13;
 800105e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001062:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001064:	2302      	movs	r3, #2
 8001066:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106c:	2300      	movs	r3, #0
 800106e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001070:	2305      	movs	r3, #5
 8001072:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001074:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001078:	4619      	mov	r1, r3
 800107a:	480d      	ldr	r0, [pc, #52]	; (80010b0 <HAL_SPI_MspInit+0xb4>)
 800107c:	f000 fd9c 	bl	8001bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001080:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001084:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001086:	2302      	movs	r3, #2
 8001088:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108e:	2300      	movs	r3, #0
 8001090:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001092:	2305      	movs	r3, #5
 8001094:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001096:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800109a:	4619      	mov	r1, r3
 800109c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a0:	f000 fd8a 	bl	8001bb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80010a4:	bf00      	nop
 80010a6:	3758      	adds	r7, #88	; 0x58
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	40003800 	.word	0x40003800
 80010b0:	48000400 	.word	0x48000400

080010b4 <LL_APB2_GRP1_EnableClock>:
{
 80010b4:	b480      	push	{r7}
 80010b6:	b085      	sub	sp, #20
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80010bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010c0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80010c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80010cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010d0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4013      	ands	r3, r2
 80010d6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010d8:	68fb      	ldr	r3, [r7, #12]
}
 80010da:	bf00      	nop
 80010dc:	3714      	adds	r7, #20
 80010de:	46bd      	mov	sp, r7
 80010e0:	bc80      	pop	{r7}
 80010e2:	4770      	bx	lr

080010e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b08c      	sub	sp, #48	; 0x30
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80010f4:	2300      	movs	r3, #0
 80010f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80010fa:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80010fe:	f7ff ffd9 	bl	80010b4 <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001102:	f107 0208 	add.w	r2, r7, #8
 8001106:	f107 030c 	add.w	r3, r7, #12
 800110a:	4611      	mov	r1, r2
 800110c:	4618      	mov	r0, r3
 800110e:	f002 f817 	bl	8003140 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001112:	f002 f803 	bl	800311c <HAL_RCC_GetPCLK2Freq>
 8001116:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800111a:	4a21      	ldr	r2, [pc, #132]	; (80011a0 <HAL_InitTick+0xbc>)
 800111c:	fba2 2303 	umull	r2, r3, r2, r3
 8001120:	0c9b      	lsrs	r3, r3, #18
 8001122:	3b01      	subs	r3, #1
 8001124:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001126:	4b1f      	ldr	r3, [pc, #124]	; (80011a4 <HAL_InitTick+0xc0>)
 8001128:	4a1f      	ldr	r2, [pc, #124]	; (80011a8 <HAL_InitTick+0xc4>)
 800112a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800112c:	4b1d      	ldr	r3, [pc, #116]	; (80011a4 <HAL_InitTick+0xc0>)
 800112e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001132:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001134:	4a1b      	ldr	r2, [pc, #108]	; (80011a4 <HAL_InitTick+0xc0>)
 8001136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001138:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800113a:	4b1a      	ldr	r3, [pc, #104]	; (80011a4 <HAL_InitTick+0xc0>)
 800113c:	2200      	movs	r2, #0
 800113e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001140:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <HAL_InitTick+0xc0>)
 8001142:	2200      	movs	r2, #0
 8001144:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8001146:	4817      	ldr	r0, [pc, #92]	; (80011a4 <HAL_InitTick+0xc0>)
 8001148:	f002 ff29 	bl	8003f9e <HAL_TIM_Base_Init>
 800114c:	4603      	mov	r3, r0
 800114e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001152:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001156:	2b00      	cmp	r3, #0
 8001158:	d11b      	bne.n	8001192 <HAL_InitTick+0xae>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800115a:	4812      	ldr	r0, [pc, #72]	; (80011a4 <HAL_InitTick+0xc0>)
 800115c:	f002 ff80 	bl	8004060 <HAL_TIM_Base_Start_IT>
 8001160:	4603      	mov	r3, r0
 8001162:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001166:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800116a:	2b00      	cmp	r3, #0
 800116c:	d111      	bne.n	8001192 <HAL_InitTick+0xae>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800116e:	2018      	movs	r0, #24
 8001170:	f000 fc57 	bl	8001a22 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2b0f      	cmp	r3, #15
 8001178:	d808      	bhi.n	800118c <HAL_InitTick+0xa8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 800117a:	2200      	movs	r2, #0
 800117c:	6879      	ldr	r1, [r7, #4]
 800117e:	2018      	movs	r0, #24
 8001180:	f000 fc35 	bl	80019ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001184:	4a09      	ldr	r2, [pc, #36]	; (80011ac <HAL_InitTick+0xc8>)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6013      	str	r3, [r2, #0]
 800118a:	e002      	b.n	8001192 <HAL_InitTick+0xae>
      }
      else
      {
        status = HAL_ERROR;
 800118c:	2301      	movs	r3, #1
 800118e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001192:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001196:	4618      	mov	r0, r3
 8001198:	3730      	adds	r7, #48	; 0x30
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	431bde83 	.word	0x431bde83
 80011a4:	20000a8c 	.word	0x20000a8c
 80011a8:	40012c00 	.word	0x40012c00
 80011ac:	20000004 	.word	0x20000004

080011b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011b4:	e7fe      	b.n	80011b4 <NMI_Handler+0x4>

080011b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011b6:	b480      	push	{r7}
 80011b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011ba:	e7fe      	b.n	80011ba <HardFault_Handler+0x4>

080011bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011c0:	e7fe      	b.n	80011c0 <MemManage_Handler+0x4>

080011c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011c2:	b480      	push	{r7}
 80011c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011c6:	e7fe      	b.n	80011c6 <BusFault_Handler+0x4>

080011c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011cc:	e7fe      	b.n	80011cc <UsageFault_Handler+0x4>

080011ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ce:	b480      	push	{r7}
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011d2:	bf00      	nop
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bc80      	pop	{r7}
 80011d8:	4770      	bx	lr
	...

080011dc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update Interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80011e0:	4802      	ldr	r0, [pc, #8]	; (80011ec <TIM1_UP_IRQHandler+0x10>)
 80011e2:	f002 ff89 	bl	80040f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000a8c 	.word	0x20000a8c

080011f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80011f4:	4802      	ldr	r0, [pc, #8]	; (8001200 <USART2_IRQHandler+0x10>)
 80011f6:	f003 fadb 	bl	80047b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20000944 	.word	0x20000944

08001204 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  return 1;
 8001208:	2301      	movs	r3, #1
}
 800120a:	4618      	mov	r0, r3
 800120c:	46bd      	mov	sp, r7
 800120e:	bc80      	pop	{r7}
 8001210:	4770      	bx	lr

08001212 <_kill>:

int _kill(int pid, int sig)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b082      	sub	sp, #8
 8001216:	af00      	add	r7, sp, #0
 8001218:	6078      	str	r0, [r7, #4]
 800121a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800121c:	f008 f84e 	bl	80092bc <__errno>
 8001220:	4603      	mov	r3, r0
 8001222:	2216      	movs	r2, #22
 8001224:	601a      	str	r2, [r3, #0]
  return -1;
 8001226:	f04f 33ff 	mov.w	r3, #4294967295
}
 800122a:	4618      	mov	r0, r3
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <_exit>:

void _exit (int status)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b082      	sub	sp, #8
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800123a:	f04f 31ff 	mov.w	r1, #4294967295
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f7ff ffe7 	bl	8001212 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001244:	e7fe      	b.n	8001244 <_exit+0x12>

08001246 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b086      	sub	sp, #24
 800124a:	af00      	add	r7, sp, #0
 800124c:	60f8      	str	r0, [r7, #12]
 800124e:	60b9      	str	r1, [r7, #8]
 8001250:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]
 8001256:	e00a      	b.n	800126e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001258:	f3af 8000 	nop.w
 800125c:	4601      	mov	r1, r0
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	1c5a      	adds	r2, r3, #1
 8001262:	60ba      	str	r2, [r7, #8]
 8001264:	b2ca      	uxtb	r2, r1
 8001266:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	3301      	adds	r3, #1
 800126c:	617b      	str	r3, [r7, #20]
 800126e:	697a      	ldr	r2, [r7, #20]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	429a      	cmp	r2, r3
 8001274:	dbf0      	blt.n	8001258 <_read+0x12>
  }

  return len;
 8001276:	687b      	ldr	r3, [r7, #4]
}
 8001278:	4618      	mov	r0, r3
 800127a:	3718      	adds	r7, #24
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]
 8001290:	e009      	b.n	80012a6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	1c5a      	adds	r2, r3, #1
 8001296:	60ba      	str	r2, [r7, #8]
 8001298:	781b      	ldrb	r3, [r3, #0]
 800129a:	4618      	mov	r0, r3
 800129c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	3301      	adds	r3, #1
 80012a4:	617b      	str	r3, [r7, #20]
 80012a6:	697a      	ldr	r2, [r7, #20]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	dbf1      	blt.n	8001292 <_write+0x12>
  }
  return len;
 80012ae:	687b      	ldr	r3, [r7, #4]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3718      	adds	r7, #24
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <_close>:

int _close(int file)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bc80      	pop	{r7}
 80012cc:	4770      	bx	lr

080012ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012ce:	b480      	push	{r7}
 80012d0:	b083      	sub	sp, #12
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
 80012d6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012de:	605a      	str	r2, [r3, #4]
  return 0;
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr

080012ec <_isatty>:

int _isatty(int file)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012f4:	2301      	movs	r3, #1
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bc80      	pop	{r7}
 80012fe:	4770      	bx	lr

08001300 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3714      	adds	r7, #20
 8001312:	46bd      	mov	sp, r7
 8001314:	bc80      	pop	{r7}
 8001316:	4770      	bx	lr

08001318 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001320:	4a14      	ldr	r2, [pc, #80]	; (8001374 <_sbrk+0x5c>)
 8001322:	4b15      	ldr	r3, [pc, #84]	; (8001378 <_sbrk+0x60>)
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800132c:	4b13      	ldr	r3, [pc, #76]	; (800137c <_sbrk+0x64>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d102      	bne.n	800133a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001334:	4b11      	ldr	r3, [pc, #68]	; (800137c <_sbrk+0x64>)
 8001336:	4a12      	ldr	r2, [pc, #72]	; (8001380 <_sbrk+0x68>)
 8001338:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800133a:	4b10      	ldr	r3, [pc, #64]	; (800137c <_sbrk+0x64>)
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4413      	add	r3, r2
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	429a      	cmp	r2, r3
 8001346:	d207      	bcs.n	8001358 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001348:	f007 ffb8 	bl	80092bc <__errno>
 800134c:	4603      	mov	r3, r0
 800134e:	220c      	movs	r2, #12
 8001350:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001352:	f04f 33ff 	mov.w	r3, #4294967295
 8001356:	e009      	b.n	800136c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001358:	4b08      	ldr	r3, [pc, #32]	; (800137c <_sbrk+0x64>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800135e:	4b07      	ldr	r3, [pc, #28]	; (800137c <_sbrk+0x64>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4413      	add	r3, r2
 8001366:	4a05      	ldr	r2, [pc, #20]	; (800137c <_sbrk+0x64>)
 8001368:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800136a:	68fb      	ldr	r3, [r7, #12]
}
 800136c:	4618      	mov	r0, r3
 800136e:	3718      	adds	r7, #24
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20010000 	.word	0x20010000
 8001378:	00000400 	.word	0x00000400
 800137c:	20000ad8 	.word	0x20000ad8
 8001380:	20001a68 	.word	0x20001a68

08001384 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr

08001390 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001390:	480d      	ldr	r0, [pc, #52]	; (80013c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001392:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001394:	f7ff fff6 	bl	8001384 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001398:	480c      	ldr	r0, [pc, #48]	; (80013cc <LoopForever+0x6>)
  ldr r1, =_edata
 800139a:	490d      	ldr	r1, [pc, #52]	; (80013d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800139c:	4a0d      	ldr	r2, [pc, #52]	; (80013d4 <LoopForever+0xe>)
  movs r3, #0
 800139e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013a0:	e002      	b.n	80013a8 <LoopCopyDataInit>

080013a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013a6:	3304      	adds	r3, #4

080013a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013ac:	d3f9      	bcc.n	80013a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ae:	4a0a      	ldr	r2, [pc, #40]	; (80013d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013b0:	4c0a      	ldr	r4, [pc, #40]	; (80013dc <LoopForever+0x16>)
  movs r3, #0
 80013b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013b4:	e001      	b.n	80013ba <LoopFillZerobss>

080013b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013b8:	3204      	adds	r2, #4

080013ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013bc:	d3fb      	bcc.n	80013b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80013be:	f008 f879 	bl	80094b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013c2:	f7ff f91d 	bl	8000600 <main>

080013c6 <LoopForever>:

LoopForever:
    b LoopForever
 80013c6:	e7fe      	b.n	80013c6 <LoopForever>
  ldr   r0, =_estack
 80013c8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80013cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013d0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80013d4:	0800b1c8 	.word	0x0800b1c8
  ldr r2, =_sbss
 80013d8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80013dc:	20001a68 	.word	0x20001a68

080013e0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013e0:	e7fe      	b.n	80013e0 <ADC_IRQHandler>
	...

080013e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013ea:	2300      	movs	r3, #0
 80013ec:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ee:	2003      	movs	r0, #3
 80013f0:	f000 faf2 	bl	80019d8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80013f4:	f001 fe6c 	bl	80030d0 <HAL_RCC_GetHCLKFreq>
 80013f8:	4603      	mov	r3, r0
 80013fa:	4a09      	ldr	r2, [pc, #36]	; (8001420 <HAL_Init+0x3c>)
 80013fc:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013fe:	200f      	movs	r0, #15
 8001400:	f7ff fe70 	bl	80010e4 <HAL_InitTick>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d002      	beq.n	8001410 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	71fb      	strb	r3, [r7, #7]
 800140e:	e001      	b.n	8001414 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001410:	f7ff fcb9 	bl	8000d86 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001414:	79fb      	ldrb	r3, [r7, #7]
}
 8001416:	4618      	mov	r0, r3
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000000 	.word	0x20000000

08001424 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001428:	4b05      	ldr	r3, [pc, #20]	; (8001440 <HAL_IncTick+0x1c>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	461a      	mov	r2, r3
 800142e:	4b05      	ldr	r3, [pc, #20]	; (8001444 <HAL_IncTick+0x20>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4413      	add	r3, r2
 8001434:	4a03      	ldr	r2, [pc, #12]	; (8001444 <HAL_IncTick+0x20>)
 8001436:	6013      	str	r3, [r2, #0]
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	bc80      	pop	{r7}
 800143e:	4770      	bx	lr
 8001440:	20000008 	.word	0x20000008
 8001444:	20000adc 	.word	0x20000adc

08001448 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  return uwTick;
 800144c:	4b02      	ldr	r3, [pc, #8]	; (8001458 <HAL_GetTick+0x10>)
 800144e:	681b      	ldr	r3, [r3, #0]
}
 8001450:	4618      	mov	r0, r3
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr
 8001458:	20000adc 	.word	0x20000adc

0800145c <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	695a      	ldr	r2, [r3, #20]
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	f003 0304 	and.w	r3, r3, #4
 8001472:	2107      	movs	r1, #7
 8001474:	fa01 f303 	lsl.w	r3, r1, r3
 8001478:	43db      	mvns	r3, r3
 800147a:	401a      	ands	r2, r3
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	f003 0304 	and.w	r3, r3, #4
 8001482:	6879      	ldr	r1, [r7, #4]
 8001484:	fa01 f303 	lsl.w	r3, r1, r3
 8001488:	431a      	orrs	r2, r3
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800148e:	bf00      	nop
 8001490:	3714      	adds	r7, #20
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr

08001498 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	695a      	ldr	r2, [r3, #20]
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	f003 0304 	and.w	r3, r3, #4
 80014ac:	2107      	movs	r1, #7
 80014ae:	fa01 f303 	lsl.w	r3, r1, r3
 80014b2:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80014ba:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014be:	4618      	mov	r0, r3
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bc80      	pop	{r7}
 80014c6:	4770      	bx	lr

080014c8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80014d8:	f023 0317 	bic.w	r3, r3, #23
 80014dc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bc80      	pop	{r7}
 80014ec:	4770      	bx	lr

080014ee <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80014ee:	b480      	push	{r7}
 80014f0:	b083      	sub	sp, #12
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001502:	d101      	bne.n	8001508 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001504:	2301      	movs	r3, #1
 8001506:	e000      	b.n	800150a <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	bc80      	pop	{r7}
 8001512:	4770      	bx	lr

08001514 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	f003 0301 	and.w	r3, r3, #1
 8001524:	2b01      	cmp	r3, #1
 8001526:	d101      	bne.n	800152c <LL_ADC_IsEnabled+0x18>
 8001528:	2301      	movs	r3, #1
 800152a:	e000      	b.n	800152e <LL_ADC_IsEnabled+0x1a>
 800152c:	2300      	movs	r3, #0
}
 800152e:	4618      	mov	r0, r3
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	bc80      	pop	{r7}
 8001536:	4770      	bx	lr

08001538 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	f003 0304 	and.w	r3, r3, #4
 8001548:	2b04      	cmp	r3, #4
 800154a:	d101      	bne.n	8001550 <LL_ADC_REG_IsConversionOngoing+0x18>
 800154c:	2301      	movs	r3, #1
 800154e:	e000      	b.n	8001552 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr

0800155c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b088      	sub	sp, #32
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001564:	2300      	movs	r3, #0
 8001566:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8001568:	2300      	movs	r3, #0
 800156a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001570:	2300      	movs	r3, #0
 8001572:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d101      	bne.n	800157e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e17e      	b.n	800187c <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	691b      	ldr	r3, [r3, #16]
 8001582:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001588:	2b00      	cmp	r3, #0
 800158a:	d109      	bne.n	80015a0 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f7ff fc05 	bl	8000d9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2200      	movs	r2, #0
 800159c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff ffa2 	bl	80014ee <LL_ADC_IsInternalRegulatorEnabled>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d115      	bne.n	80015dc <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff ff87 	bl	80014c8 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80015ba:	4b9e      	ldr	r3, [pc, #632]	; (8001834 <HAL_ADC_Init+0x2d8>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	099b      	lsrs	r3, r3, #6
 80015c0:	4a9d      	ldr	r2, [pc, #628]	; (8001838 <HAL_ADC_Init+0x2dc>)
 80015c2:	fba2 2303 	umull	r2, r3, r2, r3
 80015c6:	099b      	lsrs	r3, r3, #6
 80015c8:	3301      	adds	r3, #1
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80015ce:	e002      	b.n	80015d6 <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	3b01      	subs	r3, #1
 80015d4:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d1f9      	bne.n	80015d0 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff ff84 	bl	80014ee <LL_ADC_IsInternalRegulatorEnabled>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d10d      	bne.n	8001608 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f0:	f043 0210 	orr.w	r2, r3, #16
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015fc:	f043 0201 	orr.w	r2, r3, #1
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff ff93 	bl	8001538 <LL_ADC_REG_IsConversionOngoing>
 8001612:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001618:	f003 0310 	and.w	r3, r3, #16
 800161c:	2b00      	cmp	r3, #0
 800161e:	f040 8124 	bne.w	800186a <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	2b00      	cmp	r3, #0
 8001626:	f040 8120 	bne.w	800186a <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800162e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001632:	f043 0202 	orr.w	r2, r3, #2
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff ff68 	bl	8001514 <LL_ADC_IsEnabled>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	f040 80a7 	bne.w	800179a <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	7e1b      	ldrb	r3, [r3, #24]
 8001654:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001656:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	7e5b      	ldrb	r3, [r3, #25]
 800165c:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800165e:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	7e9b      	ldrb	r3, [r3, #26]
 8001664:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001666:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800166c:	2a00      	cmp	r2, #0
 800166e:	d002      	beq.n	8001676 <HAL_ADC_Init+0x11a>
 8001670:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001674:	e000      	b.n	8001678 <HAL_ADC_Init+0x11c>
 8001676:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001678:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800167e:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	691b      	ldr	r3, [r3, #16]
 8001684:	2b00      	cmp	r3, #0
 8001686:	da04      	bge.n	8001692 <HAL_ADC_Init+0x136>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	691b      	ldr	r3, [r3, #16]
 800168c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001690:	e001      	b.n	8001696 <HAL_ADC_Init+0x13a>
 8001692:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 8001696:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800169e:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80016a0:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d114      	bne.n	80016dc <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	7e9b      	ldrb	r3, [r3, #26]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d104      	bne.n	80016c4 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016c0:	61bb      	str	r3, [r7, #24]
 80016c2:	e00b      	b.n	80016dc <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016c8:	f043 0220 	orr.w	r2, r3, #32
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016d4:	f043 0201 	orr.w	r2, r3, #1
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d009      	beq.n	80016f8 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e8:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80016f0:	4313      	orrs	r3, r2
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 8001702:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	6812      	ldr	r2, [r2, #0]
 800170a:	69b9      	ldr	r1, [r7, #24]
 800170c:	430b      	orrs	r3, r1
 800170e:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800171c:	4313      	orrs	r3, r2
 800171e:	697a      	ldr	r2, [r7, #20]
 8001720:	4313      	orrs	r3, r2
 8001722:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800172a:	2b01      	cmp	r3, #1
 800172c:	d111      	bne.n	8001752 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800173a:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001740:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8001746:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	4313      	orrs	r3, r2
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	691a      	ldr	r2, [r3, #16]
 8001758:	4b38      	ldr	r3, [pc, #224]	; (800183c <HAL_ADC_Init+0x2e0>)
 800175a:	4013      	ands	r3, r2
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	6812      	ldr	r2, [r2, #0]
 8001760:	6979      	ldr	r1, [r7, #20]
 8001762:	430b      	orrs	r3, r1
 8001764:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800176e:	d014      	beq.n	800179a <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001778:	d00f      	beq.n	800179a <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800177e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001782:	d00a      	beq.n	800179a <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8001784:	4b2e      	ldr	r3, [pc, #184]	; (8001840 <HAL_ADC_Init+0x2e4>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001794:	492a      	ldr	r1, [pc, #168]	; (8001840 <HAL_ADC_Init+0x2e4>)
 8001796:	4313      	orrs	r3, r2
 8001798:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6818      	ldr	r0, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017a2:	461a      	mov	r2, r3
 80017a4:	2100      	movs	r1, #0
 80017a6:	f7ff fe59 	bl	800145c <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6818      	ldr	r0, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017b2:	461a      	mov	r2, r3
 80017b4:	4923      	ldr	r1, [pc, #140]	; (8001844 <HAL_ADC_Init+0x2e8>)
 80017b6:	f7ff fe51 	bl	800145c <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d108      	bne.n	80017d4 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f062 020f 	orn	r2, r2, #15
 80017d0:	629a      	str	r2, [r3, #40]	; 0x28
 80017d2:	e017      	b.n	8001804 <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	691b      	ldr	r3, [r3, #16]
 80017d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80017dc:	d112      	bne.n	8001804 <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	69db      	ldr	r3, [r3, #28]
 80017e8:	3b01      	subs	r3, #1
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	f003 031c 	and.w	r3, r3, #28
 80017f0:	f06f 020f 	mvn.w	r2, #15
 80017f4:	fa02 f103 	lsl.w	r1, r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	430a      	orrs	r2, r1
 8001802:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2100      	movs	r1, #0
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff fe44 	bl	8001498 <LL_ADC_GetSamplingTimeCommonChannels>
 8001810:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001816:	429a      	cmp	r2, r3
 8001818:	d116      	bne.n	8001848 <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001824:	f023 0303 	bic.w	r3, r3, #3
 8001828:	f043 0201 	orr.w	r2, r3, #1
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001830:	e023      	b.n	800187a <HAL_ADC_Init+0x31e>
 8001832:	bf00      	nop
 8001834:	20000000 	.word	0x20000000
 8001838:	053e2d63 	.word	0x053e2d63
 800183c:	1ffffc02 	.word	0x1ffffc02
 8001840:	40012708 	.word	0x40012708
 8001844:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800184c:	f023 0312 	bic.w	r3, r3, #18
 8001850:	f043 0210 	orr.w	r2, r3, #16
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800185c:	f043 0201 	orr.w	r2, r3, #1
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001868:	e007      	b.n	800187a <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800186e:	f043 0210 	orr.w	r2, r3, #16
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 800187a:	7ffb      	ldrb	r3, [r7, #31]
}
 800187c:	4618      	mov	r0, r3
 800187e:	3720      	adds	r7, #32
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f003 0307 	and.w	r3, r3, #7
 8001892:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001894:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800189a:	68ba      	ldr	r2, [r7, #8]
 800189c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018a0:	4013      	ands	r3, r2
 80018a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018b6:	4a04      	ldr	r2, [pc, #16]	; (80018c8 <__NVIC_SetPriorityGrouping+0x44>)
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	60d3      	str	r3, [r2, #12]
}
 80018bc:	bf00      	nop
 80018be:	3714      	adds	r7, #20
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bc80      	pop	{r7}
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018d0:	4b04      	ldr	r3, [pc, #16]	; (80018e4 <__NVIC_GetPriorityGrouping+0x18>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	0a1b      	lsrs	r3, r3, #8
 80018d6:	f003 0307 	and.w	r3, r3, #7
}
 80018da:	4618      	mov	r0, r3
 80018dc:	46bd      	mov	sp, r7
 80018de:	bc80      	pop	{r7}
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	e000ed00 	.word	0xe000ed00

080018e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	db0b      	blt.n	8001912 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	f003 021f 	and.w	r2, r3, #31
 8001900:	4906      	ldr	r1, [pc, #24]	; (800191c <__NVIC_EnableIRQ+0x34>)
 8001902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001906:	095b      	lsrs	r3, r3, #5
 8001908:	2001      	movs	r0, #1
 800190a:	fa00 f202 	lsl.w	r2, r0, r2
 800190e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr
 800191c:	e000e100 	.word	0xe000e100

08001920 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	6039      	str	r1, [r7, #0]
 800192a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800192c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001930:	2b00      	cmp	r3, #0
 8001932:	db0a      	blt.n	800194a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	b2da      	uxtb	r2, r3
 8001938:	490c      	ldr	r1, [pc, #48]	; (800196c <__NVIC_SetPriority+0x4c>)
 800193a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193e:	0112      	lsls	r2, r2, #4
 8001940:	b2d2      	uxtb	r2, r2
 8001942:	440b      	add	r3, r1
 8001944:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001948:	e00a      	b.n	8001960 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	b2da      	uxtb	r2, r3
 800194e:	4908      	ldr	r1, [pc, #32]	; (8001970 <__NVIC_SetPriority+0x50>)
 8001950:	79fb      	ldrb	r3, [r7, #7]
 8001952:	f003 030f 	and.w	r3, r3, #15
 8001956:	3b04      	subs	r3, #4
 8001958:	0112      	lsls	r2, r2, #4
 800195a:	b2d2      	uxtb	r2, r2
 800195c:	440b      	add	r3, r1
 800195e:	761a      	strb	r2, [r3, #24]
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	bc80      	pop	{r7}
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	e000e100 	.word	0xe000e100
 8001970:	e000ed00 	.word	0xe000ed00

08001974 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001974:	b480      	push	{r7}
 8001976:	b089      	sub	sp, #36	; 0x24
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	f1c3 0307 	rsb	r3, r3, #7
 800198e:	2b04      	cmp	r3, #4
 8001990:	bf28      	it	cs
 8001992:	2304      	movcs	r3, #4
 8001994:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	3304      	adds	r3, #4
 800199a:	2b06      	cmp	r3, #6
 800199c:	d902      	bls.n	80019a4 <NVIC_EncodePriority+0x30>
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	3b03      	subs	r3, #3
 80019a2:	e000      	b.n	80019a6 <NVIC_EncodePriority+0x32>
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a8:	f04f 32ff 	mov.w	r2, #4294967295
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43da      	mvns	r2, r3
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	401a      	ands	r2, r3
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019bc:	f04f 31ff 	mov.w	r1, #4294967295
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	fa01 f303 	lsl.w	r3, r1, r3
 80019c6:	43d9      	mvns	r1, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019cc:	4313      	orrs	r3, r2
         );
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3724      	adds	r7, #36	; 0x24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr

080019d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f7ff ff4f 	bl	8001884 <__NVIC_SetPriorityGrouping>
}
 80019e6:	bf00      	nop
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b086      	sub	sp, #24
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	4603      	mov	r3, r0
 80019f6:	60b9      	str	r1, [r7, #8]
 80019f8:	607a      	str	r2, [r7, #4]
 80019fa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019fc:	f7ff ff66 	bl	80018cc <__NVIC_GetPriorityGrouping>
 8001a00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	68b9      	ldr	r1, [r7, #8]
 8001a06:	6978      	ldr	r0, [r7, #20]
 8001a08:	f7ff ffb4 	bl	8001974 <NVIC_EncodePriority>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a12:	4611      	mov	r1, r2
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff ff83 	bl	8001920 <__NVIC_SetPriority>
}
 8001a1a:	bf00      	nop
 8001a1c:	3718      	adds	r7, #24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b082      	sub	sp, #8
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	4603      	mov	r3, r0
 8001a2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff ff59 	bl	80018e8 <__NVIC_EnableIRQ>
}
 8001a36:	bf00      	nop
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b083      	sub	sp, #12
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d101      	bne.n	8001a50 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e04f      	b.n	8001af0 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d008      	beq.n	8001a6e <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2204      	movs	r2, #4
 8001a60:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e040      	b.n	8001af0 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f022 020e 	bic.w	r2, r2, #14
 8001a7c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a8c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f022 0201 	bic.w	r2, r2, #1
 8001a9c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa2:	f003 021c 	and.w	r2, r3, #28
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aaa:	2101      	movs	r1, #1
 8001aac:	fa01 f202 	lsl.w	r2, r1, r2
 8001ab0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001aba:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d00c      	beq.n	8001ade <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ac8:	681a      	ldr	r2, [r3, #0]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ace:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ad2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001adc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8001aee:	2300      	movs	r3, #0
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bc80      	pop	{r7}
 8001af8:	4770      	bx	lr

08001afa <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b084      	sub	sp, #16
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b02:	2300      	movs	r3, #0
 8001b04:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d005      	beq.n	8001b1e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2204      	movs	r2, #4
 8001b16:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	73fb      	strb	r3, [r7, #15]
 8001b1c:	e047      	b.n	8001bae <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f022 020e 	bic.w	r2, r2, #14
 8001b2c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f022 0201 	bic.w	r2, r2, #1
 8001b3c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b4c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b52:	f003 021c 	and.w	r2, r3, #28
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5a:	2101      	movs	r1, #1
 8001b5c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b60:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001b6a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d00c      	beq.n	8001b8e <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b82:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001b8c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2201      	movs	r2, #1
 8001b92:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d003      	beq.n	8001bae <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	4798      	blx	r3
    }
  }
  return status;
 8001bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3710      	adds	r7, #16
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b087      	sub	sp, #28
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bc6:	e140      	b.n	8001e4a <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	2101      	movs	r1, #1
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f000 8132 	beq.w	8001e44 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 0303 	and.w	r3, r3, #3
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d005      	beq.n	8001bf8 <HAL_GPIO_Init+0x40>
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f003 0303 	and.w	r3, r3, #3
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d130      	bne.n	8001c5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	2203      	movs	r2, #3
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	43db      	mvns	r3, r3
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	68da      	ldr	r2, [r3, #12]
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c2e:	2201      	movs	r2, #1
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	43db      	mvns	r3, r3
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	091b      	lsrs	r3, r3, #4
 8001c44:	f003 0201 	and.w	r2, r3, #1
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	693a      	ldr	r2, [r7, #16]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f003 0303 	and.w	r3, r3, #3
 8001c62:	2b03      	cmp	r3, #3
 8001c64:	d017      	beq.n	8001c96 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	68db      	ldr	r3, [r3, #12]
 8001c6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	2203      	movs	r2, #3
 8001c72:	fa02 f303 	lsl.w	r3, r2, r3
 8001c76:	43db      	mvns	r3, r3
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	689a      	ldr	r2, [r3, #8]
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f003 0303 	and.w	r3, r3, #3
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d123      	bne.n	8001cea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	08da      	lsrs	r2, r3, #3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	3208      	adds	r2, #8
 8001caa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	220f      	movs	r2, #15
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	693a      	ldr	r2, [r7, #16]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	691a      	ldr	r2, [r3, #16]
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	f003 0307 	and.w	r3, r3, #7
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	08da      	lsrs	r2, r3, #3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3208      	adds	r2, #8
 8001ce4:	6939      	ldr	r1, [r7, #16]
 8001ce6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	2203      	movs	r2, #3
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f003 0203 	and.w	r2, r3, #3
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f000 808c 	beq.w	8001e44 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001d2c:	4a4e      	ldr	r2, [pc, #312]	; (8001e68 <HAL_GPIO_Init+0x2b0>)
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	089b      	lsrs	r3, r3, #2
 8001d32:	3302      	adds	r3, #2
 8001d34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d38:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	f003 0303 	and.w	r3, r3, #3
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	2207      	movs	r2, #7
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	693a      	ldr	r2, [r7, #16]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d56:	d00d      	beq.n	8001d74 <HAL_GPIO_Init+0x1bc>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4a44      	ldr	r2, [pc, #272]	; (8001e6c <HAL_GPIO_Init+0x2b4>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d007      	beq.n	8001d70 <HAL_GPIO_Init+0x1b8>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4a43      	ldr	r2, [pc, #268]	; (8001e70 <HAL_GPIO_Init+0x2b8>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d101      	bne.n	8001d6c <HAL_GPIO_Init+0x1b4>
 8001d68:	2302      	movs	r3, #2
 8001d6a:	e004      	b.n	8001d76 <HAL_GPIO_Init+0x1be>
 8001d6c:	2307      	movs	r3, #7
 8001d6e:	e002      	b.n	8001d76 <HAL_GPIO_Init+0x1be>
 8001d70:	2301      	movs	r3, #1
 8001d72:	e000      	b.n	8001d76 <HAL_GPIO_Init+0x1be>
 8001d74:	2300      	movs	r3, #0
 8001d76:	697a      	ldr	r2, [r7, #20]
 8001d78:	f002 0203 	and.w	r2, r2, #3
 8001d7c:	0092      	lsls	r2, r2, #2
 8001d7e:	4093      	lsls	r3, r2
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d86:	4938      	ldr	r1, [pc, #224]	; (8001e68 <HAL_GPIO_Init+0x2b0>)
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	089b      	lsrs	r3, r3, #2
 8001d8c:	3302      	adds	r3, #2
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d94:	4b37      	ldr	r3, [pc, #220]	; (8001e74 <HAL_GPIO_Init+0x2bc>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	4013      	ands	r3, r2
 8001da2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d003      	beq.n	8001db8 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8001db0:	693a      	ldr	r2, [r7, #16]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001db8:	4a2e      	ldr	r2, [pc, #184]	; (8001e74 <HAL_GPIO_Init+0x2bc>)
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001dbe:	4b2d      	ldr	r3, [pc, #180]	; (8001e74 <HAL_GPIO_Init+0x2bc>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	693a      	ldr	r2, [r7, #16]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001de2:	4a24      	ldr	r2, [pc, #144]	; (8001e74 <HAL_GPIO_Init+0x2bc>)
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001de8:	4b22      	ldr	r3, [pc, #136]	; (8001e74 <HAL_GPIO_Init+0x2bc>)
 8001dea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001dee:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	43db      	mvns	r3, r3
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	4013      	ands	r3, r2
 8001df8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8001e0e:	4a19      	ldr	r2, [pc, #100]	; (8001e74 <HAL_GPIO_Init+0x2bc>)
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8001e16:	4b17      	ldr	r3, [pc, #92]	; (8001e74 <HAL_GPIO_Init+0x2bc>)
 8001e18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e1c:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	43db      	mvns	r3, r3
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	4013      	ands	r3, r2
 8001e26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d003      	beq.n	8001e3c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001e3c:	4a0d      	ldr	r2, [pc, #52]	; (8001e74 <HAL_GPIO_Init+0x2bc>)
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	3301      	adds	r3, #1
 8001e48:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	fa22 f303 	lsr.w	r3, r2, r3
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f47f aeb7 	bne.w	8001bc8 <HAL_GPIO_Init+0x10>
  }
}
 8001e5a:	bf00      	nop
 8001e5c:	bf00      	nop
 8001e5e:	371c      	adds	r7, #28
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bc80      	pop	{r7}
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	40010000 	.word	0x40010000
 8001e6c:	48000400 	.word	0x48000400
 8001e70:	48000800 	.word	0x48000800
 8001e74:	58000800 	.word	0x58000800

08001e78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	460b      	mov	r3, r1
 8001e82:	807b      	strh	r3, [r7, #2]
 8001e84:	4613      	mov	r3, r2
 8001e86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e88:	787b      	ldrb	r3, [r7, #1]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d003      	beq.n	8001e96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e8e:	887a      	ldrh	r2, [r7, #2]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e94:	e002      	b.n	8001e9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e96:	887a      	ldrh	r2, [r7, #2]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bc80      	pop	{r7}
 8001ea4:	4770      	bx	lr

08001ea6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b082      	sub	sp, #8
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d101      	bne.n	8001eb8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e081      	b.n	8001fbc <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d106      	bne.n	8001ed2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f7fe ff91 	bl	8000df4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2224      	movs	r2, #36	; 0x24
 8001ed6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 0201 	bic.w	r2, r2, #1
 8001ee8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685a      	ldr	r2, [r3, #4]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ef6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	689a      	ldr	r2, [r3, #8]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f06:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d107      	bne.n	8001f20 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f1c:	609a      	str	r2, [r3, #8]
 8001f1e:	e006      	b.n	8001f2e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001f2c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d104      	bne.n	8001f40 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f3e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	6812      	ldr	r2, [r2, #0]
 8001f4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f52:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	68da      	ldr	r2, [r3, #12]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f62:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	691a      	ldr	r2, [r3, #16]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	695b      	ldr	r3, [r3, #20]
 8001f6c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	699b      	ldr	r3, [r3, #24]
 8001f74:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	69d9      	ldr	r1, [r3, #28]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6a1a      	ldr	r2, [r3, #32]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f042 0201 	orr.w	r2, r2, #1
 8001f9c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2220      	movs	r2, #32
 8001fa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001fba:	2300      	movs	r3, #0
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	3708      	adds	r7, #8
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2b20      	cmp	r3, #32
 8001fd8:	d138      	bne.n	800204c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d101      	bne.n	8001fe8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	e032      	b.n	800204e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2201      	movs	r2, #1
 8001fec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2224      	movs	r2, #36	; 0x24
 8001ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f022 0201 	bic.w	r2, r2, #1
 8002006:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002016:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6819      	ldr	r1, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	430a      	orrs	r2, r1
 8002026:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f042 0201 	orr.w	r2, r2, #1
 8002036:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2220      	movs	r2, #32
 800203c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002048:	2300      	movs	r3, #0
 800204a:	e000      	b.n	800204e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800204c:	2302      	movs	r3, #2
  }
}
 800204e:	4618      	mov	r0, r3
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	bc80      	pop	{r7}
 8002056:	4770      	bx	lr

08002058 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002058:	b480      	push	{r7}
 800205a:	b085      	sub	sp, #20
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b20      	cmp	r3, #32
 800206c:	d139      	bne.n	80020e2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002074:	2b01      	cmp	r3, #1
 8002076:	d101      	bne.n	800207c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002078:	2302      	movs	r3, #2
 800207a:	e033      	b.n	80020e4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2224      	movs	r2, #36	; 0x24
 8002088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f022 0201 	bic.w	r2, r2, #1
 800209a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80020aa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	021b      	lsls	r3, r3, #8
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f042 0201 	orr.w	r2, r2, #1
 80020cc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2220      	movs	r2, #32
 80020d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80020de:	2300      	movs	r3, #0
 80020e0:	e000      	b.n	80020e4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80020e2:	2302      	movs	r3, #2
  }
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3714      	adds	r7, #20
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bc80      	pop	{r7}
 80020ec:	4770      	bx	lr
	...

080020f0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020f4:	4b04      	ldr	r3, [pc, #16]	; (8002108 <HAL_PWR_EnableBkUpAccess+0x18>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a03      	ldr	r2, [pc, #12]	; (8002108 <HAL_PWR_EnableBkUpAccess+0x18>)
 80020fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020fe:	6013      	str	r3, [r2, #0]
}
 8002100:	bf00      	nop
 8002102:	46bd      	mov	sp, r7
 8002104:	bc80      	pop	{r7}
 8002106:	4770      	bx	lr
 8002108:	58000400 	.word	0x58000400

0800210c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002110:	4b03      	ldr	r3, [pc, #12]	; (8002120 <HAL_PWREx_GetVoltageRange+0x14>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8002118:	4618      	mov	r0, r3
 800211a:	46bd      	mov	sp, r7
 800211c:	bc80      	pop	{r7}
 800211e:	4770      	bx	lr
 8002120:	58000400 	.word	0x58000400

08002124 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8002128:	4b06      	ldr	r3, [pc, #24]	; (8002144 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002130:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002134:	d101      	bne.n	800213a <LL_PWR_IsEnabledBkUpAccess+0x16>
 8002136:	2301      	movs	r3, #1
 8002138:	e000      	b.n	800213c <LL_PWR_IsEnabledBkUpAccess+0x18>
 800213a:	2300      	movs	r3, #0
}
 800213c:	4618      	mov	r0, r3
 800213e:	46bd      	mov	sp, r7
 8002140:	bc80      	pop	{r7}
 8002142:	4770      	bx	lr
 8002144:	58000400 	.word	0x58000400

08002148 <LL_RCC_HSE_EnableTcxo>:
{
 8002148:	b480      	push	{r7}
 800214a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800214c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002156:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800215a:	6013      	str	r3, [r2, #0]
}
 800215c:	bf00      	nop
 800215e:	46bd      	mov	sp, r7
 8002160:	bc80      	pop	{r7}
 8002162:	4770      	bx	lr

08002164 <LL_RCC_HSE_DisableTcxo>:
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002172:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002176:	6013      	str	r3, [r2, #0]
}
 8002178:	bf00      	nop
 800217a:	46bd      	mov	sp, r7
 800217c:	bc80      	pop	{r7}
 800217e:	4770      	bx	lr

08002180 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8002184:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800218e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002192:	d101      	bne.n	8002198 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8002194:	2301      	movs	r3, #1
 8002196:	e000      	b.n	800219a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	46bd      	mov	sp, r7
 800219e:	bc80      	pop	{r7}
 80021a0:	4770      	bx	lr

080021a2 <LL_RCC_HSE_Enable>:
{
 80021a2:	b480      	push	{r7}
 80021a4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80021a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021b4:	6013      	str	r3, [r2, #0]
}
 80021b6:	bf00      	nop
 80021b8:	46bd      	mov	sp, r7
 80021ba:	bc80      	pop	{r7}
 80021bc:	4770      	bx	lr

080021be <LL_RCC_HSE_Disable>:
{
 80021be:	b480      	push	{r7}
 80021c0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80021c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021d0:	6013      	str	r3, [r2, #0]
}
 80021d2:	bf00      	nop
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bc80      	pop	{r7}
 80021d8:	4770      	bx	lr

080021da <LL_RCC_HSE_IsReady>:
{
 80021da:	b480      	push	{r7}
 80021dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80021de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80021ec:	d101      	bne.n	80021f2 <LL_RCC_HSE_IsReady+0x18>
 80021ee:	2301      	movs	r3, #1
 80021f0:	e000      	b.n	80021f4 <LL_RCC_HSE_IsReady+0x1a>
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bc80      	pop	{r7}
 80021fa:	4770      	bx	lr

080021fc <LL_RCC_HSI_Enable>:
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002200:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800220a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800220e:	6013      	str	r3, [r2, #0]
}
 8002210:	bf00      	nop
 8002212:	46bd      	mov	sp, r7
 8002214:	bc80      	pop	{r7}
 8002216:	4770      	bx	lr

08002218 <LL_RCC_HSI_Disable>:
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800221c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002226:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800222a:	6013      	str	r3, [r2, #0]
}
 800222c:	bf00      	nop
 800222e:	46bd      	mov	sp, r7
 8002230:	bc80      	pop	{r7}
 8002232:	4770      	bx	lr

08002234 <LL_RCC_HSI_IsReady>:
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8002238:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002242:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002246:	d101      	bne.n	800224c <LL_RCC_HSI_IsReady+0x18>
 8002248:	2301      	movs	r3, #1
 800224a:	e000      	b.n	800224e <LL_RCC_HSI_IsReady+0x1a>
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	46bd      	mov	sp, r7
 8002252:	bc80      	pop	{r7}
 8002254:	4770      	bx	lr

08002256 <LL_RCC_HSI_SetCalibTrimming>:
{
 8002256:	b480      	push	{r7}
 8002258:	b083      	sub	sp, #12
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800225e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	061b      	lsls	r3, r3, #24
 800226c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002270:	4313      	orrs	r3, r2
 8002272:	604b      	str	r3, [r1, #4]
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	bc80      	pop	{r7}
 800227c:	4770      	bx	lr

0800227e <LL_RCC_LSE_IsReady>:
{
 800227e:	b480      	push	{r7}
 8002280:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002282:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b02      	cmp	r3, #2
 8002290:	d101      	bne.n	8002296 <LL_RCC_LSE_IsReady+0x18>
 8002292:	2301      	movs	r3, #1
 8002294:	e000      	b.n	8002298 <LL_RCC_LSE_IsReady+0x1a>
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	46bd      	mov	sp, r7
 800229c:	bc80      	pop	{r7}
 800229e:	4770      	bx	lr

080022a0 <LL_RCC_LSI_Enable>:
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80022a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022b0:	f043 0301 	orr.w	r3, r3, #1
 80022b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80022b8:	bf00      	nop
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bc80      	pop	{r7}
 80022be:	4770      	bx	lr

080022c0 <LL_RCC_LSI_Disable>:
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80022c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022d0:	f023 0301 	bic.w	r3, r3, #1
 80022d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80022d8:	bf00      	nop
 80022da:	46bd      	mov	sp, r7
 80022dc:	bc80      	pop	{r7}
 80022de:	4770      	bx	lr

080022e0 <LL_RCC_LSI_IsReady>:
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80022e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022ec:	f003 0302 	and.w	r3, r3, #2
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d101      	bne.n	80022f8 <LL_RCC_LSI_IsReady+0x18>
 80022f4:	2301      	movs	r3, #1
 80022f6:	e000      	b.n	80022fa <LL_RCC_LSI_IsReady+0x1a>
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bc80      	pop	{r7}
 8002300:	4770      	bx	lr

08002302 <LL_RCC_MSI_Enable>:
{
 8002302:	b480      	push	{r7}
 8002304:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8002306:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002310:	f043 0301 	orr.w	r3, r3, #1
 8002314:	6013      	str	r3, [r2, #0]
}
 8002316:	bf00      	nop
 8002318:	46bd      	mov	sp, r7
 800231a:	bc80      	pop	{r7}
 800231c:	4770      	bx	lr

0800231e <LL_RCC_MSI_Disable>:
{
 800231e:	b480      	push	{r7}
 8002320:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8002322:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800232c:	f023 0301 	bic.w	r3, r3, #1
 8002330:	6013      	str	r3, [r2, #0]
}
 8002332:	bf00      	nop
 8002334:	46bd      	mov	sp, r7
 8002336:	bc80      	pop	{r7}
 8002338:	4770      	bx	lr

0800233a <LL_RCC_MSI_IsReady>:
{
 800233a:	b480      	push	{r7}
 800233c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 800233e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	2b02      	cmp	r3, #2
 800234a:	d101      	bne.n	8002350 <LL_RCC_MSI_IsReady+0x16>
 800234c:	2301      	movs	r3, #1
 800234e:	e000      	b.n	8002352 <LL_RCC_MSI_IsReady+0x18>
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	46bd      	mov	sp, r7
 8002356:	bc80      	pop	{r7}
 8002358:	4770      	bx	lr

0800235a <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 800235a:	b480      	push	{r7}
 800235c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 800235e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0308 	and.w	r3, r3, #8
 8002368:	2b08      	cmp	r3, #8
 800236a:	d101      	bne.n	8002370 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 800236c:	2301      	movs	r3, #1
 800236e:	e000      	b.n	8002372 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	46bd      	mov	sp, r7
 8002376:	bc80      	pop	{r7}
 8002378:	4770      	bx	lr

0800237a <LL_RCC_MSI_GetRange>:
{
 800237a:	b480      	push	{r7}
 800237c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800237e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002388:	4618      	mov	r0, r3
 800238a:	46bd      	mov	sp, r7
 800238c:	bc80      	pop	{r7}
 800238e:	4770      	bx	lr

08002390 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002394:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002398:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800239c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bc80      	pop	{r7}
 80023a6:	4770      	bx	lr

080023a8 <LL_RCC_MSI_SetCalibTrimming>:
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80023b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	021b      	lsls	r3, r3, #8
 80023be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023c2:	4313      	orrs	r3, r2
 80023c4:	604b      	str	r3, [r1, #4]
}
 80023c6:	bf00      	nop
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bc80      	pop	{r7}
 80023ce:	4770      	bx	lr

080023d0 <LL_RCC_SetSysClkSource>:
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80023d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f023 0203 	bic.w	r2, r3, #3
 80023e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	608b      	str	r3, [r1, #8]
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bc80      	pop	{r7}
 80023f4:	4770      	bx	lr

080023f6 <LL_RCC_GetSysClkSource>:
{
 80023f6:	b480      	push	{r7}
 80023f8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80023fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f003 030c 	and.w	r3, r3, #12
}
 8002404:	4618      	mov	r0, r3
 8002406:	46bd      	mov	sp, r7
 8002408:	bc80      	pop	{r7}
 800240a:	4770      	bx	lr

0800240c <LL_RCC_SetAHBPrescaler>:
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002414:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800241e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4313      	orrs	r3, r2
 8002426:	608b      	str	r3, [r1, #8]
}
 8002428:	bf00      	nop
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	bc80      	pop	{r7}
 8002430:	4770      	bx	lr

08002432 <LL_RCC_SetAHB3Prescaler>:
{
 8002432:	b480      	push	{r7}
 8002434:	b083      	sub	sp, #12
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800243a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800243e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002442:	f023 020f 	bic.w	r2, r3, #15
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	091b      	lsrs	r3, r3, #4
 800244a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800244e:	4313      	orrs	r3, r2
 8002450:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	bc80      	pop	{r7}
 800245c:	4770      	bx	lr

0800245e <LL_RCC_SetAPB1Prescaler>:
{
 800245e:	b480      	push	{r7}
 8002460:	b083      	sub	sp, #12
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002466:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002470:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	4313      	orrs	r3, r2
 8002478:	608b      	str	r3, [r1, #8]
}
 800247a:	bf00      	nop
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	bc80      	pop	{r7}
 8002482:	4770      	bx	lr

08002484 <LL_RCC_SetAPB2Prescaler>:
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800248c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002496:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4313      	orrs	r3, r2
 800249e:	608b      	str	r3, [r1, #8]
}
 80024a0:	bf00      	nop
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bc80      	pop	{r7}
 80024a8:	4770      	bx	lr

080024aa <LL_RCC_GetAHBPrescaler>:
{
 80024aa:	b480      	push	{r7}
 80024ac:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80024ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bc80      	pop	{r7}
 80024be:	4770      	bx	lr

080024c0 <LL_RCC_GetAHB3Prescaler>:
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80024c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024c8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80024cc:	011b      	lsls	r3, r3, #4
 80024ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bc80      	pop	{r7}
 80024d8:	4770      	bx	lr

080024da <LL_RCC_GetAPB1Prescaler>:
{
 80024da:	b480      	push	{r7}
 80024dc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80024de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bc80      	pop	{r7}
 80024ee:	4770      	bx	lr

080024f0 <LL_RCC_GetAPB2Prescaler>:
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80024f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80024fe:	4618      	mov	r0, r3
 8002500:	46bd      	mov	sp, r7
 8002502:	bc80      	pop	{r7}
 8002504:	4770      	bx	lr

08002506 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8002506:	b480      	push	{r7}
 8002508:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800250a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002514:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002518:	6013      	str	r3, [r2, #0]
}
 800251a:	bf00      	nop
 800251c:	46bd      	mov	sp, r7
 800251e:	bc80      	pop	{r7}
 8002520:	4770      	bx	lr

08002522 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002522:	b480      	push	{r7}
 8002524:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002526:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002530:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002534:	6013      	str	r3, [r2, #0]
}
 8002536:	bf00      	nop
 8002538:	46bd      	mov	sp, r7
 800253a:	bc80      	pop	{r7}
 800253c:	4770      	bx	lr

0800253e <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800253e:	b480      	push	{r7}
 8002540:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002542:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800254c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002550:	d101      	bne.n	8002556 <LL_RCC_PLL_IsReady+0x18>
 8002552:	2301      	movs	r3, #1
 8002554:	e000      	b.n	8002558 <LL_RCC_PLL_IsReady+0x1a>
 8002556:	2300      	movs	r3, #0
}
 8002558:	4618      	mov	r0, r3
 800255a:	46bd      	mov	sp, r7
 800255c:	bc80      	pop	{r7}
 800255e:	4770      	bx	lr

08002560 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002564:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	0a1b      	lsrs	r3, r3, #8
 800256c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002570:	4618      	mov	r0, r3
 8002572:	46bd      	mov	sp, r7
 8002574:	bc80      	pop	{r7}
 8002576:	4770      	bx	lr

08002578 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800257c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002586:	4618      	mov	r0, r3
 8002588:	46bd      	mov	sp, r7
 800258a:	bc80      	pop	{r7}
 800258c:	4770      	bx	lr

0800258e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800258e:	b480      	push	{r7}
 8002590:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002592:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800259c:	4618      	mov	r0, r3
 800259e:	46bd      	mov	sp, r7
 80025a0:	bc80      	pop	{r7}
 80025a2:	4770      	bx	lr

080025a4 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80025a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	f003 0303 	and.w	r3, r3, #3
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bc80      	pop	{r7}
 80025b8:	4770      	bx	lr

080025ba <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80025ba:	b480      	push	{r7}
 80025bc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80025be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025cc:	d101      	bne.n	80025d2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80025ce:	2301      	movs	r3, #1
 80025d0:	e000      	b.n	80025d4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bc80      	pop	{r7}
 80025da:	4770      	bx	lr

080025dc <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80025e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025e4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80025e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025f0:	d101      	bne.n	80025f6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80025f2:	2301      	movs	r3, #1
 80025f4:	e000      	b.n	80025f8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80025f6:	2300      	movs	r3, #0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bc80      	pop	{r7}
 80025fe:	4770      	bx	lr

08002600 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002604:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800260e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002612:	d101      	bne.n	8002618 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002614:	2301      	movs	r3, #1
 8002616:	e000      	b.n	800261a <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	46bd      	mov	sp, r7
 800261e:	bc80      	pop	{r7}
 8002620:	4770      	bx	lr

08002622 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002622:	b480      	push	{r7}
 8002624:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002626:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002630:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002634:	d101      	bne.n	800263a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002636:	2301      	movs	r3, #1
 8002638:	e000      	b.n	800263c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	46bd      	mov	sp, r7
 8002640:	bc80      	pop	{r7}
 8002642:	4770      	bx	lr

08002644 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b088      	sub	sp, #32
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e36f      	b.n	8002d36 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002656:	f7ff fece 	bl	80023f6 <LL_RCC_GetSysClkSource>
 800265a:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800265c:	f7ff ffa2 	bl	80025a4 <LL_RCC_PLL_GetMainSource>
 8002660:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0320 	and.w	r3, r3, #32
 800266a:	2b00      	cmp	r3, #0
 800266c:	f000 80c4 	beq.w	80027f8 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d005      	beq.n	8002682 <HAL_RCC_OscConfig+0x3e>
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	2b0c      	cmp	r3, #12
 800267a:	d176      	bne.n	800276a <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d173      	bne.n	800276a <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a1b      	ldr	r3, [r3, #32]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e353      	b.n	8002d36 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002692:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0308 	and.w	r3, r3, #8
 800269c:	2b00      	cmp	r3, #0
 800269e:	d005      	beq.n	80026ac <HAL_RCC_OscConfig+0x68>
 80026a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026aa:	e006      	b.n	80026ba <HAL_RCC_OscConfig+0x76>
 80026ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80026b4:	091b      	lsrs	r3, r3, #4
 80026b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d222      	bcs.n	8002704 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026c2:	4618      	mov	r0, r3
 80026c4:	f000 fd7a 	bl	80031bc <RCC_SetFlashLatencyFromMSIRange>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e331      	b.n	8002d36 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026dc:	f043 0308 	orr.w	r3, r3, #8
 80026e0:	6013      	str	r3, [r2, #0]
 80026e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80026f4:	4313      	orrs	r3, r2
 80026f6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff fe53 	bl	80023a8 <LL_RCC_MSI_SetCalibTrimming>
 8002702:	e021      	b.n	8002748 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002704:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800270e:	f043 0308 	orr.w	r3, r3, #8
 8002712:	6013      	str	r3, [r2, #0]
 8002714:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002722:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002726:	4313      	orrs	r3, r2
 8002728:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272e:	4618      	mov	r0, r3
 8002730:	f7ff fe3a 	bl	80023a8 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002738:	4618      	mov	r0, r3
 800273a:	f000 fd3f 	bl	80031bc <RCC_SetFlashLatencyFromMSIRange>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d001      	beq.n	8002748 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e2f6      	b.n	8002d36 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002748:	f000 fcc2 	bl	80030d0 <HAL_RCC_GetHCLKFreq>
 800274c:	4603      	mov	r3, r0
 800274e:	4aa7      	ldr	r2, [pc, #668]	; (80029ec <HAL_RCC_OscConfig+0x3a8>)
 8002750:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8002752:	4ba7      	ldr	r3, [pc, #668]	; (80029f0 <HAL_RCC_OscConfig+0x3ac>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4618      	mov	r0, r3
 8002758:	f7fe fcc4 	bl	80010e4 <HAL_InitTick>
 800275c:	4603      	mov	r3, r0
 800275e:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002760:	7cfb      	ldrb	r3, [r7, #19]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d047      	beq.n	80027f6 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8002766:	7cfb      	ldrb	r3, [r7, #19]
 8002768:	e2e5      	b.n	8002d36 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a1b      	ldr	r3, [r3, #32]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d02c      	beq.n	80027cc <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002772:	f7ff fdc6 	bl	8002302 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002776:	f7fe fe67 	bl	8001448 <HAL_GetTick>
 800277a:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800277c:	e008      	b.n	8002790 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800277e:	f7fe fe63 	bl	8001448 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e2d2      	b.n	8002d36 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002790:	f7ff fdd3 	bl	800233a <LL_RCC_MSI_IsReady>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d0f1      	beq.n	800277e <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800279a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027a4:	f043 0308 	orr.w	r3, r3, #8
 80027a8:	6013      	str	r3, [r2, #0]
 80027aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027bc:	4313      	orrs	r3, r2
 80027be:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7ff fdef 	bl	80023a8 <LL_RCC_MSI_SetCalibTrimming>
 80027ca:	e015      	b.n	80027f8 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80027cc:	f7ff fda7 	bl	800231e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027d0:	f7fe fe3a 	bl	8001448 <HAL_GetTick>
 80027d4:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027d8:	f7fe fe36 	bl	8001448 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e2a5      	b.n	8002d36 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 80027ea:	f7ff fda6 	bl	800233a <LL_RCC_MSI_IsReady>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d1f1      	bne.n	80027d8 <HAL_RCC_OscConfig+0x194>
 80027f4:	e000      	b.n	80027f8 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80027f6:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0301 	and.w	r3, r3, #1
 8002800:	2b00      	cmp	r3, #0
 8002802:	d058      	beq.n	80028b6 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	2b08      	cmp	r3, #8
 8002808:	d005      	beq.n	8002816 <HAL_RCC_OscConfig+0x1d2>
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	2b0c      	cmp	r3, #12
 800280e:	d108      	bne.n	8002822 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	2b03      	cmp	r3, #3
 8002814:	d105      	bne.n	8002822 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d14b      	bne.n	80028b6 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e289      	b.n	8002d36 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002822:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002834:	4313      	orrs	r3, r2
 8002836:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002840:	d102      	bne.n	8002848 <HAL_RCC_OscConfig+0x204>
 8002842:	f7ff fcae 	bl	80021a2 <LL_RCC_HSE_Enable>
 8002846:	e00d      	b.n	8002864 <HAL_RCC_OscConfig+0x220>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002850:	d104      	bne.n	800285c <HAL_RCC_OscConfig+0x218>
 8002852:	f7ff fc79 	bl	8002148 <LL_RCC_HSE_EnableTcxo>
 8002856:	f7ff fca4 	bl	80021a2 <LL_RCC_HSE_Enable>
 800285a:	e003      	b.n	8002864 <HAL_RCC_OscConfig+0x220>
 800285c:	f7ff fcaf 	bl	80021be <LL_RCC_HSE_Disable>
 8002860:	f7ff fc80 	bl	8002164 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d012      	beq.n	8002892 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800286c:	f7fe fdec 	bl	8001448 <HAL_GetTick>
 8002870:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002874:	f7fe fde8 	bl	8001448 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b64      	cmp	r3, #100	; 0x64
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e257      	b.n	8002d36 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002886:	f7ff fca8 	bl	80021da <LL_RCC_HSE_IsReady>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d0f1      	beq.n	8002874 <HAL_RCC_OscConfig+0x230>
 8002890:	e011      	b.n	80028b6 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002892:	f7fe fdd9 	bl	8001448 <HAL_GetTick>
 8002896:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002898:	e008      	b.n	80028ac <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800289a:	f7fe fdd5 	bl	8001448 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	2b64      	cmp	r3, #100	; 0x64
 80028a6:	d901      	bls.n	80028ac <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e244      	b.n	8002d36 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 80028ac:	f7ff fc95 	bl	80021da <LL_RCC_HSE_IsReady>
 80028b0:	4603      	mov	r3, r0
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1f1      	bne.n	800289a <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d046      	beq.n	8002950 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80028c2:	69fb      	ldr	r3, [r7, #28]
 80028c4:	2b04      	cmp	r3, #4
 80028c6:	d005      	beq.n	80028d4 <HAL_RCC_OscConfig+0x290>
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	2b0c      	cmp	r3, #12
 80028cc:	d10e      	bne.n	80028ec <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d10b      	bne.n	80028ec <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d101      	bne.n	80028e0 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e22a      	b.n	8002d36 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	695b      	ldr	r3, [r3, #20]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7ff fcb6 	bl	8002256 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80028ea:	e031      	b.n	8002950 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	691b      	ldr	r3, [r3, #16]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d019      	beq.n	8002928 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028f4:	f7ff fc82 	bl	80021fc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f8:	f7fe fda6 	bl	8001448 <HAL_GetTick>
 80028fc:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002900:	f7fe fda2 	bl	8001448 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e211      	b.n	8002d36 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002912:	f7ff fc8f 	bl	8002234 <LL_RCC_HSI_IsReady>
 8002916:	4603      	mov	r3, r0
 8002918:	2b00      	cmp	r3, #0
 800291a:	d0f1      	beq.n	8002900 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	695b      	ldr	r3, [r3, #20]
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff fc98 	bl	8002256 <LL_RCC_HSI_SetCalibTrimming>
 8002926:	e013      	b.n	8002950 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002928:	f7ff fc76 	bl	8002218 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292c:	f7fe fd8c 	bl	8001448 <HAL_GetTick>
 8002930:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002934:	f7fe fd88 	bl	8001448 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e1f7      	b.n	8002d36 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002946:	f7ff fc75 	bl	8002234 <LL_RCC_HSI_IsReady>
 800294a:	4603      	mov	r3, r0
 800294c:	2b00      	cmp	r3, #0
 800294e:	d1f1      	bne.n	8002934 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0308 	and.w	r3, r3, #8
 8002958:	2b00      	cmp	r3, #0
 800295a:	d06e      	beq.n	8002a3a <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d056      	beq.n	8002a12 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8002964:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002968:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800296c:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	69da      	ldr	r2, [r3, #28]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f003 0310 	and.w	r3, r3, #16
 8002978:	429a      	cmp	r2, r3
 800297a:	d031      	beq.n	80029e0 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d006      	beq.n	8002994 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800298c:	2b00      	cmp	r3, #0
 800298e:	d101      	bne.n	8002994 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e1d0      	b.n	8002d36 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	2b00      	cmp	r3, #0
 800299c:	d013      	beq.n	80029c6 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 800299e:	f7ff fc8f 	bl	80022c0 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80029a2:	f7fe fd51 	bl	8001448 <HAL_GetTick>
 80029a6:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80029a8:	e008      	b.n	80029bc <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029aa:	f7fe fd4d 	bl	8001448 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b11      	cmp	r3, #17
 80029b6:	d901      	bls.n	80029bc <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e1bc      	b.n	8002d36 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 80029bc:	f7ff fc90 	bl	80022e0 <LL_RCC_LSI_IsReady>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d1f1      	bne.n	80029aa <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80029c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029ce:	f023 0210 	bic.w	r2, r3, #16
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	69db      	ldr	r3, [r3, #28]
 80029d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029da:	4313      	orrs	r3, r2
 80029dc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029e0:	f7ff fc5e 	bl	80022a0 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029e4:	f7fe fd30 	bl	8001448 <HAL_GetTick>
 80029e8:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80029ea:	e00c      	b.n	8002a06 <HAL_RCC_OscConfig+0x3c2>
 80029ec:	20000000 	.word	0x20000000
 80029f0:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029f4:	f7fe fd28 	bl	8001448 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b11      	cmp	r3, #17
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e197      	b.n	8002d36 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8002a06:	f7ff fc6b 	bl	80022e0 <LL_RCC_LSI_IsReady>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d0f1      	beq.n	80029f4 <HAL_RCC_OscConfig+0x3b0>
 8002a10:	e013      	b.n	8002a3a <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a12:	f7ff fc55 	bl	80022c0 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a16:	f7fe fd17 	bl	8001448 <HAL_GetTick>
 8002a1a:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8002a1c:	e008      	b.n	8002a30 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a1e:	f7fe fd13 	bl	8001448 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	2b11      	cmp	r3, #17
 8002a2a:	d901      	bls.n	8002a30 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e182      	b.n	8002d36 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8002a30:	f7ff fc56 	bl	80022e0 <LL_RCC_LSI_IsReady>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1f1      	bne.n	8002a1e <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0304 	and.w	r3, r3, #4
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f000 80d8 	beq.w	8002bf8 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002a48:	f7ff fb6c 	bl	8002124 <LL_PWR_IsEnabledBkUpAccess>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d113      	bne.n	8002a7a <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002a52:	f7ff fb4d 	bl	80020f0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a56:	f7fe fcf7 	bl	8001448 <HAL_GetTick>
 8002a5a:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002a5c:	e008      	b.n	8002a70 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a5e:	f7fe fcf3 	bl	8001448 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d901      	bls.n	8002a70 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e162      	b.n	8002d36 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002a70:	f7ff fb58 	bl	8002124 <LL_PWR_IsEnabledBkUpAccess>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d0f1      	beq.n	8002a5e <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d07b      	beq.n	8002b7a <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	68db      	ldr	r3, [r3, #12]
 8002a86:	2b85      	cmp	r3, #133	; 0x85
 8002a88:	d003      	beq.n	8002a92 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	2b05      	cmp	r3, #5
 8002a90:	d109      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002a92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a9a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a9e:	f043 0304 	orr.w	r3, r3, #4
 8002aa2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aa6:	f7fe fccf 	bl	8001448 <HAL_GetTick>
 8002aaa:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002aac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ab8:	f043 0301 	orr.w	r3, r3, #1
 8002abc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002ac0:	e00a      	b.n	8002ad8 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ac2:	f7fe fcc1 	bl	8001448 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e12e      	b.n	8002d36 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002ad8:	f7ff fbd1 	bl	800227e <LL_RCC_LSE_IsReady>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d0ef      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	2b81      	cmp	r3, #129	; 0x81
 8002ae8:	d003      	beq.n	8002af2 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	2b85      	cmp	r3, #133	; 0x85
 8002af0:	d121      	bne.n	8002b36 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002af2:	f7fe fca9 	bl	8001448 <HAL_GetTick>
 8002af6:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002af8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002b0c:	e00a      	b.n	8002b24 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b0e:	f7fe fc9b 	bl	8001448 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d901      	bls.n	8002b24 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e108      	b.n	8002d36 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002b24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d0ec      	beq.n	8002b0e <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002b34:	e060      	b.n	8002bf8 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b36:	f7fe fc87 	bl	8001448 <HAL_GetTick>
 8002b3a:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002b3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b44:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002b50:	e00a      	b.n	8002b68 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b52:	f7fe fc79 	bl	8001448 <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d901      	bls.n	8002b68 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e0e6      	b.n	8002d36 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002b68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d1ec      	bne.n	8002b52 <HAL_RCC_OscConfig+0x50e>
 8002b78:	e03e      	b.n	8002bf8 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b7a:	f7fe fc65 	bl	8001448 <HAL_GetTick>
 8002b7e:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002b80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b88:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002b94:	e00a      	b.n	8002bac <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b96:	f7fe fc57 	bl	8001448 <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d901      	bls.n	8002bac <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e0c4      	b.n	8002d36 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002bac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d1ec      	bne.n	8002b96 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bbc:	f7fe fc44 	bl	8001448 <HAL_GetTick>
 8002bc0:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002bc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bce:	f023 0301 	bic.w	r3, r3, #1
 8002bd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8002bd6:	e00a      	b.n	8002bee <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bd8:	f7fe fc36 	bl	8001448 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e0a3      	b.n	8002d36 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002bee:	f7ff fb46 	bl	800227e <LL_RCC_LSE_IsReady>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d1ef      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f000 8099 	beq.w	8002d34 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	2b0c      	cmp	r3, #12
 8002c06:	d06c      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d14b      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c10:	f7ff fc87 	bl	8002522 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c14:	f7fe fc18 	bl	8001448 <HAL_GetTick>
 8002c18:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c1c:	f7fe fc14 	bl	8001448 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b0a      	cmp	r3, #10
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e083      	b.n	8002d36 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002c2e:	f7ff fc86 	bl	800253e <LL_RCC_PLL_IsReady>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d1f1      	bne.n	8002c1c <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c3c:	68da      	ldr	r2, [r3, #12]
 8002c3e:	4b40      	ldr	r3, [pc, #256]	; (8002d40 <HAL_RCC_OscConfig+0x6fc>)
 8002c40:	4013      	ands	r3, r2
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c4a:	4311      	orrs	r1, r2
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c50:	0212      	lsls	r2, r2, #8
 8002c52:	4311      	orrs	r1, r2
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002c58:	4311      	orrs	r1, r2
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c5e:	4311      	orrs	r1, r2
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002c64:	430a      	orrs	r2, r1
 8002c66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c6e:	f7ff fc4a 	bl	8002506 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c80:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c82:	f7fe fbe1 	bl	8001448 <HAL_GetTick>
 8002c86:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8002c88:	e008      	b.n	8002c9c <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c8a:	f7fe fbdd 	bl	8001448 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b0a      	cmp	r3, #10
 8002c96:	d901      	bls.n	8002c9c <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e04c      	b.n	8002d36 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8002c9c:	f7ff fc4f 	bl	800253e <LL_RCC_PLL_IsReady>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d0f1      	beq.n	8002c8a <HAL_RCC_OscConfig+0x646>
 8002ca6:	e045      	b.n	8002d34 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ca8:	f7ff fc3b 	bl	8002522 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cac:	f7fe fbcc 	bl	8001448 <HAL_GetTick>
 8002cb0:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002cb2:	e008      	b.n	8002cc6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cb4:	f7fe fbc8 	bl	8001448 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b0a      	cmp	r3, #10
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e037      	b.n	8002d36 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002cc6:	f7ff fc3a 	bl	800253e <LL_RCC_PLL_IsReady>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d1f1      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002cd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cd4:	68da      	ldr	r2, [r3, #12]
 8002cd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002cda:	4b1a      	ldr	r3, [pc, #104]	; (8002d44 <HAL_RCC_OscConfig+0x700>)
 8002cdc:	4013      	ands	r3, r2
 8002cde:	60cb      	str	r3, [r1, #12]
 8002ce0:	e028      	b.n	8002d34 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d101      	bne.n	8002cee <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e023      	b.n	8002d36 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	f003 0203 	and.w	r2, r3, #3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d115      	bne.n	8002d30 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d10e      	bne.n	8002d30 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d1c:	021b      	lsls	r3, r3, #8
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d106      	bne.n	8002d30 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d001      	beq.n	8002d34 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e000      	b.n	8002d36 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3720      	adds	r7, #32
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	11c1808c 	.word	0x11c1808c
 8002d44:	eefefffc 	.word	0xeefefffc

08002d48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d101      	bne.n	8002d5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e10f      	b.n	8002f7c <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d5c:	4b89      	ldr	r3, [pc, #548]	; (8002f84 <HAL_RCC_ClockConfig+0x23c>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0307 	and.w	r3, r3, #7
 8002d64:	683a      	ldr	r2, [r7, #0]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d91b      	bls.n	8002da2 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d6a:	4b86      	ldr	r3, [pc, #536]	; (8002f84 <HAL_RCC_ClockConfig+0x23c>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f023 0207 	bic.w	r2, r3, #7
 8002d72:	4984      	ldr	r1, [pc, #528]	; (8002f84 <HAL_RCC_ClockConfig+0x23c>)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d7a:	f7fe fb65 	bl	8001448 <HAL_GetTick>
 8002d7e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d80:	e008      	b.n	8002d94 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002d82:	f7fe fb61 	bl	8001448 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d901      	bls.n	8002d94 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e0f3      	b.n	8002f7c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d94:	4b7b      	ldr	r3, [pc, #492]	; (8002f84 <HAL_RCC_ClockConfig+0x23c>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0307 	and.w	r3, r3, #7
 8002d9c:	683a      	ldr	r2, [r7, #0]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d1ef      	bne.n	8002d82 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d016      	beq.n	8002ddc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7ff fb2a 	bl	800240c <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002db8:	f7fe fb46 	bl	8001448 <HAL_GetTick>
 8002dbc:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002dbe:	e008      	b.n	8002dd2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002dc0:	f7fe fb42 	bl	8001448 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d901      	bls.n	8002dd2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e0d4      	b.n	8002f7c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002dd2:	f7ff fbf2 	bl	80025ba <LL_RCC_IsActiveFlag_HPRE>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d0f1      	beq.n	8002dc0 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d016      	beq.n	8002e16 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	695b      	ldr	r3, [r3, #20]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7ff fb20 	bl	8002432 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002df2:	f7fe fb29 	bl	8001448 <HAL_GetTick>
 8002df6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002df8:	e008      	b.n	8002e0c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002dfa:	f7fe fb25 	bl	8001448 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d901      	bls.n	8002e0c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e0b7      	b.n	8002f7c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002e0c:	f7ff fbe6 	bl	80025dc <LL_RCC_IsActiveFlag_SHDHPRE>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d0f1      	beq.n	8002dfa <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0304 	and.w	r3, r3, #4
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d016      	beq.n	8002e50 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7ff fb19 	bl	800245e <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002e2c:	f7fe fb0c 	bl	8001448 <HAL_GetTick>
 8002e30:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002e32:	e008      	b.n	8002e46 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002e34:	f7fe fb08 	bl	8001448 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d901      	bls.n	8002e46 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002e42:	2303      	movs	r3, #3
 8002e44:	e09a      	b.n	8002f7c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002e46:	f7ff fbdb 	bl	8002600 <LL_RCC_IsActiveFlag_PPRE1>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d0f1      	beq.n	8002e34 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0308 	and.w	r3, r3, #8
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d017      	beq.n	8002e8c <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	00db      	lsls	r3, r3, #3
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7ff fb0e 	bl	8002484 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002e68:	f7fe faee 	bl	8001448 <HAL_GetTick>
 8002e6c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002e70:	f7fe faea 	bl	8001448 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e07c      	b.n	8002f7c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002e82:	f7ff fbce 	bl	8002622 <LL_RCC_IsActiveFlag_PPRE2>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d0f1      	beq.n	8002e70 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0301 	and.w	r3, r3, #1
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d043      	beq.n	8002f20 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d106      	bne.n	8002eae <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002ea0:	f7ff f99b 	bl	80021da <LL_RCC_HSE_IsReady>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d11e      	bne.n	8002ee8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e066      	b.n	8002f7c <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	2b03      	cmp	r3, #3
 8002eb4:	d106      	bne.n	8002ec4 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002eb6:	f7ff fb42 	bl	800253e <LL_RCC_PLL_IsReady>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d113      	bne.n	8002ee8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e05b      	b.n	8002f7c <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d106      	bne.n	8002eda <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002ecc:	f7ff fa35 	bl	800233a <LL_RCC_MSI_IsReady>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d108      	bne.n	8002ee8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e050      	b.n	8002f7c <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002eda:	f7ff f9ab 	bl	8002234 <LL_RCC_HSI_IsReady>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d101      	bne.n	8002ee8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e049      	b.n	8002f7c <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7ff fa6f 	bl	80023d0 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ef2:	f7fe faa9 	bl	8001448 <HAL_GetTick>
 8002ef6:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ef8:	e00a      	b.n	8002f10 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002efa:	f7fe faa5 	bl	8001448 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d901      	bls.n	8002f10 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e035      	b.n	8002f7c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f10:	f7ff fa71 	bl	80023f6 <LL_RCC_GetSysClkSource>
 8002f14:	4602      	mov	r2, r0
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d1ec      	bne.n	8002efa <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f20:	4b18      	ldr	r3, [pc, #96]	; (8002f84 <HAL_RCC_ClockConfig+0x23c>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0307 	and.w	r3, r3, #7
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d21b      	bcs.n	8002f66 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f2e:	4b15      	ldr	r3, [pc, #84]	; (8002f84 <HAL_RCC_ClockConfig+0x23c>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f023 0207 	bic.w	r2, r3, #7
 8002f36:	4913      	ldr	r1, [pc, #76]	; (8002f84 <HAL_RCC_ClockConfig+0x23c>)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f3e:	f7fe fa83 	bl	8001448 <HAL_GetTick>
 8002f42:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f44:	e008      	b.n	8002f58 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002f46:	f7fe fa7f 	bl	8001448 <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d901      	bls.n	8002f58 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e011      	b.n	8002f7c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f58:	4b0a      	ldr	r3, [pc, #40]	; (8002f84 <HAL_RCC_ClockConfig+0x23c>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0307 	and.w	r3, r3, #7
 8002f60:	683a      	ldr	r2, [r7, #0]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d1ef      	bne.n	8002f46 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002f66:	f000 f8b3 	bl	80030d0 <HAL_RCC_GetHCLKFreq>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	4a06      	ldr	r2, [pc, #24]	; (8002f88 <HAL_RCC_ClockConfig+0x240>)
 8002f6e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8002f70:	4b06      	ldr	r3, [pc, #24]	; (8002f8c <HAL_RCC_ClockConfig+0x244>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7fe f8b5 	bl	80010e4 <HAL_InitTick>
 8002f7a:	4603      	mov	r3, r0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3710      	adds	r7, #16
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	58004000 	.word	0x58004000
 8002f88:	20000000 	.word	0x20000000
 8002f8c:	20000004 	.word	0x20000004

08002f90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f90:	b590      	push	{r4, r7, lr}
 8002f92:	b087      	sub	sp, #28
 8002f94:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8002f96:	2300      	movs	r3, #0
 8002f98:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f9e:	f7ff fa2a 	bl	80023f6 <LL_RCC_GetSysClkSource>
 8002fa2:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fa4:	f7ff fafe 	bl	80025a4 <LL_RCC_PLL_GetMainSource>
 8002fa8:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d005      	beq.n	8002fbc <HAL_RCC_GetSysClockFreq+0x2c>
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	2b0c      	cmp	r3, #12
 8002fb4:	d139      	bne.n	800302a <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d136      	bne.n	800302a <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002fbc:	f7ff f9cd 	bl	800235a <LL_RCC_MSI_IsEnabledRangeSelect>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d115      	bne.n	8002ff2 <HAL_RCC_GetSysClockFreq+0x62>
 8002fc6:	f7ff f9c8 	bl	800235a <LL_RCC_MSI_IsEnabledRangeSelect>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d106      	bne.n	8002fde <HAL_RCC_GetSysClockFreq+0x4e>
 8002fd0:	f7ff f9d3 	bl	800237a <LL_RCC_MSI_GetRange>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	0a1b      	lsrs	r3, r3, #8
 8002fd8:	f003 030f 	and.w	r3, r3, #15
 8002fdc:	e005      	b.n	8002fea <HAL_RCC_GetSysClockFreq+0x5a>
 8002fde:	f7ff f9d7 	bl	8002390 <LL_RCC_MSI_GetRangeAfterStandby>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	0a1b      	lsrs	r3, r3, #8
 8002fe6:	f003 030f 	and.w	r3, r3, #15
 8002fea:	4a36      	ldr	r2, [pc, #216]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x134>)
 8002fec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ff0:	e014      	b.n	800301c <HAL_RCC_GetSysClockFreq+0x8c>
 8002ff2:	f7ff f9b2 	bl	800235a <LL_RCC_MSI_IsEnabledRangeSelect>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d106      	bne.n	800300a <HAL_RCC_GetSysClockFreq+0x7a>
 8002ffc:	f7ff f9bd 	bl	800237a <LL_RCC_MSI_GetRange>
 8003000:	4603      	mov	r3, r0
 8003002:	091b      	lsrs	r3, r3, #4
 8003004:	f003 030f 	and.w	r3, r3, #15
 8003008:	e005      	b.n	8003016 <HAL_RCC_GetSysClockFreq+0x86>
 800300a:	f7ff f9c1 	bl	8002390 <LL_RCC_MSI_GetRangeAfterStandby>
 800300e:	4603      	mov	r3, r0
 8003010:	091b      	lsrs	r3, r3, #4
 8003012:	f003 030f 	and.w	r3, r3, #15
 8003016:	4a2b      	ldr	r2, [pc, #172]	; (80030c4 <HAL_RCC_GetSysClockFreq+0x134>)
 8003018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800301c:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d115      	bne.n	8003050 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003028:	e012      	b.n	8003050 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	2b04      	cmp	r3, #4
 800302e:	d102      	bne.n	8003036 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003030:	4b25      	ldr	r3, [pc, #148]	; (80030c8 <HAL_RCC_GetSysClockFreq+0x138>)
 8003032:	617b      	str	r3, [r7, #20]
 8003034:	e00c      	b.n	8003050 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	2b08      	cmp	r3, #8
 800303a:	d109      	bne.n	8003050 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800303c:	f7ff f8a0 	bl	8002180 <LL_RCC_HSE_IsEnabledDiv2>
 8003040:	4603      	mov	r3, r0
 8003042:	2b01      	cmp	r3, #1
 8003044:	d102      	bne.n	800304c <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8003046:	4b20      	ldr	r3, [pc, #128]	; (80030c8 <HAL_RCC_GetSysClockFreq+0x138>)
 8003048:	617b      	str	r3, [r7, #20]
 800304a:	e001      	b.n	8003050 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800304c:	4b1f      	ldr	r3, [pc, #124]	; (80030cc <HAL_RCC_GetSysClockFreq+0x13c>)
 800304e:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003050:	f7ff f9d1 	bl	80023f6 <LL_RCC_GetSysClkSource>
 8003054:	4603      	mov	r3, r0
 8003056:	2b0c      	cmp	r3, #12
 8003058:	d12f      	bne.n	80030ba <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800305a:	f7ff faa3 	bl	80025a4 <LL_RCC_PLL_GetMainSource>
 800305e:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2b02      	cmp	r3, #2
 8003064:	d003      	beq.n	800306e <HAL_RCC_GetSysClockFreq+0xde>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2b03      	cmp	r3, #3
 800306a:	d003      	beq.n	8003074 <HAL_RCC_GetSysClockFreq+0xe4>
 800306c:	e00d      	b.n	800308a <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800306e:	4b16      	ldr	r3, [pc, #88]	; (80030c8 <HAL_RCC_GetSysClockFreq+0x138>)
 8003070:	60fb      	str	r3, [r7, #12]
        break;
 8003072:	e00d      	b.n	8003090 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003074:	f7ff f884 	bl	8002180 <LL_RCC_HSE_IsEnabledDiv2>
 8003078:	4603      	mov	r3, r0
 800307a:	2b01      	cmp	r3, #1
 800307c:	d102      	bne.n	8003084 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800307e:	4b12      	ldr	r3, [pc, #72]	; (80030c8 <HAL_RCC_GetSysClockFreq+0x138>)
 8003080:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8003082:	e005      	b.n	8003090 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8003084:	4b11      	ldr	r3, [pc, #68]	; (80030cc <HAL_RCC_GetSysClockFreq+0x13c>)
 8003086:	60fb      	str	r3, [r7, #12]
        break;
 8003088:	e002      	b.n	8003090 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	60fb      	str	r3, [r7, #12]
        break;
 800308e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003090:	f7ff fa66 	bl	8002560 <LL_RCC_PLL_GetN>
 8003094:	4602      	mov	r2, r0
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	fb03 f402 	mul.w	r4, r3, r2
 800309c:	f7ff fa77 	bl	800258e <LL_RCC_PLL_GetDivider>
 80030a0:	4603      	mov	r3, r0
 80030a2:	091b      	lsrs	r3, r3, #4
 80030a4:	3301      	adds	r3, #1
 80030a6:	fbb4 f4f3 	udiv	r4, r4, r3
 80030aa:	f7ff fa65 	bl	8002578 <LL_RCC_PLL_GetR>
 80030ae:	4603      	mov	r3, r0
 80030b0:	0f5b      	lsrs	r3, r3, #29
 80030b2:	3301      	adds	r3, #1
 80030b4:	fbb4 f3f3 	udiv	r3, r4, r3
 80030b8:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80030ba:	697b      	ldr	r3, [r7, #20]
}
 80030bc:	4618      	mov	r0, r3
 80030be:	371c      	adds	r7, #28
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd90      	pop	{r4, r7, pc}
 80030c4:	0800a9c8 	.word	0x0800a9c8
 80030c8:	00f42400 	.word	0x00f42400
 80030cc:	01e84800 	.word	0x01e84800

080030d0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030d0:	b598      	push	{r3, r4, r7, lr}
 80030d2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80030d4:	f7ff ff5c 	bl	8002f90 <HAL_RCC_GetSysClockFreq>
 80030d8:	4604      	mov	r4, r0
 80030da:	f7ff f9e6 	bl	80024aa <LL_RCC_GetAHBPrescaler>
 80030de:	4603      	mov	r3, r0
 80030e0:	091b      	lsrs	r3, r3, #4
 80030e2:	f003 030f 	and.w	r3, r3, #15
 80030e6:	4a03      	ldr	r2, [pc, #12]	; (80030f4 <HAL_RCC_GetHCLKFreq+0x24>)
 80030e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ec:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	bd98      	pop	{r3, r4, r7, pc}
 80030f4:	0800a968 	.word	0x0800a968

080030f8 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030f8:	b598      	push	{r3, r4, r7, lr}
 80030fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80030fc:	f7ff ffe8 	bl	80030d0 <HAL_RCC_GetHCLKFreq>
 8003100:	4604      	mov	r4, r0
 8003102:	f7ff f9ea 	bl	80024da <LL_RCC_GetAPB1Prescaler>
 8003106:	4603      	mov	r3, r0
 8003108:	0a1b      	lsrs	r3, r3, #8
 800310a:	4a03      	ldr	r2, [pc, #12]	; (8003118 <HAL_RCC_GetPCLK1Freq+0x20>)
 800310c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003110:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003114:	4618      	mov	r0, r3
 8003116:	bd98      	pop	{r3, r4, r7, pc}
 8003118:	0800a9a8 	.word	0x0800a9a8

0800311c <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800311c:	b598      	push	{r3, r4, r7, lr}
 800311e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003120:	f7ff ffd6 	bl	80030d0 <HAL_RCC_GetHCLKFreq>
 8003124:	4604      	mov	r4, r0
 8003126:	f7ff f9e3 	bl	80024f0 <LL_RCC_GetAPB2Prescaler>
 800312a:	4603      	mov	r3, r0
 800312c:	0adb      	lsrs	r3, r3, #11
 800312e:	4a03      	ldr	r2, [pc, #12]	; (800313c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003134:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003138:	4618      	mov	r0, r3
 800313a:	bd98      	pop	{r3, r4, r7, pc}
 800313c:	0800a9a8 	.word	0x0800a9a8

08003140 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer to the Flash Latency variable.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003140:	b480      	push	{r7}
 8003142:	b085      	sub	sp, #20
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  uint32_t regvalue;

  /* Check the parameters */
  if ((RCC_ClkInitStruct != NULL) && (pFLatency != NULL))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d02d      	beq.n	80031ac <HAL_RCC_GetClockConfig+0x6c>
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d02a      	beq.n	80031ac <HAL_RCC_GetClockConfig+0x6c>
  {
    /* Set all possible values for the Clock type parameter --------------------*/
    RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 \
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	224f      	movs	r2, #79	; 0x4f
 800315a:	601a      	str	r2, [r3, #0]
#if defined(DUAL_CORE)
    RCC_ClkInitStruct->ClockType |= RCC_CLOCKTYPE_HCLK2;
#endif  /* DUAL_CORE */

    /* Get Clock Configuration Register */
    regvalue = RCC->CFGR;
 800315c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	60fb      	str	r3, [r7, #12]

    /* Get the SYSCLK configuration --------------------------------------------*/
    RCC_ClkInitStruct->SYSCLKSource = (regvalue & RCC_CFGR_SWS);
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f003 020c 	and.w	r2, r3, #12
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	605a      	str	r2, [r3, #4]

    /* Get the HCLK configuration ----------------------------------------------*/
    RCC_ClkInitStruct->AHBCLKDivider = (regvalue & RCC_CFGR_HPRE);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	609a      	str	r2, [r3, #8]

    /* Get the APB1 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB1CLKDivider = (regvalue & RCC_CFGR_PPRE1);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	60da      	str	r2, [r3, #12]

    /* Get the APB2 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB2CLKDivider = (regvalue & RCC_CFGR_PPRE2);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	611a      	str	r2, [r3, #16]

    /* Get Extended Clock Recovery Register */
    regvalue = RCC->EXTCFGR;
 800318c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003190:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003194:	60fb      	str	r3, [r7, #12]
    /* Get the AHBCLK2Divider configuration ------------------------------------*/
    RCC_ClkInitStruct->AHBCLK2Divider =  (regvalue & RCC_EXTCFGR_C2HPRE);
#endif  /* DUAL_CORE */

    /* Get the AHBCLK3Divider configuration ------------------------------------*/
    RCC_ClkInitStruct->AHBCLK3Divider = ((regvalue & RCC_EXTCFGR_SHDHPRE) << 4);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	011b      	lsls	r3, r3, #4
 800319a:	b2da      	uxtb	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	615a      	str	r2, [r3, #20]

    /* Get the Flash Wait State (Latency) configuration ------------------------*/
    *pFLatency = __HAL_FLASH_GET_LATENCY();
 80031a0:	4b05      	ldr	r3, [pc, #20]	; (80031b8 <HAL_RCC_GetClockConfig+0x78>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0207 	and.w	r2, r3, #7
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	601a      	str	r2, [r3, #0]
  }
}
 80031ac:	bf00      	nop
 80031ae:	3714      	adds	r7, #20
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bc80      	pop	{r7}
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	58004000 	.word	0x58004000

080031bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80031bc:	b590      	push	{r4, r7, lr}
 80031be:	b085      	sub	sp, #20
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	091b      	lsrs	r3, r3, #4
 80031c8:	f003 030f 	and.w	r3, r3, #15
 80031cc:	4a10      	ldr	r2, [pc, #64]	; (8003210 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80031ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031d2:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80031d4:	f7ff f974 	bl	80024c0 <LL_RCC_GetAHB3Prescaler>
 80031d8:	4603      	mov	r3, r0
 80031da:	091b      	lsrs	r3, r3, #4
 80031dc:	f003 030f 	and.w	r3, r3, #15
 80031e0:	4a0c      	ldr	r2, [pc, #48]	; (8003214 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80031e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ec:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	4a09      	ldr	r2, [pc, #36]	; (8003218 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80031f2:	fba2 2303 	umull	r2, r3, r2, r3
 80031f6:	0c9c      	lsrs	r4, r3, #18
 80031f8:	f7fe ff88 	bl	800210c <HAL_PWREx_GetVoltageRange>
 80031fc:	4603      	mov	r3, r0
 80031fe:	4619      	mov	r1, r3
 8003200:	4620      	mov	r0, r4
 8003202:	f000 f80b 	bl	800321c <RCC_SetFlashLatency>
 8003206:	4603      	mov	r3, r0
}
 8003208:	4618      	mov	r0, r3
 800320a:	3714      	adds	r7, #20
 800320c:	46bd      	mov	sp, r7
 800320e:	bd90      	pop	{r4, r7, pc}
 8003210:	0800a9c8 	.word	0x0800a9c8
 8003214:	0800a968 	.word	0x0800a968
 8003218:	431bde83 	.word	0x431bde83

0800321c <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b08e      	sub	sp, #56	; 0x38
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8003226:	4a3a      	ldr	r2, [pc, #232]	; (8003310 <RCC_SetFlashLatency+0xf4>)
 8003228:	f107 0320 	add.w	r3, r7, #32
 800322c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003230:	6018      	str	r0, [r3, #0]
 8003232:	3304      	adds	r3, #4
 8003234:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8003236:	4a37      	ldr	r2, [pc, #220]	; (8003314 <RCC_SetFlashLatency+0xf8>)
 8003238:	f107 0318 	add.w	r3, r7, #24
 800323c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003240:	6018      	str	r0, [r3, #0]
 8003242:	3304      	adds	r3, #4
 8003244:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8003246:	4a34      	ldr	r2, [pc, #208]	; (8003318 <RCC_SetFlashLatency+0xfc>)
 8003248:	f107 030c 	add.w	r3, r7, #12
 800324c:	ca07      	ldmia	r2, {r0, r1, r2}
 800324e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8003252:	2300      	movs	r3, #0
 8003254:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800325c:	d11b      	bne.n	8003296 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800325e:	2300      	movs	r3, #0
 8003260:	633b      	str	r3, [r7, #48]	; 0x30
 8003262:	e014      	b.n	800328e <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8003264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003266:	005b      	lsls	r3, r3, #1
 8003268:	3338      	adds	r3, #56	; 0x38
 800326a:	443b      	add	r3, r7
 800326c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8003270:	461a      	mov	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4293      	cmp	r3, r2
 8003276:	d807      	bhi.n	8003288 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	3338      	adds	r3, #56	; 0x38
 800327e:	443b      	add	r3, r7
 8003280:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003284:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003286:	e021      	b.n	80032cc <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328a:	3301      	adds	r3, #1
 800328c:	633b      	str	r3, [r7, #48]	; 0x30
 800328e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003290:	2b02      	cmp	r3, #2
 8003292:	d9e7      	bls.n	8003264 <RCC_SetFlashLatency+0x48>
 8003294:	e01a      	b.n	80032cc <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003296:	2300      	movs	r3, #0
 8003298:	62fb      	str	r3, [r7, #44]	; 0x2c
 800329a:	e014      	b.n	80032c6 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800329c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	3338      	adds	r3, #56	; 0x38
 80032a2:	443b      	add	r3, r7
 80032a4:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80032a8:	461a      	mov	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d807      	bhi.n	80032c0 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80032b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	3338      	adds	r3, #56	; 0x38
 80032b6:	443b      	add	r3, r7
 80032b8:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80032bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80032be:	e005      	b.n	80032cc <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80032c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032c2:	3301      	adds	r3, #1
 80032c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d9e7      	bls.n	800329c <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80032cc:	4b13      	ldr	r3, [pc, #76]	; (800331c <RCC_SetFlashLatency+0x100>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f023 0207 	bic.w	r2, r3, #7
 80032d4:	4911      	ldr	r1, [pc, #68]	; (800331c <RCC_SetFlashLatency+0x100>)
 80032d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032d8:	4313      	orrs	r3, r2
 80032da:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80032dc:	f7fe f8b4 	bl	8001448 <HAL_GetTick>
 80032e0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80032e2:	e008      	b.n	80032f6 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80032e4:	f7fe f8b0 	bl	8001448 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b02      	cmp	r3, #2
 80032f0:	d901      	bls.n	80032f6 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e007      	b.n	8003306 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80032f6:	4b09      	ldr	r3, [pc, #36]	; (800331c <RCC_SetFlashLatency+0x100>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0307 	and.w	r3, r3, #7
 80032fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003300:	429a      	cmp	r2, r3
 8003302:	d1ef      	bne.n	80032e4 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3738      	adds	r7, #56	; 0x38
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	0800a8ec 	.word	0x0800a8ec
 8003314:	0800a8f4 	.word	0x0800a8f4
 8003318:	0800a8fc 	.word	0x0800a8fc
 800331c:	58004000 	.word	0x58004000

08003320 <LL_RCC_LSE_IsReady>:
{
 8003320:	b480      	push	{r7}
 8003322:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003324:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	2b02      	cmp	r3, #2
 8003332:	d101      	bne.n	8003338 <LL_RCC_LSE_IsReady+0x18>
 8003334:	2301      	movs	r3, #1
 8003336:	e000      	b.n	800333a <LL_RCC_LSE_IsReady+0x1a>
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	46bd      	mov	sp, r7
 800333e:	bc80      	pop	{r7}
 8003340:	4770      	bx	lr

08003342 <LL_RCC_SetUSARTClockSource>:
{
 8003342:	b480      	push	{r7}
 8003344:	b083      	sub	sp, #12
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800334a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800334e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	0c1b      	lsrs	r3, r3, #16
 8003356:	43db      	mvns	r3, r3
 8003358:	401a      	ands	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	b29b      	uxth	r3, r3
 800335e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003362:	4313      	orrs	r3, r2
 8003364:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003368:	bf00      	nop
 800336a:	370c      	adds	r7, #12
 800336c:	46bd      	mov	sp, r7
 800336e:	bc80      	pop	{r7}
 8003370:	4770      	bx	lr

08003372 <LL_RCC_SetI2SClockSource>:
{
 8003372:	b480      	push	{r7}
 8003374:	b083      	sub	sp, #12
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800337a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800337e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003382:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003386:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4313      	orrs	r3, r2
 800338e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003392:	bf00      	nop
 8003394:	370c      	adds	r7, #12
 8003396:	46bd      	mov	sp, r7
 8003398:	bc80      	pop	{r7}
 800339a:	4770      	bx	lr

0800339c <LL_RCC_SetLPUARTClockSource>:
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80033a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033ac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80033b0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bc80      	pop	{r7}
 80033c4:	4770      	bx	lr

080033c6 <LL_RCC_SetI2CClockSource>:
{
 80033c6:	b480      	push	{r7}
 80033c8:	b083      	sub	sp, #12
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80033ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033d2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	091b      	lsrs	r3, r3, #4
 80033da:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80033de:	43db      	mvns	r3, r3
 80033e0:	401a      	ands	r2, r3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	011b      	lsls	r3, r3, #4
 80033e6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80033ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80033ee:	4313      	orrs	r3, r2
 80033f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bc80      	pop	{r7}
 80033fc:	4770      	bx	lr

080033fe <LL_RCC_SetLPTIMClockSource>:
{
 80033fe:	b480      	push	{r7}
 8003400:	b083      	sub	sp, #12
 8003402:	af00      	add	r7, sp, #0
 8003404:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003406:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800340a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	0c1b      	lsrs	r3, r3, #16
 8003412:	041b      	lsls	r3, r3, #16
 8003414:	43db      	mvns	r3, r3
 8003416:	401a      	ands	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	041b      	lsls	r3, r3, #16
 800341c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003420:	4313      	orrs	r3, r2
 8003422:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003426:	bf00      	nop
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	bc80      	pop	{r7}
 800342e:	4770      	bx	lr

08003430 <LL_RCC_SetRNGClockSource>:
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003438:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800343c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003440:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003444:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4313      	orrs	r3, r2
 800344c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003450:	bf00      	nop
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	bc80      	pop	{r7}
 8003458:	4770      	bx	lr

0800345a <LL_RCC_SetADCClockSource>:
{
 800345a:	b480      	push	{r7}
 800345c:	b083      	sub	sp, #12
 800345e:	af00      	add	r7, sp, #0
 8003460:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003462:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800346a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800346e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4313      	orrs	r3, r2
 8003476:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800347a:	bf00      	nop
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	bc80      	pop	{r7}
 8003482:	4770      	bx	lr

08003484 <LL_RCC_SetRTCClockSource>:
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800348c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003494:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003498:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4313      	orrs	r3, r2
 80034a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bc80      	pop	{r7}
 80034ac:	4770      	bx	lr

080034ae <LL_RCC_GetRTCClockSource>:
{
 80034ae:	b480      	push	{r7}
 80034b0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80034b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80034be:	4618      	mov	r0, r3
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bc80      	pop	{r7}
 80034c4:	4770      	bx	lr

080034c6 <LL_RCC_ForceBackupDomainReset>:
{
 80034c6:	b480      	push	{r7}
 80034c8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80034ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80034de:	bf00      	nop
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bc80      	pop	{r7}
 80034e4:	4770      	bx	lr

080034e6 <LL_RCC_ReleaseBackupDomainReset>:
{
 80034e6:	b480      	push	{r7}
 80034e8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80034ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80034fe:	bf00      	nop
 8003500:	46bd      	mov	sp, r7
 8003502:	bc80      	pop	{r7}
 8003504:	4770      	bx	lr
	...

08003508 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b086      	sub	sp, #24
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8003510:	2300      	movs	r3, #0
 8003512:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8003514:	2300      	movs	r3, #0
 8003516:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003518:	2300      	movs	r3, #0
 800351a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d058      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8003528:	f7fe fde2 	bl	80020f0 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800352c:	f7fd ff8c 	bl	8001448 <HAL_GetTick>
 8003530:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003532:	e009      	b.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003534:	f7fd ff88 	bl	8001448 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b02      	cmp	r3, #2
 8003540:	d902      	bls.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	74fb      	strb	r3, [r7, #19]
        break;
 8003546:	e006      	b.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003548:	4b7b      	ldr	r3, [pc, #492]	; (8003738 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003550:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003554:	d1ee      	bne.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8003556:	7cfb      	ldrb	r3, [r7, #19]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d13c      	bne.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 800355c:	f7ff ffa7 	bl	80034ae <LL_RCC_GetRTCClockSource>
 8003560:	4602      	mov	r2, r0
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003566:	429a      	cmp	r2, r3
 8003568:	d00f      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800356a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800356e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003572:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003576:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003578:	f7ff ffa5 	bl	80034c6 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 800357c:	f7ff ffb3 	bl	80034e6 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003580:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d014      	beq.n	80035be <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003594:	f7fd ff58 	bl	8001448 <HAL_GetTick>
 8003598:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800359a:	e00b      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800359c:	f7fd ff54 	bl	8001448 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d902      	bls.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	74fb      	strb	r3, [r7, #19]
            break;
 80035b2:	e004      	b.n	80035be <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80035b4:	f7ff feb4 	bl	8003320 <LL_RCC_LSE_IsReady>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d1ee      	bne.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 80035be:	7cfb      	ldrb	r3, [r7, #19]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d105      	bne.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7ff ff5b 	bl	8003484 <LL_RCC_SetRTCClockSource>
 80035ce:	e004      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80035d0:	7cfb      	ldrb	r3, [r7, #19]
 80035d2:	74bb      	strb	r3, [r7, #18]
 80035d4:	e001      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035d6:	7cfb      	ldrb	r3, [r7, #19]
 80035d8:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d004      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7ff fea9 	bl	8003342 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0302 	and.w	r3, r3, #2
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d004      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	4618      	mov	r0, r3
 8003602:	f7ff fe9e 	bl	8003342 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0320 	and.w	r3, r3, #32
 800360e:	2b00      	cmp	r3, #0
 8003610:	d004      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	4618      	mov	r0, r3
 8003618:	f7ff fec0 	bl	800339c <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003624:	2b00      	cmp	r3, #0
 8003626:	d004      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a1b      	ldr	r3, [r3, #32]
 800362c:	4618      	mov	r0, r3
 800362e:	f7ff fee6 	bl	80033fe <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800363a:	2b00      	cmp	r3, #0
 800363c:	d004      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003642:	4618      	mov	r0, r3
 8003644:	f7ff fedb 	bl	80033fe <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003650:	2b00      	cmp	r3, #0
 8003652:	d004      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003658:	4618      	mov	r0, r3
 800365a:	f7ff fed0 	bl	80033fe <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003666:	2b00      	cmp	r3, #0
 8003668:	d004      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	4618      	mov	r0, r3
 8003670:	f7ff fea9 	bl	80033c6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800367c:	2b00      	cmp	r3, #0
 800367e:	d004      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	699b      	ldr	r3, [r3, #24]
 8003684:	4618      	mov	r0, r3
 8003686:	f7ff fe9e 	bl	80033c6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003692:	2b00      	cmp	r3, #0
 8003694:	d004      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	69db      	ldr	r3, [r3, #28]
 800369a:	4618      	mov	r0, r3
 800369c:	f7ff fe93 	bl	80033c6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0310 	and.w	r3, r3, #16
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d011      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7ff fe5e 	bl	8003372 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036be:	d107      	bne.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80036c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036ce:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d010      	beq.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e0:	4618      	mov	r0, r3
 80036e2:	f7ff fea5 	bl	8003430 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d107      	bne.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80036ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036fc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d011      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370e:	4618      	mov	r0, r3
 8003710:	f7ff fea3 	bl	800345a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003718:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800371c:	d107      	bne.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800371e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800372c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800372e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003730:	4618      	mov	r0, r3
 8003732:	3718      	adds	r7, #24
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	58000400 	.word	0x58000400

0800373c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d071      	beq.n	8003832 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d106      	bne.n	8003768 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f7fd fc1e 	bl	8000fa4 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2202      	movs	r2, #2
 800376c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003770:	4b32      	ldr	r3, [pc, #200]	; (800383c <HAL_RTC_Init+0x100>)
 8003772:	68db      	ldr	r3, [r3, #12]
 8003774:	f003 0310 	and.w	r3, r3, #16
 8003778:	2b10      	cmp	r3, #16
 800377a:	d051      	beq.n	8003820 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800377c:	4b2f      	ldr	r3, [pc, #188]	; (800383c <HAL_RTC_Init+0x100>)
 800377e:	22ca      	movs	r2, #202	; 0xca
 8003780:	625a      	str	r2, [r3, #36]	; 0x24
 8003782:	4b2e      	ldr	r3, [pc, #184]	; (800383c <HAL_RTC_Init+0x100>)
 8003784:	2253      	movs	r2, #83	; 0x53
 8003786:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f000 faa3 	bl	8003cd4 <RTC_EnterInitMode>
 800378e:	4603      	mov	r3, r0
 8003790:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8003792:	7bfb      	ldrb	r3, [r7, #15]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d13f      	bne.n	8003818 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8003798:	4b28      	ldr	r3, [pc, #160]	; (800383c <HAL_RTC_Init+0x100>)
 800379a:	699b      	ldr	r3, [r3, #24]
 800379c:	4a27      	ldr	r2, [pc, #156]	; (800383c <HAL_RTC_Init+0x100>)
 800379e:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 80037a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037a6:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80037a8:	4b24      	ldr	r3, [pc, #144]	; (800383c <HAL_RTC_Init+0x100>)
 80037aa:	699a      	ldr	r2, [r3, #24]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6859      	ldr	r1, [r3, #4]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	691b      	ldr	r3, [r3, #16]
 80037b4:	4319      	orrs	r1, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	430b      	orrs	r3, r1
 80037bc:	491f      	ldr	r1, [pc, #124]	; (800383c <HAL_RTC_Init+0x100>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68da      	ldr	r2, [r3, #12]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	041b      	lsls	r3, r3, #16
 80037cc:	491b      	ldr	r1, [pc, #108]	; (800383c <HAL_RTC_Init+0x100>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80037d2:	4b1a      	ldr	r3, [pc, #104]	; (800383c <HAL_RTC_Init+0x100>)
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e2:	430b      	orrs	r3, r1
 80037e4:	4915      	ldr	r1, [pc, #84]	; (800383c <HAL_RTC_Init+0x100>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 faa6 	bl	8003d3c <RTC_ExitInitMode>
 80037f0:	4603      	mov	r3, r0
 80037f2:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 80037f4:	7bfb      	ldrb	r3, [r7, #15]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d10e      	bne.n	8003818 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 80037fa:	4b10      	ldr	r3, [pc, #64]	; (800383c <HAL_RTC_Init+0x100>)
 80037fc:	699b      	ldr	r3, [r3, #24]
 80037fe:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a19      	ldr	r1, [r3, #32]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	69db      	ldr	r3, [r3, #28]
 800380a:	4319      	orrs	r1, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	695b      	ldr	r3, [r3, #20]
 8003810:	430b      	orrs	r3, r1
 8003812:	490a      	ldr	r1, [pc, #40]	; (800383c <HAL_RTC_Init+0x100>)
 8003814:	4313      	orrs	r3, r2
 8003816:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003818:	4b08      	ldr	r3, [pc, #32]	; (800383c <HAL_RTC_Init+0x100>)
 800381a:	22ff      	movs	r2, #255	; 0xff
 800381c:	625a      	str	r2, [r3, #36]	; 0x24
 800381e:	e001      	b.n	8003824 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8003820:	2300      	movs	r3, #0
 8003822:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003824:	7bfb      	ldrb	r3, [r7, #15]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d103      	bne.n	8003832 <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2201      	movs	r2, #1
 800382e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8003832:	7bfb      	ldrb	r3, [r7, #15]
}
 8003834:	4618      	mov	r0, r3
 8003836:	3710      	adds	r7, #16
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	40002800 	.word	0x40002800

08003840 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003840:	b590      	push	{r4, r7, lr}
 8003842:	b087      	sub	sp, #28
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003852:	2b01      	cmp	r3, #1
 8003854:	d101      	bne.n	800385a <HAL_RTC_SetTime+0x1a>
 8003856:	2302      	movs	r3, #2
 8003858:	e088      	b.n	800396c <HAL_RTC_SetTime+0x12c>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2201      	movs	r2, #1
 800385e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2202      	movs	r2, #2
 8003866:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800386a:	4b42      	ldr	r3, [pc, #264]	; (8003974 <HAL_RTC_SetTime+0x134>)
 800386c:	22ca      	movs	r2, #202	; 0xca
 800386e:	625a      	str	r2, [r3, #36]	; 0x24
 8003870:	4b40      	ldr	r3, [pc, #256]	; (8003974 <HAL_RTC_SetTime+0x134>)
 8003872:	2253      	movs	r2, #83	; 0x53
 8003874:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003876:	68f8      	ldr	r0, [r7, #12]
 8003878:	f000 fa2c 	bl	8003cd4 <RTC_EnterInitMode>
 800387c:	4603      	mov	r3, r0
 800387e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003880:	7cfb      	ldrb	r3, [r7, #19]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d15e      	bne.n	8003944 <HAL_RTC_SetTime+0x104>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8003886:	4b3b      	ldr	r3, [pc, #236]	; (8003974 <HAL_RTC_SetTime+0x134>)
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800388e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003892:	d057      	beq.n	8003944 <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d125      	bne.n	80038e6 <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800389a:	4b36      	ldr	r3, [pc, #216]	; (8003974 <HAL_RTC_SetTime+0x134>)
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d102      	bne.n	80038ac <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	2200      	movs	r2, #0
 80038aa:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	4618      	mov	r0, r3
 80038b2:	f000 fa81 	bl	8003db8 <RTC_ByteToBcd2>
 80038b6:	4603      	mov	r3, r0
 80038b8:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	785b      	ldrb	r3, [r3, #1]
 80038be:	4618      	mov	r0, r3
 80038c0:	f000 fa7a 	bl	8003db8 <RTC_ByteToBcd2>
 80038c4:	4603      	mov	r3, r0
 80038c6:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80038c8:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	789b      	ldrb	r3, [r3, #2]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f000 fa72 	bl	8003db8 <RTC_ByteToBcd2>
 80038d4:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80038d6:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	78db      	ldrb	r3, [r3, #3]
 80038de:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80038e0:	4313      	orrs	r3, r2
 80038e2:	617b      	str	r3, [r7, #20]
 80038e4:	e017      	b.n	8003916 <HAL_RTC_SetTime+0xd6>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80038e6:	4b23      	ldr	r3, [pc, #140]	; (8003974 <HAL_RTC_SetTime+0x134>)
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d102      	bne.n	80038f8 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	2200      	movs	r2, #0
 80038f6:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	785b      	ldrb	r3, [r3, #1]
 8003902:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003904:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003906:	68ba      	ldr	r2, [r7, #8]
 8003908:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800390a:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	78db      	ldrb	r3, [r3, #3]
 8003910:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003912:	4313      	orrs	r3, r2
 8003914:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8003916:	4a17      	ldr	r2, [pc, #92]	; (8003974 <HAL_RTC_SetTime+0x134>)
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800391e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003922:	6013      	str	r3, [r2, #0]
      
      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8003924:	4b13      	ldr	r3, [pc, #76]	; (8003974 <HAL_RTC_SetTime+0x134>)
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	4a12      	ldr	r2, [pc, #72]	; (8003974 <HAL_RTC_SetTime+0x134>)
 800392a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800392e:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8003930:	4b10      	ldr	r3, [pc, #64]	; (8003974 <HAL_RTC_SetTime+0x134>)
 8003932:	699a      	ldr	r2, [r3, #24]
 8003934:	68bb      	ldr	r3, [r7, #8]
 8003936:	68d9      	ldr	r1, [r3, #12]
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	430b      	orrs	r3, r1
 800393e:	490d      	ldr	r1, [pc, #52]	; (8003974 <HAL_RTC_SetTime+0x134>)
 8003940:	4313      	orrs	r3, r2
 8003942:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	f000 f9f9 	bl	8003d3c <RTC_ExitInitMode>
 800394a:	4603      	mov	r3, r0
 800394c:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800394e:	4b09      	ldr	r3, [pc, #36]	; (8003974 <HAL_RTC_SetTime+0x134>)
 8003950:	22ff      	movs	r2, #255	; 0xff
 8003952:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003954:	7cfb      	ldrb	r3, [r7, #19]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d103      	bne.n	8003962 <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2201      	movs	r2, #1
 800395e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 800396a:	7cfb      	ldrb	r3, [r7, #19]
}
 800396c:	4618      	mov	r0, r3
 800396e:	371c      	adds	r7, #28
 8003970:	46bd      	mov	sp, r7
 8003972:	bd90      	pop	{r4, r7, pc}
 8003974:	40002800 	.word	0x40002800

08003978 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003978:	b590      	push	{r4, r7, lr}
 800397a:	b087      	sub	sp, #28
 800397c:	af00      	add	r7, sp, #0
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800398a:	2b01      	cmp	r3, #1
 800398c:	d101      	bne.n	8003992 <HAL_RTC_SetDate+0x1a>
 800398e:	2302      	movs	r3, #2
 8003990:	e071      	b.n	8003a76 <HAL_RTC_SetDate+0xfe>
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2201      	movs	r2, #1
 8003996:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2202      	movs	r2, #2
 800399e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d10e      	bne.n	80039c6 <HAL_RTC_SetDate+0x4e>
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	785b      	ldrb	r3, [r3, #1]
 80039ac:	f003 0310 	and.w	r3, r3, #16
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d008      	beq.n	80039c6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	785b      	ldrb	r3, [r3, #1]
 80039b8:	f023 0310 	bic.w	r3, r3, #16
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	330a      	adds	r3, #10
 80039c0:	b2da      	uxtb	r2, r3
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d11c      	bne.n	8003a06 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	78db      	ldrb	r3, [r3, #3]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f000 f9f1 	bl	8003db8 <RTC_ByteToBcd2>
 80039d6:	4603      	mov	r3, r0
 80039d8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	785b      	ldrb	r3, [r3, #1]
 80039de:	4618      	mov	r0, r3
 80039e0:	f000 f9ea 	bl	8003db8 <RTC_ByteToBcd2>
 80039e4:	4603      	mov	r3, r0
 80039e6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80039e8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	789b      	ldrb	r3, [r3, #2]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f000 f9e2 	bl	8003db8 <RTC_ByteToBcd2>
 80039f4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80039f6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003a00:	4313      	orrs	r3, r2
 8003a02:	617b      	str	r3, [r7, #20]
 8003a04:	e00e      	b.n	8003a24 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	78db      	ldrb	r3, [r3, #3]
 8003a0a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	785b      	ldrb	r3, [r3, #1]
 8003a10:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003a12:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8003a14:	68ba      	ldr	r2, [r7, #8]
 8003a16:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003a18:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003a20:	4313      	orrs	r3, r2
 8003a22:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a24:	4b16      	ldr	r3, [pc, #88]	; (8003a80 <HAL_RTC_SetDate+0x108>)
 8003a26:	22ca      	movs	r2, #202	; 0xca
 8003a28:	625a      	str	r2, [r3, #36]	; 0x24
 8003a2a:	4b15      	ldr	r3, [pc, #84]	; (8003a80 <HAL_RTC_SetDate+0x108>)
 8003a2c:	2253      	movs	r2, #83	; 0x53
 8003a2e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003a30:	68f8      	ldr	r0, [r7, #12]
 8003a32:	f000 f94f 	bl	8003cd4 <RTC_EnterInitMode>
 8003a36:	4603      	mov	r3, r0
 8003a38:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003a3a:	7cfb      	ldrb	r3, [r7, #19]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d10b      	bne.n	8003a58 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8003a40:	4a0f      	ldr	r2, [pc, #60]	; (8003a80 <HAL_RTC_SetDate+0x108>)
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003a48:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003a4c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	f000 f974 	bl	8003d3c <RTC_ExitInitMode>
 8003a54:	4603      	mov	r3, r0
 8003a56:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a58:	4b09      	ldr	r3, [pc, #36]	; (8003a80 <HAL_RTC_SetDate+0x108>)
 8003a5a:	22ff      	movs	r2, #255	; 0xff
 8003a5c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003a5e:	7cfb      	ldrb	r3, [r7, #19]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d103      	bne.n	8003a6c <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8003a74:	7cfb      	ldrb	r3, [r7, #19]
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	371c      	adds	r7, #28
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd90      	pop	{r4, r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	40002800 	.word	0x40002800

08003a84 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003a84:	b590      	push	{r4, r7, lr}
 8003a86:	b087      	sub	sp, #28
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8003a90:	2300      	movs	r3, #0
 8003a92:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  __HAL_LOCK(hrtc);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d101      	bne.n	8003aa2 <HAL_RTC_SetAlarm+0x1e>
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	e0eb      	b.n	8003c7a <HAL_RTC_SetAlarm+0x1f6>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2202      	movs	r2, #2
 8003aae:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8003ab2:	4b74      	ldr	r3, [pc, #464]	; (8003c84 <HAL_RTC_SetAlarm+0x200>)
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aba:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ac2:	d06a      	beq.n	8003b9a <HAL_RTC_SetAlarm+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d13a      	bne.n	8003b40 <HAL_RTC_SetAlarm+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003aca:	4b6e      	ldr	r3, [pc, #440]	; (8003c84 <HAL_RTC_SetAlarm+0x200>)
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d102      	bne.n	8003adc <HAL_RTC_SetAlarm+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	695b      	ldr	r3, [r3, #20]
 8003ae0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f000 f965 	bl	8003db8 <RTC_ByteToBcd2>
 8003aee:	4603      	mov	r3, r0
 8003af0:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	785b      	ldrb	r3, [r3, #1]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f000 f95e 	bl	8003db8 <RTC_ByteToBcd2>
 8003afc:	4603      	mov	r3, r0
 8003afe:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003b00:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	789b      	ldrb	r3, [r3, #2]
 8003b06:	4618      	mov	r0, r3
 8003b08:	f000 f956 	bl	8003db8 <RTC_ByteToBcd2>
 8003b0c:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003b0e:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	78db      	ldrb	r3, [r3, #3]
 8003b16:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003b18:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b22:	4618      	mov	r0, r3
 8003b24:	f000 f948 	bl	8003db8 <RTC_ByteToBcd2>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003b2c:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003b34:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	617b      	str	r3, [r7, #20]
 8003b3e:	e02c      	b.n	8003b9a <HAL_RTC_SetAlarm+0x116>
    }
    else /* format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	695b      	ldr	r3, [r3, #20]
 8003b44:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8003b48:	d00d      	beq.n	8003b66 <HAL_RTC_SetAlarm+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b52:	d008      	beq.n	8003b66 <HAL_RTC_SetAlarm+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003b54:	4b4b      	ldr	r3, [pc, #300]	; (8003c84 <HAL_RTC_SetAlarm+0x200>)
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d102      	bne.n	8003b66 <HAL_RTC_SetAlarm+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	2200      	movs	r2, #0
 8003b64:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	785b      	ldrb	r3, [r3, #1]
 8003b70:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003b72:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003b74:	68ba      	ldr	r2, [r7, #8]
 8003b76:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003b78:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	78db      	ldrb	r3, [r3, #3]
 8003b7e:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003b80:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b88:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003b8a:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003b90:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003b96:	4313      	orrs	r3, r2
 8003b98:	617b      	str	r3, [r7, #20]
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b9a:	4b3a      	ldr	r3, [pc, #232]	; (8003c84 <HAL_RTC_SetAlarm+0x200>)
 8003b9c:	22ca      	movs	r2, #202	; 0xca
 8003b9e:	625a      	str	r2, [r3, #36]	; 0x24
 8003ba0:	4b38      	ldr	r3, [pc, #224]	; (8003c84 <HAL_RTC_SetAlarm+0x200>)
 8003ba2:	2253      	movs	r2, #83	; 0x53
 8003ba4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003baa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bae:	d12c      	bne.n	8003c0a <HAL_RTC_SetAlarm+0x186>
  {
    /* Disable the Alarm A interrupt */
    /* In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, (RTC_CR_ALRAE | RTC_CR_ALRAIE));
 8003bb0:	4b34      	ldr	r3, [pc, #208]	; (8003c84 <HAL_RTC_SetAlarm+0x200>)
 8003bb2:	699b      	ldr	r3, [r3, #24]
 8003bb4:	4a33      	ldr	r2, [pc, #204]	; (8003c84 <HAL_RTC_SetAlarm+0x200>)
 8003bb6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003bba:	6193      	str	r3, [r2, #24]

    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8003bbc:	4b31      	ldr	r3, [pc, #196]	; (8003c84 <HAL_RTC_SetAlarm+0x200>)
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003bc8:	d107      	bne.n	8003bda <HAL_RTC_SetAlarm+0x156>
    {
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	699a      	ldr	r2, [r3, #24]
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	69db      	ldr	r3, [r3, #28]
 8003bd2:	492c      	ldr	r1, [pc, #176]	; (8003c84 <HAL_RTC_SetAlarm+0x200>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	644b      	str	r3, [r1, #68]	; 0x44
 8003bd8:	e006      	b.n	8003be8 <HAL_RTC_SetAlarm+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8003bda:	4a2a      	ldr	r2, [pc, #168]	; (8003c84 <HAL_RTC_SetAlarm+0x200>)
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8003be0:	4a28      	ldr	r2, [pc, #160]	; (8003c84 <HAL_RTC_SetAlarm+0x200>)
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8003be8:	4a26      	ldr	r2, [pc, #152]	; (8003c84 <HAL_RTC_SetAlarm+0x200>)
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf4:	f043 0201 	orr.w	r2, r3, #1
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm state: Enable Alarm */
    SET_BIT(RTC->CR, RTC_CR_ALRAE);
 8003bfc:	4b21      	ldr	r3, [pc, #132]	; (8003c84 <HAL_RTC_SetAlarm+0x200>)
 8003bfe:	699b      	ldr	r3, [r3, #24]
 8003c00:	4a20      	ldr	r2, [pc, #128]	; (8003c84 <HAL_RTC_SetAlarm+0x200>)
 8003c02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c06:	6193      	str	r3, [r2, #24]
 8003c08:	e02b      	b.n	8003c62 <HAL_RTC_SetAlarm+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    /* In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, (RTC_CR_ALRBE | RTC_CR_ALRBIE));
 8003c0a:	4b1e      	ldr	r3, [pc, #120]	; (8003c84 <HAL_RTC_SetAlarm+0x200>)
 8003c0c:	699b      	ldr	r3, [r3, #24]
 8003c0e:	4a1d      	ldr	r2, [pc, #116]	; (8003c84 <HAL_RTC_SetAlarm+0x200>)
 8003c10:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8003c14:	6193      	str	r3, [r2, #24]

    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8003c16:	4b1b      	ldr	r3, [pc, #108]	; (8003c84 <HAL_RTC_SetAlarm+0x200>)
 8003c18:	2202      	movs	r2, #2
 8003c1a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c22:	d107      	bne.n	8003c34 <HAL_RTC_SetAlarm+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	699a      	ldr	r2, [r3, #24]
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	69db      	ldr	r3, [r3, #28]
 8003c2c:	4915      	ldr	r1, [pc, #84]	; (8003c84 <HAL_RTC_SetAlarm+0x200>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003c32:	e006      	b.n	8003c42 <HAL_RTC_SetAlarm+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8003c34:	4a13      	ldr	r2, [pc, #76]	; (8003c84 <HAL_RTC_SetAlarm+0x200>)
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8003c3a:	4a12      	ldr	r2, [pc, #72]	; (8003c84 <HAL_RTC_SetAlarm+0x200>)
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8003c42:	4a10      	ldr	r2, [pc, #64]	; (8003c84 <HAL_RTC_SetAlarm+0x200>)
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4e:	f043 0202 	orr.w	r2, r3, #2
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm state: Enable Alarm */
    SET_BIT(RTC->CR, RTC_CR_ALRBE);
 8003c56:	4b0b      	ldr	r3, [pc, #44]	; (8003c84 <HAL_RTC_SetAlarm+0x200>)
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	4a0a      	ldr	r2, [pc, #40]	; (8003c84 <HAL_RTC_SetAlarm+0x200>)
 8003c5c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c60:	6193      	str	r3, [r2, #24]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c62:	4b08      	ldr	r3, [pc, #32]	; (8003c84 <HAL_RTC_SetAlarm+0x200>)
 8003c64:	22ff      	movs	r2, #255	; 0xff
 8003c66:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	371c      	adds	r7, #28
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd90      	pop	{r4, r7, pc}
 8003c82:	bf00      	nop
 8003c84:	40002800 	.word	0x40002800

08003c88 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b084      	sub	sp, #16
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8003c90:	4b0f      	ldr	r3, [pc, #60]	; (8003cd0 <HAL_RTC_WaitForSynchro+0x48>)
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	4a0e      	ldr	r2, [pc, #56]	; (8003cd0 <HAL_RTC_WaitForSynchro+0x48>)
 8003c96:	f023 0320 	bic.w	r3, r3, #32
 8003c9a:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8003c9c:	f7fd fbd4 	bl	8001448 <HAL_GetTick>
 8003ca0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8003ca2:	e009      	b.n	8003cb8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003ca4:	f7fd fbd0 	bl	8001448 <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003cb2:	d901      	bls.n	8003cb8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e006      	b.n	8003cc6 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8003cb8:	4b05      	ldr	r3, [pc, #20]	; (8003cd0 <HAL_RTC_WaitForSynchro+0x48>)
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	f003 0320 	and.w	r3, r3, #32
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d0ef      	beq.n	8003ca4 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3710      	adds	r7, #16
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	40002800 	.word	0x40002800

08003cd4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8003ce0:	4b15      	ldr	r3, [pc, #84]	; (8003d38 <RTC_EnterInitMode+0x64>)
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d120      	bne.n	8003d2e <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003cec:	4b12      	ldr	r3, [pc, #72]	; (8003d38 <RTC_EnterInitMode+0x64>)
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	4a11      	ldr	r2, [pc, #68]	; (8003d38 <RTC_EnterInitMode+0x64>)
 8003cf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cf6:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8003cf8:	f7fd fba6 	bl	8001448 <HAL_GetTick>
 8003cfc:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003cfe:	e00d      	b.n	8003d1c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003d00:	f7fd fba2 	bl	8001448 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d0e:	d905      	bls.n	8003d1c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2203      	movs	r2, #3
 8003d18:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003d1c:	4b06      	ldr	r3, [pc, #24]	; (8003d38 <RTC_EnterInitMode+0x64>)
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d102      	bne.n	8003d2e <RTC_EnterInitMode+0x5a>
 8003d28:	7bfb      	ldrb	r3, [r7, #15]
 8003d2a:	2b03      	cmp	r3, #3
 8003d2c:	d1e8      	bne.n	8003d00 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8003d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3710      	adds	r7, #16
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	40002800 	.word	0x40002800

08003d3c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d44:	2300      	movs	r3, #0
 8003d46:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003d48:	4b1a      	ldr	r3, [pc, #104]	; (8003db4 <RTC_ExitInitMode+0x78>)
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	4a19      	ldr	r2, [pc, #100]	; (8003db4 <RTC_ExitInitMode+0x78>)
 8003d4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d52:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003d54:	4b17      	ldr	r3, [pc, #92]	; (8003db4 <RTC_ExitInitMode+0x78>)
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	f003 0320 	and.w	r3, r3, #32
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d10c      	bne.n	8003d7a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f7ff ff91 	bl	8003c88 <HAL_RTC_WaitForSynchro>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d01e      	beq.n	8003daa <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2203      	movs	r2, #3
 8003d70:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	73fb      	strb	r3, [r7, #15]
 8003d78:	e017      	b.n	8003daa <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003d7a:	4b0e      	ldr	r3, [pc, #56]	; (8003db4 <RTC_ExitInitMode+0x78>)
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	4a0d      	ldr	r2, [pc, #52]	; (8003db4 <RTC_ExitInitMode+0x78>)
 8003d80:	f023 0320 	bic.w	r3, r3, #32
 8003d84:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f7ff ff7e 	bl	8003c88 <HAL_RTC_WaitForSynchro>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d005      	beq.n	8003d9e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2203      	movs	r2, #3
 8003d96:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003d9e:	4b05      	ldr	r3, [pc, #20]	; (8003db4 <RTC_ExitInitMode+0x78>)
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	4a04      	ldr	r2, [pc, #16]	; (8003db4 <RTC_ExitInitMode+0x78>)
 8003da4:	f043 0320 	orr.w	r3, r3, #32
 8003da8:	6193      	str	r3, [r2, #24]
  }

  return status;
 8003daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3710      	adds	r7, #16
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	40002800 	.word	0x40002800

08003db8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b085      	sub	sp, #20
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8003dc6:	79fb      	ldrb	r3, [r7, #7]
 8003dc8:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8003dca:	e005      	b.n	8003dd8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	3301      	adds	r3, #1
 8003dd0:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8003dd2:	7afb      	ldrb	r3, [r7, #11]
 8003dd4:	3b0a      	subs	r3, #10
 8003dd6:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8003dd8:	7afb      	ldrb	r3, [r7, #11]
 8003dda:	2b09      	cmp	r3, #9
 8003ddc:	d8f6      	bhi.n	8003dcc <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	011b      	lsls	r3, r3, #4
 8003de4:	b2da      	uxtb	r2, r3
 8003de6:	7afb      	ldrb	r3, [r7, #11]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	b2db      	uxtb	r3, r3
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3714      	adds	r7, #20
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bc80      	pop	{r7}
 8003df4:	4770      	bx	lr

08003df6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b084      	sub	sp, #16
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d101      	bne.n	8003e08 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e0c6      	b.n	8003f96 <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d108      	bne.n	8003e22 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e18:	d009      	beq.n	8003e2e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	61da      	str	r2, [r3, #28]
 8003e20:	e005      	b.n	8003e2e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d106      	bne.n	8003e48 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f7fd f8da 	bl	8000ffc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2202      	movs	r2, #2
 8003e4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e5e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	68db      	ldr	r3, [r3, #12]
 8003e64:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e68:	d902      	bls.n	8003e70 <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	60fb      	str	r3, [r7, #12]
 8003e6e:	e002      	b.n	8003e76 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003e70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003e74:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003e7e:	d007      	beq.n	8003e90 <HAL_SPI_Init+0x9a>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003e88:	d002      	beq.n	8003e90 <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003ea0:	431a      	orrs	r2, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	431a      	orrs	r2, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	695b      	ldr	r3, [r3, #20]
 8003eb0:	f003 0301 	and.w	r3, r3, #1
 8003eb4:	431a      	orrs	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	699b      	ldr	r3, [r3, #24]
 8003eba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ebe:	431a      	orrs	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	69db      	ldr	r3, [r3, #28]
 8003ec4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003ec8:	431a      	orrs	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a1b      	ldr	r3, [r3, #32]
 8003ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed2:	ea42 0103 	orr.w	r1, r2, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eda:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eee:	d11b      	bne.n	8003f28 <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d10b      	bne.n	8003f10 <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f00:	d903      	bls.n	8003f0a <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2202      	movs	r2, #2
 8003f06:	631a      	str	r2, [r3, #48]	; 0x30
 8003f08:	e002      	b.n	8003f10 <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d107      	bne.n	8003f28 <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f26:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	0c1b      	lsrs	r3, r3, #16
 8003f2e:	f003 0204 	and.w	r2, r3, #4
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f36:	f003 0310 	and.w	r3, r3, #16
 8003f3a:	431a      	orrs	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f40:	f003 0308 	and.w	r3, r3, #8
 8003f44:	431a      	orrs	r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003f4e:	ea42 0103 	orr.w	r1, r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f68:	d105      	bne.n	8003f76 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	b292      	uxth	r2, r2
 8003f74:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	69da      	ldr	r2, [r3, #28]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f84:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f9e:	b580      	push	{r7, lr}
 8003fa0:	b082      	sub	sp, #8
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d101      	bne.n	8003fb0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e049      	b.n	8004044 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d106      	bne.n	8003fca <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 f841 	bl	800404c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2202      	movs	r2, #2
 8003fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	3304      	adds	r3, #4
 8003fda:	4619      	mov	r1, r3
 8003fdc:	4610      	mov	r0, r2
 8003fde:	f000 f9cf 	bl	8004380 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2201      	movs	r2, #1
 8003fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2201      	movs	r2, #1
 8004006:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2201      	movs	r2, #1
 8004016:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2201      	movs	r2, #1
 800401e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2201      	movs	r2, #1
 8004026:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2201      	movs	r2, #1
 800402e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2201      	movs	r2, #1
 8004036:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	3708      	adds	r7, #8
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004054:	bf00      	nop
 8004056:	370c      	adds	r7, #12
 8004058:	46bd      	mov	sp, r7
 800405a:	bc80      	pop	{r7}
 800405c:	4770      	bx	lr
	...

08004060 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004060:	b480      	push	{r7}
 8004062:	b085      	sub	sp, #20
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800406e:	b2db      	uxtb	r3, r3
 8004070:	2b01      	cmp	r3, #1
 8004072:	d001      	beq.n	8004078 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e036      	b.n	80040e6 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2202      	movs	r2, #2
 800407c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68da      	ldr	r2, [r3, #12]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f042 0201 	orr.w	r2, r2, #1
 800408e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a16      	ldr	r2, [pc, #88]	; (80040f0 <HAL_TIM_Base_Start_IT+0x90>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d004      	beq.n	80040a4 <HAL_TIM_Base_Start_IT+0x44>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040a2:	d115      	bne.n	80040d0 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	689a      	ldr	r2, [r3, #8]
 80040aa:	4b12      	ldr	r3, [pc, #72]	; (80040f4 <HAL_TIM_Base_Start_IT+0x94>)
 80040ac:	4013      	ands	r3, r2
 80040ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2b06      	cmp	r3, #6
 80040b4:	d015      	beq.n	80040e2 <HAL_TIM_Base_Start_IT+0x82>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040bc:	d011      	beq.n	80040e2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f042 0201 	orr.w	r2, r2, #1
 80040cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ce:	e008      	b.n	80040e2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f042 0201 	orr.w	r2, r2, #1
 80040de:	601a      	str	r2, [r3, #0]
 80040e0:	e000      	b.n	80040e4 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3714      	adds	r7, #20
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bc80      	pop	{r7}
 80040ee:	4770      	bx	lr
 80040f0:	40012c00 	.word	0x40012c00
 80040f4:	00010007 	.word	0x00010007

080040f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b02      	cmp	r3, #2
 800410c:	d122      	bne.n	8004154 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	f003 0302 	and.w	r3, r3, #2
 8004118:	2b02      	cmp	r3, #2
 800411a:	d11b      	bne.n	8004154 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f06f 0202 	mvn.w	r2, #2
 8004124:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2201      	movs	r2, #1
 800412a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	f003 0303 	and.w	r3, r3, #3
 8004136:	2b00      	cmp	r3, #0
 8004138:	d003      	beq.n	8004142 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 f904 	bl	8004348 <HAL_TIM_IC_CaptureCallback>
 8004140:	e005      	b.n	800414e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 f8f7 	bl	8004336 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f000 f906 	bl	800435a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	f003 0304 	and.w	r3, r3, #4
 800415e:	2b04      	cmp	r3, #4
 8004160:	d122      	bne.n	80041a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	f003 0304 	and.w	r3, r3, #4
 800416c:	2b04      	cmp	r3, #4
 800416e:	d11b      	bne.n	80041a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f06f 0204 	mvn.w	r2, #4
 8004178:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2202      	movs	r2, #2
 800417e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800418a:	2b00      	cmp	r3, #0
 800418c:	d003      	beq.n	8004196 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 f8da 	bl	8004348 <HAL_TIM_IC_CaptureCallback>
 8004194:	e005      	b.n	80041a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 f8cd 	bl	8004336 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 f8dc 	bl	800435a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	f003 0308 	and.w	r3, r3, #8
 80041b2:	2b08      	cmp	r3, #8
 80041b4:	d122      	bne.n	80041fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	f003 0308 	and.w	r3, r3, #8
 80041c0:	2b08      	cmp	r3, #8
 80041c2:	d11b      	bne.n	80041fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f06f 0208 	mvn.w	r2, #8
 80041cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2204      	movs	r2, #4
 80041d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	69db      	ldr	r3, [r3, #28]
 80041da:	f003 0303 	and.w	r3, r3, #3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d003      	beq.n	80041ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 f8b0 	bl	8004348 <HAL_TIM_IC_CaptureCallback>
 80041e8:	e005      	b.n	80041f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 f8a3 	bl	8004336 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f000 f8b2 	bl	800435a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	f003 0310 	and.w	r3, r3, #16
 8004206:	2b10      	cmp	r3, #16
 8004208:	d122      	bne.n	8004250 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	f003 0310 	and.w	r3, r3, #16
 8004214:	2b10      	cmp	r3, #16
 8004216:	d11b      	bne.n	8004250 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f06f 0210 	mvn.w	r2, #16
 8004220:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2208      	movs	r2, #8
 8004226:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	69db      	ldr	r3, [r3, #28]
 800422e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004232:	2b00      	cmp	r3, #0
 8004234:	d003      	beq.n	800423e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 f886 	bl	8004348 <HAL_TIM_IC_CaptureCallback>
 800423c:	e005      	b.n	800424a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f000 f879 	bl	8004336 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f000 f888 	bl	800435a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	2b01      	cmp	r3, #1
 800425c:	d10e      	bne.n	800427c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	f003 0301 	and.w	r3, r3, #1
 8004268:	2b01      	cmp	r3, #1
 800426a:	d107      	bne.n	800427c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f06f 0201 	mvn.w	r2, #1
 8004274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f7fc fcfe 	bl	8000c78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004286:	2b80      	cmp	r3, #128	; 0x80
 8004288:	d10e      	bne.n	80042a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004294:	2b80      	cmp	r3, #128	; 0x80
 8004296:	d107      	bne.n	80042a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80042a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 f8d7 	bl	8004456 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042b6:	d10e      	bne.n	80042d6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042c2:	2b80      	cmp	r3, #128	; 0x80
 80042c4:	d107      	bne.n	80042d6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80042ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80042d0:	6878      	ldr	r0, [r7, #4]
 80042d2:	f000 f8c9 	bl	8004468 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e0:	2b40      	cmp	r3, #64	; 0x40
 80042e2:	d10e      	bne.n	8004302 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ee:	2b40      	cmp	r3, #64	; 0x40
 80042f0:	d107      	bne.n	8004302 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f000 f835 	bl	800436c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	f003 0320 	and.w	r3, r3, #32
 800430c:	2b20      	cmp	r3, #32
 800430e:	d10e      	bne.n	800432e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	f003 0320 	and.w	r3, r3, #32
 800431a:	2b20      	cmp	r3, #32
 800431c:	d107      	bne.n	800432e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f06f 0220 	mvn.w	r2, #32
 8004326:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f000 f88b 	bl	8004444 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800432e:	bf00      	nop
 8004330:	3708      	adds	r7, #8
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}

08004336 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004336:	b480      	push	{r7}
 8004338:	b083      	sub	sp, #12
 800433a:	af00      	add	r7, sp, #0
 800433c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800433e:	bf00      	nop
 8004340:	370c      	adds	r7, #12
 8004342:	46bd      	mov	sp, r7
 8004344:	bc80      	pop	{r7}
 8004346:	4770      	bx	lr

08004348 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004350:	bf00      	nop
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	bc80      	pop	{r7}
 8004358:	4770      	bx	lr

0800435a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800435a:	b480      	push	{r7}
 800435c:	b083      	sub	sp, #12
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004362:	bf00      	nop
 8004364:	370c      	adds	r7, #12
 8004366:	46bd      	mov	sp, r7
 8004368:	bc80      	pop	{r7}
 800436a:	4770      	bx	lr

0800436c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800436c:	b480      	push	{r7}
 800436e:	b083      	sub	sp, #12
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004374:	bf00      	nop
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	bc80      	pop	{r7}
 800437c:	4770      	bx	lr
	...

08004380 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004380:	b480      	push	{r7}
 8004382:	b085      	sub	sp, #20
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	4a29      	ldr	r2, [pc, #164]	; (8004438 <TIM_Base_SetConfig+0xb8>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d003      	beq.n	80043a0 <TIM_Base_SetConfig+0x20>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800439e:	d108      	bne.n	80043b2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a20      	ldr	r2, [pc, #128]	; (8004438 <TIM_Base_SetConfig+0xb8>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d00b      	beq.n	80043d2 <TIM_Base_SetConfig+0x52>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043c0:	d007      	beq.n	80043d2 <TIM_Base_SetConfig+0x52>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a1d      	ldr	r2, [pc, #116]	; (800443c <TIM_Base_SetConfig+0xbc>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d003      	beq.n	80043d2 <TIM_Base_SetConfig+0x52>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a1c      	ldr	r2, [pc, #112]	; (8004440 <TIM_Base_SetConfig+0xc0>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d108      	bne.n	80043e4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	68db      	ldr	r3, [r3, #12]
 80043de:	68fa      	ldr	r2, [r7, #12]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	689a      	ldr	r2, [r3, #8]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a0b      	ldr	r2, [pc, #44]	; (8004438 <TIM_Base_SetConfig+0xb8>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d007      	beq.n	8004420 <TIM_Base_SetConfig+0xa0>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a0a      	ldr	r2, [pc, #40]	; (800443c <TIM_Base_SetConfig+0xbc>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d003      	beq.n	8004420 <TIM_Base_SetConfig+0xa0>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a09      	ldr	r2, [pc, #36]	; (8004440 <TIM_Base_SetConfig+0xc0>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d103      	bne.n	8004428 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	691a      	ldr	r2, [r3, #16]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	615a      	str	r2, [r3, #20]
}
 800442e:	bf00      	nop
 8004430:	3714      	adds	r7, #20
 8004432:	46bd      	mov	sp, r7
 8004434:	bc80      	pop	{r7}
 8004436:	4770      	bx	lr
 8004438:	40012c00 	.word	0x40012c00
 800443c:	40014400 	.word	0x40014400
 8004440:	40014800 	.word	0x40014800

08004444 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800444c:	bf00      	nop
 800444e:	370c      	adds	r7, #12
 8004450:	46bd      	mov	sp, r7
 8004452:	bc80      	pop	{r7}
 8004454:	4770      	bx	lr

08004456 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004456:	b480      	push	{r7}
 8004458:	b083      	sub	sp, #12
 800445a:	af00      	add	r7, sp, #0
 800445c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800445e:	bf00      	nop
 8004460:	370c      	adds	r7, #12
 8004462:	46bd      	mov	sp, r7
 8004464:	bc80      	pop	{r7}
 8004466:	4770      	bx	lr

08004468 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004470:	bf00      	nop
 8004472:	370c      	adds	r7, #12
 8004474:	46bd      	mov	sp, r7
 8004476:	bc80      	pop	{r7}
 8004478:	4770      	bx	lr

0800447a <LL_RCC_GetUSARTClockSource>:
{
 800447a:	b480      	push	{r7}
 800447c:	b083      	sub	sp, #12
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8004482:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004486:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	401a      	ands	r2, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	041b      	lsls	r3, r3, #16
 8004492:	4313      	orrs	r3, r2
}
 8004494:	4618      	mov	r0, r3
 8004496:	370c      	adds	r7, #12
 8004498:	46bd      	mov	sp, r7
 800449a:	bc80      	pop	{r7}
 800449c:	4770      	bx	lr

0800449e <LL_RCC_GetLPUARTClockSource>:
{
 800449e:	b480      	push	{r7}
 80044a0:	b083      	sub	sp, #12
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80044a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80044aa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4013      	ands	r3, r2
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	370c      	adds	r7, #12
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bc80      	pop	{r7}
 80044ba:	4770      	bx	lr

080044bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b082      	sub	sp, #8
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d101      	bne.n	80044ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e042      	b.n	8004554 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d106      	bne.n	80044e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f7fc fce3 	bl	8000eac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2224      	movs	r2, #36	; 0x24
 80044ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f022 0201 	bic.w	r2, r2, #1
 80044fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 fc98 	bl	8004e34 <UART_SetConfig>
 8004504:	4603      	mov	r3, r0
 8004506:	2b01      	cmp	r3, #1
 8004508:	d101      	bne.n	800450e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e022      	b.n	8004554 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004512:	2b00      	cmp	r3, #0
 8004514:	d002      	beq.n	800451c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 ff00 	bl	800531c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	685a      	ldr	r2, [r3, #4]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800452a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	689a      	ldr	r2, [r3, #8]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800453a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f042 0201 	orr.w	r2, r2, #1
 800454a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 ff86 	bl	800545e <UART_CheckIdleState>
 8004552:	4603      	mov	r3, r0
}
 8004554:	4618      	mov	r0, r3
 8004556:	3708      	adds	r7, #8
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d101      	bne.n	800456e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e04a      	b.n	8004604 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004574:	2b00      	cmp	r3, #0
 8004576:	d106      	bne.n	8004586 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f7fc fc93 	bl	8000eac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2224      	movs	r2, #36	; 0x24
 800458a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f022 0201 	bic.w	r2, r2, #1
 800459c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f000 fc48 	bl	8004e34 <UART_SetConfig>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d101      	bne.n	80045ae <HAL_HalfDuplex_Init+0x52>
  {
    return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e02a      	b.n	8004604 <HAL_HalfDuplex_Init+0xa8>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d002      	beq.n	80045bc <HAL_HalfDuplex_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 feb0 	bl	800531c <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	685a      	ldr	r2, [r3, #4]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	689a      	ldr	r2, [r3, #8]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80045da:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	689a      	ldr	r2, [r3, #8]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f042 0208 	orr.w	r2, r2, #8
 80045ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f042 0201 	orr.w	r2, r2, #1
 80045fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f000 ff2e 	bl	800545e <UART_CheckIdleState>
 8004602:	4603      	mov	r3, r0
}
 8004604:	4618      	mov	r0, r3
 8004606:	3708      	adds	r7, #8
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b08a      	sub	sp, #40	; 0x28
 8004610:	af02      	add	r7, sp, #8
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	603b      	str	r3, [r7, #0]
 8004618:	4613      	mov	r3, r2
 800461a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004622:	2b20      	cmp	r3, #32
 8004624:	d173      	bne.n	800470e <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d002      	beq.n	8004632 <HAL_UART_Transmit+0x26>
 800462c:	88fb      	ldrh	r3, [r7, #6]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d101      	bne.n	8004636 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e06c      	b.n	8004710 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2200      	movs	r2, #0
 800463a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2221      	movs	r2, #33	; 0x21
 8004642:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004646:	f7fc feff 	bl	8001448 <HAL_GetTick>
 800464a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	88fa      	ldrh	r2, [r7, #6]
 8004650:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	88fa      	ldrh	r2, [r7, #6]
 8004658:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004664:	d108      	bne.n	8004678 <HAL_UART_Transmit+0x6c>
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d104      	bne.n	8004678 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800466e:	2300      	movs	r3, #0
 8004670:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	61bb      	str	r3, [r7, #24]
 8004676:	e003      	b.n	8004680 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800467c:	2300      	movs	r3, #0
 800467e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004680:	e02c      	b.n	80046dc <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	9300      	str	r3, [sp, #0]
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	2200      	movs	r2, #0
 800468a:	2180      	movs	r1, #128	; 0x80
 800468c:	68f8      	ldr	r0, [r7, #12]
 800468e:	f000 ff34 	bl	80054fa <UART_WaitOnFlagUntilTimeout>
 8004692:	4603      	mov	r3, r0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d001      	beq.n	800469c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004698:	2303      	movs	r3, #3
 800469a:	e039      	b.n	8004710 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d10b      	bne.n	80046ba <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	881b      	ldrh	r3, [r3, #0]
 80046a6:	461a      	mov	r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046b0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	3302      	adds	r3, #2
 80046b6:	61bb      	str	r3, [r7, #24]
 80046b8:	e007      	b.n	80046ca <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	781a      	ldrb	r2, [r3, #0]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	3301      	adds	r3, #1
 80046c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	3b01      	subs	r3, #1
 80046d4:	b29a      	uxth	r2, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d1cc      	bne.n	8004682 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	9300      	str	r3, [sp, #0]
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	2200      	movs	r2, #0
 80046f0:	2140      	movs	r1, #64	; 0x40
 80046f2:	68f8      	ldr	r0, [r7, #12]
 80046f4:	f000 ff01 	bl	80054fa <UART_WaitOnFlagUntilTimeout>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d001      	beq.n	8004702 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e006      	b.n	8004710 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2220      	movs	r2, #32
 8004706:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800470a:	2300      	movs	r3, #0
 800470c:	e000      	b.n	8004710 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 800470e:	2302      	movs	r3, #2
  }
}
 8004710:	4618      	mov	r0, r3
 8004712:	3720      	adds	r7, #32
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b08a      	sub	sp, #40	; 0x28
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	4613      	mov	r3, r2
 8004724:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800472c:	2b20      	cmp	r3, #32
 800472e:	d137      	bne.n	80047a0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d002      	beq.n	800473c <HAL_UART_Receive_IT+0x24>
 8004736:	88fb      	ldrh	r3, [r7, #6]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d101      	bne.n	8004740 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e030      	b.n	80047a2 <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a18      	ldr	r2, [pc, #96]	; (80047ac <HAL_UART_Receive_IT+0x94>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d01f      	beq.n	8004790 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d018      	beq.n	8004790 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	e853 3f00 	ldrex	r3, [r3]
 800476a:	613b      	str	r3, [r7, #16]
   return(result);
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004772:	627b      	str	r3, [r7, #36]	; 0x24
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	461a      	mov	r2, r3
 800477a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477c:	623b      	str	r3, [r7, #32]
 800477e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004780:	69f9      	ldr	r1, [r7, #28]
 8004782:	6a3a      	ldr	r2, [r7, #32]
 8004784:	e841 2300 	strex	r3, r2, [r1]
 8004788:	61bb      	str	r3, [r7, #24]
   return(result);
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d1e6      	bne.n	800475e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004790:	88fb      	ldrh	r3, [r7, #6]
 8004792:	461a      	mov	r2, r3
 8004794:	68b9      	ldr	r1, [r7, #8]
 8004796:	68f8      	ldr	r0, [r7, #12]
 8004798:	f000 ff78 	bl	800568c <UART_Start_Receive_IT>
 800479c:	4603      	mov	r3, r0
 800479e:	e000      	b.n	80047a2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80047a0:	2302      	movs	r3, #2
  }
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3728      	adds	r7, #40	; 0x28
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	40008000 	.word	0x40008000

080047b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b0ba      	sub	sp, #232	; 0xe8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	69db      	ldr	r3, [r3, #28]
 80047be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80047d6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80047da:	f640 030f 	movw	r3, #2063	; 0x80f
 80047de:	4013      	ands	r3, r2
 80047e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80047e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d11b      	bne.n	8004824 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80047ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047f0:	f003 0320 	and.w	r3, r3, #32
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d015      	beq.n	8004824 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80047f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047fc:	f003 0320 	and.w	r3, r3, #32
 8004800:	2b00      	cmp	r3, #0
 8004802:	d105      	bne.n	8004810 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004804:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800480c:	2b00      	cmp	r3, #0
 800480e:	d009      	beq.n	8004824 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004814:	2b00      	cmp	r3, #0
 8004816:	f000 82e3 	beq.w	8004de0 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	4798      	blx	r3
      }
      return;
 8004822:	e2dd      	b.n	8004de0 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004824:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004828:	2b00      	cmp	r3, #0
 800482a:	f000 8123 	beq.w	8004a74 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800482e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004832:	4b8d      	ldr	r3, [pc, #564]	; (8004a68 <HAL_UART_IRQHandler+0x2b8>)
 8004834:	4013      	ands	r3, r2
 8004836:	2b00      	cmp	r3, #0
 8004838:	d106      	bne.n	8004848 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800483a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800483e:	4b8b      	ldr	r3, [pc, #556]	; (8004a6c <HAL_UART_IRQHandler+0x2bc>)
 8004840:	4013      	ands	r3, r2
 8004842:	2b00      	cmp	r3, #0
 8004844:	f000 8116 	beq.w	8004a74 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004848:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800484c:	f003 0301 	and.w	r3, r3, #1
 8004850:	2b00      	cmp	r3, #0
 8004852:	d011      	beq.n	8004878 <HAL_UART_IRQHandler+0xc8>
 8004854:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800485c:	2b00      	cmp	r3, #0
 800485e:	d00b      	beq.n	8004878 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2201      	movs	r2, #1
 8004866:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800486e:	f043 0201 	orr.w	r2, r3, #1
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800487c:	f003 0302 	and.w	r3, r3, #2
 8004880:	2b00      	cmp	r3, #0
 8004882:	d011      	beq.n	80048a8 <HAL_UART_IRQHandler+0xf8>
 8004884:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004888:	f003 0301 	and.w	r3, r3, #1
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00b      	beq.n	80048a8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2202      	movs	r2, #2
 8004896:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800489e:	f043 0204 	orr.w	r2, r3, #4
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80048a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048ac:	f003 0304 	and.w	r3, r3, #4
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d011      	beq.n	80048d8 <HAL_UART_IRQHandler+0x128>
 80048b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048b8:	f003 0301 	and.w	r3, r3, #1
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d00b      	beq.n	80048d8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2204      	movs	r2, #4
 80048c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ce:	f043 0202 	orr.w	r2, r3, #2
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80048d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048dc:	f003 0308 	and.w	r3, r3, #8
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d017      	beq.n	8004914 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80048e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048e8:	f003 0320 	and.w	r3, r3, #32
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d105      	bne.n	80048fc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80048f0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80048f4:	4b5c      	ldr	r3, [pc, #368]	; (8004a68 <HAL_UART_IRQHandler+0x2b8>)
 80048f6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d00b      	beq.n	8004914 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2208      	movs	r2, #8
 8004902:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800490a:	f043 0208 	orr.w	r2, r3, #8
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004914:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004918:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800491c:	2b00      	cmp	r3, #0
 800491e:	d012      	beq.n	8004946 <HAL_UART_IRQHandler+0x196>
 8004920:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004924:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d00c      	beq.n	8004946 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004934:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800493c:	f043 0220 	orr.w	r2, r3, #32
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800494c:	2b00      	cmp	r3, #0
 800494e:	f000 8249 	beq.w	8004de4 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004956:	f003 0320 	and.w	r3, r3, #32
 800495a:	2b00      	cmp	r3, #0
 800495c:	d013      	beq.n	8004986 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800495e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004962:	f003 0320 	and.w	r3, r3, #32
 8004966:	2b00      	cmp	r3, #0
 8004968:	d105      	bne.n	8004976 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800496a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800496e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d007      	beq.n	8004986 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800497a:	2b00      	cmp	r3, #0
 800497c:	d003      	beq.n	8004986 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800498c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800499a:	2b40      	cmp	r3, #64	; 0x40
 800499c:	d005      	beq.n	80049aa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800499e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80049a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d054      	beq.n	8004a54 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 ff8e 	bl	80058cc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ba:	2b40      	cmp	r3, #64	; 0x40
 80049bc:	d146      	bne.n	8004a4c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	3308      	adds	r3, #8
 80049c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80049cc:	e853 3f00 	ldrex	r3, [r3]
 80049d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80049d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80049d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	3308      	adds	r3, #8
 80049e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80049ea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80049ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80049f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80049fa:	e841 2300 	strex	r3, r2, [r1]
 80049fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004a02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d1d9      	bne.n	80049be <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d017      	beq.n	8004a44 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a1a:	4a15      	ldr	r2, [pc, #84]	; (8004a70 <HAL_UART_IRQHandler+0x2c0>)
 8004a1c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a24:	4618      	mov	r0, r3
 8004a26:	f7fd f868 	bl	8001afa <HAL_DMA_Abort_IT>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d019      	beq.n	8004a64 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8004a3e:	4610      	mov	r0, r2
 8004a40:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a42:	e00f      	b.n	8004a64 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f000 f9e0 	bl	8004e0a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a4a:	e00b      	b.n	8004a64 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 f9dc 	bl	8004e0a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a52:	e007      	b.n	8004a64 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f000 f9d8 	bl	8004e0a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8004a62:	e1bf      	b.n	8004de4 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a64:	bf00      	nop
    return;
 8004a66:	e1bd      	b.n	8004de4 <HAL_UART_IRQHandler+0x634>
 8004a68:	10000001 	.word	0x10000001
 8004a6c:	04000120 	.word	0x04000120
 8004a70:	08005997 	.word	0x08005997

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	f040 8153 	bne.w	8004d24 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a82:	f003 0310 	and.w	r3, r3, #16
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	f000 814c 	beq.w	8004d24 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004a8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a90:	f003 0310 	and.w	r3, r3, #16
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	f000 8145 	beq.w	8004d24 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2210      	movs	r2, #16
 8004aa0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aac:	2b40      	cmp	r3, #64	; 0x40
 8004aae:	f040 80bb 	bne.w	8004c28 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ac0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	f000 818f 	beq.w	8004de8 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004ad0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	f080 8187 	bcs.w	8004de8 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004ae0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0320 	and.w	r3, r3, #32
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	f040 8087 	bne.w	8004c06 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b00:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b04:	e853 3f00 	ldrex	r3, [r3]
 8004b08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004b0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004b22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004b26:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004b2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004b32:	e841 2300 	strex	r3, r2, [r1]
 8004b36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004b3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1da      	bne.n	8004af8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	3308      	adds	r3, #8
 8004b48:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b4c:	e853 3f00 	ldrex	r3, [r3]
 8004b50:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004b52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b54:	f023 0301 	bic.w	r3, r3, #1
 8004b58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	3308      	adds	r3, #8
 8004b62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004b66:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004b6a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b6c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004b6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004b72:	e841 2300 	strex	r3, r2, [r1]
 8004b76:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004b78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1e1      	bne.n	8004b42 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	3308      	adds	r3, #8
 8004b84:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b88:	e853 3f00 	ldrex	r3, [r3]
 8004b8c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004b8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	3308      	adds	r3, #8
 8004b9e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004ba2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004ba4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004ba8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004baa:	e841 2300 	strex	r3, r2, [r1]
 8004bae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004bb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d1e3      	bne.n	8004b7e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2220      	movs	r2, #32
 8004bba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bcc:	e853 3f00 	ldrex	r3, [r3]
 8004bd0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004bd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bd4:	f023 0310 	bic.w	r3, r3, #16
 8004bd8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	461a      	mov	r2, r3
 8004be2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004be6:	65bb      	str	r3, [r7, #88]	; 0x58
 8004be8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004bec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004bee:	e841 2300 	strex	r3, r2, [r1]
 8004bf2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004bf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d1e4      	bne.n	8004bc4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c00:	4618      	mov	r0, r3
 8004c02:	f7fc ff1c 	bl	8001a3e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2202      	movs	r2, #2
 8004c0a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	4619      	mov	r1, r3
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f000 f8fb 	bl	8004e1c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004c26:	e0df      	b.n	8004de8 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	f000 80d1 	beq.w	8004dec <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8004c4a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	f000 80cc 	beq.w	8004dec <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c5c:	e853 3f00 	ldrex	r3, [r3]
 8004c60:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	461a      	mov	r2, r3
 8004c72:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004c76:	647b      	str	r3, [r7, #68]	; 0x44
 8004c78:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c7a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c7e:	e841 2300 	strex	r3, r2, [r1]
 8004c82:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1e4      	bne.n	8004c54 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	3308      	adds	r3, #8
 8004c90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c94:	e853 3f00 	ldrex	r3, [r3]
 8004c98:	623b      	str	r3, [r7, #32]
   return(result);
 8004c9a:	6a3b      	ldr	r3, [r7, #32]
 8004c9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ca0:	f023 0301 	bic.w	r3, r3, #1
 8004ca4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	3308      	adds	r3, #8
 8004cae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004cb2:	633a      	str	r2, [r7, #48]	; 0x30
 8004cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004cb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cba:	e841 2300 	strex	r3, r2, [r1]
 8004cbe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d1e1      	bne.n	8004c8a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2220      	movs	r2, #32
 8004cca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	e853 3f00 	ldrex	r3, [r3]
 8004ce6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f023 0310 	bic.w	r3, r3, #16
 8004cee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004cfc:	61fb      	str	r3, [r7, #28]
 8004cfe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d00:	69b9      	ldr	r1, [r7, #24]
 8004d02:	69fa      	ldr	r2, [r7, #28]
 8004d04:	e841 2300 	strex	r3, r2, [r1]
 8004d08:	617b      	str	r3, [r7, #20]
   return(result);
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d1e4      	bne.n	8004cda <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2202      	movs	r2, #2
 8004d14:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d16:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f000 f87d 	bl	8004e1c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004d22:	e063      	b.n	8004dec <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004d24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d00e      	beq.n	8004d4e <HAL_UART_IRQHandler+0x59e>
 8004d30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d008      	beq.n	8004d4e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004d44:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f001 fb82 	bl	8006450 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004d4c:	e051      	b.n	8004df2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d014      	beq.n	8004d84 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004d5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d105      	bne.n	8004d72 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004d66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d008      	beq.n	8004d84 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d03a      	beq.n	8004df0 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	4798      	blx	r3
    }
    return;
 8004d82:	e035      	b.n	8004df0 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004d84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d009      	beq.n	8004da4 <HAL_UART_IRQHandler+0x5f4>
 8004d90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d003      	beq.n	8004da4 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f000 fe10 	bl	80059c2 <UART_EndTransmit_IT>
    return;
 8004da2:	e026      	b.n	8004df2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004da4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004da8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d009      	beq.n	8004dc4 <HAL_UART_IRQHandler+0x614>
 8004db0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004db4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d003      	beq.n	8004dc4 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f001 fb59 	bl	8006474 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004dc2:	e016      	b.n	8004df2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004dc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d010      	beq.n	8004df2 <HAL_UART_IRQHandler+0x642>
 8004dd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	da0c      	bge.n	8004df2 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f001 fb42 	bl	8006462 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004dde:	e008      	b.n	8004df2 <HAL_UART_IRQHandler+0x642>
      return;
 8004de0:	bf00      	nop
 8004de2:	e006      	b.n	8004df2 <HAL_UART_IRQHandler+0x642>
    return;
 8004de4:	bf00      	nop
 8004de6:	e004      	b.n	8004df2 <HAL_UART_IRQHandler+0x642>
      return;
 8004de8:	bf00      	nop
 8004dea:	e002      	b.n	8004df2 <HAL_UART_IRQHandler+0x642>
      return;
 8004dec:	bf00      	nop
 8004dee:	e000      	b.n	8004df2 <HAL_UART_IRQHandler+0x642>
    return;
 8004df0:	bf00      	nop
  }
}
 8004df2:	37e8      	adds	r7, #232	; 0xe8
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004e00:	bf00      	nop
 8004e02:	370c      	adds	r7, #12
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bc80      	pop	{r7}
 8004e08:	4770      	bx	lr

08004e0a <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	b083      	sub	sp, #12
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004e12:	bf00      	nop
 8004e14:	370c      	adds	r7, #12
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bc80      	pop	{r7}
 8004e1a:	4770      	bx	lr

08004e1c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	460b      	mov	r3, r1
 8004e26:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e28:	bf00      	nop
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bc80      	pop	{r7}
 8004e30:	4770      	bx	lr
	...

08004e34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e38:	b08c      	sub	sp, #48	; 0x30
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	689a      	ldr	r2, [r3, #8]
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	431a      	orrs	r2, r3
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	695b      	ldr	r3, [r3, #20]
 8004e52:	431a      	orrs	r2, r3
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	69db      	ldr	r3, [r3, #28]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	4b94      	ldr	r3, [pc, #592]	; (80050b4 <UART_SetConfig+0x280>)
 8004e64:	4013      	ands	r3, r2
 8004e66:	697a      	ldr	r2, [r7, #20]
 8004e68:	6812      	ldr	r2, [r2, #0]
 8004e6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004e6c:	430b      	orrs	r3, r1
 8004e6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	68da      	ldr	r2, [r3, #12]
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	430a      	orrs	r2, r1
 8004e84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a89      	ldr	r2, [pc, #548]	; (80050b8 <UART_SetConfig+0x284>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d004      	beq.n	8004ea0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	6a1b      	ldr	r3, [r3, #32]
 8004e9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004eaa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004eae:	697a      	ldr	r2, [r7, #20]
 8004eb0:	6812      	ldr	r2, [r2, #0]
 8004eb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004eb4:	430b      	orrs	r3, r1
 8004eb6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ebe:	f023 010f 	bic.w	r1, r3, #15
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a7a      	ldr	r2, [pc, #488]	; (80050bc <UART_SetConfig+0x288>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d127      	bne.n	8004f28 <UART_SetConfig+0xf4>
 8004ed8:	2003      	movs	r0, #3
 8004eda:	f7ff face 	bl	800447a <LL_RCC_GetUSARTClockSource>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8004ee4:	2b03      	cmp	r3, #3
 8004ee6:	d81b      	bhi.n	8004f20 <UART_SetConfig+0xec>
 8004ee8:	a201      	add	r2, pc, #4	; (adr r2, 8004ef0 <UART_SetConfig+0xbc>)
 8004eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eee:	bf00      	nop
 8004ef0:	08004f01 	.word	0x08004f01
 8004ef4:	08004f11 	.word	0x08004f11
 8004ef8:	08004f09 	.word	0x08004f09
 8004efc:	08004f19 	.word	0x08004f19
 8004f00:	2301      	movs	r3, #1
 8004f02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f06:	e080      	b.n	800500a <UART_SetConfig+0x1d6>
 8004f08:	2302      	movs	r3, #2
 8004f0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f0e:	e07c      	b.n	800500a <UART_SetConfig+0x1d6>
 8004f10:	2304      	movs	r3, #4
 8004f12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f16:	e078      	b.n	800500a <UART_SetConfig+0x1d6>
 8004f18:	2308      	movs	r3, #8
 8004f1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f1e:	e074      	b.n	800500a <UART_SetConfig+0x1d6>
 8004f20:	2310      	movs	r3, #16
 8004f22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f26:	e070      	b.n	800500a <UART_SetConfig+0x1d6>
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a64      	ldr	r2, [pc, #400]	; (80050c0 <UART_SetConfig+0x28c>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d138      	bne.n	8004fa4 <UART_SetConfig+0x170>
 8004f32:	200c      	movs	r0, #12
 8004f34:	f7ff faa1 	bl	800447a <LL_RCC_GetUSARTClockSource>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8004f3e:	2b0c      	cmp	r3, #12
 8004f40:	d82c      	bhi.n	8004f9c <UART_SetConfig+0x168>
 8004f42:	a201      	add	r2, pc, #4	; (adr r2, 8004f48 <UART_SetConfig+0x114>)
 8004f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f48:	08004f7d 	.word	0x08004f7d
 8004f4c:	08004f9d 	.word	0x08004f9d
 8004f50:	08004f9d 	.word	0x08004f9d
 8004f54:	08004f9d 	.word	0x08004f9d
 8004f58:	08004f8d 	.word	0x08004f8d
 8004f5c:	08004f9d 	.word	0x08004f9d
 8004f60:	08004f9d 	.word	0x08004f9d
 8004f64:	08004f9d 	.word	0x08004f9d
 8004f68:	08004f85 	.word	0x08004f85
 8004f6c:	08004f9d 	.word	0x08004f9d
 8004f70:	08004f9d 	.word	0x08004f9d
 8004f74:	08004f9d 	.word	0x08004f9d
 8004f78:	08004f95 	.word	0x08004f95
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f82:	e042      	b.n	800500a <UART_SetConfig+0x1d6>
 8004f84:	2302      	movs	r3, #2
 8004f86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f8a:	e03e      	b.n	800500a <UART_SetConfig+0x1d6>
 8004f8c:	2304      	movs	r3, #4
 8004f8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f92:	e03a      	b.n	800500a <UART_SetConfig+0x1d6>
 8004f94:	2308      	movs	r3, #8
 8004f96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004f9a:	e036      	b.n	800500a <UART_SetConfig+0x1d6>
 8004f9c:	2310      	movs	r3, #16
 8004f9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fa2:	e032      	b.n	800500a <UART_SetConfig+0x1d6>
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a43      	ldr	r2, [pc, #268]	; (80050b8 <UART_SetConfig+0x284>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d12a      	bne.n	8005004 <UART_SetConfig+0x1d0>
 8004fae:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8004fb2:	f7ff fa74 	bl	800449e <LL_RCC_GetLPUARTClockSource>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004fbc:	d01a      	beq.n	8004ff4 <UART_SetConfig+0x1c0>
 8004fbe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004fc2:	d81b      	bhi.n	8004ffc <UART_SetConfig+0x1c8>
 8004fc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fc8:	d00c      	beq.n	8004fe4 <UART_SetConfig+0x1b0>
 8004fca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fce:	d815      	bhi.n	8004ffc <UART_SetConfig+0x1c8>
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d003      	beq.n	8004fdc <UART_SetConfig+0x1a8>
 8004fd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fd8:	d008      	beq.n	8004fec <UART_SetConfig+0x1b8>
 8004fda:	e00f      	b.n	8004ffc <UART_SetConfig+0x1c8>
 8004fdc:	2300      	movs	r3, #0
 8004fde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fe2:	e012      	b.n	800500a <UART_SetConfig+0x1d6>
 8004fe4:	2302      	movs	r3, #2
 8004fe6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004fea:	e00e      	b.n	800500a <UART_SetConfig+0x1d6>
 8004fec:	2304      	movs	r3, #4
 8004fee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ff2:	e00a      	b.n	800500a <UART_SetConfig+0x1d6>
 8004ff4:	2308      	movs	r3, #8
 8004ff6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ffa:	e006      	b.n	800500a <UART_SetConfig+0x1d6>
 8004ffc:	2310      	movs	r3, #16
 8004ffe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005002:	e002      	b.n	800500a <UART_SetConfig+0x1d6>
 8005004:	2310      	movs	r3, #16
 8005006:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a2a      	ldr	r2, [pc, #168]	; (80050b8 <UART_SetConfig+0x284>)
 8005010:	4293      	cmp	r3, r2
 8005012:	f040 80a4 	bne.w	800515e <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005016:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800501a:	2b08      	cmp	r3, #8
 800501c:	d823      	bhi.n	8005066 <UART_SetConfig+0x232>
 800501e:	a201      	add	r2, pc, #4	; (adr r2, 8005024 <UART_SetConfig+0x1f0>)
 8005020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005024:	08005049 	.word	0x08005049
 8005028:	08005067 	.word	0x08005067
 800502c:	08005051 	.word	0x08005051
 8005030:	08005067 	.word	0x08005067
 8005034:	08005057 	.word	0x08005057
 8005038:	08005067 	.word	0x08005067
 800503c:	08005067 	.word	0x08005067
 8005040:	08005067 	.word	0x08005067
 8005044:	0800505f 	.word	0x0800505f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005048:	f7fe f856 	bl	80030f8 <HAL_RCC_GetPCLK1Freq>
 800504c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800504e:	e010      	b.n	8005072 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005050:	4b1c      	ldr	r3, [pc, #112]	; (80050c4 <UART_SetConfig+0x290>)
 8005052:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005054:	e00d      	b.n	8005072 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005056:	f7fd ff9b 	bl	8002f90 <HAL_RCC_GetSysClockFreq>
 800505a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800505c:	e009      	b.n	8005072 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800505e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005062:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005064:	e005      	b.n	8005072 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8005066:	2300      	movs	r3, #0
 8005068:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005070:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005074:	2b00      	cmp	r3, #0
 8005076:	f000 8137 	beq.w	80052e8 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507e:	4a12      	ldr	r2, [pc, #72]	; (80050c8 <UART_SetConfig+0x294>)
 8005080:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005084:	461a      	mov	r2, r3
 8005086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005088:	fbb3 f3f2 	udiv	r3, r3, r2
 800508c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	685a      	ldr	r2, [r3, #4]
 8005092:	4613      	mov	r3, r2
 8005094:	005b      	lsls	r3, r3, #1
 8005096:	4413      	add	r3, r2
 8005098:	69ba      	ldr	r2, [r7, #24]
 800509a:	429a      	cmp	r2, r3
 800509c:	d305      	bcc.n	80050aa <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80050a4:	69ba      	ldr	r2, [r7, #24]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d910      	bls.n	80050cc <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80050b0:	e11a      	b.n	80052e8 <UART_SetConfig+0x4b4>
 80050b2:	bf00      	nop
 80050b4:	cfff69f3 	.word	0xcfff69f3
 80050b8:	40008000 	.word	0x40008000
 80050bc:	40013800 	.word	0x40013800
 80050c0:	40004400 	.word	0x40004400
 80050c4:	00f42400 	.word	0x00f42400
 80050c8:	0800aa08 	.word	0x0800aa08
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80050cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ce:	2200      	movs	r2, #0
 80050d0:	60bb      	str	r3, [r7, #8]
 80050d2:	60fa      	str	r2, [r7, #12]
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d8:	4a8e      	ldr	r2, [pc, #568]	; (8005314 <UART_SetConfig+0x4e0>)
 80050da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050de:	b29b      	uxth	r3, r3
 80050e0:	2200      	movs	r2, #0
 80050e2:	603b      	str	r3, [r7, #0]
 80050e4:	607a      	str	r2, [r7, #4]
 80050e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80050ee:	f7fb f89f 	bl	8000230 <__aeabi_uldivmod>
 80050f2:	4602      	mov	r2, r0
 80050f4:	460b      	mov	r3, r1
 80050f6:	4610      	mov	r0, r2
 80050f8:	4619      	mov	r1, r3
 80050fa:	f04f 0200 	mov.w	r2, #0
 80050fe:	f04f 0300 	mov.w	r3, #0
 8005102:	020b      	lsls	r3, r1, #8
 8005104:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005108:	0202      	lsls	r2, r0, #8
 800510a:	6979      	ldr	r1, [r7, #20]
 800510c:	6849      	ldr	r1, [r1, #4]
 800510e:	0849      	lsrs	r1, r1, #1
 8005110:	2000      	movs	r0, #0
 8005112:	460c      	mov	r4, r1
 8005114:	4605      	mov	r5, r0
 8005116:	eb12 0804 	adds.w	r8, r2, r4
 800511a:	eb43 0905 	adc.w	r9, r3, r5
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	469a      	mov	sl, r3
 8005126:	4693      	mov	fp, r2
 8005128:	4652      	mov	r2, sl
 800512a:	465b      	mov	r3, fp
 800512c:	4640      	mov	r0, r8
 800512e:	4649      	mov	r1, r9
 8005130:	f7fb f87e 	bl	8000230 <__aeabi_uldivmod>
 8005134:	4602      	mov	r2, r0
 8005136:	460b      	mov	r3, r1
 8005138:	4613      	mov	r3, r2
 800513a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800513c:	6a3b      	ldr	r3, [r7, #32]
 800513e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005142:	d308      	bcc.n	8005156 <UART_SetConfig+0x322>
 8005144:	6a3b      	ldr	r3, [r7, #32]
 8005146:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800514a:	d204      	bcs.n	8005156 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	6a3a      	ldr	r2, [r7, #32]
 8005152:	60da      	str	r2, [r3, #12]
 8005154:	e0c8      	b.n	80052e8 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800515c:	e0c4      	b.n	80052e8 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	69db      	ldr	r3, [r3, #28]
 8005162:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005166:	d167      	bne.n	8005238 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8005168:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800516c:	2b08      	cmp	r3, #8
 800516e:	d828      	bhi.n	80051c2 <UART_SetConfig+0x38e>
 8005170:	a201      	add	r2, pc, #4	; (adr r2, 8005178 <UART_SetConfig+0x344>)
 8005172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005176:	bf00      	nop
 8005178:	0800519d 	.word	0x0800519d
 800517c:	080051a5 	.word	0x080051a5
 8005180:	080051ad 	.word	0x080051ad
 8005184:	080051c3 	.word	0x080051c3
 8005188:	080051b3 	.word	0x080051b3
 800518c:	080051c3 	.word	0x080051c3
 8005190:	080051c3 	.word	0x080051c3
 8005194:	080051c3 	.word	0x080051c3
 8005198:	080051bb 	.word	0x080051bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800519c:	f7fd ffac 	bl	80030f8 <HAL_RCC_GetPCLK1Freq>
 80051a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80051a2:	e014      	b.n	80051ce <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051a4:	f7fd ffba 	bl	800311c <HAL_RCC_GetPCLK2Freq>
 80051a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80051aa:	e010      	b.n	80051ce <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051ac:	4b5a      	ldr	r3, [pc, #360]	; (8005318 <UART_SetConfig+0x4e4>)
 80051ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80051b0:	e00d      	b.n	80051ce <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051b2:	f7fd feed 	bl	8002f90 <HAL_RCC_GetSysClockFreq>
 80051b6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80051b8:	e009      	b.n	80051ce <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80051c0:	e005      	b.n	80051ce <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 80051c2:	2300      	movs	r3, #0
 80051c4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80051cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80051ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	f000 8089 	beq.w	80052e8 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051da:	4a4e      	ldr	r2, [pc, #312]	; (8005314 <UART_SetConfig+0x4e0>)
 80051dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051e0:	461a      	mov	r2, r3
 80051e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80051e8:	005a      	lsls	r2, r3, #1
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	085b      	lsrs	r3, r3, #1
 80051f0:	441a      	add	r2, r3
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80051fa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051fc:	6a3b      	ldr	r3, [r7, #32]
 80051fe:	2b0f      	cmp	r3, #15
 8005200:	d916      	bls.n	8005230 <UART_SetConfig+0x3fc>
 8005202:	6a3b      	ldr	r3, [r7, #32]
 8005204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005208:	d212      	bcs.n	8005230 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800520a:	6a3b      	ldr	r3, [r7, #32]
 800520c:	b29b      	uxth	r3, r3
 800520e:	f023 030f 	bic.w	r3, r3, #15
 8005212:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005214:	6a3b      	ldr	r3, [r7, #32]
 8005216:	085b      	lsrs	r3, r3, #1
 8005218:	b29b      	uxth	r3, r3
 800521a:	f003 0307 	and.w	r3, r3, #7
 800521e:	b29a      	uxth	r2, r3
 8005220:	8bfb      	ldrh	r3, [r7, #30]
 8005222:	4313      	orrs	r3, r2
 8005224:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	8bfa      	ldrh	r2, [r7, #30]
 800522c:	60da      	str	r2, [r3, #12]
 800522e:	e05b      	b.n	80052e8 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005236:	e057      	b.n	80052e8 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005238:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800523c:	2b08      	cmp	r3, #8
 800523e:	d828      	bhi.n	8005292 <UART_SetConfig+0x45e>
 8005240:	a201      	add	r2, pc, #4	; (adr r2, 8005248 <UART_SetConfig+0x414>)
 8005242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005246:	bf00      	nop
 8005248:	0800526d 	.word	0x0800526d
 800524c:	08005275 	.word	0x08005275
 8005250:	0800527d 	.word	0x0800527d
 8005254:	08005293 	.word	0x08005293
 8005258:	08005283 	.word	0x08005283
 800525c:	08005293 	.word	0x08005293
 8005260:	08005293 	.word	0x08005293
 8005264:	08005293 	.word	0x08005293
 8005268:	0800528b 	.word	0x0800528b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800526c:	f7fd ff44 	bl	80030f8 <HAL_RCC_GetPCLK1Freq>
 8005270:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005272:	e014      	b.n	800529e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005274:	f7fd ff52 	bl	800311c <HAL_RCC_GetPCLK2Freq>
 8005278:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800527a:	e010      	b.n	800529e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800527c:	4b26      	ldr	r3, [pc, #152]	; (8005318 <UART_SetConfig+0x4e4>)
 800527e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005280:	e00d      	b.n	800529e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005282:	f7fd fe85 	bl	8002f90 <HAL_RCC_GetSysClockFreq>
 8005286:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005288:	e009      	b.n	800529e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800528a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800528e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005290:	e005      	b.n	800529e <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8005292:	2300      	movs	r3, #0
 8005294:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800529c:	bf00      	nop
    }

    if (pclk != 0U)
 800529e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d021      	beq.n	80052e8 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a8:	4a1a      	ldr	r2, [pc, #104]	; (8005314 <UART_SetConfig+0x4e0>)
 80052aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052ae:	461a      	mov	r2, r3
 80052b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	085b      	lsrs	r3, r3, #1
 80052bc:	441a      	add	r2, r3
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80052c6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052c8:	6a3b      	ldr	r3, [r7, #32]
 80052ca:	2b0f      	cmp	r3, #15
 80052cc:	d909      	bls.n	80052e2 <UART_SetConfig+0x4ae>
 80052ce:	6a3b      	ldr	r3, [r7, #32]
 80052d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052d4:	d205      	bcs.n	80052e2 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80052d6:	6a3b      	ldr	r3, [r7, #32]
 80052d8:	b29a      	uxth	r2, r3
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	60da      	str	r2, [r3, #12]
 80052e0:	e002      	b.n	80052e8 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	2200      	movs	r2, #0
 80052fc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	2200      	movs	r2, #0
 8005302:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005304:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005308:	4618      	mov	r0, r3
 800530a:	3730      	adds	r7, #48	; 0x30
 800530c:	46bd      	mov	sp, r7
 800530e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005312:	bf00      	nop
 8005314:	0800aa08 	.word	0x0800aa08
 8005318:	00f42400 	.word	0x00f42400

0800531c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005328:	f003 0301 	and.w	r3, r3, #1
 800532c:	2b00      	cmp	r3, #0
 800532e:	d00a      	beq.n	8005346 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	430a      	orrs	r2, r1
 8005344:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800534a:	f003 0302 	and.w	r3, r3, #2
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00a      	beq.n	8005368 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	430a      	orrs	r2, r1
 8005366:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800536c:	f003 0304 	and.w	r3, r3, #4
 8005370:	2b00      	cmp	r3, #0
 8005372:	d00a      	beq.n	800538a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	430a      	orrs	r2, r1
 8005388:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800538e:	f003 0308 	and.w	r3, r3, #8
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00a      	beq.n	80053ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	430a      	orrs	r2, r1
 80053aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b0:	f003 0310 	and.w	r3, r3, #16
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d00a      	beq.n	80053ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	430a      	orrs	r2, r1
 80053cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053d2:	f003 0320 	and.w	r3, r3, #32
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00a      	beq.n	80053f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	430a      	orrs	r2, r1
 80053ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d01a      	beq.n	8005432 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	430a      	orrs	r2, r1
 8005410:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005416:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800541a:	d10a      	bne.n	8005432 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	430a      	orrs	r2, r1
 8005430:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00a      	beq.n	8005454 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	430a      	orrs	r2, r1
 8005452:	605a      	str	r2, [r3, #4]
  }
}
 8005454:	bf00      	nop
 8005456:	370c      	adds	r7, #12
 8005458:	46bd      	mov	sp, r7
 800545a:	bc80      	pop	{r7}
 800545c:	4770      	bx	lr

0800545e <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800545e:	b580      	push	{r7, lr}
 8005460:	b086      	sub	sp, #24
 8005462:	af02      	add	r7, sp, #8
 8005464:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800546e:	f7fb ffeb 	bl	8001448 <HAL_GetTick>
 8005472:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0308 	and.w	r3, r3, #8
 800547e:	2b08      	cmp	r3, #8
 8005480:	d10e      	bne.n	80054a0 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005482:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005486:	9300      	str	r3, [sp, #0]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2200      	movs	r2, #0
 800548c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f000 f832 	bl	80054fa <UART_WaitOnFlagUntilTimeout>
 8005496:	4603      	mov	r3, r0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d001      	beq.n	80054a0 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800549c:	2303      	movs	r3, #3
 800549e:	e028      	b.n	80054f2 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 0304 	and.w	r3, r3, #4
 80054aa:	2b04      	cmp	r3, #4
 80054ac:	d10e      	bne.n	80054cc <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054ae:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054b2:	9300      	str	r3, [sp, #0]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f000 f81c 	bl	80054fa <UART_WaitOnFlagUntilTimeout>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d001      	beq.n	80054cc <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054c8:	2303      	movs	r3, #3
 80054ca:	e012      	b.n	80054f2 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2220      	movs	r2, #32
 80054d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2220      	movs	r2, #32
 80054d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2200      	movs	r2, #0
 80054ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80054f0:	2300      	movs	r3, #0
}
 80054f2:	4618      	mov	r0, r3
 80054f4:	3710      	adds	r7, #16
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}

080054fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80054fa:	b580      	push	{r7, lr}
 80054fc:	b09c      	sub	sp, #112	; 0x70
 80054fe:	af00      	add	r7, sp, #0
 8005500:	60f8      	str	r0, [r7, #12]
 8005502:	60b9      	str	r1, [r7, #8]
 8005504:	603b      	str	r3, [r7, #0]
 8005506:	4613      	mov	r3, r2
 8005508:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800550a:	e0a9      	b.n	8005660 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800550c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800550e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005512:	f000 80a5 	beq.w	8005660 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005516:	f7fb ff97 	bl	8001448 <HAL_GetTick>
 800551a:	4602      	mov	r2, r0
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	1ad3      	subs	r3, r2, r3
 8005520:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005522:	429a      	cmp	r2, r3
 8005524:	d302      	bcc.n	800552c <UART_WaitOnFlagUntilTimeout+0x32>
 8005526:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005528:	2b00      	cmp	r3, #0
 800552a:	d140      	bne.n	80055ae <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005532:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005534:	e853 3f00 	ldrex	r3, [r3]
 8005538:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800553a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800553c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005540:	667b      	str	r3, [r7, #100]	; 0x64
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	461a      	mov	r2, r3
 8005548:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800554a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800554c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800554e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005550:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005552:	e841 2300 	strex	r3, r2, [r1]
 8005556:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005558:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800555a:	2b00      	cmp	r3, #0
 800555c:	d1e6      	bne.n	800552c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	3308      	adds	r3, #8
 8005564:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005566:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005568:	e853 3f00 	ldrex	r3, [r3]
 800556c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800556e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005570:	f023 0301 	bic.w	r3, r3, #1
 8005574:	663b      	str	r3, [r7, #96]	; 0x60
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	3308      	adds	r3, #8
 800557c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800557e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005580:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005582:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005584:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005586:	e841 2300 	strex	r3, r2, [r1]
 800558a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800558c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800558e:	2b00      	cmp	r3, #0
 8005590:	d1e5      	bne.n	800555e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2220      	movs	r2, #32
 8005596:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2220      	movs	r2, #32
 800559e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 80055aa:	2303      	movs	r3, #3
 80055ac:	e069      	b.n	8005682 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 0304 	and.w	r3, r3, #4
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d051      	beq.n	8005660 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	69db      	ldr	r3, [r3, #28]
 80055c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055ca:	d149      	bne.n	8005660 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055d4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055de:	e853 3f00 	ldrex	r3, [r3]
 80055e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80055ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	461a      	mov	r2, r3
 80055f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055f4:	637b      	str	r3, [r7, #52]	; 0x34
 80055f6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80055fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055fc:	e841 2300 	strex	r3, r2, [r1]
 8005600:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005604:	2b00      	cmp	r3, #0
 8005606:	d1e6      	bne.n	80055d6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	3308      	adds	r3, #8
 800560e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	e853 3f00 	ldrex	r3, [r3]
 8005616:	613b      	str	r3, [r7, #16]
   return(result);
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	f023 0301 	bic.w	r3, r3, #1
 800561e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	3308      	adds	r3, #8
 8005626:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005628:	623a      	str	r2, [r7, #32]
 800562a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562c:	69f9      	ldr	r1, [r7, #28]
 800562e:	6a3a      	ldr	r2, [r7, #32]
 8005630:	e841 2300 	strex	r3, r2, [r1]
 8005634:	61bb      	str	r3, [r7, #24]
   return(result);
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d1e5      	bne.n	8005608 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2220      	movs	r2, #32
 8005640:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2220      	movs	r2, #32
 8005648:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2220      	movs	r2, #32
 8005650:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2200      	movs	r2, #0
 8005658:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	e010      	b.n	8005682 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	69da      	ldr	r2, [r3, #28]
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	4013      	ands	r3, r2
 800566a:	68ba      	ldr	r2, [r7, #8]
 800566c:	429a      	cmp	r2, r3
 800566e:	bf0c      	ite	eq
 8005670:	2301      	moveq	r3, #1
 8005672:	2300      	movne	r3, #0
 8005674:	b2db      	uxtb	r3, r3
 8005676:	461a      	mov	r2, r3
 8005678:	79fb      	ldrb	r3, [r7, #7]
 800567a:	429a      	cmp	r2, r3
 800567c:	f43f af46 	beq.w	800550c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005680:	2300      	movs	r3, #0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3770      	adds	r7, #112	; 0x70
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
	...

0800568c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800568c:	b480      	push	{r7}
 800568e:	b0a3      	sub	sp, #140	; 0x8c
 8005690:	af00      	add	r7, sp, #0
 8005692:	60f8      	str	r0, [r7, #12]
 8005694:	60b9      	str	r1, [r7, #8]
 8005696:	4613      	mov	r3, r2
 8005698:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	68ba      	ldr	r2, [r7, #8]
 800569e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	88fa      	ldrh	r2, [r7, #6]
 80056a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	88fa      	ldrh	r2, [r7, #6]
 80056ac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2200      	movs	r2, #0
 80056b4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056be:	d10e      	bne.n	80056de <UART_Start_Receive_IT+0x52>
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d105      	bne.n	80056d4 <UART_Start_Receive_IT+0x48>
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f240 12ff 	movw	r2, #511	; 0x1ff
 80056ce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80056d2:	e02d      	b.n	8005730 <UART_Start_Receive_IT+0xa4>
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	22ff      	movs	r2, #255	; 0xff
 80056d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80056dc:	e028      	b.n	8005730 <UART_Start_Receive_IT+0xa4>
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d10d      	bne.n	8005702 <UART_Start_Receive_IT+0x76>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d104      	bne.n	80056f8 <UART_Start_Receive_IT+0x6c>
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	22ff      	movs	r2, #255	; 0xff
 80056f2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80056f6:	e01b      	b.n	8005730 <UART_Start_Receive_IT+0xa4>
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	227f      	movs	r2, #127	; 0x7f
 80056fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005700:	e016      	b.n	8005730 <UART_Start_Receive_IT+0xa4>
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800570a:	d10d      	bne.n	8005728 <UART_Start_Receive_IT+0x9c>
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	691b      	ldr	r3, [r3, #16]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d104      	bne.n	800571e <UART_Start_Receive_IT+0x92>
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	227f      	movs	r2, #127	; 0x7f
 8005718:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800571c:	e008      	b.n	8005730 <UART_Start_Receive_IT+0xa4>
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	223f      	movs	r2, #63	; 0x3f
 8005722:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005726:	e003      	b.n	8005730 <UART_Start_Receive_IT+0xa4>
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	2200      	movs	r2, #0
 800572c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	2200      	movs	r2, #0
 8005734:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	2222      	movs	r2, #34	; 0x22
 800573c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	3308      	adds	r3, #8
 8005746:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005748:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800574a:	e853 3f00 	ldrex	r3, [r3]
 800574e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005750:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005752:	f043 0301 	orr.w	r3, r3, #1
 8005756:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	3308      	adds	r3, #8
 8005760:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005764:	673a      	str	r2, [r7, #112]	; 0x70
 8005766:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005768:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800576a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800576c:	e841 2300 	strex	r3, r2, [r1]
 8005770:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8005772:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005774:	2b00      	cmp	r3, #0
 8005776:	d1e3      	bne.n	8005740 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800577c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005780:	d14f      	bne.n	8005822 <UART_Start_Receive_IT+0x196>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005788:	88fa      	ldrh	r2, [r7, #6]
 800578a:	429a      	cmp	r2, r3
 800578c:	d349      	bcc.n	8005822 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005796:	d107      	bne.n	80057a8 <UART_Start_Receive_IT+0x11c>
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d103      	bne.n	80057a8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	4a46      	ldr	r2, [pc, #280]	; (80058bc <UART_Start_Receive_IT+0x230>)
 80057a4:	675a      	str	r2, [r3, #116]	; 0x74
 80057a6:	e002      	b.n	80057ae <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	4a45      	ldr	r2, [pc, #276]	; (80058c0 <UART_Start_Receive_IT+0x234>)
 80057ac:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d01a      	beq.n	80057ec <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057be:	e853 3f00 	ldrex	r3, [r3]
 80057c2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80057c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	461a      	mov	r2, r3
 80057d4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80057d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057da:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057dc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80057de:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80057e0:	e841 2300 	strex	r3, r2, [r1]
 80057e4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80057e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d1e4      	bne.n	80057b6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	3308      	adds	r3, #8
 80057f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057f6:	e853 3f00 	ldrex	r3, [r3]
 80057fa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80057fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005802:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	3308      	adds	r3, #8
 800580a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800580c:	64ba      	str	r2, [r7, #72]	; 0x48
 800580e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005810:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005812:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005814:	e841 2300 	strex	r3, r2, [r1]
 8005818:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800581a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800581c:	2b00      	cmp	r3, #0
 800581e:	d1e5      	bne.n	80057ec <UART_Start_Receive_IT+0x160>
 8005820:	e046      	b.n	80058b0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800582a:	d107      	bne.n	800583c <UART_Start_Receive_IT+0x1b0>
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	691b      	ldr	r3, [r3, #16]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d103      	bne.n	800583c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	4a23      	ldr	r2, [pc, #140]	; (80058c4 <UART_Start_Receive_IT+0x238>)
 8005838:	675a      	str	r2, [r3, #116]	; 0x74
 800583a:	e002      	b.n	8005842 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	4a22      	ldr	r2, [pc, #136]	; (80058c8 <UART_Start_Receive_IT+0x23c>)
 8005840:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d019      	beq.n	800587e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005852:	e853 3f00 	ldrex	r3, [r3]
 8005856:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800585e:	677b      	str	r3, [r7, #116]	; 0x74
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	461a      	mov	r2, r3
 8005866:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005868:	637b      	str	r3, [r7, #52]	; 0x34
 800586a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800586c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800586e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005870:	e841 2300 	strex	r3, r2, [r1]
 8005874:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005878:	2b00      	cmp	r3, #0
 800587a:	d1e6      	bne.n	800584a <UART_Start_Receive_IT+0x1be>
 800587c:	e018      	b.n	80058b0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	e853 3f00 	ldrex	r3, [r3]
 800588a:	613b      	str	r3, [r7, #16]
   return(result);
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	f043 0320 	orr.w	r3, r3, #32
 8005892:	67bb      	str	r3, [r7, #120]	; 0x78
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	461a      	mov	r2, r3
 800589a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800589c:	623b      	str	r3, [r7, #32]
 800589e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a0:	69f9      	ldr	r1, [r7, #28]
 80058a2:	6a3a      	ldr	r2, [r7, #32]
 80058a4:	e841 2300 	strex	r3, r2, [r1]
 80058a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80058aa:	69bb      	ldr	r3, [r7, #24]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d1e6      	bne.n	800587e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80058b0:	2300      	movs	r3, #0
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	378c      	adds	r7, #140	; 0x8c
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bc80      	pop	{r7}
 80058ba:	4770      	bx	lr
 80058bc:	080060e9 	.word	0x080060e9
 80058c0:	08005d89 	.word	0x08005d89
 80058c4:	08005bd1 	.word	0x08005bd1
 80058c8:	08005a19 	.word	0x08005a19

080058cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b095      	sub	sp, #84	; 0x54
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058dc:	e853 3f00 	ldrex	r3, [r3]
 80058e0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80058e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80058e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	461a      	mov	r2, r3
 80058f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058f2:	643b      	str	r3, [r7, #64]	; 0x40
 80058f4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80058f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80058fa:	e841 2300 	strex	r3, r2, [r1]
 80058fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005902:	2b00      	cmp	r3, #0
 8005904:	d1e6      	bne.n	80058d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	3308      	adds	r3, #8
 800590c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800590e:	6a3b      	ldr	r3, [r7, #32]
 8005910:	e853 3f00 	ldrex	r3, [r3]
 8005914:	61fb      	str	r3, [r7, #28]
   return(result);
 8005916:	69fb      	ldr	r3, [r7, #28]
 8005918:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800591c:	f023 0301 	bic.w	r3, r3, #1
 8005920:	64bb      	str	r3, [r7, #72]	; 0x48
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	3308      	adds	r3, #8
 8005928:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800592a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800592c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800592e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005930:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005932:	e841 2300 	strex	r3, r2, [r1]
 8005936:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593a:	2b00      	cmp	r3, #0
 800593c:	d1e3      	bne.n	8005906 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005942:	2b01      	cmp	r3, #1
 8005944:	d118      	bne.n	8005978 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	e853 3f00 	ldrex	r3, [r3]
 8005952:	60bb      	str	r3, [r7, #8]
   return(result);
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	f023 0310 	bic.w	r3, r3, #16
 800595a:	647b      	str	r3, [r7, #68]	; 0x44
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	461a      	mov	r2, r3
 8005962:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005964:	61bb      	str	r3, [r7, #24]
 8005966:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005968:	6979      	ldr	r1, [r7, #20]
 800596a:	69ba      	ldr	r2, [r7, #24]
 800596c:	e841 2300 	strex	r3, r2, [r1]
 8005970:	613b      	str	r3, [r7, #16]
   return(result);
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d1e6      	bne.n	8005946 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2220      	movs	r2, #32
 800597c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2200      	movs	r2, #0
 8005984:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800598c:	bf00      	nop
 800598e:	3754      	adds	r7, #84	; 0x54
 8005990:	46bd      	mov	sp, r7
 8005992:	bc80      	pop	{r7}
 8005994:	4770      	bx	lr

08005996 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005996:	b580      	push	{r7, lr}
 8005998:	b084      	sub	sp, #16
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2200      	movs	r2, #0
 80059a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2200      	movs	r2, #0
 80059b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059b4:	68f8      	ldr	r0, [r7, #12]
 80059b6:	f7ff fa28 	bl	8004e0a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059ba:	bf00      	nop
 80059bc:	3710      	adds	r7, #16
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}

080059c2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80059c2:	b580      	push	{r7, lr}
 80059c4:	b088      	sub	sp, #32
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	e853 3f00 	ldrex	r3, [r3]
 80059d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059de:	61fb      	str	r3, [r7, #28]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	461a      	mov	r2, r3
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	61bb      	str	r3, [r7, #24]
 80059ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ec:	6979      	ldr	r1, [r7, #20]
 80059ee:	69ba      	ldr	r2, [r7, #24]
 80059f0:	e841 2300 	strex	r3, r2, [r1]
 80059f4:	613b      	str	r3, [r7, #16]
   return(result);
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d1e6      	bne.n	80059ca <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2220      	movs	r2, #32
 8005a00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f7ff f9f4 	bl	8004df8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a10:	bf00      	nop
 8005a12:	3720      	adds	r7, #32
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b09c      	sub	sp, #112	; 0x70
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005a26:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a30:	2b22      	cmp	r3, #34	; 0x22
 8005a32:	f040 80be 	bne.w	8005bb2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005a40:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005a44:	b2d9      	uxtb	r1, r3
 8005a46:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005a4a:	b2da      	uxtb	r2, r3
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a50:	400a      	ands	r2, r1
 8005a52:	b2d2      	uxtb	r2, r2
 8005a54:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a5a:	1c5a      	adds	r2, r3, #1
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005a66:	b29b      	uxth	r3, r3
 8005a68:	3b01      	subs	r3, #1
 8005a6a:	b29a      	uxth	r2, r3
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	f040 80a1 	bne.w	8005bc2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a88:	e853 3f00 	ldrex	r3, [r3]
 8005a8c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005a8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a94:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	461a      	mov	r2, r3
 8005a9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a9e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005aa0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005aa4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005aa6:	e841 2300 	strex	r3, r2, [r1]
 8005aaa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005aac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d1e6      	bne.n	8005a80 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	3308      	adds	r3, #8
 8005ab8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005abc:	e853 3f00 	ldrex	r3, [r3]
 8005ac0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ac4:	f023 0301 	bic.w	r3, r3, #1
 8005ac8:	667b      	str	r3, [r7, #100]	; 0x64
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	3308      	adds	r3, #8
 8005ad0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005ad2:	647a      	str	r2, [r7, #68]	; 0x44
 8005ad4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ad8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ada:	e841 2300 	strex	r3, r2, [r1]
 8005ade:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005ae0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d1e5      	bne.n	8005ab2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2220      	movs	r2, #32
 8005aea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2200      	movs	r2, #0
 8005af2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a33      	ldr	r2, [pc, #204]	; (8005bcc <UART_RxISR_8BIT+0x1b4>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d01f      	beq.n	8005b44 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d018      	beq.n	8005b44 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1a:	e853 3f00 	ldrex	r3, [r3]
 8005b1e:	623b      	str	r3, [r7, #32]
   return(result);
 8005b20:	6a3b      	ldr	r3, [r7, #32]
 8005b22:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005b26:	663b      	str	r3, [r7, #96]	; 0x60
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b30:	633b      	str	r3, [r7, #48]	; 0x30
 8005b32:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b34:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b38:	e841 2300 	strex	r3, r2, [r1]
 8005b3c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d1e6      	bne.n	8005b12 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d12e      	bne.n	8005baa <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	e853 3f00 	ldrex	r3, [r3]
 8005b5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f023 0310 	bic.w	r3, r3, #16
 8005b66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b70:	61fb      	str	r3, [r7, #28]
 8005b72:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b74:	69b9      	ldr	r1, [r7, #24]
 8005b76:	69fa      	ldr	r2, [r7, #28]
 8005b78:	e841 2300 	strex	r3, r2, [r1]
 8005b7c:	617b      	str	r3, [r7, #20]
   return(result);
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d1e6      	bne.n	8005b52 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	69db      	ldr	r3, [r3, #28]
 8005b8a:	f003 0310 	and.w	r3, r3, #16
 8005b8e:	2b10      	cmp	r3, #16
 8005b90:	d103      	bne.n	8005b9a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2210      	movs	r2, #16
 8005b98:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f7ff f93a 	bl	8004e1c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005ba8:	e00b      	b.n	8005bc2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 fe4a 	bl	8006844 <HAL_UART_RxCpltCallback>
}
 8005bb0:	e007      	b.n	8005bc2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	699a      	ldr	r2, [r3, #24]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f042 0208 	orr.w	r2, r2, #8
 8005bc0:	619a      	str	r2, [r3, #24]
}
 8005bc2:	bf00      	nop
 8005bc4:	3770      	adds	r7, #112	; 0x70
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	40008000 	.word	0x40008000

08005bd0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b09c      	sub	sp, #112	; 0x70
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005bde:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005be8:	2b22      	cmp	r3, #34	; 0x22
 8005bea:	f040 80be 	bne.w	8005d6a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bfc:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005bfe:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8005c02:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005c06:	4013      	ands	r3, r2
 8005c08:	b29a      	uxth	r2, r3
 8005c0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c0c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c12:	1c9a      	adds	r2, r3, #2
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	3b01      	subs	r3, #1
 8005c22:	b29a      	uxth	r2, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	f040 80a1 	bne.w	8005d7a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c40:	e853 3f00 	ldrex	r3, [r3]
 8005c44:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005c46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c4c:	667b      	str	r3, [r7, #100]	; 0x64
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	461a      	mov	r2, r3
 8005c54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c56:	657b      	str	r3, [r7, #84]	; 0x54
 8005c58:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c5a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005c5c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005c5e:	e841 2300 	strex	r3, r2, [r1]
 8005c62:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005c64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d1e6      	bne.n	8005c38 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	3308      	adds	r3, #8
 8005c70:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c74:	e853 3f00 	ldrex	r3, [r3]
 8005c78:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c7c:	f023 0301 	bic.w	r3, r3, #1
 8005c80:	663b      	str	r3, [r7, #96]	; 0x60
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	3308      	adds	r3, #8
 8005c88:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005c8a:	643a      	str	r2, [r7, #64]	; 0x40
 8005c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c8e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c90:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c92:	e841 2300 	strex	r3, r2, [r1]
 8005c96:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d1e5      	bne.n	8005c6a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2220      	movs	r2, #32
 8005ca2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a33      	ldr	r2, [pc, #204]	; (8005d84 <UART_RxISR_16BIT+0x1b4>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d01f      	beq.n	8005cfc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d018      	beq.n	8005cfc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd0:	6a3b      	ldr	r3, [r7, #32]
 8005cd2:	e853 3f00 	ldrex	r3, [r3]
 8005cd6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cd8:	69fb      	ldr	r3, [r7, #28]
 8005cda:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005cde:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cea:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cf0:	e841 2300 	strex	r3, r2, [r1]
 8005cf4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d1e6      	bne.n	8005cca <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d12e      	bne.n	8005d62 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	e853 3f00 	ldrex	r3, [r3]
 8005d16:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	f023 0310 	bic.w	r3, r3, #16
 8005d1e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	461a      	mov	r2, r3
 8005d26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d28:	61bb      	str	r3, [r7, #24]
 8005d2a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d2c:	6979      	ldr	r1, [r7, #20]
 8005d2e:	69ba      	ldr	r2, [r7, #24]
 8005d30:	e841 2300 	strex	r3, r2, [r1]
 8005d34:	613b      	str	r3, [r7, #16]
   return(result);
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d1e6      	bne.n	8005d0a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	69db      	ldr	r3, [r3, #28]
 8005d42:	f003 0310 	and.w	r3, r3, #16
 8005d46:	2b10      	cmp	r3, #16
 8005d48:	d103      	bne.n	8005d52 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2210      	movs	r2, #16
 8005d50:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005d58:	4619      	mov	r1, r3
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f7ff f85e 	bl	8004e1c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005d60:	e00b      	b.n	8005d7a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 fd6e 	bl	8006844 <HAL_UART_RxCpltCallback>
}
 8005d68:	e007      	b.n	8005d7a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	699a      	ldr	r2, [r3, #24]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f042 0208 	orr.w	r2, r2, #8
 8005d78:	619a      	str	r2, [r3, #24]
}
 8005d7a:	bf00      	nop
 8005d7c:	3770      	adds	r7, #112	; 0x70
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	40008000 	.word	0x40008000

08005d88 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b0ac      	sub	sp, #176	; 0xb0
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005d96:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	69db      	ldr	r3, [r3, #28]
 8005da0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005dbe:	2b22      	cmp	r3, #34	; 0x22
 8005dc0:	f040 8182 	bne.w	80060c8 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005dca:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005dce:	e125      	b.n	800601c <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd6:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005dda:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8005dde:	b2d9      	uxtb	r1, r3
 8005de0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005de4:	b2da      	uxtb	r2, r3
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dea:	400a      	ands	r2, r1
 8005dec:	b2d2      	uxtb	r2, r2
 8005dee:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005df4:	1c5a      	adds	r2, r3, #1
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	3b01      	subs	r3, #1
 8005e04:	b29a      	uxth	r2, r3
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	69db      	ldr	r3, [r3, #28]
 8005e12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005e16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e1a:	f003 0307 	and.w	r3, r3, #7
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d053      	beq.n	8005eca <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e26:	f003 0301 	and.w	r3, r3, #1
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d011      	beq.n	8005e52 <UART_RxISR_8BIT_FIFOEN+0xca>
 8005e2e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d00b      	beq.n	8005e52 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	2201      	movs	r2, #1
 8005e40:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e48:	f043 0201 	orr.w	r2, r3, #1
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e56:	f003 0302 	and.w	r3, r3, #2
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d011      	beq.n	8005e82 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8005e5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005e62:	f003 0301 	and.w	r3, r3, #1
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d00b      	beq.n	8005e82 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2202      	movs	r2, #2
 8005e70:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e78:	f043 0204 	orr.w	r2, r3, #4
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e86:	f003 0304 	and.w	r3, r3, #4
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d011      	beq.n	8005eb2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8005e8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005e92:	f003 0301 	and.w	r3, r3, #1
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d00b      	beq.n	8005eb2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2204      	movs	r2, #4
 8005ea0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ea8:	f043 0202 	orr.w	r2, r3, #2
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d006      	beq.n	8005eca <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f7fe ffa4 	bl	8004e0a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	f040 80a2 	bne.w	800601c <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ede:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ee0:	e853 3f00 	ldrex	r3, [r3]
 8005ee4:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8005ee6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ee8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005eec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005efa:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005efc:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005efe:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8005f00:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005f02:	e841 2300 	strex	r3, r2, [r1]
 8005f06:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8005f08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d1e4      	bne.n	8005ed8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	3308      	adds	r3, #8
 8005f14:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f18:	e853 3f00 	ldrex	r3, [r3]
 8005f1c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8005f1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f24:	f023 0301 	bic.w	r3, r3, #1
 8005f28:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	3308      	adds	r3, #8
 8005f32:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005f36:	66ba      	str	r2, [r7, #104]	; 0x68
 8005f38:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f3a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8005f3c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005f3e:	e841 2300 	strex	r3, r2, [r1]
 8005f42:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005f44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d1e1      	bne.n	8005f0e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2220      	movs	r2, #32
 8005f4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a5f      	ldr	r2, [pc, #380]	; (80060e0 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d021      	beq.n	8005fac <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d01a      	beq.n	8005fac <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f7e:	e853 3f00 	ldrex	r3, [r3]
 8005f82:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005f84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f86:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005f8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	461a      	mov	r2, r3
 8005f94:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005f98:	657b      	str	r3, [r7, #84]	; 0x54
 8005f9a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005f9e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005fa0:	e841 2300 	strex	r3, r2, [r1]
 8005fa4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005fa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d1e4      	bne.n	8005f76 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d130      	bne.n	8006016 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fc2:	e853 3f00 	ldrex	r3, [r3]
 8005fc6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fca:	f023 0310 	bic.w	r3, r3, #16
 8005fce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005fdc:	643b      	str	r3, [r7, #64]	; 0x40
 8005fde:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005fe2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005fe4:	e841 2300 	strex	r3, r2, [r1]
 8005fe8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d1e4      	bne.n	8005fba <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	69db      	ldr	r3, [r3, #28]
 8005ff6:	f003 0310 	and.w	r3, r3, #16
 8005ffa:	2b10      	cmp	r3, #16
 8005ffc:	d103      	bne.n	8006006 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2210      	movs	r2, #16
 8006004:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800600c:	4619      	mov	r1, r3
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f7fe ff04 	bl	8004e1c <HAL_UARTEx_RxEventCallback>
 8006014:	e002      	b.n	800601c <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 fc14 	bl	8006844 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800601c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8006020:	2b00      	cmp	r3, #0
 8006022:	d006      	beq.n	8006032 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8006024:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006028:	f003 0320 	and.w	r3, r3, #32
 800602c:	2b00      	cmp	r3, #0
 800602e:	f47f aecf 	bne.w	8005dd0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006038:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800603c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006040:	2b00      	cmp	r3, #0
 8006042:	d049      	beq.n	80060d8 <UART_RxISR_8BIT_FIFOEN+0x350>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800604a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800604e:	429a      	cmp	r2, r3
 8006050:	d242      	bcs.n	80060d8 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	3308      	adds	r3, #8
 8006058:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800605a:	6a3b      	ldr	r3, [r7, #32]
 800605c:	e853 3f00 	ldrex	r3, [r3]
 8006060:	61fb      	str	r3, [r7, #28]
   return(result);
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006068:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	3308      	adds	r3, #8
 8006072:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006076:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006078:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800607a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800607c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800607e:	e841 2300 	strex	r3, r2, [r1]
 8006082:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006086:	2b00      	cmp	r3, #0
 8006088:	d1e3      	bne.n	8006052 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a15      	ldr	r2, [pc, #84]	; (80060e4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800608e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	e853 3f00 	ldrex	r3, [r3]
 800609c:	60bb      	str	r3, [r7, #8]
   return(result);
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	f043 0320 	orr.w	r3, r3, #32
 80060a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	461a      	mov	r2, r3
 80060ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80060b2:	61bb      	str	r3, [r7, #24]
 80060b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b6:	6979      	ldr	r1, [r7, #20]
 80060b8:	69ba      	ldr	r2, [r7, #24]
 80060ba:	e841 2300 	strex	r3, r2, [r1]
 80060be:	613b      	str	r3, [r7, #16]
   return(result);
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1e4      	bne.n	8006090 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80060c6:	e007      	b.n	80060d8 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	699a      	ldr	r2, [r3, #24]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f042 0208 	orr.w	r2, r2, #8
 80060d6:	619a      	str	r2, [r3, #24]
}
 80060d8:	bf00      	nop
 80060da:	37b0      	adds	r7, #176	; 0xb0
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	40008000 	.word	0x40008000
 80060e4:	08005a19 	.word	0x08005a19

080060e8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b0ae      	sub	sp, #184	; 0xb8
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80060f6:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	69db      	ldr	r3, [r3, #28]
 8006100:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800611e:	2b22      	cmp	r3, #34	; 0x22
 8006120:	f040 8186 	bne.w	8006430 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800612a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800612e:	e129      	b.n	8006384 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006136:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800613e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8006142:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8006146:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800614a:	4013      	ands	r3, r2
 800614c:	b29a      	uxth	r2, r3
 800614e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006152:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006158:	1c9a      	adds	r2, r3, #2
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006164:	b29b      	uxth	r3, r3
 8006166:	3b01      	subs	r3, #1
 8006168:	b29a      	uxth	r2, r3
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	69db      	ldr	r3, [r3, #28]
 8006176:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800617a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800617e:	f003 0307 	and.w	r3, r3, #7
 8006182:	2b00      	cmp	r3, #0
 8006184:	d053      	beq.n	800622e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006186:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800618a:	f003 0301 	and.w	r3, r3, #1
 800618e:	2b00      	cmp	r3, #0
 8006190:	d011      	beq.n	80061b6 <UART_RxISR_16BIT_FIFOEN+0xce>
 8006192:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800619a:	2b00      	cmp	r3, #0
 800619c:	d00b      	beq.n	80061b6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	2201      	movs	r2, #1
 80061a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ac:	f043 0201 	orr.w	r2, r3, #1
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80061b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80061ba:	f003 0302 	and.w	r3, r3, #2
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d011      	beq.n	80061e6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80061c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80061c6:	f003 0301 	and.w	r3, r3, #1
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d00b      	beq.n	80061e6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	2202      	movs	r2, #2
 80061d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061dc:	f043 0204 	orr.w	r2, r3, #4
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80061e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80061ea:	f003 0304 	and.w	r3, r3, #4
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d011      	beq.n	8006216 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80061f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80061f6:	f003 0301 	and.w	r3, r3, #1
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d00b      	beq.n	8006216 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2204      	movs	r2, #4
 8006204:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800620c:	f043 0202 	orr.w	r2, r3, #2
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800621c:	2b00      	cmp	r3, #0
 800621e:	d006      	beq.n	800622e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f7fe fdf2 	bl	8004e0a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006234:	b29b      	uxth	r3, r3
 8006236:	2b00      	cmp	r3, #0
 8006238:	f040 80a4 	bne.w	8006384 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006242:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006244:	e853 3f00 	ldrex	r3, [r3]
 8006248:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800624a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800624c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006250:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	461a      	mov	r2, r3
 800625a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800625e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006262:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006264:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006266:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800626a:	e841 2300 	strex	r3, r2, [r1]
 800626e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006270:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006272:	2b00      	cmp	r3, #0
 8006274:	d1e2      	bne.n	800623c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	3308      	adds	r3, #8
 800627c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800627e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006280:	e853 3f00 	ldrex	r3, [r3]
 8006284:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006286:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006288:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800628c:	f023 0301 	bic.w	r3, r3, #1
 8006290:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	3308      	adds	r3, #8
 800629a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800629e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80062a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80062a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80062a6:	e841 2300 	strex	r3, r2, [r1]
 80062aa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80062ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d1e1      	bne.n	8006276 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2220      	movs	r2, #32
 80062b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4a5f      	ldr	r2, [pc, #380]	; (8006448 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d021      	beq.n	8006314 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d01a      	beq.n	8006314 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062e6:	e853 3f00 	ldrex	r3, [r3]
 80062ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80062ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80062f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	461a      	mov	r2, r3
 80062fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006300:	65bb      	str	r3, [r7, #88]	; 0x58
 8006302:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006304:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006306:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006308:	e841 2300 	strex	r3, r2, [r1]
 800630c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800630e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006310:	2b00      	cmp	r3, #0
 8006312:	d1e4      	bne.n	80062de <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006318:	2b01      	cmp	r3, #1
 800631a:	d130      	bne.n	800637e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800632a:	e853 3f00 	ldrex	r3, [r3]
 800632e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006332:	f023 0310 	bic.w	r3, r3, #16
 8006336:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	461a      	mov	r2, r3
 8006340:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006344:	647b      	str	r3, [r7, #68]	; 0x44
 8006346:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006348:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800634a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800634c:	e841 2300 	strex	r3, r2, [r1]
 8006350:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006354:	2b00      	cmp	r3, #0
 8006356:	d1e4      	bne.n	8006322 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	69db      	ldr	r3, [r3, #28]
 800635e:	f003 0310 	and.w	r3, r3, #16
 8006362:	2b10      	cmp	r3, #16
 8006364:	d103      	bne.n	800636e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	2210      	movs	r2, #16
 800636c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006374:	4619      	mov	r1, r3
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f7fe fd50 	bl	8004e1c <HAL_UARTEx_RxEventCallback>
 800637c:	e002      	b.n	8006384 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 fa60 	bl	8006844 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006384:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8006388:	2b00      	cmp	r3, #0
 800638a:	d006      	beq.n	800639a <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800638c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006390:	f003 0320 	and.w	r3, r3, #32
 8006394:	2b00      	cmp	r3, #0
 8006396:	f47f aecb 	bne.w	8006130 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80063a0:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80063a4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d049      	beq.n	8006440 <UART_RxISR_16BIT_FIFOEN+0x358>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80063b2:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d242      	bcs.n	8006440 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	3308      	adds	r3, #8
 80063c0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c4:	e853 3f00 	ldrex	r3, [r3]
 80063c8:	623b      	str	r3, [r7, #32]
   return(result);
 80063ca:	6a3b      	ldr	r3, [r7, #32]
 80063cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	3308      	adds	r3, #8
 80063da:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80063de:	633a      	str	r2, [r7, #48]	; 0x30
 80063e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063e6:	e841 2300 	strex	r3, r2, [r1]
 80063ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80063ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d1e3      	bne.n	80063ba <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a15      	ldr	r2, [pc, #84]	; (800644c <UART_RxISR_16BIT_FIFOEN+0x364>)
 80063f6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	e853 3f00 	ldrex	r3, [r3]
 8006404:	60fb      	str	r3, [r7, #12]
   return(result);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f043 0320 	orr.w	r3, r3, #32
 800640c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	461a      	mov	r2, r3
 8006416:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800641a:	61fb      	str	r3, [r7, #28]
 800641c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800641e:	69b9      	ldr	r1, [r7, #24]
 8006420:	69fa      	ldr	r2, [r7, #28]
 8006422:	e841 2300 	strex	r3, r2, [r1]
 8006426:	617b      	str	r3, [r7, #20]
   return(result);
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d1e4      	bne.n	80063f8 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800642e:	e007      	b.n	8006440 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	699a      	ldr	r2, [r3, #24]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f042 0208 	orr.w	r2, r2, #8
 800643e:	619a      	str	r2, [r3, #24]
}
 8006440:	bf00      	nop
 8006442:	37b8      	adds	r7, #184	; 0xb8
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}
 8006448:	40008000 	.word	0x40008000
 800644c:	08005bd1 	.word	0x08005bd1

08006450 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006450:	b480      	push	{r7}
 8006452:	b083      	sub	sp, #12
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006458:	bf00      	nop
 800645a:	370c      	adds	r7, #12
 800645c:	46bd      	mov	sp, r7
 800645e:	bc80      	pop	{r7}
 8006460:	4770      	bx	lr

08006462 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006462:	b480      	push	{r7}
 8006464:	b083      	sub	sp, #12
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800646a:	bf00      	nop
 800646c:	370c      	adds	r7, #12
 800646e:	46bd      	mov	sp, r7
 8006470:	bc80      	pop	{r7}
 8006472:	4770      	bx	lr

08006474 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800647c:	bf00      	nop
 800647e:	370c      	adds	r7, #12
 8006480:	46bd      	mov	sp, r7
 8006482:	bc80      	pop	{r7}
 8006484:	4770      	bx	lr

08006486 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006486:	b480      	push	{r7}
 8006488:	b085      	sub	sp, #20
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006494:	2b01      	cmp	r3, #1
 8006496:	d101      	bne.n	800649c <HAL_UARTEx_DisableFifoMode+0x16>
 8006498:	2302      	movs	r3, #2
 800649a:	e027      	b.n	80064ec <HAL_UARTEx_DisableFifoMode+0x66>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2201      	movs	r2, #1
 80064a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2224      	movs	r2, #36	; 0x24
 80064a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681a      	ldr	r2, [r3, #0]
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f022 0201 	bic.w	r2, r2, #1
 80064c2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80064ca:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	68fa      	ldr	r2, [r7, #12]
 80064d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2220      	movs	r2, #32
 80064de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80064ea:	2300      	movs	r3, #0
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3714      	adds	r7, #20
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bc80      	pop	{r7}
 80064f4:	4770      	bx	lr

080064f6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80064f6:	b580      	push	{r7, lr}
 80064f8:	b084      	sub	sp, #16
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
 80064fe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006506:	2b01      	cmp	r3, #1
 8006508:	d101      	bne.n	800650e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800650a:	2302      	movs	r3, #2
 800650c:	e02d      	b.n	800656a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2201      	movs	r2, #1
 8006512:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2224      	movs	r2, #36	; 0x24
 800651a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f022 0201 	bic.w	r2, r2, #1
 8006534:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	683a      	ldr	r2, [r7, #0]
 8006546:	430a      	orrs	r2, r1
 8006548:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 f850 	bl	80065f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	68fa      	ldr	r2, [r7, #12]
 8006556:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2220      	movs	r2, #32
 800655c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2200      	movs	r2, #0
 8006564:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	3710      	adds	r7, #16
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}

08006572 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006572:	b580      	push	{r7, lr}
 8006574:	b084      	sub	sp, #16
 8006576:	af00      	add	r7, sp, #0
 8006578:	6078      	str	r0, [r7, #4]
 800657a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006582:	2b01      	cmp	r3, #1
 8006584:	d101      	bne.n	800658a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006586:	2302      	movs	r3, #2
 8006588:	e02d      	b.n	80065e6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2201      	movs	r2, #1
 800658e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2224      	movs	r2, #36	; 0x24
 8006596:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f022 0201 	bic.w	r2, r2, #1
 80065b0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	683a      	ldr	r2, [r7, #0]
 80065c2:	430a      	orrs	r2, r1
 80065c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 f812 	bl	80065f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	68fa      	ldr	r2, [r7, #12]
 80065d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2220      	movs	r2, #32
 80065d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2200      	movs	r2, #0
 80065e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80065e4:	2300      	movs	r3, #0
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3710      	adds	r7, #16
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
	...

080065f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80065f0:	b480      	push	{r7}
 80065f2:	b085      	sub	sp, #20
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d108      	bne.n	8006612 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2201      	movs	r2, #1
 8006604:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006610:	e031      	b.n	8006676 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006612:	2308      	movs	r3, #8
 8006614:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006616:	2308      	movs	r3, #8
 8006618:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	689b      	ldr	r3, [r3, #8]
 8006620:	0e5b      	lsrs	r3, r3, #25
 8006622:	b2db      	uxtb	r3, r3
 8006624:	f003 0307 	and.w	r3, r3, #7
 8006628:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	0f5b      	lsrs	r3, r3, #29
 8006632:	b2db      	uxtb	r3, r3
 8006634:	f003 0307 	and.w	r3, r3, #7
 8006638:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800663a:	7bbb      	ldrb	r3, [r7, #14]
 800663c:	7b3a      	ldrb	r2, [r7, #12]
 800663e:	4910      	ldr	r1, [pc, #64]	; (8006680 <UARTEx_SetNbDataToProcess+0x90>)
 8006640:	5c8a      	ldrb	r2, [r1, r2]
 8006642:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006646:	7b3a      	ldrb	r2, [r7, #12]
 8006648:	490e      	ldr	r1, [pc, #56]	; (8006684 <UARTEx_SetNbDataToProcess+0x94>)
 800664a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800664c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006650:	b29a      	uxth	r2, r3
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006658:	7bfb      	ldrb	r3, [r7, #15]
 800665a:	7b7a      	ldrb	r2, [r7, #13]
 800665c:	4908      	ldr	r1, [pc, #32]	; (8006680 <UARTEx_SetNbDataToProcess+0x90>)
 800665e:	5c8a      	ldrb	r2, [r1, r2]
 8006660:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006664:	7b7a      	ldrb	r2, [r7, #13]
 8006666:	4907      	ldr	r1, [pc, #28]	; (8006684 <UARTEx_SetNbDataToProcess+0x94>)
 8006668:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800666a:	fb93 f3f2 	sdiv	r3, r3, r2
 800666e:	b29a      	uxth	r2, r3
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006676:	bf00      	nop
 8006678:	3714      	adds	r7, #20
 800667a:	46bd      	mov	sp, r7
 800667c:	bc80      	pop	{r7}
 800667e:	4770      	bx	lr
 8006680:	0800aa20 	.word	0x0800aa20
 8006684:	0800aa28 	.word	0x0800aa28

08006688 <serialPutStr>:

#include "Uart.h"


void serialPutStr(const char *data)
{
 8006688:	b590      	push	{r4, r7, lr}
 800668a:	b083      	sub	sp, #12
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
   //Get exclusive access
  //osAcquireMutex(&uartMutex);
  HAL_UART_Transmit(Get_DebugHandle(),(uint8_t *)data, strlen(data),DEBUG_UART_TIMEOUT);
 8006690:	f7fa fade 	bl	8000c50 <Get_DebugHandle>
 8006694:	4604      	mov	r4, r0
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f7f9 fd72 	bl	8000180 <strlen>
 800669c:	4603      	mov	r3, r0
 800669e:	b29a      	uxth	r2, r3
 80066a0:	230a      	movs	r3, #10
 80066a2:	6879      	ldr	r1, [r7, #4]
 80066a4:	4620      	mov	r0, r4
 80066a6:	f7fd ffb1 	bl	800460c <HAL_UART_Transmit>
  //osReleaseMutex(&uartMutex);

}
 80066aa:	bf00      	nop
 80066ac:	370c      	adds	r7, #12
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd90      	pop	{r4, r7, pc}
	...

080066b4 <terminalTaskHandler>:



/* USER CODE END Header_terminalTaskHandler */
void terminalTaskHandler(void const * argument)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	int tCommandReady = 0;
 80066bc:	2300      	movs	r3, #0
 80066be:	60fb      	str	r3, [r7, #12]
	char tRxedChar;
	HAL_UART_Receive_IT(Get_DebugHandle(),(uint8_t*)uartData,UART_RECEIVE_SIZE);
 80066c0:	f7fa fac6 	bl	8000c50 <Get_DebugHandle>
 80066c4:	4603      	mov	r3, r0
 80066c6:	2201      	movs	r2, #1
 80066c8:	4911      	ldr	r1, [pc, #68]	; (8006710 <terminalTaskHandler+0x5c>)
 80066ca:	4618      	mov	r0, r3
 80066cc:	f7fe f824 	bl	8004718 <HAL_UART_Receive_IT>
	/* Infinite loop */
	serialPutStr("Terminal Thread Initialized");
 80066d0:	4810      	ldr	r0, [pc, #64]	; (8006714 <terminalTaskHandler+0x60>)
 80066d2:	f7ff ffd9 	bl	8006688 <serialPutStr>
	for(;;)
	{
		/* Process Terminal Commands */
		if(xQueueReceive(Get_TerminalQueueHandle(),&tRxedChar,QUEUE_TIMEOUT))
 80066d6:	f7fa fac5 	bl	8000c64 <Get_TerminalQueueHandle>
 80066da:	f107 030b 	add.w	r3, r7, #11
 80066de:	220a      	movs	r2, #10
 80066e0:	4619      	mov	r1, r3
 80066e2:	f000 fd67 	bl	80071b4 <xQueueReceive>
 80066e6:	4603      	mov	r3, r0
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d00c      	beq.n	8006706 <terminalTaskHandler+0x52>
		{
			tCommandReady = CommandLineBuildCommand(tRxedChar);
 80066ec:	7afb      	ldrb	r3, [r7, #11]
 80066ee:	4618      	mov	r0, r3
 80066f0:	f000 f814 	bl	800671c <CommandLineBuildCommand>
 80066f4:	60f8      	str	r0, [r7, #12]
			if(tCommandReady)
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d004      	beq.n	8006706 <terminalTaskHandler+0x52>
			{
				CommandLineProcessCommand(gCommandBuffer);
 80066fc:	4806      	ldr	r0, [pc, #24]	; (8006718 <terminalTaskHandler+0x64>)
 80066fe:	f000 f855 	bl	80067ac <CommandLineProcessCommand>
				tCommandReady = 0;
 8006702:	2300      	movs	r3, #0
 8006704:	60fb      	str	r3, [r7, #12]
			}
		}
		osDelay(1);
 8006706:	2001      	movs	r0, #1
 8006708:	f000 f92e 	bl	8006968 <osDelay>
		if(xQueueReceive(Get_TerminalQueueHandle(),&tRxedChar,QUEUE_TIMEOUT))
 800670c:	e7e3      	b.n	80066d6 <terminalTaskHandler+0x22>
 800670e:	bf00      	nop
 8006710:	20000ae4 	.word	0x20000ae4
 8006714:	0800a914 	.word	0x0800a914
 8006718:	20000ae8 	.word	0x20000ae8

0800671c <CommandLineBuildCommand>:
}


static uint16_t commandBuilderIdx = 0;
int CommandLineBuildCommand(char nextChar)
{
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
 8006722:	4603      	mov	r3, r0
 8006724:	71fb      	strb	r3, [r7, #7]
	/* Don't store any new line characters or spaces. */
	if ((nextChar == '\n') || (nextChar == ' ') || (nextChar == '\t'))
 8006726:	79fb      	ldrb	r3, [r7, #7]
 8006728:	2b0a      	cmp	r3, #10
 800672a:	d005      	beq.n	8006738 <CommandLineBuildCommand+0x1c>
 800672c:	79fb      	ldrb	r3, [r7, #7]
 800672e:	2b20      	cmp	r3, #32
 8006730:	d002      	beq.n	8006738 <CommandLineBuildCommand+0x1c>
 8006732:	79fb      	ldrb	r3, [r7, #7]
 8006734:	2b09      	cmp	r3, #9
 8006736:	d101      	bne.n	800673c <CommandLineBuildCommand+0x20>
	{
		return false;
 8006738:	2300      	movs	r3, #0
 800673a:	e02d      	b.n	8006798 <CommandLineBuildCommand+0x7c>
	}
	/* The completed command has been received. Replace the final carriage
	 * return character with a NULL character to help with processing the
	 * command. */
	if (nextChar == '\r')
 800673c:	79fb      	ldrb	r3, [r7, #7]
 800673e:	2b0d      	cmp	r3, #13
 8006740:	d10a      	bne.n	8006758 <CommandLineBuildCommand+0x3c>
	{
		gCommandBuffer[commandBuilderIdx] = '\0';
 8006742:	4b18      	ldr	r3, [pc, #96]	; (80067a4 <CommandLineBuildCommand+0x88>)
 8006744:	881b      	ldrh	r3, [r3, #0]
 8006746:	461a      	mov	r2, r3
 8006748:	4b17      	ldr	r3, [pc, #92]	; (80067a8 <CommandLineBuildCommand+0x8c>)
 800674a:	2100      	movs	r1, #0
 800674c:	5499      	strb	r1, [r3, r2]
		commandBuilderIdx = 0;
 800674e:	4b15      	ldr	r3, [pc, #84]	; (80067a4 <CommandLineBuildCommand+0x88>)
 8006750:	2200      	movs	r2, #0
 8006752:	801a      	strh	r2, [r3, #0]
		return true;
 8006754:	2301      	movs	r3, #1
 8006756:	e01f      	b.n	8006798 <CommandLineBuildCommand+0x7c>
	}
	/* Convert the incoming character to uppercase. This matches the case
	 * of commands in the command table. Then store the received character
	 * in the command buffer. */
	gCommandBuffer[commandBuilderIdx] = TO_UPPER(nextChar);
 8006758:	79fb      	ldrb	r3, [r7, #7]
 800675a:	2b60      	cmp	r3, #96	; 0x60
 800675c:	d906      	bls.n	800676c <CommandLineBuildCommand+0x50>
 800675e:	79fb      	ldrb	r3, [r7, #7]
 8006760:	2b7a      	cmp	r3, #122	; 0x7a
 8006762:	d803      	bhi.n	800676c <CommandLineBuildCommand+0x50>
 8006764:	79fb      	ldrb	r3, [r7, #7]
 8006766:	3b20      	subs	r3, #32
 8006768:	b2db      	uxtb	r3, r3
 800676a:	e000      	b.n	800676e <CommandLineBuildCommand+0x52>
 800676c:	79fb      	ldrb	r3, [r7, #7]
 800676e:	4a0d      	ldr	r2, [pc, #52]	; (80067a4 <CommandLineBuildCommand+0x88>)
 8006770:	8812      	ldrh	r2, [r2, #0]
 8006772:	4611      	mov	r1, r2
 8006774:	4a0c      	ldr	r2, [pc, #48]	; (80067a8 <CommandLineBuildCommand+0x8c>)
 8006776:	5453      	strb	r3, [r2, r1]
	commandBuilderIdx++;
 8006778:	4b0a      	ldr	r3, [pc, #40]	; (80067a4 <CommandLineBuildCommand+0x88>)
 800677a:	881b      	ldrh	r3, [r3, #0]
 800677c:	3301      	adds	r3, #1
 800677e:	b29a      	uxth	r2, r3
 8006780:	4b08      	ldr	r3, [pc, #32]	; (80067a4 <CommandLineBuildCommand+0x88>)
 8006782:	801a      	strh	r2, [r3, #0]
	/* If the command is too long, reset the index and process
	 * the current command buffer. */
	if (commandBuilderIdx >= MAX_COMMAND_LEN)
 8006784:	4b07      	ldr	r3, [pc, #28]	; (80067a4 <CommandLineBuildCommand+0x88>)
 8006786:	881b      	ldrh	r3, [r3, #0]
 8006788:	2b77      	cmp	r3, #119	; 0x77
 800678a:	d904      	bls.n	8006796 <CommandLineBuildCommand+0x7a>
	{
		commandBuilderIdx = 0;
 800678c:	4b05      	ldr	r3, [pc, #20]	; (80067a4 <CommandLineBuildCommand+0x88>)
 800678e:	2200      	movs	r2, #0
 8006790:	801a      	strh	r2, [r3, #0]
		return true;
 8006792:	2301      	movs	r3, #1
 8006794:	e000      	b.n	8006798 <CommandLineBuildCommand+0x7c>
	}

	return false;
 8006796:	2300      	movs	r3, #0

}
 8006798:	4618      	mov	r0, r3
 800679a:	370c      	adds	r7, #12
 800679c:	46bd      	mov	sp, r7
 800679e:	bc80      	pop	{r7}
 80067a0:	4770      	bx	lr
 80067a2:	bf00      	nop
 80067a4:	20000bcc 	.word	0x20000bcc
 80067a8:	20000ae8 	.word	0x20000ae8

080067ac <CommandLineProcessCommand>:

void CommandLineProcessCommand(char * buffer)
{
 80067ac:	b590      	push	{r4, r7, lr}
 80067ae:	b087      	sub	sp, #28
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]

	int idx;
	int CommandFound = false;
 80067b4:	2300      	movs	r3, #0
 80067b6:	613b      	str	r3, [r7, #16]
	//char *Com= strtok(buffer,"+");
	char *Arg = strtok(NULL,"+");
 80067b8:	491e      	ldr	r1, [pc, #120]	; (8006834 <CommandLineProcessCommand+0x88>)
 80067ba:	2000      	movs	r0, #0
 80067bc:	f003 f852 	bl	8009864 <strtok>
 80067c0:	60f8      	str	r0, [r7, #12]

	/* Search for the command in the command table until it is found or
	 * the end of the table is reached. If the command is found, break
	 * out of the loop. */
	for (idx = 0; gCommandTable[idx].name != NULL; idx++)
 80067c2:	2300      	movs	r3, #0
 80067c4:	617b      	str	r3, [r7, #20]
 80067c6:	e020      	b.n	800680a <CommandLineProcessCommand+0x5e>
	{
		if (strncmp(gCommandTable[idx].name, buffer,strlen(gCommandTable[idx].name)) == 0)
 80067c8:	4a1b      	ldr	r2, [pc, #108]	; (8006838 <CommandLineProcessCommand+0x8c>)
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 80067d0:	4a19      	ldr	r2, [pc, #100]	; (8006838 <CommandLineProcessCommand+0x8c>)
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80067d8:	4618      	mov	r0, r3
 80067da:	f7f9 fcd1 	bl	8000180 <strlen>
 80067de:	4603      	mov	r3, r0
 80067e0:	461a      	mov	r2, r3
 80067e2:	6879      	ldr	r1, [r7, #4]
 80067e4:	4620      	mov	r0, r4
 80067e6:	f003 f828 	bl	800983a <strncmp>
 80067ea:	4603      	mov	r3, r0
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d109      	bne.n	8006804 <CommandLineProcessCommand+0x58>
		{
			CommandFound = true;
 80067f0:	2301      	movs	r3, #1
 80067f2:	613b      	str	r3, [r7, #16]
			(*gCommandTable[idx].function)(Arg);
 80067f4:	4a10      	ldr	r2, [pc, #64]	; (8006838 <CommandLineProcessCommand+0x8c>)
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	00db      	lsls	r3, r3, #3
 80067fa:	4413      	add	r3, r2
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	68f8      	ldr	r0, [r7, #12]
 8006800:	4798      	blx	r3
			break;
 8006802:	e008      	b.n	8006816 <CommandLineProcessCommand+0x6a>
	for (idx = 0; gCommandTable[idx].name != NULL; idx++)
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	3301      	adds	r3, #1
 8006808:	617b      	str	r3, [r7, #20]
 800680a:	4a0b      	ldr	r2, [pc, #44]	; (8006838 <CommandLineProcessCommand+0x8c>)
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d1d8      	bne.n	80067c8 <CommandLineProcessCommand+0x1c>
		}
	}
	/* If the command was found, call the command function. Otherwise,
	 * output an error message. */
	if (CommandFound==false)
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d107      	bne.n	800682c <CommandLineProcessCommand+0x80>
	{
		snprintf(TerminalMsgBuffer, sizeof(TerminalMsgBuffer), "ERROR,Command not found\n");
 800681c:	4a07      	ldr	r2, [pc, #28]	; (800683c <CommandLineProcessCommand+0x90>)
 800681e:	2164      	movs	r1, #100	; 0x64
 8006820:	4807      	ldr	r0, [pc, #28]	; (8006840 <CommandLineProcessCommand+0x94>)
 8006822:	f002 ff93 	bl	800974c <sniprintf>
		serialPutStr(TerminalMsgBuffer);
 8006826:	4806      	ldr	r0, [pc, #24]	; (8006840 <CommandLineProcessCommand+0x94>)
 8006828:	f7ff ff2e 	bl	8006688 <serialPutStr>
	}
}
 800682c:	bf00      	nop
 800682e:	371c      	adds	r7, #28
 8006830:	46bd      	mov	sp, r7
 8006832:	bd90      	pop	{r4, r7, pc}
 8006834:	0800a930 	.word	0x0800a930
 8006838:	0800aa30 	.word	0x0800aa30
 800683c:	0800a934 	.word	0x0800a934
 8006840:	20000b64 	.word	0x20000b64

08006844 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b082      	sub	sp, #8
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]

	if(huart->Instance==USART2)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a0c      	ldr	r2, [pc, #48]	; (8006884 <HAL_UART_RxCpltCallback+0x40>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d112      	bne.n	800687c <HAL_UART_RxCpltCallback+0x38>
	{
		HAL_UART_Receive_IT(Get_DebugHandle(),(uint8_t*)uartData,UART_RECEIVE_SIZE);
 8006856:	f7fa f9fb 	bl	8000c50 <Get_DebugHandle>
 800685a:	4603      	mov	r3, r0
 800685c:	2201      	movs	r2, #1
 800685e:	490a      	ldr	r1, [pc, #40]	; (8006888 <HAL_UART_RxCpltCallback+0x44>)
 8006860:	4618      	mov	r0, r3
 8006862:	f7fd ff59 	bl	8004718 <HAL_UART_Receive_IT>
		cValuetoPost = (char)uartData[0];
 8006866:	4b08      	ldr	r3, [pc, #32]	; (8006888 <HAL_UART_RxCpltCallback+0x44>)
 8006868:	781a      	ldrb	r2, [r3, #0]
 800686a:	4b08      	ldr	r3, [pc, #32]	; (800688c <HAL_UART_RxCpltCallback+0x48>)
 800686c:	701a      	strb	r2, [r3, #0]
		xQueueSendToBackFromISR(Get_TerminalQueueHandle(),(void*)&cValuetoPost,&xHigherPrioritTaskWoken);
 800686e:	f7fa f9f9 	bl	8000c64 <Get_TerminalQueueHandle>
 8006872:	2300      	movs	r3, #0
 8006874:	4a06      	ldr	r2, [pc, #24]	; (8006890 <HAL_UART_RxCpltCallback+0x4c>)
 8006876:	4905      	ldr	r1, [pc, #20]	; (800688c <HAL_UART_RxCpltCallback+0x48>)
 8006878:	f000 fc04 	bl	8007084 <xQueueGenericSendFromISR>
	}
}
 800687c:	bf00      	nop
 800687e:	3708      	adds	r7, #8
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}
 8006884:	40004400 	.word	0x40004400
 8006888:	20000ae4 	.word	0x20000ae4
 800688c:	20000ae0 	.word	0x20000ae0
 8006890:	20000bc8 	.word	0x20000bc8

08006894 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006894:	b480      	push	{r7}
 8006896:	b085      	sub	sp, #20
 8006898:	af00      	add	r7, sp, #0
 800689a:	4603      	mov	r3, r0
 800689c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800689e:	2300      	movs	r3, #0
 80068a0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80068a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80068a6:	2b84      	cmp	r3, #132	; 0x84
 80068a8:	d005      	beq.n	80068b6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80068aa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	4413      	add	r3, r2
 80068b2:	3303      	adds	r3, #3
 80068b4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80068b6:	68fb      	ldr	r3, [r7, #12]
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3714      	adds	r7, #20
 80068bc:	46bd      	mov	sp, r7
 80068be:	bc80      	pop	{r7}
 80068c0:	4770      	bx	lr

080068c2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80068c2:	b580      	push	{r7, lr}
 80068c4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80068c6:	f001 f89f 	bl	8007a08 <vTaskStartScheduler>
  
  return osOK;
 80068ca:	2300      	movs	r3, #0
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	bd80      	pop	{r7, pc}

080068d0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80068d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068d2:	b089      	sub	sp, #36	; 0x24
 80068d4:	af04      	add	r7, sp, #16
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	695b      	ldr	r3, [r3, #20]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d020      	beq.n	8006924 <osThreadCreate+0x54>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	699b      	ldr	r3, [r3, #24]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d01c      	beq.n	8006924 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	685c      	ldr	r4, [r3, #4]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681d      	ldr	r5, [r3, #0]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	691e      	ldr	r6, [r3, #16]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80068fc:	4618      	mov	r0, r3
 80068fe:	f7ff ffc9 	bl	8006894 <makeFreeRtosPriority>
 8006902:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	695b      	ldr	r3, [r3, #20]
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800690c:	9202      	str	r2, [sp, #8]
 800690e:	9301      	str	r3, [sp, #4]
 8006910:	9100      	str	r1, [sp, #0]
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	4632      	mov	r2, r6
 8006916:	4629      	mov	r1, r5
 8006918:	4620      	mov	r0, r4
 800691a:	f000 fe97 	bl	800764c <xTaskCreateStatic>
 800691e:	4603      	mov	r3, r0
 8006920:	60fb      	str	r3, [r7, #12]
 8006922:	e01c      	b.n	800695e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	685c      	ldr	r4, [r3, #4]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006930:	b29e      	uxth	r6, r3
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006938:	4618      	mov	r0, r3
 800693a:	f7ff ffab 	bl	8006894 <makeFreeRtosPriority>
 800693e:	4602      	mov	r2, r0
 8006940:	f107 030c 	add.w	r3, r7, #12
 8006944:	9301      	str	r3, [sp, #4]
 8006946:	9200      	str	r2, [sp, #0]
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	4632      	mov	r2, r6
 800694c:	4629      	mov	r1, r5
 800694e:	4620      	mov	r0, r4
 8006950:	f000 fed9 	bl	8007706 <xTaskCreate>
 8006954:	4603      	mov	r3, r0
 8006956:	2b01      	cmp	r3, #1
 8006958:	d001      	beq.n	800695e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800695a:	2300      	movs	r3, #0
 800695c:	e000      	b.n	8006960 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800695e:	68fb      	ldr	r3, [r7, #12]
}
 8006960:	4618      	mov	r0, r3
 8006962:	3714      	adds	r7, #20
 8006964:	46bd      	mov	sp, r7
 8006966:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006968 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d001      	beq.n	800697e <osDelay+0x16>
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	e000      	b.n	8006980 <osDelay+0x18>
 800697e:	2301      	movs	r3, #1
 8006980:	4618      	mov	r0, r3
 8006982:	f001 f80d 	bl	80079a0 <vTaskDelay>
  
  return osOK;
 8006986:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006988:	4618      	mov	r0, r3
 800698a:	3710      	adds	r7, #16
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}

08006990 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b082      	sub	sp, #8
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d007      	beq.n	80069b0 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	4619      	mov	r1, r3
 80069a6:	2001      	movs	r0, #1
 80069a8:	f000 fa53 	bl	8006e52 <xQueueCreateMutexStatic>
 80069ac:	4603      	mov	r3, r0
 80069ae:	e003      	b.n	80069b8 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80069b0:	2001      	movs	r0, #1
 80069b2:	f000 fa36 	bl	8006e22 <xQueueCreateMutex>
 80069b6:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3708      	adds	r7, #8
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80069c0:	b590      	push	{r4, r7, lr}
 80069c2:	b085      	sub	sp, #20
 80069c4:	af02      	add	r7, sp, #8
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d011      	beq.n	80069f6 <osMessageCreate+0x36>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d00d      	beq.n	80069f6 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6818      	ldr	r0, [r3, #0]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6859      	ldr	r1, [r3, #4]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	689a      	ldr	r2, [r3, #8]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	68db      	ldr	r3, [r3, #12]
 80069ea:	2400      	movs	r4, #0
 80069ec:	9400      	str	r4, [sp, #0]
 80069ee:	f000 f927 	bl	8006c40 <xQueueGenericCreateStatic>
 80069f2:	4603      	mov	r3, r0
 80069f4:	e008      	b.n	8006a08 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6818      	ldr	r0, [r3, #0]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	2200      	movs	r2, #0
 8006a00:	4619      	mov	r1, r3
 8006a02:	f000 f995 	bl	8006d30 <xQueueGenericCreate>
 8006a06:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	370c      	adds	r7, #12
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd90      	pop	{r4, r7, pc}

08006a10 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006a10:	b480      	push	{r7}
 8006a12:	b083      	sub	sp, #12
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	f103 0208 	add.w	r2, r3, #8
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f04f 32ff 	mov.w	r2, #4294967295
 8006a28:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f103 0208 	add.w	r2, r3, #8
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f103 0208 	add.w	r2, r3, #8
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006a44:	bf00      	nop
 8006a46:	370c      	adds	r7, #12
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bc80      	pop	{r7}
 8006a4c:	4770      	bx	lr

08006a4e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006a4e:	b480      	push	{r7}
 8006a50:	b083      	sub	sp, #12
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006a5c:	bf00      	nop
 8006a5e:	370c      	adds	r7, #12
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bc80      	pop	{r7}
 8006a64:	4770      	bx	lr

08006a66 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006a66:	b480      	push	{r7}
 8006a68:	b085      	sub	sp, #20
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6078      	str	r0, [r7, #4]
 8006a6e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	68fa      	ldr	r2, [r7, #12]
 8006a7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	689a      	ldr	r2, [r3, #8]
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	683a      	ldr	r2, [r7, #0]
 8006a8a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	683a      	ldr	r2, [r7, #0]
 8006a90:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	1c5a      	adds	r2, r3, #1
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	601a      	str	r2, [r3, #0]
}
 8006aa2:	bf00      	nop
 8006aa4:	3714      	adds	r7, #20
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bc80      	pop	{r7}
 8006aaa:	4770      	bx	lr

08006aac <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006aac:	b480      	push	{r7}
 8006aae:	b085      	sub	sp, #20
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ac2:	d103      	bne.n	8006acc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	691b      	ldr	r3, [r3, #16]
 8006ac8:	60fb      	str	r3, [r7, #12]
 8006aca:	e00c      	b.n	8006ae6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	3308      	adds	r3, #8
 8006ad0:	60fb      	str	r3, [r7, #12]
 8006ad2:	e002      	b.n	8006ada <vListInsert+0x2e>
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	60fb      	str	r3, [r7, #12]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	68ba      	ldr	r2, [r7, #8]
 8006ae2:	429a      	cmp	r2, r3
 8006ae4:	d2f6      	bcs.n	8006ad4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	685a      	ldr	r2, [r3, #4]
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	683a      	ldr	r2, [r7, #0]
 8006af4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	68fa      	ldr	r2, [r7, #12]
 8006afa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	683a      	ldr	r2, [r7, #0]
 8006b00:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	687a      	ldr	r2, [r7, #4]
 8006b06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	1c5a      	adds	r2, r3, #1
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	601a      	str	r2, [r3, #0]
}
 8006b12:	bf00      	nop
 8006b14:	3714      	adds	r7, #20
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bc80      	pop	{r7}
 8006b1a:	4770      	bx	lr

08006b1c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b085      	sub	sp, #20
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	691b      	ldr	r3, [r3, #16]
 8006b28:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	687a      	ldr	r2, [r7, #4]
 8006b30:	6892      	ldr	r2, [r2, #8]
 8006b32:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	687a      	ldr	r2, [r7, #4]
 8006b3a:	6852      	ldr	r2, [r2, #4]
 8006b3c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d103      	bne.n	8006b50 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	689a      	ldr	r2, [r3, #8]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	1e5a      	subs	r2, r3, #1
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3714      	adds	r7, #20
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bc80      	pop	{r7}
 8006b6c:	4770      	bx	lr
	...

08006b70 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d10a      	bne.n	8006b9a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b88:	f383 8811 	msr	BASEPRI, r3
 8006b8c:	f3bf 8f6f 	isb	sy
 8006b90:	f3bf 8f4f 	dsb	sy
 8006b94:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006b96:	bf00      	nop
 8006b98:	e7fe      	b.n	8006b98 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006b9a:	f002 f8b7 	bl	8008d0c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ba6:	68f9      	ldr	r1, [r7, #12]
 8006ba8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006baa:	fb01 f303 	mul.w	r3, r1, r3
 8006bae:	441a      	add	r2, r3
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681a      	ldr	r2, [r3, #0]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bca:	3b01      	subs	r3, #1
 8006bcc:	68f9      	ldr	r1, [r7, #12]
 8006bce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006bd0:	fb01 f303 	mul.w	r3, r1, r3
 8006bd4:	441a      	add	r2, r3
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	22ff      	movs	r2, #255	; 0xff
 8006bde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	22ff      	movs	r2, #255	; 0xff
 8006be6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d114      	bne.n	8006c1a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	691b      	ldr	r3, [r3, #16]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d01a      	beq.n	8006c2e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	3310      	adds	r3, #16
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f001 f995 	bl	8007f2c <xTaskRemoveFromEventList>
 8006c02:	4603      	mov	r3, r0
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d012      	beq.n	8006c2e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006c08:	4b0c      	ldr	r3, [pc, #48]	; (8006c3c <xQueueGenericReset+0xcc>)
 8006c0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006c0e:	601a      	str	r2, [r3, #0]
 8006c10:	f3bf 8f4f 	dsb	sy
 8006c14:	f3bf 8f6f 	isb	sy
 8006c18:	e009      	b.n	8006c2e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	3310      	adds	r3, #16
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f7ff fef6 	bl	8006a10 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	3324      	adds	r3, #36	; 0x24
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f7ff fef1 	bl	8006a10 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006c2e:	f002 f89d 	bl	8008d6c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006c32:	2301      	movs	r3, #1
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3710      	adds	r7, #16
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}
 8006c3c:	e000ed04 	.word	0xe000ed04

08006c40 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b08e      	sub	sp, #56	; 0x38
 8006c44:	af02      	add	r7, sp, #8
 8006c46:	60f8      	str	r0, [r7, #12]
 8006c48:	60b9      	str	r1, [r7, #8]
 8006c4a:	607a      	str	r2, [r7, #4]
 8006c4c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d10a      	bne.n	8006c6a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c58:	f383 8811 	msr	BASEPRI, r3
 8006c5c:	f3bf 8f6f 	isb	sy
 8006c60:	f3bf 8f4f 	dsb	sy
 8006c64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006c66:	bf00      	nop
 8006c68:	e7fe      	b.n	8006c68 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d10a      	bne.n	8006c86 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c74:	f383 8811 	msr	BASEPRI, r3
 8006c78:	f3bf 8f6f 	isb	sy
 8006c7c:	f3bf 8f4f 	dsb	sy
 8006c80:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006c82:	bf00      	nop
 8006c84:	e7fe      	b.n	8006c84 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d002      	beq.n	8006c92 <xQueueGenericCreateStatic+0x52>
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d001      	beq.n	8006c96 <xQueueGenericCreateStatic+0x56>
 8006c92:	2301      	movs	r3, #1
 8006c94:	e000      	b.n	8006c98 <xQueueGenericCreateStatic+0x58>
 8006c96:	2300      	movs	r3, #0
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d10a      	bne.n	8006cb2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca0:	f383 8811 	msr	BASEPRI, r3
 8006ca4:	f3bf 8f6f 	isb	sy
 8006ca8:	f3bf 8f4f 	dsb	sy
 8006cac:	623b      	str	r3, [r7, #32]
}
 8006cae:	bf00      	nop
 8006cb0:	e7fe      	b.n	8006cb0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d102      	bne.n	8006cbe <xQueueGenericCreateStatic+0x7e>
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d101      	bne.n	8006cc2 <xQueueGenericCreateStatic+0x82>
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e000      	b.n	8006cc4 <xQueueGenericCreateStatic+0x84>
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d10a      	bne.n	8006cde <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ccc:	f383 8811 	msr	BASEPRI, r3
 8006cd0:	f3bf 8f6f 	isb	sy
 8006cd4:	f3bf 8f4f 	dsb	sy
 8006cd8:	61fb      	str	r3, [r7, #28]
}
 8006cda:	bf00      	nop
 8006cdc:	e7fe      	b.n	8006cdc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006cde:	2348      	movs	r3, #72	; 0x48
 8006ce0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	2b48      	cmp	r3, #72	; 0x48
 8006ce6:	d00a      	beq.n	8006cfe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cec:	f383 8811 	msr	BASEPRI, r3
 8006cf0:	f3bf 8f6f 	isb	sy
 8006cf4:	f3bf 8f4f 	dsb	sy
 8006cf8:	61bb      	str	r3, [r7, #24]
}
 8006cfa:	bf00      	nop
 8006cfc:	e7fe      	b.n	8006cfc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006cfe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d00d      	beq.n	8006d26 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006d12:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d18:	9300      	str	r3, [sp, #0]
 8006d1a:	4613      	mov	r3, r2
 8006d1c:	687a      	ldr	r2, [r7, #4]
 8006d1e:	68b9      	ldr	r1, [r7, #8]
 8006d20:	68f8      	ldr	r0, [r7, #12]
 8006d22:	f000 f845 	bl	8006db0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3730      	adds	r7, #48	; 0x30
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b08a      	sub	sp, #40	; 0x28
 8006d34:	af02      	add	r7, sp, #8
 8006d36:	60f8      	str	r0, [r7, #12]
 8006d38:	60b9      	str	r1, [r7, #8]
 8006d3a:	4613      	mov	r3, r2
 8006d3c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d10a      	bne.n	8006d5a <xQueueGenericCreate+0x2a>
	__asm volatile
 8006d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d48:	f383 8811 	msr	BASEPRI, r3
 8006d4c:	f3bf 8f6f 	isb	sy
 8006d50:	f3bf 8f4f 	dsb	sy
 8006d54:	613b      	str	r3, [r7, #16]
}
 8006d56:	bf00      	nop
 8006d58:	e7fe      	b.n	8006d58 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d102      	bne.n	8006d66 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006d60:	2300      	movs	r3, #0
 8006d62:	61fb      	str	r3, [r7, #28]
 8006d64:	e004      	b.n	8006d70 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	68ba      	ldr	r2, [r7, #8]
 8006d6a:	fb02 f303 	mul.w	r3, r2, r3
 8006d6e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006d70:	69fb      	ldr	r3, [r7, #28]
 8006d72:	3348      	adds	r3, #72	; 0x48
 8006d74:	4618      	mov	r0, r3
 8006d76:	f002 f8c9 	bl	8008f0c <pvPortMalloc>
 8006d7a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006d7c:	69bb      	ldr	r3, [r7, #24]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d011      	beq.n	8006da6 <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006d82:	69bb      	ldr	r3, [r7, #24]
 8006d84:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	3348      	adds	r3, #72	; 0x48
 8006d8a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006d8c:	69bb      	ldr	r3, [r7, #24]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006d94:	79fa      	ldrb	r2, [r7, #7]
 8006d96:	69bb      	ldr	r3, [r7, #24]
 8006d98:	9300      	str	r3, [sp, #0]
 8006d9a:	4613      	mov	r3, r2
 8006d9c:	697a      	ldr	r2, [r7, #20]
 8006d9e:	68b9      	ldr	r1, [r7, #8]
 8006da0:	68f8      	ldr	r0, [r7, #12]
 8006da2:	f000 f805 	bl	8006db0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006da6:	69bb      	ldr	r3, [r7, #24]
	}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3720      	adds	r7, #32
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b084      	sub	sp, #16
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	607a      	str	r2, [r7, #4]
 8006dbc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d103      	bne.n	8006dcc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006dc4:	69bb      	ldr	r3, [r7, #24]
 8006dc6:	69ba      	ldr	r2, [r7, #24]
 8006dc8:	601a      	str	r2, [r3, #0]
 8006dca:	e002      	b.n	8006dd2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006dcc:	69bb      	ldr	r3, [r7, #24]
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006dd2:	69bb      	ldr	r3, [r7, #24]
 8006dd4:	68fa      	ldr	r2, [r7, #12]
 8006dd6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006dd8:	69bb      	ldr	r3, [r7, #24]
 8006dda:	68ba      	ldr	r2, [r7, #8]
 8006ddc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006dde:	2101      	movs	r1, #1
 8006de0:	69b8      	ldr	r0, [r7, #24]
 8006de2:	f7ff fec5 	bl	8006b70 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006de6:	bf00      	nop
 8006de8:	3710      	adds	r7, #16
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}

08006dee <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8006dee:	b580      	push	{r7, lr}
 8006df0:	b082      	sub	sp, #8
 8006df2:	af00      	add	r7, sp, #0
 8006df4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d00e      	beq.n	8006e1a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2200      	movs	r2, #0
 8006e06:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8006e0e:	2300      	movs	r3, #0
 8006e10:	2200      	movs	r2, #0
 8006e12:	2100      	movs	r1, #0
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f000 f837 	bl	8006e88 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006e1a:	bf00      	nop
 8006e1c:	3708      	adds	r7, #8
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}

08006e22 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006e22:	b580      	push	{r7, lr}
 8006e24:	b086      	sub	sp, #24
 8006e26:	af00      	add	r7, sp, #0
 8006e28:	4603      	mov	r3, r0
 8006e2a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	617b      	str	r3, [r7, #20]
 8006e30:	2300      	movs	r3, #0
 8006e32:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006e34:	79fb      	ldrb	r3, [r7, #7]
 8006e36:	461a      	mov	r2, r3
 8006e38:	6939      	ldr	r1, [r7, #16]
 8006e3a:	6978      	ldr	r0, [r7, #20]
 8006e3c:	f7ff ff78 	bl	8006d30 <xQueueGenericCreate>
 8006e40:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006e42:	68f8      	ldr	r0, [r7, #12]
 8006e44:	f7ff ffd3 	bl	8006dee <prvInitialiseMutex>

		return xNewQueue;
 8006e48:	68fb      	ldr	r3, [r7, #12]
	}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3718      	adds	r7, #24
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}

08006e52 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006e52:	b580      	push	{r7, lr}
 8006e54:	b088      	sub	sp, #32
 8006e56:	af02      	add	r7, sp, #8
 8006e58:	4603      	mov	r3, r0
 8006e5a:	6039      	str	r1, [r7, #0]
 8006e5c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	617b      	str	r3, [r7, #20]
 8006e62:	2300      	movs	r3, #0
 8006e64:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006e66:	79fb      	ldrb	r3, [r7, #7]
 8006e68:	9300      	str	r3, [sp, #0]
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	6939      	ldr	r1, [r7, #16]
 8006e70:	6978      	ldr	r0, [r7, #20]
 8006e72:	f7ff fee5 	bl	8006c40 <xQueueGenericCreateStatic>
 8006e76:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006e78:	68f8      	ldr	r0, [r7, #12]
 8006e7a:	f7ff ffb8 	bl	8006dee <prvInitialiseMutex>

		return xNewQueue;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
	}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3718      	adds	r7, #24
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b08e      	sub	sp, #56	; 0x38
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	60f8      	str	r0, [r7, #12]
 8006e90:	60b9      	str	r1, [r7, #8]
 8006e92:	607a      	str	r2, [r7, #4]
 8006e94:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006e96:	2300      	movs	r3, #0
 8006e98:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d10a      	bne.n	8006eba <xQueueGenericSend+0x32>
	__asm volatile
 8006ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea8:	f383 8811 	msr	BASEPRI, r3
 8006eac:	f3bf 8f6f 	isb	sy
 8006eb0:	f3bf 8f4f 	dsb	sy
 8006eb4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006eb6:	bf00      	nop
 8006eb8:	e7fe      	b.n	8006eb8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d103      	bne.n	8006ec8 <xQueueGenericSend+0x40>
 8006ec0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d101      	bne.n	8006ecc <xQueueGenericSend+0x44>
 8006ec8:	2301      	movs	r3, #1
 8006eca:	e000      	b.n	8006ece <xQueueGenericSend+0x46>
 8006ecc:	2300      	movs	r3, #0
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d10a      	bne.n	8006ee8 <xQueueGenericSend+0x60>
	__asm volatile
 8006ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed6:	f383 8811 	msr	BASEPRI, r3
 8006eda:	f3bf 8f6f 	isb	sy
 8006ede:	f3bf 8f4f 	dsb	sy
 8006ee2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006ee4:	bf00      	nop
 8006ee6:	e7fe      	b.n	8006ee6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	2b02      	cmp	r3, #2
 8006eec:	d103      	bne.n	8006ef6 <xQueueGenericSend+0x6e>
 8006eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d101      	bne.n	8006efa <xQueueGenericSend+0x72>
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e000      	b.n	8006efc <xQueueGenericSend+0x74>
 8006efa:	2300      	movs	r3, #0
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d10a      	bne.n	8006f16 <xQueueGenericSend+0x8e>
	__asm volatile
 8006f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f04:	f383 8811 	msr	BASEPRI, r3
 8006f08:	f3bf 8f6f 	isb	sy
 8006f0c:	f3bf 8f4f 	dsb	sy
 8006f10:	623b      	str	r3, [r7, #32]
}
 8006f12:	bf00      	nop
 8006f14:	e7fe      	b.n	8006f14 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f16:	f001 f9cb 	bl	80082b0 <xTaskGetSchedulerState>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d102      	bne.n	8006f26 <xQueueGenericSend+0x9e>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d101      	bne.n	8006f2a <xQueueGenericSend+0xa2>
 8006f26:	2301      	movs	r3, #1
 8006f28:	e000      	b.n	8006f2c <xQueueGenericSend+0xa4>
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d10a      	bne.n	8006f46 <xQueueGenericSend+0xbe>
	__asm volatile
 8006f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f34:	f383 8811 	msr	BASEPRI, r3
 8006f38:	f3bf 8f6f 	isb	sy
 8006f3c:	f3bf 8f4f 	dsb	sy
 8006f40:	61fb      	str	r3, [r7, #28]
}
 8006f42:	bf00      	nop
 8006f44:	e7fe      	b.n	8006f44 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f46:	f001 fee1 	bl	8008d0c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d302      	bcc.n	8006f5c <xQueueGenericSend+0xd4>
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	2b02      	cmp	r3, #2
 8006f5a:	d129      	bne.n	8006fb0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006f5c:	683a      	ldr	r2, [r7, #0]
 8006f5e:	68b9      	ldr	r1, [r7, #8]
 8006f60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006f62:	f000 fa07 	bl	8007374 <prvCopyDataToQueue>
 8006f66:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d010      	beq.n	8006f92 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f72:	3324      	adds	r3, #36	; 0x24
 8006f74:	4618      	mov	r0, r3
 8006f76:	f000 ffd9 	bl	8007f2c <xTaskRemoveFromEventList>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d013      	beq.n	8006fa8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006f80:	4b3f      	ldr	r3, [pc, #252]	; (8007080 <xQueueGenericSend+0x1f8>)
 8006f82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f86:	601a      	str	r2, [r3, #0]
 8006f88:	f3bf 8f4f 	dsb	sy
 8006f8c:	f3bf 8f6f 	isb	sy
 8006f90:	e00a      	b.n	8006fa8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d007      	beq.n	8006fa8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006f98:	4b39      	ldr	r3, [pc, #228]	; (8007080 <xQueueGenericSend+0x1f8>)
 8006f9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f9e:	601a      	str	r2, [r3, #0]
 8006fa0:	f3bf 8f4f 	dsb	sy
 8006fa4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006fa8:	f001 fee0 	bl	8008d6c <vPortExitCritical>
				return pdPASS;
 8006fac:	2301      	movs	r3, #1
 8006fae:	e063      	b.n	8007078 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d103      	bne.n	8006fbe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006fb6:	f001 fed9 	bl	8008d6c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	e05c      	b.n	8007078 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d106      	bne.n	8006fd2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006fc4:	f107 0314 	add.w	r3, r7, #20
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f001 f811 	bl	8007ff0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006fd2:	f001 fecb 	bl	8008d6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006fd6:	f000 fd87 	bl	8007ae8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006fda:	f001 fe97 	bl	8008d0c <vPortEnterCritical>
 8006fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006fe4:	b25b      	sxtb	r3, r3
 8006fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fea:	d103      	bne.n	8006ff4 <xQueueGenericSend+0x16c>
 8006fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ffa:	b25b      	sxtb	r3, r3
 8006ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007000:	d103      	bne.n	800700a <xQueueGenericSend+0x182>
 8007002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007004:	2200      	movs	r2, #0
 8007006:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800700a:	f001 feaf 	bl	8008d6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800700e:	1d3a      	adds	r2, r7, #4
 8007010:	f107 0314 	add.w	r3, r7, #20
 8007014:	4611      	mov	r1, r2
 8007016:	4618      	mov	r0, r3
 8007018:	f001 f800 	bl	800801c <xTaskCheckForTimeOut>
 800701c:	4603      	mov	r3, r0
 800701e:	2b00      	cmp	r3, #0
 8007020:	d124      	bne.n	800706c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007022:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007024:	f000 fa9e 	bl	8007564 <prvIsQueueFull>
 8007028:	4603      	mov	r3, r0
 800702a:	2b00      	cmp	r3, #0
 800702c:	d018      	beq.n	8007060 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800702e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007030:	3310      	adds	r3, #16
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	4611      	mov	r1, r2
 8007036:	4618      	mov	r0, r3
 8007038:	f000 ff28 	bl	8007e8c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800703c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800703e:	f000 fa29 	bl	8007494 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007042:	f000 fd5f 	bl	8007b04 <xTaskResumeAll>
 8007046:	4603      	mov	r3, r0
 8007048:	2b00      	cmp	r3, #0
 800704a:	f47f af7c 	bne.w	8006f46 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800704e:	4b0c      	ldr	r3, [pc, #48]	; (8007080 <xQueueGenericSend+0x1f8>)
 8007050:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007054:	601a      	str	r2, [r3, #0]
 8007056:	f3bf 8f4f 	dsb	sy
 800705a:	f3bf 8f6f 	isb	sy
 800705e:	e772      	b.n	8006f46 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007060:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007062:	f000 fa17 	bl	8007494 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007066:	f000 fd4d 	bl	8007b04 <xTaskResumeAll>
 800706a:	e76c      	b.n	8006f46 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800706c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800706e:	f000 fa11 	bl	8007494 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007072:	f000 fd47 	bl	8007b04 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007076:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007078:	4618      	mov	r0, r3
 800707a:	3738      	adds	r7, #56	; 0x38
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}
 8007080:	e000ed04 	.word	0xe000ed04

08007084 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b08e      	sub	sp, #56	; 0x38
 8007088:	af00      	add	r7, sp, #0
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	60b9      	str	r1, [r7, #8]
 800708e:	607a      	str	r2, [r7, #4]
 8007090:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007098:	2b00      	cmp	r3, #0
 800709a:	d10a      	bne.n	80070b2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800709c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a0:	f383 8811 	msr	BASEPRI, r3
 80070a4:	f3bf 8f6f 	isb	sy
 80070a8:	f3bf 8f4f 	dsb	sy
 80070ac:	627b      	str	r3, [r7, #36]	; 0x24
}
 80070ae:	bf00      	nop
 80070b0:	e7fe      	b.n	80070b0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d103      	bne.n	80070c0 <xQueueGenericSendFromISR+0x3c>
 80070b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d101      	bne.n	80070c4 <xQueueGenericSendFromISR+0x40>
 80070c0:	2301      	movs	r3, #1
 80070c2:	e000      	b.n	80070c6 <xQueueGenericSendFromISR+0x42>
 80070c4:	2300      	movs	r3, #0
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d10a      	bne.n	80070e0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80070ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ce:	f383 8811 	msr	BASEPRI, r3
 80070d2:	f3bf 8f6f 	isb	sy
 80070d6:	f3bf 8f4f 	dsb	sy
 80070da:	623b      	str	r3, [r7, #32]
}
 80070dc:	bf00      	nop
 80070de:	e7fe      	b.n	80070de <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	2b02      	cmp	r3, #2
 80070e4:	d103      	bne.n	80070ee <xQueueGenericSendFromISR+0x6a>
 80070e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d101      	bne.n	80070f2 <xQueueGenericSendFromISR+0x6e>
 80070ee:	2301      	movs	r3, #1
 80070f0:	e000      	b.n	80070f4 <xQueueGenericSendFromISR+0x70>
 80070f2:	2300      	movs	r3, #0
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d10a      	bne.n	800710e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80070f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070fc:	f383 8811 	msr	BASEPRI, r3
 8007100:	f3bf 8f6f 	isb	sy
 8007104:	f3bf 8f4f 	dsb	sy
 8007108:	61fb      	str	r3, [r7, #28]
}
 800710a:	bf00      	nop
 800710c:	e7fe      	b.n	800710c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800710e:	f001 febf 	bl	8008e90 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007112:	f3ef 8211 	mrs	r2, BASEPRI
 8007116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800711a:	f383 8811 	msr	BASEPRI, r3
 800711e:	f3bf 8f6f 	isb	sy
 8007122:	f3bf 8f4f 	dsb	sy
 8007126:	61ba      	str	r2, [r7, #24]
 8007128:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800712a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800712c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800712e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007130:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007136:	429a      	cmp	r2, r3
 8007138:	d302      	bcc.n	8007140 <xQueueGenericSendFromISR+0xbc>
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	2b02      	cmp	r3, #2
 800713e:	d12c      	bne.n	800719a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007142:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007146:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800714a:	683a      	ldr	r2, [r7, #0]
 800714c:	68b9      	ldr	r1, [r7, #8]
 800714e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007150:	f000 f910 	bl	8007374 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007154:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800715c:	d112      	bne.n	8007184 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800715e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007162:	2b00      	cmp	r3, #0
 8007164:	d016      	beq.n	8007194 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007168:	3324      	adds	r3, #36	; 0x24
 800716a:	4618      	mov	r0, r3
 800716c:	f000 fede 	bl	8007f2c <xTaskRemoveFromEventList>
 8007170:	4603      	mov	r3, r0
 8007172:	2b00      	cmp	r3, #0
 8007174:	d00e      	beq.n	8007194 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d00b      	beq.n	8007194 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2201      	movs	r2, #1
 8007180:	601a      	str	r2, [r3, #0]
 8007182:	e007      	b.n	8007194 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007184:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007188:	3301      	adds	r3, #1
 800718a:	b2db      	uxtb	r3, r3
 800718c:	b25a      	sxtb	r2, r3
 800718e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007190:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007194:	2301      	movs	r3, #1
 8007196:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007198:	e001      	b.n	800719e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800719a:	2300      	movs	r3, #0
 800719c:	637b      	str	r3, [r7, #52]	; 0x34
 800719e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80071a8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80071aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3738      	adds	r7, #56	; 0x38
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b08c      	sub	sp, #48	; 0x30
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	60b9      	str	r1, [r7, #8]
 80071be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80071c0:	2300      	movs	r3, #0
 80071c2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80071c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d10a      	bne.n	80071e4 <xQueueReceive+0x30>
	__asm volatile
 80071ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d2:	f383 8811 	msr	BASEPRI, r3
 80071d6:	f3bf 8f6f 	isb	sy
 80071da:	f3bf 8f4f 	dsb	sy
 80071de:	623b      	str	r3, [r7, #32]
}
 80071e0:	bf00      	nop
 80071e2:	e7fe      	b.n	80071e2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d103      	bne.n	80071f2 <xQueueReceive+0x3e>
 80071ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d101      	bne.n	80071f6 <xQueueReceive+0x42>
 80071f2:	2301      	movs	r3, #1
 80071f4:	e000      	b.n	80071f8 <xQueueReceive+0x44>
 80071f6:	2300      	movs	r3, #0
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d10a      	bne.n	8007212 <xQueueReceive+0x5e>
	__asm volatile
 80071fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007200:	f383 8811 	msr	BASEPRI, r3
 8007204:	f3bf 8f6f 	isb	sy
 8007208:	f3bf 8f4f 	dsb	sy
 800720c:	61fb      	str	r3, [r7, #28]
}
 800720e:	bf00      	nop
 8007210:	e7fe      	b.n	8007210 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007212:	f001 f84d 	bl	80082b0 <xTaskGetSchedulerState>
 8007216:	4603      	mov	r3, r0
 8007218:	2b00      	cmp	r3, #0
 800721a:	d102      	bne.n	8007222 <xQueueReceive+0x6e>
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d101      	bne.n	8007226 <xQueueReceive+0x72>
 8007222:	2301      	movs	r3, #1
 8007224:	e000      	b.n	8007228 <xQueueReceive+0x74>
 8007226:	2300      	movs	r3, #0
 8007228:	2b00      	cmp	r3, #0
 800722a:	d10a      	bne.n	8007242 <xQueueReceive+0x8e>
	__asm volatile
 800722c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007230:	f383 8811 	msr	BASEPRI, r3
 8007234:	f3bf 8f6f 	isb	sy
 8007238:	f3bf 8f4f 	dsb	sy
 800723c:	61bb      	str	r3, [r7, #24]
}
 800723e:	bf00      	nop
 8007240:	e7fe      	b.n	8007240 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007242:	f001 fd63 	bl	8008d0c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800724a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800724c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724e:	2b00      	cmp	r3, #0
 8007250:	d01f      	beq.n	8007292 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007252:	68b9      	ldr	r1, [r7, #8]
 8007254:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007256:	f000 f8f7 	bl	8007448 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800725a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725c:	1e5a      	subs	r2, r3, #1
 800725e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007260:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007264:	691b      	ldr	r3, [r3, #16]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d00f      	beq.n	800728a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800726a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800726c:	3310      	adds	r3, #16
 800726e:	4618      	mov	r0, r3
 8007270:	f000 fe5c 	bl	8007f2c <xTaskRemoveFromEventList>
 8007274:	4603      	mov	r3, r0
 8007276:	2b00      	cmp	r3, #0
 8007278:	d007      	beq.n	800728a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800727a:	4b3d      	ldr	r3, [pc, #244]	; (8007370 <xQueueReceive+0x1bc>)
 800727c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007280:	601a      	str	r2, [r3, #0]
 8007282:	f3bf 8f4f 	dsb	sy
 8007286:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800728a:	f001 fd6f 	bl	8008d6c <vPortExitCritical>
				return pdPASS;
 800728e:	2301      	movs	r3, #1
 8007290:	e069      	b.n	8007366 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d103      	bne.n	80072a0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007298:	f001 fd68 	bl	8008d6c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800729c:	2300      	movs	r3, #0
 800729e:	e062      	b.n	8007366 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80072a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d106      	bne.n	80072b4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80072a6:	f107 0310 	add.w	r3, r7, #16
 80072aa:	4618      	mov	r0, r3
 80072ac:	f000 fea0 	bl	8007ff0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80072b0:	2301      	movs	r3, #1
 80072b2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80072b4:	f001 fd5a 	bl	8008d6c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80072b8:	f000 fc16 	bl	8007ae8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80072bc:	f001 fd26 	bl	8008d0c <vPortEnterCritical>
 80072c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80072c6:	b25b      	sxtb	r3, r3
 80072c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072cc:	d103      	bne.n	80072d6 <xQueueReceive+0x122>
 80072ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d0:	2200      	movs	r2, #0
 80072d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80072d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80072dc:	b25b      	sxtb	r3, r3
 80072de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072e2:	d103      	bne.n	80072ec <xQueueReceive+0x138>
 80072e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072e6:	2200      	movs	r2, #0
 80072e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80072ec:	f001 fd3e 	bl	8008d6c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80072f0:	1d3a      	adds	r2, r7, #4
 80072f2:	f107 0310 	add.w	r3, r7, #16
 80072f6:	4611      	mov	r1, r2
 80072f8:	4618      	mov	r0, r3
 80072fa:	f000 fe8f 	bl	800801c <xTaskCheckForTimeOut>
 80072fe:	4603      	mov	r3, r0
 8007300:	2b00      	cmp	r3, #0
 8007302:	d123      	bne.n	800734c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007304:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007306:	f000 f917 	bl	8007538 <prvIsQueueEmpty>
 800730a:	4603      	mov	r3, r0
 800730c:	2b00      	cmp	r3, #0
 800730e:	d017      	beq.n	8007340 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007312:	3324      	adds	r3, #36	; 0x24
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	4611      	mov	r1, r2
 8007318:	4618      	mov	r0, r3
 800731a:	f000 fdb7 	bl	8007e8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800731e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007320:	f000 f8b8 	bl	8007494 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007324:	f000 fbee 	bl	8007b04 <xTaskResumeAll>
 8007328:	4603      	mov	r3, r0
 800732a:	2b00      	cmp	r3, #0
 800732c:	d189      	bne.n	8007242 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800732e:	4b10      	ldr	r3, [pc, #64]	; (8007370 <xQueueReceive+0x1bc>)
 8007330:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007334:	601a      	str	r2, [r3, #0]
 8007336:	f3bf 8f4f 	dsb	sy
 800733a:	f3bf 8f6f 	isb	sy
 800733e:	e780      	b.n	8007242 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007340:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007342:	f000 f8a7 	bl	8007494 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007346:	f000 fbdd 	bl	8007b04 <xTaskResumeAll>
 800734a:	e77a      	b.n	8007242 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800734c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800734e:	f000 f8a1 	bl	8007494 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007352:	f000 fbd7 	bl	8007b04 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007356:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007358:	f000 f8ee 	bl	8007538 <prvIsQueueEmpty>
 800735c:	4603      	mov	r3, r0
 800735e:	2b00      	cmp	r3, #0
 8007360:	f43f af6f 	beq.w	8007242 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007364:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007366:	4618      	mov	r0, r3
 8007368:	3730      	adds	r7, #48	; 0x30
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}
 800736e:	bf00      	nop
 8007370:	e000ed04 	.word	0xe000ed04

08007374 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b086      	sub	sp, #24
 8007378:	af00      	add	r7, sp, #0
 800737a:	60f8      	str	r0, [r7, #12]
 800737c:	60b9      	str	r1, [r7, #8]
 800737e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007380:	2300      	movs	r3, #0
 8007382:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007388:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800738e:	2b00      	cmp	r3, #0
 8007390:	d10d      	bne.n	80073ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d14d      	bne.n	8007436 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	689b      	ldr	r3, [r3, #8]
 800739e:	4618      	mov	r0, r3
 80073a0:	f000 ffa4 	bl	80082ec <xTaskPriorityDisinherit>
 80073a4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2200      	movs	r2, #0
 80073aa:	609a      	str	r2, [r3, #8]
 80073ac:	e043      	b.n	8007436 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d119      	bne.n	80073e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	6858      	ldr	r0, [r3, #4]
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073bc:	461a      	mov	r2, r3
 80073be:	68b9      	ldr	r1, [r7, #8]
 80073c0:	f002 f89f 	bl	8009502 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	685a      	ldr	r2, [r3, #4]
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073cc:	441a      	add	r2, r3
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	685a      	ldr	r2, [r3, #4]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	429a      	cmp	r2, r3
 80073dc:	d32b      	bcc.n	8007436 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	605a      	str	r2, [r3, #4]
 80073e6:	e026      	b.n	8007436 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	68d8      	ldr	r0, [r3, #12]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f0:	461a      	mov	r2, r3
 80073f2:	68b9      	ldr	r1, [r7, #8]
 80073f4:	f002 f885 	bl	8009502 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	68da      	ldr	r2, [r3, #12]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007400:	425b      	negs	r3, r3
 8007402:	441a      	add	r2, r3
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	68da      	ldr	r2, [r3, #12]
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	429a      	cmp	r2, r3
 8007412:	d207      	bcs.n	8007424 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	689a      	ldr	r2, [r3, #8]
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800741c:	425b      	negs	r3, r3
 800741e:	441a      	add	r2, r3
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2b02      	cmp	r3, #2
 8007428:	d105      	bne.n	8007436 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d002      	beq.n	8007436 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	3b01      	subs	r3, #1
 8007434:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	1c5a      	adds	r2, r3, #1
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800743e:	697b      	ldr	r3, [r7, #20]
}
 8007440:	4618      	mov	r0, r3
 8007442:	3718      	adds	r7, #24
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}

08007448 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b082      	sub	sp, #8
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007456:	2b00      	cmp	r3, #0
 8007458:	d018      	beq.n	800748c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	68da      	ldr	r2, [r3, #12]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007462:	441a      	add	r2, r3
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	68da      	ldr	r2, [r3, #12]
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	689b      	ldr	r3, [r3, #8]
 8007470:	429a      	cmp	r2, r3
 8007472:	d303      	bcc.n	800747c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681a      	ldr	r2, [r3, #0]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	68d9      	ldr	r1, [r3, #12]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007484:	461a      	mov	r2, r3
 8007486:	6838      	ldr	r0, [r7, #0]
 8007488:	f002 f83b 	bl	8009502 <memcpy>
	}
}
 800748c:	bf00      	nop
 800748e:	3708      	adds	r7, #8
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}

08007494 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b084      	sub	sp, #16
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800749c:	f001 fc36 	bl	8008d0c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80074a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80074a8:	e011      	b.n	80074ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d012      	beq.n	80074d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	3324      	adds	r3, #36	; 0x24
 80074b6:	4618      	mov	r0, r3
 80074b8:	f000 fd38 	bl	8007f2c <xTaskRemoveFromEventList>
 80074bc:	4603      	mov	r3, r0
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d001      	beq.n	80074c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80074c2:	f000 fe0d 	bl	80080e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80074c6:	7bfb      	ldrb	r3, [r7, #15]
 80074c8:	3b01      	subs	r3, #1
 80074ca:	b2db      	uxtb	r3, r3
 80074cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80074ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	dce9      	bgt.n	80074aa <prvUnlockQueue+0x16>
 80074d6:	e000      	b.n	80074da <prvUnlockQueue+0x46>
					break;
 80074d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	22ff      	movs	r2, #255	; 0xff
 80074de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80074e2:	f001 fc43 	bl	8008d6c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80074e6:	f001 fc11 	bl	8008d0c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80074f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80074f2:	e011      	b.n	8007518 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	691b      	ldr	r3, [r3, #16]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d012      	beq.n	8007522 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	3310      	adds	r3, #16
 8007500:	4618      	mov	r0, r3
 8007502:	f000 fd13 	bl	8007f2c <xTaskRemoveFromEventList>
 8007506:	4603      	mov	r3, r0
 8007508:	2b00      	cmp	r3, #0
 800750a:	d001      	beq.n	8007510 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800750c:	f000 fde8 	bl	80080e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007510:	7bbb      	ldrb	r3, [r7, #14]
 8007512:	3b01      	subs	r3, #1
 8007514:	b2db      	uxtb	r3, r3
 8007516:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007518:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800751c:	2b00      	cmp	r3, #0
 800751e:	dce9      	bgt.n	80074f4 <prvUnlockQueue+0x60>
 8007520:	e000      	b.n	8007524 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007522:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	22ff      	movs	r2, #255	; 0xff
 8007528:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800752c:	f001 fc1e 	bl	8008d6c <vPortExitCritical>
}
 8007530:	bf00      	nop
 8007532:	3710      	adds	r7, #16
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}

08007538 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b084      	sub	sp, #16
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007540:	f001 fbe4 	bl	8008d0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007548:	2b00      	cmp	r3, #0
 800754a:	d102      	bne.n	8007552 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800754c:	2301      	movs	r3, #1
 800754e:	60fb      	str	r3, [r7, #12]
 8007550:	e001      	b.n	8007556 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007552:	2300      	movs	r3, #0
 8007554:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007556:	f001 fc09 	bl	8008d6c <vPortExitCritical>

	return xReturn;
 800755a:	68fb      	ldr	r3, [r7, #12]
}
 800755c:	4618      	mov	r0, r3
 800755e:	3710      	adds	r7, #16
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b084      	sub	sp, #16
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800756c:	f001 fbce 	bl	8008d0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007578:	429a      	cmp	r2, r3
 800757a:	d102      	bne.n	8007582 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800757c:	2301      	movs	r3, #1
 800757e:	60fb      	str	r3, [r7, #12]
 8007580:	e001      	b.n	8007586 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007582:	2300      	movs	r3, #0
 8007584:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007586:	f001 fbf1 	bl	8008d6c <vPortExitCritical>

	return xReturn;
 800758a:	68fb      	ldr	r3, [r7, #12]
}
 800758c:	4618      	mov	r0, r3
 800758e:	3710      	adds	r7, #16
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007594:	b480      	push	{r7}
 8007596:	b085      	sub	sp, #20
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800759e:	2300      	movs	r3, #0
 80075a0:	60fb      	str	r3, [r7, #12]
 80075a2:	e014      	b.n	80075ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80075a4:	4a0e      	ldr	r2, [pc, #56]	; (80075e0 <vQueueAddToRegistry+0x4c>)
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d10b      	bne.n	80075c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80075b0:	490b      	ldr	r1, [pc, #44]	; (80075e0 <vQueueAddToRegistry+0x4c>)
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	683a      	ldr	r2, [r7, #0]
 80075b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80075ba:	4a09      	ldr	r2, [pc, #36]	; (80075e0 <vQueueAddToRegistry+0x4c>)
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	00db      	lsls	r3, r3, #3
 80075c0:	4413      	add	r3, r2
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80075c6:	e006      	b.n	80075d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	3301      	adds	r3, #1
 80075cc:	60fb      	str	r3, [r7, #12]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2b07      	cmp	r3, #7
 80075d2:	d9e7      	bls.n	80075a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80075d4:	bf00      	nop
 80075d6:	bf00      	nop
 80075d8:	3714      	adds	r7, #20
 80075da:	46bd      	mov	sp, r7
 80075dc:	bc80      	pop	{r7}
 80075de:	4770      	bx	lr
 80075e0:	20000bd0 	.word	0x20000bd0

080075e4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b086      	sub	sp, #24
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	60f8      	str	r0, [r7, #12]
 80075ec:	60b9      	str	r1, [r7, #8]
 80075ee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80075f4:	f001 fb8a 	bl	8008d0c <vPortEnterCritical>
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80075fe:	b25b      	sxtb	r3, r3
 8007600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007604:	d103      	bne.n	800760e <vQueueWaitForMessageRestricted+0x2a>
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	2200      	movs	r2, #0
 800760a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007614:	b25b      	sxtb	r3, r3
 8007616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800761a:	d103      	bne.n	8007624 <vQueueWaitForMessageRestricted+0x40>
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	2200      	movs	r2, #0
 8007620:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007624:	f001 fba2 	bl	8008d6c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007628:	697b      	ldr	r3, [r7, #20]
 800762a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800762c:	2b00      	cmp	r3, #0
 800762e:	d106      	bne.n	800763e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	3324      	adds	r3, #36	; 0x24
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	68b9      	ldr	r1, [r7, #8]
 8007638:	4618      	mov	r0, r3
 800763a:	f000 fc4b 	bl	8007ed4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800763e:	6978      	ldr	r0, [r7, #20]
 8007640:	f7ff ff28 	bl	8007494 <prvUnlockQueue>
	}
 8007644:	bf00      	nop
 8007646:	3718      	adds	r7, #24
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800764c:	b580      	push	{r7, lr}
 800764e:	b08e      	sub	sp, #56	; 0x38
 8007650:	af04      	add	r7, sp, #16
 8007652:	60f8      	str	r0, [r7, #12]
 8007654:	60b9      	str	r1, [r7, #8]
 8007656:	607a      	str	r2, [r7, #4]
 8007658:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800765a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800765c:	2b00      	cmp	r3, #0
 800765e:	d10a      	bne.n	8007676 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007664:	f383 8811 	msr	BASEPRI, r3
 8007668:	f3bf 8f6f 	isb	sy
 800766c:	f3bf 8f4f 	dsb	sy
 8007670:	623b      	str	r3, [r7, #32]
}
 8007672:	bf00      	nop
 8007674:	e7fe      	b.n	8007674 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007678:	2b00      	cmp	r3, #0
 800767a:	d10a      	bne.n	8007692 <xTaskCreateStatic+0x46>
	__asm volatile
 800767c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007680:	f383 8811 	msr	BASEPRI, r3
 8007684:	f3bf 8f6f 	isb	sy
 8007688:	f3bf 8f4f 	dsb	sy
 800768c:	61fb      	str	r3, [r7, #28]
}
 800768e:	bf00      	nop
 8007690:	e7fe      	b.n	8007690 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007692:	23b4      	movs	r3, #180	; 0xb4
 8007694:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	2bb4      	cmp	r3, #180	; 0xb4
 800769a:	d00a      	beq.n	80076b2 <xTaskCreateStatic+0x66>
	__asm volatile
 800769c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076a0:	f383 8811 	msr	BASEPRI, r3
 80076a4:	f3bf 8f6f 	isb	sy
 80076a8:	f3bf 8f4f 	dsb	sy
 80076ac:	61bb      	str	r3, [r7, #24]
}
 80076ae:	bf00      	nop
 80076b0:	e7fe      	b.n	80076b0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80076b2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80076b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d01e      	beq.n	80076f8 <xTaskCreateStatic+0xac>
 80076ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d01b      	beq.n	80076f8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80076c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076c2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80076c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80076c8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80076ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076cc:	2202      	movs	r2, #2
 80076ce:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80076d2:	2300      	movs	r3, #0
 80076d4:	9303      	str	r3, [sp, #12]
 80076d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d8:	9302      	str	r3, [sp, #8]
 80076da:	f107 0314 	add.w	r3, r7, #20
 80076de:	9301      	str	r3, [sp, #4]
 80076e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e2:	9300      	str	r3, [sp, #0]
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	687a      	ldr	r2, [r7, #4]
 80076e8:	68b9      	ldr	r1, [r7, #8]
 80076ea:	68f8      	ldr	r0, [r7, #12]
 80076ec:	f000 f850 	bl	8007790 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80076f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80076f2:	f000 f8eb 	bl	80078cc <prvAddNewTaskToReadyList>
 80076f6:	e001      	b.n	80076fc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80076f8:	2300      	movs	r3, #0
 80076fa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80076fc:	697b      	ldr	r3, [r7, #20]
	}
 80076fe:	4618      	mov	r0, r3
 8007700:	3728      	adds	r7, #40	; 0x28
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}

08007706 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007706:	b580      	push	{r7, lr}
 8007708:	b08c      	sub	sp, #48	; 0x30
 800770a:	af04      	add	r7, sp, #16
 800770c:	60f8      	str	r0, [r7, #12]
 800770e:	60b9      	str	r1, [r7, #8]
 8007710:	603b      	str	r3, [r7, #0]
 8007712:	4613      	mov	r3, r2
 8007714:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007716:	88fb      	ldrh	r3, [r7, #6]
 8007718:	009b      	lsls	r3, r3, #2
 800771a:	4618      	mov	r0, r3
 800771c:	f001 fbf6 	bl	8008f0c <pvPortMalloc>
 8007720:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d00e      	beq.n	8007746 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007728:	20b4      	movs	r0, #180	; 0xb4
 800772a:	f001 fbef 	bl	8008f0c <pvPortMalloc>
 800772e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007730:	69fb      	ldr	r3, [r7, #28]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d003      	beq.n	800773e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007736:	69fb      	ldr	r3, [r7, #28]
 8007738:	697a      	ldr	r2, [r7, #20]
 800773a:	631a      	str	r2, [r3, #48]	; 0x30
 800773c:	e005      	b.n	800774a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800773e:	6978      	ldr	r0, [r7, #20]
 8007740:	f001 fca8 	bl	8009094 <vPortFree>
 8007744:	e001      	b.n	800774a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007746:	2300      	movs	r3, #0
 8007748:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800774a:	69fb      	ldr	r3, [r7, #28]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d017      	beq.n	8007780 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007750:	69fb      	ldr	r3, [r7, #28]
 8007752:	2200      	movs	r2, #0
 8007754:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007758:	88fa      	ldrh	r2, [r7, #6]
 800775a:	2300      	movs	r3, #0
 800775c:	9303      	str	r3, [sp, #12]
 800775e:	69fb      	ldr	r3, [r7, #28]
 8007760:	9302      	str	r3, [sp, #8]
 8007762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007764:	9301      	str	r3, [sp, #4]
 8007766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007768:	9300      	str	r3, [sp, #0]
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	68b9      	ldr	r1, [r7, #8]
 800776e:	68f8      	ldr	r0, [r7, #12]
 8007770:	f000 f80e 	bl	8007790 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007774:	69f8      	ldr	r0, [r7, #28]
 8007776:	f000 f8a9 	bl	80078cc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800777a:	2301      	movs	r3, #1
 800777c:	61bb      	str	r3, [r7, #24]
 800777e:	e002      	b.n	8007786 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007780:	f04f 33ff 	mov.w	r3, #4294967295
 8007784:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007786:	69bb      	ldr	r3, [r7, #24]
	}
 8007788:	4618      	mov	r0, r3
 800778a:	3720      	adds	r7, #32
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b088      	sub	sp, #32
 8007794:	af00      	add	r7, sp, #0
 8007796:	60f8      	str	r0, [r7, #12]
 8007798:	60b9      	str	r1, [r7, #8]
 800779a:	607a      	str	r2, [r7, #4]
 800779c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800779e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80077a8:	3b01      	subs	r3, #1
 80077aa:	009b      	lsls	r3, r3, #2
 80077ac:	4413      	add	r3, r2
 80077ae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80077b0:	69bb      	ldr	r3, [r7, #24]
 80077b2:	f023 0307 	bic.w	r3, r3, #7
 80077b6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80077b8:	69bb      	ldr	r3, [r7, #24]
 80077ba:	f003 0307 	and.w	r3, r3, #7
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d00a      	beq.n	80077d8 <prvInitialiseNewTask+0x48>
	__asm volatile
 80077c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c6:	f383 8811 	msr	BASEPRI, r3
 80077ca:	f3bf 8f6f 	isb	sy
 80077ce:	f3bf 8f4f 	dsb	sy
 80077d2:	617b      	str	r3, [r7, #20]
}
 80077d4:	bf00      	nop
 80077d6:	e7fe      	b.n	80077d6 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d01f      	beq.n	800781e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80077de:	2300      	movs	r3, #0
 80077e0:	61fb      	str	r3, [r7, #28]
 80077e2:	e012      	b.n	800780a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80077e4:	68ba      	ldr	r2, [r7, #8]
 80077e6:	69fb      	ldr	r3, [r7, #28]
 80077e8:	4413      	add	r3, r2
 80077ea:	7819      	ldrb	r1, [r3, #0]
 80077ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077ee:	69fb      	ldr	r3, [r7, #28]
 80077f0:	4413      	add	r3, r2
 80077f2:	3334      	adds	r3, #52	; 0x34
 80077f4:	460a      	mov	r2, r1
 80077f6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80077f8:	68ba      	ldr	r2, [r7, #8]
 80077fa:	69fb      	ldr	r3, [r7, #28]
 80077fc:	4413      	add	r3, r2
 80077fe:	781b      	ldrb	r3, [r3, #0]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d006      	beq.n	8007812 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007804:	69fb      	ldr	r3, [r7, #28]
 8007806:	3301      	adds	r3, #1
 8007808:	61fb      	str	r3, [r7, #28]
 800780a:	69fb      	ldr	r3, [r7, #28]
 800780c:	2b0f      	cmp	r3, #15
 800780e:	d9e9      	bls.n	80077e4 <prvInitialiseNewTask+0x54>
 8007810:	e000      	b.n	8007814 <prvInitialiseNewTask+0x84>
			{
				break;
 8007812:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007816:	2200      	movs	r2, #0
 8007818:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800781c:	e003      	b.n	8007826 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800781e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007820:	2200      	movs	r2, #0
 8007822:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007828:	2b06      	cmp	r3, #6
 800782a:	d901      	bls.n	8007830 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800782c:	2306      	movs	r3, #6
 800782e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007832:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007834:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007838:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800783a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800783c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800783e:	2200      	movs	r2, #0
 8007840:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007844:	3304      	adds	r3, #4
 8007846:	4618      	mov	r0, r3
 8007848:	f7ff f901 	bl	8006a4e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800784c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800784e:	3318      	adds	r3, #24
 8007850:	4618      	mov	r0, r3
 8007852:	f7ff f8fc 	bl	8006a4e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007858:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800785a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800785c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800785e:	f1c3 0207 	rsb	r2, r3, #7
 8007862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007864:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007868:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800786a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800786c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800786e:	2200      	movs	r2, #0
 8007870:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007876:	2200      	movs	r2, #0
 8007878:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800787c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800787e:	334c      	adds	r3, #76	; 0x4c
 8007880:	2260      	movs	r2, #96	; 0x60
 8007882:	2100      	movs	r1, #0
 8007884:	4618      	mov	r0, r3
 8007886:	f001 fe4a 	bl	800951e <memset>
 800788a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800788c:	4a0c      	ldr	r2, [pc, #48]	; (80078c0 <prvInitialiseNewTask+0x130>)
 800788e:	651a      	str	r2, [r3, #80]	; 0x50
 8007890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007892:	4a0c      	ldr	r2, [pc, #48]	; (80078c4 <prvInitialiseNewTask+0x134>)
 8007894:	655a      	str	r2, [r3, #84]	; 0x54
 8007896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007898:	4a0b      	ldr	r2, [pc, #44]	; (80078c8 <prvInitialiseNewTask+0x138>)
 800789a:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800789c:	683a      	ldr	r2, [r7, #0]
 800789e:	68f9      	ldr	r1, [r7, #12]
 80078a0:	69b8      	ldr	r0, [r7, #24]
 80078a2:	f001 f93f 	bl	8008b24 <pxPortInitialiseStack>
 80078a6:	4602      	mov	r2, r0
 80078a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078aa:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80078ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d002      	beq.n	80078b8 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80078b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078b6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80078b8:	bf00      	nop
 80078ba:	3720      	adds	r7, #32
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}
 80078c0:	0800b090 	.word	0x0800b090
 80078c4:	0800b0b0 	.word	0x0800b0b0
 80078c8:	0800b070 	.word	0x0800b070

080078cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b082      	sub	sp, #8
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80078d4:	f001 fa1a 	bl	8008d0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80078d8:	4b2a      	ldr	r3, [pc, #168]	; (8007984 <prvAddNewTaskToReadyList+0xb8>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	3301      	adds	r3, #1
 80078de:	4a29      	ldr	r2, [pc, #164]	; (8007984 <prvAddNewTaskToReadyList+0xb8>)
 80078e0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80078e2:	4b29      	ldr	r3, [pc, #164]	; (8007988 <prvAddNewTaskToReadyList+0xbc>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d109      	bne.n	80078fe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80078ea:	4a27      	ldr	r2, [pc, #156]	; (8007988 <prvAddNewTaskToReadyList+0xbc>)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80078f0:	4b24      	ldr	r3, [pc, #144]	; (8007984 <prvAddNewTaskToReadyList+0xb8>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d110      	bne.n	800791a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80078f8:	f000 fc18 	bl	800812c <prvInitialiseTaskLists>
 80078fc:	e00d      	b.n	800791a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80078fe:	4b23      	ldr	r3, [pc, #140]	; (800798c <prvAddNewTaskToReadyList+0xc0>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d109      	bne.n	800791a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007906:	4b20      	ldr	r3, [pc, #128]	; (8007988 <prvAddNewTaskToReadyList+0xbc>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007910:	429a      	cmp	r2, r3
 8007912:	d802      	bhi.n	800791a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007914:	4a1c      	ldr	r2, [pc, #112]	; (8007988 <prvAddNewTaskToReadyList+0xbc>)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800791a:	4b1d      	ldr	r3, [pc, #116]	; (8007990 <prvAddNewTaskToReadyList+0xc4>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	3301      	adds	r3, #1
 8007920:	4a1b      	ldr	r2, [pc, #108]	; (8007990 <prvAddNewTaskToReadyList+0xc4>)
 8007922:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007928:	2201      	movs	r2, #1
 800792a:	409a      	lsls	r2, r3
 800792c:	4b19      	ldr	r3, [pc, #100]	; (8007994 <prvAddNewTaskToReadyList+0xc8>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4313      	orrs	r3, r2
 8007932:	4a18      	ldr	r2, [pc, #96]	; (8007994 <prvAddNewTaskToReadyList+0xc8>)
 8007934:	6013      	str	r3, [r2, #0]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800793a:	4613      	mov	r3, r2
 800793c:	009b      	lsls	r3, r3, #2
 800793e:	4413      	add	r3, r2
 8007940:	009b      	lsls	r3, r3, #2
 8007942:	4a15      	ldr	r2, [pc, #84]	; (8007998 <prvAddNewTaskToReadyList+0xcc>)
 8007944:	441a      	add	r2, r3
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	3304      	adds	r3, #4
 800794a:	4619      	mov	r1, r3
 800794c:	4610      	mov	r0, r2
 800794e:	f7ff f88a 	bl	8006a66 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007952:	f001 fa0b 	bl	8008d6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007956:	4b0d      	ldr	r3, [pc, #52]	; (800798c <prvAddNewTaskToReadyList+0xc0>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00e      	beq.n	800797c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800795e:	4b0a      	ldr	r3, [pc, #40]	; (8007988 <prvAddNewTaskToReadyList+0xbc>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007968:	429a      	cmp	r2, r3
 800796a:	d207      	bcs.n	800797c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800796c:	4b0b      	ldr	r3, [pc, #44]	; (800799c <prvAddNewTaskToReadyList+0xd0>)
 800796e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007972:	601a      	str	r2, [r3, #0]
 8007974:	f3bf 8f4f 	dsb	sy
 8007978:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800797c:	bf00      	nop
 800797e:	3708      	adds	r7, #8
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}
 8007984:	20000d10 	.word	0x20000d10
 8007988:	20000c10 	.word	0x20000c10
 800798c:	20000d1c 	.word	0x20000d1c
 8007990:	20000d2c 	.word	0x20000d2c
 8007994:	20000d18 	.word	0x20000d18
 8007998:	20000c14 	.word	0x20000c14
 800799c:	e000ed04 	.word	0xe000ed04

080079a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b084      	sub	sp, #16
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80079a8:	2300      	movs	r3, #0
 80079aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d017      	beq.n	80079e2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80079b2:	4b13      	ldr	r3, [pc, #76]	; (8007a00 <vTaskDelay+0x60>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d00a      	beq.n	80079d0 <vTaskDelay+0x30>
	__asm volatile
 80079ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079be:	f383 8811 	msr	BASEPRI, r3
 80079c2:	f3bf 8f6f 	isb	sy
 80079c6:	f3bf 8f4f 	dsb	sy
 80079ca:	60bb      	str	r3, [r7, #8]
}
 80079cc:	bf00      	nop
 80079ce:	e7fe      	b.n	80079ce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80079d0:	f000 f88a 	bl	8007ae8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80079d4:	2100      	movs	r1, #0
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 fd0e 	bl	80083f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80079dc:	f000 f892 	bl	8007b04 <xTaskResumeAll>
 80079e0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d107      	bne.n	80079f8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80079e8:	4b06      	ldr	r3, [pc, #24]	; (8007a04 <vTaskDelay+0x64>)
 80079ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079ee:	601a      	str	r2, [r3, #0]
 80079f0:	f3bf 8f4f 	dsb	sy
 80079f4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80079f8:	bf00      	nop
 80079fa:	3710      	adds	r7, #16
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}
 8007a00:	20000d38 	.word	0x20000d38
 8007a04:	e000ed04 	.word	0xe000ed04

08007a08 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b08a      	sub	sp, #40	; 0x28
 8007a0c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007a12:	2300      	movs	r3, #0
 8007a14:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007a16:	463a      	mov	r2, r7
 8007a18:	1d39      	adds	r1, r7, #4
 8007a1a:	f107 0308 	add.w	r3, r7, #8
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f7f8 fd8e 	bl	8000540 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007a24:	6839      	ldr	r1, [r7, #0]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	68ba      	ldr	r2, [r7, #8]
 8007a2a:	9202      	str	r2, [sp, #8]
 8007a2c:	9301      	str	r3, [sp, #4]
 8007a2e:	2300      	movs	r3, #0
 8007a30:	9300      	str	r3, [sp, #0]
 8007a32:	2300      	movs	r3, #0
 8007a34:	460a      	mov	r2, r1
 8007a36:	4924      	ldr	r1, [pc, #144]	; (8007ac8 <vTaskStartScheduler+0xc0>)
 8007a38:	4824      	ldr	r0, [pc, #144]	; (8007acc <vTaskStartScheduler+0xc4>)
 8007a3a:	f7ff fe07 	bl	800764c <xTaskCreateStatic>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	4a23      	ldr	r2, [pc, #140]	; (8007ad0 <vTaskStartScheduler+0xc8>)
 8007a42:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007a44:	4b22      	ldr	r3, [pc, #136]	; (8007ad0 <vTaskStartScheduler+0xc8>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d002      	beq.n	8007a52 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	617b      	str	r3, [r7, #20]
 8007a50:	e001      	b.n	8007a56 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007a52:	2300      	movs	r3, #0
 8007a54:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d102      	bne.n	8007a62 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007a5c:	f000 fd32 	bl	80084c4 <xTimerCreateTimerTask>
 8007a60:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d11b      	bne.n	8007aa0 <vTaskStartScheduler+0x98>
	__asm volatile
 8007a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a6c:	f383 8811 	msr	BASEPRI, r3
 8007a70:	f3bf 8f6f 	isb	sy
 8007a74:	f3bf 8f4f 	dsb	sy
 8007a78:	613b      	str	r3, [r7, #16]
}
 8007a7a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007a7c:	4b15      	ldr	r3, [pc, #84]	; (8007ad4 <vTaskStartScheduler+0xcc>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	334c      	adds	r3, #76	; 0x4c
 8007a82:	4a15      	ldr	r2, [pc, #84]	; (8007ad8 <vTaskStartScheduler+0xd0>)
 8007a84:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007a86:	4b15      	ldr	r3, [pc, #84]	; (8007adc <vTaskStartScheduler+0xd4>)
 8007a88:	f04f 32ff 	mov.w	r2, #4294967295
 8007a8c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007a8e:	4b14      	ldr	r3, [pc, #80]	; (8007ae0 <vTaskStartScheduler+0xd8>)
 8007a90:	2201      	movs	r2, #1
 8007a92:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007a94:	4b13      	ldr	r3, [pc, #76]	; (8007ae4 <vTaskStartScheduler+0xdc>)
 8007a96:	2200      	movs	r2, #0
 8007a98:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007a9a:	f001 f8c5 	bl	8008c28 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007a9e:	e00e      	b.n	8007abe <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aa6:	d10a      	bne.n	8007abe <vTaskStartScheduler+0xb6>
	__asm volatile
 8007aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aac:	f383 8811 	msr	BASEPRI, r3
 8007ab0:	f3bf 8f6f 	isb	sy
 8007ab4:	f3bf 8f4f 	dsb	sy
 8007ab8:	60fb      	str	r3, [r7, #12]
}
 8007aba:	bf00      	nop
 8007abc:	e7fe      	b.n	8007abc <vTaskStartScheduler+0xb4>
}
 8007abe:	bf00      	nop
 8007ac0:	3718      	adds	r7, #24
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
 8007ac6:	bf00      	nop
 8007ac8:	0800a950 	.word	0x0800a950
 8007acc:	080080f9 	.word	0x080080f9
 8007ad0:	20000d34 	.word	0x20000d34
 8007ad4:	20000c10 	.word	0x20000c10
 8007ad8:	20000010 	.word	0x20000010
 8007adc:	20000d30 	.word	0x20000d30
 8007ae0:	20000d1c 	.word	0x20000d1c
 8007ae4:	20000d14 	.word	0x20000d14

08007ae8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007ae8:	b480      	push	{r7}
 8007aea:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007aec:	4b04      	ldr	r3, [pc, #16]	; (8007b00 <vTaskSuspendAll+0x18>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	3301      	adds	r3, #1
 8007af2:	4a03      	ldr	r2, [pc, #12]	; (8007b00 <vTaskSuspendAll+0x18>)
 8007af4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007af6:	bf00      	nop
 8007af8:	46bd      	mov	sp, r7
 8007afa:	bc80      	pop	{r7}
 8007afc:	4770      	bx	lr
 8007afe:	bf00      	nop
 8007b00:	20000d38 	.word	0x20000d38

08007b04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b084      	sub	sp, #16
 8007b08:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007b0e:	2300      	movs	r3, #0
 8007b10:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007b12:	4b41      	ldr	r3, [pc, #260]	; (8007c18 <xTaskResumeAll+0x114>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d10a      	bne.n	8007b30 <xTaskResumeAll+0x2c>
	__asm volatile
 8007b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b1e:	f383 8811 	msr	BASEPRI, r3
 8007b22:	f3bf 8f6f 	isb	sy
 8007b26:	f3bf 8f4f 	dsb	sy
 8007b2a:	603b      	str	r3, [r7, #0]
}
 8007b2c:	bf00      	nop
 8007b2e:	e7fe      	b.n	8007b2e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007b30:	f001 f8ec 	bl	8008d0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007b34:	4b38      	ldr	r3, [pc, #224]	; (8007c18 <xTaskResumeAll+0x114>)
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	3b01      	subs	r3, #1
 8007b3a:	4a37      	ldr	r2, [pc, #220]	; (8007c18 <xTaskResumeAll+0x114>)
 8007b3c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b3e:	4b36      	ldr	r3, [pc, #216]	; (8007c18 <xTaskResumeAll+0x114>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d161      	bne.n	8007c0a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007b46:	4b35      	ldr	r3, [pc, #212]	; (8007c1c <xTaskResumeAll+0x118>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d05d      	beq.n	8007c0a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007b4e:	e02e      	b.n	8007bae <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b50:	4b33      	ldr	r3, [pc, #204]	; (8007c20 <xTaskResumeAll+0x11c>)
 8007b52:	68db      	ldr	r3, [r3, #12]
 8007b54:	68db      	ldr	r3, [r3, #12]
 8007b56:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	3318      	adds	r3, #24
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f7fe ffdd 	bl	8006b1c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	3304      	adds	r3, #4
 8007b66:	4618      	mov	r0, r3
 8007b68:	f7fe ffd8 	bl	8006b1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b70:	2201      	movs	r2, #1
 8007b72:	409a      	lsls	r2, r3
 8007b74:	4b2b      	ldr	r3, [pc, #172]	; (8007c24 <xTaskResumeAll+0x120>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	4a2a      	ldr	r2, [pc, #168]	; (8007c24 <xTaskResumeAll+0x120>)
 8007b7c:	6013      	str	r3, [r2, #0]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b82:	4613      	mov	r3, r2
 8007b84:	009b      	lsls	r3, r3, #2
 8007b86:	4413      	add	r3, r2
 8007b88:	009b      	lsls	r3, r3, #2
 8007b8a:	4a27      	ldr	r2, [pc, #156]	; (8007c28 <xTaskResumeAll+0x124>)
 8007b8c:	441a      	add	r2, r3
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	3304      	adds	r3, #4
 8007b92:	4619      	mov	r1, r3
 8007b94:	4610      	mov	r0, r2
 8007b96:	f7fe ff66 	bl	8006a66 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b9e:	4b23      	ldr	r3, [pc, #140]	; (8007c2c <xTaskResumeAll+0x128>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d302      	bcc.n	8007bae <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007ba8:	4b21      	ldr	r3, [pc, #132]	; (8007c30 <xTaskResumeAll+0x12c>)
 8007baa:	2201      	movs	r2, #1
 8007bac:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007bae:	4b1c      	ldr	r3, [pc, #112]	; (8007c20 <xTaskResumeAll+0x11c>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d1cc      	bne.n	8007b50 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d001      	beq.n	8007bc0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007bbc:	f000 fb58 	bl	8008270 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007bc0:	4b1c      	ldr	r3, [pc, #112]	; (8007c34 <xTaskResumeAll+0x130>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d010      	beq.n	8007bee <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007bcc:	f000 f844 	bl	8007c58 <xTaskIncrementTick>
 8007bd0:	4603      	mov	r3, r0
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d002      	beq.n	8007bdc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007bd6:	4b16      	ldr	r3, [pc, #88]	; (8007c30 <xTaskResumeAll+0x12c>)
 8007bd8:	2201      	movs	r2, #1
 8007bda:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	3b01      	subs	r3, #1
 8007be0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d1f1      	bne.n	8007bcc <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8007be8:	4b12      	ldr	r3, [pc, #72]	; (8007c34 <xTaskResumeAll+0x130>)
 8007bea:	2200      	movs	r2, #0
 8007bec:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007bee:	4b10      	ldr	r3, [pc, #64]	; (8007c30 <xTaskResumeAll+0x12c>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d009      	beq.n	8007c0a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007bfa:	4b0f      	ldr	r3, [pc, #60]	; (8007c38 <xTaskResumeAll+0x134>)
 8007bfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c00:	601a      	str	r2, [r3, #0]
 8007c02:	f3bf 8f4f 	dsb	sy
 8007c06:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007c0a:	f001 f8af 	bl	8008d6c <vPortExitCritical>

	return xAlreadyYielded;
 8007c0e:	68bb      	ldr	r3, [r7, #8]
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3710      	adds	r7, #16
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}
 8007c18:	20000d38 	.word	0x20000d38
 8007c1c:	20000d10 	.word	0x20000d10
 8007c20:	20000cd0 	.word	0x20000cd0
 8007c24:	20000d18 	.word	0x20000d18
 8007c28:	20000c14 	.word	0x20000c14
 8007c2c:	20000c10 	.word	0x20000c10
 8007c30:	20000d24 	.word	0x20000d24
 8007c34:	20000d20 	.word	0x20000d20
 8007c38:	e000ed04 	.word	0xe000ed04

08007c3c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	b083      	sub	sp, #12
 8007c40:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007c42:	4b04      	ldr	r3, [pc, #16]	; (8007c54 <xTaskGetTickCount+0x18>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007c48:	687b      	ldr	r3, [r7, #4]
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	370c      	adds	r7, #12
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bc80      	pop	{r7}
 8007c52:	4770      	bx	lr
 8007c54:	20000d14 	.word	0x20000d14

08007c58 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b086      	sub	sp, #24
 8007c5c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007c5e:	2300      	movs	r3, #0
 8007c60:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c62:	4b4e      	ldr	r3, [pc, #312]	; (8007d9c <xTaskIncrementTick+0x144>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	f040 8088 	bne.w	8007d7c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007c6c:	4b4c      	ldr	r3, [pc, #304]	; (8007da0 <xTaskIncrementTick+0x148>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	3301      	adds	r3, #1
 8007c72:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007c74:	4a4a      	ldr	r2, [pc, #296]	; (8007da0 <xTaskIncrementTick+0x148>)
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d120      	bne.n	8007cc2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007c80:	4b48      	ldr	r3, [pc, #288]	; (8007da4 <xTaskIncrementTick+0x14c>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d00a      	beq.n	8007ca0 <xTaskIncrementTick+0x48>
	__asm volatile
 8007c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c8e:	f383 8811 	msr	BASEPRI, r3
 8007c92:	f3bf 8f6f 	isb	sy
 8007c96:	f3bf 8f4f 	dsb	sy
 8007c9a:	603b      	str	r3, [r7, #0]
}
 8007c9c:	bf00      	nop
 8007c9e:	e7fe      	b.n	8007c9e <xTaskIncrementTick+0x46>
 8007ca0:	4b40      	ldr	r3, [pc, #256]	; (8007da4 <xTaskIncrementTick+0x14c>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	60fb      	str	r3, [r7, #12]
 8007ca6:	4b40      	ldr	r3, [pc, #256]	; (8007da8 <xTaskIncrementTick+0x150>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a3e      	ldr	r2, [pc, #248]	; (8007da4 <xTaskIncrementTick+0x14c>)
 8007cac:	6013      	str	r3, [r2, #0]
 8007cae:	4a3e      	ldr	r2, [pc, #248]	; (8007da8 <xTaskIncrementTick+0x150>)
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	6013      	str	r3, [r2, #0]
 8007cb4:	4b3d      	ldr	r3, [pc, #244]	; (8007dac <xTaskIncrementTick+0x154>)
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	3301      	adds	r3, #1
 8007cba:	4a3c      	ldr	r2, [pc, #240]	; (8007dac <xTaskIncrementTick+0x154>)
 8007cbc:	6013      	str	r3, [r2, #0]
 8007cbe:	f000 fad7 	bl	8008270 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007cc2:	4b3b      	ldr	r3, [pc, #236]	; (8007db0 <xTaskIncrementTick+0x158>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	693a      	ldr	r2, [r7, #16]
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d348      	bcc.n	8007d5e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ccc:	4b35      	ldr	r3, [pc, #212]	; (8007da4 <xTaskIncrementTick+0x14c>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d104      	bne.n	8007ce0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cd6:	4b36      	ldr	r3, [pc, #216]	; (8007db0 <xTaskIncrementTick+0x158>)
 8007cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8007cdc:	601a      	str	r2, [r3, #0]
					break;
 8007cde:	e03e      	b.n	8007d5e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ce0:	4b30      	ldr	r3, [pc, #192]	; (8007da4 <xTaskIncrementTick+0x14c>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	68db      	ldr	r3, [r3, #12]
 8007ce6:	68db      	ldr	r3, [r3, #12]
 8007ce8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007cf0:	693a      	ldr	r2, [r7, #16]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d203      	bcs.n	8007d00 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007cf8:	4a2d      	ldr	r2, [pc, #180]	; (8007db0 <xTaskIncrementTick+0x158>)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007cfe:	e02e      	b.n	8007d5e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	3304      	adds	r3, #4
 8007d04:	4618      	mov	r0, r3
 8007d06:	f7fe ff09 	bl	8006b1c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d004      	beq.n	8007d1c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	3318      	adds	r3, #24
 8007d16:	4618      	mov	r0, r3
 8007d18:	f7fe ff00 	bl	8006b1c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d20:	2201      	movs	r2, #1
 8007d22:	409a      	lsls	r2, r3
 8007d24:	4b23      	ldr	r3, [pc, #140]	; (8007db4 <xTaskIncrementTick+0x15c>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	4a22      	ldr	r2, [pc, #136]	; (8007db4 <xTaskIncrementTick+0x15c>)
 8007d2c:	6013      	str	r3, [r2, #0]
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d32:	4613      	mov	r3, r2
 8007d34:	009b      	lsls	r3, r3, #2
 8007d36:	4413      	add	r3, r2
 8007d38:	009b      	lsls	r3, r3, #2
 8007d3a:	4a1f      	ldr	r2, [pc, #124]	; (8007db8 <xTaskIncrementTick+0x160>)
 8007d3c:	441a      	add	r2, r3
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	3304      	adds	r3, #4
 8007d42:	4619      	mov	r1, r3
 8007d44:	4610      	mov	r0, r2
 8007d46:	f7fe fe8e 	bl	8006a66 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d4e:	4b1b      	ldr	r3, [pc, #108]	; (8007dbc <xTaskIncrementTick+0x164>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d3b9      	bcc.n	8007ccc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d5c:	e7b6      	b.n	8007ccc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007d5e:	4b17      	ldr	r3, [pc, #92]	; (8007dbc <xTaskIncrementTick+0x164>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d64:	4914      	ldr	r1, [pc, #80]	; (8007db8 <xTaskIncrementTick+0x160>)
 8007d66:	4613      	mov	r3, r2
 8007d68:	009b      	lsls	r3, r3, #2
 8007d6a:	4413      	add	r3, r2
 8007d6c:	009b      	lsls	r3, r3, #2
 8007d6e:	440b      	add	r3, r1
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	2b01      	cmp	r3, #1
 8007d74:	d907      	bls.n	8007d86 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8007d76:	2301      	movs	r3, #1
 8007d78:	617b      	str	r3, [r7, #20]
 8007d7a:	e004      	b.n	8007d86 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007d7c:	4b10      	ldr	r3, [pc, #64]	; (8007dc0 <xTaskIncrementTick+0x168>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	3301      	adds	r3, #1
 8007d82:	4a0f      	ldr	r2, [pc, #60]	; (8007dc0 <xTaskIncrementTick+0x168>)
 8007d84:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007d86:	4b0f      	ldr	r3, [pc, #60]	; (8007dc4 <xTaskIncrementTick+0x16c>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d001      	beq.n	8007d92 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007d92:	697b      	ldr	r3, [r7, #20]
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	3718      	adds	r7, #24
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}
 8007d9c:	20000d38 	.word	0x20000d38
 8007da0:	20000d14 	.word	0x20000d14
 8007da4:	20000cc8 	.word	0x20000cc8
 8007da8:	20000ccc 	.word	0x20000ccc
 8007dac:	20000d28 	.word	0x20000d28
 8007db0:	20000d30 	.word	0x20000d30
 8007db4:	20000d18 	.word	0x20000d18
 8007db8:	20000c14 	.word	0x20000c14
 8007dbc:	20000c10 	.word	0x20000c10
 8007dc0:	20000d20 	.word	0x20000d20
 8007dc4:	20000d24 	.word	0x20000d24

08007dc8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b087      	sub	sp, #28
 8007dcc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007dce:	4b29      	ldr	r3, [pc, #164]	; (8007e74 <vTaskSwitchContext+0xac>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d003      	beq.n	8007dde <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007dd6:	4b28      	ldr	r3, [pc, #160]	; (8007e78 <vTaskSwitchContext+0xb0>)
 8007dd8:	2201      	movs	r2, #1
 8007dda:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007ddc:	e044      	b.n	8007e68 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 8007dde:	4b26      	ldr	r3, [pc, #152]	; (8007e78 <vTaskSwitchContext+0xb0>)
 8007de0:	2200      	movs	r2, #0
 8007de2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007de4:	4b25      	ldr	r3, [pc, #148]	; (8007e7c <vTaskSwitchContext+0xb4>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	fab3 f383 	clz	r3, r3
 8007df0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007df2:	7afb      	ldrb	r3, [r7, #11]
 8007df4:	f1c3 031f 	rsb	r3, r3, #31
 8007df8:	617b      	str	r3, [r7, #20]
 8007dfa:	4921      	ldr	r1, [pc, #132]	; (8007e80 <vTaskSwitchContext+0xb8>)
 8007dfc:	697a      	ldr	r2, [r7, #20]
 8007dfe:	4613      	mov	r3, r2
 8007e00:	009b      	lsls	r3, r3, #2
 8007e02:	4413      	add	r3, r2
 8007e04:	009b      	lsls	r3, r3, #2
 8007e06:	440b      	add	r3, r1
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d10a      	bne.n	8007e24 <vTaskSwitchContext+0x5c>
	__asm volatile
 8007e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e12:	f383 8811 	msr	BASEPRI, r3
 8007e16:	f3bf 8f6f 	isb	sy
 8007e1a:	f3bf 8f4f 	dsb	sy
 8007e1e:	607b      	str	r3, [r7, #4]
}
 8007e20:	bf00      	nop
 8007e22:	e7fe      	b.n	8007e22 <vTaskSwitchContext+0x5a>
 8007e24:	697a      	ldr	r2, [r7, #20]
 8007e26:	4613      	mov	r3, r2
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	4413      	add	r3, r2
 8007e2c:	009b      	lsls	r3, r3, #2
 8007e2e:	4a14      	ldr	r2, [pc, #80]	; (8007e80 <vTaskSwitchContext+0xb8>)
 8007e30:	4413      	add	r3, r2
 8007e32:	613b      	str	r3, [r7, #16]
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	685a      	ldr	r2, [r3, #4]
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	605a      	str	r2, [r3, #4]
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	685a      	ldr	r2, [r3, #4]
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	3308      	adds	r3, #8
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d104      	bne.n	8007e54 <vTaskSwitchContext+0x8c>
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	685a      	ldr	r2, [r3, #4]
 8007e50:	693b      	ldr	r3, [r7, #16]
 8007e52:	605a      	str	r2, [r3, #4]
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	68db      	ldr	r3, [r3, #12]
 8007e5a:	4a0a      	ldr	r2, [pc, #40]	; (8007e84 <vTaskSwitchContext+0xbc>)
 8007e5c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007e5e:	4b09      	ldr	r3, [pc, #36]	; (8007e84 <vTaskSwitchContext+0xbc>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	334c      	adds	r3, #76	; 0x4c
 8007e64:	4a08      	ldr	r2, [pc, #32]	; (8007e88 <vTaskSwitchContext+0xc0>)
 8007e66:	6013      	str	r3, [r2, #0]
}
 8007e68:	bf00      	nop
 8007e6a:	371c      	adds	r7, #28
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bc80      	pop	{r7}
 8007e70:	4770      	bx	lr
 8007e72:	bf00      	nop
 8007e74:	20000d38 	.word	0x20000d38
 8007e78:	20000d24 	.word	0x20000d24
 8007e7c:	20000d18 	.word	0x20000d18
 8007e80:	20000c14 	.word	0x20000c14
 8007e84:	20000c10 	.word	0x20000c10
 8007e88:	20000010 	.word	0x20000010

08007e8c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
 8007e94:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d10a      	bne.n	8007eb2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ea0:	f383 8811 	msr	BASEPRI, r3
 8007ea4:	f3bf 8f6f 	isb	sy
 8007ea8:	f3bf 8f4f 	dsb	sy
 8007eac:	60fb      	str	r3, [r7, #12]
}
 8007eae:	bf00      	nop
 8007eb0:	e7fe      	b.n	8007eb0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007eb2:	4b07      	ldr	r3, [pc, #28]	; (8007ed0 <vTaskPlaceOnEventList+0x44>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	3318      	adds	r3, #24
 8007eb8:	4619      	mov	r1, r3
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f7fe fdf6 	bl	8006aac <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007ec0:	2101      	movs	r1, #1
 8007ec2:	6838      	ldr	r0, [r7, #0]
 8007ec4:	f000 fa98 	bl	80083f8 <prvAddCurrentTaskToDelayedList>
}
 8007ec8:	bf00      	nop
 8007eca:	3710      	adds	r7, #16
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}
 8007ed0:	20000c10 	.word	0x20000c10

08007ed4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b086      	sub	sp, #24
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	60f8      	str	r0, [r7, #12]
 8007edc:	60b9      	str	r1, [r7, #8]
 8007ede:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d10a      	bne.n	8007efc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eea:	f383 8811 	msr	BASEPRI, r3
 8007eee:	f3bf 8f6f 	isb	sy
 8007ef2:	f3bf 8f4f 	dsb	sy
 8007ef6:	617b      	str	r3, [r7, #20]
}
 8007ef8:	bf00      	nop
 8007efa:	e7fe      	b.n	8007efa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007efc:	4b0a      	ldr	r3, [pc, #40]	; (8007f28 <vTaskPlaceOnEventListRestricted+0x54>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	3318      	adds	r3, #24
 8007f02:	4619      	mov	r1, r3
 8007f04:	68f8      	ldr	r0, [r7, #12]
 8007f06:	f7fe fdae 	bl	8006a66 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d002      	beq.n	8007f16 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007f10:	f04f 33ff 	mov.w	r3, #4294967295
 8007f14:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007f16:	6879      	ldr	r1, [r7, #4]
 8007f18:	68b8      	ldr	r0, [r7, #8]
 8007f1a:	f000 fa6d 	bl	80083f8 <prvAddCurrentTaskToDelayedList>
	}
 8007f1e:	bf00      	nop
 8007f20:	3718      	adds	r7, #24
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}
 8007f26:	bf00      	nop
 8007f28:	20000c10 	.word	0x20000c10

08007f2c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b086      	sub	sp, #24
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	68db      	ldr	r3, [r3, #12]
 8007f38:	68db      	ldr	r3, [r3, #12]
 8007f3a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d10a      	bne.n	8007f58 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f46:	f383 8811 	msr	BASEPRI, r3
 8007f4a:	f3bf 8f6f 	isb	sy
 8007f4e:	f3bf 8f4f 	dsb	sy
 8007f52:	60fb      	str	r3, [r7, #12]
}
 8007f54:	bf00      	nop
 8007f56:	e7fe      	b.n	8007f56 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	3318      	adds	r3, #24
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f7fe fddd 	bl	8006b1c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007f62:	4b1d      	ldr	r3, [pc, #116]	; (8007fd8 <xTaskRemoveFromEventList+0xac>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d11c      	bne.n	8007fa4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	3304      	adds	r3, #4
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f7fe fdd4 	bl	8006b1c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f78:	2201      	movs	r2, #1
 8007f7a:	409a      	lsls	r2, r3
 8007f7c:	4b17      	ldr	r3, [pc, #92]	; (8007fdc <xTaskRemoveFromEventList+0xb0>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4313      	orrs	r3, r2
 8007f82:	4a16      	ldr	r2, [pc, #88]	; (8007fdc <xTaskRemoveFromEventList+0xb0>)
 8007f84:	6013      	str	r3, [r2, #0]
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f8a:	4613      	mov	r3, r2
 8007f8c:	009b      	lsls	r3, r3, #2
 8007f8e:	4413      	add	r3, r2
 8007f90:	009b      	lsls	r3, r3, #2
 8007f92:	4a13      	ldr	r2, [pc, #76]	; (8007fe0 <xTaskRemoveFromEventList+0xb4>)
 8007f94:	441a      	add	r2, r3
 8007f96:	693b      	ldr	r3, [r7, #16]
 8007f98:	3304      	adds	r3, #4
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	4610      	mov	r0, r2
 8007f9e:	f7fe fd62 	bl	8006a66 <vListInsertEnd>
 8007fa2:	e005      	b.n	8007fb0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	3318      	adds	r3, #24
 8007fa8:	4619      	mov	r1, r3
 8007faa:	480e      	ldr	r0, [pc, #56]	; (8007fe4 <xTaskRemoveFromEventList+0xb8>)
 8007fac:	f7fe fd5b 	bl	8006a66 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007fb4:	4b0c      	ldr	r3, [pc, #48]	; (8007fe8 <xTaskRemoveFromEventList+0xbc>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fba:	429a      	cmp	r2, r3
 8007fbc:	d905      	bls.n	8007fca <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007fc2:	4b0a      	ldr	r3, [pc, #40]	; (8007fec <xTaskRemoveFromEventList+0xc0>)
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	601a      	str	r2, [r3, #0]
 8007fc8:	e001      	b.n	8007fce <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007fce:	697b      	ldr	r3, [r7, #20]
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3718      	adds	r7, #24
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}
 8007fd8:	20000d38 	.word	0x20000d38
 8007fdc:	20000d18 	.word	0x20000d18
 8007fe0:	20000c14 	.word	0x20000c14
 8007fe4:	20000cd0 	.word	0x20000cd0
 8007fe8:	20000c10 	.word	0x20000c10
 8007fec:	20000d24 	.word	0x20000d24

08007ff0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b083      	sub	sp, #12
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007ff8:	4b06      	ldr	r3, [pc, #24]	; (8008014 <vTaskInternalSetTimeOutState+0x24>)
 8007ffa:	681a      	ldr	r2, [r3, #0]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008000:	4b05      	ldr	r3, [pc, #20]	; (8008018 <vTaskInternalSetTimeOutState+0x28>)
 8008002:	681a      	ldr	r2, [r3, #0]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	605a      	str	r2, [r3, #4]
}
 8008008:	bf00      	nop
 800800a:	370c      	adds	r7, #12
 800800c:	46bd      	mov	sp, r7
 800800e:	bc80      	pop	{r7}
 8008010:	4770      	bx	lr
 8008012:	bf00      	nop
 8008014:	20000d28 	.word	0x20000d28
 8008018:	20000d14 	.word	0x20000d14

0800801c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b088      	sub	sp, #32
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d10a      	bne.n	8008042 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800802c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008030:	f383 8811 	msr	BASEPRI, r3
 8008034:	f3bf 8f6f 	isb	sy
 8008038:	f3bf 8f4f 	dsb	sy
 800803c:	613b      	str	r3, [r7, #16]
}
 800803e:	bf00      	nop
 8008040:	e7fe      	b.n	8008040 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d10a      	bne.n	800805e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800804c:	f383 8811 	msr	BASEPRI, r3
 8008050:	f3bf 8f6f 	isb	sy
 8008054:	f3bf 8f4f 	dsb	sy
 8008058:	60fb      	str	r3, [r7, #12]
}
 800805a:	bf00      	nop
 800805c:	e7fe      	b.n	800805c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800805e:	f000 fe55 	bl	8008d0c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008062:	4b1d      	ldr	r3, [pc, #116]	; (80080d8 <xTaskCheckForTimeOut+0xbc>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	69ba      	ldr	r2, [r7, #24]
 800806e:	1ad3      	subs	r3, r2, r3
 8008070:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800807a:	d102      	bne.n	8008082 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800807c:	2300      	movs	r3, #0
 800807e:	61fb      	str	r3, [r7, #28]
 8008080:	e023      	b.n	80080ca <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681a      	ldr	r2, [r3, #0]
 8008086:	4b15      	ldr	r3, [pc, #84]	; (80080dc <xTaskCheckForTimeOut+0xc0>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	429a      	cmp	r2, r3
 800808c:	d007      	beq.n	800809e <xTaskCheckForTimeOut+0x82>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	69ba      	ldr	r2, [r7, #24]
 8008094:	429a      	cmp	r2, r3
 8008096:	d302      	bcc.n	800809e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008098:	2301      	movs	r3, #1
 800809a:	61fb      	str	r3, [r7, #28]
 800809c:	e015      	b.n	80080ca <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	697a      	ldr	r2, [r7, #20]
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d20b      	bcs.n	80080c0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	681a      	ldr	r2, [r3, #0]
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	1ad2      	subs	r2, r2, r3
 80080b0:	683b      	ldr	r3, [r7, #0]
 80080b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f7ff ff9b 	bl	8007ff0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80080ba:	2300      	movs	r3, #0
 80080bc:	61fb      	str	r3, [r7, #28]
 80080be:	e004      	b.n	80080ca <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	2200      	movs	r2, #0
 80080c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80080c6:	2301      	movs	r3, #1
 80080c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80080ca:	f000 fe4f 	bl	8008d6c <vPortExitCritical>

	return xReturn;
 80080ce:	69fb      	ldr	r3, [r7, #28]
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3720      	adds	r7, #32
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}
 80080d8:	20000d14 	.word	0x20000d14
 80080dc:	20000d28 	.word	0x20000d28

080080e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80080e0:	b480      	push	{r7}
 80080e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80080e4:	4b03      	ldr	r3, [pc, #12]	; (80080f4 <vTaskMissedYield+0x14>)
 80080e6:	2201      	movs	r2, #1
 80080e8:	601a      	str	r2, [r3, #0]
}
 80080ea:	bf00      	nop
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bc80      	pop	{r7}
 80080f0:	4770      	bx	lr
 80080f2:	bf00      	nop
 80080f4:	20000d24 	.word	0x20000d24

080080f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b082      	sub	sp, #8
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008100:	f000 f854 	bl	80081ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008104:	4b07      	ldr	r3, [pc, #28]	; (8008124 <prvIdleTask+0x2c>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	2b01      	cmp	r3, #1
 800810a:	d907      	bls.n	800811c <prvIdleTask+0x24>
			{
				taskYIELD();
 800810c:	4b06      	ldr	r3, [pc, #24]	; (8008128 <prvIdleTask+0x30>)
 800810e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008112:	601a      	str	r2, [r3, #0]
 8008114:	f3bf 8f4f 	dsb	sy
 8008118:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800811c:	f7f8 fa0a 	bl	8000534 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8008120:	e7ee      	b.n	8008100 <prvIdleTask+0x8>
 8008122:	bf00      	nop
 8008124:	20000c14 	.word	0x20000c14
 8008128:	e000ed04 	.word	0xe000ed04

0800812c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b082      	sub	sp, #8
 8008130:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008132:	2300      	movs	r3, #0
 8008134:	607b      	str	r3, [r7, #4]
 8008136:	e00c      	b.n	8008152 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	4613      	mov	r3, r2
 800813c:	009b      	lsls	r3, r3, #2
 800813e:	4413      	add	r3, r2
 8008140:	009b      	lsls	r3, r3, #2
 8008142:	4a12      	ldr	r2, [pc, #72]	; (800818c <prvInitialiseTaskLists+0x60>)
 8008144:	4413      	add	r3, r2
 8008146:	4618      	mov	r0, r3
 8008148:	f7fe fc62 	bl	8006a10 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	3301      	adds	r3, #1
 8008150:	607b      	str	r3, [r7, #4]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2b06      	cmp	r3, #6
 8008156:	d9ef      	bls.n	8008138 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008158:	480d      	ldr	r0, [pc, #52]	; (8008190 <prvInitialiseTaskLists+0x64>)
 800815a:	f7fe fc59 	bl	8006a10 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800815e:	480d      	ldr	r0, [pc, #52]	; (8008194 <prvInitialiseTaskLists+0x68>)
 8008160:	f7fe fc56 	bl	8006a10 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008164:	480c      	ldr	r0, [pc, #48]	; (8008198 <prvInitialiseTaskLists+0x6c>)
 8008166:	f7fe fc53 	bl	8006a10 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800816a:	480c      	ldr	r0, [pc, #48]	; (800819c <prvInitialiseTaskLists+0x70>)
 800816c:	f7fe fc50 	bl	8006a10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008170:	480b      	ldr	r0, [pc, #44]	; (80081a0 <prvInitialiseTaskLists+0x74>)
 8008172:	f7fe fc4d 	bl	8006a10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008176:	4b0b      	ldr	r3, [pc, #44]	; (80081a4 <prvInitialiseTaskLists+0x78>)
 8008178:	4a05      	ldr	r2, [pc, #20]	; (8008190 <prvInitialiseTaskLists+0x64>)
 800817a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800817c:	4b0a      	ldr	r3, [pc, #40]	; (80081a8 <prvInitialiseTaskLists+0x7c>)
 800817e:	4a05      	ldr	r2, [pc, #20]	; (8008194 <prvInitialiseTaskLists+0x68>)
 8008180:	601a      	str	r2, [r3, #0]
}
 8008182:	bf00      	nop
 8008184:	3708      	adds	r7, #8
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}
 800818a:	bf00      	nop
 800818c:	20000c14 	.word	0x20000c14
 8008190:	20000ca0 	.word	0x20000ca0
 8008194:	20000cb4 	.word	0x20000cb4
 8008198:	20000cd0 	.word	0x20000cd0
 800819c:	20000ce4 	.word	0x20000ce4
 80081a0:	20000cfc 	.word	0x20000cfc
 80081a4:	20000cc8 	.word	0x20000cc8
 80081a8:	20000ccc 	.word	0x20000ccc

080081ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b082      	sub	sp, #8
 80081b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80081b2:	e019      	b.n	80081e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80081b4:	f000 fdaa 	bl	8008d0c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081b8:	4b10      	ldr	r3, [pc, #64]	; (80081fc <prvCheckTasksWaitingTermination+0x50>)
 80081ba:	68db      	ldr	r3, [r3, #12]
 80081bc:	68db      	ldr	r3, [r3, #12]
 80081be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	3304      	adds	r3, #4
 80081c4:	4618      	mov	r0, r3
 80081c6:	f7fe fca9 	bl	8006b1c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80081ca:	4b0d      	ldr	r3, [pc, #52]	; (8008200 <prvCheckTasksWaitingTermination+0x54>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	3b01      	subs	r3, #1
 80081d0:	4a0b      	ldr	r2, [pc, #44]	; (8008200 <prvCheckTasksWaitingTermination+0x54>)
 80081d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80081d4:	4b0b      	ldr	r3, [pc, #44]	; (8008204 <prvCheckTasksWaitingTermination+0x58>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	3b01      	subs	r3, #1
 80081da:	4a0a      	ldr	r2, [pc, #40]	; (8008204 <prvCheckTasksWaitingTermination+0x58>)
 80081dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80081de:	f000 fdc5 	bl	8008d6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f000 f810 	bl	8008208 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80081e8:	4b06      	ldr	r3, [pc, #24]	; (8008204 <prvCheckTasksWaitingTermination+0x58>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d1e1      	bne.n	80081b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80081f0:	bf00      	nop
 80081f2:	bf00      	nop
 80081f4:	3708      	adds	r7, #8
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}
 80081fa:	bf00      	nop
 80081fc:	20000ce4 	.word	0x20000ce4
 8008200:	20000d10 	.word	0x20000d10
 8008204:	20000cf8 	.word	0x20000cf8

08008208 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008208:	b580      	push	{r7, lr}
 800820a:	b084      	sub	sp, #16
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	334c      	adds	r3, #76	; 0x4c
 8008214:	4618      	mov	r0, r3
 8008216:	f001 fa2d 	bl	8009674 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8008220:	2b00      	cmp	r3, #0
 8008222:	d108      	bne.n	8008236 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008228:	4618      	mov	r0, r3
 800822a:	f000 ff33 	bl	8009094 <vPortFree>
				vPortFree( pxTCB );
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 ff30 	bl	8009094 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008234:	e018      	b.n	8008268 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800823c:	2b01      	cmp	r3, #1
 800823e:	d103      	bne.n	8008248 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f000 ff27 	bl	8009094 <vPortFree>
	}
 8008246:	e00f      	b.n	8008268 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800824e:	2b02      	cmp	r3, #2
 8008250:	d00a      	beq.n	8008268 <prvDeleteTCB+0x60>
	__asm volatile
 8008252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008256:	f383 8811 	msr	BASEPRI, r3
 800825a:	f3bf 8f6f 	isb	sy
 800825e:	f3bf 8f4f 	dsb	sy
 8008262:	60fb      	str	r3, [r7, #12]
}
 8008264:	bf00      	nop
 8008266:	e7fe      	b.n	8008266 <prvDeleteTCB+0x5e>
	}
 8008268:	bf00      	nop
 800826a:	3710      	adds	r7, #16
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}

08008270 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008270:	b480      	push	{r7}
 8008272:	b083      	sub	sp, #12
 8008274:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008276:	4b0c      	ldr	r3, [pc, #48]	; (80082a8 <prvResetNextTaskUnblockTime+0x38>)
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d104      	bne.n	800828a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008280:	4b0a      	ldr	r3, [pc, #40]	; (80082ac <prvResetNextTaskUnblockTime+0x3c>)
 8008282:	f04f 32ff 	mov.w	r2, #4294967295
 8008286:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008288:	e008      	b.n	800829c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800828a:	4b07      	ldr	r3, [pc, #28]	; (80082a8 <prvResetNextTaskUnblockTime+0x38>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	68db      	ldr	r3, [r3, #12]
 8008290:	68db      	ldr	r3, [r3, #12]
 8008292:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	685b      	ldr	r3, [r3, #4]
 8008298:	4a04      	ldr	r2, [pc, #16]	; (80082ac <prvResetNextTaskUnblockTime+0x3c>)
 800829a:	6013      	str	r3, [r2, #0]
}
 800829c:	bf00      	nop
 800829e:	370c      	adds	r7, #12
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bc80      	pop	{r7}
 80082a4:	4770      	bx	lr
 80082a6:	bf00      	nop
 80082a8:	20000cc8 	.word	0x20000cc8
 80082ac:	20000d30 	.word	0x20000d30

080082b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80082b0:	b480      	push	{r7}
 80082b2:	b083      	sub	sp, #12
 80082b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80082b6:	4b0b      	ldr	r3, [pc, #44]	; (80082e4 <xTaskGetSchedulerState+0x34>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d102      	bne.n	80082c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80082be:	2301      	movs	r3, #1
 80082c0:	607b      	str	r3, [r7, #4]
 80082c2:	e008      	b.n	80082d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082c4:	4b08      	ldr	r3, [pc, #32]	; (80082e8 <xTaskGetSchedulerState+0x38>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d102      	bne.n	80082d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80082cc:	2302      	movs	r3, #2
 80082ce:	607b      	str	r3, [r7, #4]
 80082d0:	e001      	b.n	80082d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80082d2:	2300      	movs	r3, #0
 80082d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80082d6:	687b      	ldr	r3, [r7, #4]
	}
 80082d8:	4618      	mov	r0, r3
 80082da:	370c      	adds	r7, #12
 80082dc:	46bd      	mov	sp, r7
 80082de:	bc80      	pop	{r7}
 80082e0:	4770      	bx	lr
 80082e2:	bf00      	nop
 80082e4:	20000d1c 	.word	0x20000d1c
 80082e8:	20000d38 	.word	0x20000d38

080082ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b086      	sub	sp, #24
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80082f8:	2300      	movs	r3, #0
 80082fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d06e      	beq.n	80083e0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008302:	4b3a      	ldr	r3, [pc, #232]	; (80083ec <xTaskPriorityDisinherit+0x100>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	693a      	ldr	r2, [r7, #16]
 8008308:	429a      	cmp	r2, r3
 800830a:	d00a      	beq.n	8008322 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800830c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008310:	f383 8811 	msr	BASEPRI, r3
 8008314:	f3bf 8f6f 	isb	sy
 8008318:	f3bf 8f4f 	dsb	sy
 800831c:	60fb      	str	r3, [r7, #12]
}
 800831e:	bf00      	nop
 8008320:	e7fe      	b.n	8008320 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008326:	2b00      	cmp	r3, #0
 8008328:	d10a      	bne.n	8008340 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800832a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800832e:	f383 8811 	msr	BASEPRI, r3
 8008332:	f3bf 8f6f 	isb	sy
 8008336:	f3bf 8f4f 	dsb	sy
 800833a:	60bb      	str	r3, [r7, #8]
}
 800833c:	bf00      	nop
 800833e:	e7fe      	b.n	800833e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008344:	1e5a      	subs	r2, r3, #1
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008352:	429a      	cmp	r2, r3
 8008354:	d044      	beq.n	80083e0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800835a:	2b00      	cmp	r3, #0
 800835c:	d140      	bne.n	80083e0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	3304      	adds	r3, #4
 8008362:	4618      	mov	r0, r3
 8008364:	f7fe fbda 	bl	8006b1c <uxListRemove>
 8008368:	4603      	mov	r3, r0
 800836a:	2b00      	cmp	r3, #0
 800836c:	d115      	bne.n	800839a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008372:	491f      	ldr	r1, [pc, #124]	; (80083f0 <xTaskPriorityDisinherit+0x104>)
 8008374:	4613      	mov	r3, r2
 8008376:	009b      	lsls	r3, r3, #2
 8008378:	4413      	add	r3, r2
 800837a:	009b      	lsls	r3, r3, #2
 800837c:	440b      	add	r3, r1
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d10a      	bne.n	800839a <xTaskPriorityDisinherit+0xae>
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008388:	2201      	movs	r2, #1
 800838a:	fa02 f303 	lsl.w	r3, r2, r3
 800838e:	43da      	mvns	r2, r3
 8008390:	4b18      	ldr	r3, [pc, #96]	; (80083f4 <xTaskPriorityDisinherit+0x108>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4013      	ands	r3, r2
 8008396:	4a17      	ldr	r2, [pc, #92]	; (80083f4 <xTaskPriorityDisinherit+0x108>)
 8008398:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a6:	f1c3 0207 	rsb	r2, r3, #7
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b2:	2201      	movs	r2, #1
 80083b4:	409a      	lsls	r2, r3
 80083b6:	4b0f      	ldr	r3, [pc, #60]	; (80083f4 <xTaskPriorityDisinherit+0x108>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4313      	orrs	r3, r2
 80083bc:	4a0d      	ldr	r2, [pc, #52]	; (80083f4 <xTaskPriorityDisinherit+0x108>)
 80083be:	6013      	str	r3, [r2, #0]
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083c4:	4613      	mov	r3, r2
 80083c6:	009b      	lsls	r3, r3, #2
 80083c8:	4413      	add	r3, r2
 80083ca:	009b      	lsls	r3, r3, #2
 80083cc:	4a08      	ldr	r2, [pc, #32]	; (80083f0 <xTaskPriorityDisinherit+0x104>)
 80083ce:	441a      	add	r2, r3
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	3304      	adds	r3, #4
 80083d4:	4619      	mov	r1, r3
 80083d6:	4610      	mov	r0, r2
 80083d8:	f7fe fb45 	bl	8006a66 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80083dc:	2301      	movs	r3, #1
 80083de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80083e0:	697b      	ldr	r3, [r7, #20]
	}
 80083e2:	4618      	mov	r0, r3
 80083e4:	3718      	adds	r7, #24
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}
 80083ea:	bf00      	nop
 80083ec:	20000c10 	.word	0x20000c10
 80083f0:	20000c14 	.word	0x20000c14
 80083f4:	20000d18 	.word	0x20000d18

080083f8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b084      	sub	sp, #16
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
 8008400:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008402:	4b29      	ldr	r3, [pc, #164]	; (80084a8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008408:	4b28      	ldr	r3, [pc, #160]	; (80084ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	3304      	adds	r3, #4
 800840e:	4618      	mov	r0, r3
 8008410:	f7fe fb84 	bl	8006b1c <uxListRemove>
 8008414:	4603      	mov	r3, r0
 8008416:	2b00      	cmp	r3, #0
 8008418:	d10b      	bne.n	8008432 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800841a:	4b24      	ldr	r3, [pc, #144]	; (80084ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008420:	2201      	movs	r2, #1
 8008422:	fa02 f303 	lsl.w	r3, r2, r3
 8008426:	43da      	mvns	r2, r3
 8008428:	4b21      	ldr	r3, [pc, #132]	; (80084b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4013      	ands	r3, r2
 800842e:	4a20      	ldr	r2, [pc, #128]	; (80084b0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008430:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008438:	d10a      	bne.n	8008450 <prvAddCurrentTaskToDelayedList+0x58>
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d007      	beq.n	8008450 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008440:	4b1a      	ldr	r3, [pc, #104]	; (80084ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	3304      	adds	r3, #4
 8008446:	4619      	mov	r1, r3
 8008448:	481a      	ldr	r0, [pc, #104]	; (80084b4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800844a:	f7fe fb0c 	bl	8006a66 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800844e:	e026      	b.n	800849e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008450:	68fa      	ldr	r2, [r7, #12]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	4413      	add	r3, r2
 8008456:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008458:	4b14      	ldr	r3, [pc, #80]	; (80084ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	68ba      	ldr	r2, [r7, #8]
 800845e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008460:	68ba      	ldr	r2, [r7, #8]
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	429a      	cmp	r2, r3
 8008466:	d209      	bcs.n	800847c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008468:	4b13      	ldr	r3, [pc, #76]	; (80084b8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800846a:	681a      	ldr	r2, [r3, #0]
 800846c:	4b0f      	ldr	r3, [pc, #60]	; (80084ac <prvAddCurrentTaskToDelayedList+0xb4>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	3304      	adds	r3, #4
 8008472:	4619      	mov	r1, r3
 8008474:	4610      	mov	r0, r2
 8008476:	f7fe fb19 	bl	8006aac <vListInsert>
}
 800847a:	e010      	b.n	800849e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800847c:	4b0f      	ldr	r3, [pc, #60]	; (80084bc <prvAddCurrentTaskToDelayedList+0xc4>)
 800847e:	681a      	ldr	r2, [r3, #0]
 8008480:	4b0a      	ldr	r3, [pc, #40]	; (80084ac <prvAddCurrentTaskToDelayedList+0xb4>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	3304      	adds	r3, #4
 8008486:	4619      	mov	r1, r3
 8008488:	4610      	mov	r0, r2
 800848a:	f7fe fb0f 	bl	8006aac <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800848e:	4b0c      	ldr	r3, [pc, #48]	; (80084c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	68ba      	ldr	r2, [r7, #8]
 8008494:	429a      	cmp	r2, r3
 8008496:	d202      	bcs.n	800849e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008498:	4a09      	ldr	r2, [pc, #36]	; (80084c0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	6013      	str	r3, [r2, #0]
}
 800849e:	bf00      	nop
 80084a0:	3710      	adds	r7, #16
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}
 80084a6:	bf00      	nop
 80084a8:	20000d14 	.word	0x20000d14
 80084ac:	20000c10 	.word	0x20000c10
 80084b0:	20000d18 	.word	0x20000d18
 80084b4:	20000cfc 	.word	0x20000cfc
 80084b8:	20000ccc 	.word	0x20000ccc
 80084bc:	20000cc8 	.word	0x20000cc8
 80084c0:	20000d30 	.word	0x20000d30

080084c4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b08a      	sub	sp, #40	; 0x28
 80084c8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80084ca:	2300      	movs	r3, #0
 80084cc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80084ce:	f000 fae9 	bl	8008aa4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80084d2:	4b1c      	ldr	r3, [pc, #112]	; (8008544 <xTimerCreateTimerTask+0x80>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d021      	beq.n	800851e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80084da:	2300      	movs	r3, #0
 80084dc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80084de:	2300      	movs	r3, #0
 80084e0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80084e2:	1d3a      	adds	r2, r7, #4
 80084e4:	f107 0108 	add.w	r1, r7, #8
 80084e8:	f107 030c 	add.w	r3, r7, #12
 80084ec:	4618      	mov	r0, r3
 80084ee:	f7f8 f83f 	bl	8000570 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80084f2:	6879      	ldr	r1, [r7, #4]
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	68fa      	ldr	r2, [r7, #12]
 80084f8:	9202      	str	r2, [sp, #8]
 80084fa:	9301      	str	r3, [sp, #4]
 80084fc:	2302      	movs	r3, #2
 80084fe:	9300      	str	r3, [sp, #0]
 8008500:	2300      	movs	r3, #0
 8008502:	460a      	mov	r2, r1
 8008504:	4910      	ldr	r1, [pc, #64]	; (8008548 <xTimerCreateTimerTask+0x84>)
 8008506:	4811      	ldr	r0, [pc, #68]	; (800854c <xTimerCreateTimerTask+0x88>)
 8008508:	f7ff f8a0 	bl	800764c <xTaskCreateStatic>
 800850c:	4603      	mov	r3, r0
 800850e:	4a10      	ldr	r2, [pc, #64]	; (8008550 <xTimerCreateTimerTask+0x8c>)
 8008510:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008512:	4b0f      	ldr	r3, [pc, #60]	; (8008550 <xTimerCreateTimerTask+0x8c>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d001      	beq.n	800851e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800851a:	2301      	movs	r3, #1
 800851c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d10a      	bne.n	800853a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008528:	f383 8811 	msr	BASEPRI, r3
 800852c:	f3bf 8f6f 	isb	sy
 8008530:	f3bf 8f4f 	dsb	sy
 8008534:	613b      	str	r3, [r7, #16]
}
 8008536:	bf00      	nop
 8008538:	e7fe      	b.n	8008538 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800853a:	697b      	ldr	r3, [r7, #20]
}
 800853c:	4618      	mov	r0, r3
 800853e:	3718      	adds	r7, #24
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}
 8008544:	20000d6c 	.word	0x20000d6c
 8008548:	0800a958 	.word	0x0800a958
 800854c:	08008689 	.word	0x08008689
 8008550:	20000d70 	.word	0x20000d70

08008554 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b08a      	sub	sp, #40	; 0x28
 8008558:	af00      	add	r7, sp, #0
 800855a:	60f8      	str	r0, [r7, #12]
 800855c:	60b9      	str	r1, [r7, #8]
 800855e:	607a      	str	r2, [r7, #4]
 8008560:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008562:	2300      	movs	r3, #0
 8008564:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d10a      	bne.n	8008582 <xTimerGenericCommand+0x2e>
	__asm volatile
 800856c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008570:	f383 8811 	msr	BASEPRI, r3
 8008574:	f3bf 8f6f 	isb	sy
 8008578:	f3bf 8f4f 	dsb	sy
 800857c:	623b      	str	r3, [r7, #32]
}
 800857e:	bf00      	nop
 8008580:	e7fe      	b.n	8008580 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008582:	4b1a      	ldr	r3, [pc, #104]	; (80085ec <xTimerGenericCommand+0x98>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d02a      	beq.n	80085e0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	2b05      	cmp	r3, #5
 800859a:	dc18      	bgt.n	80085ce <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800859c:	f7ff fe88 	bl	80082b0 <xTaskGetSchedulerState>
 80085a0:	4603      	mov	r3, r0
 80085a2:	2b02      	cmp	r3, #2
 80085a4:	d109      	bne.n	80085ba <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80085a6:	4b11      	ldr	r3, [pc, #68]	; (80085ec <xTimerGenericCommand+0x98>)
 80085a8:	6818      	ldr	r0, [r3, #0]
 80085aa:	f107 0114 	add.w	r1, r7, #20
 80085ae:	2300      	movs	r3, #0
 80085b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085b2:	f7fe fc69 	bl	8006e88 <xQueueGenericSend>
 80085b6:	6278      	str	r0, [r7, #36]	; 0x24
 80085b8:	e012      	b.n	80085e0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80085ba:	4b0c      	ldr	r3, [pc, #48]	; (80085ec <xTimerGenericCommand+0x98>)
 80085bc:	6818      	ldr	r0, [r3, #0]
 80085be:	f107 0114 	add.w	r1, r7, #20
 80085c2:	2300      	movs	r3, #0
 80085c4:	2200      	movs	r2, #0
 80085c6:	f7fe fc5f 	bl	8006e88 <xQueueGenericSend>
 80085ca:	6278      	str	r0, [r7, #36]	; 0x24
 80085cc:	e008      	b.n	80085e0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80085ce:	4b07      	ldr	r3, [pc, #28]	; (80085ec <xTimerGenericCommand+0x98>)
 80085d0:	6818      	ldr	r0, [r3, #0]
 80085d2:	f107 0114 	add.w	r1, r7, #20
 80085d6:	2300      	movs	r3, #0
 80085d8:	683a      	ldr	r2, [r7, #0]
 80085da:	f7fe fd53 	bl	8007084 <xQueueGenericSendFromISR>
 80085de:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80085e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3728      	adds	r7, #40	; 0x28
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}
 80085ea:	bf00      	nop
 80085ec:	20000d6c 	.word	0x20000d6c

080085f0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b088      	sub	sp, #32
 80085f4:	af02      	add	r7, sp, #8
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085fa:	4b22      	ldr	r3, [pc, #136]	; (8008684 <prvProcessExpiredTimer+0x94>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	68db      	ldr	r3, [r3, #12]
 8008600:	68db      	ldr	r3, [r3, #12]
 8008602:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	3304      	adds	r3, #4
 8008608:	4618      	mov	r0, r3
 800860a:	f7fe fa87 	bl	8006b1c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008614:	f003 0304 	and.w	r3, r3, #4
 8008618:	2b00      	cmp	r3, #0
 800861a:	d022      	beq.n	8008662 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	699a      	ldr	r2, [r3, #24]
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	18d1      	adds	r1, r2, r3
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	683a      	ldr	r2, [r7, #0]
 8008628:	6978      	ldr	r0, [r7, #20]
 800862a:	f000 f8cf 	bl	80087cc <prvInsertTimerInActiveList>
 800862e:	4603      	mov	r3, r0
 8008630:	2b00      	cmp	r3, #0
 8008632:	d01f      	beq.n	8008674 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008634:	2300      	movs	r3, #0
 8008636:	9300      	str	r3, [sp, #0]
 8008638:	2300      	movs	r3, #0
 800863a:	687a      	ldr	r2, [r7, #4]
 800863c:	2100      	movs	r1, #0
 800863e:	6978      	ldr	r0, [r7, #20]
 8008640:	f7ff ff88 	bl	8008554 <xTimerGenericCommand>
 8008644:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d113      	bne.n	8008674 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800864c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008650:	f383 8811 	msr	BASEPRI, r3
 8008654:	f3bf 8f6f 	isb	sy
 8008658:	f3bf 8f4f 	dsb	sy
 800865c:	60fb      	str	r3, [r7, #12]
}
 800865e:	bf00      	nop
 8008660:	e7fe      	b.n	8008660 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008668:	f023 0301 	bic.w	r3, r3, #1
 800866c:	b2da      	uxtb	r2, r3
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	6a1b      	ldr	r3, [r3, #32]
 8008678:	6978      	ldr	r0, [r7, #20]
 800867a:	4798      	blx	r3
}
 800867c:	bf00      	nop
 800867e:	3718      	adds	r7, #24
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}
 8008684:	20000d64 	.word	0x20000d64

08008688 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b084      	sub	sp, #16
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008690:	f107 0308 	add.w	r3, r7, #8
 8008694:	4618      	mov	r0, r3
 8008696:	f000 f857 	bl	8008748 <prvGetNextExpireTime>
 800869a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	4619      	mov	r1, r3
 80086a0:	68f8      	ldr	r0, [r7, #12]
 80086a2:	f000 f803 	bl	80086ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80086a6:	f000 f8d3 	bl	8008850 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80086aa:	e7f1      	b.n	8008690 <prvTimerTask+0x8>

080086ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b084      	sub	sp, #16
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80086b6:	f7ff fa17 	bl	8007ae8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80086ba:	f107 0308 	add.w	r3, r7, #8
 80086be:	4618      	mov	r0, r3
 80086c0:	f000 f864 	bl	800878c <prvSampleTimeNow>
 80086c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d130      	bne.n	800872e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d10a      	bne.n	80086e8 <prvProcessTimerOrBlockTask+0x3c>
 80086d2:	687a      	ldr	r2, [r7, #4]
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	429a      	cmp	r2, r3
 80086d8:	d806      	bhi.n	80086e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80086da:	f7ff fa13 	bl	8007b04 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80086de:	68f9      	ldr	r1, [r7, #12]
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f7ff ff85 	bl	80085f0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80086e6:	e024      	b.n	8008732 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d008      	beq.n	8008700 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80086ee:	4b13      	ldr	r3, [pc, #76]	; (800873c <prvProcessTimerOrBlockTask+0x90>)
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d101      	bne.n	80086fc <prvProcessTimerOrBlockTask+0x50>
 80086f8:	2301      	movs	r3, #1
 80086fa:	e000      	b.n	80086fe <prvProcessTimerOrBlockTask+0x52>
 80086fc:	2300      	movs	r3, #0
 80086fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008700:	4b0f      	ldr	r3, [pc, #60]	; (8008740 <prvProcessTimerOrBlockTask+0x94>)
 8008702:	6818      	ldr	r0, [r3, #0]
 8008704:	687a      	ldr	r2, [r7, #4]
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	1ad3      	subs	r3, r2, r3
 800870a:	683a      	ldr	r2, [r7, #0]
 800870c:	4619      	mov	r1, r3
 800870e:	f7fe ff69 	bl	80075e4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008712:	f7ff f9f7 	bl	8007b04 <xTaskResumeAll>
 8008716:	4603      	mov	r3, r0
 8008718:	2b00      	cmp	r3, #0
 800871a:	d10a      	bne.n	8008732 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800871c:	4b09      	ldr	r3, [pc, #36]	; (8008744 <prvProcessTimerOrBlockTask+0x98>)
 800871e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008722:	601a      	str	r2, [r3, #0]
 8008724:	f3bf 8f4f 	dsb	sy
 8008728:	f3bf 8f6f 	isb	sy
}
 800872c:	e001      	b.n	8008732 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800872e:	f7ff f9e9 	bl	8007b04 <xTaskResumeAll>
}
 8008732:	bf00      	nop
 8008734:	3710      	adds	r7, #16
 8008736:	46bd      	mov	sp, r7
 8008738:	bd80      	pop	{r7, pc}
 800873a:	bf00      	nop
 800873c:	20000d68 	.word	0x20000d68
 8008740:	20000d6c 	.word	0x20000d6c
 8008744:	e000ed04 	.word	0xe000ed04

08008748 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008748:	b480      	push	{r7}
 800874a:	b085      	sub	sp, #20
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008750:	4b0d      	ldr	r3, [pc, #52]	; (8008788 <prvGetNextExpireTime+0x40>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d101      	bne.n	800875e <prvGetNextExpireTime+0x16>
 800875a:	2201      	movs	r2, #1
 800875c:	e000      	b.n	8008760 <prvGetNextExpireTime+0x18>
 800875e:	2200      	movs	r2, #0
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d105      	bne.n	8008778 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800876c:	4b06      	ldr	r3, [pc, #24]	; (8008788 <prvGetNextExpireTime+0x40>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	68db      	ldr	r3, [r3, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	60fb      	str	r3, [r7, #12]
 8008776:	e001      	b.n	800877c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008778:	2300      	movs	r3, #0
 800877a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800877c:	68fb      	ldr	r3, [r7, #12]
}
 800877e:	4618      	mov	r0, r3
 8008780:	3714      	adds	r7, #20
 8008782:	46bd      	mov	sp, r7
 8008784:	bc80      	pop	{r7}
 8008786:	4770      	bx	lr
 8008788:	20000d64 	.word	0x20000d64

0800878c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b084      	sub	sp, #16
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008794:	f7ff fa52 	bl	8007c3c <xTaskGetTickCount>
 8008798:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800879a:	4b0b      	ldr	r3, [pc, #44]	; (80087c8 <prvSampleTimeNow+0x3c>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	68fa      	ldr	r2, [r7, #12]
 80087a0:	429a      	cmp	r2, r3
 80087a2:	d205      	bcs.n	80087b0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80087a4:	f000 f91a 	bl	80089dc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2201      	movs	r2, #1
 80087ac:	601a      	str	r2, [r3, #0]
 80087ae:	e002      	b.n	80087b6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2200      	movs	r2, #0
 80087b4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80087b6:	4a04      	ldr	r2, [pc, #16]	; (80087c8 <prvSampleTimeNow+0x3c>)
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80087bc:	68fb      	ldr	r3, [r7, #12]
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3710      	adds	r7, #16
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
 80087c6:	bf00      	nop
 80087c8:	20000d74 	.word	0x20000d74

080087cc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b086      	sub	sp, #24
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	60f8      	str	r0, [r7, #12]
 80087d4:	60b9      	str	r1, [r7, #8]
 80087d6:	607a      	str	r2, [r7, #4]
 80087d8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80087da:	2300      	movs	r3, #0
 80087dc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	68ba      	ldr	r2, [r7, #8]
 80087e2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	68fa      	ldr	r2, [r7, #12]
 80087e8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80087ea:	68ba      	ldr	r2, [r7, #8]
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	429a      	cmp	r2, r3
 80087f0:	d812      	bhi.n	8008818 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087f2:	687a      	ldr	r2, [r7, #4]
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	1ad2      	subs	r2, r2, r3
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	699b      	ldr	r3, [r3, #24]
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d302      	bcc.n	8008806 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008800:	2301      	movs	r3, #1
 8008802:	617b      	str	r3, [r7, #20]
 8008804:	e01b      	b.n	800883e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008806:	4b10      	ldr	r3, [pc, #64]	; (8008848 <prvInsertTimerInActiveList+0x7c>)
 8008808:	681a      	ldr	r2, [r3, #0]
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	3304      	adds	r3, #4
 800880e:	4619      	mov	r1, r3
 8008810:	4610      	mov	r0, r2
 8008812:	f7fe f94b 	bl	8006aac <vListInsert>
 8008816:	e012      	b.n	800883e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008818:	687a      	ldr	r2, [r7, #4]
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	429a      	cmp	r2, r3
 800881e:	d206      	bcs.n	800882e <prvInsertTimerInActiveList+0x62>
 8008820:	68ba      	ldr	r2, [r7, #8]
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	429a      	cmp	r2, r3
 8008826:	d302      	bcc.n	800882e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008828:	2301      	movs	r3, #1
 800882a:	617b      	str	r3, [r7, #20]
 800882c:	e007      	b.n	800883e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800882e:	4b07      	ldr	r3, [pc, #28]	; (800884c <prvInsertTimerInActiveList+0x80>)
 8008830:	681a      	ldr	r2, [r3, #0]
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	3304      	adds	r3, #4
 8008836:	4619      	mov	r1, r3
 8008838:	4610      	mov	r0, r2
 800883a:	f7fe f937 	bl	8006aac <vListInsert>
		}
	}

	return xProcessTimerNow;
 800883e:	697b      	ldr	r3, [r7, #20]
}
 8008840:	4618      	mov	r0, r3
 8008842:	3718      	adds	r7, #24
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}
 8008848:	20000d68 	.word	0x20000d68
 800884c:	20000d64 	.word	0x20000d64

08008850 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b08c      	sub	sp, #48	; 0x30
 8008854:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008856:	e0ae      	b.n	80089b6 <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	2b00      	cmp	r3, #0
 800885c:	f2c0 80aa 	blt.w	80089b4 <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008866:	695b      	ldr	r3, [r3, #20]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d004      	beq.n	8008876 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800886c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800886e:	3304      	adds	r3, #4
 8008870:	4618      	mov	r0, r3
 8008872:	f7fe f953 	bl	8006b1c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008876:	1d3b      	adds	r3, r7, #4
 8008878:	4618      	mov	r0, r3
 800887a:	f7ff ff87 	bl	800878c <prvSampleTimeNow>
 800887e:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	2b09      	cmp	r3, #9
 8008884:	f200 8097 	bhi.w	80089b6 <prvProcessReceivedCommands+0x166>
 8008888:	a201      	add	r2, pc, #4	; (adr r2, 8008890 <prvProcessReceivedCommands+0x40>)
 800888a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800888e:	bf00      	nop
 8008890:	080088b9 	.word	0x080088b9
 8008894:	080088b9 	.word	0x080088b9
 8008898:	080088b9 	.word	0x080088b9
 800889c:	0800892d 	.word	0x0800892d
 80088a0:	08008941 	.word	0x08008941
 80088a4:	0800898b 	.word	0x0800898b
 80088a8:	080088b9 	.word	0x080088b9
 80088ac:	080088b9 	.word	0x080088b9
 80088b0:	0800892d 	.word	0x0800892d
 80088b4:	08008941 	.word	0x08008941
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80088b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80088be:	f043 0301 	orr.w	r3, r3, #1
 80088c2:	b2da      	uxtb	r2, r3
 80088c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80088ca:	68fa      	ldr	r2, [r7, #12]
 80088cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ce:	699b      	ldr	r3, [r3, #24]
 80088d0:	18d1      	adds	r1, r2, r3
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	6a3a      	ldr	r2, [r7, #32]
 80088d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80088d8:	f7ff ff78 	bl	80087cc <prvInsertTimerInActiveList>
 80088dc:	4603      	mov	r3, r0
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d069      	beq.n	80089b6 <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80088e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e4:	6a1b      	ldr	r3, [r3, #32]
 80088e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80088e8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80088ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80088f0:	f003 0304 	and.w	r3, r3, #4
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d05e      	beq.n	80089b6 <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80088f8:	68fa      	ldr	r2, [r7, #12]
 80088fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088fc:	699b      	ldr	r3, [r3, #24]
 80088fe:	441a      	add	r2, r3
 8008900:	2300      	movs	r3, #0
 8008902:	9300      	str	r3, [sp, #0]
 8008904:	2300      	movs	r3, #0
 8008906:	2100      	movs	r1, #0
 8008908:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800890a:	f7ff fe23 	bl	8008554 <xTimerGenericCommand>
 800890e:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8008910:	69fb      	ldr	r3, [r7, #28]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d14f      	bne.n	80089b6 <prvProcessReceivedCommands+0x166>
	__asm volatile
 8008916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800891a:	f383 8811 	msr	BASEPRI, r3
 800891e:	f3bf 8f6f 	isb	sy
 8008922:	f3bf 8f4f 	dsb	sy
 8008926:	61bb      	str	r3, [r7, #24]
}
 8008928:	bf00      	nop
 800892a:	e7fe      	b.n	800892a <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800892c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800892e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008932:	f023 0301 	bic.w	r3, r3, #1
 8008936:	b2da      	uxtb	r2, r3
 8008938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800893a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 800893e:	e03a      	b.n	80089b6 <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008942:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008946:	f043 0301 	orr.w	r3, r3, #1
 800894a:	b2da      	uxtb	r2, r3
 800894c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800894e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008952:	68fa      	ldr	r2, [r7, #12]
 8008954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008956:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800895a:	699b      	ldr	r3, [r3, #24]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d10a      	bne.n	8008976 <prvProcessReceivedCommands+0x126>
	__asm volatile
 8008960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008964:	f383 8811 	msr	BASEPRI, r3
 8008968:	f3bf 8f6f 	isb	sy
 800896c:	f3bf 8f4f 	dsb	sy
 8008970:	617b      	str	r3, [r7, #20]
}
 8008972:	bf00      	nop
 8008974:	e7fe      	b.n	8008974 <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008978:	699a      	ldr	r2, [r3, #24]
 800897a:	6a3b      	ldr	r3, [r7, #32]
 800897c:	18d1      	adds	r1, r2, r3
 800897e:	6a3b      	ldr	r3, [r7, #32]
 8008980:	6a3a      	ldr	r2, [r7, #32]
 8008982:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008984:	f7ff ff22 	bl	80087cc <prvInsertTimerInActiveList>
					break;
 8008988:	e015      	b.n	80089b6 <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800898a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800898c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008990:	f003 0302 	and.w	r3, r3, #2
 8008994:	2b00      	cmp	r3, #0
 8008996:	d103      	bne.n	80089a0 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 8008998:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800899a:	f000 fb7b 	bl	8009094 <vPortFree>
 800899e:	e00a      	b.n	80089b6 <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80089a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80089a6:	f023 0301 	bic.w	r3, r3, #1
 80089aa:	b2da      	uxtb	r2, r3
 80089ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80089b2:	e000      	b.n	80089b6 <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80089b4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80089b6:	4b08      	ldr	r3, [pc, #32]	; (80089d8 <prvProcessReceivedCommands+0x188>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f107 0108 	add.w	r1, r7, #8
 80089be:	2200      	movs	r2, #0
 80089c0:	4618      	mov	r0, r3
 80089c2:	f7fe fbf7 	bl	80071b4 <xQueueReceive>
 80089c6:	4603      	mov	r3, r0
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	f47f af45 	bne.w	8008858 <prvProcessReceivedCommands+0x8>
	}
}
 80089ce:	bf00      	nop
 80089d0:	bf00      	nop
 80089d2:	3728      	adds	r7, #40	; 0x28
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}
 80089d8:	20000d6c 	.word	0x20000d6c

080089dc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b088      	sub	sp, #32
 80089e0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80089e2:	e048      	b.n	8008a76 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80089e4:	4b2d      	ldr	r3, [pc, #180]	; (8008a9c <prvSwitchTimerLists+0xc0>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	68db      	ldr	r3, [r3, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089ee:	4b2b      	ldr	r3, [pc, #172]	; (8008a9c <prvSwitchTimerLists+0xc0>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	68db      	ldr	r3, [r3, #12]
 80089f4:	68db      	ldr	r3, [r3, #12]
 80089f6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	3304      	adds	r3, #4
 80089fc:	4618      	mov	r0, r3
 80089fe:	f7fe f88d 	bl	8006b1c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	6a1b      	ldr	r3, [r3, #32]
 8008a06:	68f8      	ldr	r0, [r7, #12]
 8008a08:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008a10:	f003 0304 	and.w	r3, r3, #4
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d02e      	beq.n	8008a76 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	699b      	ldr	r3, [r3, #24]
 8008a1c:	693a      	ldr	r2, [r7, #16]
 8008a1e:	4413      	add	r3, r2
 8008a20:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008a22:	68ba      	ldr	r2, [r7, #8]
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	429a      	cmp	r2, r3
 8008a28:	d90e      	bls.n	8008a48 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	68ba      	ldr	r2, [r7, #8]
 8008a2e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	68fa      	ldr	r2, [r7, #12]
 8008a34:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008a36:	4b19      	ldr	r3, [pc, #100]	; (8008a9c <prvSwitchTimerLists+0xc0>)
 8008a38:	681a      	ldr	r2, [r3, #0]
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	3304      	adds	r3, #4
 8008a3e:	4619      	mov	r1, r3
 8008a40:	4610      	mov	r0, r2
 8008a42:	f7fe f833 	bl	8006aac <vListInsert>
 8008a46:	e016      	b.n	8008a76 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008a48:	2300      	movs	r3, #0
 8008a4a:	9300      	str	r3, [sp, #0]
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	693a      	ldr	r2, [r7, #16]
 8008a50:	2100      	movs	r1, #0
 8008a52:	68f8      	ldr	r0, [r7, #12]
 8008a54:	f7ff fd7e 	bl	8008554 <xTimerGenericCommand>
 8008a58:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d10a      	bne.n	8008a76 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a64:	f383 8811 	msr	BASEPRI, r3
 8008a68:	f3bf 8f6f 	isb	sy
 8008a6c:	f3bf 8f4f 	dsb	sy
 8008a70:	603b      	str	r3, [r7, #0]
}
 8008a72:	bf00      	nop
 8008a74:	e7fe      	b.n	8008a74 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008a76:	4b09      	ldr	r3, [pc, #36]	; (8008a9c <prvSwitchTimerLists+0xc0>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d1b1      	bne.n	80089e4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008a80:	4b06      	ldr	r3, [pc, #24]	; (8008a9c <prvSwitchTimerLists+0xc0>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008a86:	4b06      	ldr	r3, [pc, #24]	; (8008aa0 <prvSwitchTimerLists+0xc4>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a04      	ldr	r2, [pc, #16]	; (8008a9c <prvSwitchTimerLists+0xc0>)
 8008a8c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008a8e:	4a04      	ldr	r2, [pc, #16]	; (8008aa0 <prvSwitchTimerLists+0xc4>)
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	6013      	str	r3, [r2, #0]
}
 8008a94:	bf00      	nop
 8008a96:	3718      	adds	r7, #24
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}
 8008a9c:	20000d64 	.word	0x20000d64
 8008aa0:	20000d68 	.word	0x20000d68

08008aa4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b082      	sub	sp, #8
 8008aa8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008aaa:	f000 f92f 	bl	8008d0c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008aae:	4b15      	ldr	r3, [pc, #84]	; (8008b04 <prvCheckForValidListAndQueue+0x60>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d120      	bne.n	8008af8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008ab6:	4814      	ldr	r0, [pc, #80]	; (8008b08 <prvCheckForValidListAndQueue+0x64>)
 8008ab8:	f7fd ffaa 	bl	8006a10 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008abc:	4813      	ldr	r0, [pc, #76]	; (8008b0c <prvCheckForValidListAndQueue+0x68>)
 8008abe:	f7fd ffa7 	bl	8006a10 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008ac2:	4b13      	ldr	r3, [pc, #76]	; (8008b10 <prvCheckForValidListAndQueue+0x6c>)
 8008ac4:	4a10      	ldr	r2, [pc, #64]	; (8008b08 <prvCheckForValidListAndQueue+0x64>)
 8008ac6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008ac8:	4b12      	ldr	r3, [pc, #72]	; (8008b14 <prvCheckForValidListAndQueue+0x70>)
 8008aca:	4a10      	ldr	r2, [pc, #64]	; (8008b0c <prvCheckForValidListAndQueue+0x68>)
 8008acc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008ace:	2300      	movs	r3, #0
 8008ad0:	9300      	str	r3, [sp, #0]
 8008ad2:	4b11      	ldr	r3, [pc, #68]	; (8008b18 <prvCheckForValidListAndQueue+0x74>)
 8008ad4:	4a11      	ldr	r2, [pc, #68]	; (8008b1c <prvCheckForValidListAndQueue+0x78>)
 8008ad6:	210c      	movs	r1, #12
 8008ad8:	200a      	movs	r0, #10
 8008ada:	f7fe f8b1 	bl	8006c40 <xQueueGenericCreateStatic>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	4a08      	ldr	r2, [pc, #32]	; (8008b04 <prvCheckForValidListAndQueue+0x60>)
 8008ae2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008ae4:	4b07      	ldr	r3, [pc, #28]	; (8008b04 <prvCheckForValidListAndQueue+0x60>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d005      	beq.n	8008af8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008aec:	4b05      	ldr	r3, [pc, #20]	; (8008b04 <prvCheckForValidListAndQueue+0x60>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	490b      	ldr	r1, [pc, #44]	; (8008b20 <prvCheckForValidListAndQueue+0x7c>)
 8008af2:	4618      	mov	r0, r3
 8008af4:	f7fe fd4e 	bl	8007594 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008af8:	f000 f938 	bl	8008d6c <vPortExitCritical>
}
 8008afc:	bf00      	nop
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}
 8008b02:	bf00      	nop
 8008b04:	20000d6c 	.word	0x20000d6c
 8008b08:	20000d3c 	.word	0x20000d3c
 8008b0c:	20000d50 	.word	0x20000d50
 8008b10:	20000d64 	.word	0x20000d64
 8008b14:	20000d68 	.word	0x20000d68
 8008b18:	20000df0 	.word	0x20000df0
 8008b1c:	20000d78 	.word	0x20000d78
 8008b20:	0800a960 	.word	0x0800a960

08008b24 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008b24:	b480      	push	{r7}
 8008b26:	b085      	sub	sp, #20
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	60f8      	str	r0, [r7, #12]
 8008b2c:	60b9      	str	r1, [r7, #8]
 8008b2e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	3b04      	subs	r3, #4
 8008b34:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008b3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	3b04      	subs	r3, #4
 8008b42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	f023 0201 	bic.w	r2, r3, #1
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	3b04      	subs	r3, #4
 8008b52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008b54:	4a08      	ldr	r2, [pc, #32]	; (8008b78 <pxPortInitialiseStack+0x54>)
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	3b14      	subs	r3, #20
 8008b5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008b60:	687a      	ldr	r2, [r7, #4]
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	3b20      	subs	r3, #32
 8008b6a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3714      	adds	r7, #20
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bc80      	pop	{r7}
 8008b76:	4770      	bx	lr
 8008b78:	08008b7d 	.word	0x08008b7d

08008b7c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b085      	sub	sp, #20
 8008b80:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008b82:	2300      	movs	r3, #0
 8008b84:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008b86:	4b12      	ldr	r3, [pc, #72]	; (8008bd0 <prvTaskExitError+0x54>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b8e:	d00a      	beq.n	8008ba6 <prvTaskExitError+0x2a>
	__asm volatile
 8008b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b94:	f383 8811 	msr	BASEPRI, r3
 8008b98:	f3bf 8f6f 	isb	sy
 8008b9c:	f3bf 8f4f 	dsb	sy
 8008ba0:	60fb      	str	r3, [r7, #12]
}
 8008ba2:	bf00      	nop
 8008ba4:	e7fe      	b.n	8008ba4 <prvTaskExitError+0x28>
	__asm volatile
 8008ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008baa:	f383 8811 	msr	BASEPRI, r3
 8008bae:	f3bf 8f6f 	isb	sy
 8008bb2:	f3bf 8f4f 	dsb	sy
 8008bb6:	60bb      	str	r3, [r7, #8]
}
 8008bb8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008bba:	bf00      	nop
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d0fc      	beq.n	8008bbc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008bc2:	bf00      	nop
 8008bc4:	bf00      	nop
 8008bc6:	3714      	adds	r7, #20
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bc80      	pop	{r7}
 8008bcc:	4770      	bx	lr
 8008bce:	bf00      	nop
 8008bd0:	2000000c 	.word	0x2000000c
	...

08008be0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008be0:	4b07      	ldr	r3, [pc, #28]	; (8008c00 <pxCurrentTCBConst2>)
 8008be2:	6819      	ldr	r1, [r3, #0]
 8008be4:	6808      	ldr	r0, [r1, #0]
 8008be6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008bea:	f380 8809 	msr	PSP, r0
 8008bee:	f3bf 8f6f 	isb	sy
 8008bf2:	f04f 0000 	mov.w	r0, #0
 8008bf6:	f380 8811 	msr	BASEPRI, r0
 8008bfa:	f04e 0e0d 	orr.w	lr, lr, #13
 8008bfe:	4770      	bx	lr

08008c00 <pxCurrentTCBConst2>:
 8008c00:	20000c10 	.word	0x20000c10
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008c04:	bf00      	nop
 8008c06:	bf00      	nop

08008c08 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008c08:	4806      	ldr	r0, [pc, #24]	; (8008c24 <prvPortStartFirstTask+0x1c>)
 8008c0a:	6800      	ldr	r0, [r0, #0]
 8008c0c:	6800      	ldr	r0, [r0, #0]
 8008c0e:	f380 8808 	msr	MSP, r0
 8008c12:	b662      	cpsie	i
 8008c14:	b661      	cpsie	f
 8008c16:	f3bf 8f4f 	dsb	sy
 8008c1a:	f3bf 8f6f 	isb	sy
 8008c1e:	df00      	svc	0
 8008c20:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008c22:	bf00      	nop
 8008c24:	e000ed08 	.word	0xe000ed08

08008c28 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b084      	sub	sp, #16
 8008c2c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008c2e:	4b32      	ldr	r3, [pc, #200]	; (8008cf8 <xPortStartScheduler+0xd0>)
 8008c30:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	781b      	ldrb	r3, [r3, #0]
 8008c36:	b2db      	uxtb	r3, r3
 8008c38:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	22ff      	movs	r2, #255	; 0xff
 8008c3e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	781b      	ldrb	r3, [r3, #0]
 8008c44:	b2db      	uxtb	r3, r3
 8008c46:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008c48:	78fb      	ldrb	r3, [r7, #3]
 8008c4a:	b2db      	uxtb	r3, r3
 8008c4c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008c50:	b2da      	uxtb	r2, r3
 8008c52:	4b2a      	ldr	r3, [pc, #168]	; (8008cfc <xPortStartScheduler+0xd4>)
 8008c54:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008c56:	4b2a      	ldr	r3, [pc, #168]	; (8008d00 <xPortStartScheduler+0xd8>)
 8008c58:	2207      	movs	r2, #7
 8008c5a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008c5c:	e009      	b.n	8008c72 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008c5e:	4b28      	ldr	r3, [pc, #160]	; (8008d00 <xPortStartScheduler+0xd8>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	3b01      	subs	r3, #1
 8008c64:	4a26      	ldr	r2, [pc, #152]	; (8008d00 <xPortStartScheduler+0xd8>)
 8008c66:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008c68:	78fb      	ldrb	r3, [r7, #3]
 8008c6a:	b2db      	uxtb	r3, r3
 8008c6c:	005b      	lsls	r3, r3, #1
 8008c6e:	b2db      	uxtb	r3, r3
 8008c70:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008c72:	78fb      	ldrb	r3, [r7, #3]
 8008c74:	b2db      	uxtb	r3, r3
 8008c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c7a:	2b80      	cmp	r3, #128	; 0x80
 8008c7c:	d0ef      	beq.n	8008c5e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008c7e:	4b20      	ldr	r3, [pc, #128]	; (8008d00 <xPortStartScheduler+0xd8>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f1c3 0307 	rsb	r3, r3, #7
 8008c86:	2b04      	cmp	r3, #4
 8008c88:	d00a      	beq.n	8008ca0 <xPortStartScheduler+0x78>
	__asm volatile
 8008c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c8e:	f383 8811 	msr	BASEPRI, r3
 8008c92:	f3bf 8f6f 	isb	sy
 8008c96:	f3bf 8f4f 	dsb	sy
 8008c9a:	60bb      	str	r3, [r7, #8]
}
 8008c9c:	bf00      	nop
 8008c9e:	e7fe      	b.n	8008c9e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008ca0:	4b17      	ldr	r3, [pc, #92]	; (8008d00 <xPortStartScheduler+0xd8>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	021b      	lsls	r3, r3, #8
 8008ca6:	4a16      	ldr	r2, [pc, #88]	; (8008d00 <xPortStartScheduler+0xd8>)
 8008ca8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008caa:	4b15      	ldr	r3, [pc, #84]	; (8008d00 <xPortStartScheduler+0xd8>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008cb2:	4a13      	ldr	r2, [pc, #76]	; (8008d00 <xPortStartScheduler+0xd8>)
 8008cb4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	b2da      	uxtb	r2, r3
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008cbe:	4b11      	ldr	r3, [pc, #68]	; (8008d04 <xPortStartScheduler+0xdc>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4a10      	ldr	r2, [pc, #64]	; (8008d04 <xPortStartScheduler+0xdc>)
 8008cc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008cc8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008cca:	4b0e      	ldr	r3, [pc, #56]	; (8008d04 <xPortStartScheduler+0xdc>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	4a0d      	ldr	r2, [pc, #52]	; (8008d04 <xPortStartScheduler+0xdc>)
 8008cd0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008cd4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008cd6:	f000 f8b9 	bl	8008e4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008cda:	4b0b      	ldr	r3, [pc, #44]	; (8008d08 <xPortStartScheduler+0xe0>)
 8008cdc:	2200      	movs	r2, #0
 8008cde:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008ce0:	f7ff ff92 	bl	8008c08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008ce4:	f7ff f870 	bl	8007dc8 <vTaskSwitchContext>
	prvTaskExitError();
 8008ce8:	f7ff ff48 	bl	8008b7c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008cec:	2300      	movs	r3, #0
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3710      	adds	r7, #16
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}
 8008cf6:	bf00      	nop
 8008cf8:	e000e400 	.word	0xe000e400
 8008cfc:	20000e38 	.word	0x20000e38
 8008d00:	20000e3c 	.word	0x20000e3c
 8008d04:	e000ed20 	.word	0xe000ed20
 8008d08:	2000000c 	.word	0x2000000c

08008d0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b083      	sub	sp, #12
 8008d10:	af00      	add	r7, sp, #0
	__asm volatile
 8008d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d16:	f383 8811 	msr	BASEPRI, r3
 8008d1a:	f3bf 8f6f 	isb	sy
 8008d1e:	f3bf 8f4f 	dsb	sy
 8008d22:	607b      	str	r3, [r7, #4]
}
 8008d24:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008d26:	4b0f      	ldr	r3, [pc, #60]	; (8008d64 <vPortEnterCritical+0x58>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	3301      	adds	r3, #1
 8008d2c:	4a0d      	ldr	r2, [pc, #52]	; (8008d64 <vPortEnterCritical+0x58>)
 8008d2e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008d30:	4b0c      	ldr	r3, [pc, #48]	; (8008d64 <vPortEnterCritical+0x58>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	2b01      	cmp	r3, #1
 8008d36:	d10f      	bne.n	8008d58 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008d38:	4b0b      	ldr	r3, [pc, #44]	; (8008d68 <vPortEnterCritical+0x5c>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	b2db      	uxtb	r3, r3
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d00a      	beq.n	8008d58 <vPortEnterCritical+0x4c>
	__asm volatile
 8008d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d46:	f383 8811 	msr	BASEPRI, r3
 8008d4a:	f3bf 8f6f 	isb	sy
 8008d4e:	f3bf 8f4f 	dsb	sy
 8008d52:	603b      	str	r3, [r7, #0]
}
 8008d54:	bf00      	nop
 8008d56:	e7fe      	b.n	8008d56 <vPortEnterCritical+0x4a>
	}
}
 8008d58:	bf00      	nop
 8008d5a:	370c      	adds	r7, #12
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bc80      	pop	{r7}
 8008d60:	4770      	bx	lr
 8008d62:	bf00      	nop
 8008d64:	2000000c 	.word	0x2000000c
 8008d68:	e000ed04 	.word	0xe000ed04

08008d6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b083      	sub	sp, #12
 8008d70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008d72:	4b11      	ldr	r3, [pc, #68]	; (8008db8 <vPortExitCritical+0x4c>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d10a      	bne.n	8008d90 <vPortExitCritical+0x24>
	__asm volatile
 8008d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d7e:	f383 8811 	msr	BASEPRI, r3
 8008d82:	f3bf 8f6f 	isb	sy
 8008d86:	f3bf 8f4f 	dsb	sy
 8008d8a:	607b      	str	r3, [r7, #4]
}
 8008d8c:	bf00      	nop
 8008d8e:	e7fe      	b.n	8008d8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008d90:	4b09      	ldr	r3, [pc, #36]	; (8008db8 <vPortExitCritical+0x4c>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	3b01      	subs	r3, #1
 8008d96:	4a08      	ldr	r2, [pc, #32]	; (8008db8 <vPortExitCritical+0x4c>)
 8008d98:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008d9a:	4b07      	ldr	r3, [pc, #28]	; (8008db8 <vPortExitCritical+0x4c>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d105      	bne.n	8008dae <vPortExitCritical+0x42>
 8008da2:	2300      	movs	r3, #0
 8008da4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	f383 8811 	msr	BASEPRI, r3
}
 8008dac:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008dae:	bf00      	nop
 8008db0:	370c      	adds	r7, #12
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bc80      	pop	{r7}
 8008db6:	4770      	bx	lr
 8008db8:	2000000c 	.word	0x2000000c
 8008dbc:	00000000 	.word	0x00000000

08008dc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008dc0:	f3ef 8009 	mrs	r0, PSP
 8008dc4:	f3bf 8f6f 	isb	sy
 8008dc8:	4b0d      	ldr	r3, [pc, #52]	; (8008e00 <pxCurrentTCBConst>)
 8008dca:	681a      	ldr	r2, [r3, #0]
 8008dcc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008dd0:	6010      	str	r0, [r2, #0]
 8008dd2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008dd6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008dda:	f380 8811 	msr	BASEPRI, r0
 8008dde:	f7fe fff3 	bl	8007dc8 <vTaskSwitchContext>
 8008de2:	f04f 0000 	mov.w	r0, #0
 8008de6:	f380 8811 	msr	BASEPRI, r0
 8008dea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008dee:	6819      	ldr	r1, [r3, #0]
 8008df0:	6808      	ldr	r0, [r1, #0]
 8008df2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008df6:	f380 8809 	msr	PSP, r0
 8008dfa:	f3bf 8f6f 	isb	sy
 8008dfe:	4770      	bx	lr

08008e00 <pxCurrentTCBConst>:
 8008e00:	20000c10 	.word	0x20000c10
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008e04:	bf00      	nop
 8008e06:	bf00      	nop

08008e08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b082      	sub	sp, #8
 8008e0c:	af00      	add	r7, sp, #0
	__asm volatile
 8008e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e12:	f383 8811 	msr	BASEPRI, r3
 8008e16:	f3bf 8f6f 	isb	sy
 8008e1a:	f3bf 8f4f 	dsb	sy
 8008e1e:	607b      	str	r3, [r7, #4]
}
 8008e20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008e22:	f7fe ff19 	bl	8007c58 <xTaskIncrementTick>
 8008e26:	4603      	mov	r3, r0
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d003      	beq.n	8008e34 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008e2c:	4b06      	ldr	r3, [pc, #24]	; (8008e48 <SysTick_Handler+0x40>)
 8008e2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e32:	601a      	str	r2, [r3, #0]
 8008e34:	2300      	movs	r3, #0
 8008e36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	f383 8811 	msr	BASEPRI, r3
}
 8008e3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008e40:	bf00      	nop
 8008e42:	3708      	adds	r7, #8
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}
 8008e48:	e000ed04 	.word	0xe000ed04

08008e4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008e50:	4b0a      	ldr	r3, [pc, #40]	; (8008e7c <vPortSetupTimerInterrupt+0x30>)
 8008e52:	2200      	movs	r2, #0
 8008e54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008e56:	4b0a      	ldr	r3, [pc, #40]	; (8008e80 <vPortSetupTimerInterrupt+0x34>)
 8008e58:	2200      	movs	r2, #0
 8008e5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008e5c:	4b09      	ldr	r3, [pc, #36]	; (8008e84 <vPortSetupTimerInterrupt+0x38>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4a09      	ldr	r2, [pc, #36]	; (8008e88 <vPortSetupTimerInterrupt+0x3c>)
 8008e62:	fba2 2303 	umull	r2, r3, r2, r3
 8008e66:	099b      	lsrs	r3, r3, #6
 8008e68:	4a08      	ldr	r2, [pc, #32]	; (8008e8c <vPortSetupTimerInterrupt+0x40>)
 8008e6a:	3b01      	subs	r3, #1
 8008e6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008e6e:	4b03      	ldr	r3, [pc, #12]	; (8008e7c <vPortSetupTimerInterrupt+0x30>)
 8008e70:	2207      	movs	r2, #7
 8008e72:	601a      	str	r2, [r3, #0]
}
 8008e74:	bf00      	nop
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bc80      	pop	{r7}
 8008e7a:	4770      	bx	lr
 8008e7c:	e000e010 	.word	0xe000e010
 8008e80:	e000e018 	.word	0xe000e018
 8008e84:	20000000 	.word	0x20000000
 8008e88:	10624dd3 	.word	0x10624dd3
 8008e8c:	e000e014 	.word	0xe000e014

08008e90 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008e90:	b480      	push	{r7}
 8008e92:	b085      	sub	sp, #20
 8008e94:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008e96:	f3ef 8305 	mrs	r3, IPSR
 8008e9a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	2b0f      	cmp	r3, #15
 8008ea0:	d914      	bls.n	8008ecc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008ea2:	4a16      	ldr	r2, [pc, #88]	; (8008efc <vPortValidateInterruptPriority+0x6c>)
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	4413      	add	r3, r2
 8008ea8:	781b      	ldrb	r3, [r3, #0]
 8008eaa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008eac:	4b14      	ldr	r3, [pc, #80]	; (8008f00 <vPortValidateInterruptPriority+0x70>)
 8008eae:	781b      	ldrb	r3, [r3, #0]
 8008eb0:	7afa      	ldrb	r2, [r7, #11]
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d20a      	bcs.n	8008ecc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eba:	f383 8811 	msr	BASEPRI, r3
 8008ebe:	f3bf 8f6f 	isb	sy
 8008ec2:	f3bf 8f4f 	dsb	sy
 8008ec6:	607b      	str	r3, [r7, #4]
}
 8008ec8:	bf00      	nop
 8008eca:	e7fe      	b.n	8008eca <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008ecc:	4b0d      	ldr	r3, [pc, #52]	; (8008f04 <vPortValidateInterruptPriority+0x74>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008ed4:	4b0c      	ldr	r3, [pc, #48]	; (8008f08 <vPortValidateInterruptPriority+0x78>)
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	d90a      	bls.n	8008ef2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee0:	f383 8811 	msr	BASEPRI, r3
 8008ee4:	f3bf 8f6f 	isb	sy
 8008ee8:	f3bf 8f4f 	dsb	sy
 8008eec:	603b      	str	r3, [r7, #0]
}
 8008eee:	bf00      	nop
 8008ef0:	e7fe      	b.n	8008ef0 <vPortValidateInterruptPriority+0x60>
	}
 8008ef2:	bf00      	nop
 8008ef4:	3714      	adds	r7, #20
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bc80      	pop	{r7}
 8008efa:	4770      	bx	lr
 8008efc:	e000e3f0 	.word	0xe000e3f0
 8008f00:	20000e38 	.word	0x20000e38
 8008f04:	e000ed0c 	.word	0xe000ed0c
 8008f08:	20000e3c 	.word	0x20000e3c

08008f0c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b08a      	sub	sp, #40	; 0x28
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008f14:	2300      	movs	r3, #0
 8008f16:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008f18:	f7fe fde6 	bl	8007ae8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008f1c:	4b58      	ldr	r3, [pc, #352]	; (8009080 <pvPortMalloc+0x174>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d101      	bne.n	8008f28 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008f24:	f000 f910 	bl	8009148 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008f28:	4b56      	ldr	r3, [pc, #344]	; (8009084 <pvPortMalloc+0x178>)
 8008f2a:	681a      	ldr	r2, [r3, #0]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	4013      	ands	r3, r2
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	f040 808e 	bne.w	8009052 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d01d      	beq.n	8008f78 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008f3c:	2208      	movs	r2, #8
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	4413      	add	r3, r2
 8008f42:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f003 0307 	and.w	r3, r3, #7
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d014      	beq.n	8008f78 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f023 0307 	bic.w	r3, r3, #7
 8008f54:	3308      	adds	r3, #8
 8008f56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f003 0307 	and.w	r3, r3, #7
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d00a      	beq.n	8008f78 <pvPortMalloc+0x6c>
	__asm volatile
 8008f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f66:	f383 8811 	msr	BASEPRI, r3
 8008f6a:	f3bf 8f6f 	isb	sy
 8008f6e:	f3bf 8f4f 	dsb	sy
 8008f72:	617b      	str	r3, [r7, #20]
}
 8008f74:	bf00      	nop
 8008f76:	e7fe      	b.n	8008f76 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d069      	beq.n	8009052 <pvPortMalloc+0x146>
 8008f7e:	4b42      	ldr	r3, [pc, #264]	; (8009088 <pvPortMalloc+0x17c>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	687a      	ldr	r2, [r7, #4]
 8008f84:	429a      	cmp	r2, r3
 8008f86:	d864      	bhi.n	8009052 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008f88:	4b40      	ldr	r3, [pc, #256]	; (800908c <pvPortMalloc+0x180>)
 8008f8a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008f8c:	4b3f      	ldr	r3, [pc, #252]	; (800908c <pvPortMalloc+0x180>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008f92:	e004      	b.n	8008f9e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f96:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	687a      	ldr	r2, [r7, #4]
 8008fa4:	429a      	cmp	r2, r3
 8008fa6:	d903      	bls.n	8008fb0 <pvPortMalloc+0xa4>
 8008fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d1f1      	bne.n	8008f94 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008fb0:	4b33      	ldr	r3, [pc, #204]	; (8009080 <pvPortMalloc+0x174>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fb6:	429a      	cmp	r2, r3
 8008fb8:	d04b      	beq.n	8009052 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008fba:	6a3b      	ldr	r3, [r7, #32]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	2208      	movs	r2, #8
 8008fc0:	4413      	add	r3, r2
 8008fc2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc6:	681a      	ldr	r2, [r3, #0]
 8008fc8:	6a3b      	ldr	r3, [r7, #32]
 8008fca:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fce:	685a      	ldr	r2, [r3, #4]
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	1ad2      	subs	r2, r2, r3
 8008fd4:	2308      	movs	r3, #8
 8008fd6:	005b      	lsls	r3, r3, #1
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	d91f      	bls.n	800901c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008fdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	4413      	add	r3, r2
 8008fe2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008fe4:	69bb      	ldr	r3, [r7, #24]
 8008fe6:	f003 0307 	and.w	r3, r3, #7
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d00a      	beq.n	8009004 <pvPortMalloc+0xf8>
	__asm volatile
 8008fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff2:	f383 8811 	msr	BASEPRI, r3
 8008ff6:	f3bf 8f6f 	isb	sy
 8008ffa:	f3bf 8f4f 	dsb	sy
 8008ffe:	613b      	str	r3, [r7, #16]
}
 8009000:	bf00      	nop
 8009002:	e7fe      	b.n	8009002 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009006:	685a      	ldr	r2, [r3, #4]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	1ad2      	subs	r2, r2, r3
 800900c:	69bb      	ldr	r3, [r7, #24]
 800900e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009012:	687a      	ldr	r2, [r7, #4]
 8009014:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009016:	69b8      	ldr	r0, [r7, #24]
 8009018:	f000 f8f8 	bl	800920c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800901c:	4b1a      	ldr	r3, [pc, #104]	; (8009088 <pvPortMalloc+0x17c>)
 800901e:	681a      	ldr	r2, [r3, #0]
 8009020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	1ad3      	subs	r3, r2, r3
 8009026:	4a18      	ldr	r2, [pc, #96]	; (8009088 <pvPortMalloc+0x17c>)
 8009028:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800902a:	4b17      	ldr	r3, [pc, #92]	; (8009088 <pvPortMalloc+0x17c>)
 800902c:	681a      	ldr	r2, [r3, #0]
 800902e:	4b18      	ldr	r3, [pc, #96]	; (8009090 <pvPortMalloc+0x184>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	429a      	cmp	r2, r3
 8009034:	d203      	bcs.n	800903e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009036:	4b14      	ldr	r3, [pc, #80]	; (8009088 <pvPortMalloc+0x17c>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	4a15      	ldr	r2, [pc, #84]	; (8009090 <pvPortMalloc+0x184>)
 800903c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800903e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009040:	685a      	ldr	r2, [r3, #4]
 8009042:	4b10      	ldr	r3, [pc, #64]	; (8009084 <pvPortMalloc+0x178>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	431a      	orrs	r2, r3
 8009048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800904a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800904c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800904e:	2200      	movs	r2, #0
 8009050:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009052:	f7fe fd57 	bl	8007b04 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009056:	69fb      	ldr	r3, [r7, #28]
 8009058:	f003 0307 	and.w	r3, r3, #7
 800905c:	2b00      	cmp	r3, #0
 800905e:	d00a      	beq.n	8009076 <pvPortMalloc+0x16a>
	__asm volatile
 8009060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009064:	f383 8811 	msr	BASEPRI, r3
 8009068:	f3bf 8f6f 	isb	sy
 800906c:	f3bf 8f4f 	dsb	sy
 8009070:	60fb      	str	r3, [r7, #12]
}
 8009072:	bf00      	nop
 8009074:	e7fe      	b.n	8009074 <pvPortMalloc+0x168>
	return pvReturn;
 8009076:	69fb      	ldr	r3, [r7, #28]
}
 8009078:	4618      	mov	r0, r3
 800907a:	3728      	adds	r7, #40	; 0x28
 800907c:	46bd      	mov	sp, r7
 800907e:	bd80      	pop	{r7, pc}
 8009080:	20001a48 	.word	0x20001a48
 8009084:	20001a54 	.word	0x20001a54
 8009088:	20001a4c 	.word	0x20001a4c
 800908c:	20001a40 	.word	0x20001a40
 8009090:	20001a50 	.word	0x20001a50

08009094 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b086      	sub	sp, #24
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d048      	beq.n	8009138 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80090a6:	2308      	movs	r3, #8
 80090a8:	425b      	negs	r3, r3
 80090aa:	697a      	ldr	r2, [r7, #20]
 80090ac:	4413      	add	r3, r2
 80090ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80090b0:	697b      	ldr	r3, [r7, #20]
 80090b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80090b4:	693b      	ldr	r3, [r7, #16]
 80090b6:	685a      	ldr	r2, [r3, #4]
 80090b8:	4b21      	ldr	r3, [pc, #132]	; (8009140 <vPortFree+0xac>)
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4013      	ands	r3, r2
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d10a      	bne.n	80090d8 <vPortFree+0x44>
	__asm volatile
 80090c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c6:	f383 8811 	msr	BASEPRI, r3
 80090ca:	f3bf 8f6f 	isb	sy
 80090ce:	f3bf 8f4f 	dsb	sy
 80090d2:	60fb      	str	r3, [r7, #12]
}
 80090d4:	bf00      	nop
 80090d6:	e7fe      	b.n	80090d6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d00a      	beq.n	80090f6 <vPortFree+0x62>
	__asm volatile
 80090e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e4:	f383 8811 	msr	BASEPRI, r3
 80090e8:	f3bf 8f6f 	isb	sy
 80090ec:	f3bf 8f4f 	dsb	sy
 80090f0:	60bb      	str	r3, [r7, #8]
}
 80090f2:	bf00      	nop
 80090f4:	e7fe      	b.n	80090f4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80090f6:	693b      	ldr	r3, [r7, #16]
 80090f8:	685a      	ldr	r2, [r3, #4]
 80090fa:	4b11      	ldr	r3, [pc, #68]	; (8009140 <vPortFree+0xac>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	4013      	ands	r3, r2
 8009100:	2b00      	cmp	r3, #0
 8009102:	d019      	beq.n	8009138 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d115      	bne.n	8009138 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	685a      	ldr	r2, [r3, #4]
 8009110:	4b0b      	ldr	r3, [pc, #44]	; (8009140 <vPortFree+0xac>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	43db      	mvns	r3, r3
 8009116:	401a      	ands	r2, r3
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800911c:	f7fe fce4 	bl	8007ae8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	685a      	ldr	r2, [r3, #4]
 8009124:	4b07      	ldr	r3, [pc, #28]	; (8009144 <vPortFree+0xb0>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	4413      	add	r3, r2
 800912a:	4a06      	ldr	r2, [pc, #24]	; (8009144 <vPortFree+0xb0>)
 800912c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800912e:	6938      	ldr	r0, [r7, #16]
 8009130:	f000 f86c 	bl	800920c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009134:	f7fe fce6 	bl	8007b04 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009138:	bf00      	nop
 800913a:	3718      	adds	r7, #24
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}
 8009140:	20001a54 	.word	0x20001a54
 8009144:	20001a4c 	.word	0x20001a4c

08009148 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009148:	b480      	push	{r7}
 800914a:	b085      	sub	sp, #20
 800914c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800914e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009152:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009154:	4b27      	ldr	r3, [pc, #156]	; (80091f4 <prvHeapInit+0xac>)
 8009156:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	f003 0307 	and.w	r3, r3, #7
 800915e:	2b00      	cmp	r3, #0
 8009160:	d00c      	beq.n	800917c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	3307      	adds	r3, #7
 8009166:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	f023 0307 	bic.w	r3, r3, #7
 800916e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009170:	68ba      	ldr	r2, [r7, #8]
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	1ad3      	subs	r3, r2, r3
 8009176:	4a1f      	ldr	r2, [pc, #124]	; (80091f4 <prvHeapInit+0xac>)
 8009178:	4413      	add	r3, r2
 800917a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009180:	4a1d      	ldr	r2, [pc, #116]	; (80091f8 <prvHeapInit+0xb0>)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009186:	4b1c      	ldr	r3, [pc, #112]	; (80091f8 <prvHeapInit+0xb0>)
 8009188:	2200      	movs	r2, #0
 800918a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	68ba      	ldr	r2, [r7, #8]
 8009190:	4413      	add	r3, r2
 8009192:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009194:	2208      	movs	r2, #8
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	1a9b      	subs	r3, r3, r2
 800919a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	f023 0307 	bic.w	r3, r3, #7
 80091a2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	4a15      	ldr	r2, [pc, #84]	; (80091fc <prvHeapInit+0xb4>)
 80091a8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80091aa:	4b14      	ldr	r3, [pc, #80]	; (80091fc <prvHeapInit+0xb4>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	2200      	movs	r2, #0
 80091b0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80091b2:	4b12      	ldr	r3, [pc, #72]	; (80091fc <prvHeapInit+0xb4>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	2200      	movs	r2, #0
 80091b8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	68fa      	ldr	r2, [r7, #12]
 80091c2:	1ad2      	subs	r2, r2, r3
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80091c8:	4b0c      	ldr	r3, [pc, #48]	; (80091fc <prvHeapInit+0xb4>)
 80091ca:	681a      	ldr	r2, [r3, #0]
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	685b      	ldr	r3, [r3, #4]
 80091d4:	4a0a      	ldr	r2, [pc, #40]	; (8009200 <prvHeapInit+0xb8>)
 80091d6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80091d8:	683b      	ldr	r3, [r7, #0]
 80091da:	685b      	ldr	r3, [r3, #4]
 80091dc:	4a09      	ldr	r2, [pc, #36]	; (8009204 <prvHeapInit+0xbc>)
 80091de:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80091e0:	4b09      	ldr	r3, [pc, #36]	; (8009208 <prvHeapInit+0xc0>)
 80091e2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80091e6:	601a      	str	r2, [r3, #0]
}
 80091e8:	bf00      	nop
 80091ea:	3714      	adds	r7, #20
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bc80      	pop	{r7}
 80091f0:	4770      	bx	lr
 80091f2:	bf00      	nop
 80091f4:	20000e40 	.word	0x20000e40
 80091f8:	20001a40 	.word	0x20001a40
 80091fc:	20001a48 	.word	0x20001a48
 8009200:	20001a50 	.word	0x20001a50
 8009204:	20001a4c 	.word	0x20001a4c
 8009208:	20001a54 	.word	0x20001a54

0800920c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800920c:	b480      	push	{r7}
 800920e:	b085      	sub	sp, #20
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009214:	4b27      	ldr	r3, [pc, #156]	; (80092b4 <prvInsertBlockIntoFreeList+0xa8>)
 8009216:	60fb      	str	r3, [r7, #12]
 8009218:	e002      	b.n	8009220 <prvInsertBlockIntoFreeList+0x14>
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	60fb      	str	r3, [r7, #12]
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	687a      	ldr	r2, [r7, #4]
 8009226:	429a      	cmp	r2, r3
 8009228:	d8f7      	bhi.n	800921a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	685b      	ldr	r3, [r3, #4]
 8009232:	68ba      	ldr	r2, [r7, #8]
 8009234:	4413      	add	r3, r2
 8009236:	687a      	ldr	r2, [r7, #4]
 8009238:	429a      	cmp	r2, r3
 800923a:	d108      	bne.n	800924e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	685a      	ldr	r2, [r3, #4]
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	685b      	ldr	r3, [r3, #4]
 8009244:	441a      	add	r2, r3
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	685b      	ldr	r3, [r3, #4]
 8009256:	68ba      	ldr	r2, [r7, #8]
 8009258:	441a      	add	r2, r3
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	429a      	cmp	r2, r3
 8009260:	d118      	bne.n	8009294 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	681a      	ldr	r2, [r3, #0]
 8009266:	4b14      	ldr	r3, [pc, #80]	; (80092b8 <prvInsertBlockIntoFreeList+0xac>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	429a      	cmp	r2, r3
 800926c:	d00d      	beq.n	800928a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	685a      	ldr	r2, [r3, #4]
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	441a      	add	r2, r3
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	681a      	ldr	r2, [r3, #0]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	601a      	str	r2, [r3, #0]
 8009288:	e008      	b.n	800929c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800928a:	4b0b      	ldr	r3, [pc, #44]	; (80092b8 <prvInsertBlockIntoFreeList+0xac>)
 800928c:	681a      	ldr	r2, [r3, #0]
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	601a      	str	r2, [r3, #0]
 8009292:	e003      	b.n	800929c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681a      	ldr	r2, [r3, #0]
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800929c:	68fa      	ldr	r2, [r7, #12]
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	429a      	cmp	r2, r3
 80092a2:	d002      	beq.n	80092aa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	687a      	ldr	r2, [r7, #4]
 80092a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80092aa:	bf00      	nop
 80092ac:	3714      	adds	r7, #20
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bc80      	pop	{r7}
 80092b2:	4770      	bx	lr
 80092b4:	20001a40 	.word	0x20001a40
 80092b8:	20001a48 	.word	0x20001a48

080092bc <__errno>:
 80092bc:	4b01      	ldr	r3, [pc, #4]	; (80092c4 <__errno+0x8>)
 80092be:	6818      	ldr	r0, [r3, #0]
 80092c0:	4770      	bx	lr
 80092c2:	bf00      	nop
 80092c4:	20000010 	.word	0x20000010

080092c8 <std>:
 80092c8:	2300      	movs	r3, #0
 80092ca:	b510      	push	{r4, lr}
 80092cc:	4604      	mov	r4, r0
 80092ce:	e9c0 3300 	strd	r3, r3, [r0]
 80092d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80092d6:	6083      	str	r3, [r0, #8]
 80092d8:	8181      	strh	r1, [r0, #12]
 80092da:	6643      	str	r3, [r0, #100]	; 0x64
 80092dc:	81c2      	strh	r2, [r0, #14]
 80092de:	6183      	str	r3, [r0, #24]
 80092e0:	4619      	mov	r1, r3
 80092e2:	2208      	movs	r2, #8
 80092e4:	305c      	adds	r0, #92	; 0x5c
 80092e6:	f000 f91a 	bl	800951e <memset>
 80092ea:	4b05      	ldr	r3, [pc, #20]	; (8009300 <std+0x38>)
 80092ec:	6263      	str	r3, [r4, #36]	; 0x24
 80092ee:	4b05      	ldr	r3, [pc, #20]	; (8009304 <std+0x3c>)
 80092f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80092f2:	4b05      	ldr	r3, [pc, #20]	; (8009308 <std+0x40>)
 80092f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80092f6:	4b05      	ldr	r3, [pc, #20]	; (800930c <std+0x44>)
 80092f8:	6224      	str	r4, [r4, #32]
 80092fa:	6323      	str	r3, [r4, #48]	; 0x30
 80092fc:	bd10      	pop	{r4, pc}
 80092fe:	bf00      	nop
 8009300:	080097b5 	.word	0x080097b5
 8009304:	080097d7 	.word	0x080097d7
 8009308:	0800980f 	.word	0x0800980f
 800930c:	08009833 	.word	0x08009833

08009310 <_cleanup_r>:
 8009310:	4901      	ldr	r1, [pc, #4]	; (8009318 <_cleanup_r+0x8>)
 8009312:	f000 b8af 	b.w	8009474 <_fwalk_reent>
 8009316:	bf00      	nop
 8009318:	08009aa1 	.word	0x08009aa1

0800931c <__sfmoreglue>:
 800931c:	b570      	push	{r4, r5, r6, lr}
 800931e:	2268      	movs	r2, #104	; 0x68
 8009320:	1e4d      	subs	r5, r1, #1
 8009322:	4355      	muls	r5, r2
 8009324:	460e      	mov	r6, r1
 8009326:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800932a:	f000 f921 	bl	8009570 <_malloc_r>
 800932e:	4604      	mov	r4, r0
 8009330:	b140      	cbz	r0, 8009344 <__sfmoreglue+0x28>
 8009332:	2100      	movs	r1, #0
 8009334:	e9c0 1600 	strd	r1, r6, [r0]
 8009338:	300c      	adds	r0, #12
 800933a:	60a0      	str	r0, [r4, #8]
 800933c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009340:	f000 f8ed 	bl	800951e <memset>
 8009344:	4620      	mov	r0, r4
 8009346:	bd70      	pop	{r4, r5, r6, pc}

08009348 <__sfp_lock_acquire>:
 8009348:	4801      	ldr	r0, [pc, #4]	; (8009350 <__sfp_lock_acquire+0x8>)
 800934a:	f000 b8d8 	b.w	80094fe <__retarget_lock_acquire_recursive>
 800934e:	bf00      	nop
 8009350:	20001a59 	.word	0x20001a59

08009354 <__sfp_lock_release>:
 8009354:	4801      	ldr	r0, [pc, #4]	; (800935c <__sfp_lock_release+0x8>)
 8009356:	f000 b8d3 	b.w	8009500 <__retarget_lock_release_recursive>
 800935a:	bf00      	nop
 800935c:	20001a59 	.word	0x20001a59

08009360 <__sinit_lock_acquire>:
 8009360:	4801      	ldr	r0, [pc, #4]	; (8009368 <__sinit_lock_acquire+0x8>)
 8009362:	f000 b8cc 	b.w	80094fe <__retarget_lock_acquire_recursive>
 8009366:	bf00      	nop
 8009368:	20001a5a 	.word	0x20001a5a

0800936c <__sinit_lock_release>:
 800936c:	4801      	ldr	r0, [pc, #4]	; (8009374 <__sinit_lock_release+0x8>)
 800936e:	f000 b8c7 	b.w	8009500 <__retarget_lock_release_recursive>
 8009372:	bf00      	nop
 8009374:	20001a5a 	.word	0x20001a5a

08009378 <__sinit>:
 8009378:	b510      	push	{r4, lr}
 800937a:	4604      	mov	r4, r0
 800937c:	f7ff fff0 	bl	8009360 <__sinit_lock_acquire>
 8009380:	69a3      	ldr	r3, [r4, #24]
 8009382:	b11b      	cbz	r3, 800938c <__sinit+0x14>
 8009384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009388:	f7ff bff0 	b.w	800936c <__sinit_lock_release>
 800938c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009390:	6523      	str	r3, [r4, #80]	; 0x50
 8009392:	4b13      	ldr	r3, [pc, #76]	; (80093e0 <__sinit+0x68>)
 8009394:	4a13      	ldr	r2, [pc, #76]	; (80093e4 <__sinit+0x6c>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	62a2      	str	r2, [r4, #40]	; 0x28
 800939a:	42a3      	cmp	r3, r4
 800939c:	bf04      	itt	eq
 800939e:	2301      	moveq	r3, #1
 80093a0:	61a3      	streq	r3, [r4, #24]
 80093a2:	4620      	mov	r0, r4
 80093a4:	f000 f820 	bl	80093e8 <__sfp>
 80093a8:	6060      	str	r0, [r4, #4]
 80093aa:	4620      	mov	r0, r4
 80093ac:	f000 f81c 	bl	80093e8 <__sfp>
 80093b0:	60a0      	str	r0, [r4, #8]
 80093b2:	4620      	mov	r0, r4
 80093b4:	f000 f818 	bl	80093e8 <__sfp>
 80093b8:	2200      	movs	r2, #0
 80093ba:	60e0      	str	r0, [r4, #12]
 80093bc:	2104      	movs	r1, #4
 80093be:	6860      	ldr	r0, [r4, #4]
 80093c0:	f7ff ff82 	bl	80092c8 <std>
 80093c4:	68a0      	ldr	r0, [r4, #8]
 80093c6:	2201      	movs	r2, #1
 80093c8:	2109      	movs	r1, #9
 80093ca:	f7ff ff7d 	bl	80092c8 <std>
 80093ce:	68e0      	ldr	r0, [r4, #12]
 80093d0:	2202      	movs	r2, #2
 80093d2:	2112      	movs	r1, #18
 80093d4:	f7ff ff78 	bl	80092c8 <std>
 80093d8:	2301      	movs	r3, #1
 80093da:	61a3      	str	r3, [r4, #24]
 80093dc:	e7d2      	b.n	8009384 <__sinit+0xc>
 80093de:	bf00      	nop
 80093e0:	0800b0d0 	.word	0x0800b0d0
 80093e4:	08009311 	.word	0x08009311

080093e8 <__sfp>:
 80093e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ea:	4607      	mov	r7, r0
 80093ec:	f7ff ffac 	bl	8009348 <__sfp_lock_acquire>
 80093f0:	4b1e      	ldr	r3, [pc, #120]	; (800946c <__sfp+0x84>)
 80093f2:	681e      	ldr	r6, [r3, #0]
 80093f4:	69b3      	ldr	r3, [r6, #24]
 80093f6:	b913      	cbnz	r3, 80093fe <__sfp+0x16>
 80093f8:	4630      	mov	r0, r6
 80093fa:	f7ff ffbd 	bl	8009378 <__sinit>
 80093fe:	3648      	adds	r6, #72	; 0x48
 8009400:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009404:	3b01      	subs	r3, #1
 8009406:	d503      	bpl.n	8009410 <__sfp+0x28>
 8009408:	6833      	ldr	r3, [r6, #0]
 800940a:	b30b      	cbz	r3, 8009450 <__sfp+0x68>
 800940c:	6836      	ldr	r6, [r6, #0]
 800940e:	e7f7      	b.n	8009400 <__sfp+0x18>
 8009410:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009414:	b9d5      	cbnz	r5, 800944c <__sfp+0x64>
 8009416:	4b16      	ldr	r3, [pc, #88]	; (8009470 <__sfp+0x88>)
 8009418:	60e3      	str	r3, [r4, #12]
 800941a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800941e:	6665      	str	r5, [r4, #100]	; 0x64
 8009420:	f000 f86c 	bl	80094fc <__retarget_lock_init_recursive>
 8009424:	f7ff ff96 	bl	8009354 <__sfp_lock_release>
 8009428:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800942c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009430:	6025      	str	r5, [r4, #0]
 8009432:	61a5      	str	r5, [r4, #24]
 8009434:	2208      	movs	r2, #8
 8009436:	4629      	mov	r1, r5
 8009438:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800943c:	f000 f86f 	bl	800951e <memset>
 8009440:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009444:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009448:	4620      	mov	r0, r4
 800944a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800944c:	3468      	adds	r4, #104	; 0x68
 800944e:	e7d9      	b.n	8009404 <__sfp+0x1c>
 8009450:	2104      	movs	r1, #4
 8009452:	4638      	mov	r0, r7
 8009454:	f7ff ff62 	bl	800931c <__sfmoreglue>
 8009458:	4604      	mov	r4, r0
 800945a:	6030      	str	r0, [r6, #0]
 800945c:	2800      	cmp	r0, #0
 800945e:	d1d5      	bne.n	800940c <__sfp+0x24>
 8009460:	f7ff ff78 	bl	8009354 <__sfp_lock_release>
 8009464:	230c      	movs	r3, #12
 8009466:	603b      	str	r3, [r7, #0]
 8009468:	e7ee      	b.n	8009448 <__sfp+0x60>
 800946a:	bf00      	nop
 800946c:	0800b0d0 	.word	0x0800b0d0
 8009470:	ffff0001 	.word	0xffff0001

08009474 <_fwalk_reent>:
 8009474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009478:	4606      	mov	r6, r0
 800947a:	4688      	mov	r8, r1
 800947c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009480:	2700      	movs	r7, #0
 8009482:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009486:	f1b9 0901 	subs.w	r9, r9, #1
 800948a:	d505      	bpl.n	8009498 <_fwalk_reent+0x24>
 800948c:	6824      	ldr	r4, [r4, #0]
 800948e:	2c00      	cmp	r4, #0
 8009490:	d1f7      	bne.n	8009482 <_fwalk_reent+0xe>
 8009492:	4638      	mov	r0, r7
 8009494:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009498:	89ab      	ldrh	r3, [r5, #12]
 800949a:	2b01      	cmp	r3, #1
 800949c:	d907      	bls.n	80094ae <_fwalk_reent+0x3a>
 800949e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80094a2:	3301      	adds	r3, #1
 80094a4:	d003      	beq.n	80094ae <_fwalk_reent+0x3a>
 80094a6:	4629      	mov	r1, r5
 80094a8:	4630      	mov	r0, r6
 80094aa:	47c0      	blx	r8
 80094ac:	4307      	orrs	r7, r0
 80094ae:	3568      	adds	r5, #104	; 0x68
 80094b0:	e7e9      	b.n	8009486 <_fwalk_reent+0x12>
	...

080094b4 <__libc_init_array>:
 80094b4:	b570      	push	{r4, r5, r6, lr}
 80094b6:	4d0d      	ldr	r5, [pc, #52]	; (80094ec <__libc_init_array+0x38>)
 80094b8:	4c0d      	ldr	r4, [pc, #52]	; (80094f0 <__libc_init_array+0x3c>)
 80094ba:	1b64      	subs	r4, r4, r5
 80094bc:	10a4      	asrs	r4, r4, #2
 80094be:	2600      	movs	r6, #0
 80094c0:	42a6      	cmp	r6, r4
 80094c2:	d109      	bne.n	80094d8 <__libc_init_array+0x24>
 80094c4:	4d0b      	ldr	r5, [pc, #44]	; (80094f4 <__libc_init_array+0x40>)
 80094c6:	4c0c      	ldr	r4, [pc, #48]	; (80094f8 <__libc_init_array+0x44>)
 80094c8:	f001 f9e6 	bl	800a898 <_init>
 80094cc:	1b64      	subs	r4, r4, r5
 80094ce:	10a4      	asrs	r4, r4, #2
 80094d0:	2600      	movs	r6, #0
 80094d2:	42a6      	cmp	r6, r4
 80094d4:	d105      	bne.n	80094e2 <__libc_init_array+0x2e>
 80094d6:	bd70      	pop	{r4, r5, r6, pc}
 80094d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80094dc:	4798      	blx	r3
 80094de:	3601      	adds	r6, #1
 80094e0:	e7ee      	b.n	80094c0 <__libc_init_array+0xc>
 80094e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80094e6:	4798      	blx	r3
 80094e8:	3601      	adds	r6, #1
 80094ea:	e7f2      	b.n	80094d2 <__libc_init_array+0x1e>
 80094ec:	0800b1c0 	.word	0x0800b1c0
 80094f0:	0800b1c0 	.word	0x0800b1c0
 80094f4:	0800b1c0 	.word	0x0800b1c0
 80094f8:	0800b1c4 	.word	0x0800b1c4

080094fc <__retarget_lock_init_recursive>:
 80094fc:	4770      	bx	lr

080094fe <__retarget_lock_acquire_recursive>:
 80094fe:	4770      	bx	lr

08009500 <__retarget_lock_release_recursive>:
 8009500:	4770      	bx	lr

08009502 <memcpy>:
 8009502:	440a      	add	r2, r1
 8009504:	4291      	cmp	r1, r2
 8009506:	f100 33ff 	add.w	r3, r0, #4294967295
 800950a:	d100      	bne.n	800950e <memcpy+0xc>
 800950c:	4770      	bx	lr
 800950e:	b510      	push	{r4, lr}
 8009510:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009514:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009518:	4291      	cmp	r1, r2
 800951a:	d1f9      	bne.n	8009510 <memcpy+0xe>
 800951c:	bd10      	pop	{r4, pc}

0800951e <memset>:
 800951e:	4402      	add	r2, r0
 8009520:	4603      	mov	r3, r0
 8009522:	4293      	cmp	r3, r2
 8009524:	d100      	bne.n	8009528 <memset+0xa>
 8009526:	4770      	bx	lr
 8009528:	f803 1b01 	strb.w	r1, [r3], #1
 800952c:	e7f9      	b.n	8009522 <memset+0x4>
	...

08009530 <sbrk_aligned>:
 8009530:	b570      	push	{r4, r5, r6, lr}
 8009532:	4e0e      	ldr	r6, [pc, #56]	; (800956c <sbrk_aligned+0x3c>)
 8009534:	460c      	mov	r4, r1
 8009536:	6831      	ldr	r1, [r6, #0]
 8009538:	4605      	mov	r5, r0
 800953a:	b911      	cbnz	r1, 8009542 <sbrk_aligned+0x12>
 800953c:	f000 f8f6 	bl	800972c <_sbrk_r>
 8009540:	6030      	str	r0, [r6, #0]
 8009542:	4621      	mov	r1, r4
 8009544:	4628      	mov	r0, r5
 8009546:	f000 f8f1 	bl	800972c <_sbrk_r>
 800954a:	1c43      	adds	r3, r0, #1
 800954c:	d00a      	beq.n	8009564 <sbrk_aligned+0x34>
 800954e:	1cc4      	adds	r4, r0, #3
 8009550:	f024 0403 	bic.w	r4, r4, #3
 8009554:	42a0      	cmp	r0, r4
 8009556:	d007      	beq.n	8009568 <sbrk_aligned+0x38>
 8009558:	1a21      	subs	r1, r4, r0
 800955a:	4628      	mov	r0, r5
 800955c:	f000 f8e6 	bl	800972c <_sbrk_r>
 8009560:	3001      	adds	r0, #1
 8009562:	d101      	bne.n	8009568 <sbrk_aligned+0x38>
 8009564:	f04f 34ff 	mov.w	r4, #4294967295
 8009568:	4620      	mov	r0, r4
 800956a:	bd70      	pop	{r4, r5, r6, pc}
 800956c:	20001a60 	.word	0x20001a60

08009570 <_malloc_r>:
 8009570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009574:	1ccd      	adds	r5, r1, #3
 8009576:	f025 0503 	bic.w	r5, r5, #3
 800957a:	3508      	adds	r5, #8
 800957c:	2d0c      	cmp	r5, #12
 800957e:	bf38      	it	cc
 8009580:	250c      	movcc	r5, #12
 8009582:	2d00      	cmp	r5, #0
 8009584:	4607      	mov	r7, r0
 8009586:	db01      	blt.n	800958c <_malloc_r+0x1c>
 8009588:	42a9      	cmp	r1, r5
 800958a:	d905      	bls.n	8009598 <_malloc_r+0x28>
 800958c:	230c      	movs	r3, #12
 800958e:	603b      	str	r3, [r7, #0]
 8009590:	2600      	movs	r6, #0
 8009592:	4630      	mov	r0, r6
 8009594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009598:	4e2e      	ldr	r6, [pc, #184]	; (8009654 <_malloc_r+0xe4>)
 800959a:	f000 fae9 	bl	8009b70 <__malloc_lock>
 800959e:	6833      	ldr	r3, [r6, #0]
 80095a0:	461c      	mov	r4, r3
 80095a2:	bb34      	cbnz	r4, 80095f2 <_malloc_r+0x82>
 80095a4:	4629      	mov	r1, r5
 80095a6:	4638      	mov	r0, r7
 80095a8:	f7ff ffc2 	bl	8009530 <sbrk_aligned>
 80095ac:	1c43      	adds	r3, r0, #1
 80095ae:	4604      	mov	r4, r0
 80095b0:	d14d      	bne.n	800964e <_malloc_r+0xde>
 80095b2:	6834      	ldr	r4, [r6, #0]
 80095b4:	4626      	mov	r6, r4
 80095b6:	2e00      	cmp	r6, #0
 80095b8:	d140      	bne.n	800963c <_malloc_r+0xcc>
 80095ba:	6823      	ldr	r3, [r4, #0]
 80095bc:	4631      	mov	r1, r6
 80095be:	4638      	mov	r0, r7
 80095c0:	eb04 0803 	add.w	r8, r4, r3
 80095c4:	f000 f8b2 	bl	800972c <_sbrk_r>
 80095c8:	4580      	cmp	r8, r0
 80095ca:	d13a      	bne.n	8009642 <_malloc_r+0xd2>
 80095cc:	6821      	ldr	r1, [r4, #0]
 80095ce:	3503      	adds	r5, #3
 80095d0:	1a6d      	subs	r5, r5, r1
 80095d2:	f025 0503 	bic.w	r5, r5, #3
 80095d6:	3508      	adds	r5, #8
 80095d8:	2d0c      	cmp	r5, #12
 80095da:	bf38      	it	cc
 80095dc:	250c      	movcc	r5, #12
 80095de:	4629      	mov	r1, r5
 80095e0:	4638      	mov	r0, r7
 80095e2:	f7ff ffa5 	bl	8009530 <sbrk_aligned>
 80095e6:	3001      	adds	r0, #1
 80095e8:	d02b      	beq.n	8009642 <_malloc_r+0xd2>
 80095ea:	6823      	ldr	r3, [r4, #0]
 80095ec:	442b      	add	r3, r5
 80095ee:	6023      	str	r3, [r4, #0]
 80095f0:	e00e      	b.n	8009610 <_malloc_r+0xa0>
 80095f2:	6822      	ldr	r2, [r4, #0]
 80095f4:	1b52      	subs	r2, r2, r5
 80095f6:	d41e      	bmi.n	8009636 <_malloc_r+0xc6>
 80095f8:	2a0b      	cmp	r2, #11
 80095fa:	d916      	bls.n	800962a <_malloc_r+0xba>
 80095fc:	1961      	adds	r1, r4, r5
 80095fe:	42a3      	cmp	r3, r4
 8009600:	6025      	str	r5, [r4, #0]
 8009602:	bf18      	it	ne
 8009604:	6059      	strne	r1, [r3, #4]
 8009606:	6863      	ldr	r3, [r4, #4]
 8009608:	bf08      	it	eq
 800960a:	6031      	streq	r1, [r6, #0]
 800960c:	5162      	str	r2, [r4, r5]
 800960e:	604b      	str	r3, [r1, #4]
 8009610:	4638      	mov	r0, r7
 8009612:	f104 060b 	add.w	r6, r4, #11
 8009616:	f000 fab1 	bl	8009b7c <__malloc_unlock>
 800961a:	f026 0607 	bic.w	r6, r6, #7
 800961e:	1d23      	adds	r3, r4, #4
 8009620:	1af2      	subs	r2, r6, r3
 8009622:	d0b6      	beq.n	8009592 <_malloc_r+0x22>
 8009624:	1b9b      	subs	r3, r3, r6
 8009626:	50a3      	str	r3, [r4, r2]
 8009628:	e7b3      	b.n	8009592 <_malloc_r+0x22>
 800962a:	6862      	ldr	r2, [r4, #4]
 800962c:	42a3      	cmp	r3, r4
 800962e:	bf0c      	ite	eq
 8009630:	6032      	streq	r2, [r6, #0]
 8009632:	605a      	strne	r2, [r3, #4]
 8009634:	e7ec      	b.n	8009610 <_malloc_r+0xa0>
 8009636:	4623      	mov	r3, r4
 8009638:	6864      	ldr	r4, [r4, #4]
 800963a:	e7b2      	b.n	80095a2 <_malloc_r+0x32>
 800963c:	4634      	mov	r4, r6
 800963e:	6876      	ldr	r6, [r6, #4]
 8009640:	e7b9      	b.n	80095b6 <_malloc_r+0x46>
 8009642:	230c      	movs	r3, #12
 8009644:	603b      	str	r3, [r7, #0]
 8009646:	4638      	mov	r0, r7
 8009648:	f000 fa98 	bl	8009b7c <__malloc_unlock>
 800964c:	e7a1      	b.n	8009592 <_malloc_r+0x22>
 800964e:	6025      	str	r5, [r4, #0]
 8009650:	e7de      	b.n	8009610 <_malloc_r+0xa0>
 8009652:	bf00      	nop
 8009654:	20001a5c 	.word	0x20001a5c

08009658 <cleanup_glue>:
 8009658:	b538      	push	{r3, r4, r5, lr}
 800965a:	460c      	mov	r4, r1
 800965c:	6809      	ldr	r1, [r1, #0]
 800965e:	4605      	mov	r5, r0
 8009660:	b109      	cbz	r1, 8009666 <cleanup_glue+0xe>
 8009662:	f7ff fff9 	bl	8009658 <cleanup_glue>
 8009666:	4621      	mov	r1, r4
 8009668:	4628      	mov	r0, r5
 800966a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800966e:	f000 ba8b 	b.w	8009b88 <_free_r>
	...

08009674 <_reclaim_reent>:
 8009674:	4b2c      	ldr	r3, [pc, #176]	; (8009728 <_reclaim_reent+0xb4>)
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4283      	cmp	r3, r0
 800967a:	b570      	push	{r4, r5, r6, lr}
 800967c:	4604      	mov	r4, r0
 800967e:	d051      	beq.n	8009724 <_reclaim_reent+0xb0>
 8009680:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009682:	b143      	cbz	r3, 8009696 <_reclaim_reent+0x22>
 8009684:	68db      	ldr	r3, [r3, #12]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d14a      	bne.n	8009720 <_reclaim_reent+0xac>
 800968a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800968c:	6819      	ldr	r1, [r3, #0]
 800968e:	b111      	cbz	r1, 8009696 <_reclaim_reent+0x22>
 8009690:	4620      	mov	r0, r4
 8009692:	f000 fa79 	bl	8009b88 <_free_r>
 8009696:	6961      	ldr	r1, [r4, #20]
 8009698:	b111      	cbz	r1, 80096a0 <_reclaim_reent+0x2c>
 800969a:	4620      	mov	r0, r4
 800969c:	f000 fa74 	bl	8009b88 <_free_r>
 80096a0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80096a2:	b111      	cbz	r1, 80096aa <_reclaim_reent+0x36>
 80096a4:	4620      	mov	r0, r4
 80096a6:	f000 fa6f 	bl	8009b88 <_free_r>
 80096aa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80096ac:	b111      	cbz	r1, 80096b4 <_reclaim_reent+0x40>
 80096ae:	4620      	mov	r0, r4
 80096b0:	f000 fa6a 	bl	8009b88 <_free_r>
 80096b4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80096b6:	b111      	cbz	r1, 80096be <_reclaim_reent+0x4a>
 80096b8:	4620      	mov	r0, r4
 80096ba:	f000 fa65 	bl	8009b88 <_free_r>
 80096be:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80096c0:	b111      	cbz	r1, 80096c8 <_reclaim_reent+0x54>
 80096c2:	4620      	mov	r0, r4
 80096c4:	f000 fa60 	bl	8009b88 <_free_r>
 80096c8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80096ca:	b111      	cbz	r1, 80096d2 <_reclaim_reent+0x5e>
 80096cc:	4620      	mov	r0, r4
 80096ce:	f000 fa5b 	bl	8009b88 <_free_r>
 80096d2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80096d4:	b111      	cbz	r1, 80096dc <_reclaim_reent+0x68>
 80096d6:	4620      	mov	r0, r4
 80096d8:	f000 fa56 	bl	8009b88 <_free_r>
 80096dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80096de:	b111      	cbz	r1, 80096e6 <_reclaim_reent+0x72>
 80096e0:	4620      	mov	r0, r4
 80096e2:	f000 fa51 	bl	8009b88 <_free_r>
 80096e6:	69a3      	ldr	r3, [r4, #24]
 80096e8:	b1e3      	cbz	r3, 8009724 <_reclaim_reent+0xb0>
 80096ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80096ec:	4620      	mov	r0, r4
 80096ee:	4798      	blx	r3
 80096f0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80096f2:	b1b9      	cbz	r1, 8009724 <_reclaim_reent+0xb0>
 80096f4:	4620      	mov	r0, r4
 80096f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80096fa:	f7ff bfad 	b.w	8009658 <cleanup_glue>
 80096fe:	5949      	ldr	r1, [r1, r5]
 8009700:	b941      	cbnz	r1, 8009714 <_reclaim_reent+0xa0>
 8009702:	3504      	adds	r5, #4
 8009704:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009706:	2d80      	cmp	r5, #128	; 0x80
 8009708:	68d9      	ldr	r1, [r3, #12]
 800970a:	d1f8      	bne.n	80096fe <_reclaim_reent+0x8a>
 800970c:	4620      	mov	r0, r4
 800970e:	f000 fa3b 	bl	8009b88 <_free_r>
 8009712:	e7ba      	b.n	800968a <_reclaim_reent+0x16>
 8009714:	680e      	ldr	r6, [r1, #0]
 8009716:	4620      	mov	r0, r4
 8009718:	f000 fa36 	bl	8009b88 <_free_r>
 800971c:	4631      	mov	r1, r6
 800971e:	e7ef      	b.n	8009700 <_reclaim_reent+0x8c>
 8009720:	2500      	movs	r5, #0
 8009722:	e7ef      	b.n	8009704 <_reclaim_reent+0x90>
 8009724:	bd70      	pop	{r4, r5, r6, pc}
 8009726:	bf00      	nop
 8009728:	20000010 	.word	0x20000010

0800972c <_sbrk_r>:
 800972c:	b538      	push	{r3, r4, r5, lr}
 800972e:	4d06      	ldr	r5, [pc, #24]	; (8009748 <_sbrk_r+0x1c>)
 8009730:	2300      	movs	r3, #0
 8009732:	4604      	mov	r4, r0
 8009734:	4608      	mov	r0, r1
 8009736:	602b      	str	r3, [r5, #0]
 8009738:	f7f7 fdee 	bl	8001318 <_sbrk>
 800973c:	1c43      	adds	r3, r0, #1
 800973e:	d102      	bne.n	8009746 <_sbrk_r+0x1a>
 8009740:	682b      	ldr	r3, [r5, #0]
 8009742:	b103      	cbz	r3, 8009746 <_sbrk_r+0x1a>
 8009744:	6023      	str	r3, [r4, #0]
 8009746:	bd38      	pop	{r3, r4, r5, pc}
 8009748:	20001a64 	.word	0x20001a64

0800974c <sniprintf>:
 800974c:	b40c      	push	{r2, r3}
 800974e:	b530      	push	{r4, r5, lr}
 8009750:	4b17      	ldr	r3, [pc, #92]	; (80097b0 <sniprintf+0x64>)
 8009752:	1e0c      	subs	r4, r1, #0
 8009754:	681d      	ldr	r5, [r3, #0]
 8009756:	b09d      	sub	sp, #116	; 0x74
 8009758:	da08      	bge.n	800976c <sniprintf+0x20>
 800975a:	238b      	movs	r3, #139	; 0x8b
 800975c:	602b      	str	r3, [r5, #0]
 800975e:	f04f 30ff 	mov.w	r0, #4294967295
 8009762:	b01d      	add	sp, #116	; 0x74
 8009764:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009768:	b002      	add	sp, #8
 800976a:	4770      	bx	lr
 800976c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009770:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009774:	bf14      	ite	ne
 8009776:	f104 33ff 	addne.w	r3, r4, #4294967295
 800977a:	4623      	moveq	r3, r4
 800977c:	9304      	str	r3, [sp, #16]
 800977e:	9307      	str	r3, [sp, #28]
 8009780:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009784:	9002      	str	r0, [sp, #8]
 8009786:	9006      	str	r0, [sp, #24]
 8009788:	f8ad 3016 	strh.w	r3, [sp, #22]
 800978c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800978e:	ab21      	add	r3, sp, #132	; 0x84
 8009790:	a902      	add	r1, sp, #8
 8009792:	4628      	mov	r0, r5
 8009794:	9301      	str	r3, [sp, #4]
 8009796:	f000 fa9d 	bl	8009cd4 <_svfiprintf_r>
 800979a:	1c43      	adds	r3, r0, #1
 800979c:	bfbc      	itt	lt
 800979e:	238b      	movlt	r3, #139	; 0x8b
 80097a0:	602b      	strlt	r3, [r5, #0]
 80097a2:	2c00      	cmp	r4, #0
 80097a4:	d0dd      	beq.n	8009762 <sniprintf+0x16>
 80097a6:	9b02      	ldr	r3, [sp, #8]
 80097a8:	2200      	movs	r2, #0
 80097aa:	701a      	strb	r2, [r3, #0]
 80097ac:	e7d9      	b.n	8009762 <sniprintf+0x16>
 80097ae:	bf00      	nop
 80097b0:	20000010 	.word	0x20000010

080097b4 <__sread>:
 80097b4:	b510      	push	{r4, lr}
 80097b6:	460c      	mov	r4, r1
 80097b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097bc:	f000 fe76 	bl	800a4ac <_read_r>
 80097c0:	2800      	cmp	r0, #0
 80097c2:	bfab      	itete	ge
 80097c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80097c6:	89a3      	ldrhlt	r3, [r4, #12]
 80097c8:	181b      	addge	r3, r3, r0
 80097ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80097ce:	bfac      	ite	ge
 80097d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80097d2:	81a3      	strhlt	r3, [r4, #12]
 80097d4:	bd10      	pop	{r4, pc}

080097d6 <__swrite>:
 80097d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097da:	461f      	mov	r7, r3
 80097dc:	898b      	ldrh	r3, [r1, #12]
 80097de:	05db      	lsls	r3, r3, #23
 80097e0:	4605      	mov	r5, r0
 80097e2:	460c      	mov	r4, r1
 80097e4:	4616      	mov	r6, r2
 80097e6:	d505      	bpl.n	80097f4 <__swrite+0x1e>
 80097e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097ec:	2302      	movs	r3, #2
 80097ee:	2200      	movs	r2, #0
 80097f0:	f000 f9a4 	bl	8009b3c <_lseek_r>
 80097f4:	89a3      	ldrh	r3, [r4, #12]
 80097f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80097fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80097fe:	81a3      	strh	r3, [r4, #12]
 8009800:	4632      	mov	r2, r6
 8009802:	463b      	mov	r3, r7
 8009804:	4628      	mov	r0, r5
 8009806:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800980a:	f000 b887 	b.w	800991c <_write_r>

0800980e <__sseek>:
 800980e:	b510      	push	{r4, lr}
 8009810:	460c      	mov	r4, r1
 8009812:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009816:	f000 f991 	bl	8009b3c <_lseek_r>
 800981a:	1c43      	adds	r3, r0, #1
 800981c:	89a3      	ldrh	r3, [r4, #12]
 800981e:	bf15      	itete	ne
 8009820:	6560      	strne	r0, [r4, #84]	; 0x54
 8009822:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009826:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800982a:	81a3      	strheq	r3, [r4, #12]
 800982c:	bf18      	it	ne
 800982e:	81a3      	strhne	r3, [r4, #12]
 8009830:	bd10      	pop	{r4, pc}

08009832 <__sclose>:
 8009832:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009836:	f000 b8a1 	b.w	800997c <_close_r>

0800983a <strncmp>:
 800983a:	b510      	push	{r4, lr}
 800983c:	4603      	mov	r3, r0
 800983e:	b172      	cbz	r2, 800985e <strncmp+0x24>
 8009840:	3901      	subs	r1, #1
 8009842:	1884      	adds	r4, r0, r2
 8009844:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009848:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800984c:	4290      	cmp	r0, r2
 800984e:	d101      	bne.n	8009854 <strncmp+0x1a>
 8009850:	42a3      	cmp	r3, r4
 8009852:	d101      	bne.n	8009858 <strncmp+0x1e>
 8009854:	1a80      	subs	r0, r0, r2
 8009856:	bd10      	pop	{r4, pc}
 8009858:	2800      	cmp	r0, #0
 800985a:	d1f3      	bne.n	8009844 <strncmp+0xa>
 800985c:	e7fa      	b.n	8009854 <strncmp+0x1a>
 800985e:	4610      	mov	r0, r2
 8009860:	e7f9      	b.n	8009856 <strncmp+0x1c>
	...

08009864 <strtok>:
 8009864:	4b16      	ldr	r3, [pc, #88]	; (80098c0 <strtok+0x5c>)
 8009866:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800986a:	681f      	ldr	r7, [r3, #0]
 800986c:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800986e:	4605      	mov	r5, r0
 8009870:	460e      	mov	r6, r1
 8009872:	b9ec      	cbnz	r4, 80098b0 <strtok+0x4c>
 8009874:	2050      	movs	r0, #80	; 0x50
 8009876:	f000 f973 	bl	8009b60 <malloc>
 800987a:	4602      	mov	r2, r0
 800987c:	65b8      	str	r0, [r7, #88]	; 0x58
 800987e:	b920      	cbnz	r0, 800988a <strtok+0x26>
 8009880:	4b10      	ldr	r3, [pc, #64]	; (80098c4 <strtok+0x60>)
 8009882:	4811      	ldr	r0, [pc, #68]	; (80098c8 <strtok+0x64>)
 8009884:	2157      	movs	r1, #87	; 0x57
 8009886:	f000 f85b 	bl	8009940 <__assert_func>
 800988a:	e9c0 4400 	strd	r4, r4, [r0]
 800988e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009892:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8009896:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800989a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800989e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80098a2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80098a6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80098aa:	6184      	str	r4, [r0, #24]
 80098ac:	7704      	strb	r4, [r0, #28]
 80098ae:	6244      	str	r4, [r0, #36]	; 0x24
 80098b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80098b2:	4631      	mov	r1, r6
 80098b4:	4628      	mov	r0, r5
 80098b6:	2301      	movs	r3, #1
 80098b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098bc:	f000 b806 	b.w	80098cc <__strtok_r>
 80098c0:	20000010 	.word	0x20000010
 80098c4:	0800b0d4 	.word	0x0800b0d4
 80098c8:	0800b0eb 	.word	0x0800b0eb

080098cc <__strtok_r>:
 80098cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098ce:	b908      	cbnz	r0, 80098d4 <__strtok_r+0x8>
 80098d0:	6810      	ldr	r0, [r2, #0]
 80098d2:	b188      	cbz	r0, 80098f8 <__strtok_r+0x2c>
 80098d4:	4604      	mov	r4, r0
 80098d6:	4620      	mov	r0, r4
 80098d8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80098dc:	460f      	mov	r7, r1
 80098de:	f817 6b01 	ldrb.w	r6, [r7], #1
 80098e2:	b91e      	cbnz	r6, 80098ec <__strtok_r+0x20>
 80098e4:	b965      	cbnz	r5, 8009900 <__strtok_r+0x34>
 80098e6:	6015      	str	r5, [r2, #0]
 80098e8:	4628      	mov	r0, r5
 80098ea:	e005      	b.n	80098f8 <__strtok_r+0x2c>
 80098ec:	42b5      	cmp	r5, r6
 80098ee:	d1f6      	bne.n	80098de <__strtok_r+0x12>
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d1f0      	bne.n	80098d6 <__strtok_r+0xa>
 80098f4:	6014      	str	r4, [r2, #0]
 80098f6:	7003      	strb	r3, [r0, #0]
 80098f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098fa:	461c      	mov	r4, r3
 80098fc:	e00c      	b.n	8009918 <__strtok_r+0x4c>
 80098fe:	b915      	cbnz	r5, 8009906 <__strtok_r+0x3a>
 8009900:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009904:	460e      	mov	r6, r1
 8009906:	f816 5b01 	ldrb.w	r5, [r6], #1
 800990a:	42ab      	cmp	r3, r5
 800990c:	d1f7      	bne.n	80098fe <__strtok_r+0x32>
 800990e:	2b00      	cmp	r3, #0
 8009910:	d0f3      	beq.n	80098fa <__strtok_r+0x2e>
 8009912:	2300      	movs	r3, #0
 8009914:	f804 3c01 	strb.w	r3, [r4, #-1]
 8009918:	6014      	str	r4, [r2, #0]
 800991a:	e7ed      	b.n	80098f8 <__strtok_r+0x2c>

0800991c <_write_r>:
 800991c:	b538      	push	{r3, r4, r5, lr}
 800991e:	4d07      	ldr	r5, [pc, #28]	; (800993c <_write_r+0x20>)
 8009920:	4604      	mov	r4, r0
 8009922:	4608      	mov	r0, r1
 8009924:	4611      	mov	r1, r2
 8009926:	2200      	movs	r2, #0
 8009928:	602a      	str	r2, [r5, #0]
 800992a:	461a      	mov	r2, r3
 800992c:	f7f7 fca8 	bl	8001280 <_write>
 8009930:	1c43      	adds	r3, r0, #1
 8009932:	d102      	bne.n	800993a <_write_r+0x1e>
 8009934:	682b      	ldr	r3, [r5, #0]
 8009936:	b103      	cbz	r3, 800993a <_write_r+0x1e>
 8009938:	6023      	str	r3, [r4, #0]
 800993a:	bd38      	pop	{r3, r4, r5, pc}
 800993c:	20001a64 	.word	0x20001a64

08009940 <__assert_func>:
 8009940:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009942:	4614      	mov	r4, r2
 8009944:	461a      	mov	r2, r3
 8009946:	4b09      	ldr	r3, [pc, #36]	; (800996c <__assert_func+0x2c>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	4605      	mov	r5, r0
 800994c:	68d8      	ldr	r0, [r3, #12]
 800994e:	b14c      	cbz	r4, 8009964 <__assert_func+0x24>
 8009950:	4b07      	ldr	r3, [pc, #28]	; (8009970 <__assert_func+0x30>)
 8009952:	9100      	str	r1, [sp, #0]
 8009954:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009958:	4906      	ldr	r1, [pc, #24]	; (8009974 <__assert_func+0x34>)
 800995a:	462b      	mov	r3, r5
 800995c:	f000 f8dc 	bl	8009b18 <fiprintf>
 8009960:	f000 fe76 	bl	800a650 <abort>
 8009964:	4b04      	ldr	r3, [pc, #16]	; (8009978 <__assert_func+0x38>)
 8009966:	461c      	mov	r4, r3
 8009968:	e7f3      	b.n	8009952 <__assert_func+0x12>
 800996a:	bf00      	nop
 800996c:	20000010 	.word	0x20000010
 8009970:	0800b148 	.word	0x0800b148
 8009974:	0800b155 	.word	0x0800b155
 8009978:	0800b183 	.word	0x0800b183

0800997c <_close_r>:
 800997c:	b538      	push	{r3, r4, r5, lr}
 800997e:	4d06      	ldr	r5, [pc, #24]	; (8009998 <_close_r+0x1c>)
 8009980:	2300      	movs	r3, #0
 8009982:	4604      	mov	r4, r0
 8009984:	4608      	mov	r0, r1
 8009986:	602b      	str	r3, [r5, #0]
 8009988:	f7f7 fc96 	bl	80012b8 <_close>
 800998c:	1c43      	adds	r3, r0, #1
 800998e:	d102      	bne.n	8009996 <_close_r+0x1a>
 8009990:	682b      	ldr	r3, [r5, #0]
 8009992:	b103      	cbz	r3, 8009996 <_close_r+0x1a>
 8009994:	6023      	str	r3, [r4, #0]
 8009996:	bd38      	pop	{r3, r4, r5, pc}
 8009998:	20001a64 	.word	0x20001a64

0800999c <__sflush_r>:
 800999c:	898a      	ldrh	r2, [r1, #12]
 800999e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80099a0:	4605      	mov	r5, r0
 80099a2:	0710      	lsls	r0, r2, #28
 80099a4:	460c      	mov	r4, r1
 80099a6:	d457      	bmi.n	8009a58 <__sflush_r+0xbc>
 80099a8:	684b      	ldr	r3, [r1, #4]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	dc04      	bgt.n	80099b8 <__sflush_r+0x1c>
 80099ae:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	dc01      	bgt.n	80099b8 <__sflush_r+0x1c>
 80099b4:	2000      	movs	r0, #0
 80099b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80099ba:	2e00      	cmp	r6, #0
 80099bc:	d0fa      	beq.n	80099b4 <__sflush_r+0x18>
 80099be:	2300      	movs	r3, #0
 80099c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80099c4:	682f      	ldr	r7, [r5, #0]
 80099c6:	602b      	str	r3, [r5, #0]
 80099c8:	d032      	beq.n	8009a30 <__sflush_r+0x94>
 80099ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80099cc:	89a3      	ldrh	r3, [r4, #12]
 80099ce:	075a      	lsls	r2, r3, #29
 80099d0:	d505      	bpl.n	80099de <__sflush_r+0x42>
 80099d2:	6863      	ldr	r3, [r4, #4]
 80099d4:	1ac0      	subs	r0, r0, r3
 80099d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80099d8:	b10b      	cbz	r3, 80099de <__sflush_r+0x42>
 80099da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80099dc:	1ac0      	subs	r0, r0, r3
 80099de:	2300      	movs	r3, #0
 80099e0:	4602      	mov	r2, r0
 80099e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80099e4:	6a21      	ldr	r1, [r4, #32]
 80099e6:	4628      	mov	r0, r5
 80099e8:	47b0      	blx	r6
 80099ea:	1c43      	adds	r3, r0, #1
 80099ec:	89a3      	ldrh	r3, [r4, #12]
 80099ee:	d106      	bne.n	80099fe <__sflush_r+0x62>
 80099f0:	6829      	ldr	r1, [r5, #0]
 80099f2:	291d      	cmp	r1, #29
 80099f4:	d82c      	bhi.n	8009a50 <__sflush_r+0xb4>
 80099f6:	4a29      	ldr	r2, [pc, #164]	; (8009a9c <__sflush_r+0x100>)
 80099f8:	40ca      	lsrs	r2, r1
 80099fa:	07d6      	lsls	r6, r2, #31
 80099fc:	d528      	bpl.n	8009a50 <__sflush_r+0xb4>
 80099fe:	2200      	movs	r2, #0
 8009a00:	6062      	str	r2, [r4, #4]
 8009a02:	04d9      	lsls	r1, r3, #19
 8009a04:	6922      	ldr	r2, [r4, #16]
 8009a06:	6022      	str	r2, [r4, #0]
 8009a08:	d504      	bpl.n	8009a14 <__sflush_r+0x78>
 8009a0a:	1c42      	adds	r2, r0, #1
 8009a0c:	d101      	bne.n	8009a12 <__sflush_r+0x76>
 8009a0e:	682b      	ldr	r3, [r5, #0]
 8009a10:	b903      	cbnz	r3, 8009a14 <__sflush_r+0x78>
 8009a12:	6560      	str	r0, [r4, #84]	; 0x54
 8009a14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a16:	602f      	str	r7, [r5, #0]
 8009a18:	2900      	cmp	r1, #0
 8009a1a:	d0cb      	beq.n	80099b4 <__sflush_r+0x18>
 8009a1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a20:	4299      	cmp	r1, r3
 8009a22:	d002      	beq.n	8009a2a <__sflush_r+0x8e>
 8009a24:	4628      	mov	r0, r5
 8009a26:	f000 f8af 	bl	8009b88 <_free_r>
 8009a2a:	2000      	movs	r0, #0
 8009a2c:	6360      	str	r0, [r4, #52]	; 0x34
 8009a2e:	e7c2      	b.n	80099b6 <__sflush_r+0x1a>
 8009a30:	6a21      	ldr	r1, [r4, #32]
 8009a32:	2301      	movs	r3, #1
 8009a34:	4628      	mov	r0, r5
 8009a36:	47b0      	blx	r6
 8009a38:	1c41      	adds	r1, r0, #1
 8009a3a:	d1c7      	bne.n	80099cc <__sflush_r+0x30>
 8009a3c:	682b      	ldr	r3, [r5, #0]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d0c4      	beq.n	80099cc <__sflush_r+0x30>
 8009a42:	2b1d      	cmp	r3, #29
 8009a44:	d001      	beq.n	8009a4a <__sflush_r+0xae>
 8009a46:	2b16      	cmp	r3, #22
 8009a48:	d101      	bne.n	8009a4e <__sflush_r+0xb2>
 8009a4a:	602f      	str	r7, [r5, #0]
 8009a4c:	e7b2      	b.n	80099b4 <__sflush_r+0x18>
 8009a4e:	89a3      	ldrh	r3, [r4, #12]
 8009a50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a54:	81a3      	strh	r3, [r4, #12]
 8009a56:	e7ae      	b.n	80099b6 <__sflush_r+0x1a>
 8009a58:	690f      	ldr	r7, [r1, #16]
 8009a5a:	2f00      	cmp	r7, #0
 8009a5c:	d0aa      	beq.n	80099b4 <__sflush_r+0x18>
 8009a5e:	0793      	lsls	r3, r2, #30
 8009a60:	680e      	ldr	r6, [r1, #0]
 8009a62:	bf08      	it	eq
 8009a64:	694b      	ldreq	r3, [r1, #20]
 8009a66:	600f      	str	r7, [r1, #0]
 8009a68:	bf18      	it	ne
 8009a6a:	2300      	movne	r3, #0
 8009a6c:	1bf6      	subs	r6, r6, r7
 8009a6e:	608b      	str	r3, [r1, #8]
 8009a70:	2e00      	cmp	r6, #0
 8009a72:	dd9f      	ble.n	80099b4 <__sflush_r+0x18>
 8009a74:	6a21      	ldr	r1, [r4, #32]
 8009a76:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8009a7a:	4633      	mov	r3, r6
 8009a7c:	463a      	mov	r2, r7
 8009a7e:	4628      	mov	r0, r5
 8009a80:	47e0      	blx	ip
 8009a82:	2800      	cmp	r0, #0
 8009a84:	dc06      	bgt.n	8009a94 <__sflush_r+0xf8>
 8009a86:	89a3      	ldrh	r3, [r4, #12]
 8009a88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a8c:	81a3      	strh	r3, [r4, #12]
 8009a8e:	f04f 30ff 	mov.w	r0, #4294967295
 8009a92:	e790      	b.n	80099b6 <__sflush_r+0x1a>
 8009a94:	4407      	add	r7, r0
 8009a96:	1a36      	subs	r6, r6, r0
 8009a98:	e7ea      	b.n	8009a70 <__sflush_r+0xd4>
 8009a9a:	bf00      	nop
 8009a9c:	20400001 	.word	0x20400001

08009aa0 <_fflush_r>:
 8009aa0:	b538      	push	{r3, r4, r5, lr}
 8009aa2:	690b      	ldr	r3, [r1, #16]
 8009aa4:	4605      	mov	r5, r0
 8009aa6:	460c      	mov	r4, r1
 8009aa8:	b913      	cbnz	r3, 8009ab0 <_fflush_r+0x10>
 8009aaa:	2500      	movs	r5, #0
 8009aac:	4628      	mov	r0, r5
 8009aae:	bd38      	pop	{r3, r4, r5, pc}
 8009ab0:	b118      	cbz	r0, 8009aba <_fflush_r+0x1a>
 8009ab2:	6983      	ldr	r3, [r0, #24]
 8009ab4:	b90b      	cbnz	r3, 8009aba <_fflush_r+0x1a>
 8009ab6:	f7ff fc5f 	bl	8009378 <__sinit>
 8009aba:	4b14      	ldr	r3, [pc, #80]	; (8009b0c <_fflush_r+0x6c>)
 8009abc:	429c      	cmp	r4, r3
 8009abe:	d11b      	bne.n	8009af8 <_fflush_r+0x58>
 8009ac0:	686c      	ldr	r4, [r5, #4]
 8009ac2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d0ef      	beq.n	8009aaa <_fflush_r+0xa>
 8009aca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009acc:	07d0      	lsls	r0, r2, #31
 8009ace:	d404      	bmi.n	8009ada <_fflush_r+0x3a>
 8009ad0:	0599      	lsls	r1, r3, #22
 8009ad2:	d402      	bmi.n	8009ada <_fflush_r+0x3a>
 8009ad4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ad6:	f7ff fd12 	bl	80094fe <__retarget_lock_acquire_recursive>
 8009ada:	4628      	mov	r0, r5
 8009adc:	4621      	mov	r1, r4
 8009ade:	f7ff ff5d 	bl	800999c <__sflush_r>
 8009ae2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ae4:	07da      	lsls	r2, r3, #31
 8009ae6:	4605      	mov	r5, r0
 8009ae8:	d4e0      	bmi.n	8009aac <_fflush_r+0xc>
 8009aea:	89a3      	ldrh	r3, [r4, #12]
 8009aec:	059b      	lsls	r3, r3, #22
 8009aee:	d4dd      	bmi.n	8009aac <_fflush_r+0xc>
 8009af0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009af2:	f7ff fd05 	bl	8009500 <__retarget_lock_release_recursive>
 8009af6:	e7d9      	b.n	8009aac <_fflush_r+0xc>
 8009af8:	4b05      	ldr	r3, [pc, #20]	; (8009b10 <_fflush_r+0x70>)
 8009afa:	429c      	cmp	r4, r3
 8009afc:	d101      	bne.n	8009b02 <_fflush_r+0x62>
 8009afe:	68ac      	ldr	r4, [r5, #8]
 8009b00:	e7df      	b.n	8009ac2 <_fflush_r+0x22>
 8009b02:	4b04      	ldr	r3, [pc, #16]	; (8009b14 <_fflush_r+0x74>)
 8009b04:	429c      	cmp	r4, r3
 8009b06:	bf08      	it	eq
 8009b08:	68ec      	ldreq	r4, [r5, #12]
 8009b0a:	e7da      	b.n	8009ac2 <_fflush_r+0x22>
 8009b0c:	0800b090 	.word	0x0800b090
 8009b10:	0800b0b0 	.word	0x0800b0b0
 8009b14:	0800b070 	.word	0x0800b070

08009b18 <fiprintf>:
 8009b18:	b40e      	push	{r1, r2, r3}
 8009b1a:	b503      	push	{r0, r1, lr}
 8009b1c:	4601      	mov	r1, r0
 8009b1e:	ab03      	add	r3, sp, #12
 8009b20:	4805      	ldr	r0, [pc, #20]	; (8009b38 <fiprintf+0x20>)
 8009b22:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b26:	6800      	ldr	r0, [r0, #0]
 8009b28:	9301      	str	r3, [sp, #4]
 8009b2a:	f000 f9fb 	bl	8009f24 <_vfiprintf_r>
 8009b2e:	b002      	add	sp, #8
 8009b30:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b34:	b003      	add	sp, #12
 8009b36:	4770      	bx	lr
 8009b38:	20000010 	.word	0x20000010

08009b3c <_lseek_r>:
 8009b3c:	b538      	push	{r3, r4, r5, lr}
 8009b3e:	4d07      	ldr	r5, [pc, #28]	; (8009b5c <_lseek_r+0x20>)
 8009b40:	4604      	mov	r4, r0
 8009b42:	4608      	mov	r0, r1
 8009b44:	4611      	mov	r1, r2
 8009b46:	2200      	movs	r2, #0
 8009b48:	602a      	str	r2, [r5, #0]
 8009b4a:	461a      	mov	r2, r3
 8009b4c:	f7f7 fbd8 	bl	8001300 <_lseek>
 8009b50:	1c43      	adds	r3, r0, #1
 8009b52:	d102      	bne.n	8009b5a <_lseek_r+0x1e>
 8009b54:	682b      	ldr	r3, [r5, #0]
 8009b56:	b103      	cbz	r3, 8009b5a <_lseek_r+0x1e>
 8009b58:	6023      	str	r3, [r4, #0]
 8009b5a:	bd38      	pop	{r3, r4, r5, pc}
 8009b5c:	20001a64 	.word	0x20001a64

08009b60 <malloc>:
 8009b60:	4b02      	ldr	r3, [pc, #8]	; (8009b6c <malloc+0xc>)
 8009b62:	4601      	mov	r1, r0
 8009b64:	6818      	ldr	r0, [r3, #0]
 8009b66:	f7ff bd03 	b.w	8009570 <_malloc_r>
 8009b6a:	bf00      	nop
 8009b6c:	20000010 	.word	0x20000010

08009b70 <__malloc_lock>:
 8009b70:	4801      	ldr	r0, [pc, #4]	; (8009b78 <__malloc_lock+0x8>)
 8009b72:	f7ff bcc4 	b.w	80094fe <__retarget_lock_acquire_recursive>
 8009b76:	bf00      	nop
 8009b78:	20001a58 	.word	0x20001a58

08009b7c <__malloc_unlock>:
 8009b7c:	4801      	ldr	r0, [pc, #4]	; (8009b84 <__malloc_unlock+0x8>)
 8009b7e:	f7ff bcbf 	b.w	8009500 <__retarget_lock_release_recursive>
 8009b82:	bf00      	nop
 8009b84:	20001a58 	.word	0x20001a58

08009b88 <_free_r>:
 8009b88:	b538      	push	{r3, r4, r5, lr}
 8009b8a:	4605      	mov	r5, r0
 8009b8c:	2900      	cmp	r1, #0
 8009b8e:	d041      	beq.n	8009c14 <_free_r+0x8c>
 8009b90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b94:	1f0c      	subs	r4, r1, #4
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	bfb8      	it	lt
 8009b9a:	18e4      	addlt	r4, r4, r3
 8009b9c:	f7ff ffe8 	bl	8009b70 <__malloc_lock>
 8009ba0:	4a1d      	ldr	r2, [pc, #116]	; (8009c18 <_free_r+0x90>)
 8009ba2:	6813      	ldr	r3, [r2, #0]
 8009ba4:	b933      	cbnz	r3, 8009bb4 <_free_r+0x2c>
 8009ba6:	6063      	str	r3, [r4, #4]
 8009ba8:	6014      	str	r4, [r2, #0]
 8009baa:	4628      	mov	r0, r5
 8009bac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009bb0:	f7ff bfe4 	b.w	8009b7c <__malloc_unlock>
 8009bb4:	42a3      	cmp	r3, r4
 8009bb6:	d908      	bls.n	8009bca <_free_r+0x42>
 8009bb8:	6820      	ldr	r0, [r4, #0]
 8009bba:	1821      	adds	r1, r4, r0
 8009bbc:	428b      	cmp	r3, r1
 8009bbe:	bf01      	itttt	eq
 8009bc0:	6819      	ldreq	r1, [r3, #0]
 8009bc2:	685b      	ldreq	r3, [r3, #4]
 8009bc4:	1809      	addeq	r1, r1, r0
 8009bc6:	6021      	streq	r1, [r4, #0]
 8009bc8:	e7ed      	b.n	8009ba6 <_free_r+0x1e>
 8009bca:	461a      	mov	r2, r3
 8009bcc:	685b      	ldr	r3, [r3, #4]
 8009bce:	b10b      	cbz	r3, 8009bd4 <_free_r+0x4c>
 8009bd0:	42a3      	cmp	r3, r4
 8009bd2:	d9fa      	bls.n	8009bca <_free_r+0x42>
 8009bd4:	6811      	ldr	r1, [r2, #0]
 8009bd6:	1850      	adds	r0, r2, r1
 8009bd8:	42a0      	cmp	r0, r4
 8009bda:	d10b      	bne.n	8009bf4 <_free_r+0x6c>
 8009bdc:	6820      	ldr	r0, [r4, #0]
 8009bde:	4401      	add	r1, r0
 8009be0:	1850      	adds	r0, r2, r1
 8009be2:	4283      	cmp	r3, r0
 8009be4:	6011      	str	r1, [r2, #0]
 8009be6:	d1e0      	bne.n	8009baa <_free_r+0x22>
 8009be8:	6818      	ldr	r0, [r3, #0]
 8009bea:	685b      	ldr	r3, [r3, #4]
 8009bec:	6053      	str	r3, [r2, #4]
 8009bee:	4401      	add	r1, r0
 8009bf0:	6011      	str	r1, [r2, #0]
 8009bf2:	e7da      	b.n	8009baa <_free_r+0x22>
 8009bf4:	d902      	bls.n	8009bfc <_free_r+0x74>
 8009bf6:	230c      	movs	r3, #12
 8009bf8:	602b      	str	r3, [r5, #0]
 8009bfa:	e7d6      	b.n	8009baa <_free_r+0x22>
 8009bfc:	6820      	ldr	r0, [r4, #0]
 8009bfe:	1821      	adds	r1, r4, r0
 8009c00:	428b      	cmp	r3, r1
 8009c02:	bf04      	itt	eq
 8009c04:	6819      	ldreq	r1, [r3, #0]
 8009c06:	685b      	ldreq	r3, [r3, #4]
 8009c08:	6063      	str	r3, [r4, #4]
 8009c0a:	bf04      	itt	eq
 8009c0c:	1809      	addeq	r1, r1, r0
 8009c0e:	6021      	streq	r1, [r4, #0]
 8009c10:	6054      	str	r4, [r2, #4]
 8009c12:	e7ca      	b.n	8009baa <_free_r+0x22>
 8009c14:	bd38      	pop	{r3, r4, r5, pc}
 8009c16:	bf00      	nop
 8009c18:	20001a5c 	.word	0x20001a5c

08009c1c <__ssputs_r>:
 8009c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c20:	688e      	ldr	r6, [r1, #8]
 8009c22:	429e      	cmp	r6, r3
 8009c24:	4682      	mov	sl, r0
 8009c26:	460c      	mov	r4, r1
 8009c28:	4690      	mov	r8, r2
 8009c2a:	461f      	mov	r7, r3
 8009c2c:	d838      	bhi.n	8009ca0 <__ssputs_r+0x84>
 8009c2e:	898a      	ldrh	r2, [r1, #12]
 8009c30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009c34:	d032      	beq.n	8009c9c <__ssputs_r+0x80>
 8009c36:	6825      	ldr	r5, [r4, #0]
 8009c38:	6909      	ldr	r1, [r1, #16]
 8009c3a:	eba5 0901 	sub.w	r9, r5, r1
 8009c3e:	6965      	ldr	r5, [r4, #20]
 8009c40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009c48:	3301      	adds	r3, #1
 8009c4a:	444b      	add	r3, r9
 8009c4c:	106d      	asrs	r5, r5, #1
 8009c4e:	429d      	cmp	r5, r3
 8009c50:	bf38      	it	cc
 8009c52:	461d      	movcc	r5, r3
 8009c54:	0553      	lsls	r3, r2, #21
 8009c56:	d531      	bpl.n	8009cbc <__ssputs_r+0xa0>
 8009c58:	4629      	mov	r1, r5
 8009c5a:	f7ff fc89 	bl	8009570 <_malloc_r>
 8009c5e:	4606      	mov	r6, r0
 8009c60:	b950      	cbnz	r0, 8009c78 <__ssputs_r+0x5c>
 8009c62:	230c      	movs	r3, #12
 8009c64:	f8ca 3000 	str.w	r3, [sl]
 8009c68:	89a3      	ldrh	r3, [r4, #12]
 8009c6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c6e:	81a3      	strh	r3, [r4, #12]
 8009c70:	f04f 30ff 	mov.w	r0, #4294967295
 8009c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c78:	6921      	ldr	r1, [r4, #16]
 8009c7a:	464a      	mov	r2, r9
 8009c7c:	f7ff fc41 	bl	8009502 <memcpy>
 8009c80:	89a3      	ldrh	r3, [r4, #12]
 8009c82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009c86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c8a:	81a3      	strh	r3, [r4, #12]
 8009c8c:	6126      	str	r6, [r4, #16]
 8009c8e:	6165      	str	r5, [r4, #20]
 8009c90:	444e      	add	r6, r9
 8009c92:	eba5 0509 	sub.w	r5, r5, r9
 8009c96:	6026      	str	r6, [r4, #0]
 8009c98:	60a5      	str	r5, [r4, #8]
 8009c9a:	463e      	mov	r6, r7
 8009c9c:	42be      	cmp	r6, r7
 8009c9e:	d900      	bls.n	8009ca2 <__ssputs_r+0x86>
 8009ca0:	463e      	mov	r6, r7
 8009ca2:	6820      	ldr	r0, [r4, #0]
 8009ca4:	4632      	mov	r2, r6
 8009ca6:	4641      	mov	r1, r8
 8009ca8:	f000 fd3e 	bl	800a728 <memmove>
 8009cac:	68a3      	ldr	r3, [r4, #8]
 8009cae:	1b9b      	subs	r3, r3, r6
 8009cb0:	60a3      	str	r3, [r4, #8]
 8009cb2:	6823      	ldr	r3, [r4, #0]
 8009cb4:	4433      	add	r3, r6
 8009cb6:	6023      	str	r3, [r4, #0]
 8009cb8:	2000      	movs	r0, #0
 8009cba:	e7db      	b.n	8009c74 <__ssputs_r+0x58>
 8009cbc:	462a      	mov	r2, r5
 8009cbe:	f000 fd4d 	bl	800a75c <_realloc_r>
 8009cc2:	4606      	mov	r6, r0
 8009cc4:	2800      	cmp	r0, #0
 8009cc6:	d1e1      	bne.n	8009c8c <__ssputs_r+0x70>
 8009cc8:	6921      	ldr	r1, [r4, #16]
 8009cca:	4650      	mov	r0, sl
 8009ccc:	f7ff ff5c 	bl	8009b88 <_free_r>
 8009cd0:	e7c7      	b.n	8009c62 <__ssputs_r+0x46>
	...

08009cd4 <_svfiprintf_r>:
 8009cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cd8:	4698      	mov	r8, r3
 8009cda:	898b      	ldrh	r3, [r1, #12]
 8009cdc:	061b      	lsls	r3, r3, #24
 8009cde:	b09d      	sub	sp, #116	; 0x74
 8009ce0:	4607      	mov	r7, r0
 8009ce2:	460d      	mov	r5, r1
 8009ce4:	4614      	mov	r4, r2
 8009ce6:	d50e      	bpl.n	8009d06 <_svfiprintf_r+0x32>
 8009ce8:	690b      	ldr	r3, [r1, #16]
 8009cea:	b963      	cbnz	r3, 8009d06 <_svfiprintf_r+0x32>
 8009cec:	2140      	movs	r1, #64	; 0x40
 8009cee:	f7ff fc3f 	bl	8009570 <_malloc_r>
 8009cf2:	6028      	str	r0, [r5, #0]
 8009cf4:	6128      	str	r0, [r5, #16]
 8009cf6:	b920      	cbnz	r0, 8009d02 <_svfiprintf_r+0x2e>
 8009cf8:	230c      	movs	r3, #12
 8009cfa:	603b      	str	r3, [r7, #0]
 8009cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8009d00:	e0d1      	b.n	8009ea6 <_svfiprintf_r+0x1d2>
 8009d02:	2340      	movs	r3, #64	; 0x40
 8009d04:	616b      	str	r3, [r5, #20]
 8009d06:	2300      	movs	r3, #0
 8009d08:	9309      	str	r3, [sp, #36]	; 0x24
 8009d0a:	2320      	movs	r3, #32
 8009d0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d10:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d14:	2330      	movs	r3, #48	; 0x30
 8009d16:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009ec0 <_svfiprintf_r+0x1ec>
 8009d1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d1e:	f04f 0901 	mov.w	r9, #1
 8009d22:	4623      	mov	r3, r4
 8009d24:	469a      	mov	sl, r3
 8009d26:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d2a:	b10a      	cbz	r2, 8009d30 <_svfiprintf_r+0x5c>
 8009d2c:	2a25      	cmp	r2, #37	; 0x25
 8009d2e:	d1f9      	bne.n	8009d24 <_svfiprintf_r+0x50>
 8009d30:	ebba 0b04 	subs.w	fp, sl, r4
 8009d34:	d00b      	beq.n	8009d4e <_svfiprintf_r+0x7a>
 8009d36:	465b      	mov	r3, fp
 8009d38:	4622      	mov	r2, r4
 8009d3a:	4629      	mov	r1, r5
 8009d3c:	4638      	mov	r0, r7
 8009d3e:	f7ff ff6d 	bl	8009c1c <__ssputs_r>
 8009d42:	3001      	adds	r0, #1
 8009d44:	f000 80aa 	beq.w	8009e9c <_svfiprintf_r+0x1c8>
 8009d48:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d4a:	445a      	add	r2, fp
 8009d4c:	9209      	str	r2, [sp, #36]	; 0x24
 8009d4e:	f89a 3000 	ldrb.w	r3, [sl]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	f000 80a2 	beq.w	8009e9c <_svfiprintf_r+0x1c8>
 8009d58:	2300      	movs	r3, #0
 8009d5a:	f04f 32ff 	mov.w	r2, #4294967295
 8009d5e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d62:	f10a 0a01 	add.w	sl, sl, #1
 8009d66:	9304      	str	r3, [sp, #16]
 8009d68:	9307      	str	r3, [sp, #28]
 8009d6a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d6e:	931a      	str	r3, [sp, #104]	; 0x68
 8009d70:	4654      	mov	r4, sl
 8009d72:	2205      	movs	r2, #5
 8009d74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d78:	4851      	ldr	r0, [pc, #324]	; (8009ec0 <_svfiprintf_r+0x1ec>)
 8009d7a:	f7f6 fa09 	bl	8000190 <memchr>
 8009d7e:	9a04      	ldr	r2, [sp, #16]
 8009d80:	b9d8      	cbnz	r0, 8009dba <_svfiprintf_r+0xe6>
 8009d82:	06d0      	lsls	r0, r2, #27
 8009d84:	bf44      	itt	mi
 8009d86:	2320      	movmi	r3, #32
 8009d88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d8c:	0711      	lsls	r1, r2, #28
 8009d8e:	bf44      	itt	mi
 8009d90:	232b      	movmi	r3, #43	; 0x2b
 8009d92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d96:	f89a 3000 	ldrb.w	r3, [sl]
 8009d9a:	2b2a      	cmp	r3, #42	; 0x2a
 8009d9c:	d015      	beq.n	8009dca <_svfiprintf_r+0xf6>
 8009d9e:	9a07      	ldr	r2, [sp, #28]
 8009da0:	4654      	mov	r4, sl
 8009da2:	2000      	movs	r0, #0
 8009da4:	f04f 0c0a 	mov.w	ip, #10
 8009da8:	4621      	mov	r1, r4
 8009daa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009dae:	3b30      	subs	r3, #48	; 0x30
 8009db0:	2b09      	cmp	r3, #9
 8009db2:	d94e      	bls.n	8009e52 <_svfiprintf_r+0x17e>
 8009db4:	b1b0      	cbz	r0, 8009de4 <_svfiprintf_r+0x110>
 8009db6:	9207      	str	r2, [sp, #28]
 8009db8:	e014      	b.n	8009de4 <_svfiprintf_r+0x110>
 8009dba:	eba0 0308 	sub.w	r3, r0, r8
 8009dbe:	fa09 f303 	lsl.w	r3, r9, r3
 8009dc2:	4313      	orrs	r3, r2
 8009dc4:	9304      	str	r3, [sp, #16]
 8009dc6:	46a2      	mov	sl, r4
 8009dc8:	e7d2      	b.n	8009d70 <_svfiprintf_r+0x9c>
 8009dca:	9b03      	ldr	r3, [sp, #12]
 8009dcc:	1d19      	adds	r1, r3, #4
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	9103      	str	r1, [sp, #12]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	bfbb      	ittet	lt
 8009dd6:	425b      	neglt	r3, r3
 8009dd8:	f042 0202 	orrlt.w	r2, r2, #2
 8009ddc:	9307      	strge	r3, [sp, #28]
 8009dde:	9307      	strlt	r3, [sp, #28]
 8009de0:	bfb8      	it	lt
 8009de2:	9204      	strlt	r2, [sp, #16]
 8009de4:	7823      	ldrb	r3, [r4, #0]
 8009de6:	2b2e      	cmp	r3, #46	; 0x2e
 8009de8:	d10c      	bne.n	8009e04 <_svfiprintf_r+0x130>
 8009dea:	7863      	ldrb	r3, [r4, #1]
 8009dec:	2b2a      	cmp	r3, #42	; 0x2a
 8009dee:	d135      	bne.n	8009e5c <_svfiprintf_r+0x188>
 8009df0:	9b03      	ldr	r3, [sp, #12]
 8009df2:	1d1a      	adds	r2, r3, #4
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	9203      	str	r2, [sp, #12]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	bfb8      	it	lt
 8009dfc:	f04f 33ff 	movlt.w	r3, #4294967295
 8009e00:	3402      	adds	r4, #2
 8009e02:	9305      	str	r3, [sp, #20]
 8009e04:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8009ec4 <_svfiprintf_r+0x1f0>
 8009e08:	7821      	ldrb	r1, [r4, #0]
 8009e0a:	2203      	movs	r2, #3
 8009e0c:	4650      	mov	r0, sl
 8009e0e:	f7f6 f9bf 	bl	8000190 <memchr>
 8009e12:	b140      	cbz	r0, 8009e26 <_svfiprintf_r+0x152>
 8009e14:	2340      	movs	r3, #64	; 0x40
 8009e16:	eba0 000a 	sub.w	r0, r0, sl
 8009e1a:	fa03 f000 	lsl.w	r0, r3, r0
 8009e1e:	9b04      	ldr	r3, [sp, #16]
 8009e20:	4303      	orrs	r3, r0
 8009e22:	3401      	adds	r4, #1
 8009e24:	9304      	str	r3, [sp, #16]
 8009e26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e2a:	4827      	ldr	r0, [pc, #156]	; (8009ec8 <_svfiprintf_r+0x1f4>)
 8009e2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e30:	2206      	movs	r2, #6
 8009e32:	f7f6 f9ad 	bl	8000190 <memchr>
 8009e36:	2800      	cmp	r0, #0
 8009e38:	d038      	beq.n	8009eac <_svfiprintf_r+0x1d8>
 8009e3a:	4b24      	ldr	r3, [pc, #144]	; (8009ecc <_svfiprintf_r+0x1f8>)
 8009e3c:	bb1b      	cbnz	r3, 8009e86 <_svfiprintf_r+0x1b2>
 8009e3e:	9b03      	ldr	r3, [sp, #12]
 8009e40:	3307      	adds	r3, #7
 8009e42:	f023 0307 	bic.w	r3, r3, #7
 8009e46:	3308      	adds	r3, #8
 8009e48:	9303      	str	r3, [sp, #12]
 8009e4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e4c:	4433      	add	r3, r6
 8009e4e:	9309      	str	r3, [sp, #36]	; 0x24
 8009e50:	e767      	b.n	8009d22 <_svfiprintf_r+0x4e>
 8009e52:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e56:	460c      	mov	r4, r1
 8009e58:	2001      	movs	r0, #1
 8009e5a:	e7a5      	b.n	8009da8 <_svfiprintf_r+0xd4>
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	3401      	adds	r4, #1
 8009e60:	9305      	str	r3, [sp, #20]
 8009e62:	4619      	mov	r1, r3
 8009e64:	f04f 0c0a 	mov.w	ip, #10
 8009e68:	4620      	mov	r0, r4
 8009e6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e6e:	3a30      	subs	r2, #48	; 0x30
 8009e70:	2a09      	cmp	r2, #9
 8009e72:	d903      	bls.n	8009e7c <_svfiprintf_r+0x1a8>
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d0c5      	beq.n	8009e04 <_svfiprintf_r+0x130>
 8009e78:	9105      	str	r1, [sp, #20]
 8009e7a:	e7c3      	b.n	8009e04 <_svfiprintf_r+0x130>
 8009e7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e80:	4604      	mov	r4, r0
 8009e82:	2301      	movs	r3, #1
 8009e84:	e7f0      	b.n	8009e68 <_svfiprintf_r+0x194>
 8009e86:	ab03      	add	r3, sp, #12
 8009e88:	9300      	str	r3, [sp, #0]
 8009e8a:	462a      	mov	r2, r5
 8009e8c:	4b10      	ldr	r3, [pc, #64]	; (8009ed0 <_svfiprintf_r+0x1fc>)
 8009e8e:	a904      	add	r1, sp, #16
 8009e90:	4638      	mov	r0, r7
 8009e92:	f3af 8000 	nop.w
 8009e96:	1c42      	adds	r2, r0, #1
 8009e98:	4606      	mov	r6, r0
 8009e9a:	d1d6      	bne.n	8009e4a <_svfiprintf_r+0x176>
 8009e9c:	89ab      	ldrh	r3, [r5, #12]
 8009e9e:	065b      	lsls	r3, r3, #25
 8009ea0:	f53f af2c 	bmi.w	8009cfc <_svfiprintf_r+0x28>
 8009ea4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ea6:	b01d      	add	sp, #116	; 0x74
 8009ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eac:	ab03      	add	r3, sp, #12
 8009eae:	9300      	str	r3, [sp, #0]
 8009eb0:	462a      	mov	r2, r5
 8009eb2:	4b07      	ldr	r3, [pc, #28]	; (8009ed0 <_svfiprintf_r+0x1fc>)
 8009eb4:	a904      	add	r1, sp, #16
 8009eb6:	4638      	mov	r0, r7
 8009eb8:	f000 f9d2 	bl	800a260 <_printf_i>
 8009ebc:	e7eb      	b.n	8009e96 <_svfiprintf_r+0x1c2>
 8009ebe:	bf00      	nop
 8009ec0:	0800b184 	.word	0x0800b184
 8009ec4:	0800b18a 	.word	0x0800b18a
 8009ec8:	0800b18e 	.word	0x0800b18e
 8009ecc:	00000000 	.word	0x00000000
 8009ed0:	08009c1d 	.word	0x08009c1d

08009ed4 <__sfputc_r>:
 8009ed4:	6893      	ldr	r3, [r2, #8]
 8009ed6:	3b01      	subs	r3, #1
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	b410      	push	{r4}
 8009edc:	6093      	str	r3, [r2, #8]
 8009ede:	da07      	bge.n	8009ef0 <__sfputc_r+0x1c>
 8009ee0:	6994      	ldr	r4, [r2, #24]
 8009ee2:	42a3      	cmp	r3, r4
 8009ee4:	db01      	blt.n	8009eea <__sfputc_r+0x16>
 8009ee6:	290a      	cmp	r1, #10
 8009ee8:	d102      	bne.n	8009ef0 <__sfputc_r+0x1c>
 8009eea:	bc10      	pop	{r4}
 8009eec:	f000 baf0 	b.w	800a4d0 <__swbuf_r>
 8009ef0:	6813      	ldr	r3, [r2, #0]
 8009ef2:	1c58      	adds	r0, r3, #1
 8009ef4:	6010      	str	r0, [r2, #0]
 8009ef6:	7019      	strb	r1, [r3, #0]
 8009ef8:	4608      	mov	r0, r1
 8009efa:	bc10      	pop	{r4}
 8009efc:	4770      	bx	lr

08009efe <__sfputs_r>:
 8009efe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f00:	4606      	mov	r6, r0
 8009f02:	460f      	mov	r7, r1
 8009f04:	4614      	mov	r4, r2
 8009f06:	18d5      	adds	r5, r2, r3
 8009f08:	42ac      	cmp	r4, r5
 8009f0a:	d101      	bne.n	8009f10 <__sfputs_r+0x12>
 8009f0c:	2000      	movs	r0, #0
 8009f0e:	e007      	b.n	8009f20 <__sfputs_r+0x22>
 8009f10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f14:	463a      	mov	r2, r7
 8009f16:	4630      	mov	r0, r6
 8009f18:	f7ff ffdc 	bl	8009ed4 <__sfputc_r>
 8009f1c:	1c43      	adds	r3, r0, #1
 8009f1e:	d1f3      	bne.n	8009f08 <__sfputs_r+0xa>
 8009f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009f24 <_vfiprintf_r>:
 8009f24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f28:	460d      	mov	r5, r1
 8009f2a:	b09d      	sub	sp, #116	; 0x74
 8009f2c:	4614      	mov	r4, r2
 8009f2e:	4698      	mov	r8, r3
 8009f30:	4606      	mov	r6, r0
 8009f32:	b118      	cbz	r0, 8009f3c <_vfiprintf_r+0x18>
 8009f34:	6983      	ldr	r3, [r0, #24]
 8009f36:	b90b      	cbnz	r3, 8009f3c <_vfiprintf_r+0x18>
 8009f38:	f7ff fa1e 	bl	8009378 <__sinit>
 8009f3c:	4b89      	ldr	r3, [pc, #548]	; (800a164 <_vfiprintf_r+0x240>)
 8009f3e:	429d      	cmp	r5, r3
 8009f40:	d11b      	bne.n	8009f7a <_vfiprintf_r+0x56>
 8009f42:	6875      	ldr	r5, [r6, #4]
 8009f44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f46:	07d9      	lsls	r1, r3, #31
 8009f48:	d405      	bmi.n	8009f56 <_vfiprintf_r+0x32>
 8009f4a:	89ab      	ldrh	r3, [r5, #12]
 8009f4c:	059a      	lsls	r2, r3, #22
 8009f4e:	d402      	bmi.n	8009f56 <_vfiprintf_r+0x32>
 8009f50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f52:	f7ff fad4 	bl	80094fe <__retarget_lock_acquire_recursive>
 8009f56:	89ab      	ldrh	r3, [r5, #12]
 8009f58:	071b      	lsls	r3, r3, #28
 8009f5a:	d501      	bpl.n	8009f60 <_vfiprintf_r+0x3c>
 8009f5c:	692b      	ldr	r3, [r5, #16]
 8009f5e:	b9eb      	cbnz	r3, 8009f9c <_vfiprintf_r+0x78>
 8009f60:	4629      	mov	r1, r5
 8009f62:	4630      	mov	r0, r6
 8009f64:	f000 fb06 	bl	800a574 <__swsetup_r>
 8009f68:	b1c0      	cbz	r0, 8009f9c <_vfiprintf_r+0x78>
 8009f6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f6c:	07dc      	lsls	r4, r3, #31
 8009f6e:	d50e      	bpl.n	8009f8e <_vfiprintf_r+0x6a>
 8009f70:	f04f 30ff 	mov.w	r0, #4294967295
 8009f74:	b01d      	add	sp, #116	; 0x74
 8009f76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f7a:	4b7b      	ldr	r3, [pc, #492]	; (800a168 <_vfiprintf_r+0x244>)
 8009f7c:	429d      	cmp	r5, r3
 8009f7e:	d101      	bne.n	8009f84 <_vfiprintf_r+0x60>
 8009f80:	68b5      	ldr	r5, [r6, #8]
 8009f82:	e7df      	b.n	8009f44 <_vfiprintf_r+0x20>
 8009f84:	4b79      	ldr	r3, [pc, #484]	; (800a16c <_vfiprintf_r+0x248>)
 8009f86:	429d      	cmp	r5, r3
 8009f88:	bf08      	it	eq
 8009f8a:	68f5      	ldreq	r5, [r6, #12]
 8009f8c:	e7da      	b.n	8009f44 <_vfiprintf_r+0x20>
 8009f8e:	89ab      	ldrh	r3, [r5, #12]
 8009f90:	0598      	lsls	r0, r3, #22
 8009f92:	d4ed      	bmi.n	8009f70 <_vfiprintf_r+0x4c>
 8009f94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f96:	f7ff fab3 	bl	8009500 <__retarget_lock_release_recursive>
 8009f9a:	e7e9      	b.n	8009f70 <_vfiprintf_r+0x4c>
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	9309      	str	r3, [sp, #36]	; 0x24
 8009fa0:	2320      	movs	r3, #32
 8009fa2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009fa6:	f8cd 800c 	str.w	r8, [sp, #12]
 8009faa:	2330      	movs	r3, #48	; 0x30
 8009fac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a170 <_vfiprintf_r+0x24c>
 8009fb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009fb4:	f04f 0901 	mov.w	r9, #1
 8009fb8:	4623      	mov	r3, r4
 8009fba:	469a      	mov	sl, r3
 8009fbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fc0:	b10a      	cbz	r2, 8009fc6 <_vfiprintf_r+0xa2>
 8009fc2:	2a25      	cmp	r2, #37	; 0x25
 8009fc4:	d1f9      	bne.n	8009fba <_vfiprintf_r+0x96>
 8009fc6:	ebba 0b04 	subs.w	fp, sl, r4
 8009fca:	d00b      	beq.n	8009fe4 <_vfiprintf_r+0xc0>
 8009fcc:	465b      	mov	r3, fp
 8009fce:	4622      	mov	r2, r4
 8009fd0:	4629      	mov	r1, r5
 8009fd2:	4630      	mov	r0, r6
 8009fd4:	f7ff ff93 	bl	8009efe <__sfputs_r>
 8009fd8:	3001      	adds	r0, #1
 8009fda:	f000 80aa 	beq.w	800a132 <_vfiprintf_r+0x20e>
 8009fde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009fe0:	445a      	add	r2, fp
 8009fe2:	9209      	str	r2, [sp, #36]	; 0x24
 8009fe4:	f89a 3000 	ldrb.w	r3, [sl]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	f000 80a2 	beq.w	800a132 <_vfiprintf_r+0x20e>
 8009fee:	2300      	movs	r3, #0
 8009ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ff4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ff8:	f10a 0a01 	add.w	sl, sl, #1
 8009ffc:	9304      	str	r3, [sp, #16]
 8009ffe:	9307      	str	r3, [sp, #28]
 800a000:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a004:	931a      	str	r3, [sp, #104]	; 0x68
 800a006:	4654      	mov	r4, sl
 800a008:	2205      	movs	r2, #5
 800a00a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a00e:	4858      	ldr	r0, [pc, #352]	; (800a170 <_vfiprintf_r+0x24c>)
 800a010:	f7f6 f8be 	bl	8000190 <memchr>
 800a014:	9a04      	ldr	r2, [sp, #16]
 800a016:	b9d8      	cbnz	r0, 800a050 <_vfiprintf_r+0x12c>
 800a018:	06d1      	lsls	r1, r2, #27
 800a01a:	bf44      	itt	mi
 800a01c:	2320      	movmi	r3, #32
 800a01e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a022:	0713      	lsls	r3, r2, #28
 800a024:	bf44      	itt	mi
 800a026:	232b      	movmi	r3, #43	; 0x2b
 800a028:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a02c:	f89a 3000 	ldrb.w	r3, [sl]
 800a030:	2b2a      	cmp	r3, #42	; 0x2a
 800a032:	d015      	beq.n	800a060 <_vfiprintf_r+0x13c>
 800a034:	9a07      	ldr	r2, [sp, #28]
 800a036:	4654      	mov	r4, sl
 800a038:	2000      	movs	r0, #0
 800a03a:	f04f 0c0a 	mov.w	ip, #10
 800a03e:	4621      	mov	r1, r4
 800a040:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a044:	3b30      	subs	r3, #48	; 0x30
 800a046:	2b09      	cmp	r3, #9
 800a048:	d94e      	bls.n	800a0e8 <_vfiprintf_r+0x1c4>
 800a04a:	b1b0      	cbz	r0, 800a07a <_vfiprintf_r+0x156>
 800a04c:	9207      	str	r2, [sp, #28]
 800a04e:	e014      	b.n	800a07a <_vfiprintf_r+0x156>
 800a050:	eba0 0308 	sub.w	r3, r0, r8
 800a054:	fa09 f303 	lsl.w	r3, r9, r3
 800a058:	4313      	orrs	r3, r2
 800a05a:	9304      	str	r3, [sp, #16]
 800a05c:	46a2      	mov	sl, r4
 800a05e:	e7d2      	b.n	800a006 <_vfiprintf_r+0xe2>
 800a060:	9b03      	ldr	r3, [sp, #12]
 800a062:	1d19      	adds	r1, r3, #4
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	9103      	str	r1, [sp, #12]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	bfbb      	ittet	lt
 800a06c:	425b      	neglt	r3, r3
 800a06e:	f042 0202 	orrlt.w	r2, r2, #2
 800a072:	9307      	strge	r3, [sp, #28]
 800a074:	9307      	strlt	r3, [sp, #28]
 800a076:	bfb8      	it	lt
 800a078:	9204      	strlt	r2, [sp, #16]
 800a07a:	7823      	ldrb	r3, [r4, #0]
 800a07c:	2b2e      	cmp	r3, #46	; 0x2e
 800a07e:	d10c      	bne.n	800a09a <_vfiprintf_r+0x176>
 800a080:	7863      	ldrb	r3, [r4, #1]
 800a082:	2b2a      	cmp	r3, #42	; 0x2a
 800a084:	d135      	bne.n	800a0f2 <_vfiprintf_r+0x1ce>
 800a086:	9b03      	ldr	r3, [sp, #12]
 800a088:	1d1a      	adds	r2, r3, #4
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	9203      	str	r2, [sp, #12]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	bfb8      	it	lt
 800a092:	f04f 33ff 	movlt.w	r3, #4294967295
 800a096:	3402      	adds	r4, #2
 800a098:	9305      	str	r3, [sp, #20]
 800a09a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800a174 <_vfiprintf_r+0x250>
 800a09e:	7821      	ldrb	r1, [r4, #0]
 800a0a0:	2203      	movs	r2, #3
 800a0a2:	4650      	mov	r0, sl
 800a0a4:	f7f6 f874 	bl	8000190 <memchr>
 800a0a8:	b140      	cbz	r0, 800a0bc <_vfiprintf_r+0x198>
 800a0aa:	2340      	movs	r3, #64	; 0x40
 800a0ac:	eba0 000a 	sub.w	r0, r0, sl
 800a0b0:	fa03 f000 	lsl.w	r0, r3, r0
 800a0b4:	9b04      	ldr	r3, [sp, #16]
 800a0b6:	4303      	orrs	r3, r0
 800a0b8:	3401      	adds	r4, #1
 800a0ba:	9304      	str	r3, [sp, #16]
 800a0bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0c0:	482d      	ldr	r0, [pc, #180]	; (800a178 <_vfiprintf_r+0x254>)
 800a0c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a0c6:	2206      	movs	r2, #6
 800a0c8:	f7f6 f862 	bl	8000190 <memchr>
 800a0cc:	2800      	cmp	r0, #0
 800a0ce:	d03f      	beq.n	800a150 <_vfiprintf_r+0x22c>
 800a0d0:	4b2a      	ldr	r3, [pc, #168]	; (800a17c <_vfiprintf_r+0x258>)
 800a0d2:	bb1b      	cbnz	r3, 800a11c <_vfiprintf_r+0x1f8>
 800a0d4:	9b03      	ldr	r3, [sp, #12]
 800a0d6:	3307      	adds	r3, #7
 800a0d8:	f023 0307 	bic.w	r3, r3, #7
 800a0dc:	3308      	adds	r3, #8
 800a0de:	9303      	str	r3, [sp, #12]
 800a0e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0e2:	443b      	add	r3, r7
 800a0e4:	9309      	str	r3, [sp, #36]	; 0x24
 800a0e6:	e767      	b.n	8009fb8 <_vfiprintf_r+0x94>
 800a0e8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0ec:	460c      	mov	r4, r1
 800a0ee:	2001      	movs	r0, #1
 800a0f0:	e7a5      	b.n	800a03e <_vfiprintf_r+0x11a>
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	3401      	adds	r4, #1
 800a0f6:	9305      	str	r3, [sp, #20]
 800a0f8:	4619      	mov	r1, r3
 800a0fa:	f04f 0c0a 	mov.w	ip, #10
 800a0fe:	4620      	mov	r0, r4
 800a100:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a104:	3a30      	subs	r2, #48	; 0x30
 800a106:	2a09      	cmp	r2, #9
 800a108:	d903      	bls.n	800a112 <_vfiprintf_r+0x1ee>
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d0c5      	beq.n	800a09a <_vfiprintf_r+0x176>
 800a10e:	9105      	str	r1, [sp, #20]
 800a110:	e7c3      	b.n	800a09a <_vfiprintf_r+0x176>
 800a112:	fb0c 2101 	mla	r1, ip, r1, r2
 800a116:	4604      	mov	r4, r0
 800a118:	2301      	movs	r3, #1
 800a11a:	e7f0      	b.n	800a0fe <_vfiprintf_r+0x1da>
 800a11c:	ab03      	add	r3, sp, #12
 800a11e:	9300      	str	r3, [sp, #0]
 800a120:	462a      	mov	r2, r5
 800a122:	4b17      	ldr	r3, [pc, #92]	; (800a180 <_vfiprintf_r+0x25c>)
 800a124:	a904      	add	r1, sp, #16
 800a126:	4630      	mov	r0, r6
 800a128:	f3af 8000 	nop.w
 800a12c:	4607      	mov	r7, r0
 800a12e:	1c78      	adds	r0, r7, #1
 800a130:	d1d6      	bne.n	800a0e0 <_vfiprintf_r+0x1bc>
 800a132:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a134:	07d9      	lsls	r1, r3, #31
 800a136:	d405      	bmi.n	800a144 <_vfiprintf_r+0x220>
 800a138:	89ab      	ldrh	r3, [r5, #12]
 800a13a:	059a      	lsls	r2, r3, #22
 800a13c:	d402      	bmi.n	800a144 <_vfiprintf_r+0x220>
 800a13e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a140:	f7ff f9de 	bl	8009500 <__retarget_lock_release_recursive>
 800a144:	89ab      	ldrh	r3, [r5, #12]
 800a146:	065b      	lsls	r3, r3, #25
 800a148:	f53f af12 	bmi.w	8009f70 <_vfiprintf_r+0x4c>
 800a14c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a14e:	e711      	b.n	8009f74 <_vfiprintf_r+0x50>
 800a150:	ab03      	add	r3, sp, #12
 800a152:	9300      	str	r3, [sp, #0]
 800a154:	462a      	mov	r2, r5
 800a156:	4b0a      	ldr	r3, [pc, #40]	; (800a180 <_vfiprintf_r+0x25c>)
 800a158:	a904      	add	r1, sp, #16
 800a15a:	4630      	mov	r0, r6
 800a15c:	f000 f880 	bl	800a260 <_printf_i>
 800a160:	e7e4      	b.n	800a12c <_vfiprintf_r+0x208>
 800a162:	bf00      	nop
 800a164:	0800b090 	.word	0x0800b090
 800a168:	0800b0b0 	.word	0x0800b0b0
 800a16c:	0800b070 	.word	0x0800b070
 800a170:	0800b184 	.word	0x0800b184
 800a174:	0800b18a 	.word	0x0800b18a
 800a178:	0800b18e 	.word	0x0800b18e
 800a17c:	00000000 	.word	0x00000000
 800a180:	08009eff 	.word	0x08009eff

0800a184 <_printf_common>:
 800a184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a188:	4616      	mov	r6, r2
 800a18a:	4699      	mov	r9, r3
 800a18c:	688a      	ldr	r2, [r1, #8]
 800a18e:	690b      	ldr	r3, [r1, #16]
 800a190:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a194:	4293      	cmp	r3, r2
 800a196:	bfb8      	it	lt
 800a198:	4613      	movlt	r3, r2
 800a19a:	6033      	str	r3, [r6, #0]
 800a19c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a1a0:	4607      	mov	r7, r0
 800a1a2:	460c      	mov	r4, r1
 800a1a4:	b10a      	cbz	r2, 800a1aa <_printf_common+0x26>
 800a1a6:	3301      	adds	r3, #1
 800a1a8:	6033      	str	r3, [r6, #0]
 800a1aa:	6823      	ldr	r3, [r4, #0]
 800a1ac:	0699      	lsls	r1, r3, #26
 800a1ae:	bf42      	ittt	mi
 800a1b0:	6833      	ldrmi	r3, [r6, #0]
 800a1b2:	3302      	addmi	r3, #2
 800a1b4:	6033      	strmi	r3, [r6, #0]
 800a1b6:	6825      	ldr	r5, [r4, #0]
 800a1b8:	f015 0506 	ands.w	r5, r5, #6
 800a1bc:	d106      	bne.n	800a1cc <_printf_common+0x48>
 800a1be:	f104 0a19 	add.w	sl, r4, #25
 800a1c2:	68e3      	ldr	r3, [r4, #12]
 800a1c4:	6832      	ldr	r2, [r6, #0]
 800a1c6:	1a9b      	subs	r3, r3, r2
 800a1c8:	42ab      	cmp	r3, r5
 800a1ca:	dc26      	bgt.n	800a21a <_printf_common+0x96>
 800a1cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a1d0:	1e13      	subs	r3, r2, #0
 800a1d2:	6822      	ldr	r2, [r4, #0]
 800a1d4:	bf18      	it	ne
 800a1d6:	2301      	movne	r3, #1
 800a1d8:	0692      	lsls	r2, r2, #26
 800a1da:	d42b      	bmi.n	800a234 <_printf_common+0xb0>
 800a1dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a1e0:	4649      	mov	r1, r9
 800a1e2:	4638      	mov	r0, r7
 800a1e4:	47c0      	blx	r8
 800a1e6:	3001      	adds	r0, #1
 800a1e8:	d01e      	beq.n	800a228 <_printf_common+0xa4>
 800a1ea:	6823      	ldr	r3, [r4, #0]
 800a1ec:	68e5      	ldr	r5, [r4, #12]
 800a1ee:	6832      	ldr	r2, [r6, #0]
 800a1f0:	f003 0306 	and.w	r3, r3, #6
 800a1f4:	2b04      	cmp	r3, #4
 800a1f6:	bf08      	it	eq
 800a1f8:	1aad      	subeq	r5, r5, r2
 800a1fa:	68a3      	ldr	r3, [r4, #8]
 800a1fc:	6922      	ldr	r2, [r4, #16]
 800a1fe:	bf0c      	ite	eq
 800a200:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a204:	2500      	movne	r5, #0
 800a206:	4293      	cmp	r3, r2
 800a208:	bfc4      	itt	gt
 800a20a:	1a9b      	subgt	r3, r3, r2
 800a20c:	18ed      	addgt	r5, r5, r3
 800a20e:	2600      	movs	r6, #0
 800a210:	341a      	adds	r4, #26
 800a212:	42b5      	cmp	r5, r6
 800a214:	d11a      	bne.n	800a24c <_printf_common+0xc8>
 800a216:	2000      	movs	r0, #0
 800a218:	e008      	b.n	800a22c <_printf_common+0xa8>
 800a21a:	2301      	movs	r3, #1
 800a21c:	4652      	mov	r2, sl
 800a21e:	4649      	mov	r1, r9
 800a220:	4638      	mov	r0, r7
 800a222:	47c0      	blx	r8
 800a224:	3001      	adds	r0, #1
 800a226:	d103      	bne.n	800a230 <_printf_common+0xac>
 800a228:	f04f 30ff 	mov.w	r0, #4294967295
 800a22c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a230:	3501      	adds	r5, #1
 800a232:	e7c6      	b.n	800a1c2 <_printf_common+0x3e>
 800a234:	18e1      	adds	r1, r4, r3
 800a236:	1c5a      	adds	r2, r3, #1
 800a238:	2030      	movs	r0, #48	; 0x30
 800a23a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a23e:	4422      	add	r2, r4
 800a240:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a244:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a248:	3302      	adds	r3, #2
 800a24a:	e7c7      	b.n	800a1dc <_printf_common+0x58>
 800a24c:	2301      	movs	r3, #1
 800a24e:	4622      	mov	r2, r4
 800a250:	4649      	mov	r1, r9
 800a252:	4638      	mov	r0, r7
 800a254:	47c0      	blx	r8
 800a256:	3001      	adds	r0, #1
 800a258:	d0e6      	beq.n	800a228 <_printf_common+0xa4>
 800a25a:	3601      	adds	r6, #1
 800a25c:	e7d9      	b.n	800a212 <_printf_common+0x8e>
	...

0800a260 <_printf_i>:
 800a260:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a264:	7e0f      	ldrb	r7, [r1, #24]
 800a266:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a268:	2f78      	cmp	r7, #120	; 0x78
 800a26a:	4691      	mov	r9, r2
 800a26c:	4680      	mov	r8, r0
 800a26e:	460c      	mov	r4, r1
 800a270:	469a      	mov	sl, r3
 800a272:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a276:	d807      	bhi.n	800a288 <_printf_i+0x28>
 800a278:	2f62      	cmp	r7, #98	; 0x62
 800a27a:	d80a      	bhi.n	800a292 <_printf_i+0x32>
 800a27c:	2f00      	cmp	r7, #0
 800a27e:	f000 80d8 	beq.w	800a432 <_printf_i+0x1d2>
 800a282:	2f58      	cmp	r7, #88	; 0x58
 800a284:	f000 80a3 	beq.w	800a3ce <_printf_i+0x16e>
 800a288:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a28c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a290:	e03a      	b.n	800a308 <_printf_i+0xa8>
 800a292:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a296:	2b15      	cmp	r3, #21
 800a298:	d8f6      	bhi.n	800a288 <_printf_i+0x28>
 800a29a:	a101      	add	r1, pc, #4	; (adr r1, 800a2a0 <_printf_i+0x40>)
 800a29c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a2a0:	0800a2f9 	.word	0x0800a2f9
 800a2a4:	0800a30d 	.word	0x0800a30d
 800a2a8:	0800a289 	.word	0x0800a289
 800a2ac:	0800a289 	.word	0x0800a289
 800a2b0:	0800a289 	.word	0x0800a289
 800a2b4:	0800a289 	.word	0x0800a289
 800a2b8:	0800a30d 	.word	0x0800a30d
 800a2bc:	0800a289 	.word	0x0800a289
 800a2c0:	0800a289 	.word	0x0800a289
 800a2c4:	0800a289 	.word	0x0800a289
 800a2c8:	0800a289 	.word	0x0800a289
 800a2cc:	0800a419 	.word	0x0800a419
 800a2d0:	0800a33d 	.word	0x0800a33d
 800a2d4:	0800a3fb 	.word	0x0800a3fb
 800a2d8:	0800a289 	.word	0x0800a289
 800a2dc:	0800a289 	.word	0x0800a289
 800a2e0:	0800a43b 	.word	0x0800a43b
 800a2e4:	0800a289 	.word	0x0800a289
 800a2e8:	0800a33d 	.word	0x0800a33d
 800a2ec:	0800a289 	.word	0x0800a289
 800a2f0:	0800a289 	.word	0x0800a289
 800a2f4:	0800a403 	.word	0x0800a403
 800a2f8:	682b      	ldr	r3, [r5, #0]
 800a2fa:	1d1a      	adds	r2, r3, #4
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	602a      	str	r2, [r5, #0]
 800a300:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a304:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a308:	2301      	movs	r3, #1
 800a30a:	e0a3      	b.n	800a454 <_printf_i+0x1f4>
 800a30c:	6820      	ldr	r0, [r4, #0]
 800a30e:	6829      	ldr	r1, [r5, #0]
 800a310:	0606      	lsls	r6, r0, #24
 800a312:	f101 0304 	add.w	r3, r1, #4
 800a316:	d50a      	bpl.n	800a32e <_printf_i+0xce>
 800a318:	680e      	ldr	r6, [r1, #0]
 800a31a:	602b      	str	r3, [r5, #0]
 800a31c:	2e00      	cmp	r6, #0
 800a31e:	da03      	bge.n	800a328 <_printf_i+0xc8>
 800a320:	232d      	movs	r3, #45	; 0x2d
 800a322:	4276      	negs	r6, r6
 800a324:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a328:	485e      	ldr	r0, [pc, #376]	; (800a4a4 <_printf_i+0x244>)
 800a32a:	230a      	movs	r3, #10
 800a32c:	e019      	b.n	800a362 <_printf_i+0x102>
 800a32e:	680e      	ldr	r6, [r1, #0]
 800a330:	602b      	str	r3, [r5, #0]
 800a332:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a336:	bf18      	it	ne
 800a338:	b236      	sxthne	r6, r6
 800a33a:	e7ef      	b.n	800a31c <_printf_i+0xbc>
 800a33c:	682b      	ldr	r3, [r5, #0]
 800a33e:	6820      	ldr	r0, [r4, #0]
 800a340:	1d19      	adds	r1, r3, #4
 800a342:	6029      	str	r1, [r5, #0]
 800a344:	0601      	lsls	r1, r0, #24
 800a346:	d501      	bpl.n	800a34c <_printf_i+0xec>
 800a348:	681e      	ldr	r6, [r3, #0]
 800a34a:	e002      	b.n	800a352 <_printf_i+0xf2>
 800a34c:	0646      	lsls	r6, r0, #25
 800a34e:	d5fb      	bpl.n	800a348 <_printf_i+0xe8>
 800a350:	881e      	ldrh	r6, [r3, #0]
 800a352:	4854      	ldr	r0, [pc, #336]	; (800a4a4 <_printf_i+0x244>)
 800a354:	2f6f      	cmp	r7, #111	; 0x6f
 800a356:	bf0c      	ite	eq
 800a358:	2308      	moveq	r3, #8
 800a35a:	230a      	movne	r3, #10
 800a35c:	2100      	movs	r1, #0
 800a35e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a362:	6865      	ldr	r5, [r4, #4]
 800a364:	60a5      	str	r5, [r4, #8]
 800a366:	2d00      	cmp	r5, #0
 800a368:	bfa2      	ittt	ge
 800a36a:	6821      	ldrge	r1, [r4, #0]
 800a36c:	f021 0104 	bicge.w	r1, r1, #4
 800a370:	6021      	strge	r1, [r4, #0]
 800a372:	b90e      	cbnz	r6, 800a378 <_printf_i+0x118>
 800a374:	2d00      	cmp	r5, #0
 800a376:	d04d      	beq.n	800a414 <_printf_i+0x1b4>
 800a378:	4615      	mov	r5, r2
 800a37a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a37e:	fb03 6711 	mls	r7, r3, r1, r6
 800a382:	5dc7      	ldrb	r7, [r0, r7]
 800a384:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a388:	4637      	mov	r7, r6
 800a38a:	42bb      	cmp	r3, r7
 800a38c:	460e      	mov	r6, r1
 800a38e:	d9f4      	bls.n	800a37a <_printf_i+0x11a>
 800a390:	2b08      	cmp	r3, #8
 800a392:	d10b      	bne.n	800a3ac <_printf_i+0x14c>
 800a394:	6823      	ldr	r3, [r4, #0]
 800a396:	07de      	lsls	r6, r3, #31
 800a398:	d508      	bpl.n	800a3ac <_printf_i+0x14c>
 800a39a:	6923      	ldr	r3, [r4, #16]
 800a39c:	6861      	ldr	r1, [r4, #4]
 800a39e:	4299      	cmp	r1, r3
 800a3a0:	bfde      	ittt	le
 800a3a2:	2330      	movle	r3, #48	; 0x30
 800a3a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a3a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a3ac:	1b52      	subs	r2, r2, r5
 800a3ae:	6122      	str	r2, [r4, #16]
 800a3b0:	f8cd a000 	str.w	sl, [sp]
 800a3b4:	464b      	mov	r3, r9
 800a3b6:	aa03      	add	r2, sp, #12
 800a3b8:	4621      	mov	r1, r4
 800a3ba:	4640      	mov	r0, r8
 800a3bc:	f7ff fee2 	bl	800a184 <_printf_common>
 800a3c0:	3001      	adds	r0, #1
 800a3c2:	d14c      	bne.n	800a45e <_printf_i+0x1fe>
 800a3c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a3c8:	b004      	add	sp, #16
 800a3ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3ce:	4835      	ldr	r0, [pc, #212]	; (800a4a4 <_printf_i+0x244>)
 800a3d0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a3d4:	6829      	ldr	r1, [r5, #0]
 800a3d6:	6823      	ldr	r3, [r4, #0]
 800a3d8:	f851 6b04 	ldr.w	r6, [r1], #4
 800a3dc:	6029      	str	r1, [r5, #0]
 800a3de:	061d      	lsls	r5, r3, #24
 800a3e0:	d514      	bpl.n	800a40c <_printf_i+0x1ac>
 800a3e2:	07df      	lsls	r7, r3, #31
 800a3e4:	bf44      	itt	mi
 800a3e6:	f043 0320 	orrmi.w	r3, r3, #32
 800a3ea:	6023      	strmi	r3, [r4, #0]
 800a3ec:	b91e      	cbnz	r6, 800a3f6 <_printf_i+0x196>
 800a3ee:	6823      	ldr	r3, [r4, #0]
 800a3f0:	f023 0320 	bic.w	r3, r3, #32
 800a3f4:	6023      	str	r3, [r4, #0]
 800a3f6:	2310      	movs	r3, #16
 800a3f8:	e7b0      	b.n	800a35c <_printf_i+0xfc>
 800a3fa:	6823      	ldr	r3, [r4, #0]
 800a3fc:	f043 0320 	orr.w	r3, r3, #32
 800a400:	6023      	str	r3, [r4, #0]
 800a402:	2378      	movs	r3, #120	; 0x78
 800a404:	4828      	ldr	r0, [pc, #160]	; (800a4a8 <_printf_i+0x248>)
 800a406:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a40a:	e7e3      	b.n	800a3d4 <_printf_i+0x174>
 800a40c:	0659      	lsls	r1, r3, #25
 800a40e:	bf48      	it	mi
 800a410:	b2b6      	uxthmi	r6, r6
 800a412:	e7e6      	b.n	800a3e2 <_printf_i+0x182>
 800a414:	4615      	mov	r5, r2
 800a416:	e7bb      	b.n	800a390 <_printf_i+0x130>
 800a418:	682b      	ldr	r3, [r5, #0]
 800a41a:	6826      	ldr	r6, [r4, #0]
 800a41c:	6961      	ldr	r1, [r4, #20]
 800a41e:	1d18      	adds	r0, r3, #4
 800a420:	6028      	str	r0, [r5, #0]
 800a422:	0635      	lsls	r5, r6, #24
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	d501      	bpl.n	800a42c <_printf_i+0x1cc>
 800a428:	6019      	str	r1, [r3, #0]
 800a42a:	e002      	b.n	800a432 <_printf_i+0x1d2>
 800a42c:	0670      	lsls	r0, r6, #25
 800a42e:	d5fb      	bpl.n	800a428 <_printf_i+0x1c8>
 800a430:	8019      	strh	r1, [r3, #0]
 800a432:	2300      	movs	r3, #0
 800a434:	6123      	str	r3, [r4, #16]
 800a436:	4615      	mov	r5, r2
 800a438:	e7ba      	b.n	800a3b0 <_printf_i+0x150>
 800a43a:	682b      	ldr	r3, [r5, #0]
 800a43c:	1d1a      	adds	r2, r3, #4
 800a43e:	602a      	str	r2, [r5, #0]
 800a440:	681d      	ldr	r5, [r3, #0]
 800a442:	6862      	ldr	r2, [r4, #4]
 800a444:	2100      	movs	r1, #0
 800a446:	4628      	mov	r0, r5
 800a448:	f7f5 fea2 	bl	8000190 <memchr>
 800a44c:	b108      	cbz	r0, 800a452 <_printf_i+0x1f2>
 800a44e:	1b40      	subs	r0, r0, r5
 800a450:	6060      	str	r0, [r4, #4]
 800a452:	6863      	ldr	r3, [r4, #4]
 800a454:	6123      	str	r3, [r4, #16]
 800a456:	2300      	movs	r3, #0
 800a458:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a45c:	e7a8      	b.n	800a3b0 <_printf_i+0x150>
 800a45e:	6923      	ldr	r3, [r4, #16]
 800a460:	462a      	mov	r2, r5
 800a462:	4649      	mov	r1, r9
 800a464:	4640      	mov	r0, r8
 800a466:	47d0      	blx	sl
 800a468:	3001      	adds	r0, #1
 800a46a:	d0ab      	beq.n	800a3c4 <_printf_i+0x164>
 800a46c:	6823      	ldr	r3, [r4, #0]
 800a46e:	079b      	lsls	r3, r3, #30
 800a470:	d413      	bmi.n	800a49a <_printf_i+0x23a>
 800a472:	68e0      	ldr	r0, [r4, #12]
 800a474:	9b03      	ldr	r3, [sp, #12]
 800a476:	4298      	cmp	r0, r3
 800a478:	bfb8      	it	lt
 800a47a:	4618      	movlt	r0, r3
 800a47c:	e7a4      	b.n	800a3c8 <_printf_i+0x168>
 800a47e:	2301      	movs	r3, #1
 800a480:	4632      	mov	r2, r6
 800a482:	4649      	mov	r1, r9
 800a484:	4640      	mov	r0, r8
 800a486:	47d0      	blx	sl
 800a488:	3001      	adds	r0, #1
 800a48a:	d09b      	beq.n	800a3c4 <_printf_i+0x164>
 800a48c:	3501      	adds	r5, #1
 800a48e:	68e3      	ldr	r3, [r4, #12]
 800a490:	9903      	ldr	r1, [sp, #12]
 800a492:	1a5b      	subs	r3, r3, r1
 800a494:	42ab      	cmp	r3, r5
 800a496:	dcf2      	bgt.n	800a47e <_printf_i+0x21e>
 800a498:	e7eb      	b.n	800a472 <_printf_i+0x212>
 800a49a:	2500      	movs	r5, #0
 800a49c:	f104 0619 	add.w	r6, r4, #25
 800a4a0:	e7f5      	b.n	800a48e <_printf_i+0x22e>
 800a4a2:	bf00      	nop
 800a4a4:	0800b195 	.word	0x0800b195
 800a4a8:	0800b1a6 	.word	0x0800b1a6

0800a4ac <_read_r>:
 800a4ac:	b538      	push	{r3, r4, r5, lr}
 800a4ae:	4d07      	ldr	r5, [pc, #28]	; (800a4cc <_read_r+0x20>)
 800a4b0:	4604      	mov	r4, r0
 800a4b2:	4608      	mov	r0, r1
 800a4b4:	4611      	mov	r1, r2
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	602a      	str	r2, [r5, #0]
 800a4ba:	461a      	mov	r2, r3
 800a4bc:	f7f6 fec3 	bl	8001246 <_read>
 800a4c0:	1c43      	adds	r3, r0, #1
 800a4c2:	d102      	bne.n	800a4ca <_read_r+0x1e>
 800a4c4:	682b      	ldr	r3, [r5, #0]
 800a4c6:	b103      	cbz	r3, 800a4ca <_read_r+0x1e>
 800a4c8:	6023      	str	r3, [r4, #0]
 800a4ca:	bd38      	pop	{r3, r4, r5, pc}
 800a4cc:	20001a64 	.word	0x20001a64

0800a4d0 <__swbuf_r>:
 800a4d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4d2:	460e      	mov	r6, r1
 800a4d4:	4614      	mov	r4, r2
 800a4d6:	4605      	mov	r5, r0
 800a4d8:	b118      	cbz	r0, 800a4e2 <__swbuf_r+0x12>
 800a4da:	6983      	ldr	r3, [r0, #24]
 800a4dc:	b90b      	cbnz	r3, 800a4e2 <__swbuf_r+0x12>
 800a4de:	f7fe ff4b 	bl	8009378 <__sinit>
 800a4e2:	4b21      	ldr	r3, [pc, #132]	; (800a568 <__swbuf_r+0x98>)
 800a4e4:	429c      	cmp	r4, r3
 800a4e6:	d12b      	bne.n	800a540 <__swbuf_r+0x70>
 800a4e8:	686c      	ldr	r4, [r5, #4]
 800a4ea:	69a3      	ldr	r3, [r4, #24]
 800a4ec:	60a3      	str	r3, [r4, #8]
 800a4ee:	89a3      	ldrh	r3, [r4, #12]
 800a4f0:	071a      	lsls	r2, r3, #28
 800a4f2:	d52f      	bpl.n	800a554 <__swbuf_r+0x84>
 800a4f4:	6923      	ldr	r3, [r4, #16]
 800a4f6:	b36b      	cbz	r3, 800a554 <__swbuf_r+0x84>
 800a4f8:	6923      	ldr	r3, [r4, #16]
 800a4fa:	6820      	ldr	r0, [r4, #0]
 800a4fc:	1ac0      	subs	r0, r0, r3
 800a4fe:	6963      	ldr	r3, [r4, #20]
 800a500:	b2f6      	uxtb	r6, r6
 800a502:	4283      	cmp	r3, r0
 800a504:	4637      	mov	r7, r6
 800a506:	dc04      	bgt.n	800a512 <__swbuf_r+0x42>
 800a508:	4621      	mov	r1, r4
 800a50a:	4628      	mov	r0, r5
 800a50c:	f7ff fac8 	bl	8009aa0 <_fflush_r>
 800a510:	bb30      	cbnz	r0, 800a560 <__swbuf_r+0x90>
 800a512:	68a3      	ldr	r3, [r4, #8]
 800a514:	3b01      	subs	r3, #1
 800a516:	60a3      	str	r3, [r4, #8]
 800a518:	6823      	ldr	r3, [r4, #0]
 800a51a:	1c5a      	adds	r2, r3, #1
 800a51c:	6022      	str	r2, [r4, #0]
 800a51e:	701e      	strb	r6, [r3, #0]
 800a520:	6963      	ldr	r3, [r4, #20]
 800a522:	3001      	adds	r0, #1
 800a524:	4283      	cmp	r3, r0
 800a526:	d004      	beq.n	800a532 <__swbuf_r+0x62>
 800a528:	89a3      	ldrh	r3, [r4, #12]
 800a52a:	07db      	lsls	r3, r3, #31
 800a52c:	d506      	bpl.n	800a53c <__swbuf_r+0x6c>
 800a52e:	2e0a      	cmp	r6, #10
 800a530:	d104      	bne.n	800a53c <__swbuf_r+0x6c>
 800a532:	4621      	mov	r1, r4
 800a534:	4628      	mov	r0, r5
 800a536:	f7ff fab3 	bl	8009aa0 <_fflush_r>
 800a53a:	b988      	cbnz	r0, 800a560 <__swbuf_r+0x90>
 800a53c:	4638      	mov	r0, r7
 800a53e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a540:	4b0a      	ldr	r3, [pc, #40]	; (800a56c <__swbuf_r+0x9c>)
 800a542:	429c      	cmp	r4, r3
 800a544:	d101      	bne.n	800a54a <__swbuf_r+0x7a>
 800a546:	68ac      	ldr	r4, [r5, #8]
 800a548:	e7cf      	b.n	800a4ea <__swbuf_r+0x1a>
 800a54a:	4b09      	ldr	r3, [pc, #36]	; (800a570 <__swbuf_r+0xa0>)
 800a54c:	429c      	cmp	r4, r3
 800a54e:	bf08      	it	eq
 800a550:	68ec      	ldreq	r4, [r5, #12]
 800a552:	e7ca      	b.n	800a4ea <__swbuf_r+0x1a>
 800a554:	4621      	mov	r1, r4
 800a556:	4628      	mov	r0, r5
 800a558:	f000 f80c 	bl	800a574 <__swsetup_r>
 800a55c:	2800      	cmp	r0, #0
 800a55e:	d0cb      	beq.n	800a4f8 <__swbuf_r+0x28>
 800a560:	f04f 37ff 	mov.w	r7, #4294967295
 800a564:	e7ea      	b.n	800a53c <__swbuf_r+0x6c>
 800a566:	bf00      	nop
 800a568:	0800b090 	.word	0x0800b090
 800a56c:	0800b0b0 	.word	0x0800b0b0
 800a570:	0800b070 	.word	0x0800b070

0800a574 <__swsetup_r>:
 800a574:	4b32      	ldr	r3, [pc, #200]	; (800a640 <__swsetup_r+0xcc>)
 800a576:	b570      	push	{r4, r5, r6, lr}
 800a578:	681d      	ldr	r5, [r3, #0]
 800a57a:	4606      	mov	r6, r0
 800a57c:	460c      	mov	r4, r1
 800a57e:	b125      	cbz	r5, 800a58a <__swsetup_r+0x16>
 800a580:	69ab      	ldr	r3, [r5, #24]
 800a582:	b913      	cbnz	r3, 800a58a <__swsetup_r+0x16>
 800a584:	4628      	mov	r0, r5
 800a586:	f7fe fef7 	bl	8009378 <__sinit>
 800a58a:	4b2e      	ldr	r3, [pc, #184]	; (800a644 <__swsetup_r+0xd0>)
 800a58c:	429c      	cmp	r4, r3
 800a58e:	d10f      	bne.n	800a5b0 <__swsetup_r+0x3c>
 800a590:	686c      	ldr	r4, [r5, #4]
 800a592:	89a3      	ldrh	r3, [r4, #12]
 800a594:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a598:	0719      	lsls	r1, r3, #28
 800a59a:	d42c      	bmi.n	800a5f6 <__swsetup_r+0x82>
 800a59c:	06dd      	lsls	r5, r3, #27
 800a59e:	d411      	bmi.n	800a5c4 <__swsetup_r+0x50>
 800a5a0:	2309      	movs	r3, #9
 800a5a2:	6033      	str	r3, [r6, #0]
 800a5a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a5a8:	81a3      	strh	r3, [r4, #12]
 800a5aa:	f04f 30ff 	mov.w	r0, #4294967295
 800a5ae:	e03e      	b.n	800a62e <__swsetup_r+0xba>
 800a5b0:	4b25      	ldr	r3, [pc, #148]	; (800a648 <__swsetup_r+0xd4>)
 800a5b2:	429c      	cmp	r4, r3
 800a5b4:	d101      	bne.n	800a5ba <__swsetup_r+0x46>
 800a5b6:	68ac      	ldr	r4, [r5, #8]
 800a5b8:	e7eb      	b.n	800a592 <__swsetup_r+0x1e>
 800a5ba:	4b24      	ldr	r3, [pc, #144]	; (800a64c <__swsetup_r+0xd8>)
 800a5bc:	429c      	cmp	r4, r3
 800a5be:	bf08      	it	eq
 800a5c0:	68ec      	ldreq	r4, [r5, #12]
 800a5c2:	e7e6      	b.n	800a592 <__swsetup_r+0x1e>
 800a5c4:	0758      	lsls	r0, r3, #29
 800a5c6:	d512      	bpl.n	800a5ee <__swsetup_r+0x7a>
 800a5c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a5ca:	b141      	cbz	r1, 800a5de <__swsetup_r+0x6a>
 800a5cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a5d0:	4299      	cmp	r1, r3
 800a5d2:	d002      	beq.n	800a5da <__swsetup_r+0x66>
 800a5d4:	4630      	mov	r0, r6
 800a5d6:	f7ff fad7 	bl	8009b88 <_free_r>
 800a5da:	2300      	movs	r3, #0
 800a5dc:	6363      	str	r3, [r4, #52]	; 0x34
 800a5de:	89a3      	ldrh	r3, [r4, #12]
 800a5e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a5e4:	81a3      	strh	r3, [r4, #12]
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	6063      	str	r3, [r4, #4]
 800a5ea:	6923      	ldr	r3, [r4, #16]
 800a5ec:	6023      	str	r3, [r4, #0]
 800a5ee:	89a3      	ldrh	r3, [r4, #12]
 800a5f0:	f043 0308 	orr.w	r3, r3, #8
 800a5f4:	81a3      	strh	r3, [r4, #12]
 800a5f6:	6923      	ldr	r3, [r4, #16]
 800a5f8:	b94b      	cbnz	r3, 800a60e <__swsetup_r+0x9a>
 800a5fa:	89a3      	ldrh	r3, [r4, #12]
 800a5fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a600:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a604:	d003      	beq.n	800a60e <__swsetup_r+0x9a>
 800a606:	4621      	mov	r1, r4
 800a608:	4630      	mov	r0, r6
 800a60a:	f000 f84d 	bl	800a6a8 <__smakebuf_r>
 800a60e:	89a0      	ldrh	r0, [r4, #12]
 800a610:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a614:	f010 0301 	ands.w	r3, r0, #1
 800a618:	d00a      	beq.n	800a630 <__swsetup_r+0xbc>
 800a61a:	2300      	movs	r3, #0
 800a61c:	60a3      	str	r3, [r4, #8]
 800a61e:	6963      	ldr	r3, [r4, #20]
 800a620:	425b      	negs	r3, r3
 800a622:	61a3      	str	r3, [r4, #24]
 800a624:	6923      	ldr	r3, [r4, #16]
 800a626:	b943      	cbnz	r3, 800a63a <__swsetup_r+0xc6>
 800a628:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a62c:	d1ba      	bne.n	800a5a4 <__swsetup_r+0x30>
 800a62e:	bd70      	pop	{r4, r5, r6, pc}
 800a630:	0781      	lsls	r1, r0, #30
 800a632:	bf58      	it	pl
 800a634:	6963      	ldrpl	r3, [r4, #20]
 800a636:	60a3      	str	r3, [r4, #8]
 800a638:	e7f4      	b.n	800a624 <__swsetup_r+0xb0>
 800a63a:	2000      	movs	r0, #0
 800a63c:	e7f7      	b.n	800a62e <__swsetup_r+0xba>
 800a63e:	bf00      	nop
 800a640:	20000010 	.word	0x20000010
 800a644:	0800b090 	.word	0x0800b090
 800a648:	0800b0b0 	.word	0x0800b0b0
 800a64c:	0800b070 	.word	0x0800b070

0800a650 <abort>:
 800a650:	b508      	push	{r3, lr}
 800a652:	2006      	movs	r0, #6
 800a654:	f000 f8da 	bl	800a80c <raise>
 800a658:	2001      	movs	r0, #1
 800a65a:	f7f6 fdea 	bl	8001232 <_exit>

0800a65e <__swhatbuf_r>:
 800a65e:	b570      	push	{r4, r5, r6, lr}
 800a660:	460e      	mov	r6, r1
 800a662:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a666:	2900      	cmp	r1, #0
 800a668:	b096      	sub	sp, #88	; 0x58
 800a66a:	4614      	mov	r4, r2
 800a66c:	461d      	mov	r5, r3
 800a66e:	da08      	bge.n	800a682 <__swhatbuf_r+0x24>
 800a670:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a674:	2200      	movs	r2, #0
 800a676:	602a      	str	r2, [r5, #0]
 800a678:	061a      	lsls	r2, r3, #24
 800a67a:	d410      	bmi.n	800a69e <__swhatbuf_r+0x40>
 800a67c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a680:	e00e      	b.n	800a6a0 <__swhatbuf_r+0x42>
 800a682:	466a      	mov	r2, sp
 800a684:	f000 f8de 	bl	800a844 <_fstat_r>
 800a688:	2800      	cmp	r0, #0
 800a68a:	dbf1      	blt.n	800a670 <__swhatbuf_r+0x12>
 800a68c:	9a01      	ldr	r2, [sp, #4]
 800a68e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a692:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a696:	425a      	negs	r2, r3
 800a698:	415a      	adcs	r2, r3
 800a69a:	602a      	str	r2, [r5, #0]
 800a69c:	e7ee      	b.n	800a67c <__swhatbuf_r+0x1e>
 800a69e:	2340      	movs	r3, #64	; 0x40
 800a6a0:	2000      	movs	r0, #0
 800a6a2:	6023      	str	r3, [r4, #0]
 800a6a4:	b016      	add	sp, #88	; 0x58
 800a6a6:	bd70      	pop	{r4, r5, r6, pc}

0800a6a8 <__smakebuf_r>:
 800a6a8:	898b      	ldrh	r3, [r1, #12]
 800a6aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a6ac:	079d      	lsls	r5, r3, #30
 800a6ae:	4606      	mov	r6, r0
 800a6b0:	460c      	mov	r4, r1
 800a6b2:	d507      	bpl.n	800a6c4 <__smakebuf_r+0x1c>
 800a6b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a6b8:	6023      	str	r3, [r4, #0]
 800a6ba:	6123      	str	r3, [r4, #16]
 800a6bc:	2301      	movs	r3, #1
 800a6be:	6163      	str	r3, [r4, #20]
 800a6c0:	b002      	add	sp, #8
 800a6c2:	bd70      	pop	{r4, r5, r6, pc}
 800a6c4:	ab01      	add	r3, sp, #4
 800a6c6:	466a      	mov	r2, sp
 800a6c8:	f7ff ffc9 	bl	800a65e <__swhatbuf_r>
 800a6cc:	9900      	ldr	r1, [sp, #0]
 800a6ce:	4605      	mov	r5, r0
 800a6d0:	4630      	mov	r0, r6
 800a6d2:	f7fe ff4d 	bl	8009570 <_malloc_r>
 800a6d6:	b948      	cbnz	r0, 800a6ec <__smakebuf_r+0x44>
 800a6d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6dc:	059a      	lsls	r2, r3, #22
 800a6de:	d4ef      	bmi.n	800a6c0 <__smakebuf_r+0x18>
 800a6e0:	f023 0303 	bic.w	r3, r3, #3
 800a6e4:	f043 0302 	orr.w	r3, r3, #2
 800a6e8:	81a3      	strh	r3, [r4, #12]
 800a6ea:	e7e3      	b.n	800a6b4 <__smakebuf_r+0xc>
 800a6ec:	4b0d      	ldr	r3, [pc, #52]	; (800a724 <__smakebuf_r+0x7c>)
 800a6ee:	62b3      	str	r3, [r6, #40]	; 0x28
 800a6f0:	89a3      	ldrh	r3, [r4, #12]
 800a6f2:	6020      	str	r0, [r4, #0]
 800a6f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a6f8:	81a3      	strh	r3, [r4, #12]
 800a6fa:	9b00      	ldr	r3, [sp, #0]
 800a6fc:	6163      	str	r3, [r4, #20]
 800a6fe:	9b01      	ldr	r3, [sp, #4]
 800a700:	6120      	str	r0, [r4, #16]
 800a702:	b15b      	cbz	r3, 800a71c <__smakebuf_r+0x74>
 800a704:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a708:	4630      	mov	r0, r6
 800a70a:	f000 f8ad 	bl	800a868 <_isatty_r>
 800a70e:	b128      	cbz	r0, 800a71c <__smakebuf_r+0x74>
 800a710:	89a3      	ldrh	r3, [r4, #12]
 800a712:	f023 0303 	bic.w	r3, r3, #3
 800a716:	f043 0301 	orr.w	r3, r3, #1
 800a71a:	81a3      	strh	r3, [r4, #12]
 800a71c:	89a0      	ldrh	r0, [r4, #12]
 800a71e:	4305      	orrs	r5, r0
 800a720:	81a5      	strh	r5, [r4, #12]
 800a722:	e7cd      	b.n	800a6c0 <__smakebuf_r+0x18>
 800a724:	08009311 	.word	0x08009311

0800a728 <memmove>:
 800a728:	4288      	cmp	r0, r1
 800a72a:	b510      	push	{r4, lr}
 800a72c:	eb01 0402 	add.w	r4, r1, r2
 800a730:	d902      	bls.n	800a738 <memmove+0x10>
 800a732:	4284      	cmp	r4, r0
 800a734:	4623      	mov	r3, r4
 800a736:	d807      	bhi.n	800a748 <memmove+0x20>
 800a738:	1e43      	subs	r3, r0, #1
 800a73a:	42a1      	cmp	r1, r4
 800a73c:	d008      	beq.n	800a750 <memmove+0x28>
 800a73e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a742:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a746:	e7f8      	b.n	800a73a <memmove+0x12>
 800a748:	4402      	add	r2, r0
 800a74a:	4601      	mov	r1, r0
 800a74c:	428a      	cmp	r2, r1
 800a74e:	d100      	bne.n	800a752 <memmove+0x2a>
 800a750:	bd10      	pop	{r4, pc}
 800a752:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a756:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a75a:	e7f7      	b.n	800a74c <memmove+0x24>

0800a75c <_realloc_r>:
 800a75c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a760:	4680      	mov	r8, r0
 800a762:	4614      	mov	r4, r2
 800a764:	460e      	mov	r6, r1
 800a766:	b921      	cbnz	r1, 800a772 <_realloc_r+0x16>
 800a768:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a76c:	4611      	mov	r1, r2
 800a76e:	f7fe beff 	b.w	8009570 <_malloc_r>
 800a772:	b92a      	cbnz	r2, 800a780 <_realloc_r+0x24>
 800a774:	f7ff fa08 	bl	8009b88 <_free_r>
 800a778:	4625      	mov	r5, r4
 800a77a:	4628      	mov	r0, r5
 800a77c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a780:	f000 f882 	bl	800a888 <_malloc_usable_size_r>
 800a784:	4284      	cmp	r4, r0
 800a786:	4607      	mov	r7, r0
 800a788:	d802      	bhi.n	800a790 <_realloc_r+0x34>
 800a78a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a78e:	d812      	bhi.n	800a7b6 <_realloc_r+0x5a>
 800a790:	4621      	mov	r1, r4
 800a792:	4640      	mov	r0, r8
 800a794:	f7fe feec 	bl	8009570 <_malloc_r>
 800a798:	4605      	mov	r5, r0
 800a79a:	2800      	cmp	r0, #0
 800a79c:	d0ed      	beq.n	800a77a <_realloc_r+0x1e>
 800a79e:	42bc      	cmp	r4, r7
 800a7a0:	4622      	mov	r2, r4
 800a7a2:	4631      	mov	r1, r6
 800a7a4:	bf28      	it	cs
 800a7a6:	463a      	movcs	r2, r7
 800a7a8:	f7fe feab 	bl	8009502 <memcpy>
 800a7ac:	4631      	mov	r1, r6
 800a7ae:	4640      	mov	r0, r8
 800a7b0:	f7ff f9ea 	bl	8009b88 <_free_r>
 800a7b4:	e7e1      	b.n	800a77a <_realloc_r+0x1e>
 800a7b6:	4635      	mov	r5, r6
 800a7b8:	e7df      	b.n	800a77a <_realloc_r+0x1e>

0800a7ba <_raise_r>:
 800a7ba:	291f      	cmp	r1, #31
 800a7bc:	b538      	push	{r3, r4, r5, lr}
 800a7be:	4604      	mov	r4, r0
 800a7c0:	460d      	mov	r5, r1
 800a7c2:	d904      	bls.n	800a7ce <_raise_r+0x14>
 800a7c4:	2316      	movs	r3, #22
 800a7c6:	6003      	str	r3, [r0, #0]
 800a7c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a7cc:	bd38      	pop	{r3, r4, r5, pc}
 800a7ce:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a7d0:	b112      	cbz	r2, 800a7d8 <_raise_r+0x1e>
 800a7d2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a7d6:	b94b      	cbnz	r3, 800a7ec <_raise_r+0x32>
 800a7d8:	4620      	mov	r0, r4
 800a7da:	f000 f831 	bl	800a840 <_getpid_r>
 800a7de:	462a      	mov	r2, r5
 800a7e0:	4601      	mov	r1, r0
 800a7e2:	4620      	mov	r0, r4
 800a7e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a7e8:	f000 b818 	b.w	800a81c <_kill_r>
 800a7ec:	2b01      	cmp	r3, #1
 800a7ee:	d00a      	beq.n	800a806 <_raise_r+0x4c>
 800a7f0:	1c59      	adds	r1, r3, #1
 800a7f2:	d103      	bne.n	800a7fc <_raise_r+0x42>
 800a7f4:	2316      	movs	r3, #22
 800a7f6:	6003      	str	r3, [r0, #0]
 800a7f8:	2001      	movs	r0, #1
 800a7fa:	e7e7      	b.n	800a7cc <_raise_r+0x12>
 800a7fc:	2400      	movs	r4, #0
 800a7fe:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a802:	4628      	mov	r0, r5
 800a804:	4798      	blx	r3
 800a806:	2000      	movs	r0, #0
 800a808:	e7e0      	b.n	800a7cc <_raise_r+0x12>
	...

0800a80c <raise>:
 800a80c:	4b02      	ldr	r3, [pc, #8]	; (800a818 <raise+0xc>)
 800a80e:	4601      	mov	r1, r0
 800a810:	6818      	ldr	r0, [r3, #0]
 800a812:	f7ff bfd2 	b.w	800a7ba <_raise_r>
 800a816:	bf00      	nop
 800a818:	20000010 	.word	0x20000010

0800a81c <_kill_r>:
 800a81c:	b538      	push	{r3, r4, r5, lr}
 800a81e:	4d07      	ldr	r5, [pc, #28]	; (800a83c <_kill_r+0x20>)
 800a820:	2300      	movs	r3, #0
 800a822:	4604      	mov	r4, r0
 800a824:	4608      	mov	r0, r1
 800a826:	4611      	mov	r1, r2
 800a828:	602b      	str	r3, [r5, #0]
 800a82a:	f7f6 fcf2 	bl	8001212 <_kill>
 800a82e:	1c43      	adds	r3, r0, #1
 800a830:	d102      	bne.n	800a838 <_kill_r+0x1c>
 800a832:	682b      	ldr	r3, [r5, #0]
 800a834:	b103      	cbz	r3, 800a838 <_kill_r+0x1c>
 800a836:	6023      	str	r3, [r4, #0]
 800a838:	bd38      	pop	{r3, r4, r5, pc}
 800a83a:	bf00      	nop
 800a83c:	20001a64 	.word	0x20001a64

0800a840 <_getpid_r>:
 800a840:	f7f6 bce0 	b.w	8001204 <_getpid>

0800a844 <_fstat_r>:
 800a844:	b538      	push	{r3, r4, r5, lr}
 800a846:	4d07      	ldr	r5, [pc, #28]	; (800a864 <_fstat_r+0x20>)
 800a848:	2300      	movs	r3, #0
 800a84a:	4604      	mov	r4, r0
 800a84c:	4608      	mov	r0, r1
 800a84e:	4611      	mov	r1, r2
 800a850:	602b      	str	r3, [r5, #0]
 800a852:	f7f6 fd3c 	bl	80012ce <_fstat>
 800a856:	1c43      	adds	r3, r0, #1
 800a858:	d102      	bne.n	800a860 <_fstat_r+0x1c>
 800a85a:	682b      	ldr	r3, [r5, #0]
 800a85c:	b103      	cbz	r3, 800a860 <_fstat_r+0x1c>
 800a85e:	6023      	str	r3, [r4, #0]
 800a860:	bd38      	pop	{r3, r4, r5, pc}
 800a862:	bf00      	nop
 800a864:	20001a64 	.word	0x20001a64

0800a868 <_isatty_r>:
 800a868:	b538      	push	{r3, r4, r5, lr}
 800a86a:	4d06      	ldr	r5, [pc, #24]	; (800a884 <_isatty_r+0x1c>)
 800a86c:	2300      	movs	r3, #0
 800a86e:	4604      	mov	r4, r0
 800a870:	4608      	mov	r0, r1
 800a872:	602b      	str	r3, [r5, #0]
 800a874:	f7f6 fd3a 	bl	80012ec <_isatty>
 800a878:	1c43      	adds	r3, r0, #1
 800a87a:	d102      	bne.n	800a882 <_isatty_r+0x1a>
 800a87c:	682b      	ldr	r3, [r5, #0]
 800a87e:	b103      	cbz	r3, 800a882 <_isatty_r+0x1a>
 800a880:	6023      	str	r3, [r4, #0]
 800a882:	bd38      	pop	{r3, r4, r5, pc}
 800a884:	20001a64 	.word	0x20001a64

0800a888 <_malloc_usable_size_r>:
 800a888:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a88c:	1f18      	subs	r0, r3, #4
 800a88e:	2b00      	cmp	r3, #0
 800a890:	bfbc      	itt	lt
 800a892:	580b      	ldrlt	r3, [r1, r0]
 800a894:	18c0      	addlt	r0, r0, r3
 800a896:	4770      	bx	lr

0800a898 <_init>:
 800a898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a89a:	bf00      	nop
 800a89c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a89e:	bc08      	pop	{r3}
 800a8a0:	469e      	mov	lr, r3
 800a8a2:	4770      	bx	lr

0800a8a4 <_fini>:
 800a8a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8a6:	bf00      	nop
 800a8a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8aa:	bc08      	pop	{r3}
 800a8ac:	469e      	mov	lr, r3
 800a8ae:	4770      	bx	lr
