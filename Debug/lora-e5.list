
lora-e5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a280  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008ec  0800a3c0  0800a3c0  0001a3c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800acac  0800acac  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800acac  0800acac  0001acac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800acb4  0800acb4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800acb4  0800acb4  0001acb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800acb8  0800acb8  0001acb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800acbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001990  20000074  0800ad30  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a04  0800ad30  00021a04  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000260d5  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004dc0  00000000  00000000  00046173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021b8  00000000  00000000  0004af38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001fe0  00000000  00000000  0004d0f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000211cb  00000000  00000000  0004f0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023dcf  00000000  00000000  0007029b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c65b4  00000000  00000000  0009406a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015a61e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009a80  00000000  00000000  0015a670  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000074 	.word	0x20000074
 800015c:	00000000 	.word	0x00000000
 8000160:	0800a3a8 	.word	0x0800a3a8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000078 	.word	0x20000078
 800017c:	0800a3a8 	.word	0x0800a3a8

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <memchr>:
 8000190:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000194:	2a10      	cmp	r2, #16
 8000196:	db2b      	blt.n	80001f0 <memchr+0x60>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	d008      	beq.n	80001b0 <memchr+0x20>
 800019e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001a2:	3a01      	subs	r2, #1
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d02d      	beq.n	8000204 <memchr+0x74>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	b342      	cbz	r2, 8000200 <memchr+0x70>
 80001ae:	d1f6      	bne.n	800019e <memchr+0xe>
 80001b0:	b4f0      	push	{r4, r5, r6, r7}
 80001b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ba:	f022 0407 	bic.w	r4, r2, #7
 80001be:	f07f 0700 	mvns.w	r7, #0
 80001c2:	2300      	movs	r3, #0
 80001c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001c8:	3c08      	subs	r4, #8
 80001ca:	ea85 0501 	eor.w	r5, r5, r1
 80001ce:	ea86 0601 	eor.w	r6, r6, r1
 80001d2:	fa85 f547 	uadd8	r5, r5, r7
 80001d6:	faa3 f587 	sel	r5, r3, r7
 80001da:	fa86 f647 	uadd8	r6, r6, r7
 80001de:	faa5 f687 	sel	r6, r5, r7
 80001e2:	b98e      	cbnz	r6, 8000208 <memchr+0x78>
 80001e4:	d1ee      	bne.n	80001c4 <memchr+0x34>
 80001e6:	bcf0      	pop	{r4, r5, r6, r7}
 80001e8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001ec:	f002 0207 	and.w	r2, r2, #7
 80001f0:	b132      	cbz	r2, 8000200 <memchr+0x70>
 80001f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f6:	3a01      	subs	r2, #1
 80001f8:	ea83 0301 	eor.w	r3, r3, r1
 80001fc:	b113      	cbz	r3, 8000204 <memchr+0x74>
 80001fe:	d1f8      	bne.n	80001f2 <memchr+0x62>
 8000200:	2000      	movs	r0, #0
 8000202:	4770      	bx	lr
 8000204:	3801      	subs	r0, #1
 8000206:	4770      	bx	lr
 8000208:	2d00      	cmp	r5, #0
 800020a:	bf06      	itte	eq
 800020c:	4635      	moveq	r5, r6
 800020e:	3803      	subeq	r0, #3
 8000210:	3807      	subne	r0, #7
 8000212:	f015 0f01 	tst.w	r5, #1
 8000216:	d107      	bne.n	8000228 <memchr+0x98>
 8000218:	3001      	adds	r0, #1
 800021a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800021e:	bf02      	ittt	eq
 8000220:	3001      	addeq	r0, #1
 8000222:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000226:	3001      	addeq	r0, #1
 8000228:	bcf0      	pop	{r4, r5, r6, r7}
 800022a:	3801      	subs	r0, #1
 800022c:	4770      	bx	lr
 800022e:	bf00      	nop

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295
 8000240:	f04f 30ff 	movne.w	r0, #4294967295
 8000244:	f000 b974 	b.w	8000530 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9e08      	ldr	r6, [sp, #32]
 8000266:	460d      	mov	r5, r1
 8000268:	4604      	mov	r4, r0
 800026a:	4688      	mov	r8, r1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d14d      	bne.n	800030c <__udivmoddi4+0xac>
 8000270:	428a      	cmp	r2, r1
 8000272:	4694      	mov	ip, r2
 8000274:	d968      	bls.n	8000348 <__udivmoddi4+0xe8>
 8000276:	fab2 f282 	clz	r2, r2
 800027a:	b152      	cbz	r2, 8000292 <__udivmoddi4+0x32>
 800027c:	fa01 f302 	lsl.w	r3, r1, r2
 8000280:	f1c2 0120 	rsb	r1, r2, #32
 8000284:	fa20 f101 	lsr.w	r1, r0, r1
 8000288:	fa0c fc02 	lsl.w	ip, ip, r2
 800028c:	ea41 0803 	orr.w	r8, r1, r3
 8000290:	4094      	lsls	r4, r2
 8000292:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000296:	0c21      	lsrs	r1, r4, #16
 8000298:	fbb8 fef5 	udiv	lr, r8, r5
 800029c:	fa1f f78c 	uxth.w	r7, ip
 80002a0:	fb05 831e 	mls	r3, r5, lr, r8
 80002a4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002a8:	fb0e f107 	mul.w	r1, lr, r7
 80002ac:	4299      	cmp	r1, r3
 80002ae:	d90b      	bls.n	80002c8 <__udivmoddi4+0x68>
 80002b0:	eb1c 0303 	adds.w	r3, ip, r3
 80002b4:	f10e 30ff 	add.w	r0, lr, #4294967295
 80002b8:	f080 811e 	bcs.w	80004f8 <__udivmoddi4+0x298>
 80002bc:	4299      	cmp	r1, r3
 80002be:	f240 811b 	bls.w	80004f8 <__udivmoddi4+0x298>
 80002c2:	f1ae 0e02 	sub.w	lr, lr, #2
 80002c6:	4463      	add	r3, ip
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0f5 	udiv	r0, r3, r5
 80002d0:	fb05 3310 	mls	r3, r5, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 f707 	mul.w	r7, r0, r7
 80002dc:	42a7      	cmp	r7, r4
 80002de:	d90a      	bls.n	80002f6 <__udivmoddi4+0x96>
 80002e0:	eb1c 0404 	adds.w	r4, ip, r4
 80002e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e8:	f080 8108 	bcs.w	80004fc <__udivmoddi4+0x29c>
 80002ec:	42a7      	cmp	r7, r4
 80002ee:	f240 8105 	bls.w	80004fc <__udivmoddi4+0x29c>
 80002f2:	4464      	add	r4, ip
 80002f4:	3802      	subs	r0, #2
 80002f6:	1be4      	subs	r4, r4, r7
 80002f8:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80002fc:	2100      	movs	r1, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa8>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030c:	428b      	cmp	r3, r1
 800030e:	d908      	bls.n	8000322 <__udivmoddi4+0xc2>
 8000310:	2e00      	cmp	r6, #0
 8000312:	f000 80ee 	beq.w	80004f2 <__udivmoddi4+0x292>
 8000316:	2100      	movs	r1, #0
 8000318:	e9c6 0500 	strd	r0, r5, [r6]
 800031c:	4608      	mov	r0, r1
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	fab3 f183 	clz	r1, r3
 8000326:	2900      	cmp	r1, #0
 8000328:	d14a      	bne.n	80003c0 <__udivmoddi4+0x160>
 800032a:	42ab      	cmp	r3, r5
 800032c:	d302      	bcc.n	8000334 <__udivmoddi4+0xd4>
 800032e:	4282      	cmp	r2, r0
 8000330:	f200 80f9 	bhi.w	8000526 <__udivmoddi4+0x2c6>
 8000334:	1a84      	subs	r4, r0, r2
 8000336:	eb65 0303 	sbc.w	r3, r5, r3
 800033a:	2001      	movs	r0, #1
 800033c:	4698      	mov	r8, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d0e2      	beq.n	8000308 <__udivmoddi4+0xa8>
 8000342:	e9c6 4800 	strd	r4, r8, [r6]
 8000346:	e7df      	b.n	8000308 <__udivmoddi4+0xa8>
 8000348:	b902      	cbnz	r2, 800034c <__udivmoddi4+0xec>
 800034a:	deff      	udf	#255	; 0xff
 800034c:	fab2 f282 	clz	r2, r2
 8000350:	2a00      	cmp	r2, #0
 8000352:	f040 8091 	bne.w	8000478 <__udivmoddi4+0x218>
 8000356:	eba1 050c 	sub.w	r5, r1, ip
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2101      	movs	r1, #1
 8000364:	fbb5 f3f7 	udiv	r3, r5, r7
 8000368:	fb07 5013 	mls	r0, r7, r3, r5
 800036c:	0c25      	lsrs	r5, r4, #16
 800036e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000372:	fb0e f003 	mul.w	r0, lr, r3
 8000376:	42a8      	cmp	r0, r5
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x12c>
 800037a:	eb1c 0505 	adds.w	r5, ip, r5
 800037e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x12a>
 8000384:	42a8      	cmp	r0, r5
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2c0>
 800038a:	4643      	mov	r3, r8
 800038c:	1a2d      	subs	r5, r5, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb5 f0f7 	udiv	r0, r5, r7
 8000394:	fb07 5510 	mls	r5, r7, r0, r5
 8000398:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x156>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 35ff 	add.w	r5, r0, #4294967295
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x154>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2ca>
 80003b4:	4628      	mov	r0, r5
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003be:	e79e      	b.n	80002fe <__udivmoddi4+0x9e>
 80003c0:	f1c1 0720 	rsb	r7, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa20 f407 	lsr.w	r4, r0, r7
 80003d2:	fa05 f301 	lsl.w	r3, r5, r1
 80003d6:	431c      	orrs	r4, r3
 80003d8:	40fd      	lsrs	r5, r7
 80003da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003de:	fa00 f301 	lsl.w	r3, r0, r1
 80003e2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003e6:	0c20      	lsrs	r0, r4, #16
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	fb09 5518 	mls	r5, r9, r8, r5
 80003f0:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 80003f4:	fb08 f00e 	mul.w	r0, r8, lr
 80003f8:	42a8      	cmp	r0, r5
 80003fa:	fa02 f201 	lsl.w	r2, r2, r1
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b8>
 8000400:	eb1c 0505 	adds.w	r5, ip, r5
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2bc>
 800040c:	42a8      	cmp	r0, r5
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2bc>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4465      	add	r5, ip
 8000418:	1a2d      	subs	r5, r5, r0
 800041a:	b2a4      	uxth	r4, r4
 800041c:	fbb5 f0f9 	udiv	r0, r5, r9
 8000420:	fb09 5510 	mls	r5, r9, r0, r5
 8000424:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000428:	fb00 fe0e 	mul.w	lr, r0, lr
 800042c:	45ae      	cmp	lr, r5
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1e2>
 8000430:	eb1c 0505 	adds.w	r5, ip, r5
 8000434:	f100 34ff 	add.w	r4, r0, #4294967295
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2b4>
 800043a:	45ae      	cmp	lr, r5
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2b4>
 800043e:	3802      	subs	r0, #2
 8000440:	4465      	add	r5, ip
 8000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000446:	fba0 9402 	umull	r9, r4, r0, r2
 800044a:	eba5 050e 	sub.w	r5, r5, lr
 800044e:	42a5      	cmp	r5, r4
 8000450:	46c8      	mov	r8, r9
 8000452:	46a6      	mov	lr, r4
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x2a4>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x2a0>
 8000458:	b15e      	cbz	r6, 8000472 <__udivmoddi4+0x212>
 800045a:	ebb3 0208 	subs.w	r2, r3, r8
 800045e:	eb65 050e 	sbc.w	r5, r5, lr
 8000462:	fa05 f707 	lsl.w	r7, r5, r7
 8000466:	fa22 f301 	lsr.w	r3, r2, r1
 800046a:	40cd      	lsrs	r5, r1
 800046c:	431f      	orrs	r7, r3
 800046e:	e9c6 7500 	strd	r7, r5, [r6]
 8000472:	2100      	movs	r1, #0
 8000474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f103 	lsr.w	r1, r0, r3
 8000480:	fa0c fc02 	lsl.w	ip, ip, r2
 8000484:	fa25 f303 	lsr.w	r3, r5, r3
 8000488:	4095      	lsls	r5, r2
 800048a:	430d      	orrs	r5, r1
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb3 f1f7 	udiv	r1, r3, r7
 8000498:	fb07 3011 	mls	r0, r7, r1, r3
 800049c:	0c2b      	lsrs	r3, r5, #16
 800049e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80004a2:	fb01 f00e 	mul.w	r0, r1, lr
 80004a6:	4298      	cmp	r0, r3
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x260>
 80004ae:	eb1c 0303 	adds.w	r3, ip, r3
 80004b2:	f101 38ff 	add.w	r8, r1, #4294967295
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b8>
 80004b8:	4298      	cmp	r0, r3
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b8>
 80004bc:	3902      	subs	r1, #2
 80004be:	4463      	add	r3, ip
 80004c0:	1a1b      	subs	r3, r3, r0
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004c8:	fb07 3310 	mls	r3, r7, r0, r3
 80004cc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004d0:	fb00 f30e 	mul.w	r3, r0, lr
 80004d4:	42ab      	cmp	r3, r5
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x28a>
 80004d8:	eb1c 0505 	adds.w	r5, ip, r5
 80004dc:	f100 38ff 	add.w	r8, r0, #4294967295
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004e2:	42ab      	cmp	r3, r5
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4465      	add	r5, ip
 80004ea:	1aed      	subs	r5, r5, r3
 80004ec:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0x104>
 80004f2:	4631      	mov	r1, r6
 80004f4:	4630      	mov	r0, r6
 80004f6:	e707      	b.n	8000308 <__udivmoddi4+0xa8>
 80004f8:	4686      	mov	lr, r0
 80004fa:	e6e5      	b.n	80002c8 <__udivmoddi4+0x68>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e6fa      	b.n	80002f6 <__udivmoddi4+0x96>
 8000500:	454b      	cmp	r3, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f8>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb64 0e0c 	sbc.w	lr, r4, ip
 800050c:	3801      	subs	r0, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f8>
 8000510:	4640      	mov	r0, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x28a>
 8000514:	4620      	mov	r0, r4
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1e2>
 8000518:	4641      	mov	r1, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x260>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b8>
 8000520:	3b02      	subs	r3, #2
 8000522:	4465      	add	r5, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x12c>
 8000526:	4608      	mov	r0, r1
 8000528:	e709      	b.n	800033e <__udivmoddi4+0xde>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x156>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <vApplicationIdleHook>:
/* Hook prototypes */
void vApplicationIdleHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000534:	b480      	push	{r7}
 8000536:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr

08000540 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000540:	b480      	push	{r7}
 8000542:	b085      	sub	sp, #20
 8000544:	af00      	add	r7, sp, #0
 8000546:	60f8      	str	r0, [r7, #12]
 8000548:	60b9      	str	r1, [r7, #8]
 800054a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	4a06      	ldr	r2, [pc, #24]	; (8000568 <vApplicationGetIdleTaskMemory+0x28>)
 8000550:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000552:	68bb      	ldr	r3, [r7, #8]
 8000554:	4a05      	ldr	r2, [pc, #20]	; (800056c <vApplicationGetIdleTaskMemory+0x2c>)
 8000556:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	2280      	movs	r2, #128	; 0x80
 800055c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800055e:	bf00      	nop
 8000560:	3714      	adds	r7, #20
 8000562:	46bd      	mov	sp, r7
 8000564:	bc80      	pop	{r7}
 8000566:	4770      	bx	lr
 8000568:	20000090 	.word	0x20000090
 800056c:	20000144 	.word	0x20000144

08000570 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	4a07      	ldr	r2, [pc, #28]	; (800059c <vApplicationGetTimerTaskMemory+0x2c>)
 8000580:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000582:	68bb      	ldr	r3, [r7, #8]
 8000584:	4a06      	ldr	r2, [pc, #24]	; (80005a0 <vApplicationGetTimerTaskMemory+0x30>)
 8000586:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800058e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000590:	bf00      	nop
 8000592:	3714      	adds	r7, #20
 8000594:	46bd      	mov	sp, r7
 8000596:	bc80      	pop	{r7}
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	20000344 	.word	0x20000344
 80005a0:	200003f8 	.word	0x200003f8

080005a4 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 80005ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005b4:	f023 0218 	bic.w	r2, r3, #24
 80005b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	4313      	orrs	r3, r2
 80005c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80005c4:	bf00      	nop
 80005c6:	370c      	adds	r7, #12
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bc80      	pop	{r7}
 80005cc:	4770      	bx	lr

080005ce <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005ce:	b480      	push	{r7}
 80005d0:	b085      	sub	sp, #20
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80005d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	4313      	orrs	r3, r2
 80005e4:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80005e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4013      	ands	r3, r2
 80005f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005f2:	68fb      	ldr	r3, [r7, #12]
}
 80005f4:	bf00      	nop
 80005f6:	3714      	adds	r7, #20
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bc80      	pop	{r7}
 80005fc:	4770      	bx	lr
	...

08000600 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000600:	b5b0      	push	{r4, r5, r7, lr}
 8000602:	b08c      	sub	sp, #48	; 0x30
 8000604:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000606:	f000 fe01 	bl	800120c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060a:	f000 f837 	bl	800067c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060e:	f000 fa4f 	bl	8000ab0 <MX_GPIO_Init>
  MX_ADC_Init();
 8000612:	f000 f895 	bl	8000740 <MX_ADC_Init>
  MX_LPUART1_UART_Init();
 8000616:	f000 f8e1 	bl	80007dc <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 800061a:	f000 f929 	bl	8000870 <MX_USART2_UART_Init>
  MX_RTC_Init();
 800061e:	f000 f973 	bl	8000908 <MX_RTC_Init>
  MX_SPI2_Init();
 8000622:	f000 fa07 	bl	8000a34 <MX_SPI2_Init>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of xQueue1 */
  osMessageQDef(xQueue1, 100, uint16_t);
 8000626:	4b11      	ldr	r3, [pc, #68]	; (800066c <main+0x6c>)
 8000628:	f107 0420 	add.w	r4, r7, #32
 800062c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800062e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  xQueue1Handle = osMessageCreate(osMessageQ(xQueue1), NULL);
 8000632:	f107 0320 	add.w	r3, r7, #32
 8000636:	2100      	movs	r1, #0
 8000638:	4618      	mov	r0, r3
 800063a:	f005 ff99 	bl	8006570 <osMessageCreate>
 800063e:	4603      	mov	r3, r0
 8000640:	4a0b      	ldr	r2, [pc, #44]	; (8000670 <main+0x70>)
 8000642:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of terminalTask */
  osThreadDef(terminalTask, terminalTaskHandler, osPriorityNormal, 0, 128);
 8000644:	4b0b      	ldr	r3, [pc, #44]	; (8000674 <main+0x74>)
 8000646:	1d3c      	adds	r4, r7, #4
 8000648:	461d      	mov	r5, r3
 800064a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800064c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800064e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000652:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  terminalTaskHandle = osThreadCreate(osThread(terminalTask), NULL);
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f005 ff28 	bl	80064b0 <osThreadCreate>
 8000660:	4603      	mov	r3, r0
 8000662:	4a05      	ldr	r2, [pc, #20]	; (8000678 <main+0x78>)
 8000664:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000666:	f005 ff1c 	bl	80064a2 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800066a:	e7fe      	b.n	800066a <main+0x6a>
 800066c:	0800a3d0 	.word	0x0800a3d0
 8000670:	20000a24 	.word	0x20000a24
 8000674:	0800a3e0 	.word	0x0800a3e0
 8000678:	20000a20 	.word	0x20000a20

0800067c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b09a      	sub	sp, #104	; 0x68
 8000680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	f107 0320 	add.w	r3, r7, #32
 8000686:	2248      	movs	r2, #72	; 0x48
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f008 fccf 	bl	800902e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000690:	f107 0308 	add.w	r3, r7, #8
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]
 80006a0:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006a2:	f001 fb15 	bl	8001cd0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006a6:	2000      	movs	r0, #0
 80006a8:	f7ff ff7c 	bl	80005a4 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ac:	4b23      	ldr	r3, [pc, #140]	; (800073c <SystemClock_Config+0xc0>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80006b4:	4a21      	ldr	r2, [pc, #132]	; (800073c <SystemClock_Config+0xc0>)
 80006b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006ba:	6013      	str	r3, [r2, #0]
 80006bc:	4b1f      	ldr	r3, [pc, #124]	; (800073c <SystemClock_Config+0xc0>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 80006c8:	232e      	movs	r3, #46	; 0x2e
 80006ca:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006cc:	2381      	movs	r3, #129	; 0x81
 80006ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006d4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006d6:	2301      	movs	r3, #1
 80006d8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006da:	2340      	movs	r3, #64	; 0x40
 80006dc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80006de:	2300      	movs	r3, #0
 80006e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80006e2:	23b0      	movs	r3, #176	; 0xb0
 80006e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006ea:	2301      	movs	r3, #1
 80006ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006ee:	2300      	movs	r3, #0
 80006f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f2:	f107 0320 	add.w	r3, r7, #32
 80006f6:	4618      	mov	r0, r3
 80006f8:	f001 fd94 	bl	8002224 <HAL_RCC_OscConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000702:	f000 fa3b 	bl	8000b7c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8000706:	234f      	movs	r3, #79	; 0x4f
 8000708:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800070a:	2300      	movs	r3, #0
 800070c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800070e:	2300      	movs	r3, #0
 8000710:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000712:	2300      	movs	r3, #0
 8000714:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000716:	2300      	movs	r3, #0
 8000718:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800071a:	2300      	movs	r3, #0
 800071c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800071e:	f107 0308 	add.w	r3, r7, #8
 8000722:	2102      	movs	r1, #2
 8000724:	4618      	mov	r0, r3
 8000726:	f002 f8ff 	bl	8002928 <HAL_RCC_ClockConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000730:	f000 fa24 	bl	8000b7c <Error_Handler>
  }
}
 8000734:	bf00      	nop
 8000736:	3768      	adds	r7, #104	; 0x68
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	58000400 	.word	0x58000400

08000740 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8000744:	4b23      	ldr	r3, [pc, #140]	; (80007d4 <MX_ADC_Init+0x94>)
 8000746:	4a24      	ldr	r2, [pc, #144]	; (80007d8 <MX_ADC_Init+0x98>)
 8000748:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800074a:	4b22      	ldr	r3, [pc, #136]	; (80007d4 <MX_ADC_Init+0x94>)
 800074c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000750:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000752:	4b20      	ldr	r3, [pc, #128]	; (80007d4 <MX_ADC_Init+0x94>)
 8000754:	2200      	movs	r2, #0
 8000756:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000758:	4b1e      	ldr	r3, [pc, #120]	; (80007d4 <MX_ADC_Init+0x94>)
 800075a:	2200      	movs	r2, #0
 800075c:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800075e:	4b1d      	ldr	r3, [pc, #116]	; (80007d4 <MX_ADC_Init+0x94>)
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000764:	4b1b      	ldr	r3, [pc, #108]	; (80007d4 <MX_ADC_Init+0x94>)
 8000766:	2204      	movs	r2, #4
 8000768:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800076a:	4b1a      	ldr	r3, [pc, #104]	; (80007d4 <MX_ADC_Init+0x94>)
 800076c:	2200      	movs	r2, #0
 800076e:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000770:	4b18      	ldr	r3, [pc, #96]	; (80007d4 <MX_ADC_Init+0x94>)
 8000772:	2200      	movs	r2, #0
 8000774:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000776:	4b17      	ldr	r3, [pc, #92]	; (80007d4 <MX_ADC_Init+0x94>)
 8000778:	2200      	movs	r2, #0
 800077a:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 800077c:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <MX_ADC_Init+0x94>)
 800077e:	2201      	movs	r2, #1
 8000780:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000782:	4b14      	ldr	r3, [pc, #80]	; (80007d4 <MX_ADC_Init+0x94>)
 8000784:	2200      	movs	r2, #0
 8000786:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800078a:	4b12      	ldr	r3, [pc, #72]	; (80007d4 <MX_ADC_Init+0x94>)
 800078c:	2200      	movs	r2, #0
 800078e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000790:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <MX_ADC_Init+0x94>)
 8000792:	2200      	movs	r2, #0
 8000794:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000796:	4b0f      	ldr	r3, [pc, #60]	; (80007d4 <MX_ADC_Init+0x94>)
 8000798:	2200      	movs	r2, #0
 800079a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800079e:	4b0d      	ldr	r3, [pc, #52]	; (80007d4 <MX_ADC_Init+0x94>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80007a4:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <MX_ADC_Init+0x94>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80007aa:	4b0a      	ldr	r3, [pc, #40]	; (80007d4 <MX_ADC_Init+0x94>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 80007b0:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <MX_ADC_Init+0x94>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80007b8:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <MX_ADC_Init+0x94>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80007be:	4805      	ldr	r0, [pc, #20]	; (80007d4 <MX_ADC_Init+0x94>)
 80007c0:	f000 fde0 	bl	8001384 <HAL_ADC_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_ADC_Init+0x8e>
  {
    Error_Handler();
 80007ca:	f000 f9d7 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	200007f8 	.word	0x200007f8
 80007d8:	40012400 	.word	0x40012400

080007dc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80007e0:	4b20      	ldr	r3, [pc, #128]	; (8000864 <MX_LPUART1_UART_Init+0x88>)
 80007e2:	4a21      	ldr	r2, [pc, #132]	; (8000868 <MX_LPUART1_UART_Init+0x8c>)
 80007e4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80007e6:	4b1f      	ldr	r3, [pc, #124]	; (8000864 <MX_LPUART1_UART_Init+0x88>)
 80007e8:	4a20      	ldr	r2, [pc, #128]	; (800086c <MX_LPUART1_UART_Init+0x90>)
 80007ea:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007ec:	4b1d      	ldr	r3, [pc, #116]	; (8000864 <MX_LPUART1_UART_Init+0x88>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80007f2:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <MX_LPUART1_UART_Init+0x88>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80007f8:	4b1a      	ldr	r3, [pc, #104]	; (8000864 <MX_LPUART1_UART_Init+0x88>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80007fe:	4b19      	ldr	r3, [pc, #100]	; (8000864 <MX_LPUART1_UART_Init+0x88>)
 8000800:	220c      	movs	r2, #12
 8000802:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000804:	4b17      	ldr	r3, [pc, #92]	; (8000864 <MX_LPUART1_UART_Init+0x88>)
 8000806:	2200      	movs	r2, #0
 8000808:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800080a:	4b16      	ldr	r3, [pc, #88]	; (8000864 <MX_LPUART1_UART_Init+0x88>)
 800080c:	2200      	movs	r2, #0
 800080e:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000810:	4b14      	ldr	r3, [pc, #80]	; (8000864 <MX_LPUART1_UART_Init+0x88>)
 8000812:	2200      	movs	r2, #0
 8000814:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000816:	4b13      	ldr	r3, [pc, #76]	; (8000864 <MX_LPUART1_UART_Init+0x88>)
 8000818:	2200      	movs	r2, #0
 800081a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&hlpuart1) != HAL_OK)
 800081c:	4811      	ldr	r0, [pc, #68]	; (8000864 <MX_LPUART1_UART_Init+0x88>)
 800081e:	f003 fc8d 	bl	800413c <HAL_HalfDuplex_Init>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8000828:	f000 f9a8 	bl	8000b7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800082c:	2100      	movs	r1, #0
 800082e:	480d      	ldr	r0, [pc, #52]	; (8000864 <MX_LPUART1_UART_Init+0x88>)
 8000830:	f005 fc51 	bl	80060d6 <HAL_UARTEx_SetTxFifoThreshold>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 800083a:	f000 f99f 	bl	8000b7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800083e:	2100      	movs	r1, #0
 8000840:	4808      	ldr	r0, [pc, #32]	; (8000864 <MX_LPUART1_UART_Init+0x88>)
 8000842:	f005 fc86 	bl	8006152 <HAL_UARTEx_SetRxFifoThreshold>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 800084c:	f000 f996 	bl	8000b7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000850:	4804      	ldr	r0, [pc, #16]	; (8000864 <MX_LPUART1_UART_Init+0x88>)
 8000852:	f005 fc08 	bl	8006066 <HAL_UARTEx_DisableFifoMode>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 800085c:	f000 f98e 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000860:	bf00      	nop
 8000862:	bd80      	pop	{r7, pc}
 8000864:	2000085c 	.word	0x2000085c
 8000868:	40008000 	.word	0x40008000
 800086c:	00033324 	.word	0x00033324

08000870 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000874:	4b22      	ldr	r3, [pc, #136]	; (8000900 <MX_USART2_UART_Init+0x90>)
 8000876:	4a23      	ldr	r2, [pc, #140]	; (8000904 <MX_USART2_UART_Init+0x94>)
 8000878:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800087a:	4b21      	ldr	r3, [pc, #132]	; (8000900 <MX_USART2_UART_Init+0x90>)
 800087c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000880:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000882:	4b1f      	ldr	r3, [pc, #124]	; (8000900 <MX_USART2_UART_Init+0x90>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000888:	4b1d      	ldr	r3, [pc, #116]	; (8000900 <MX_USART2_UART_Init+0x90>)
 800088a:	2200      	movs	r2, #0
 800088c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800088e:	4b1c      	ldr	r3, [pc, #112]	; (8000900 <MX_USART2_UART_Init+0x90>)
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000894:	4b1a      	ldr	r3, [pc, #104]	; (8000900 <MX_USART2_UART_Init+0x90>)
 8000896:	220c      	movs	r2, #12
 8000898:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800089a:	4b19      	ldr	r3, [pc, #100]	; (8000900 <MX_USART2_UART_Init+0x90>)
 800089c:	2200      	movs	r2, #0
 800089e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a0:	4b17      	ldr	r3, [pc, #92]	; (8000900 <MX_USART2_UART_Init+0x90>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008a6:	4b16      	ldr	r3, [pc, #88]	; (8000900 <MX_USART2_UART_Init+0x90>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008ac:	4b14      	ldr	r3, [pc, #80]	; (8000900 <MX_USART2_UART_Init+0x90>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008b2:	4b13      	ldr	r3, [pc, #76]	; (8000900 <MX_USART2_UART_Init+0x90>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008b8:	4811      	ldr	r0, [pc, #68]	; (8000900 <MX_USART2_UART_Init+0x90>)
 80008ba:	f003 fbef 	bl	800409c <HAL_UART_Init>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80008c4:	f000 f95a 	bl	8000b7c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008c8:	2100      	movs	r1, #0
 80008ca:	480d      	ldr	r0, [pc, #52]	; (8000900 <MX_USART2_UART_Init+0x90>)
 80008cc:	f005 fc03 	bl	80060d6 <HAL_UARTEx_SetTxFifoThreshold>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80008d6:	f000 f951 	bl	8000b7c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008da:	2100      	movs	r1, #0
 80008dc:	4808      	ldr	r0, [pc, #32]	; (8000900 <MX_USART2_UART_Init+0x90>)
 80008de:	f005 fc38 	bl	8006152 <HAL_UARTEx_SetRxFifoThreshold>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80008e8:	f000 f948 	bl	8000b7c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80008ec:	4804      	ldr	r0, [pc, #16]	; (8000900 <MX_USART2_UART_Init+0x90>)
 80008ee:	f005 fbba 	bl	8006066 <HAL_UARTEx_DisableFifoMode>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80008f8:	f000 f940 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	200008f0 	.word	0x200008f0
 8000904:	40004400 	.word	0x40004400

08000908 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b092      	sub	sp, #72	; 0x48
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800090e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000912:	2200      	movs	r2, #0
 8000914:	601a      	str	r2, [r3, #0]
 8000916:	605a      	str	r2, [r3, #4]
 8000918:	609a      	str	r2, [r3, #8]
 800091a:	60da      	str	r2, [r3, #12]
 800091c:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800091e:	2300      	movs	r3, #0
 8000920:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	222c      	movs	r2, #44	; 0x2c
 8000926:	2100      	movs	r1, #0
 8000928:	4618      	mov	r0, r3
 800092a:	f008 fb80 	bl	800902e <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800092e:	4b3f      	ldr	r3, [pc, #252]	; (8000a2c <MX_RTC_Init+0x124>)
 8000930:	4a3f      	ldr	r2, [pc, #252]	; (8000a30 <MX_RTC_Init+0x128>)
 8000932:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000934:	4b3d      	ldr	r3, [pc, #244]	; (8000a2c <MX_RTC_Init+0x124>)
 8000936:	2200      	movs	r2, #0
 8000938:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800093a:	4b3c      	ldr	r3, [pc, #240]	; (8000a2c <MX_RTC_Init+0x124>)
 800093c:	227f      	movs	r2, #127	; 0x7f
 800093e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000940:	4b3a      	ldr	r3, [pc, #232]	; (8000a2c <MX_RTC_Init+0x124>)
 8000942:	22ff      	movs	r2, #255	; 0xff
 8000944:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000946:	4b39      	ldr	r3, [pc, #228]	; (8000a2c <MX_RTC_Init+0x124>)
 8000948:	2200      	movs	r2, #0
 800094a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800094c:	4b37      	ldr	r3, [pc, #220]	; (8000a2c <MX_RTC_Init+0x124>)
 800094e:	2200      	movs	r2, #0
 8000950:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000952:	4b36      	ldr	r3, [pc, #216]	; (8000a2c <MX_RTC_Init+0x124>)
 8000954:	2200      	movs	r2, #0
 8000956:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000958:	4b34      	ldr	r3, [pc, #208]	; (8000a2c <MX_RTC_Init+0x124>)
 800095a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800095e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000960:	4b32      	ldr	r3, [pc, #200]	; (8000a2c <MX_RTC_Init+0x124>)
 8000962:	2200      	movs	r2, #0
 8000964:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8000966:	4b31      	ldr	r3, [pc, #196]	; (8000a2c <MX_RTC_Init+0x124>)
 8000968:	2200      	movs	r2, #0
 800096a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800096c:	482f      	ldr	r0, [pc, #188]	; (8000a2c <MX_RTC_Init+0x124>)
 800096e:	f002 fcd5 	bl	800331c <HAL_RTC_Init>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_RTC_Init+0x74>
  {
    Error_Handler();
 8000978:	f000 f900 	bl	8000b7c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800097c:	2300      	movs	r3, #0
 800097e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x0;
 8000982:	2300      	movs	r3, #0
 8000984:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x0;
 8000988:	2300      	movs	r3, #0
 800098a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800098e:	2300      	movs	r3, #0
 8000990:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000992:	2300      	movs	r3, #0
 8000994:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000996:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800099a:	2201      	movs	r2, #1
 800099c:	4619      	mov	r1, r3
 800099e:	4823      	ldr	r0, [pc, #140]	; (8000a2c <MX_RTC_Init+0x124>)
 80009a0:	f002 fd3e 	bl	8003420 <HAL_RTC_SetTime>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_RTC_Init+0xa6>
  {
    Error_Handler();
 80009aa:	f000 f8e7 	bl	8000b7c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80009ae:	2301      	movs	r3, #1
 80009b0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 80009b4:	2301      	movs	r3, #1
 80009b6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x1;
 80009ba:	2301      	movs	r3, #1
 80009bc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x0;
 80009c0:	2300      	movs	r3, #0
 80009c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80009c6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80009ca:	2201      	movs	r2, #1
 80009cc:	4619      	mov	r1, r3
 80009ce:	4817      	ldr	r0, [pc, #92]	; (8000a2c <MX_RTC_Init+0x124>)
 80009d0:	f002 fdc2 	bl	8003558 <HAL_RTC_SetDate>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_RTC_Init+0xd6>
  {
    Error_Handler();
 80009da:	f000 f8cf 	bl	8000b7c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80009de:	2300      	movs	r3, #0
 80009e0:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 80009e2:	2300      	movs	r3, #0
 80009e4:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 80009e6:	2300      	movs	r3, #0
 80009e8:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80009ea:	2300      	movs	r3, #0
 80009ec:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80009ee:	2300      	movs	r3, #0
 80009f0:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80009f2:	2300      	movs	r3, #0
 80009f4:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80009f6:	2300      	movs	r3, #0
 80009f8:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80009fe:	2300      	movs	r3, #0
 8000a00:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 8000a02:	2301      	movs	r3, #1
 8000a04:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8000a08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000a0e:	1d3b      	adds	r3, r7, #4
 8000a10:	2201      	movs	r2, #1
 8000a12:	4619      	mov	r1, r3
 8000a14:	4805      	ldr	r0, [pc, #20]	; (8000a2c <MX_RTC_Init+0x124>)
 8000a16:	f002 fe25 	bl	8003664 <HAL_RTC_SetAlarm>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <MX_RTC_Init+0x11c>
  {
    Error_Handler();
 8000a20:	f000 f8ac 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a24:	bf00      	nop
 8000a26:	3748      	adds	r7, #72	; 0x48
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	20000984 	.word	0x20000984
 8000a30:	40002800 	.word	0x40002800

08000a34 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000a38:	4b1b      	ldr	r3, [pc, #108]	; (8000aa8 <MX_SPI2_Init+0x74>)
 8000a3a:	4a1c      	ldr	r2, [pc, #112]	; (8000aac <MX_SPI2_Init+0x78>)
 8000a3c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a3e:	4b1a      	ldr	r3, [pc, #104]	; (8000aa8 <MX_SPI2_Init+0x74>)
 8000a40:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a44:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000a46:	4b18      	ldr	r3, [pc, #96]	; (8000aa8 <MX_SPI2_Init+0x74>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a4c:	4b16      	ldr	r3, [pc, #88]	; (8000aa8 <MX_SPI2_Init+0x74>)
 8000a4e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a52:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a54:	4b14      	ldr	r3, [pc, #80]	; (8000aa8 <MX_SPI2_Init+0x74>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a5a:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <MX_SPI2_Init+0x74>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a60:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <MX_SPI2_Init+0x74>)
 8000a62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a66:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a68:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <MX_SPI2_Init+0x74>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <MX_SPI2_Init+0x74>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a74:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <MX_SPI2_Init+0x74>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a7a:	4b0b      	ldr	r3, [pc, #44]	; (8000aa8 <MX_SPI2_Init+0x74>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000a80:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <MX_SPI2_Init+0x74>)
 8000a82:	2207      	movs	r2, #7
 8000a84:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a86:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <MX_SPI2_Init+0x74>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <MX_SPI2_Init+0x74>)
 8000a8e:	2208      	movs	r2, #8
 8000a90:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a92:	4805      	ldr	r0, [pc, #20]	; (8000aa8 <MX_SPI2_Init+0x74>)
 8000a94:	f002 ff9f 	bl	80039d6 <HAL_SPI_Init>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000a9e:	f000 f86d 	bl	8000b7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	200009bc 	.word	0x200009bc
 8000aac:	40003800 	.word	0x40003800

08000ab0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab6:	1d3b      	adds	r3, r7, #4
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
 8000ac0:	60da      	str	r2, [r3, #12]
 8000ac2:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac4:	2001      	movs	r0, #1
 8000ac6:	f7ff fd82 	bl	80005ce <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aca:	2004      	movs	r0, #4
 8000acc:	f7ff fd7f 	bl	80005ce <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad0:	2002      	movs	r0, #2
 8000ad2:	f7ff fd7c 	bl	80005ce <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ADC_SW_Pin|MB_OC_Pin|LED_Pin, GPIO_PIN_RESET);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	21e0      	movs	r1, #224	; 0xe0
 8000ada:	4813      	ldr	r0, [pc, #76]	; (8000b28 <MX_GPIO_Init+0x78>)
 8000adc:	f001 f8e0 	bl	8001ca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MB_CTL_GPIO_Port, MB_CTL_Pin, GPIO_PIN_RESET);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	4811      	ldr	r0, [pc, #68]	; (8000b2c <MX_GPIO_Init+0x7c>)
 8000ae6:	f001 f8db 	bl	8001ca0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ADC_SW_Pin MB_OC_Pin LED_Pin */
  GPIO_InitStruct.Pin = ADC_SW_Pin|MB_OC_Pin|LED_Pin;
 8000aea:	23e0      	movs	r3, #224	; 0xe0
 8000aec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aee:	2301      	movs	r3, #1
 8000af0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af6:	2300      	movs	r3, #0
 8000af8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afa:	1d3b      	adds	r3, r7, #4
 8000afc:	4619      	mov	r1, r3
 8000afe:	480a      	ldr	r0, [pc, #40]	; (8000b28 <MX_GPIO_Init+0x78>)
 8000b00:	f000 ff6e 	bl	80019e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MB_CTL_Pin */
  GPIO_InitStruct.Pin = MB_CTL_Pin;
 8000b04:	2301      	movs	r3, #1
 8000b06:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b10:	2300      	movs	r3, #0
 8000b12:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(MB_CTL_GPIO_Port, &GPIO_InitStruct);
 8000b14:	1d3b      	adds	r3, r7, #4
 8000b16:	4619      	mov	r1, r3
 8000b18:	4804      	ldr	r0, [pc, #16]	; (8000b2c <MX_GPIO_Init+0x7c>)
 8000b1a:	f000 ff61 	bl	80019e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b1e:	bf00      	nop
 8000b20:	3718      	adds	r7, #24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	48000400 	.word	0x48000400
 8000b2c:	48000800 	.word	0x48000800

08000b30 <Get_DebugHandle>:

/* USER CODE BEGIN 4 */
UART_HandleTypeDef *Get_DebugHandle(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  return &huart2;
 8000b34:	4b02      	ldr	r3, [pc, #8]	; (8000b40 <Get_DebugHandle+0x10>)
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bc80      	pop	{r7}
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	200008f0 	.word	0x200008f0

08000b44 <Get_TerminalQueueHandle>:

osMessageQId Get_TerminalQueueHandle(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  return xQueue1Handle;;
 8000b48:	4b02      	ldr	r3, [pc, #8]	; (8000b54 <Get_TerminalQueueHandle+0x10>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc80      	pop	{r7}
 8000b52:	4770      	bx	lr
 8000b54:	20000a24 	.word	0x20000a24

08000b58 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a04      	ldr	r2, [pc, #16]	; (8000b78 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d101      	bne.n	8000b6e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b6a:	f000 fb6f 	bl	800124c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40012c00 	.word	0x40012c00

08000b7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b80:	b672      	cpsid	i
}
 8000b82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b84:	e7fe      	b.n	8000b84 <Error_Handler+0x8>

08000b86 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8000b86:	b480      	push	{r7}
 8000b88:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000b8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000b92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000b96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000b9e:	bf00      	nop
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bc80      	pop	{r7}
 8000ba4:	4770      	bx	lr

08000ba6 <LL_AHB2_GRP1_EnableClock>:
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	b085      	sub	sp, #20
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000bae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bb4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000bbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bca:	68fb      	ldr	r3, [r7, #12]
}
 8000bcc:	bf00      	nop
 8000bce:	3714      	adds	r7, #20
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bc80      	pop	{r7}
 8000bd4:	4770      	bx	lr

08000bd6 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	b085      	sub	sp, #20
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000bde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000be2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000be4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	4313      	orrs	r3, r2
 8000bec:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000bee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bf2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
}
 8000bfc:	bf00      	nop
 8000bfe:	3714      	adds	r7, #20
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bc80      	pop	{r7}
 8000c04:	4770      	bx	lr

08000c06 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM3

  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000c06:	b480      	push	{r7}
 8000c08:	b085      	sub	sp, #20
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000c0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c12:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000c14:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000c1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c22:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4013      	ands	r3, r2
 8000c28:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c2a:	68fb      	ldr	r3, [r7, #12]
}
 8000c2c:	bf00      	nop
 8000c2e:	3714      	adds	r7, #20
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bc80      	pop	{r7}
 8000c34:	4770      	bx	lr

08000c36 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c36:	b480      	push	{r7}
 8000c38:	b085      	sub	sp, #20
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000c3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c42:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000c44:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000c4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c52:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	4013      	ands	r3, r2
 8000c58:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
}
 8000c5c:	bf00      	nop
 8000c5e:	3714      	adds	r7, #20
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bc80      	pop	{r7}
 8000c64:	4770      	bx	lr

08000c66 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c66:	b580      	push	{r7, lr}
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	210f      	movs	r1, #15
 8000c6e:	f06f 0001 	mvn.w	r0, #1
 8000c72:	f000 fdd0 	bl	8001816 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
	...

08000c7c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b088      	sub	sp, #32
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c84:	f107 030c 	add.w	r3, r7, #12
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a0c      	ldr	r2, [pc, #48]	; (8000ccc <HAL_ADC_MspInit+0x50>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d112      	bne.n	8000cc4 <HAL_ADC_MspInit+0x48>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000c9e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ca2:	f7ff ffc8 	bl	8000c36 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca6:	2002      	movs	r0, #2
 8000ca8:	f7ff ff7d 	bl	8000ba6 <LL_AHB2_GRP1_EnableClock>
    /**ADC GPIO Configuration
    PB3     ------> ADC_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000cac:	2308      	movs	r3, #8
 8000cae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb8:	f107 030c 	add.w	r3, r7, #12
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4804      	ldr	r0, [pc, #16]	; (8000cd0 <HAL_ADC_MspInit+0x54>)
 8000cc0:	f000 fe8e 	bl	80019e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }

}
 8000cc4:	bf00      	nop
 8000cc6:	3720      	adds	r7, #32
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40012400 	.word	0x40012400
 8000cd0:	48000400 	.word	0x48000400

08000cd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b096      	sub	sp, #88	; 0x58
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cdc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cec:	f107 030c 	add.w	r3, r7, #12
 8000cf0:	2238      	movs	r2, #56	; 0x38
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f008 f99a 	bl	800902e <memset>
  if(huart->Instance==LPUART1)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	4a30      	ldr	r2, [pc, #192]	; (8000dc0 <HAL_UART_MspInit+0xec>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d124      	bne.n	8000d4e <HAL_UART_MspInit+0x7a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000d04:	2320      	movs	r3, #32
 8000d06:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d0c:	f107 030c 	add.w	r3, r7, #12
 8000d10:	4618      	mov	r0, r3
 8000d12:	f002 f9e9 	bl	80030e8 <HAL_RCCEx_PeriphCLKConfig>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d1c:	f7ff ff2e 	bl	8000b7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000d20:	2001      	movs	r0, #1
 8000d22:	f7ff ff70 	bl	8000c06 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d26:	2004      	movs	r0, #4
 8000d28:	f7ff ff3d 	bl	8000ba6 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d30:	2312      	movs	r3, #18
 8000d32:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d34:	2301      	movs	r3, #1
 8000d36:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000d3c:	2308      	movs	r3, #8
 8000d3e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d40:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000d44:	4619      	mov	r1, r3
 8000d46:	481f      	ldr	r0, [pc, #124]	; (8000dc4 <HAL_UART_MspInit+0xf0>)
 8000d48:	f000 fe4a 	bl	80019e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d4c:	e033      	b.n	8000db6 <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART2)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a1d      	ldr	r2, [pc, #116]	; (8000dc8 <HAL_UART_MspInit+0xf4>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d12e      	bne.n	8000db6 <HAL_UART_MspInit+0xe2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d5c:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8000d60:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d62:	f107 030c 	add.w	r3, r7, #12
 8000d66:	4618      	mov	r0, r3
 8000d68:	f002 f9be 	bl	80030e8 <HAL_RCCEx_PeriphCLKConfig>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <HAL_UART_MspInit+0xa2>
      Error_Handler();
 8000d72:	f7ff ff03 	bl	8000b7c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d76:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000d7a:	f7ff ff2c 	bl	8000bd6 <LL_APB1_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7e:	2001      	movs	r0, #1
 8000d80:	f7ff ff11 	bl	8000ba6 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_2;
 8000d84:	230c      	movs	r3, #12
 8000d86:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d90:	2300      	movs	r3, #0
 8000d92:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d94:	2307      	movs	r3, #7
 8000d96:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d98:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da2:	f000 fe1d 	bl	80019e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000da6:	2200      	movs	r2, #0
 8000da8:	2105      	movs	r1, #5
 8000daa:	2025      	movs	r0, #37	; 0x25
 8000dac:	f000 fd33 	bl	8001816 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000db0:	2025      	movs	r0, #37	; 0x25
 8000db2:	f000 fd4a 	bl	800184a <HAL_NVIC_EnableIRQ>
}
 8000db6:	bf00      	nop
 8000db8:	3758      	adds	r7, #88	; 0x58
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40008000 	.word	0x40008000
 8000dc4:	48000800 	.word	0x48000800
 8000dc8:	40004400 	.word	0x40004400

08000dcc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b090      	sub	sp, #64	; 0x40
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dd4:	f107 0308 	add.w	r3, r7, #8
 8000dd8:	2238      	movs	r2, #56	; 0x38
 8000dda:	2100      	movs	r1, #0
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f008 f926 	bl	800902e <memset>
  if(hrtc->Instance==RTC)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a0e      	ldr	r2, [pc, #56]	; (8000e20 <HAL_RTC_MspInit+0x54>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d115      	bne.n	8000e18 <HAL_RTC_MspInit+0x4c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000dec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000df0:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000df2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000df6:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000df8:	f107 0308 	add.w	r3, r7, #8
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f002 f973 	bl	80030e8 <HAL_RCCEx_PeriphCLKConfig>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000e08:	f7ff feb8 	bl	8000b7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000e0c:	f7ff febb 	bl	8000b86 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000e10:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000e14:	f7ff fedf 	bl	8000bd6 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000e18:	bf00      	nop
 8000e1a:	3740      	adds	r7, #64	; 0x40
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40002800 	.word	0x40002800

08000e24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b096      	sub	sp, #88	; 0x58
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
 8000e36:	609a      	str	r2, [r3, #8]
 8000e38:	60da      	str	r2, [r3, #12]
 8000e3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e3c:	f107 030c 	add.w	r3, r7, #12
 8000e40:	2238      	movs	r2, #56	; 0x38
 8000e42:	2100      	movs	r1, #0
 8000e44:	4618      	mov	r0, r3
 8000e46:	f008 f8f2 	bl	800902e <memset>
  if(hspi->Instance==SPI2)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a21      	ldr	r2, [pc, #132]	; (8000ed4 <HAL_SPI_MspInit+0xb0>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d13b      	bne.n	8000ecc <HAL_SPI_MspInit+0xa8>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S2;
 8000e54:	2310      	movs	r3, #16
 8000e56:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2s2ClockSelection = RCC_I2S2CLKSOURCE_HSI;
 8000e58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e5c:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e5e:	f107 030c 	add.w	r3, r7, #12
 8000e62:	4618      	mov	r0, r3
 8000e64:	f002 f940 	bl	80030e8 <HAL_RCCEx_PeriphCLKConfig>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8000e6e:	f7ff fe85 	bl	8000b7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e72:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000e76:	f7ff feae 	bl	8000bd6 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e7a:	2002      	movs	r0, #2
 8000e7c:	f7ff fe93 	bl	8000ba6 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e80:	2001      	movs	r0, #1
 8000e82:	f7ff fe90 	bl	8000ba6 <LL_AHB2_GRP1_EnableClock>
    /**SPI2 GPIO Configuration
    PB14     ------> SPI2_MISO
    PA10     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13;
 8000e86:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000e8a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e94:	2300      	movs	r3, #0
 8000e96:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e98:	2305      	movs	r3, #5
 8000e9a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	480d      	ldr	r0, [pc, #52]	; (8000ed8 <HAL_SPI_MspInit+0xb4>)
 8000ea4:	f000 fd9c 	bl	80019e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000ea8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eac:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000eba:	2305      	movs	r3, #5
 8000ebc:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ebe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec8:	f000 fd8a 	bl	80019e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000ecc:	bf00      	nop
 8000ece:	3758      	adds	r7, #88	; 0x58
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40003800 	.word	0x40003800
 8000ed8:	48000400 	.word	0x48000400

08000edc <LL_APB2_GRP1_EnableClock>:
{
 8000edc:	b480      	push	{r7}
 8000ede:	b085      	sub	sp, #20
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000ee4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ee8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000eea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000ef4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ef8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4013      	ands	r3, r2
 8000efe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f00:	68fb      	ldr	r3, [r7, #12]
}
 8000f02:	bf00      	nop
 8000f04:	3714      	adds	r7, #20
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bc80      	pop	{r7}
 8000f0a:	4770      	bx	lr

08000f0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08c      	sub	sp, #48	; 0x30
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000f22:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000f26:	f7ff ffd9 	bl	8000edc <LL_APB2_GRP1_EnableClock>

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f2a:	f107 0208 	add.w	r2, r7, #8
 8000f2e:	f107 030c 	add.w	r3, r7, #12
 8000f32:	4611      	mov	r1, r2
 8000f34:	4618      	mov	r0, r3
 8000f36:	f001 fef3 	bl	8002d20 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000f3a:	f001 fedf 	bl	8002cfc <HAL_RCC_GetPCLK2Freq>
 8000f3e:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f42:	4a21      	ldr	r2, [pc, #132]	; (8000fc8 <HAL_InitTick+0xbc>)
 8000f44:	fba2 2303 	umull	r2, r3, r2, r3
 8000f48:	0c9b      	lsrs	r3, r3, #18
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000f4e:	4b1f      	ldr	r3, [pc, #124]	; (8000fcc <HAL_InitTick+0xc0>)
 8000f50:	4a1f      	ldr	r2, [pc, #124]	; (8000fd0 <HAL_InitTick+0xc4>)
 8000f52:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000f54:	4b1d      	ldr	r3, [pc, #116]	; (8000fcc <HAL_InitTick+0xc0>)
 8000f56:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f5a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000f5c:	4a1b      	ldr	r2, [pc, #108]	; (8000fcc <HAL_InitTick+0xc0>)
 8000f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f60:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000f62:	4b1a      	ldr	r3, [pc, #104]	; (8000fcc <HAL_InitTick+0xc0>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f68:	4b18      	ldr	r3, [pc, #96]	; (8000fcc <HAL_InitTick+0xc0>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8000f6e:	4817      	ldr	r0, [pc, #92]	; (8000fcc <HAL_InitTick+0xc0>)
 8000f70:	f002 fe05 	bl	8003b7e <HAL_TIM_Base_Init>
 8000f74:	4603      	mov	r3, r0
 8000f76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000f7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d11b      	bne.n	8000fba <HAL_InitTick+0xae>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000f82:	4812      	ldr	r0, [pc, #72]	; (8000fcc <HAL_InitTick+0xc0>)
 8000f84:	f002 fe5c 	bl	8003c40 <HAL_TIM_Base_Start_IT>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000f8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d111      	bne.n	8000fba <HAL_InitTick+0xae>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000f96:	2018      	movs	r0, #24
 8000f98:	f000 fc57 	bl	800184a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2b0f      	cmp	r3, #15
 8000fa0:	d808      	bhi.n	8000fb4 <HAL_InitTick+0xa8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority, 0U);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	6879      	ldr	r1, [r7, #4]
 8000fa6:	2018      	movs	r0, #24
 8000fa8:	f000 fc35 	bl	8001816 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fac:	4a09      	ldr	r2, [pc, #36]	; (8000fd4 <HAL_InitTick+0xc8>)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6013      	str	r3, [r2, #0]
 8000fb2:	e002      	b.n	8000fba <HAL_InitTick+0xae>
      }
      else
      {
        status = HAL_ERROR;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000fba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3730      	adds	r7, #48	; 0x30
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	431bde83 	.word	0x431bde83
 8000fcc:	20000a28 	.word	0x20000a28
 8000fd0:	40012c00 	.word	0x40012c00
 8000fd4:	20000004 	.word	0x20000004

08000fd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fdc:	e7fe      	b.n	8000fdc <NMI_Handler+0x4>

08000fde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fde:	b480      	push	{r7}
 8000fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fe2:	e7fe      	b.n	8000fe2 <HardFault_Handler+0x4>

08000fe4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe8:	e7fe      	b.n	8000fe8 <MemManage_Handler+0x4>

08000fea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fee:	e7fe      	b.n	8000fee <BusFault_Handler+0x4>

08000ff0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ff4:	e7fe      	b.n	8000ff4 <UsageFault_Handler+0x4>

08000ff6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bc80      	pop	{r7}
 8001000:	4770      	bx	lr
	...

08001004 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 Update Interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001008:	4802      	ldr	r0, [pc, #8]	; (8001014 <TIM1_UP_IRQHandler+0x10>)
 800100a:	f002 fe65 	bl	8003cd8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	20000a28 	.word	0x20000a28

08001018 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800101c:	4802      	ldr	r0, [pc, #8]	; (8001028 <USART2_IRQHandler+0x10>)
 800101e:	f003 f9b7 	bl	8004390 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	200008f0 	.word	0x200008f0

0800102c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  return 1;
 8001030:	2301      	movs	r3, #1
}
 8001032:	4618      	mov	r0, r3
 8001034:	46bd      	mov	sp, r7
 8001036:	bc80      	pop	{r7}
 8001038:	4770      	bx	lr

0800103a <_kill>:

int _kill(int pid, int sig)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b082      	sub	sp, #8
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
 8001042:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001044:	f007 fec2 	bl	8008dcc <__errno>
 8001048:	4603      	mov	r3, r0
 800104a:	2216      	movs	r2, #22
 800104c:	601a      	str	r2, [r3, #0]
  return -1;
 800104e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001052:	4618      	mov	r0, r3
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <_exit>:

void _exit (int status)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001062:	f04f 31ff 	mov.w	r1, #4294967295
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f7ff ffe7 	bl	800103a <_kill>
  while (1) {}    /* Make sure we hang here */
 800106c:	e7fe      	b.n	800106c <_exit+0x12>

0800106e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b086      	sub	sp, #24
 8001072:	af00      	add	r7, sp, #0
 8001074:	60f8      	str	r0, [r7, #12]
 8001076:	60b9      	str	r1, [r7, #8]
 8001078:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800107a:	2300      	movs	r3, #0
 800107c:	617b      	str	r3, [r7, #20]
 800107e:	e00a      	b.n	8001096 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001080:	f3af 8000 	nop.w
 8001084:	4601      	mov	r1, r0
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	1c5a      	adds	r2, r3, #1
 800108a:	60ba      	str	r2, [r7, #8]
 800108c:	b2ca      	uxtb	r2, r1
 800108e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	3301      	adds	r3, #1
 8001094:	617b      	str	r3, [r7, #20]
 8001096:	697a      	ldr	r2, [r7, #20]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	429a      	cmp	r2, r3
 800109c:	dbf0      	blt.n	8001080 <_read+0x12>
  }

  return len;
 800109e:	687b      	ldr	r3, [r7, #4]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3718      	adds	r7, #24
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b086      	sub	sp, #24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]
 80010b8:	e009      	b.n	80010ce <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	1c5a      	adds	r2, r3, #1
 80010be:	60ba      	str	r2, [r7, #8]
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	3301      	adds	r3, #1
 80010cc:	617b      	str	r3, [r7, #20]
 80010ce:	697a      	ldr	r2, [r7, #20]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	429a      	cmp	r2, r3
 80010d4:	dbf1      	blt.n	80010ba <_write+0x12>
  }
  return len;
 80010d6:	687b      	ldr	r3, [r7, #4]
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3718      	adds	r7, #24
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <_close>:

int _close(int file)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bc80      	pop	{r7}
 80010f4:	4770      	bx	lr

080010f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010f6:	b480      	push	{r7}
 80010f8:	b083      	sub	sp, #12
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
 80010fe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001106:	605a      	str	r2, [r3, #4]
  return 0;
 8001108:	2300      	movs	r3, #0
}
 800110a:	4618      	mov	r0, r3
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr

08001114 <_isatty>:

int _isatty(int file)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800111c:	2301      	movs	r3, #1
}
 800111e:	4618      	mov	r0, r3
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr

08001128 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001128:	b480      	push	{r7}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	3714      	adds	r7, #20
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr

08001140 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001148:	4a14      	ldr	r2, [pc, #80]	; (800119c <_sbrk+0x5c>)
 800114a:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <_sbrk+0x60>)
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001154:	4b13      	ldr	r3, [pc, #76]	; (80011a4 <_sbrk+0x64>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d102      	bne.n	8001162 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800115c:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <_sbrk+0x64>)
 800115e:	4a12      	ldr	r2, [pc, #72]	; (80011a8 <_sbrk+0x68>)
 8001160:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001162:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <_sbrk+0x64>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4413      	add	r3, r2
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	429a      	cmp	r2, r3
 800116e:	d207      	bcs.n	8001180 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001170:	f007 fe2c 	bl	8008dcc <__errno>
 8001174:	4603      	mov	r3, r0
 8001176:	220c      	movs	r2, #12
 8001178:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800117a:	f04f 33ff 	mov.w	r3, #4294967295
 800117e:	e009      	b.n	8001194 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001180:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <_sbrk+0x64>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001186:	4b07      	ldr	r3, [pc, #28]	; (80011a4 <_sbrk+0x64>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4413      	add	r3, r2
 800118e:	4a05      	ldr	r2, [pc, #20]	; (80011a4 <_sbrk+0x64>)
 8001190:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001192:	68fb      	ldr	r3, [r7, #12]
}
 8001194:	4618      	mov	r0, r3
 8001196:	3718      	adds	r7, #24
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20010000 	.word	0x20010000
 80011a0:	00000400 	.word	0x00000400
 80011a4:	20000a74 	.word	0x20000a74
 80011a8:	20001a08 	.word	0x20001a08

080011ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bc80      	pop	{r7}
 80011b6:	4770      	bx	lr

080011b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011b8:	480d      	ldr	r0, [pc, #52]	; (80011f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011ba:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80011bc:	f7ff fff6 	bl	80011ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011c0:	480c      	ldr	r0, [pc, #48]	; (80011f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80011c2:	490d      	ldr	r1, [pc, #52]	; (80011f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011c4:	4a0d      	ldr	r2, [pc, #52]	; (80011fc <LoopForever+0xe>)
  movs r3, #0
 80011c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011c8:	e002      	b.n	80011d0 <LoopCopyDataInit>

080011ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ce:	3304      	adds	r3, #4

080011d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011d4:	d3f9      	bcc.n	80011ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011d6:	4a0a      	ldr	r2, [pc, #40]	; (8001200 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011d8:	4c0a      	ldr	r4, [pc, #40]	; (8001204 <LoopForever+0x16>)
  movs r3, #0
 80011da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011dc:	e001      	b.n	80011e2 <LoopFillZerobss>

080011de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011e0:	3204      	adds	r2, #4

080011e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011e4:	d3fb      	bcc.n	80011de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80011e6:	f007 feed 	bl	8008fc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011ea:	f7ff fa09 	bl	8000600 <main>

080011ee <LoopForever>:

LoopForever:
    b LoopForever
 80011ee:	e7fe      	b.n	80011ee <LoopForever>
  ldr   r0, =_estack
 80011f0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80011f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011f8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80011fc:	0800acbc 	.word	0x0800acbc
  ldr r2, =_sbss
 8001200:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001204:	20001a04 	.word	0x20001a04

08001208 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001208:	e7fe      	b.n	8001208 <ADC_IRQHandler>
	...

0800120c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001212:	2300      	movs	r3, #0
 8001214:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001216:	2003      	movs	r0, #3
 8001218:	f000 faf2 	bl	8001800 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800121c:	f001 fd48 	bl	8002cb0 <HAL_RCC_GetHCLKFreq>
 8001220:	4603      	mov	r3, r0
 8001222:	4a09      	ldr	r2, [pc, #36]	; (8001248 <HAL_Init+0x3c>)
 8001224:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001226:	200f      	movs	r0, #15
 8001228:	f7ff fe70 	bl	8000f0c <HAL_InitTick>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d002      	beq.n	8001238 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	71fb      	strb	r3, [r7, #7]
 8001236:	e001      	b.n	800123c <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001238:	f7ff fd15 	bl	8000c66 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800123c:	79fb      	ldrb	r3, [r7, #7]
}
 800123e:	4618      	mov	r0, r3
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20000000 	.word	0x20000000

0800124c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001250:	4b05      	ldr	r3, [pc, #20]	; (8001268 <HAL_IncTick+0x1c>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	461a      	mov	r2, r3
 8001256:	4b05      	ldr	r3, [pc, #20]	; (800126c <HAL_IncTick+0x20>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4413      	add	r3, r2
 800125c:	4a03      	ldr	r2, [pc, #12]	; (800126c <HAL_IncTick+0x20>)
 800125e:	6013      	str	r3, [r2, #0]
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	bc80      	pop	{r7}
 8001266:	4770      	bx	lr
 8001268:	20000008 	.word	0x20000008
 800126c:	20000a78 	.word	0x20000a78

08001270 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  return uwTick;
 8001274:	4b02      	ldr	r3, [pc, #8]	; (8001280 <HAL_GetTick+0x10>)
 8001276:	681b      	ldr	r3, [r3, #0]
}
 8001278:	4618      	mov	r0, r3
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr
 8001280:	20000a78 	.word	0x20000a78

08001284 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	695a      	ldr	r2, [r3, #20]
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	f003 0304 	and.w	r3, r3, #4
 800129a:	2107      	movs	r1, #7
 800129c:	fa01 f303 	lsl.w	r3, r1, r3
 80012a0:	43db      	mvns	r3, r3
 80012a2:	401a      	ands	r2, r3
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	f003 0304 	and.w	r3, r3, #4
 80012aa:	6879      	ldr	r1, [r7, #4]
 80012ac:	fa01 f303 	lsl.w	r3, r1, r3
 80012b0:	431a      	orrs	r2, r3
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80012b6:	bf00      	nop
 80012b8:	3714      	adds	r7, #20
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr

080012c0 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	695a      	ldr	r2, [r3, #20]
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	f003 0304 	and.w	r3, r3, #4
 80012d4:	2107      	movs	r1, #7
 80012d6:	fa01 f303 	lsl.w	r3, r1, r3
 80012da:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80012e2:	fa22 f303 	lsr.w	r3, r2, r3
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bc80      	pop	{r7}
 80012ee:	4770      	bx	lr

080012f0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001300:	f023 0317 	bic.w	r3, r3, #23
 8001304:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	bc80      	pop	{r7}
 8001314:	4770      	bx	lr

08001316 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001316:	b480      	push	{r7}
 8001318:	b083      	sub	sp, #12
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001326:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800132a:	d101      	bne.n	8001330 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800132c:	2301      	movs	r3, #1
 800132e:	e000      	b.n	8001332 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	bc80      	pop	{r7}
 800133a:	4770      	bx	lr

0800133c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	f003 0301 	and.w	r3, r3, #1
 800134c:	2b01      	cmp	r3, #1
 800134e:	d101      	bne.n	8001354 <LL_ADC_IsEnabled+0x18>
 8001350:	2301      	movs	r3, #1
 8001352:	e000      	b.n	8001356 <LL_ADC_IsEnabled+0x1a>
 8001354:	2300      	movs	r3, #0
}
 8001356:	4618      	mov	r0, r3
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	bc80      	pop	{r7}
 800135e:	4770      	bx	lr

08001360 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	f003 0304 	and.w	r3, r3, #4
 8001370:	2b04      	cmp	r3, #4
 8001372:	d101      	bne.n	8001378 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001374:	2301      	movs	r3, #1
 8001376:	e000      	b.n	800137a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr

08001384 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b088      	sub	sp, #32
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800138c:	2300      	movs	r3, #0
 800138e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8001390:	2300      	movs	r3, #0
 8001392:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001398:	2300      	movs	r3, #0
 800139a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d101      	bne.n	80013a6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	e17e      	b.n	80016a4 <HAL_ADC_Init+0x320>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	691b      	ldr	r3, [r3, #16]
 80013aa:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d109      	bne.n	80013c8 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f7ff fc61 	bl	8000c7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2200      	movs	r2, #0
 80013be:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2200      	movs	r2, #0
 80013c4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff ffa2 	bl	8001316 <LL_ADC_IsInternalRegulatorEnabled>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d115      	bne.n	8001404 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff ff87 	bl	80012f0 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80013e2:	4b9e      	ldr	r3, [pc, #632]	; (800165c <HAL_ADC_Init+0x2d8>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	099b      	lsrs	r3, r3, #6
 80013e8:	4a9d      	ldr	r2, [pc, #628]	; (8001660 <HAL_ADC_Init+0x2dc>)
 80013ea:	fba2 2303 	umull	r2, r3, r2, r3
 80013ee:	099b      	lsrs	r3, r3, #6
 80013f0:	3301      	adds	r3, #1
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80013f6:	e002      	b.n	80013fe <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	3b01      	subs	r3, #1
 80013fc:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d1f9      	bne.n	80013f8 <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff ff84 	bl	8001316 <LL_ADC_IsInternalRegulatorEnabled>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d10d      	bne.n	8001430 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001418:	f043 0210 	orr.w	r2, r3, #16
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001424:	f043 0201 	orr.w	r2, r3, #1
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff ff93 	bl	8001360 <LL_ADC_REG_IsConversionOngoing>
 800143a:	6138      	str	r0, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001440:	f003 0310 	and.w	r3, r3, #16
 8001444:	2b00      	cmp	r3, #0
 8001446:	f040 8124 	bne.w	8001692 <HAL_ADC_Init+0x30e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	2b00      	cmp	r3, #0
 800144e:	f040 8120 	bne.w	8001692 <HAL_ADC_Init+0x30e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001456:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800145a:	f043 0202 	orr.w	r2, r3, #2
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff ff68 	bl	800133c <LL_ADC_IsEnabled>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	f040 80a7 	bne.w	80015c2 <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	7e1b      	ldrb	r3, [r3, #24]
 800147c:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800147e:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	7e5b      	ldrb	r3, [r3, #25]
 8001484:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001486:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	7e9b      	ldrb	r3, [r3, #26]
 800148c:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800148e:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001494:	2a00      	cmp	r2, #0
 8001496:	d002      	beq.n	800149e <HAL_ADC_Init+0x11a>
 8001498:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800149c:	e000      	b.n	80014a0 <HAL_ADC_Init+0x11c>
 800149e:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80014a0:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80014a6:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	691b      	ldr	r3, [r3, #16]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	da04      	bge.n	80014ba <HAL_ADC_Init+0x136>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	691b      	ldr	r3, [r3, #16]
 80014b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80014b8:	e001      	b.n	80014be <HAL_ADC_Init+0x13a>
 80014ba:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 80014be:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80014c6:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80014c8:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d114      	bne.n	8001504 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	7e9b      	ldrb	r3, [r3, #26]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d104      	bne.n	80014ec <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014e8:	61bb      	str	r3, [r7, #24]
 80014ea:	e00b      	b.n	8001504 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014f0:	f043 0220 	orr.w	r2, r3, #32
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014fc:	f043 0201 	orr.w	r2, r3, #1
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001508:	2b00      	cmp	r3, #0
 800150a:	d009      	beq.n	8001520 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001510:	f403 72e0 	and.w	r2, r3, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001518:	4313      	orrs	r3, r2
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	4313      	orrs	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	f423 33fe 	bic.w	r3, r3, #130048	; 0x1fc00
 800152a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	6812      	ldr	r2, [r2, #0]
 8001532:	69b9      	ldr	r1, [r7, #24]
 8001534:	430b      	orrs	r3, r1
 8001536:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001544:	4313      	orrs	r3, r2
 8001546:	697a      	ldr	r2, [r7, #20]
 8001548:	4313      	orrs	r3, r2
 800154a:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001552:	2b01      	cmp	r3, #1
 8001554:	d111      	bne.n	800157a <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001562:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001568:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800156e:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	4313      	orrs	r3, r2
 8001574:	f043 0301 	orr.w	r3, r3, #1
 8001578:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	691a      	ldr	r2, [r3, #16]
 8001580:	4b38      	ldr	r3, [pc, #224]	; (8001664 <HAL_ADC_Init+0x2e0>)
 8001582:	4013      	ands	r3, r2
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	6812      	ldr	r2, [r2, #0]
 8001588:	6979      	ldr	r1, [r7, #20]
 800158a:	430b      	orrs	r3, r1
 800158c:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8001596:	d014      	beq.n	80015c2 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800159c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015a0:	d00f      	beq.n	80015c2 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80015a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80015aa:	d00a      	beq.n	80015c2 <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 80015ac:	4b2e      	ldr	r3, [pc, #184]	; (8001668 <HAL_ADC_Init+0x2e4>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f423 1270 	bic.w	r2, r3, #3932160	; 0x3c0000
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80015bc:	492a      	ldr	r1, [pc, #168]	; (8001668 <HAL_ADC_Init+0x2e4>)
 80015be:	4313      	orrs	r3, r2
 80015c0:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6818      	ldr	r0, [r3, #0]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015ca:	461a      	mov	r2, r3
 80015cc:	2100      	movs	r1, #0
 80015ce:	f7ff fe59 	bl	8001284 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6818      	ldr	r0, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015da:	461a      	mov	r2, r3
 80015dc:	4923      	ldr	r1, [pc, #140]	; (800166c <HAL_ADC_Init+0x2e8>)
 80015de:	f7ff fe51 	bl	8001284 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	691b      	ldr	r3, [r3, #16]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d108      	bne.n	80015fc <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f062 020f 	orn	r2, r2, #15
 80015f8:	629a      	str	r2, [r3, #40]	; 0x28
 80015fa:	e017      	b.n	800162c <HAL_ADC_Init+0x2a8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	691b      	ldr	r3, [r3, #16]
 8001600:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001604:	d112      	bne.n	800162c <HAL_ADC_Init+0x2a8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	69db      	ldr	r3, [r3, #28]
 8001610:	3b01      	subs	r3, #1
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	f003 031c 	and.w	r3, r3, #28
 8001618:	f06f 020f 	mvn.w	r2, #15
 800161c:	fa02 f103 	lsl.w	r1, r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	430a      	orrs	r2, r1
 800162a:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2100      	movs	r1, #0
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff fe44 	bl	80012c0 <LL_ADC_GetSamplingTimeCommonChannels>
 8001638:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800163e:	429a      	cmp	r2, r3
 8001640:	d116      	bne.n	8001670 <HAL_ADC_Init+0x2ec>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	2200      	movs	r2, #0
 8001646:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800164c:	f023 0303 	bic.w	r3, r3, #3
 8001650:	f043 0201 	orr.w	r2, r3, #1
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001658:	e023      	b.n	80016a2 <HAL_ADC_Init+0x31e>
 800165a:	bf00      	nop
 800165c:	20000000 	.word	0x20000000
 8001660:	053e2d63 	.word	0x053e2d63
 8001664:	1ffffc02 	.word	0x1ffffc02
 8001668:	40012708 	.word	0x40012708
 800166c:	03ffff04 	.word	0x03ffff04
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001674:	f023 0312 	bic.w	r3, r3, #18
 8001678:	f043 0210 	orr.w	r2, r3, #16
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001684:	f043 0201 	orr.w	r2, r3, #1
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001690:	e007      	b.n	80016a2 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001696:	f043 0210 	orr.w	r2, r3, #16
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 80016a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3720      	adds	r7, #32
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}

080016ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	f003 0307 	and.w	r3, r3, #7
 80016ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016bc:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <__NVIC_SetPriorityGrouping+0x44>)
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016c2:	68ba      	ldr	r2, [r7, #8]
 80016c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016c8:	4013      	ands	r3, r2
 80016ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016de:	4a04      	ldr	r2, [pc, #16]	; (80016f0 <__NVIC_SetPriorityGrouping+0x44>)
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	60d3      	str	r3, [r2, #12]
}
 80016e4:	bf00      	nop
 80016e6:	3714      	adds	r7, #20
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bc80      	pop	{r7}
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	e000ed00 	.word	0xe000ed00

080016f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016f8:	4b04      	ldr	r3, [pc, #16]	; (800170c <__NVIC_GetPriorityGrouping+0x18>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	0a1b      	lsrs	r3, r3, #8
 80016fe:	f003 0307 	and.w	r3, r3, #7
}
 8001702:	4618      	mov	r0, r3
 8001704:	46bd      	mov	sp, r7
 8001706:	bc80      	pop	{r7}
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	e000ed00 	.word	0xe000ed00

08001710 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800171a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171e:	2b00      	cmp	r3, #0
 8001720:	db0b      	blt.n	800173a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001722:	79fb      	ldrb	r3, [r7, #7]
 8001724:	f003 021f 	and.w	r2, r3, #31
 8001728:	4906      	ldr	r1, [pc, #24]	; (8001744 <__NVIC_EnableIRQ+0x34>)
 800172a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172e:	095b      	lsrs	r3, r3, #5
 8001730:	2001      	movs	r0, #1
 8001732:	fa00 f202 	lsl.w	r2, r0, r2
 8001736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800173a:	bf00      	nop
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	bc80      	pop	{r7}
 8001742:	4770      	bx	lr
 8001744:	e000e100 	.word	0xe000e100

08001748 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	6039      	str	r1, [r7, #0]
 8001752:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001758:	2b00      	cmp	r3, #0
 800175a:	db0a      	blt.n	8001772 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	b2da      	uxtb	r2, r3
 8001760:	490c      	ldr	r1, [pc, #48]	; (8001794 <__NVIC_SetPriority+0x4c>)
 8001762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001766:	0112      	lsls	r2, r2, #4
 8001768:	b2d2      	uxtb	r2, r2
 800176a:	440b      	add	r3, r1
 800176c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001770:	e00a      	b.n	8001788 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	b2da      	uxtb	r2, r3
 8001776:	4908      	ldr	r1, [pc, #32]	; (8001798 <__NVIC_SetPriority+0x50>)
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	f003 030f 	and.w	r3, r3, #15
 800177e:	3b04      	subs	r3, #4
 8001780:	0112      	lsls	r2, r2, #4
 8001782:	b2d2      	uxtb	r2, r2
 8001784:	440b      	add	r3, r1
 8001786:	761a      	strb	r2, [r3, #24]
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	bc80      	pop	{r7}
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	e000e100 	.word	0xe000e100
 8001798:	e000ed00 	.word	0xe000ed00

0800179c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800179c:	b480      	push	{r7}
 800179e:	b089      	sub	sp, #36	; 0x24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f003 0307 	and.w	r3, r3, #7
 80017ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	f1c3 0307 	rsb	r3, r3, #7
 80017b6:	2b04      	cmp	r3, #4
 80017b8:	bf28      	it	cs
 80017ba:	2304      	movcs	r3, #4
 80017bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	3304      	adds	r3, #4
 80017c2:	2b06      	cmp	r3, #6
 80017c4:	d902      	bls.n	80017cc <NVIC_EncodePriority+0x30>
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	3b03      	subs	r3, #3
 80017ca:	e000      	b.n	80017ce <NVIC_EncodePriority+0x32>
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d0:	f04f 32ff 	mov.w	r2, #4294967295
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	43da      	mvns	r2, r3
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	401a      	ands	r2, r3
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017e4:	f04f 31ff 	mov.w	r1, #4294967295
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	fa01 f303 	lsl.w	r3, r1, r3
 80017ee:	43d9      	mvns	r1, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f4:	4313      	orrs	r3, r2
         );
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3724      	adds	r7, #36	; 0x24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bc80      	pop	{r7}
 80017fe:	4770      	bx	lr

08001800 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f7ff ff4f 	bl	80016ac <__NVIC_SetPriorityGrouping>
}
 800180e:	bf00      	nop
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	b086      	sub	sp, #24
 800181a:	af00      	add	r7, sp, #0
 800181c:	4603      	mov	r3, r0
 800181e:	60b9      	str	r1, [r7, #8]
 8001820:	607a      	str	r2, [r7, #4]
 8001822:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001824:	f7ff ff66 	bl	80016f4 <__NVIC_GetPriorityGrouping>
 8001828:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	68b9      	ldr	r1, [r7, #8]
 800182e:	6978      	ldr	r0, [r7, #20]
 8001830:	f7ff ffb4 	bl	800179c <NVIC_EncodePriority>
 8001834:	4602      	mov	r2, r0
 8001836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800183a:	4611      	mov	r1, r2
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff ff83 	bl	8001748 <__NVIC_SetPriority>
}
 8001842:	bf00      	nop
 8001844:	3718      	adds	r7, #24
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b082      	sub	sp, #8
 800184e:	af00      	add	r7, sp, #0
 8001850:	4603      	mov	r3, r0
 8001852:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff ff59 	bl	8001710 <__NVIC_EnableIRQ>
}
 800185e:	bf00      	nop
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001866:	b480      	push	{r7}
 8001868:	b083      	sub	sp, #12
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d101      	bne.n	8001878 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e04f      	b.n	8001918 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800187e:	b2db      	uxtb	r3, r3
 8001880:	2b02      	cmp	r3, #2
 8001882:	d008      	beq.n	8001896 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2204      	movs	r2, #4
 8001888:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001892:	2301      	movs	r3, #1
 8001894:	e040      	b.n	8001918 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f022 020e 	bic.w	r2, r2, #14
 80018a4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018b4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f022 0201 	bic.w	r2, r2, #1
 80018c4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ca:	f003 021c 	and.w	r2, r3, #28
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	2101      	movs	r1, #1
 80018d4:	fa01 f202 	lsl.w	r2, r1, r2
 80018d8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018de:	687a      	ldr	r2, [r7, #4]
 80018e0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80018e2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d00c      	beq.n	8001906 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018fa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001904:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2201      	movs	r2, #1
 800190a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8001916:	2300      	movs	r3, #0
}
 8001918:	4618      	mov	r0, r3
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	bc80      	pop	{r7}
 8001920:	4770      	bx	lr

08001922 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b084      	sub	sp, #16
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800192a:	2300      	movs	r3, #0
 800192c:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001934:	b2db      	uxtb	r3, r3
 8001936:	2b02      	cmp	r3, #2
 8001938:	d005      	beq.n	8001946 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2204      	movs	r2, #4
 800193e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	73fb      	strb	r3, [r7, #15]
 8001944:	e047      	b.n	80019d6 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f022 020e 	bic.w	r2, r2, #14
 8001954:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f022 0201 	bic.w	r2, r2, #1
 8001964:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001970:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001974:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197a:	f003 021c 	and.w	r2, r3, #28
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	2101      	movs	r1, #1
 8001984:	fa01 f202 	lsl.w	r2, r1, r2
 8001988:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001992:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001998:	2b00      	cmp	r3, #0
 800199a:	d00c      	beq.n	80019b6 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019aa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80019b4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2201      	movs	r2, #1
 80019ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d003      	beq.n	80019d6 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	4798      	blx	r3
    }
  }
  return status;
 80019d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3710      	adds	r7, #16
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b087      	sub	sp, #28
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019ea:	2300      	movs	r3, #0
 80019ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019ee:	e140      	b.n	8001c72 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	2101      	movs	r1, #1
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	fa01 f303 	lsl.w	r3, r1, r3
 80019fc:	4013      	ands	r3, r2
 80019fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	f000 8132 	beq.w	8001c6c <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f003 0303 	and.w	r3, r3, #3
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d005      	beq.n	8001a20 <HAL_GPIO_Init+0x40>
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f003 0303 	and.w	r3, r3, #3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d130      	bne.n	8001a82 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	2203      	movs	r2, #3
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	43db      	mvns	r3, r3
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	4013      	ands	r3, r2
 8001a36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	68da      	ldr	r2, [r3, #12]
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a56:	2201      	movs	r2, #1
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	43db      	mvns	r3, r3
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	4013      	ands	r3, r2
 8001a64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	091b      	lsrs	r3, r3, #4
 8001a6c:	f003 0201 	and.w	r2, r3, #1
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f003 0303 	and.w	r3, r3, #3
 8001a8a:	2b03      	cmp	r3, #3
 8001a8c:	d017      	beq.n	8001abe <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	2203      	movs	r2, #3
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	43db      	mvns	r3, r3
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	689a      	ldr	r2, [r3, #8]
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f003 0303 	and.w	r3, r3, #3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d123      	bne.n	8001b12 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	08da      	lsrs	r2, r3, #3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	3208      	adds	r2, #8
 8001ad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ad6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	220f      	movs	r2, #15
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	693a      	ldr	r2, [r7, #16]
 8001aea:	4013      	ands	r3, r2
 8001aec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	691a      	ldr	r2, [r3, #16]
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	f003 0307 	and.w	r3, r3, #7
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	08da      	lsrs	r2, r3, #3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	3208      	adds	r2, #8
 8001b0c:	6939      	ldr	r1, [r7, #16]
 8001b0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	2203      	movs	r2, #3
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	43db      	mvns	r3, r3
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	4013      	ands	r3, r2
 8001b28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f003 0203 	and.w	r2, r3, #3
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	f000 808c 	beq.w	8001c6c <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001b54:	4a4e      	ldr	r2, [pc, #312]	; (8001c90 <HAL_GPIO_Init+0x2b0>)
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	089b      	lsrs	r3, r3, #2
 8001b5a:	3302      	adds	r3, #2
 8001b5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b60:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	f003 0303 	and.w	r3, r3, #3
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	2207      	movs	r2, #7
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	43db      	mvns	r3, r3
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	4013      	ands	r3, r2
 8001b76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b7e:	d00d      	beq.n	8001b9c <HAL_GPIO_Init+0x1bc>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	4a44      	ldr	r2, [pc, #272]	; (8001c94 <HAL_GPIO_Init+0x2b4>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d007      	beq.n	8001b98 <HAL_GPIO_Init+0x1b8>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	4a43      	ldr	r2, [pc, #268]	; (8001c98 <HAL_GPIO_Init+0x2b8>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d101      	bne.n	8001b94 <HAL_GPIO_Init+0x1b4>
 8001b90:	2302      	movs	r3, #2
 8001b92:	e004      	b.n	8001b9e <HAL_GPIO_Init+0x1be>
 8001b94:	2307      	movs	r3, #7
 8001b96:	e002      	b.n	8001b9e <HAL_GPIO_Init+0x1be>
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e000      	b.n	8001b9e <HAL_GPIO_Init+0x1be>
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	697a      	ldr	r2, [r7, #20]
 8001ba0:	f002 0203 	and.w	r2, r2, #3
 8001ba4:	0092      	lsls	r2, r2, #2
 8001ba6:	4093      	lsls	r3, r2
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001bae:	4938      	ldr	r1, [pc, #224]	; (8001c90 <HAL_GPIO_Init+0x2b0>)
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	089b      	lsrs	r3, r3, #2
 8001bb4:	3302      	adds	r3, #2
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001bbc:	4b37      	ldr	r3, [pc, #220]	; (8001c9c <HAL_GPIO_Init+0x2bc>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	693a      	ldr	r2, [r7, #16]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d003      	beq.n	8001be0 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001be0:	4a2e      	ldr	r2, [pc, #184]	; (8001c9c <HAL_GPIO_Init+0x2bc>)
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001be6:	4b2d      	ldr	r3, [pc, #180]	; (8001c9c <HAL_GPIO_Init+0x2bc>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	693a      	ldr	r2, [r7, #16]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d003      	beq.n	8001c0a <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	4313      	orrs	r3, r2
 8001c08:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c0a:	4a24      	ldr	r2, [pc, #144]	; (8001c9c <HAL_GPIO_Init+0x2bc>)
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001c10:	4b22      	ldr	r3, [pc, #136]	; (8001c9c <HAL_GPIO_Init+0x2bc>)
 8001c12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001c16:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d003      	beq.n	8001c36 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8001c36:	4a19      	ldr	r2, [pc, #100]	; (8001c9c <HAL_GPIO_Init+0x2bc>)
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8001c3e:	4b17      	ldr	r3, [pc, #92]	; (8001c9c <HAL_GPIO_Init+0x2bc>)
 8001c40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c44:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d003      	beq.n	8001c64 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001c64:	4a0d      	ldr	r2, [pc, #52]	; (8001c9c <HAL_GPIO_Init+0x2bc>)
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	3301      	adds	r3, #1
 8001c70:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	fa22 f303 	lsr.w	r3, r2, r3
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f47f aeb7 	bne.w	80019f0 <HAL_GPIO_Init+0x10>
  }
}
 8001c82:	bf00      	nop
 8001c84:	bf00      	nop
 8001c86:	371c      	adds	r7, #28
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bc80      	pop	{r7}
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	40010000 	.word	0x40010000
 8001c94:	48000400 	.word	0x48000400
 8001c98:	48000800 	.word	0x48000800
 8001c9c:	58000800 	.word	0x58000800

08001ca0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	460b      	mov	r3, r1
 8001caa:	807b      	strh	r3, [r7, #2]
 8001cac:	4613      	mov	r3, r2
 8001cae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cb0:	787b      	ldrb	r3, [r7, #1]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d003      	beq.n	8001cbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001cb6:	887a      	ldrh	r2, [r7, #2]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001cbc:	e002      	b.n	8001cc4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001cbe:	887a      	ldrh	r2, [r7, #2]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bc80      	pop	{r7}
 8001ccc:	4770      	bx	lr
	...

08001cd0 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cd4:	4b04      	ldr	r3, [pc, #16]	; (8001ce8 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a03      	ldr	r2, [pc, #12]	; (8001ce8 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001cda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cde:	6013      	str	r3, [r2, #0]
}
 8001ce0:	bf00      	nop
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bc80      	pop	{r7}
 8001ce6:	4770      	bx	lr
 8001ce8:	58000400 	.word	0x58000400

08001cec <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001cf0:	4b03      	ldr	r3, [pc, #12]	; (8001d00 <HAL_PWREx_GetVoltageRange+0x14>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bc80      	pop	{r7}
 8001cfe:	4770      	bx	lr
 8001d00:	58000400 	.word	0x58000400

08001d04 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8001d08:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d14:	d101      	bne.n	8001d1a <LL_PWR_IsEnabledBkUpAccess+0x16>
 8001d16:	2301      	movs	r3, #1
 8001d18:	e000      	b.n	8001d1c <LL_PWR_IsEnabledBkUpAccess+0x18>
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bc80      	pop	{r7}
 8001d22:	4770      	bx	lr
 8001d24:	58000400 	.word	0x58000400

08001d28 <LL_RCC_HSE_EnableTcxo>:
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001d2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d36:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d3a:	6013      	str	r3, [r2, #0]
}
 8001d3c:	bf00      	nop
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr

08001d44 <LL_RCC_HSE_DisableTcxo>:
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001d48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d52:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001d56:	6013      	str	r3, [r2, #0]
}
 8001d58:	bf00      	nop
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bc80      	pop	{r7}
 8001d5e:	4770      	bx	lr

08001d60 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001d64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d72:	d101      	bne.n	8001d78 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001d74:	2301      	movs	r3, #1
 8001d76:	e000      	b.n	8001d7a <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bc80      	pop	{r7}
 8001d80:	4770      	bx	lr

08001d82 <LL_RCC_HSE_Enable>:
{
 8001d82:	b480      	push	{r7}
 8001d84:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001d86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001d90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d94:	6013      	str	r3, [r2, #0]
}
 8001d96:	bf00      	nop
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bc80      	pop	{r7}
 8001d9c:	4770      	bx	lr

08001d9e <LL_RCC_HSE_Disable>:
{
 8001d9e:	b480      	push	{r7}
 8001da0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8001da2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001dac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001db0:	6013      	str	r3, [r2, #0]
}
 8001db2:	bf00      	nop
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bc80      	pop	{r7}
 8001db8:	4770      	bx	lr

08001dba <LL_RCC_HSE_IsReady>:
{
 8001dba:	b480      	push	{r7}
 8001dbc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001dbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001dcc:	d101      	bne.n	8001dd2 <LL_RCC_HSE_IsReady+0x18>
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e000      	b.n	8001dd4 <LL_RCC_HSE_IsReady+0x1a>
 8001dd2:	2300      	movs	r3, #0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bc80      	pop	{r7}
 8001dda:	4770      	bx	lr

08001ddc <LL_RCC_HSI_Enable>:
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001de0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001dea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dee:	6013      	str	r3, [r2, #0]
}
 8001df0:	bf00      	nop
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bc80      	pop	{r7}
 8001df6:	4770      	bx	lr

08001df8 <LL_RCC_HSI_Disable>:
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001dfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e0a:	6013      	str	r3, [r2, #0]
}
 8001e0c:	bf00      	nop
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bc80      	pop	{r7}
 8001e12:	4770      	bx	lr

08001e14 <LL_RCC_HSI_IsReady>:
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8001e18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e26:	d101      	bne.n	8001e2c <LL_RCC_HSI_IsReady+0x18>
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e000      	b.n	8001e2e <LL_RCC_HSI_IsReady+0x1a>
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bc80      	pop	{r7}
 8001e34:	4770      	bx	lr

08001e36 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001e36:	b480      	push	{r7}
 8001e38:	b083      	sub	sp, #12
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001e3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	061b      	lsls	r3, r3, #24
 8001e4c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001e50:	4313      	orrs	r3, r2
 8001e52:	604b      	str	r3, [r1, #4]
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bc80      	pop	{r7}
 8001e5c:	4770      	bx	lr

08001e5e <LL_RCC_LSE_IsReady>:
{
 8001e5e:	b480      	push	{r7}
 8001e60:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001e62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d101      	bne.n	8001e76 <LL_RCC_LSE_IsReady+0x18>
 8001e72:	2301      	movs	r3, #1
 8001e74:	e000      	b.n	8001e78 <LL_RCC_LSE_IsReady+0x1a>
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bc80      	pop	{r7}
 8001e7e:	4770      	bx	lr

08001e80 <LL_RCC_LSI_Enable>:
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001e84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e90:	f043 0301 	orr.w	r3, r3, #1
 8001e94:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001e98:	bf00      	nop
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bc80      	pop	{r7}
 8001e9e:	4770      	bx	lr

08001ea0 <LL_RCC_LSI_Disable>:
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001ea4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ea8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001eb0:	f023 0301 	bic.w	r3, r3, #1
 8001eb4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001eb8:	bf00      	nop
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bc80      	pop	{r7}
 8001ebe:	4770      	bx	lr

08001ec0 <LL_RCC_LSI_IsReady>:
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8001ec4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ec8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d101      	bne.n	8001ed8 <LL_RCC_LSI_IsReady+0x18>
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e000      	b.n	8001eda <LL_RCC_LSI_IsReady+0x1a>
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bc80      	pop	{r7}
 8001ee0:	4770      	bx	lr

08001ee2 <LL_RCC_MSI_Enable>:
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001ee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ef0:	f043 0301 	orr.w	r3, r3, #1
 8001ef4:	6013      	str	r3, [r2, #0]
}
 8001ef6:	bf00      	nop
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bc80      	pop	{r7}
 8001efc:	4770      	bx	lr

08001efe <LL_RCC_MSI_Disable>:
{
 8001efe:	b480      	push	{r7}
 8001f00:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001f02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f0c:	f023 0301 	bic.w	r3, r3, #1
 8001f10:	6013      	str	r3, [r2, #0]
}
 8001f12:	bf00      	nop
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bc80      	pop	{r7}
 8001f18:	4770      	bx	lr

08001f1a <LL_RCC_MSI_IsReady>:
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001f1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0302 	and.w	r3, r3, #2
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d101      	bne.n	8001f30 <LL_RCC_MSI_IsReady+0x16>
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e000      	b.n	8001f32 <LL_RCC_MSI_IsReady+0x18>
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bc80      	pop	{r7}
 8001f38:	4770      	bx	lr

08001f3a <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8001f3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0308 	and.w	r3, r3, #8
 8001f48:	2b08      	cmp	r3, #8
 8001f4a:	d101      	bne.n	8001f50 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e000      	b.n	8001f52 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bc80      	pop	{r7}
 8001f58:	4770      	bx	lr

08001f5a <LL_RCC_MSI_GetRange>:
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8001f5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bc80      	pop	{r7}
 8001f6e:	4770      	bx	lr

08001f70 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001f74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f7c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bc80      	pop	{r7}
 8001f86:	4770      	bx	lr

08001f88 <LL_RCC_MSI_SetCalibTrimming>:
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001f90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	021b      	lsls	r3, r3, #8
 8001f9e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	604b      	str	r3, [r1, #4]
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bc80      	pop	{r7}
 8001fae:	4770      	bx	lr

08001fb0 <LL_RCC_SetSysClkSource>:
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001fb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f023 0203 	bic.w	r2, r3, #3
 8001fc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	608b      	str	r3, [r1, #8]
}
 8001fcc:	bf00      	nop
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bc80      	pop	{r7}
 8001fd4:	4770      	bx	lr

08001fd6 <LL_RCC_GetSysClkSource>:
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001fda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f003 030c 	and.w	r3, r3, #12
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bc80      	pop	{r7}
 8001fea:	4770      	bx	lr

08001fec <LL_RCC_SetAHBPrescaler>:
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001ff4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ffe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4313      	orrs	r3, r2
 8002006:	608b      	str	r3, [r1, #8]
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	bc80      	pop	{r7}
 8002010:	4770      	bx	lr

08002012 <LL_RCC_SetAHB3Prescaler>:
{
 8002012:	b480      	push	{r7}
 8002014:	b083      	sub	sp, #12
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800201a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800201e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002022:	f023 020f 	bic.w	r2, r3, #15
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	091b      	lsrs	r3, r3, #4
 800202a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800202e:	4313      	orrs	r3, r2
 8002030:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	bc80      	pop	{r7}
 800203c:	4770      	bx	lr

0800203e <LL_RCC_SetAPB1Prescaler>:
{
 800203e:	b480      	push	{r7}
 8002040:	b083      	sub	sp, #12
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002046:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002050:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4313      	orrs	r3, r2
 8002058:	608b      	str	r3, [r1, #8]
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	bc80      	pop	{r7}
 8002062:	4770      	bx	lr

08002064 <LL_RCC_SetAPB2Prescaler>:
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800206c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002076:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4313      	orrs	r3, r2
 800207e:	608b      	str	r3, [r1, #8]
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	bc80      	pop	{r7}
 8002088:	4770      	bx	lr

0800208a <LL_RCC_GetAHBPrescaler>:
{
 800208a:	b480      	push	{r7}
 800208c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800208e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002098:	4618      	mov	r0, r3
 800209a:	46bd      	mov	sp, r7
 800209c:	bc80      	pop	{r7}
 800209e:	4770      	bx	lr

080020a0 <LL_RCC_GetAHB3Prescaler>:
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80020a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020a8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80020ac:	011b      	lsls	r3, r3, #4
 80020ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bc80      	pop	{r7}
 80020b8:	4770      	bx	lr

080020ba <LL_RCC_GetAPB1Prescaler>:
{
 80020ba:	b480      	push	{r7}
 80020bc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80020be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bc80      	pop	{r7}
 80020ce:	4770      	bx	lr

080020d0 <LL_RCC_GetAPB2Prescaler>:
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80020d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80020de:	4618      	mov	r0, r3
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bc80      	pop	{r7}
 80020e4:	4770      	bx	lr

080020e6 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80020e6:	b480      	push	{r7}
 80020e8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80020ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020f4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020f8:	6013      	str	r3, [r2, #0]
}
 80020fa:	bf00      	nop
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bc80      	pop	{r7}
 8002100:	4770      	bx	lr

08002102 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8002102:	b480      	push	{r7}
 8002104:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002106:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002110:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002114:	6013      	str	r3, [r2, #0]
}
 8002116:	bf00      	nop
 8002118:	46bd      	mov	sp, r7
 800211a:	bc80      	pop	{r7}
 800211c:	4770      	bx	lr

0800211e <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800211e:	b480      	push	{r7}
 8002120:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8002122:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800212c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002130:	d101      	bne.n	8002136 <LL_RCC_PLL_IsReady+0x18>
 8002132:	2301      	movs	r3, #1
 8002134:	e000      	b.n	8002138 <LL_RCC_PLL_IsReady+0x1a>
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	46bd      	mov	sp, r7
 800213c:	bc80      	pop	{r7}
 800213e:	4770      	bx	lr

08002140 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002144:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	0a1b      	lsrs	r3, r3, #8
 800214c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002150:	4618      	mov	r0, r3
 8002152:	46bd      	mov	sp, r7
 8002154:	bc80      	pop	{r7}
 8002156:	4770      	bx	lr

08002158 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800215c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002166:	4618      	mov	r0, r3
 8002168:	46bd      	mov	sp, r7
 800216a:	bc80      	pop	{r7}
 800216c:	4770      	bx	lr

0800216e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800216e:	b480      	push	{r7}
 8002170:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002172:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800217c:	4618      	mov	r0, r3
 800217e:	46bd      	mov	sp, r7
 8002180:	bc80      	pop	{r7}
 8002182:	4770      	bx	lr

08002184 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002188:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	f003 0303 	and.w	r3, r3, #3
}
 8002192:	4618      	mov	r0, r3
 8002194:	46bd      	mov	sp, r7
 8002196:	bc80      	pop	{r7}
 8002198:	4770      	bx	lr

0800219a <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 800219a:	b480      	push	{r7}
 800219c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800219e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021ac:	d101      	bne.n	80021b2 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80021ae:	2301      	movs	r3, #1
 80021b0:	e000      	b.n	80021b4 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80021b2:	2300      	movs	r3, #0
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bc80      	pop	{r7}
 80021ba:	4770      	bx	lr

080021bc <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80021c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021c4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80021c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021d0:	d101      	bne.n	80021d6 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80021d2:	2301      	movs	r3, #1
 80021d4:	e000      	b.n	80021d8 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80021d6:	2300      	movs	r3, #0
}
 80021d8:	4618      	mov	r0, r3
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc80      	pop	{r7}
 80021de:	4770      	bx	lr

080021e0 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80021e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80021f2:	d101      	bne.n	80021f8 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80021f4:	2301      	movs	r3, #1
 80021f6:	e000      	b.n	80021fa <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bc80      	pop	{r7}
 8002200:	4770      	bx	lr

08002202 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002202:	b480      	push	{r7}
 8002204:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002206:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002210:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002214:	d101      	bne.n	800221a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002216:	2301      	movs	r3, #1
 8002218:	e000      	b.n	800221c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	46bd      	mov	sp, r7
 8002220:	bc80      	pop	{r7}
 8002222:	4770      	bx	lr

08002224 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b088      	sub	sp, #32
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d101      	bne.n	8002236 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e36f      	b.n	8002916 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002236:	f7ff fece 	bl	8001fd6 <LL_RCC_GetSysClkSource>
 800223a:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800223c:	f7ff ffa2 	bl	8002184 <LL_RCC_PLL_GetMainSource>
 8002240:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0320 	and.w	r3, r3, #32
 800224a:	2b00      	cmp	r3, #0
 800224c:	f000 80c4 	beq.w	80023d8 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d005      	beq.n	8002262 <HAL_RCC_OscConfig+0x3e>
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	2b0c      	cmp	r3, #12
 800225a:	d176      	bne.n	800234a <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	2b01      	cmp	r3, #1
 8002260:	d173      	bne.n	800234a <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a1b      	ldr	r3, [r3, #32]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d101      	bne.n	800226e <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e353      	b.n	8002916 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002272:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0308 	and.w	r3, r3, #8
 800227c:	2b00      	cmp	r3, #0
 800227e:	d005      	beq.n	800228c <HAL_RCC_OscConfig+0x68>
 8002280:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800228a:	e006      	b.n	800229a <HAL_RCC_OscConfig+0x76>
 800228c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002290:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002294:	091b      	lsrs	r3, r3, #4
 8002296:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800229a:	4293      	cmp	r3, r2
 800229c:	d222      	bcs.n	80022e4 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022a2:	4618      	mov	r0, r3
 80022a4:	f000 fd7a 	bl	8002d9c <RCC_SetFlashLatencyFromMSIRange>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e331      	b.n	8002916 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022bc:	f043 0308 	orr.w	r3, r3, #8
 80022c0:	6013      	str	r3, [r2, #0]
 80022c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022d4:	4313      	orrs	r3, r2
 80022d6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022dc:	4618      	mov	r0, r3
 80022de:	f7ff fe53 	bl	8001f88 <LL_RCC_MSI_SetCalibTrimming>
 80022e2:	e021      	b.n	8002328 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022ee:	f043 0308 	orr.w	r3, r3, #8
 80022f2:	6013      	str	r3, [r2, #0]
 80022f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002302:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002306:	4313      	orrs	r3, r2
 8002308:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230e:	4618      	mov	r0, r3
 8002310:	f7ff fe3a 	bl	8001f88 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002318:	4618      	mov	r0, r3
 800231a:	f000 fd3f 	bl	8002d9c <RCC_SetFlashLatencyFromMSIRange>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e2f6      	b.n	8002916 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002328:	f000 fcc2 	bl	8002cb0 <HAL_RCC_GetHCLKFreq>
 800232c:	4603      	mov	r3, r0
 800232e:	4aa7      	ldr	r2, [pc, #668]	; (80025cc <HAL_RCC_OscConfig+0x3a8>)
 8002330:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8002332:	4ba7      	ldr	r3, [pc, #668]	; (80025d0 <HAL_RCC_OscConfig+0x3ac>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4618      	mov	r0, r3
 8002338:	f7fe fde8 	bl	8000f0c <HAL_InitTick>
 800233c:	4603      	mov	r3, r0
 800233e:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002340:	7cfb      	ldrb	r3, [r7, #19]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d047      	beq.n	80023d6 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8002346:	7cfb      	ldrb	r3, [r7, #19]
 8002348:	e2e5      	b.n	8002916 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a1b      	ldr	r3, [r3, #32]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d02c      	beq.n	80023ac <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002352:	f7ff fdc6 	bl	8001ee2 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002356:	f7fe ff8b 	bl	8001270 <HAL_GetTick>
 800235a:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800235c:	e008      	b.n	8002370 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800235e:	f7fe ff87 	bl	8001270 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e2d2      	b.n	8002916 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002370:	f7ff fdd3 	bl	8001f1a <LL_RCC_MSI_IsReady>
 8002374:	4603      	mov	r3, r0
 8002376:	2b00      	cmp	r3, #0
 8002378:	d0f1      	beq.n	800235e <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800237a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002384:	f043 0308 	orr.w	r3, r3, #8
 8002388:	6013      	str	r3, [r2, #0]
 800238a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002398:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800239c:	4313      	orrs	r3, r2
 800239e:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7ff fdef 	bl	8001f88 <LL_RCC_MSI_SetCalibTrimming>
 80023aa:	e015      	b.n	80023d8 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80023ac:	f7ff fda7 	bl	8001efe <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023b0:	f7fe ff5e 	bl	8001270 <HAL_GetTick>
 80023b4:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80023b6:	e008      	b.n	80023ca <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023b8:	f7fe ff5a 	bl	8001270 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e2a5      	b.n	8002916 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 80023ca:	f7ff fda6 	bl	8001f1a <LL_RCC_MSI_IsReady>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d1f1      	bne.n	80023b8 <HAL_RCC_OscConfig+0x194>
 80023d4:	e000      	b.n	80023d8 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80023d6:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0301 	and.w	r3, r3, #1
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d058      	beq.n	8002496 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	2b08      	cmp	r3, #8
 80023e8:	d005      	beq.n	80023f6 <HAL_RCC_OscConfig+0x1d2>
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	2b0c      	cmp	r3, #12
 80023ee:	d108      	bne.n	8002402 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	2b03      	cmp	r3, #3
 80023f4:	d105      	bne.n	8002402 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d14b      	bne.n	8002496 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e289      	b.n	8002916 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002402:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002414:	4313      	orrs	r3, r2
 8002416:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002420:	d102      	bne.n	8002428 <HAL_RCC_OscConfig+0x204>
 8002422:	f7ff fcae 	bl	8001d82 <LL_RCC_HSE_Enable>
 8002426:	e00d      	b.n	8002444 <HAL_RCC_OscConfig+0x220>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002430:	d104      	bne.n	800243c <HAL_RCC_OscConfig+0x218>
 8002432:	f7ff fc79 	bl	8001d28 <LL_RCC_HSE_EnableTcxo>
 8002436:	f7ff fca4 	bl	8001d82 <LL_RCC_HSE_Enable>
 800243a:	e003      	b.n	8002444 <HAL_RCC_OscConfig+0x220>
 800243c:	f7ff fcaf 	bl	8001d9e <LL_RCC_HSE_Disable>
 8002440:	f7ff fc80 	bl	8001d44 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d012      	beq.n	8002472 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800244c:	f7fe ff10 	bl	8001270 <HAL_GetTick>
 8002450:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002452:	e008      	b.n	8002466 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002454:	f7fe ff0c 	bl	8001270 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b64      	cmp	r3, #100	; 0x64
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e257      	b.n	8002916 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002466:	f7ff fca8 	bl	8001dba <LL_RCC_HSE_IsReady>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d0f1      	beq.n	8002454 <HAL_RCC_OscConfig+0x230>
 8002470:	e011      	b.n	8002496 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002472:	f7fe fefd 	bl	8001270 <HAL_GetTick>
 8002476:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002478:	e008      	b.n	800248c <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800247a:	f7fe fef9 	bl	8001270 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	2b64      	cmp	r3, #100	; 0x64
 8002486:	d901      	bls.n	800248c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8002488:	2303      	movs	r3, #3
 800248a:	e244      	b.n	8002916 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 800248c:	f7ff fc95 	bl	8001dba <LL_RCC_HSE_IsReady>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1f1      	bne.n	800247a <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d046      	beq.n	8002530 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	2b04      	cmp	r3, #4
 80024a6:	d005      	beq.n	80024b4 <HAL_RCC_OscConfig+0x290>
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	2b0c      	cmp	r3, #12
 80024ac:	d10e      	bne.n	80024cc <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d10b      	bne.n	80024cc <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d101      	bne.n	80024c0 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	e22a      	b.n	8002916 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	695b      	ldr	r3, [r3, #20]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff fcb6 	bl	8001e36 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80024ca:	e031      	b.n	8002530 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d019      	beq.n	8002508 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024d4:	f7ff fc82 	bl	8001ddc <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d8:	f7fe feca 	bl	8001270 <HAL_GetTick>
 80024dc:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024e0:	f7fe fec6 	bl	8001270 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e211      	b.n	8002916 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 80024f2:	f7ff fc8f 	bl	8001e14 <LL_RCC_HSI_IsReady>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d0f1      	beq.n	80024e0 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	695b      	ldr	r3, [r3, #20]
 8002500:	4618      	mov	r0, r3
 8002502:	f7ff fc98 	bl	8001e36 <LL_RCC_HSI_SetCalibTrimming>
 8002506:	e013      	b.n	8002530 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002508:	f7ff fc76 	bl	8001df8 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800250c:	f7fe feb0 	bl	8001270 <HAL_GetTick>
 8002510:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002512:	e008      	b.n	8002526 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002514:	f7fe feac 	bl	8001270 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b02      	cmp	r3, #2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e1f7      	b.n	8002916 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002526:	f7ff fc75 	bl	8001e14 <LL_RCC_HSI_IsReady>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1f1      	bne.n	8002514 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0308 	and.w	r3, r3, #8
 8002538:	2b00      	cmp	r3, #0
 800253a:	d06e      	beq.n	800261a <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d056      	beq.n	80025f2 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8002544:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002548:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800254c:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	69da      	ldr	r2, [r3, #28]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f003 0310 	and.w	r3, r3, #16
 8002558:	429a      	cmp	r2, r3
 800255a:	d031      	beq.n	80025c0 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d006      	beq.n	8002574 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 800256c:	2b00      	cmp	r3, #0
 800256e:	d101      	bne.n	8002574 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e1d0      	b.n	8002916 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	2b00      	cmp	r3, #0
 800257c:	d013      	beq.n	80025a6 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 800257e:	f7ff fc8f 	bl	8001ea0 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002582:	f7fe fe75 	bl	8001270 <HAL_GetTick>
 8002586:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8002588:	e008      	b.n	800259c <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800258a:	f7fe fe71 	bl	8001270 <HAL_GetTick>
 800258e:	4602      	mov	r2, r0
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	2b11      	cmp	r3, #17
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e1bc      	b.n	8002916 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 800259c:	f7ff fc90 	bl	8001ec0 <LL_RCC_LSI_IsReady>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1f1      	bne.n	800258a <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80025a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025ae:	f023 0210 	bic.w	r2, r3, #16
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	69db      	ldr	r3, [r3, #28]
 80025b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80025ba:	4313      	orrs	r3, r2
 80025bc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025c0:	f7ff fc5e 	bl	8001e80 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025c4:	f7fe fe54 	bl	8001270 <HAL_GetTick>
 80025c8:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80025ca:	e00c      	b.n	80025e6 <HAL_RCC_OscConfig+0x3c2>
 80025cc:	20000000 	.word	0x20000000
 80025d0:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025d4:	f7fe fe4c 	bl	8001270 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b11      	cmp	r3, #17
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e197      	b.n	8002916 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 80025e6:	f7ff fc6b 	bl	8001ec0 <LL_RCC_LSI_IsReady>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d0f1      	beq.n	80025d4 <HAL_RCC_OscConfig+0x3b0>
 80025f0:	e013      	b.n	800261a <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025f2:	f7ff fc55 	bl	8001ea0 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025f6:	f7fe fe3b 	bl	8001270 <HAL_GetTick>
 80025fa:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80025fc:	e008      	b.n	8002610 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025fe:	f7fe fe37 	bl	8001270 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b11      	cmp	r3, #17
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e182      	b.n	8002916 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8002610:	f7ff fc56 	bl	8001ec0 <LL_RCC_LSI_IsReady>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d1f1      	bne.n	80025fe <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0304 	and.w	r3, r3, #4
 8002622:	2b00      	cmp	r3, #0
 8002624:	f000 80d8 	beq.w	80027d8 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002628:	f7ff fb6c 	bl	8001d04 <LL_PWR_IsEnabledBkUpAccess>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d113      	bne.n	800265a <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002632:	f7ff fb4d 	bl	8001cd0 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002636:	f7fe fe1b 	bl	8001270 <HAL_GetTick>
 800263a:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800263c:	e008      	b.n	8002650 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800263e:	f7fe fe17 	bl	8001270 <HAL_GetTick>
 8002642:	4602      	mov	r2, r0
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	1ad3      	subs	r3, r2, r3
 8002648:	2b02      	cmp	r3, #2
 800264a:	d901      	bls.n	8002650 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 800264c:	2303      	movs	r3, #3
 800264e:	e162      	b.n	8002916 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002650:	f7ff fb58 	bl	8001d04 <LL_PWR_IsEnabledBkUpAccess>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d0f1      	beq.n	800263e <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d07b      	beq.n	800275a <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	2b85      	cmp	r3, #133	; 0x85
 8002668:	d003      	beq.n	8002672 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	68db      	ldr	r3, [r3, #12]
 800266e:	2b05      	cmp	r3, #5
 8002670:	d109      	bne.n	8002686 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002672:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800267a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800267e:	f043 0304 	orr.w	r3, r3, #4
 8002682:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002686:	f7fe fdf3 	bl	8001270 <HAL_GetTick>
 800268a:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800268c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002694:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002698:	f043 0301 	orr.w	r3, r3, #1
 800269c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80026a0:	e00a      	b.n	80026b8 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026a2:	f7fe fde5 	bl	8001270 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d901      	bls.n	80026b8 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e12e      	b.n	8002916 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 80026b8:	f7ff fbd1 	bl	8001e5e <LL_RCC_LSE_IsReady>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d0ef      	beq.n	80026a2 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	2b81      	cmp	r3, #129	; 0x81
 80026c8:	d003      	beq.n	80026d2 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	2b85      	cmp	r3, #133	; 0x85
 80026d0:	d121      	bne.n	8002716 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d2:	f7fe fdcd 	bl	8001270 <HAL_GetTick>
 80026d6:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80026d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80026ec:	e00a      	b.n	8002704 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ee:	f7fe fdbf 	bl	8001270 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d901      	bls.n	8002704 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e108      	b.n	8002916 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002704:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800270c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002710:	2b00      	cmp	r3, #0
 8002712:	d0ec      	beq.n	80026ee <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002714:	e060      	b.n	80027d8 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002716:	f7fe fdab 	bl	8001270 <HAL_GetTick>
 800271a:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800271c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002724:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002728:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800272c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002730:	e00a      	b.n	8002748 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002732:	f7fe fd9d 	bl	8001270 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002740:	4293      	cmp	r3, r2
 8002742:	d901      	bls.n	8002748 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e0e6      	b.n	8002916 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002748:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800274c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002750:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1ec      	bne.n	8002732 <HAL_RCC_OscConfig+0x50e>
 8002758:	e03e      	b.n	80027d8 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800275a:	f7fe fd89 	bl	8001270 <HAL_GetTick>
 800275e:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002760:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002768:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800276c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002770:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002774:	e00a      	b.n	800278c <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002776:	f7fe fd7b 	bl	8001270 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	f241 3288 	movw	r2, #5000	; 0x1388
 8002784:	4293      	cmp	r3, r2
 8002786:	d901      	bls.n	800278c <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e0c4      	b.n	8002916 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800278c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002794:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1ec      	bne.n	8002776 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800279c:	f7fe fd68 	bl	8001270 <HAL_GetTick>
 80027a0:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80027a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027ae:	f023 0301 	bic.w	r3, r3, #1
 80027b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80027b6:	e00a      	b.n	80027ce <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027b8:	f7fe fd5a 	bl	8001270 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e0a3      	b.n	8002916 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 80027ce:	f7ff fb46 	bl	8001e5e <LL_RCC_LSE_IsReady>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d1ef      	bne.n	80027b8 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f000 8099 	beq.w	8002914 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	2b0c      	cmp	r3, #12
 80027e6:	d06c      	beq.n	80028c2 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d14b      	bne.n	8002888 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027f0:	f7ff fc87 	bl	8002102 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f4:	f7fe fd3c 	bl	8001270 <HAL_GetTick>
 80027f8:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80027fa:	e008      	b.n	800280e <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027fc:	f7fe fd38 	bl	8001270 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	2b0a      	cmp	r3, #10
 8002808:	d901      	bls.n	800280e <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 800280a:	2303      	movs	r3, #3
 800280c:	e083      	b.n	8002916 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800280e:	f7ff fc86 	bl	800211e <LL_RCC_PLL_IsReady>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d1f1      	bne.n	80027fc <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002818:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800281c:	68da      	ldr	r2, [r3, #12]
 800281e:	4b40      	ldr	r3, [pc, #256]	; (8002920 <HAL_RCC_OscConfig+0x6fc>)
 8002820:	4013      	ands	r3, r2
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800282a:	4311      	orrs	r1, r2
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002830:	0212      	lsls	r2, r2, #8
 8002832:	4311      	orrs	r1, r2
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002838:	4311      	orrs	r1, r2
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800283e:	4311      	orrs	r1, r2
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002844:	430a      	orrs	r2, r1
 8002846:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800284a:	4313      	orrs	r3, r2
 800284c:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800284e:	f7ff fc4a 	bl	80020e6 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002852:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800285c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002860:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002862:	f7fe fd05 	bl	8001270 <HAL_GetTick>
 8002866:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8002868:	e008      	b.n	800287c <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800286a:	f7fe fd01 	bl	8001270 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b0a      	cmp	r3, #10
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e04c      	b.n	8002916 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 800287c:	f7ff fc4f 	bl	800211e <LL_RCC_PLL_IsReady>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d0f1      	beq.n	800286a <HAL_RCC_OscConfig+0x646>
 8002886:	e045      	b.n	8002914 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002888:	f7ff fc3b 	bl	8002102 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800288c:	f7fe fcf0 	bl	8001270 <HAL_GetTick>
 8002890:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002894:	f7fe fcec 	bl	8001270 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b0a      	cmp	r3, #10
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e037      	b.n	8002916 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80028a6:	f7ff fc3a 	bl	800211e <LL_RCC_PLL_IsReady>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d1f1      	bne.n	8002894 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80028b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028b4:	68da      	ldr	r2, [r3, #12]
 80028b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028ba:	4b1a      	ldr	r3, [pc, #104]	; (8002924 <HAL_RCC_OscConfig+0x700>)
 80028bc:	4013      	ands	r3, r2
 80028be:	60cb      	str	r3, [r1, #12]
 80028c0:	e028      	b.n	8002914 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d101      	bne.n	80028ce <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e023      	b.n	8002916 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	f003 0203 	and.w	r2, r3, #3
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d115      	bne.n	8002910 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d10e      	bne.n	8002910 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028fc:	021b      	lsls	r3, r3, #8
 80028fe:	429a      	cmp	r2, r3
 8002900:	d106      	bne.n	8002910 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8002902:	69bb      	ldr	r3, [r7, #24]
 8002904:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290c:	429a      	cmp	r2, r3
 800290e:	d001      	beq.n	8002914 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e000      	b.n	8002916 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3720      	adds	r7, #32
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	11c1808c 	.word	0x11c1808c
 8002924:	eefefffc 	.word	0xeefefffc

08002928 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d101      	bne.n	800293c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e10f      	b.n	8002b5c <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800293c:	4b89      	ldr	r3, [pc, #548]	; (8002b64 <HAL_RCC_ClockConfig+0x23c>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0307 	and.w	r3, r3, #7
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	429a      	cmp	r2, r3
 8002948:	d91b      	bls.n	8002982 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800294a:	4b86      	ldr	r3, [pc, #536]	; (8002b64 <HAL_RCC_ClockConfig+0x23c>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f023 0207 	bic.w	r2, r3, #7
 8002952:	4984      	ldr	r1, [pc, #528]	; (8002b64 <HAL_RCC_ClockConfig+0x23c>)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	4313      	orrs	r3, r2
 8002958:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800295a:	f7fe fc89 	bl	8001270 <HAL_GetTick>
 800295e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002960:	e008      	b.n	8002974 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002962:	f7fe fc85 	bl	8001270 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d901      	bls.n	8002974 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e0f3      	b.n	8002b5c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002974:	4b7b      	ldr	r3, [pc, #492]	; (8002b64 <HAL_RCC_ClockConfig+0x23c>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0307 	and.w	r3, r3, #7
 800297c:	683a      	ldr	r2, [r7, #0]
 800297e:	429a      	cmp	r2, r3
 8002980:	d1ef      	bne.n	8002962 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d016      	beq.n	80029bc <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	4618      	mov	r0, r3
 8002994:	f7ff fb2a 	bl	8001fec <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002998:	f7fe fc6a 	bl	8001270 <HAL_GetTick>
 800299c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80029a0:	f7fe fc66 	bl	8001270 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e0d4      	b.n	8002b5c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80029b2:	f7ff fbf2 	bl	800219a <LL_RCC_IsActiveFlag_HPRE>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d0f1      	beq.n	80029a0 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d016      	beq.n	80029f6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	695b      	ldr	r3, [r3, #20]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7ff fb20 	bl	8002012 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80029d2:	f7fe fc4d 	bl	8001270 <HAL_GetTick>
 80029d6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80029d8:	e008      	b.n	80029ec <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80029da:	f7fe fc49 	bl	8001270 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e0b7      	b.n	8002b5c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80029ec:	f7ff fbe6 	bl	80021bc <LL_RCC_IsActiveFlag_SHDHPRE>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d0f1      	beq.n	80029da <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0304 	and.w	r3, r3, #4
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d016      	beq.n	8002a30 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7ff fb19 	bl	800203e <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002a0c:	f7fe fc30 	bl	8001270 <HAL_GetTick>
 8002a10:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002a14:	f7fe fc2c 	bl	8001270 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e09a      	b.n	8002b5c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002a26:	f7ff fbdb 	bl	80021e0 <LL_RCC_IsActiveFlag_PPRE1>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d0f1      	beq.n	8002a14 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0308 	and.w	r3, r3, #8
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d017      	beq.n	8002a6c <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	00db      	lsls	r3, r3, #3
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7ff fb0e 	bl	8002064 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002a48:	f7fe fc12 	bl	8001270 <HAL_GetTick>
 8002a4c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002a4e:	e008      	b.n	8002a62 <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002a50:	f7fe fc0e 	bl	8001270 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e07c      	b.n	8002b5c <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002a62:	f7ff fbce 	bl	8002202 <LL_RCC_IsActiveFlag_PPRE2>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d0f1      	beq.n	8002a50 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0301 	and.w	r3, r3, #1
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d043      	beq.n	8002b00 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d106      	bne.n	8002a8e <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8002a80:	f7ff f99b 	bl	8001dba <LL_RCC_HSE_IsReady>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d11e      	bne.n	8002ac8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e066      	b.n	8002b5c <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	2b03      	cmp	r3, #3
 8002a94:	d106      	bne.n	8002aa4 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002a96:	f7ff fb42 	bl	800211e <LL_RCC_PLL_IsReady>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d113      	bne.n	8002ac8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e05b      	b.n	8002b5c <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d106      	bne.n	8002aba <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8002aac:	f7ff fa35 	bl	8001f1a <LL_RCC_MSI_IsReady>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d108      	bne.n	8002ac8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e050      	b.n	8002b5c <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002aba:	f7ff f9ab 	bl	8001e14 <LL_RCC_HSI_IsReady>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d101      	bne.n	8002ac8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e049      	b.n	8002b5c <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7ff fa6f 	bl	8001fb0 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ad2:	f7fe fbcd 	bl	8001270 <HAL_GetTick>
 8002ad6:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ad8:	e00a      	b.n	8002af0 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ada:	f7fe fbc9 	bl	8001270 <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d901      	bls.n	8002af0 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e035      	b.n	8002b5c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002af0:	f7ff fa71 	bl	8001fd6 <LL_RCC_GetSysClkSource>
 8002af4:	4602      	mov	r2, r0
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d1ec      	bne.n	8002ada <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b00:	4b18      	ldr	r3, [pc, #96]	; (8002b64 <HAL_RCC_ClockConfig+0x23c>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0307 	and.w	r3, r3, #7
 8002b08:	683a      	ldr	r2, [r7, #0]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d21b      	bcs.n	8002b46 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b0e:	4b15      	ldr	r3, [pc, #84]	; (8002b64 <HAL_RCC_ClockConfig+0x23c>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f023 0207 	bic.w	r2, r3, #7
 8002b16:	4913      	ldr	r1, [pc, #76]	; (8002b64 <HAL_RCC_ClockConfig+0x23c>)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b1e:	f7fe fba7 	bl	8001270 <HAL_GetTick>
 8002b22:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b24:	e008      	b.n	8002b38 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002b26:	f7fe fba3 	bl	8001270 <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d901      	bls.n	8002b38 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8002b34:	2303      	movs	r3, #3
 8002b36:	e011      	b.n	8002b5c <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b38:	4b0a      	ldr	r3, [pc, #40]	; (8002b64 <HAL_RCC_ClockConfig+0x23c>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0307 	and.w	r3, r3, #7
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d1ef      	bne.n	8002b26 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002b46:	f000 f8b3 	bl	8002cb0 <HAL_RCC_GetHCLKFreq>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	4a06      	ldr	r2, [pc, #24]	; (8002b68 <HAL_RCC_ClockConfig+0x240>)
 8002b4e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8002b50:	4b06      	ldr	r3, [pc, #24]	; (8002b6c <HAL_RCC_ClockConfig+0x244>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7fe f9d9 	bl	8000f0c <HAL_InitTick>
 8002b5a:	4603      	mov	r3, r0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3710      	adds	r7, #16
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	58004000 	.word	0x58004000
 8002b68:	20000000 	.word	0x20000000
 8002b6c:	20000004 	.word	0x20000004

08002b70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b70:	b590      	push	{r4, r7, lr}
 8002b72:	b087      	sub	sp, #28
 8002b74:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8002b76:	2300      	movs	r3, #0
 8002b78:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b7e:	f7ff fa2a 	bl	8001fd6 <LL_RCC_GetSysClkSource>
 8002b82:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b84:	f7ff fafe 	bl	8002184 <LL_RCC_PLL_GetMainSource>
 8002b88:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d005      	beq.n	8002b9c <HAL_RCC_GetSysClockFreq+0x2c>
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	2b0c      	cmp	r3, #12
 8002b94:	d139      	bne.n	8002c0a <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d136      	bne.n	8002c0a <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002b9c:	f7ff f9cd 	bl	8001f3a <LL_RCC_MSI_IsEnabledRangeSelect>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d115      	bne.n	8002bd2 <HAL_RCC_GetSysClockFreq+0x62>
 8002ba6:	f7ff f9c8 	bl	8001f3a <LL_RCC_MSI_IsEnabledRangeSelect>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d106      	bne.n	8002bbe <HAL_RCC_GetSysClockFreq+0x4e>
 8002bb0:	f7ff f9d3 	bl	8001f5a <LL_RCC_MSI_GetRange>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	0a1b      	lsrs	r3, r3, #8
 8002bb8:	f003 030f 	and.w	r3, r3, #15
 8002bbc:	e005      	b.n	8002bca <HAL_RCC_GetSysClockFreq+0x5a>
 8002bbe:	f7ff f9d7 	bl	8001f70 <LL_RCC_MSI_GetRangeAfterStandby>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	0a1b      	lsrs	r3, r3, #8
 8002bc6:	f003 030f 	and.w	r3, r3, #15
 8002bca:	4a36      	ldr	r2, [pc, #216]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x134>)
 8002bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bd0:	e014      	b.n	8002bfc <HAL_RCC_GetSysClockFreq+0x8c>
 8002bd2:	f7ff f9b2 	bl	8001f3a <LL_RCC_MSI_IsEnabledRangeSelect>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d106      	bne.n	8002bea <HAL_RCC_GetSysClockFreq+0x7a>
 8002bdc:	f7ff f9bd 	bl	8001f5a <LL_RCC_MSI_GetRange>
 8002be0:	4603      	mov	r3, r0
 8002be2:	091b      	lsrs	r3, r3, #4
 8002be4:	f003 030f 	and.w	r3, r3, #15
 8002be8:	e005      	b.n	8002bf6 <HAL_RCC_GetSysClockFreq+0x86>
 8002bea:	f7ff f9c1 	bl	8001f70 <LL_RCC_MSI_GetRangeAfterStandby>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	091b      	lsrs	r3, r3, #4
 8002bf2:	f003 030f 	and.w	r3, r3, #15
 8002bf6:	4a2b      	ldr	r2, [pc, #172]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x134>)
 8002bf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bfc:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d115      	bne.n	8002c30 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002c08:	e012      	b.n	8002c30 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	2b04      	cmp	r3, #4
 8002c0e:	d102      	bne.n	8002c16 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c10:	4b25      	ldr	r3, [pc, #148]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002c12:	617b      	str	r3, [r7, #20]
 8002c14:	e00c      	b.n	8002c30 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	2b08      	cmp	r3, #8
 8002c1a:	d109      	bne.n	8002c30 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002c1c:	f7ff f8a0 	bl	8001d60 <LL_RCC_HSE_IsEnabledDiv2>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d102      	bne.n	8002c2c <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8002c26:	4b20      	ldr	r3, [pc, #128]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002c28:	617b      	str	r3, [r7, #20]
 8002c2a:	e001      	b.n	8002c30 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002c2c:	4b1f      	ldr	r3, [pc, #124]	; (8002cac <HAL_RCC_GetSysClockFreq+0x13c>)
 8002c2e:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c30:	f7ff f9d1 	bl	8001fd6 <LL_RCC_GetSysClkSource>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b0c      	cmp	r3, #12
 8002c38:	d12f      	bne.n	8002c9a <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002c3a:	f7ff faa3 	bl	8002184 <LL_RCC_PLL_GetMainSource>
 8002c3e:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d003      	beq.n	8002c4e <HAL_RCC_GetSysClockFreq+0xde>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2b03      	cmp	r3, #3
 8002c4a:	d003      	beq.n	8002c54 <HAL_RCC_GetSysClockFreq+0xe4>
 8002c4c:	e00d      	b.n	8002c6a <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002c4e:	4b16      	ldr	r3, [pc, #88]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002c50:	60fb      	str	r3, [r7, #12]
        break;
 8002c52:	e00d      	b.n	8002c70 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002c54:	f7ff f884 	bl	8001d60 <LL_RCC_HSE_IsEnabledDiv2>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d102      	bne.n	8002c64 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002c5e:	4b12      	ldr	r3, [pc, #72]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002c60:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8002c62:	e005      	b.n	8002c70 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8002c64:	4b11      	ldr	r3, [pc, #68]	; (8002cac <HAL_RCC_GetSysClockFreq+0x13c>)
 8002c66:	60fb      	str	r3, [r7, #12]
        break;
 8002c68:	e002      	b.n	8002c70 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	60fb      	str	r3, [r7, #12]
        break;
 8002c6e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002c70:	f7ff fa66 	bl	8002140 <LL_RCC_PLL_GetN>
 8002c74:	4602      	mov	r2, r0
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	fb03 f402 	mul.w	r4, r3, r2
 8002c7c:	f7ff fa77 	bl	800216e <LL_RCC_PLL_GetDivider>
 8002c80:	4603      	mov	r3, r0
 8002c82:	091b      	lsrs	r3, r3, #4
 8002c84:	3301      	adds	r3, #1
 8002c86:	fbb4 f4f3 	udiv	r4, r4, r3
 8002c8a:	f7ff fa65 	bl	8002158 <LL_RCC_PLL_GetR>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	0f5b      	lsrs	r3, r3, #29
 8002c92:	3301      	adds	r3, #1
 8002c94:	fbb4 f3f3 	udiv	r3, r4, r3
 8002c98:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8002c9a:	697b      	ldr	r3, [r7, #20]
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	371c      	adds	r7, #28
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd90      	pop	{r4, r7, pc}
 8002ca4:	0800a4bc 	.word	0x0800a4bc
 8002ca8:	00f42400 	.word	0x00f42400
 8002cac:	01e84800 	.word	0x01e84800

08002cb0 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cb0:	b598      	push	{r3, r4, r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002cb4:	f7ff ff5c 	bl	8002b70 <HAL_RCC_GetSysClockFreq>
 8002cb8:	4604      	mov	r4, r0
 8002cba:	f7ff f9e6 	bl	800208a <LL_RCC_GetAHBPrescaler>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	091b      	lsrs	r3, r3, #4
 8002cc2:	f003 030f 	and.w	r3, r3, #15
 8002cc6:	4a03      	ldr	r2, [pc, #12]	; (8002cd4 <HAL_RCC_GetHCLKFreq+0x24>)
 8002cc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ccc:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	bd98      	pop	{r3, r4, r7, pc}
 8002cd4:	0800a45c 	.word	0x0800a45c

08002cd8 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cd8:	b598      	push	{r3, r4, r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002cdc:	f7ff ffe8 	bl	8002cb0 <HAL_RCC_GetHCLKFreq>
 8002ce0:	4604      	mov	r4, r0
 8002ce2:	f7ff f9ea 	bl	80020ba <LL_RCC_GetAPB1Prescaler>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	0a1b      	lsrs	r3, r3, #8
 8002cea:	4a03      	ldr	r2, [pc, #12]	; (8002cf8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cf0:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	bd98      	pop	{r3, r4, r7, pc}
 8002cf8:	0800a49c 	.word	0x0800a49c

08002cfc <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cfc:	b598      	push	{r3, r4, r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002d00:	f7ff ffd6 	bl	8002cb0 <HAL_RCC_GetHCLKFreq>
 8002d04:	4604      	mov	r4, r0
 8002d06:	f7ff f9e3 	bl	80020d0 <LL_RCC_GetAPB2Prescaler>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	0adb      	lsrs	r3, r3, #11
 8002d0e:	4a03      	ldr	r2, [pc, #12]	; (8002d1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d14:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	bd98      	pop	{r3, r4, r7, pc}
 8002d1c:	0800a49c 	.word	0x0800a49c

08002d20 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer to the Flash Latency variable.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b085      	sub	sp, #20
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
 8002d28:	6039      	str	r1, [r7, #0]
  uint32_t regvalue;

  /* Check the parameters */
  if ((RCC_ClkInitStruct != NULL) && (pFLatency != NULL))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d02d      	beq.n	8002d8c <HAL_RCC_GetClockConfig+0x6c>
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d02a      	beq.n	8002d8c <HAL_RCC_GetClockConfig+0x6c>
  {
    /* Set all possible values for the Clock type parameter --------------------*/
    RCC_ClkInitStruct->ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 \
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	224f      	movs	r2, #79	; 0x4f
 8002d3a:	601a      	str	r2, [r3, #0]
#if defined(DUAL_CORE)
    RCC_ClkInitStruct->ClockType |= RCC_CLOCKTYPE_HCLK2;
#endif  /* DUAL_CORE */

    /* Get Clock Configuration Register */
    regvalue = RCC->CFGR;
 8002d3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	60fb      	str	r3, [r7, #12]

    /* Get the SYSCLK configuration --------------------------------------------*/
    RCC_ClkInitStruct->SYSCLKSource = (regvalue & RCC_CFGR_SWS);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f003 020c 	and.w	r2, r3, #12
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	605a      	str	r2, [r3, #4]

    /* Get the HCLK configuration ----------------------------------------------*/
    RCC_ClkInitStruct->AHBCLKDivider = (regvalue & RCC_CFGR_HPRE);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	609a      	str	r2, [r3, #8]

    /* Get the APB1 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB1CLKDivider = (regvalue & RCC_CFGR_PPRE1);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	60da      	str	r2, [r3, #12]

    /* Get the APB2 configuration ----------------------------------------------*/
    RCC_ClkInitStruct->APB2CLKDivider = (regvalue & RCC_CFGR_PPRE2);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	611a      	str	r2, [r3, #16]

    /* Get Extended Clock Recovery Register */
    regvalue = RCC->EXTCFGR;
 8002d6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d70:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002d74:	60fb      	str	r3, [r7, #12]
    /* Get the AHBCLK2Divider configuration ------------------------------------*/
    RCC_ClkInitStruct->AHBCLK2Divider =  (regvalue & RCC_EXTCFGR_C2HPRE);
#endif  /* DUAL_CORE */

    /* Get the AHBCLK3Divider configuration ------------------------------------*/
    RCC_ClkInitStruct->AHBCLK3Divider = ((regvalue & RCC_EXTCFGR_SHDHPRE) << 4);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	011b      	lsls	r3, r3, #4
 8002d7a:	b2da      	uxtb	r2, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	615a      	str	r2, [r3, #20]

    /* Get the Flash Wait State (Latency) configuration ------------------------*/
    *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002d80:	4b05      	ldr	r3, [pc, #20]	; (8002d98 <HAL_RCC_GetClockConfig+0x78>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0207 	and.w	r2, r3, #7
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	601a      	str	r2, [r3, #0]
  }
}
 8002d8c:	bf00      	nop
 8002d8e:	3714      	adds	r7, #20
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bc80      	pop	{r7}
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	58004000 	.word	0x58004000

08002d9c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002d9c:	b590      	push	{r4, r7, lr}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	091b      	lsrs	r3, r3, #4
 8002da8:	f003 030f 	and.w	r3, r3, #15
 8002dac:	4a10      	ldr	r2, [pc, #64]	; (8002df0 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8002dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002db2:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8002db4:	f7ff f974 	bl	80020a0 <LL_RCC_GetAHB3Prescaler>
 8002db8:	4603      	mov	r3, r0
 8002dba:	091b      	lsrs	r3, r3, #4
 8002dbc:	f003 030f 	and.w	r3, r3, #15
 8002dc0:	4a0c      	ldr	r2, [pc, #48]	; (8002df4 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8002dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dc6:	68fa      	ldr	r2, [r7, #12]
 8002dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dcc:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	4a09      	ldr	r2, [pc, #36]	; (8002df8 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8002dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd6:	0c9c      	lsrs	r4, r3, #18
 8002dd8:	f7fe ff88 	bl	8001cec <HAL_PWREx_GetVoltageRange>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	4619      	mov	r1, r3
 8002de0:	4620      	mov	r0, r4
 8002de2:	f000 f80b 	bl	8002dfc <RCC_SetFlashLatency>
 8002de6:	4603      	mov	r3, r0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3714      	adds	r7, #20
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd90      	pop	{r4, r7, pc}
 8002df0:	0800a4bc 	.word	0x0800a4bc
 8002df4:	0800a45c 	.word	0x0800a45c
 8002df8:	431bde83 	.word	0x431bde83

08002dfc <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b08e      	sub	sp, #56	; 0x38
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8002e06:	4a3a      	ldr	r2, [pc, #232]	; (8002ef0 <RCC_SetFlashLatency+0xf4>)
 8002e08:	f107 0320 	add.w	r3, r7, #32
 8002e0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e10:	6018      	str	r0, [r3, #0]
 8002e12:	3304      	adds	r3, #4
 8002e14:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8002e16:	4a37      	ldr	r2, [pc, #220]	; (8002ef4 <RCC_SetFlashLatency+0xf8>)
 8002e18:	f107 0318 	add.w	r3, r7, #24
 8002e1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002e20:	6018      	str	r0, [r3, #0]
 8002e22:	3304      	adds	r3, #4
 8002e24:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8002e26:	4a34      	ldr	r2, [pc, #208]	; (8002ef8 <RCC_SetFlashLatency+0xfc>)
 8002e28:	f107 030c 	add.w	r3, r7, #12
 8002e2c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e2e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002e32:	2300      	movs	r3, #0
 8002e34:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e3c:	d11b      	bne.n	8002e76 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002e3e:	2300      	movs	r3, #0
 8002e40:	633b      	str	r3, [r7, #48]	; 0x30
 8002e42:	e014      	b.n	8002e6e <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e46:	005b      	lsls	r3, r3, #1
 8002e48:	3338      	adds	r3, #56	; 0x38
 8002e4a:	443b      	add	r3, r7
 8002e4c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002e50:	461a      	mov	r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d807      	bhi.n	8002e68 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	3338      	adds	r3, #56	; 0x38
 8002e5e:	443b      	add	r3, r7
 8002e60:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002e64:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002e66:	e021      	b.n	8002eac <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	633b      	str	r3, [r7, #48]	; 0x30
 8002e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	d9e7      	bls.n	8002e44 <RCC_SetFlashLatency+0x48>
 8002e74:	e01a      	b.n	8002eac <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002e76:	2300      	movs	r3, #0
 8002e78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e7a:	e014      	b.n	8002ea6 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	3338      	adds	r3, #56	; 0x38
 8002e82:	443b      	add	r3, r7
 8002e84:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8002e88:	461a      	mov	r2, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d807      	bhi.n	8002ea0 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	3338      	adds	r3, #56	; 0x38
 8002e96:	443b      	add	r3, r7
 8002e98:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002e9c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002e9e:	e005      	b.n	8002eac <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d9e7      	bls.n	8002e7c <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002eac:	4b13      	ldr	r3, [pc, #76]	; (8002efc <RCC_SetFlashLatency+0x100>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f023 0207 	bic.w	r2, r3, #7
 8002eb4:	4911      	ldr	r1, [pc, #68]	; (8002efc <RCC_SetFlashLatency+0x100>)
 8002eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002ebc:	f7fe f9d8 	bl	8001270 <HAL_GetTick>
 8002ec0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002ec2:	e008      	b.n	8002ed6 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002ec4:	f7fe f9d4 	bl	8001270 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d901      	bls.n	8002ed6 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e007      	b.n	8002ee6 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002ed6:	4b09      	ldr	r3, [pc, #36]	; (8002efc <RCC_SetFlashLatency+0x100>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0307 	and.w	r3, r3, #7
 8002ede:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d1ef      	bne.n	8002ec4 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3738      	adds	r7, #56	; 0x38
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	0800a3fc 	.word	0x0800a3fc
 8002ef4:	0800a404 	.word	0x0800a404
 8002ef8:	0800a40c 	.word	0x0800a40c
 8002efc:	58004000 	.word	0x58004000

08002f00 <LL_RCC_LSE_IsReady>:
{
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002f04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f0c:	f003 0302 	and.w	r3, r3, #2
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d101      	bne.n	8002f18 <LL_RCC_LSE_IsReady+0x18>
 8002f14:	2301      	movs	r3, #1
 8002f16:	e000      	b.n	8002f1a <LL_RCC_LSE_IsReady+0x1a>
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bc80      	pop	{r7}
 8002f20:	4770      	bx	lr

08002f22 <LL_RCC_SetUSARTClockSource>:
{
 8002f22:	b480      	push	{r7}
 8002f24:	b083      	sub	sp, #12
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8002f2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f2e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	0c1b      	lsrs	r3, r3, #16
 8002f36:	43db      	mvns	r3, r3
 8002f38:	401a      	ands	r2, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f42:	4313      	orrs	r3, r2
 8002f44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002f48:	bf00      	nop
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bc80      	pop	{r7}
 8002f50:	4770      	bx	lr

08002f52 <LL_RCC_SetI2SClockSource>:
{
 8002f52:	b480      	push	{r7}
 8002f54:	b083      	sub	sp, #12
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8002f5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f62:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002f72:	bf00      	nop
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bc80      	pop	{r7}
 8002f7a:	4770      	bx	lr

08002f7c <LL_RCC_SetLPUARTClockSource>:
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002f84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f8c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002f90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002f9c:	bf00      	nop
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bc80      	pop	{r7}
 8002fa4:	4770      	bx	lr

08002fa6 <LL_RCC_SetI2CClockSource>:
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	b083      	sub	sp, #12
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002fae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fb2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	091b      	lsrs	r3, r3, #4
 8002fba:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002fbe:	43db      	mvns	r3, r3
 8002fc0:	401a      	ands	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	011b      	lsls	r3, r3, #4
 8002fc6:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002fca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002fd4:	bf00      	nop
 8002fd6:	370c      	adds	r7, #12
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bc80      	pop	{r7}
 8002fdc:	4770      	bx	lr

08002fde <LL_RCC_SetLPTIMClockSource>:
{
 8002fde:	b480      	push	{r7}
 8002fe0:	b083      	sub	sp, #12
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8002fe6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fea:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	0c1b      	lsrs	r3, r3, #16
 8002ff2:	041b      	lsls	r3, r3, #16
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	401a      	ands	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	041b      	lsls	r3, r3, #16
 8002ffc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003000:	4313      	orrs	r3, r2
 8003002:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003006:	bf00      	nop
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	bc80      	pop	{r7}
 800300e:	4770      	bx	lr

08003010 <LL_RCC_SetRNGClockSource>:
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003018:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800301c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003020:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003024:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4313      	orrs	r3, r2
 800302c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	bc80      	pop	{r7}
 8003038:	4770      	bx	lr

0800303a <LL_RCC_SetADCClockSource>:
{
 800303a:	b480      	push	{r7}
 800303c:	b083      	sub	sp, #12
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003042:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800304a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800304e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4313      	orrs	r3, r2
 8003056:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800305a:	bf00      	nop
 800305c:	370c      	adds	r7, #12
 800305e:	46bd      	mov	sp, r7
 8003060:	bc80      	pop	{r7}
 8003062:	4770      	bx	lr

08003064 <LL_RCC_SetRTCClockSource>:
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800306c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003074:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003078:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	4313      	orrs	r3, r2
 8003080:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003084:	bf00      	nop
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	bc80      	pop	{r7}
 800308c:	4770      	bx	lr

0800308e <LL_RCC_GetRTCClockSource>:
{
 800308e:	b480      	push	{r7}
 8003090:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003092:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800309a:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800309e:	4618      	mov	r0, r3
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bc80      	pop	{r7}
 80030a4:	4770      	bx	lr

080030a6 <LL_RCC_ForceBackupDomainReset>:
{
 80030a6:	b480      	push	{r7}
 80030a8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80030aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030b2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80030be:	bf00      	nop
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bc80      	pop	{r7}
 80030c4:	4770      	bx	lr

080030c6 <LL_RCC_ReleaseBackupDomainReset>:
{
 80030c6:	b480      	push	{r7}
 80030c8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80030ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80030d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80030de:	bf00      	nop
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bc80      	pop	{r7}
 80030e4:	4770      	bx	lr
	...

080030e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b086      	sub	sp, #24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80030f0:	2300      	movs	r3, #0
 80030f2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80030f4:	2300      	movs	r3, #0
 80030f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80030f8:	2300      	movs	r3, #0
 80030fa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d058      	beq.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8003108:	f7fe fde2 	bl	8001cd0 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800310c:	f7fe f8b0 	bl	8001270 <HAL_GetTick>
 8003110:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003112:	e009      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003114:	f7fe f8ac 	bl	8001270 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b02      	cmp	r3, #2
 8003120:	d902      	bls.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	74fb      	strb	r3, [r7, #19]
        break;
 8003126:	e006      	b.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003128:	4b7b      	ldr	r3, [pc, #492]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003130:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003134:	d1ee      	bne.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8003136:	7cfb      	ldrb	r3, [r7, #19]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d13c      	bne.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 800313c:	f7ff ffa7 	bl	800308e <LL_RCC_GetRTCClockSource>
 8003140:	4602      	mov	r2, r0
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003146:	429a      	cmp	r2, r3
 8003148:	d00f      	beq.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800314a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800314e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003152:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003156:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003158:	f7ff ffa5 	bl	80030a6 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 800315c:	f7ff ffb3 	bl	80030c6 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003160:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d014      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003174:	f7fe f87c 	bl	8001270 <HAL_GetTick>
 8003178:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800317a:	e00b      	b.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800317c:	f7fe f878 	bl	8001270 <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	f241 3288 	movw	r2, #5000	; 0x1388
 800318a:	4293      	cmp	r3, r2
 800318c:	d902      	bls.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	74fb      	strb	r3, [r7, #19]
            break;
 8003192:	e004      	b.n	800319e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003194:	f7ff feb4 	bl	8002f00 <LL_RCC_LSE_IsReady>
 8003198:	4603      	mov	r3, r0
 800319a:	2b01      	cmp	r3, #1
 800319c:	d1ee      	bne.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 800319e:	7cfb      	ldrb	r3, [r7, #19]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d105      	bne.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7ff ff5b 	bl	8003064 <LL_RCC_SetRTCClockSource>
 80031ae:	e004      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031b0:	7cfb      	ldrb	r3, [r7, #19]
 80031b2:	74bb      	strb	r3, [r7, #18]
 80031b4:	e001      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031b6:	7cfb      	ldrb	r3, [r7, #19]
 80031b8:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d004      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7ff fea9 	bl	8002f22 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d004      	beq.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7ff fe9e 	bl	8002f22 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0320 	and.w	r3, r3, #32
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d004      	beq.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7ff fec0 	bl	8002f7c <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003204:	2b00      	cmp	r3, #0
 8003206:	d004      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a1b      	ldr	r3, [r3, #32]
 800320c:	4618      	mov	r0, r3
 800320e:	f7ff fee6 	bl	8002fde <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800321a:	2b00      	cmp	r3, #0
 800321c:	d004      	beq.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003222:	4618      	mov	r0, r3
 8003224:	f7ff fedb 	bl	8002fde <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003230:	2b00      	cmp	r3, #0
 8003232:	d004      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003238:	4618      	mov	r0, r3
 800323a:	f7ff fed0 	bl	8002fde <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003246:	2b00      	cmp	r3, #0
 8003248:	d004      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	4618      	mov	r0, r3
 8003250:	f7ff fea9 	bl	8002fa6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800325c:	2b00      	cmp	r3, #0
 800325e:	d004      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	699b      	ldr	r3, [r3, #24]
 8003264:	4618      	mov	r0, r3
 8003266:	f7ff fe9e 	bl	8002fa6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003272:	2b00      	cmp	r3, #0
 8003274:	d004      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	69db      	ldr	r3, [r3, #28]
 800327a:	4618      	mov	r0, r3
 800327c:	f7ff fe93 	bl	8002fa6 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0310 	and.w	r3, r3, #16
 8003288:	2b00      	cmp	r3, #0
 800328a:	d011      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	4618      	mov	r0, r3
 8003292:	f7ff fe5e 	bl	8002f52 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800329e:	d107      	bne.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 80032a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032ae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d010      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7ff fea5 	bl	8003010 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d107      	bne.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80032ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032dc:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d011      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7ff fea3 	bl	800303a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032fc:	d107      	bne.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80032fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800330c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800330e:	7cbb      	ldrb	r3, [r7, #18]
}
 8003310:	4618      	mov	r0, r3
 8003312:	3718      	adds	r7, #24
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	58000400 	.word	0x58000400

0800331c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d071      	beq.n	8003412 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d106      	bne.n	8003348 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f7fd fd42 	bl	8000dcc <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2202      	movs	r2, #2
 800334c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003350:	4b32      	ldr	r3, [pc, #200]	; (800341c <HAL_RTC_Init+0x100>)
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	f003 0310 	and.w	r3, r3, #16
 8003358:	2b10      	cmp	r3, #16
 800335a:	d051      	beq.n	8003400 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800335c:	4b2f      	ldr	r3, [pc, #188]	; (800341c <HAL_RTC_Init+0x100>)
 800335e:	22ca      	movs	r2, #202	; 0xca
 8003360:	625a      	str	r2, [r3, #36]	; 0x24
 8003362:	4b2e      	ldr	r3, [pc, #184]	; (800341c <HAL_RTC_Init+0x100>)
 8003364:	2253      	movs	r2, #83	; 0x53
 8003366:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f000 faa3 	bl	80038b4 <RTC_EnterInitMode>
 800336e:	4603      	mov	r3, r0
 8003370:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8003372:	7bfb      	ldrb	r3, [r7, #15]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d13f      	bne.n	80033f8 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8003378:	4b28      	ldr	r3, [pc, #160]	; (800341c <HAL_RTC_Init+0x100>)
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	4a27      	ldr	r2, [pc, #156]	; (800341c <HAL_RTC_Init+0x100>)
 800337e:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8003382:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003386:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8003388:	4b24      	ldr	r3, [pc, #144]	; (800341c <HAL_RTC_Init+0x100>)
 800338a:	699a      	ldr	r2, [r3, #24]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6859      	ldr	r1, [r3, #4]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	4319      	orrs	r1, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	430b      	orrs	r3, r1
 800339c:	491f      	ldr	r1, [pc, #124]	; (800341c <HAL_RTC_Init+0x100>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68da      	ldr	r2, [r3, #12]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	041b      	lsls	r3, r3, #16
 80033ac:	491b      	ldr	r1, [pc, #108]	; (800341c <HAL_RTC_Init+0x100>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 80033b2:	4b1a      	ldr	r3, [pc, #104]	; (800341c <HAL_RTC_Init+0x100>)
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c2:	430b      	orrs	r3, r1
 80033c4:	4915      	ldr	r1, [pc, #84]	; (800341c <HAL_RTC_Init+0x100>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 faa6 	bl	800391c <RTC_ExitInitMode>
 80033d0:	4603      	mov	r3, r0
 80033d2:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 80033d4:	7bfb      	ldrb	r3, [r7, #15]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d10e      	bne.n	80033f8 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 80033da:	4b10      	ldr	r3, [pc, #64]	; (800341c <HAL_RTC_Init+0x100>)
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a19      	ldr	r1, [r3, #32]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	69db      	ldr	r3, [r3, #28]
 80033ea:	4319      	orrs	r1, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	695b      	ldr	r3, [r3, #20]
 80033f0:	430b      	orrs	r3, r1
 80033f2:	490a      	ldr	r1, [pc, #40]	; (800341c <HAL_RTC_Init+0x100>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	618b      	str	r3, [r1, #24]
                    hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033f8:	4b08      	ldr	r3, [pc, #32]	; (800341c <HAL_RTC_Init+0x100>)
 80033fa:	22ff      	movs	r2, #255	; 0xff
 80033fc:	625a      	str	r2, [r3, #36]	; 0x24
 80033fe:	e001      	b.n	8003404 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 8003400:	2300      	movs	r3, #0
 8003402:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003404:	7bfb      	ldrb	r3, [r7, #15]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d103      	bne.n	8003412 <HAL_RTC_Init+0xf6>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8003412:	7bfb      	ldrb	r3, [r7, #15]
}
 8003414:	4618      	mov	r0, r3
 8003416:	3710      	adds	r7, #16
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	40002800 	.word	0x40002800

08003420 <HAL_RTC_SetTime>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003420:	b590      	push	{r4, r7, lr}
 8003422:	b087      	sub	sp, #28
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
    assert_param(IS_RTC_FORMAT(Format));
  }
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003432:	2b01      	cmp	r3, #1
 8003434:	d101      	bne.n	800343a <HAL_RTC_SetTime+0x1a>
 8003436:	2302      	movs	r3, #2
 8003438:	e088      	b.n	800354c <HAL_RTC_SetTime+0x12c>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2202      	movs	r2, #2
 8003446:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800344a:	4b42      	ldr	r3, [pc, #264]	; (8003554 <HAL_RTC_SetTime+0x134>)
 800344c:	22ca      	movs	r2, #202	; 0xca
 800344e:	625a      	str	r2, [r3, #36]	; 0x24
 8003450:	4b40      	ldr	r3, [pc, #256]	; (8003554 <HAL_RTC_SetTime+0x134>)
 8003452:	2253      	movs	r2, #83	; 0x53
 8003454:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f000 fa2c 	bl	80038b4 <RTC_EnterInitMode>
 800345c:	4603      	mov	r3, r0
 800345e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003460:	7cfb      	ldrb	r3, [r7, #19]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d15e      	bne.n	8003524 <HAL_RTC_SetTime+0x104>
  {
    /* Check Binary mode ((32-bit free-running counter) */
    if (READ_BIT(RTC->ICSR, RTC_ICSR_BIN) != RTC_BINARY_ONLY)
 8003466:	4b3b      	ldr	r3, [pc, #236]	; (8003554 <HAL_RTC_SetTime+0x134>)
 8003468:	68db      	ldr	r3, [r3, #12]
 800346a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800346e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003472:	d057      	beq.n	8003524 <HAL_RTC_SetTime+0x104>
    {
      if (Format == RTC_FORMAT_BIN)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d125      	bne.n	80034c6 <HAL_RTC_SetTime+0xa6>
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800347a:	4b36      	ldr	r3, [pc, #216]	; (8003554 <HAL_RTC_SetTime+0x134>)
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003482:	2b00      	cmp	r3, #0
 8003484:	d102      	bne.n	800348c <HAL_RTC_SetTime+0x6c>
          assert_param(IS_RTC_HOUR12(sTime->Hours));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	2200      	movs	r2, #0
 800348a:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(sTime->Hours));
        }
        assert_param(IS_RTC_MINUTES(sTime->Minutes));
        assert_param(IS_RTC_SECONDS(sTime->Seconds));

        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	4618      	mov	r0, r3
 8003492:	f000 fa81 	bl	8003998 <RTC_ByteToBcd2>
 8003496:	4603      	mov	r3, r0
 8003498:	041c      	lsls	r4, r3, #16
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	785b      	ldrb	r3, [r3, #1]
 800349e:	4618      	mov	r0, r3
 80034a0:	f000 fa7a 	bl	8003998 <RTC_ByteToBcd2>
 80034a4:	4603      	mov	r3, r0
 80034a6:	021b      	lsls	r3, r3, #8
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80034a8:	431c      	orrs	r4, r3
                            ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	789b      	ldrb	r3, [r3, #2]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f000 fa72 	bl	8003998 <RTC_ByteToBcd2>
 80034b4:	4603      	mov	r3, r0
                            ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80034b6:	ea44 0203 	orr.w	r2, r4, r3
                            (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	78db      	ldrb	r3, [r3, #3]
 80034be:	059b      	lsls	r3, r3, #22
        tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80034c0:	4313      	orrs	r3, r2
 80034c2:	617b      	str	r3, [r7, #20]
 80034c4:	e017      	b.n	80034f6 <HAL_RTC_SetTime+0xd6>

      }
      else
      {
        if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80034c6:	4b23      	ldr	r3, [pc, #140]	; (8003554 <HAL_RTC_SetTime+0x134>)
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d102      	bne.n	80034d8 <HAL_RTC_SetTime+0xb8>
          assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
          assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
        }
        else
        {
          sTime->TimeFormat = 0x00U;
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	2200      	movs	r2, #0
 80034d6:	70da      	strb	r2, [r3, #3]
          assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
        }
        assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
        assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	041a      	lsls	r2, r3, #16
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	785b      	ldrb	r3, [r3, #1]
 80034e2:	021b      	lsls	r3, r3, #8
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80034e4:	4313      	orrs	r3, r2
                  ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80034e6:	68ba      	ldr	r2, [r7, #8]
 80034e8:	7892      	ldrb	r2, [r2, #2]
                  ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80034ea:	431a      	orrs	r2, r3
                  ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	78db      	ldrb	r3, [r3, #3]
 80034f0:	059b      	lsls	r3, r3, #22
        tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80034f2:	4313      	orrs	r3, r2
 80034f4:	617b      	str	r3, [r7, #20]
      }

      /* Set the RTC_TR register */
      WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 80034f6:	4a17      	ldr	r2, [pc, #92]	; (8003554 <HAL_RTC_SetTime+0x134>)
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80034fe:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003502:	6013      	str	r3, [r2, #0]
      
      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8003504:	4b13      	ldr	r3, [pc, #76]	; (8003554 <HAL_RTC_SetTime+0x134>)
 8003506:	699b      	ldr	r3, [r3, #24]
 8003508:	4a12      	ldr	r2, [pc, #72]	; (8003554 <HAL_RTC_SetTime+0x134>)
 800350a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800350e:	6193      	str	r3, [r2, #24]

      /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
      SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8003510:	4b10      	ldr	r3, [pc, #64]	; (8003554 <HAL_RTC_SetTime+0x134>)
 8003512:	699a      	ldr	r2, [r3, #24]
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	68d9      	ldr	r1, [r3, #12]
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	430b      	orrs	r3, r1
 800351e:	490d      	ldr	r1, [pc, #52]	; (8003554 <HAL_RTC_SetTime+0x134>)
 8003520:	4313      	orrs	r3, r2
 8003522:	618b      	str	r3, [r1, #24]
    }
  }

  /* Exit Initialization mode */
  status = RTC_ExitInitMode(hrtc);
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f000 f9f9 	bl	800391c <RTC_ExitInitMode>
 800352a:	4603      	mov	r3, r0
 800352c:	74fb      	strb	r3, [r7, #19]


  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800352e:	4b09      	ldr	r3, [pc, #36]	; (8003554 <HAL_RTC_SetTime+0x134>)
 8003530:	22ff      	movs	r2, #255	; 0xff
 8003532:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003534:	7cfb      	ldrb	r3, [r7, #19]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d103      	bne.n	8003542 <HAL_RTC_SetTime+0x122>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2201      	movs	r2, #1
 800353e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 800354a:	7cfb      	ldrb	r3, [r7, #19]
}
 800354c:	4618      	mov	r0, r3
 800354e:	371c      	adds	r7, #28
 8003550:	46bd      	mov	sp, r7
 8003552:	bd90      	pop	{r4, r7, pc}
 8003554:	40002800 	.word	0x40002800

08003558 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary format
  *            @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003558:	b590      	push	{r4, r7, lr}
 800355a:	b087      	sub	sp, #28
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800356a:	2b01      	cmp	r3, #1
 800356c:	d101      	bne.n	8003572 <HAL_RTC_SetDate+0x1a>
 800356e:	2302      	movs	r3, #2
 8003570:	e071      	b.n	8003656 <HAL_RTC_SetDate+0xfe>
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2201      	movs	r2, #1
 8003576:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2202      	movs	r2, #2
 800357e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d10e      	bne.n	80035a6 <HAL_RTC_SetDate+0x4e>
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	785b      	ldrb	r3, [r3, #1]
 800358c:	f003 0310 	and.w	r3, r3, #16
 8003590:	2b00      	cmp	r3, #0
 8003592:	d008      	beq.n	80035a6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	785b      	ldrb	r3, [r3, #1]
 8003598:	f023 0310 	bic.w	r3, r3, #16
 800359c:	b2db      	uxtb	r3, r3
 800359e:	330a      	adds	r3, #10
 80035a0:	b2da      	uxtb	r2, r3
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d11c      	bne.n	80035e6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	78db      	ldrb	r3, [r3, #3]
 80035b0:	4618      	mov	r0, r3
 80035b2:	f000 f9f1 	bl	8003998 <RTC_ByteToBcd2>
 80035b6:	4603      	mov	r3, r0
 80035b8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	785b      	ldrb	r3, [r3, #1]
 80035be:	4618      	mov	r0, r3
 80035c0:	f000 f9ea 	bl	8003998 <RTC_ByteToBcd2>
 80035c4:	4603      	mov	r3, r0
 80035c6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80035c8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	789b      	ldrb	r3, [r3, #2]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f000 f9e2 	bl	8003998 <RTC_ByteToBcd2>
 80035d4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80035d6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80035e0:	4313      	orrs	r3, r2
 80035e2:	617b      	str	r3, [r7, #20]
 80035e4:	e00e      	b.n	8003604 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	78db      	ldrb	r3, [r3, #3]
 80035ea:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	785b      	ldrb	r3, [r3, #1]
 80035f0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80035f2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80035f4:	68ba      	ldr	r2, [r7, #8]
 80035f6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80035f8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003600:	4313      	orrs	r3, r2
 8003602:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003604:	4b16      	ldr	r3, [pc, #88]	; (8003660 <HAL_RTC_SetDate+0x108>)
 8003606:	22ca      	movs	r2, #202	; 0xca
 8003608:	625a      	str	r2, [r3, #36]	; 0x24
 800360a:	4b15      	ldr	r3, [pc, #84]	; (8003660 <HAL_RTC_SetDate+0x108>)
 800360c:	2253      	movs	r2, #83	; 0x53
 800360e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003610:	68f8      	ldr	r0, [r7, #12]
 8003612:	f000 f94f 	bl	80038b4 <RTC_EnterInitMode>
 8003616:	4603      	mov	r3, r0
 8003618:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800361a:	7cfb      	ldrb	r3, [r7, #19]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d10b      	bne.n	8003638 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8003620:	4a0f      	ldr	r2, [pc, #60]	; (8003660 <HAL_RTC_SetDate+0x108>)
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003628:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800362c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800362e:	68f8      	ldr	r0, [r7, #12]
 8003630:	f000 f974 	bl	800391c <RTC_ExitInitMode>
 8003634:	4603      	mov	r3, r0
 8003636:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003638:	4b09      	ldr	r3, [pc, #36]	; (8003660 <HAL_RTC_SetDate+0x108>)
 800363a:	22ff      	movs	r2, #255	; 0xff
 800363c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800363e:	7cfb      	ldrb	r3, [r7, #19]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d103      	bne.n	800364c <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 8003654:	7cfb      	ldrb	r3, [r7, #19]
}
 8003656:	4618      	mov	r0, r3
 8003658:	371c      	adds	r7, #28
 800365a:	46bd      	mov	sp, r7
 800365c:	bd90      	pop	{r4, r7, pc}
 800365e:	bf00      	nop
 8003660:	40002800 	.word	0x40002800

08003664 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003664:	b590      	push	{r4, r7, lr}
 8003666:	b087      	sub	sp, #28
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8003670:	2300      	movs	r3, #0
 8003672:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  __HAL_LOCK(hrtc);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800367a:	2b01      	cmp	r3, #1
 800367c:	d101      	bne.n	8003682 <HAL_RTC_SetAlarm+0x1e>
 800367e:	2302      	movs	r3, #2
 8003680:	e0eb      	b.n	800385a <HAL_RTC_SetAlarm+0x1f6>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2202      	movs	r2, #2
 800368e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8003692:	4b74      	ldr	r3, [pc, #464]	; (8003864 <HAL_RTC_SetAlarm+0x200>)
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800369a:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036a2:	d06a      	beq.n	800377a <HAL_RTC_SetAlarm+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d13a      	bne.n	8003720 <HAL_RTC_SetAlarm+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80036aa:	4b6e      	ldr	r3, [pc, #440]	; (8003864 <HAL_RTC_SetAlarm+0x200>)
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d102      	bne.n	80036bc <HAL_RTC_SetAlarm+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	2200      	movs	r2, #0
 80036ba:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	695b      	ldr	r3, [r3, #20]
 80036c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	4618      	mov	r0, r3
 80036ca:	f000 f965 	bl	8003998 <RTC_ByteToBcd2>
 80036ce:	4603      	mov	r3, r0
 80036d0:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	785b      	ldrb	r3, [r3, #1]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f000 f95e 	bl	8003998 <RTC_ByteToBcd2>
 80036dc:	4603      	mov	r3, r0
 80036de:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80036e0:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	789b      	ldrb	r3, [r3, #2]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f000 f956 	bl	8003998 <RTC_ByteToBcd2>
 80036ec:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80036ee:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	78db      	ldrb	r3, [r3, #3]
 80036f6:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80036f8:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003702:	4618      	mov	r0, r3
 8003704:	f000 f948 	bl	8003998 <RTC_ByteToBcd2>
 8003708:	4603      	mov	r3, r0
 800370a:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800370c:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003714:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800371a:	4313      	orrs	r3, r2
 800371c:	617b      	str	r3, [r7, #20]
 800371e:	e02c      	b.n	800377a <HAL_RTC_SetAlarm+0x116>
    }
    else /* format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	695b      	ldr	r3, [r3, #20]
 8003724:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8003728:	d00d      	beq.n	8003746 <HAL_RTC_SetAlarm+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	695b      	ldr	r3, [r3, #20]
 800372e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003732:	d008      	beq.n	8003746 <HAL_RTC_SetAlarm+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003734:	4b4b      	ldr	r3, [pc, #300]	; (8003864 <HAL_RTC_SetAlarm+0x200>)
 8003736:	699b      	ldr	r3, [r3, #24]
 8003738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800373c:	2b00      	cmp	r3, #0
 800373e:	d102      	bne.n	8003746 <HAL_RTC_SetAlarm+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	2200      	movs	r2, #0
 8003744:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	785b      	ldrb	r3, [r3, #1]
 8003750:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003752:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003754:	68ba      	ldr	r2, [r7, #8]
 8003756:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003758:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	78db      	ldrb	r3, [r3, #3]
 800375e:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003760:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003768:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800376a:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003770:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003776:	4313      	orrs	r3, r2
 8003778:	617b      	str	r3, [r7, #20]
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800377a:	4b3a      	ldr	r3, [pc, #232]	; (8003864 <HAL_RTC_SetAlarm+0x200>)
 800377c:	22ca      	movs	r2, #202	; 0xca
 800377e:	625a      	str	r2, [r3, #36]	; 0x24
 8003780:	4b38      	ldr	r3, [pc, #224]	; (8003864 <HAL_RTC_SetAlarm+0x200>)
 8003782:	2253      	movs	r2, #83	; 0x53
 8003784:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800378a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800378e:	d12c      	bne.n	80037ea <HAL_RTC_SetAlarm+0x186>
  {
    /* Disable the Alarm A interrupt */
    /* In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, (RTC_CR_ALRAE | RTC_CR_ALRAIE));
 8003790:	4b34      	ldr	r3, [pc, #208]	; (8003864 <HAL_RTC_SetAlarm+0x200>)
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	4a33      	ldr	r2, [pc, #204]	; (8003864 <HAL_RTC_SetAlarm+0x200>)
 8003796:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800379a:	6193      	str	r3, [r2, #24]

    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 800379c:	4b31      	ldr	r3, [pc, #196]	; (8003864 <HAL_RTC_SetAlarm+0x200>)
 800379e:	2201      	movs	r2, #1
 80037a0:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037a8:	d107      	bne.n	80037ba <HAL_RTC_SetAlarm+0x156>
    {
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	699a      	ldr	r2, [r3, #24]
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	69db      	ldr	r3, [r3, #28]
 80037b2:	492c      	ldr	r1, [pc, #176]	; (8003864 <HAL_RTC_SetAlarm+0x200>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	644b      	str	r3, [r1, #68]	; 0x44
 80037b8:	e006      	b.n	80037c8 <HAL_RTC_SetAlarm+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 80037ba:	4a2a      	ldr	r2, [pc, #168]	; (8003864 <HAL_RTC_SetAlarm+0x200>)
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 80037c0:	4a28      	ldr	r2, [pc, #160]	; (8003864 <HAL_RTC_SetAlarm+0x200>)
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	699b      	ldr	r3, [r3, #24]
 80037c6:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 80037c8:	4a26      	ldr	r2, [pc, #152]	; (8003864 <HAL_RTC_SetAlarm+0x200>)
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d4:	f043 0201 	orr.w	r2, r3, #1
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm state: Enable Alarm */
    SET_BIT(RTC->CR, RTC_CR_ALRAE);
 80037dc:	4b21      	ldr	r3, [pc, #132]	; (8003864 <HAL_RTC_SetAlarm+0x200>)
 80037de:	699b      	ldr	r3, [r3, #24]
 80037e0:	4a20      	ldr	r2, [pc, #128]	; (8003864 <HAL_RTC_SetAlarm+0x200>)
 80037e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037e6:	6193      	str	r3, [r2, #24]
 80037e8:	e02b      	b.n	8003842 <HAL_RTC_SetAlarm+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    /* In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, (RTC_CR_ALRBE | RTC_CR_ALRBIE));
 80037ea:	4b1e      	ldr	r3, [pc, #120]	; (8003864 <HAL_RTC_SetAlarm+0x200>)
 80037ec:	699b      	ldr	r3, [r3, #24]
 80037ee:	4a1d      	ldr	r2, [pc, #116]	; (8003864 <HAL_RTC_SetAlarm+0x200>)
 80037f0:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 80037f4:	6193      	str	r3, [r2, #24]

    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80037f6:	4b1b      	ldr	r3, [pc, #108]	; (8003864 <HAL_RTC_SetAlarm+0x200>)
 80037f8:	2202      	movs	r2, #2
 80037fa:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003802:	d107      	bne.n	8003814 <HAL_RTC_SetAlarm+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	699a      	ldr	r2, [r3, #24]
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	69db      	ldr	r3, [r3, #28]
 800380c:	4915      	ldr	r1, [pc, #84]	; (8003864 <HAL_RTC_SetAlarm+0x200>)
 800380e:	4313      	orrs	r3, r2
 8003810:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003812:	e006      	b.n	8003822 <HAL_RTC_SetAlarm+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8003814:	4a13      	ldr	r2, [pc, #76]	; (8003864 <HAL_RTC_SetAlarm+0x200>)
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 800381a:	4a12      	ldr	r2, [pc, #72]	; (8003864 <HAL_RTC_SetAlarm+0x200>)
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	699b      	ldr	r3, [r3, #24]
 8003820:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8003822:	4a10      	ldr	r2, [pc, #64]	; (8003864 <HAL_RTC_SetAlarm+0x200>)
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382e:	f043 0202 	orr.w	r2, r3, #2
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm state: Enable Alarm */
    SET_BIT(RTC->CR, RTC_CR_ALRBE);
 8003836:	4b0b      	ldr	r3, [pc, #44]	; (8003864 <HAL_RTC_SetAlarm+0x200>)
 8003838:	699b      	ldr	r3, [r3, #24]
 800383a:	4a0a      	ldr	r2, [pc, #40]	; (8003864 <HAL_RTC_SetAlarm+0x200>)
 800383c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003840:	6193      	str	r3, [r2, #24]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003842:	4b08      	ldr	r3, [pc, #32]	; (8003864 <HAL_RTC_SetAlarm+0x200>)
 8003844:	22ff      	movs	r2, #255	; 0xff
 8003846:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	371c      	adds	r7, #28
 800385e:	46bd      	mov	sp, r7
 8003860:	bd90      	pop	{r4, r7, pc}
 8003862:	bf00      	nop
 8003864:	40002800 	.word	0x40002800

08003868 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8003870:	4b0f      	ldr	r3, [pc, #60]	; (80038b0 <HAL_RTC_WaitForSynchro+0x48>)
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	4a0e      	ldr	r2, [pc, #56]	; (80038b0 <HAL_RTC_WaitForSynchro+0x48>)
 8003876:	f023 0320 	bic.w	r3, r3, #32
 800387a:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800387c:	f7fd fcf8 	bl	8001270 <HAL_GetTick>
 8003880:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8003882:	e009      	b.n	8003898 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003884:	f7fd fcf4 	bl	8001270 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003892:	d901      	bls.n	8003898 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	e006      	b.n	80038a6 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8003898:	4b05      	ldr	r3, [pc, #20]	; (80038b0 <HAL_RTC_WaitForSynchro+0x48>)
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	f003 0320 	and.w	r3, r3, #32
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d0ef      	beq.n	8003884 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80038a4:	2300      	movs	r3, #0
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3710      	adds	r7, #16
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	40002800 	.word	0x40002800

080038b4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038bc:	2300      	movs	r3, #0
 80038be:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80038c0:	4b15      	ldr	r3, [pc, #84]	; (8003918 <RTC_EnterInitMode+0x64>)
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d120      	bne.n	800390e <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80038cc:	4b12      	ldr	r3, [pc, #72]	; (8003918 <RTC_EnterInitMode+0x64>)
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	4a11      	ldr	r2, [pc, #68]	; (8003918 <RTC_EnterInitMode+0x64>)
 80038d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038d6:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 80038d8:	f7fd fcca 	bl	8001270 <HAL_GetTick>
 80038dc:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80038de:	e00d      	b.n	80038fc <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80038e0:	f7fd fcc6 	bl	8001270 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038ee:	d905      	bls.n	80038fc <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2203      	movs	r2, #3
 80038f8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80038fc:	4b06      	ldr	r3, [pc, #24]	; (8003918 <RTC_EnterInitMode+0x64>)
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003904:	2b00      	cmp	r3, #0
 8003906:	d102      	bne.n	800390e <RTC_EnterInitMode+0x5a>
 8003908:	7bfb      	ldrb	r3, [r7, #15]
 800390a:	2b03      	cmp	r3, #3
 800390c:	d1e8      	bne.n	80038e0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800390e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003910:	4618      	mov	r0, r3
 8003912:	3710      	adds	r7, #16
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}
 8003918:	40002800 	.word	0x40002800

0800391c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003924:	2300      	movs	r3, #0
 8003926:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003928:	4b1a      	ldr	r3, [pc, #104]	; (8003994 <RTC_ExitInitMode+0x78>)
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	4a19      	ldr	r2, [pc, #100]	; (8003994 <RTC_ExitInitMode+0x78>)
 800392e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003932:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003934:	4b17      	ldr	r3, [pc, #92]	; (8003994 <RTC_ExitInitMode+0x78>)
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	f003 0320 	and.w	r3, r3, #32
 800393c:	2b00      	cmp	r3, #0
 800393e:	d10c      	bne.n	800395a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f7ff ff91 	bl	8003868 <HAL_RTC_WaitForSynchro>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d01e      	beq.n	800398a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2203      	movs	r2, #3
 8003950:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	73fb      	strb	r3, [r7, #15]
 8003958:	e017      	b.n	800398a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800395a:	4b0e      	ldr	r3, [pc, #56]	; (8003994 <RTC_ExitInitMode+0x78>)
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	4a0d      	ldr	r2, [pc, #52]	; (8003994 <RTC_ExitInitMode+0x78>)
 8003960:	f023 0320 	bic.w	r3, r3, #32
 8003964:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f7ff ff7e 	bl	8003868 <HAL_RTC_WaitForSynchro>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d005      	beq.n	800397e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2203      	movs	r2, #3
 8003976:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800397e:	4b05      	ldr	r3, [pc, #20]	; (8003994 <RTC_ExitInitMode+0x78>)
 8003980:	699b      	ldr	r3, [r3, #24]
 8003982:	4a04      	ldr	r2, [pc, #16]	; (8003994 <RTC_ExitInitMode+0x78>)
 8003984:	f043 0320 	orr.w	r3, r3, #32
 8003988:	6193      	str	r3, [r2, #24]
  }

  return status;
 800398a:	7bfb      	ldrb	r3, [r7, #15]
}
 800398c:	4618      	mov	r0, r3
 800398e:	3710      	adds	r7, #16
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	40002800 	.word	0x40002800

08003998 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	4603      	mov	r3, r0
 80039a0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80039a2:	2300      	movs	r3, #0
 80039a4:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 80039a6:	79fb      	ldrb	r3, [r7, #7]
 80039a8:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 80039aa:	e005      	b.n	80039b8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	3301      	adds	r3, #1
 80039b0:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 80039b2:	7afb      	ldrb	r3, [r7, #11]
 80039b4:	3b0a      	subs	r3, #10
 80039b6:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 80039b8:	7afb      	ldrb	r3, [r7, #11]
 80039ba:	2b09      	cmp	r3, #9
 80039bc:	d8f6      	bhi.n	80039ac <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	011b      	lsls	r3, r3, #4
 80039c4:	b2da      	uxtb	r2, r3
 80039c6:	7afb      	ldrb	r3, [r7, #11]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	b2db      	uxtb	r3, r3
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3714      	adds	r7, #20
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bc80      	pop	{r7}
 80039d4:	4770      	bx	lr

080039d6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b084      	sub	sp, #16
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d101      	bne.n	80039e8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e0c6      	b.n	8003b76 <HAL_SPI_Init+0x1a0>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d108      	bne.n	8003a02 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039f8:	d009      	beq.n	8003a0e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	61da      	str	r2, [r3, #28]
 8003a00:	e005      	b.n	8003a0e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d106      	bne.n	8003a28 <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f7fd f9fe 	bl	8000e24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a3e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a48:	d902      	bls.n	8003a50 <HAL_SPI_Init+0x7a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	60fb      	str	r3, [r7, #12]
 8003a4e:	e002      	b.n	8003a56 <HAL_SPI_Init+0x80>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003a50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a54:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003a5e:	d007      	beq.n	8003a70 <HAL_SPI_Init+0x9a>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a68:	d002      	beq.n	8003a70 <HAL_SPI_Init+0x9a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003a80:	431a      	orrs	r2, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	431a      	orrs	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	695b      	ldr	r3, [r3, #20]
 8003a90:	f003 0301 	and.w	r3, r3, #1
 8003a94:	431a      	orrs	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	699b      	ldr	r3, [r3, #24]
 8003a9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a9e:	431a      	orrs	r2, r3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	69db      	ldr	r3, [r3, #28]
 8003aa4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003aa8:	431a      	orrs	r2, r3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ab2:	ea42 0103 	orr.w	r1, r2, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aba:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));
#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCL Configuration -------------------*/
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ace:	d11b      	bne.n	8003b08 <HAL_SPI_Init+0x132>
  {
    /* Align the CRC Length on the data size */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d10b      	bne.n	8003af0 <HAL_SPI_Init+0x11a>
    {
      /* CRC Length aligned on the data size : value set by default */
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ae0:	d903      	bls.n	8003aea <HAL_SPI_Init+0x114>
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2202      	movs	r2, #2
 8003ae6:	631a      	str	r2, [r3, #48]	; 0x30
 8003ae8:	e002      	b.n	8003af0 <HAL_SPI_Init+0x11a>
      }
      else
      {
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2201      	movs	r2, #1
 8003aee:	631a      	str	r2, [r3, #48]	; 0x30
      }
    }

    /* Configure : CRC Length */
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d107      	bne.n	8003b08 <HAL_SPI_Init+0x132>
    {
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b06:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	0c1b      	lsrs	r3, r3, #16
 8003b0e:	f003 0204 	and.w	r2, r3, #4
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b16:	f003 0310 	and.w	r3, r3, #16
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b20:	f003 0308 	and.w	r3, r3, #8
 8003b24:	431a      	orrs	r2, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003b2e:	ea42 0103 	orr.w	r1, r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	430a      	orrs	r2, r1
 8003b3e:	605a      	str	r2, [r3, #4]
                                  (frxth & SPI_CR2_FRXTH)));

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b48:	d105      	bne.n	8003b56 <HAL_SPI_Init+0x180>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	b292      	uxth	r2, r2
 8003b54:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	69da      	ldr	r2, [r3, #28]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b64:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3710      	adds	r7, #16
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b082      	sub	sp, #8
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d101      	bne.n	8003b90 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e049      	b.n	8003c24 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d106      	bne.n	8003baa <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 f841 	bl	8003c2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2202      	movs	r2, #2
 8003bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	3304      	adds	r3, #4
 8003bba:	4619      	mov	r1, r3
 8003bbc:	4610      	mov	r0, r2
 8003bbe:	f000 f9cf 	bl	8003f60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2201      	movs	r2, #1
 8003be6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2201      	movs	r2, #1
 8003bee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2201      	movs	r2, #1
 8003c06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2201      	movs	r2, #1
 8003c16:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c22:	2300      	movs	r3, #0
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3708      	adds	r7, #8
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}

08003c2c <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003c34:	bf00      	nop
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bc80      	pop	{r7}
 8003c3c:	4770      	bx	lr
	...

08003c40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d001      	beq.n	8003c58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e036      	b.n	8003cc6 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	68da      	ldr	r2, [r3, #12]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f042 0201 	orr.w	r2, r2, #1
 8003c6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a16      	ldr	r2, [pc, #88]	; (8003cd0 <HAL_TIM_Base_Start_IT+0x90>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d004      	beq.n	8003c84 <HAL_TIM_Base_Start_IT+0x44>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c82:	d115      	bne.n	8003cb0 <HAL_TIM_Base_Start_IT+0x70>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	689a      	ldr	r2, [r3, #8]
 8003c8a:	4b12      	ldr	r3, [pc, #72]	; (8003cd4 <HAL_TIM_Base_Start_IT+0x94>)
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2b06      	cmp	r3, #6
 8003c94:	d015      	beq.n	8003cc2 <HAL_TIM_Base_Start_IT+0x82>
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c9c:	d011      	beq.n	8003cc2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f042 0201 	orr.w	r2, r2, #1
 8003cac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cae:	e008      	b.n	8003cc2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f042 0201 	orr.w	r2, r2, #1
 8003cbe:	601a      	str	r2, [r3, #0]
 8003cc0:	e000      	b.n	8003cc4 <HAL_TIM_Base_Start_IT+0x84>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cc2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3714      	adds	r7, #20
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bc80      	pop	{r7}
 8003cce:	4770      	bx	lr
 8003cd0:	40012c00 	.word	0x40012c00
 8003cd4:	00010007 	.word	0x00010007

08003cd8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	691b      	ldr	r3, [r3, #16]
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d122      	bne.n	8003d34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	f003 0302 	and.w	r3, r3, #2
 8003cf8:	2b02      	cmp	r3, #2
 8003cfa:	d11b      	bne.n	8003d34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f06f 0202 	mvn.w	r2, #2
 8003d04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	699b      	ldr	r3, [r3, #24]
 8003d12:	f003 0303 	and.w	r3, r3, #3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d003      	beq.n	8003d22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f000 f904 	bl	8003f28 <HAL_TIM_IC_CaptureCallback>
 8003d20:	e005      	b.n	8003d2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f000 f8f7 	bl	8003f16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f000 f906 	bl	8003f3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	f003 0304 	and.w	r3, r3, #4
 8003d3e:	2b04      	cmp	r3, #4
 8003d40:	d122      	bne.n	8003d88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	f003 0304 	and.w	r3, r3, #4
 8003d4c:	2b04      	cmp	r3, #4
 8003d4e:	d11b      	bne.n	8003d88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f06f 0204 	mvn.w	r2, #4
 8003d58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2202      	movs	r2, #2
 8003d5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d003      	beq.n	8003d76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 f8da 	bl	8003f28 <HAL_TIM_IC_CaptureCallback>
 8003d74:	e005      	b.n	8003d82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f000 f8cd 	bl	8003f16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f000 f8dc 	bl	8003f3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	f003 0308 	and.w	r3, r3, #8
 8003d92:	2b08      	cmp	r3, #8
 8003d94:	d122      	bne.n	8003ddc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	f003 0308 	and.w	r3, r3, #8
 8003da0:	2b08      	cmp	r3, #8
 8003da2:	d11b      	bne.n	8003ddc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f06f 0208 	mvn.w	r2, #8
 8003dac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2204      	movs	r2, #4
 8003db2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	69db      	ldr	r3, [r3, #28]
 8003dba:	f003 0303 	and.w	r3, r3, #3
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d003      	beq.n	8003dca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f000 f8b0 	bl	8003f28 <HAL_TIM_IC_CaptureCallback>
 8003dc8:	e005      	b.n	8003dd6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f8a3 	bl	8003f16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f000 f8b2 	bl	8003f3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	f003 0310 	and.w	r3, r3, #16
 8003de6:	2b10      	cmp	r3, #16
 8003de8:	d122      	bne.n	8003e30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	f003 0310 	and.w	r3, r3, #16
 8003df4:	2b10      	cmp	r3, #16
 8003df6:	d11b      	bne.n	8003e30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f06f 0210 	mvn.w	r2, #16
 8003e00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2208      	movs	r2, #8
 8003e06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	69db      	ldr	r3, [r3, #28]
 8003e0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d003      	beq.n	8003e1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 f886 	bl	8003f28 <HAL_TIM_IC_CaptureCallback>
 8003e1c:	e005      	b.n	8003e2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 f879 	bl	8003f16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f000 f888 	bl	8003f3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d10e      	bne.n	8003e5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68db      	ldr	r3, [r3, #12]
 8003e44:	f003 0301 	and.w	r3, r3, #1
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d107      	bne.n	8003e5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f06f 0201 	mvn.w	r2, #1
 8003e54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f7fc fe7e 	bl	8000b58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e66:	2b80      	cmp	r3, #128	; 0x80
 8003e68:	d10e      	bne.n	8003e88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e74:	2b80      	cmp	r3, #128	; 0x80
 8003e76:	d107      	bne.n	8003e88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f000 f8d7 	bl	8004036 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e96:	d10e      	bne.n	8003eb6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ea2:	2b80      	cmp	r3, #128	; 0x80
 8003ea4:	d107      	bne.n	8003eb6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003eae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f000 f8c9 	bl	8004048 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec0:	2b40      	cmp	r3, #64	; 0x40
 8003ec2:	d10e      	bne.n	8003ee2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ece:	2b40      	cmp	r3, #64	; 0x40
 8003ed0:	d107      	bne.n	8003ee2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003eda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 f835 	bl	8003f4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	691b      	ldr	r3, [r3, #16]
 8003ee8:	f003 0320 	and.w	r3, r3, #32
 8003eec:	2b20      	cmp	r3, #32
 8003eee:	d10e      	bne.n	8003f0e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	f003 0320 	and.w	r3, r3, #32
 8003efa:	2b20      	cmp	r3, #32
 8003efc:	d107      	bne.n	8003f0e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f06f 0220 	mvn.w	r2, #32
 8003f06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f000 f88b 	bl	8004024 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f0e:	bf00      	nop
 8003f10:	3708      	adds	r7, #8
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}

08003f16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f16:	b480      	push	{r7}
 8003f18:	b083      	sub	sp, #12
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f1e:	bf00      	nop
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bc80      	pop	{r7}
 8003f26:	4770      	bx	lr

08003f28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f30:	bf00      	nop
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bc80      	pop	{r7}
 8003f38:	4770      	bx	lr

08003f3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f3a:	b480      	push	{r7}
 8003f3c:	b083      	sub	sp, #12
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f42:	bf00      	nop
 8003f44:	370c      	adds	r7, #12
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bc80      	pop	{r7}
 8003f4a:	4770      	bx	lr

08003f4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f54:	bf00      	nop
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bc80      	pop	{r7}
 8003f5c:	4770      	bx	lr
	...

08003f60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a29      	ldr	r2, [pc, #164]	; (8004018 <TIM_Base_SetConfig+0xb8>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d003      	beq.n	8003f80 <TIM_Base_SetConfig+0x20>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f7e:	d108      	bne.n	8003f92 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a20      	ldr	r2, [pc, #128]	; (8004018 <TIM_Base_SetConfig+0xb8>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d00b      	beq.n	8003fb2 <TIM_Base_SetConfig+0x52>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fa0:	d007      	beq.n	8003fb2 <TIM_Base_SetConfig+0x52>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a1d      	ldr	r2, [pc, #116]	; (800401c <TIM_Base_SetConfig+0xbc>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d003      	beq.n	8003fb2 <TIM_Base_SetConfig+0x52>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4a1c      	ldr	r2, [pc, #112]	; (8004020 <TIM_Base_SetConfig+0xc0>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d108      	bne.n	8003fc4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	68fa      	ldr	r2, [r7, #12]
 8003fd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	689a      	ldr	r2, [r3, #8]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a0b      	ldr	r2, [pc, #44]	; (8004018 <TIM_Base_SetConfig+0xb8>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d007      	beq.n	8004000 <TIM_Base_SetConfig+0xa0>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a0a      	ldr	r2, [pc, #40]	; (800401c <TIM_Base_SetConfig+0xbc>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d003      	beq.n	8004000 <TIM_Base_SetConfig+0xa0>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a09      	ldr	r2, [pc, #36]	; (8004020 <TIM_Base_SetConfig+0xc0>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d103      	bne.n	8004008 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	691a      	ldr	r2, [r3, #16]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	615a      	str	r2, [r3, #20]
}
 800400e:	bf00      	nop
 8004010:	3714      	adds	r7, #20
 8004012:	46bd      	mov	sp, r7
 8004014:	bc80      	pop	{r7}
 8004016:	4770      	bx	lr
 8004018:	40012c00 	.word	0x40012c00
 800401c:	40014400 	.word	0x40014400
 8004020:	40014800 	.word	0x40014800

08004024 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800402c:	bf00      	nop
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	bc80      	pop	{r7}
 8004034:	4770      	bx	lr

08004036 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004036:	b480      	push	{r7}
 8004038:	b083      	sub	sp, #12
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800403e:	bf00      	nop
 8004040:	370c      	adds	r7, #12
 8004042:	46bd      	mov	sp, r7
 8004044:	bc80      	pop	{r7}
 8004046:	4770      	bx	lr

08004048 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004048:	b480      	push	{r7}
 800404a:	b083      	sub	sp, #12
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004050:	bf00      	nop
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	bc80      	pop	{r7}
 8004058:	4770      	bx	lr

0800405a <LL_RCC_GetUSARTClockSource>:
{
 800405a:	b480      	push	{r7}
 800405c:	b083      	sub	sp, #12
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8004062:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004066:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	401a      	ands	r2, r3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	041b      	lsls	r3, r3, #16
 8004072:	4313      	orrs	r3, r2
}
 8004074:	4618      	mov	r0, r3
 8004076:	370c      	adds	r7, #12
 8004078:	46bd      	mov	sp, r7
 800407a:	bc80      	pop	{r7}
 800407c:	4770      	bx	lr

0800407e <LL_RCC_GetLPUARTClockSource>:
{
 800407e:	b480      	push	{r7}
 8004080:	b083      	sub	sp, #12
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004086:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800408a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4013      	ands	r3, r2
}
 8004092:	4618      	mov	r0, r3
 8004094:	370c      	adds	r7, #12
 8004096:	46bd      	mov	sp, r7
 8004098:	bc80      	pop	{r7}
 800409a:	4770      	bx	lr

0800409c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d101      	bne.n	80040ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e042      	b.n	8004134 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d106      	bne.n	80040c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f7fc fe07 	bl	8000cd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2224      	movs	r2, #36	; 0x24
 80040ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f022 0201 	bic.w	r2, r2, #1
 80040dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 fc98 	bl	8004a14 <UART_SetConfig>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d101      	bne.n	80040ee <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e022      	b.n	8004134 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d002      	beq.n	80040fc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 ff00 	bl	8004efc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685a      	ldr	r2, [r3, #4]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800410a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	689a      	ldr	r2, [r3, #8]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800411a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f042 0201 	orr.w	r2, r2, #1
 800412a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f000 ff86 	bl	800503e <UART_CheckIdleState>
 8004132:	4603      	mov	r3, r0
}
 8004134:	4618      	mov	r0, r3
 8004136:	3708      	adds	r7, #8
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d101      	bne.n	800414e <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e04a      	b.n	80041e4 <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004154:	2b00      	cmp	r3, #0
 8004156:	d106      	bne.n	8004166 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f7fc fdb7 	bl	8000cd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2224      	movs	r2, #36	; 0x24
 800416a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f022 0201 	bic.w	r2, r2, #1
 800417c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 fc48 	bl	8004a14 <UART_SetConfig>
 8004184:	4603      	mov	r3, r0
 8004186:	2b01      	cmp	r3, #1
 8004188:	d101      	bne.n	800418e <HAL_HalfDuplex_Init+0x52>
  {
    return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e02a      	b.n	80041e4 <HAL_HalfDuplex_Init+0xa8>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004192:	2b00      	cmp	r3, #0
 8004194:	d002      	beq.n	800419c <HAL_HalfDuplex_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 feb0 	bl	8004efc <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	685a      	ldr	r2, [r3, #4]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	689a      	ldr	r2, [r3, #8]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 80041ba:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	689a      	ldr	r2, [r3, #8]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f042 0208 	orr.w	r2, r2, #8
 80041ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f042 0201 	orr.w	r2, r2, #1
 80041da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 ff2e 	bl	800503e <UART_CheckIdleState>
 80041e2:	4603      	mov	r3, r0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3708      	adds	r7, #8
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b08a      	sub	sp, #40	; 0x28
 80041f0:	af02      	add	r7, sp, #8
 80041f2:	60f8      	str	r0, [r7, #12]
 80041f4:	60b9      	str	r1, [r7, #8]
 80041f6:	603b      	str	r3, [r7, #0]
 80041f8:	4613      	mov	r3, r2
 80041fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004202:	2b20      	cmp	r3, #32
 8004204:	d173      	bne.n	80042ee <HAL_UART_Transmit+0x102>
  {
    if ((pData == NULL) || (Size == 0U))
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d002      	beq.n	8004212 <HAL_UART_Transmit+0x26>
 800420c:	88fb      	ldrh	r3, [r7, #6]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d101      	bne.n	8004216 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e06c      	b.n	80042f0 <HAL_UART_Transmit+0x104>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2200      	movs	r2, #0
 800421a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2221      	movs	r2, #33	; 0x21
 8004222:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004226:	f7fd f823 	bl	8001270 <HAL_GetTick>
 800422a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	88fa      	ldrh	r2, [r7, #6]
 8004230:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	88fa      	ldrh	r2, [r7, #6]
 8004238:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004244:	d108      	bne.n	8004258 <HAL_UART_Transmit+0x6c>
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d104      	bne.n	8004258 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800424e:	2300      	movs	r3, #0
 8004250:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	61bb      	str	r3, [r7, #24]
 8004256:	e003      	b.n	8004260 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800425c:	2300      	movs	r3, #0
 800425e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004260:	e02c      	b.n	80042bc <HAL_UART_Transmit+0xd0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	9300      	str	r3, [sp, #0]
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	2200      	movs	r2, #0
 800426a:	2180      	movs	r1, #128	; 0x80
 800426c:	68f8      	ldr	r0, [r7, #12]
 800426e:	f000 ff34 	bl	80050da <UART_WaitOnFlagUntilTimeout>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d001      	beq.n	800427c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e039      	b.n	80042f0 <HAL_UART_Transmit+0x104>
      }
      if (pdata8bits == NULL)
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d10b      	bne.n	800429a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	881b      	ldrh	r3, [r3, #0]
 8004286:	461a      	mov	r2, r3
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004290:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	3302      	adds	r3, #2
 8004296:	61bb      	str	r3, [r7, #24]
 8004298:	e007      	b.n	80042aa <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	781a      	ldrb	r2, [r3, #0]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	3301      	adds	r3, #1
 80042a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	3b01      	subs	r3, #1
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1cc      	bne.n	8004262 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	9300      	str	r3, [sp, #0]
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	2200      	movs	r2, #0
 80042d0:	2140      	movs	r1, #64	; 0x40
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	f000 ff01 	bl	80050da <UART_WaitOnFlagUntilTimeout>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d001      	beq.n	80042e2 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e006      	b.n	80042f0 <HAL_UART_Transmit+0x104>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2220      	movs	r2, #32
 80042e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80042ea:	2300      	movs	r3, #0
 80042ec:	e000      	b.n	80042f0 <HAL_UART_Transmit+0x104>
  }
  else
  {
    return HAL_BUSY;
 80042ee:	2302      	movs	r3, #2
  }
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3720      	adds	r7, #32
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b08a      	sub	sp, #40	; 0x28
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	4613      	mov	r3, r2
 8004304:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800430c:	2b20      	cmp	r3, #32
 800430e:	d137      	bne.n	8004380 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d002      	beq.n	800431c <HAL_UART_Receive_IT+0x24>
 8004316:	88fb      	ldrh	r3, [r7, #6]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d101      	bne.n	8004320 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e030      	b.n	8004382 <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2200      	movs	r2, #0
 8004324:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a18      	ldr	r2, [pc, #96]	; (800438c <HAL_UART_Receive_IT+0x94>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d01f      	beq.n	8004370 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d018      	beq.n	8004370 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	e853 3f00 	ldrex	r3, [r3]
 800434a:	613b      	str	r3, [r7, #16]
   return(result);
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004352:	627b      	str	r3, [r7, #36]	; 0x24
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	461a      	mov	r2, r3
 800435a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435c:	623b      	str	r3, [r7, #32]
 800435e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004360:	69f9      	ldr	r1, [r7, #28]
 8004362:	6a3a      	ldr	r2, [r7, #32]
 8004364:	e841 2300 	strex	r3, r2, [r1]
 8004368:	61bb      	str	r3, [r7, #24]
   return(result);
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1e6      	bne.n	800433e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004370:	88fb      	ldrh	r3, [r7, #6]
 8004372:	461a      	mov	r2, r3
 8004374:	68b9      	ldr	r1, [r7, #8]
 8004376:	68f8      	ldr	r0, [r7, #12]
 8004378:	f000 ff78 	bl	800526c <UART_Start_Receive_IT>
 800437c:	4603      	mov	r3, r0
 800437e:	e000      	b.n	8004382 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004380:	2302      	movs	r3, #2
  }
}
 8004382:	4618      	mov	r0, r3
 8004384:	3728      	adds	r7, #40	; 0x28
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	40008000 	.word	0x40008000

08004390 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b0ba      	sub	sp, #232	; 0xe8
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	69db      	ldr	r3, [r3, #28]
 800439e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80043b6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80043ba:	f640 030f 	movw	r3, #2063	; 0x80f
 80043be:	4013      	ands	r3, r2
 80043c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80043c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d11b      	bne.n	8004404 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80043cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043d0:	f003 0320 	and.w	r3, r3, #32
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d015      	beq.n	8004404 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80043d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043dc:	f003 0320 	and.w	r3, r3, #32
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d105      	bne.n	80043f0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80043e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d009      	beq.n	8004404 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	f000 82e3 	beq.w	80049c0 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	4798      	blx	r3
      }
      return;
 8004402:	e2dd      	b.n	80049c0 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004404:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004408:	2b00      	cmp	r3, #0
 800440a:	f000 8123 	beq.w	8004654 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800440e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004412:	4b8d      	ldr	r3, [pc, #564]	; (8004648 <HAL_UART_IRQHandler+0x2b8>)
 8004414:	4013      	ands	r3, r2
 8004416:	2b00      	cmp	r3, #0
 8004418:	d106      	bne.n	8004428 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800441a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800441e:	4b8b      	ldr	r3, [pc, #556]	; (800464c <HAL_UART_IRQHandler+0x2bc>)
 8004420:	4013      	ands	r3, r2
 8004422:	2b00      	cmp	r3, #0
 8004424:	f000 8116 	beq.w	8004654 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004428:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800442c:	f003 0301 	and.w	r3, r3, #1
 8004430:	2b00      	cmp	r3, #0
 8004432:	d011      	beq.n	8004458 <HAL_UART_IRQHandler+0xc8>
 8004434:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800443c:	2b00      	cmp	r3, #0
 800443e:	d00b      	beq.n	8004458 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2201      	movs	r2, #1
 8004446:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800444e:	f043 0201 	orr.w	r2, r3, #1
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004458:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d011      	beq.n	8004488 <HAL_UART_IRQHandler+0xf8>
 8004464:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004468:	f003 0301 	and.w	r3, r3, #1
 800446c:	2b00      	cmp	r3, #0
 800446e:	d00b      	beq.n	8004488 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2202      	movs	r2, #2
 8004476:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800447e:	f043 0204 	orr.w	r2, r3, #4
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004488:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800448c:	f003 0304 	and.w	r3, r3, #4
 8004490:	2b00      	cmp	r3, #0
 8004492:	d011      	beq.n	80044b8 <HAL_UART_IRQHandler+0x128>
 8004494:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004498:	f003 0301 	and.w	r3, r3, #1
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00b      	beq.n	80044b8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2204      	movs	r2, #4
 80044a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ae:	f043 0202 	orr.w	r2, r3, #2
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80044b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044bc:	f003 0308 	and.w	r3, r3, #8
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d017      	beq.n	80044f4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80044c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044c8:	f003 0320 	and.w	r3, r3, #32
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d105      	bne.n	80044dc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80044d0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80044d4:	4b5c      	ldr	r3, [pc, #368]	; (8004648 <HAL_UART_IRQHandler+0x2b8>)
 80044d6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d00b      	beq.n	80044f4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2208      	movs	r2, #8
 80044e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ea:	f043 0208 	orr.w	r2, r3, #8
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80044f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d012      	beq.n	8004526 <HAL_UART_IRQHandler+0x196>
 8004500:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004504:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d00c      	beq.n	8004526 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004514:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800451c:	f043 0220 	orr.w	r2, r3, #32
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800452c:	2b00      	cmp	r3, #0
 800452e:	f000 8249 	beq.w	80049c4 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004536:	f003 0320 	and.w	r3, r3, #32
 800453a:	2b00      	cmp	r3, #0
 800453c:	d013      	beq.n	8004566 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800453e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004542:	f003 0320 	and.w	r3, r3, #32
 8004546:	2b00      	cmp	r3, #0
 8004548:	d105      	bne.n	8004556 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800454a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800454e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d007      	beq.n	8004566 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800455a:	2b00      	cmp	r3, #0
 800455c:	d003      	beq.n	8004566 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800456c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800457a:	2b40      	cmp	r3, #64	; 0x40
 800457c:	d005      	beq.n	800458a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800457e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004582:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004586:	2b00      	cmp	r3, #0
 8004588:	d054      	beq.n	8004634 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f000 ff8e 	bl	80054ac <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800459a:	2b40      	cmp	r3, #64	; 0x40
 800459c:	d146      	bne.n	800462c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	3308      	adds	r3, #8
 80045a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80045ac:	e853 3f00 	ldrex	r3, [r3]
 80045b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80045b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80045b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	3308      	adds	r3, #8
 80045c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80045ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80045ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80045d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80045da:	e841 2300 	strex	r3, r2, [r1]
 80045de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80045e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1d9      	bne.n	800459e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d017      	beq.n	8004624 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80045fa:	4a15      	ldr	r2, [pc, #84]	; (8004650 <HAL_UART_IRQHandler+0x2c0>)
 80045fc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004604:	4618      	mov	r0, r3
 8004606:	f7fd f98c 	bl	8001922 <HAL_DMA_Abort_IT>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d019      	beq.n	8004644 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800461e:	4610      	mov	r0, r2
 8004620:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004622:	e00f      	b.n	8004644 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f000 f9e0 	bl	80049ea <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800462a:	e00b      	b.n	8004644 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 f9dc 	bl	80049ea <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004632:	e007      	b.n	8004644 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f000 f9d8 	bl	80049ea <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8004642:	e1bf      	b.n	80049c4 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004644:	bf00      	nop
    return;
 8004646:	e1bd      	b.n	80049c4 <HAL_UART_IRQHandler+0x634>
 8004648:	10000001 	.word	0x10000001
 800464c:	04000120 	.word	0x04000120
 8004650:	08005577 	.word	0x08005577

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004658:	2b01      	cmp	r3, #1
 800465a:	f040 8153 	bne.w	8004904 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800465e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004662:	f003 0310 	and.w	r3, r3, #16
 8004666:	2b00      	cmp	r3, #0
 8004668:	f000 814c 	beq.w	8004904 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800466c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004670:	f003 0310 	and.w	r3, r3, #16
 8004674:	2b00      	cmp	r3, #0
 8004676:	f000 8145 	beq.w	8004904 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2210      	movs	r2, #16
 8004680:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800468c:	2b40      	cmp	r3, #64	; 0x40
 800468e:	f040 80bb 	bne.w	8004808 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80046a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	f000 818f 	beq.w	80049c8 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80046b0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80046b4:	429a      	cmp	r2, r3
 80046b6:	f080 8187 	bcs.w	80049c8 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80046c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0320 	and.w	r3, r3, #32
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	f040 8087 	bne.w	80047e6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80046e4:	e853 3f00 	ldrex	r3, [r3]
 80046e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80046ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80046f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	461a      	mov	r2, r3
 80046fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004702:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004706:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800470a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800470e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004712:	e841 2300 	strex	r3, r2, [r1]
 8004716:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800471a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1da      	bne.n	80046d8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	3308      	adds	r3, #8
 8004728:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800472a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800472c:	e853 3f00 	ldrex	r3, [r3]
 8004730:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004732:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004734:	f023 0301 	bic.w	r3, r3, #1
 8004738:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	3308      	adds	r3, #8
 8004742:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004746:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800474a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800474e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004752:	e841 2300 	strex	r3, r2, [r1]
 8004756:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004758:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1e1      	bne.n	8004722 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	3308      	adds	r3, #8
 8004764:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004766:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004768:	e853 3f00 	ldrex	r3, [r3]
 800476c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800476e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004770:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004774:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	3308      	adds	r3, #8
 800477e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004782:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004784:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004786:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004788:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800478a:	e841 2300 	strex	r3, r2, [r1]
 800478e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004790:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004792:	2b00      	cmp	r3, #0
 8004794:	d1e3      	bne.n	800475e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2220      	movs	r2, #32
 800479a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047ac:	e853 3f00 	ldrex	r3, [r3]
 80047b0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80047b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047b4:	f023 0310 	bic.w	r3, r3, #16
 80047b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	461a      	mov	r2, r3
 80047c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80047c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80047c8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80047cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80047ce:	e841 2300 	strex	r3, r2, [r1]
 80047d2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80047d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d1e4      	bne.n	80047a4 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047e0:	4618      	mov	r0, r3
 80047e2:	f7fd f840 	bl	8001866 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2202      	movs	r2, #2
 80047ea:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	1ad3      	subs	r3, r2, r3
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	4619      	mov	r1, r3
 8004800:	6878      	ldr	r0, [r7, #4]
 8004802:	f000 f8fb 	bl	80049fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004806:	e0df      	b.n	80049c8 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004814:	b29b      	uxth	r3, r3
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004822:	b29b      	uxth	r3, r3
 8004824:	2b00      	cmp	r3, #0
 8004826:	f000 80d1 	beq.w	80049cc <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800482a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800482e:	2b00      	cmp	r3, #0
 8004830:	f000 80cc 	beq.w	80049cc <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800483a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800483c:	e853 3f00 	ldrex	r3, [r3]
 8004840:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004844:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004848:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	461a      	mov	r2, r3
 8004852:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004856:	647b      	str	r3, [r7, #68]	; 0x44
 8004858:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800485a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800485c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800485e:	e841 2300 	strex	r3, r2, [r1]
 8004862:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004864:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004866:	2b00      	cmp	r3, #0
 8004868:	d1e4      	bne.n	8004834 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	3308      	adds	r3, #8
 8004870:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004874:	e853 3f00 	ldrex	r3, [r3]
 8004878:	623b      	str	r3, [r7, #32]
   return(result);
 800487a:	6a3b      	ldr	r3, [r7, #32]
 800487c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004880:	f023 0301 	bic.w	r3, r3, #1
 8004884:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	3308      	adds	r3, #8
 800488e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004892:	633a      	str	r2, [r7, #48]	; 0x30
 8004894:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004896:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004898:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800489a:	e841 2300 	strex	r3, r2, [r1]
 800489e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80048a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d1e1      	bne.n	800486a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2220      	movs	r2, #32
 80048aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	e853 3f00 	ldrex	r3, [r3]
 80048c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f023 0310 	bic.w	r3, r3, #16
 80048ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	461a      	mov	r2, r3
 80048d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80048dc:	61fb      	str	r3, [r7, #28]
 80048de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e0:	69b9      	ldr	r1, [r7, #24]
 80048e2:	69fa      	ldr	r2, [r7, #28]
 80048e4:	e841 2300 	strex	r3, r2, [r1]
 80048e8:	617b      	str	r3, [r7, #20]
   return(result);
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d1e4      	bne.n	80048ba <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2202      	movs	r2, #2
 80048f4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80048f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80048fa:	4619      	mov	r1, r3
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f000 f87d 	bl	80049fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004902:	e063      	b.n	80049cc <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004904:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004908:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00e      	beq.n	800492e <HAL_UART_IRQHandler+0x59e>
 8004910:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004914:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004918:	2b00      	cmp	r3, #0
 800491a:	d008      	beq.n	800492e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004924:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f001 fb82 	bl	8006030 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800492c:	e051      	b.n	80049d2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800492e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004936:	2b00      	cmp	r3, #0
 8004938:	d014      	beq.n	8004964 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800493a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800493e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004942:	2b00      	cmp	r3, #0
 8004944:	d105      	bne.n	8004952 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004946:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800494a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d008      	beq.n	8004964 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004956:	2b00      	cmp	r3, #0
 8004958:	d03a      	beq.n	80049d0 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	4798      	blx	r3
    }
    return;
 8004962:	e035      	b.n	80049d0 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800496c:	2b00      	cmp	r3, #0
 800496e:	d009      	beq.n	8004984 <HAL_UART_IRQHandler+0x5f4>
 8004970:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004978:	2b00      	cmp	r3, #0
 800497a:	d003      	beq.n	8004984 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f000 fe10 	bl	80055a2 <UART_EndTransmit_IT>
    return;
 8004982:	e026      	b.n	80049d2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004988:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d009      	beq.n	80049a4 <HAL_UART_IRQHandler+0x614>
 8004990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004994:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004998:	2b00      	cmp	r3, #0
 800499a:	d003      	beq.n	80049a4 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f001 fb59 	bl	8006054 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80049a2:	e016      	b.n	80049d2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80049a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d010      	beq.n	80049d2 <HAL_UART_IRQHandler+0x642>
 80049b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	da0c      	bge.n	80049d2 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f001 fb42 	bl	8006042 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80049be:	e008      	b.n	80049d2 <HAL_UART_IRQHandler+0x642>
      return;
 80049c0:	bf00      	nop
 80049c2:	e006      	b.n	80049d2 <HAL_UART_IRQHandler+0x642>
    return;
 80049c4:	bf00      	nop
 80049c6:	e004      	b.n	80049d2 <HAL_UART_IRQHandler+0x642>
      return;
 80049c8:	bf00      	nop
 80049ca:	e002      	b.n	80049d2 <HAL_UART_IRQHandler+0x642>
      return;
 80049cc:	bf00      	nop
 80049ce:	e000      	b.n	80049d2 <HAL_UART_IRQHandler+0x642>
    return;
 80049d0:	bf00      	nop
  }
}
 80049d2:	37e8      	adds	r7, #232	; 0xe8
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80049e0:	bf00      	nop
 80049e2:	370c      	adds	r7, #12
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bc80      	pop	{r7}
 80049e8:	4770      	bx	lr

080049ea <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80049ea:	b480      	push	{r7}
 80049ec:	b083      	sub	sp, #12
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80049f2:	bf00      	nop
 80049f4:	370c      	adds	r7, #12
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bc80      	pop	{r7}
 80049fa:	4770      	bx	lr

080049fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	460b      	mov	r3, r1
 8004a06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a08:	bf00      	nop
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bc80      	pop	{r7}
 8004a10:	4770      	bx	lr
	...

08004a14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a18:	b08c      	sub	sp, #48	; 0x30
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	689a      	ldr	r2, [r3, #8]
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	691b      	ldr	r3, [r3, #16]
 8004a2c:	431a      	orrs	r2, r3
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	695b      	ldr	r3, [r3, #20]
 8004a32:	431a      	orrs	r2, r3
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	69db      	ldr	r3, [r3, #28]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681a      	ldr	r2, [r3, #0]
 8004a42:	4b94      	ldr	r3, [pc, #592]	; (8004c94 <UART_SetConfig+0x280>)
 8004a44:	4013      	ands	r3, r2
 8004a46:	697a      	ldr	r2, [r7, #20]
 8004a48:	6812      	ldr	r2, [r2, #0]
 8004a4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a4c:	430b      	orrs	r3, r1
 8004a4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	68da      	ldr	r2, [r3, #12]
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	430a      	orrs	r2, r1
 8004a64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	699b      	ldr	r3, [r3, #24]
 8004a6a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a89      	ldr	r2, [pc, #548]	; (8004c98 <UART_SetConfig+0x284>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d004      	beq.n	8004a80 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	6a1b      	ldr	r3, [r3, #32]
 8004a7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004a8a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	6812      	ldr	r2, [r2, #0]
 8004a92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a94:	430b      	orrs	r3, r1
 8004a96:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a9e:	f023 010f 	bic.w	r1, r3, #15
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a7a      	ldr	r2, [pc, #488]	; (8004c9c <UART_SetConfig+0x288>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d127      	bne.n	8004b08 <UART_SetConfig+0xf4>
 8004ab8:	2003      	movs	r0, #3
 8004aba:	f7ff face 	bl	800405a <LL_RCC_GetUSARTClockSource>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8004ac4:	2b03      	cmp	r3, #3
 8004ac6:	d81b      	bhi.n	8004b00 <UART_SetConfig+0xec>
 8004ac8:	a201      	add	r2, pc, #4	; (adr r2, 8004ad0 <UART_SetConfig+0xbc>)
 8004aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ace:	bf00      	nop
 8004ad0:	08004ae1 	.word	0x08004ae1
 8004ad4:	08004af1 	.word	0x08004af1
 8004ad8:	08004ae9 	.word	0x08004ae9
 8004adc:	08004af9 	.word	0x08004af9
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ae6:	e080      	b.n	8004bea <UART_SetConfig+0x1d6>
 8004ae8:	2302      	movs	r3, #2
 8004aea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004aee:	e07c      	b.n	8004bea <UART_SetConfig+0x1d6>
 8004af0:	2304      	movs	r3, #4
 8004af2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004af6:	e078      	b.n	8004bea <UART_SetConfig+0x1d6>
 8004af8:	2308      	movs	r3, #8
 8004afa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004afe:	e074      	b.n	8004bea <UART_SetConfig+0x1d6>
 8004b00:	2310      	movs	r3, #16
 8004b02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b06:	e070      	b.n	8004bea <UART_SetConfig+0x1d6>
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a64      	ldr	r2, [pc, #400]	; (8004ca0 <UART_SetConfig+0x28c>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d138      	bne.n	8004b84 <UART_SetConfig+0x170>
 8004b12:	200c      	movs	r0, #12
 8004b14:	f7ff faa1 	bl	800405a <LL_RCC_GetUSARTClockSource>
 8004b18:	4603      	mov	r3, r0
 8004b1a:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8004b1e:	2b0c      	cmp	r3, #12
 8004b20:	d82c      	bhi.n	8004b7c <UART_SetConfig+0x168>
 8004b22:	a201      	add	r2, pc, #4	; (adr r2, 8004b28 <UART_SetConfig+0x114>)
 8004b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b28:	08004b5d 	.word	0x08004b5d
 8004b2c:	08004b7d 	.word	0x08004b7d
 8004b30:	08004b7d 	.word	0x08004b7d
 8004b34:	08004b7d 	.word	0x08004b7d
 8004b38:	08004b6d 	.word	0x08004b6d
 8004b3c:	08004b7d 	.word	0x08004b7d
 8004b40:	08004b7d 	.word	0x08004b7d
 8004b44:	08004b7d 	.word	0x08004b7d
 8004b48:	08004b65 	.word	0x08004b65
 8004b4c:	08004b7d 	.word	0x08004b7d
 8004b50:	08004b7d 	.word	0x08004b7d
 8004b54:	08004b7d 	.word	0x08004b7d
 8004b58:	08004b75 	.word	0x08004b75
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b62:	e042      	b.n	8004bea <UART_SetConfig+0x1d6>
 8004b64:	2302      	movs	r3, #2
 8004b66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b6a:	e03e      	b.n	8004bea <UART_SetConfig+0x1d6>
 8004b6c:	2304      	movs	r3, #4
 8004b6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b72:	e03a      	b.n	8004bea <UART_SetConfig+0x1d6>
 8004b74:	2308      	movs	r3, #8
 8004b76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b7a:	e036      	b.n	8004bea <UART_SetConfig+0x1d6>
 8004b7c:	2310      	movs	r3, #16
 8004b7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b82:	e032      	b.n	8004bea <UART_SetConfig+0x1d6>
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a43      	ldr	r2, [pc, #268]	; (8004c98 <UART_SetConfig+0x284>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d12a      	bne.n	8004be4 <UART_SetConfig+0x1d0>
 8004b8e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8004b92:	f7ff fa74 	bl	800407e <LL_RCC_GetLPUARTClockSource>
 8004b96:	4603      	mov	r3, r0
 8004b98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004b9c:	d01a      	beq.n	8004bd4 <UART_SetConfig+0x1c0>
 8004b9e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ba2:	d81b      	bhi.n	8004bdc <UART_SetConfig+0x1c8>
 8004ba4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ba8:	d00c      	beq.n	8004bc4 <UART_SetConfig+0x1b0>
 8004baa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004bae:	d815      	bhi.n	8004bdc <UART_SetConfig+0x1c8>
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d003      	beq.n	8004bbc <UART_SetConfig+0x1a8>
 8004bb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bb8:	d008      	beq.n	8004bcc <UART_SetConfig+0x1b8>
 8004bba:	e00f      	b.n	8004bdc <UART_SetConfig+0x1c8>
 8004bbc:	2300      	movs	r3, #0
 8004bbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bc2:	e012      	b.n	8004bea <UART_SetConfig+0x1d6>
 8004bc4:	2302      	movs	r3, #2
 8004bc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bca:	e00e      	b.n	8004bea <UART_SetConfig+0x1d6>
 8004bcc:	2304      	movs	r3, #4
 8004bce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bd2:	e00a      	b.n	8004bea <UART_SetConfig+0x1d6>
 8004bd4:	2308      	movs	r3, #8
 8004bd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bda:	e006      	b.n	8004bea <UART_SetConfig+0x1d6>
 8004bdc:	2310      	movs	r3, #16
 8004bde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004be2:	e002      	b.n	8004bea <UART_SetConfig+0x1d6>
 8004be4:	2310      	movs	r3, #16
 8004be6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a2a      	ldr	r2, [pc, #168]	; (8004c98 <UART_SetConfig+0x284>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	f040 80a4 	bne.w	8004d3e <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004bf6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004bfa:	2b08      	cmp	r3, #8
 8004bfc:	d823      	bhi.n	8004c46 <UART_SetConfig+0x232>
 8004bfe:	a201      	add	r2, pc, #4	; (adr r2, 8004c04 <UART_SetConfig+0x1f0>)
 8004c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c04:	08004c29 	.word	0x08004c29
 8004c08:	08004c47 	.word	0x08004c47
 8004c0c:	08004c31 	.word	0x08004c31
 8004c10:	08004c47 	.word	0x08004c47
 8004c14:	08004c37 	.word	0x08004c37
 8004c18:	08004c47 	.word	0x08004c47
 8004c1c:	08004c47 	.word	0x08004c47
 8004c20:	08004c47 	.word	0x08004c47
 8004c24:	08004c3f 	.word	0x08004c3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c28:	f7fe f856 	bl	8002cd8 <HAL_RCC_GetPCLK1Freq>
 8004c2c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c2e:	e010      	b.n	8004c52 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c30:	4b1c      	ldr	r3, [pc, #112]	; (8004ca4 <UART_SetConfig+0x290>)
 8004c32:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c34:	e00d      	b.n	8004c52 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c36:	f7fd ff9b 	bl	8002b70 <HAL_RCC_GetSysClockFreq>
 8004c3a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004c3c:	e009      	b.n	8004c52 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c42:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004c44:	e005      	b.n	8004c52 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8004c46:	2300      	movs	r3, #0
 8004c48:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004c50:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f000 8137 	beq.w	8004ec8 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c5e:	4a12      	ldr	r2, [pc, #72]	; (8004ca8 <UART_SetConfig+0x294>)
 8004c60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c64:	461a      	mov	r2, r3
 8004c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c68:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c6c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	685a      	ldr	r2, [r3, #4]
 8004c72:	4613      	mov	r3, r2
 8004c74:	005b      	lsls	r3, r3, #1
 8004c76:	4413      	add	r3, r2
 8004c78:	69ba      	ldr	r2, [r7, #24]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d305      	bcc.n	8004c8a <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c84:	69ba      	ldr	r2, [r7, #24]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d910      	bls.n	8004cac <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004c90:	e11a      	b.n	8004ec8 <UART_SetConfig+0x4b4>
 8004c92:	bf00      	nop
 8004c94:	cfff69f3 	.word	0xcfff69f3
 8004c98:	40008000 	.word	0x40008000
 8004c9c:	40013800 	.word	0x40013800
 8004ca0:	40004400 	.word	0x40004400
 8004ca4:	00f42400 	.word	0x00f42400
 8004ca8:	0800a4fc 	.word	0x0800a4fc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cae:	2200      	movs	r2, #0
 8004cb0:	60bb      	str	r3, [r7, #8]
 8004cb2:	60fa      	str	r2, [r7, #12]
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb8:	4a8e      	ldr	r2, [pc, #568]	; (8004ef4 <UART_SetConfig+0x4e0>)
 8004cba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	603b      	str	r3, [r7, #0]
 8004cc4:	607a      	str	r2, [r7, #4]
 8004cc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004cce:	f7fb faaf 	bl	8000230 <__aeabi_uldivmod>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	4610      	mov	r0, r2
 8004cd8:	4619      	mov	r1, r3
 8004cda:	f04f 0200 	mov.w	r2, #0
 8004cde:	f04f 0300 	mov.w	r3, #0
 8004ce2:	020b      	lsls	r3, r1, #8
 8004ce4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004ce8:	0202      	lsls	r2, r0, #8
 8004cea:	6979      	ldr	r1, [r7, #20]
 8004cec:	6849      	ldr	r1, [r1, #4]
 8004cee:	0849      	lsrs	r1, r1, #1
 8004cf0:	2000      	movs	r0, #0
 8004cf2:	460c      	mov	r4, r1
 8004cf4:	4605      	mov	r5, r0
 8004cf6:	eb12 0804 	adds.w	r8, r2, r4
 8004cfa:	eb43 0905 	adc.w	r9, r3, r5
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	469a      	mov	sl, r3
 8004d06:	4693      	mov	fp, r2
 8004d08:	4652      	mov	r2, sl
 8004d0a:	465b      	mov	r3, fp
 8004d0c:	4640      	mov	r0, r8
 8004d0e:	4649      	mov	r1, r9
 8004d10:	f7fb fa8e 	bl	8000230 <__aeabi_uldivmod>
 8004d14:	4602      	mov	r2, r0
 8004d16:	460b      	mov	r3, r1
 8004d18:	4613      	mov	r3, r2
 8004d1a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d1c:	6a3b      	ldr	r3, [r7, #32]
 8004d1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d22:	d308      	bcc.n	8004d36 <UART_SetConfig+0x322>
 8004d24:	6a3b      	ldr	r3, [r7, #32]
 8004d26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d2a:	d204      	bcs.n	8004d36 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	6a3a      	ldr	r2, [r7, #32]
 8004d32:	60da      	str	r2, [r3, #12]
 8004d34:	e0c8      	b.n	8004ec8 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004d3c:	e0c4      	b.n	8004ec8 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	69db      	ldr	r3, [r3, #28]
 8004d42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d46:	d167      	bne.n	8004e18 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8004d48:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004d4c:	2b08      	cmp	r3, #8
 8004d4e:	d828      	bhi.n	8004da2 <UART_SetConfig+0x38e>
 8004d50:	a201      	add	r2, pc, #4	; (adr r2, 8004d58 <UART_SetConfig+0x344>)
 8004d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d56:	bf00      	nop
 8004d58:	08004d7d 	.word	0x08004d7d
 8004d5c:	08004d85 	.word	0x08004d85
 8004d60:	08004d8d 	.word	0x08004d8d
 8004d64:	08004da3 	.word	0x08004da3
 8004d68:	08004d93 	.word	0x08004d93
 8004d6c:	08004da3 	.word	0x08004da3
 8004d70:	08004da3 	.word	0x08004da3
 8004d74:	08004da3 	.word	0x08004da3
 8004d78:	08004d9b 	.word	0x08004d9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d7c:	f7fd ffac 	bl	8002cd8 <HAL_RCC_GetPCLK1Freq>
 8004d80:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d82:	e014      	b.n	8004dae <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d84:	f7fd ffba 	bl	8002cfc <HAL_RCC_GetPCLK2Freq>
 8004d88:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d8a:	e010      	b.n	8004dae <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d8c:	4b5a      	ldr	r3, [pc, #360]	; (8004ef8 <UART_SetConfig+0x4e4>)
 8004d8e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004d90:	e00d      	b.n	8004dae <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d92:	f7fd feed 	bl	8002b70 <HAL_RCC_GetSysClockFreq>
 8004d96:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004d98:	e009      	b.n	8004dae <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d9e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004da0:	e005      	b.n	8004dae <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8004da2:	2300      	movs	r3, #0
 8004da4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004dac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	f000 8089 	beq.w	8004ec8 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dba:	4a4e      	ldr	r2, [pc, #312]	; (8004ef4 <UART_SetConfig+0x4e0>)
 8004dbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc4:	fbb3 f3f2 	udiv	r3, r3, r2
 8004dc8:	005a      	lsls	r2, r3, #1
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	085b      	lsrs	r3, r3, #1
 8004dd0:	441a      	add	r2, r3
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dda:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ddc:	6a3b      	ldr	r3, [r7, #32]
 8004dde:	2b0f      	cmp	r3, #15
 8004de0:	d916      	bls.n	8004e10 <UART_SetConfig+0x3fc>
 8004de2:	6a3b      	ldr	r3, [r7, #32]
 8004de4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004de8:	d212      	bcs.n	8004e10 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004dea:	6a3b      	ldr	r3, [r7, #32]
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	f023 030f 	bic.w	r3, r3, #15
 8004df2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004df4:	6a3b      	ldr	r3, [r7, #32]
 8004df6:	085b      	lsrs	r3, r3, #1
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	f003 0307 	and.w	r3, r3, #7
 8004dfe:	b29a      	uxth	r2, r3
 8004e00:	8bfb      	ldrh	r3, [r7, #30]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	8bfa      	ldrh	r2, [r7, #30]
 8004e0c:	60da      	str	r2, [r3, #12]
 8004e0e:	e05b      	b.n	8004ec8 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004e16:	e057      	b.n	8004ec8 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e18:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004e1c:	2b08      	cmp	r3, #8
 8004e1e:	d828      	bhi.n	8004e72 <UART_SetConfig+0x45e>
 8004e20:	a201      	add	r2, pc, #4	; (adr r2, 8004e28 <UART_SetConfig+0x414>)
 8004e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e26:	bf00      	nop
 8004e28:	08004e4d 	.word	0x08004e4d
 8004e2c:	08004e55 	.word	0x08004e55
 8004e30:	08004e5d 	.word	0x08004e5d
 8004e34:	08004e73 	.word	0x08004e73
 8004e38:	08004e63 	.word	0x08004e63
 8004e3c:	08004e73 	.word	0x08004e73
 8004e40:	08004e73 	.word	0x08004e73
 8004e44:	08004e73 	.word	0x08004e73
 8004e48:	08004e6b 	.word	0x08004e6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e4c:	f7fd ff44 	bl	8002cd8 <HAL_RCC_GetPCLK1Freq>
 8004e50:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e52:	e014      	b.n	8004e7e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e54:	f7fd ff52 	bl	8002cfc <HAL_RCC_GetPCLK2Freq>
 8004e58:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e5a:	e010      	b.n	8004e7e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e5c:	4b26      	ldr	r3, [pc, #152]	; (8004ef8 <UART_SetConfig+0x4e4>)
 8004e5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004e60:	e00d      	b.n	8004e7e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e62:	f7fd fe85 	bl	8002b70 <HAL_RCC_GetSysClockFreq>
 8004e66:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e68:	e009      	b.n	8004e7e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004e70:	e005      	b.n	8004e7e <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8004e72:	2300      	movs	r3, #0
 8004e74:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004e7c:	bf00      	nop
    }

    if (pclk != 0U)
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d021      	beq.n	8004ec8 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e88:	4a1a      	ldr	r2, [pc, #104]	; (8004ef4 <UART_SetConfig+0x4e0>)
 8004e8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e8e:	461a      	mov	r2, r3
 8004e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e92:	fbb3 f2f2 	udiv	r2, r3, r2
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	085b      	lsrs	r3, r3, #1
 8004e9c:	441a      	add	r2, r3
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ea8:	6a3b      	ldr	r3, [r7, #32]
 8004eaa:	2b0f      	cmp	r3, #15
 8004eac:	d909      	bls.n	8004ec2 <UART_SetConfig+0x4ae>
 8004eae:	6a3b      	ldr	r3, [r7, #32]
 8004eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004eb4:	d205      	bcs.n	8004ec2 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004eb6:	6a3b      	ldr	r3, [r7, #32]
 8004eb8:	b29a      	uxth	r2, r3
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	60da      	str	r2, [r3, #12]
 8004ec0:	e002      	b.n	8004ec8 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	2200      	movs	r2, #0
 8004edc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004ee4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3730      	adds	r7, #48	; 0x30
 8004eec:	46bd      	mov	sp, r7
 8004eee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ef2:	bf00      	nop
 8004ef4:	0800a4fc 	.word	0x0800a4fc
 8004ef8:	00f42400 	.word	0x00f42400

08004efc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f08:	f003 0301 	and.w	r3, r3, #1
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d00a      	beq.n	8004f26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	430a      	orrs	r2, r1
 8004f24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f2a:	f003 0302 	and.w	r3, r3, #2
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00a      	beq.n	8004f48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	430a      	orrs	r2, r1
 8004f46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f4c:	f003 0304 	and.w	r3, r3, #4
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d00a      	beq.n	8004f6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	430a      	orrs	r2, r1
 8004f68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f6e:	f003 0308 	and.w	r3, r3, #8
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00a      	beq.n	8004f8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	430a      	orrs	r2, r1
 8004f8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f90:	f003 0310 	and.w	r3, r3, #16
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00a      	beq.n	8004fae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	430a      	orrs	r2, r1
 8004fac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb2:	f003 0320 	and.w	r3, r3, #32
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00a      	beq.n	8004fd0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	430a      	orrs	r2, r1
 8004fce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d01a      	beq.n	8005012 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	430a      	orrs	r2, r1
 8004ff0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ff6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ffa:	d10a      	bne.n	8005012 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	430a      	orrs	r2, r1
 8005010:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800501a:	2b00      	cmp	r3, #0
 800501c:	d00a      	beq.n	8005034 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	430a      	orrs	r2, r1
 8005032:	605a      	str	r2, [r3, #4]
  }
}
 8005034:	bf00      	nop
 8005036:	370c      	adds	r7, #12
 8005038:	46bd      	mov	sp, r7
 800503a:	bc80      	pop	{r7}
 800503c:	4770      	bx	lr

0800503e <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800503e:	b580      	push	{r7, lr}
 8005040:	b086      	sub	sp, #24
 8005042:	af02      	add	r7, sp, #8
 8005044:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2200      	movs	r2, #0
 800504a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800504e:	f7fc f90f 	bl	8001270 <HAL_GetTick>
 8005052:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0308 	and.w	r3, r3, #8
 800505e:	2b08      	cmp	r3, #8
 8005060:	d10e      	bne.n	8005080 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005062:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005066:	9300      	str	r3, [sp, #0]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2200      	movs	r2, #0
 800506c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 f832 	bl	80050da <UART_WaitOnFlagUntilTimeout>
 8005076:	4603      	mov	r3, r0
 8005078:	2b00      	cmp	r3, #0
 800507a:	d001      	beq.n	8005080 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800507c:	2303      	movs	r3, #3
 800507e:	e028      	b.n	80050d2 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0304 	and.w	r3, r3, #4
 800508a:	2b04      	cmp	r3, #4
 800508c:	d10e      	bne.n	80050ac <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800508e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005092:	9300      	str	r3, [sp, #0]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2200      	movs	r2, #0
 8005098:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f000 f81c 	bl	80050da <UART_WaitOnFlagUntilTimeout>
 80050a2:	4603      	mov	r3, r0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d001      	beq.n	80050ac <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	e012      	b.n	80050d2 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2220      	movs	r2, #32
 80050b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2220      	movs	r2, #32
 80050b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2200      	movs	r2, #0
 80050c0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3710      	adds	r7, #16
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}

080050da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80050da:	b580      	push	{r7, lr}
 80050dc:	b09c      	sub	sp, #112	; 0x70
 80050de:	af00      	add	r7, sp, #0
 80050e0:	60f8      	str	r0, [r7, #12]
 80050e2:	60b9      	str	r1, [r7, #8]
 80050e4:	603b      	str	r3, [r7, #0]
 80050e6:	4613      	mov	r3, r2
 80050e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050ea:	e0a9      	b.n	8005240 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050f2:	f000 80a5 	beq.w	8005240 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050f6:	f7fc f8bb 	bl	8001270 <HAL_GetTick>
 80050fa:	4602      	mov	r2, r0
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	1ad3      	subs	r3, r2, r3
 8005100:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005102:	429a      	cmp	r2, r3
 8005104:	d302      	bcc.n	800510c <UART_WaitOnFlagUntilTimeout+0x32>
 8005106:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005108:	2b00      	cmp	r3, #0
 800510a:	d140      	bne.n	800518e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005112:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005114:	e853 3f00 	ldrex	r3, [r3]
 8005118:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800511a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800511c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005120:	667b      	str	r3, [r7, #100]	; 0x64
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	461a      	mov	r2, r3
 8005128:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800512a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800512c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800512e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005130:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005132:	e841 2300 	strex	r3, r2, [r1]
 8005136:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005138:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1e6      	bne.n	800510c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	3308      	adds	r3, #8
 8005144:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005148:	e853 3f00 	ldrex	r3, [r3]
 800514c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800514e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005150:	f023 0301 	bic.w	r3, r3, #1
 8005154:	663b      	str	r3, [r7, #96]	; 0x60
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	3308      	adds	r3, #8
 800515c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800515e:	64ba      	str	r2, [r7, #72]	; 0x48
 8005160:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005162:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005164:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005166:	e841 2300 	strex	r3, r2, [r1]
 800516a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800516c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800516e:	2b00      	cmp	r3, #0
 8005170:	d1e5      	bne.n	800513e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2220      	movs	r2, #32
 8005176:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2220      	movs	r2, #32
 800517e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2200      	movs	r2, #0
 8005186:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e069      	b.n	8005262 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0304 	and.w	r3, r3, #4
 8005198:	2b00      	cmp	r3, #0
 800519a:	d051      	beq.n	8005240 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	69db      	ldr	r3, [r3, #28]
 80051a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051aa:	d149      	bne.n	8005240 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80051b4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051be:	e853 3f00 	ldrex	r3, [r3]
 80051c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80051ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	461a      	mov	r2, r3
 80051d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051d4:	637b      	str	r3, [r7, #52]	; 0x34
 80051d6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80051da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051dc:	e841 2300 	strex	r3, r2, [r1]
 80051e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80051e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d1e6      	bne.n	80051b6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	3308      	adds	r3, #8
 80051ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	e853 3f00 	ldrex	r3, [r3]
 80051f6:	613b      	str	r3, [r7, #16]
   return(result);
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	f023 0301 	bic.w	r3, r3, #1
 80051fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	3308      	adds	r3, #8
 8005206:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005208:	623a      	str	r2, [r7, #32]
 800520a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800520c:	69f9      	ldr	r1, [r7, #28]
 800520e:	6a3a      	ldr	r2, [r7, #32]
 8005210:	e841 2300 	strex	r3, r2, [r1]
 8005214:	61bb      	str	r3, [r7, #24]
   return(result);
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d1e5      	bne.n	80051e8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2220      	movs	r2, #32
 8005220:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	2220      	movs	r2, #32
 8005228:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2220      	movs	r2, #32
 8005230:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e010      	b.n	8005262 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	69da      	ldr	r2, [r3, #28]
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	4013      	ands	r3, r2
 800524a:	68ba      	ldr	r2, [r7, #8]
 800524c:	429a      	cmp	r2, r3
 800524e:	bf0c      	ite	eq
 8005250:	2301      	moveq	r3, #1
 8005252:	2300      	movne	r3, #0
 8005254:	b2db      	uxtb	r3, r3
 8005256:	461a      	mov	r2, r3
 8005258:	79fb      	ldrb	r3, [r7, #7]
 800525a:	429a      	cmp	r2, r3
 800525c:	f43f af46 	beq.w	80050ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005260:	2300      	movs	r3, #0
}
 8005262:	4618      	mov	r0, r3
 8005264:	3770      	adds	r7, #112	; 0x70
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
	...

0800526c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800526c:	b480      	push	{r7}
 800526e:	b0a3      	sub	sp, #140	; 0x8c
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	4613      	mov	r3, r2
 8005278:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	68ba      	ldr	r2, [r7, #8]
 800527e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	88fa      	ldrh	r2, [r7, #6]
 8005284:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	88fa      	ldrh	r2, [r7, #6]
 800528c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2200      	movs	r2, #0
 8005294:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800529e:	d10e      	bne.n	80052be <UART_Start_Receive_IT+0x52>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d105      	bne.n	80052b4 <UART_Start_Receive_IT+0x48>
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f240 12ff 	movw	r2, #511	; 0x1ff
 80052ae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80052b2:	e02d      	b.n	8005310 <UART_Start_Receive_IT+0xa4>
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	22ff      	movs	r2, #255	; 0xff
 80052b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80052bc:	e028      	b.n	8005310 <UART_Start_Receive_IT+0xa4>
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d10d      	bne.n	80052e2 <UART_Start_Receive_IT+0x76>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d104      	bne.n	80052d8 <UART_Start_Receive_IT+0x6c>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	22ff      	movs	r2, #255	; 0xff
 80052d2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80052d6:	e01b      	b.n	8005310 <UART_Start_Receive_IT+0xa4>
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	227f      	movs	r2, #127	; 0x7f
 80052dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80052e0:	e016      	b.n	8005310 <UART_Start_Receive_IT+0xa4>
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052ea:	d10d      	bne.n	8005308 <UART_Start_Receive_IT+0x9c>
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	691b      	ldr	r3, [r3, #16]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d104      	bne.n	80052fe <UART_Start_Receive_IT+0x92>
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	227f      	movs	r2, #127	; 0x7f
 80052f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80052fc:	e008      	b.n	8005310 <UART_Start_Receive_IT+0xa4>
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	223f      	movs	r2, #63	; 0x3f
 8005302:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005306:	e003      	b.n	8005310 <UART_Start_Receive_IT+0xa4>
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2200      	movs	r2, #0
 800530c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2200      	movs	r2, #0
 8005314:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	2222      	movs	r2, #34	; 0x22
 800531c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	3308      	adds	r3, #8
 8005326:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005328:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800532a:	e853 3f00 	ldrex	r3, [r3]
 800532e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005330:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005332:	f043 0301 	orr.w	r3, r3, #1
 8005336:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	3308      	adds	r3, #8
 8005340:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005344:	673a      	str	r2, [r7, #112]	; 0x70
 8005346:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005348:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800534a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800534c:	e841 2300 	strex	r3, r2, [r1]
 8005350:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8005352:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005354:	2b00      	cmp	r3, #0
 8005356:	d1e3      	bne.n	8005320 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800535c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005360:	d14f      	bne.n	8005402 <UART_Start_Receive_IT+0x196>
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005368:	88fa      	ldrh	r2, [r7, #6]
 800536a:	429a      	cmp	r2, r3
 800536c:	d349      	bcc.n	8005402 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005376:	d107      	bne.n	8005388 <UART_Start_Receive_IT+0x11c>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d103      	bne.n	8005388 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	4a46      	ldr	r2, [pc, #280]	; (800549c <UART_Start_Receive_IT+0x230>)
 8005384:	675a      	str	r2, [r3, #116]	; 0x74
 8005386:	e002      	b.n	800538e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	4a45      	ldr	r2, [pc, #276]	; (80054a0 <UART_Start_Receive_IT+0x234>)
 800538c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d01a      	beq.n	80053cc <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800539c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800539e:	e853 3f00 	ldrex	r3, [r3]
 80053a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80053a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	461a      	mov	r2, r3
 80053b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80053b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053ba:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053bc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80053be:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80053c0:	e841 2300 	strex	r3, r2, [r1]
 80053c4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80053c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d1e4      	bne.n	8005396 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	3308      	adds	r3, #8
 80053d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053d6:	e853 3f00 	ldrex	r3, [r3]
 80053da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80053dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053e2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	3308      	adds	r3, #8
 80053ea:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80053ec:	64ba      	str	r2, [r7, #72]	; 0x48
 80053ee:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80053f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053f4:	e841 2300 	strex	r3, r2, [r1]
 80053f8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80053fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d1e5      	bne.n	80053cc <UART_Start_Receive_IT+0x160>
 8005400:	e046      	b.n	8005490 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800540a:	d107      	bne.n	800541c <UART_Start_Receive_IT+0x1b0>
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d103      	bne.n	800541c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	4a23      	ldr	r2, [pc, #140]	; (80054a4 <UART_Start_Receive_IT+0x238>)
 8005418:	675a      	str	r2, [r3, #116]	; 0x74
 800541a:	e002      	b.n	8005422 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	4a22      	ldr	r2, [pc, #136]	; (80054a8 <UART_Start_Receive_IT+0x23c>)
 8005420:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d019      	beq.n	800545e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005432:	e853 3f00 	ldrex	r3, [r3]
 8005436:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800543e:	677b      	str	r3, [r7, #116]	; 0x74
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	461a      	mov	r2, r3
 8005446:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005448:	637b      	str	r3, [r7, #52]	; 0x34
 800544a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800544e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005450:	e841 2300 	strex	r3, r2, [r1]
 8005454:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005458:	2b00      	cmp	r3, #0
 800545a:	d1e6      	bne.n	800542a <UART_Start_Receive_IT+0x1be>
 800545c:	e018      	b.n	8005490 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	e853 3f00 	ldrex	r3, [r3]
 800546a:	613b      	str	r3, [r7, #16]
   return(result);
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	f043 0320 	orr.w	r3, r3, #32
 8005472:	67bb      	str	r3, [r7, #120]	; 0x78
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	461a      	mov	r2, r3
 800547a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800547c:	623b      	str	r3, [r7, #32]
 800547e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005480:	69f9      	ldr	r1, [r7, #28]
 8005482:	6a3a      	ldr	r2, [r7, #32]
 8005484:	e841 2300 	strex	r3, r2, [r1]
 8005488:	61bb      	str	r3, [r7, #24]
   return(result);
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1e6      	bne.n	800545e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	378c      	adds	r7, #140	; 0x8c
 8005496:	46bd      	mov	sp, r7
 8005498:	bc80      	pop	{r7}
 800549a:	4770      	bx	lr
 800549c:	08005cc9 	.word	0x08005cc9
 80054a0:	08005969 	.word	0x08005969
 80054a4:	080057b1 	.word	0x080057b1
 80054a8:	080055f9 	.word	0x080055f9

080054ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b095      	sub	sp, #84	; 0x54
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054bc:	e853 3f00 	ldrex	r3, [r3]
 80054c0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80054c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80054c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	461a      	mov	r2, r3
 80054d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054d2:	643b      	str	r3, [r7, #64]	; 0x40
 80054d4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80054d8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80054da:	e841 2300 	strex	r3, r2, [r1]
 80054de:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d1e6      	bne.n	80054b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	3308      	adds	r3, #8
 80054ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ee:	6a3b      	ldr	r3, [r7, #32]
 80054f0:	e853 3f00 	ldrex	r3, [r3]
 80054f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054fc:	f023 0301 	bic.w	r3, r3, #1
 8005500:	64bb      	str	r3, [r7, #72]	; 0x48
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	3308      	adds	r3, #8
 8005508:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800550a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800550c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800550e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005510:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005512:	e841 2300 	strex	r3, r2, [r1]
 8005516:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551a:	2b00      	cmp	r3, #0
 800551c:	d1e3      	bne.n	80054e6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005522:	2b01      	cmp	r3, #1
 8005524:	d118      	bne.n	8005558 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	e853 3f00 	ldrex	r3, [r3]
 8005532:	60bb      	str	r3, [r7, #8]
   return(result);
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	f023 0310 	bic.w	r3, r3, #16
 800553a:	647b      	str	r3, [r7, #68]	; 0x44
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	461a      	mov	r2, r3
 8005542:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005544:	61bb      	str	r3, [r7, #24]
 8005546:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005548:	6979      	ldr	r1, [r7, #20]
 800554a:	69ba      	ldr	r2, [r7, #24]
 800554c:	e841 2300 	strex	r3, r2, [r1]
 8005550:	613b      	str	r3, [r7, #16]
   return(result);
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d1e6      	bne.n	8005526 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2220      	movs	r2, #32
 800555c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2200      	movs	r2, #0
 8005564:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800556c:	bf00      	nop
 800556e:	3754      	adds	r7, #84	; 0x54
 8005570:	46bd      	mov	sp, r7
 8005572:	bc80      	pop	{r7}
 8005574:	4770      	bx	lr

08005576 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005576:	b580      	push	{r7, lr}
 8005578:	b084      	sub	sp, #16
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005582:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2200      	movs	r2, #0
 8005590:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005594:	68f8      	ldr	r0, [r7, #12]
 8005596:	f7ff fa28 	bl	80049ea <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800559a:	bf00      	nop
 800559c:	3710      	adds	r7, #16
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80055a2:	b580      	push	{r7, lr}
 80055a4:	b088      	sub	sp, #32
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	e853 3f00 	ldrex	r3, [r3]
 80055b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055be:	61fb      	str	r3, [r7, #28]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	461a      	mov	r2, r3
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	61bb      	str	r3, [r7, #24]
 80055ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055cc:	6979      	ldr	r1, [r7, #20]
 80055ce:	69ba      	ldr	r2, [r7, #24]
 80055d0:	e841 2300 	strex	r3, r2, [r1]
 80055d4:	613b      	str	r3, [r7, #16]
   return(result);
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d1e6      	bne.n	80055aa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2220      	movs	r2, #32
 80055e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f7ff f9f4 	bl	80049d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055f0:	bf00      	nop
 80055f2:	3720      	adds	r7, #32
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b09c      	sub	sp, #112	; 0x70
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005606:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005610:	2b22      	cmp	r3, #34	; 0x22
 8005612:	f040 80be 	bne.w	8005792 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005620:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005624:	b2d9      	uxtb	r1, r3
 8005626:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800562a:	b2da      	uxtb	r2, r3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005630:	400a      	ands	r2, r1
 8005632:	b2d2      	uxtb	r2, r2
 8005634:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800563a:	1c5a      	adds	r2, r3, #1
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005646:	b29b      	uxth	r3, r3
 8005648:	3b01      	subs	r3, #1
 800564a:	b29a      	uxth	r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005658:	b29b      	uxth	r3, r3
 800565a:	2b00      	cmp	r3, #0
 800565c:	f040 80a1 	bne.w	80057a2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005666:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005668:	e853 3f00 	ldrex	r3, [r3]
 800566c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800566e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005670:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005674:	66bb      	str	r3, [r7, #104]	; 0x68
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	461a      	mov	r2, r3
 800567c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800567e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005680:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005682:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005684:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005686:	e841 2300 	strex	r3, r2, [r1]
 800568a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800568c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800568e:	2b00      	cmp	r3, #0
 8005690:	d1e6      	bne.n	8005660 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	3308      	adds	r3, #8
 8005698:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800569a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800569c:	e853 3f00 	ldrex	r3, [r3]
 80056a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80056a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056a4:	f023 0301 	bic.w	r3, r3, #1
 80056a8:	667b      	str	r3, [r7, #100]	; 0x64
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	3308      	adds	r3, #8
 80056b0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80056b2:	647a      	str	r2, [r7, #68]	; 0x44
 80056b4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80056b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80056ba:	e841 2300 	strex	r3, r2, [r1]
 80056be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80056c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d1e5      	bne.n	8005692 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2220      	movs	r2, #32
 80056ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a33      	ldr	r2, [pc, #204]	; (80057ac <UART_RxISR_8BIT+0x1b4>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d01f      	beq.n	8005724 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	685b      	ldr	r3, [r3, #4]
 80056ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d018      	beq.n	8005724 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fa:	e853 3f00 	ldrex	r3, [r3]
 80056fe:	623b      	str	r3, [r7, #32]
   return(result);
 8005700:	6a3b      	ldr	r3, [r7, #32]
 8005702:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005706:	663b      	str	r3, [r7, #96]	; 0x60
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	461a      	mov	r2, r3
 800570e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005710:	633b      	str	r3, [r7, #48]	; 0x30
 8005712:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005714:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005716:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005718:	e841 2300 	strex	r3, r2, [r1]
 800571c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800571e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005720:	2b00      	cmp	r3, #0
 8005722:	d1e6      	bne.n	80056f2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005728:	2b01      	cmp	r3, #1
 800572a:	d12e      	bne.n	800578a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	e853 3f00 	ldrex	r3, [r3]
 800573e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f023 0310 	bic.w	r3, r3, #16
 8005746:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	461a      	mov	r2, r3
 800574e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005750:	61fb      	str	r3, [r7, #28]
 8005752:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005754:	69b9      	ldr	r1, [r7, #24]
 8005756:	69fa      	ldr	r2, [r7, #28]
 8005758:	e841 2300 	strex	r3, r2, [r1]
 800575c:	617b      	str	r3, [r7, #20]
   return(result);
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d1e6      	bne.n	8005732 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	69db      	ldr	r3, [r3, #28]
 800576a:	f003 0310 	and.w	r3, r3, #16
 800576e:	2b10      	cmp	r3, #16
 8005770:	d103      	bne.n	800577a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	2210      	movs	r2, #16
 8005778:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005780:	4619      	mov	r1, r3
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f7ff f93a 	bl	80049fc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005788:	e00b      	b.n	80057a2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 fe4a 	bl	8006424 <HAL_UART_RxCpltCallback>
}
 8005790:	e007      	b.n	80057a2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	699a      	ldr	r2, [r3, #24]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f042 0208 	orr.w	r2, r2, #8
 80057a0:	619a      	str	r2, [r3, #24]
}
 80057a2:	bf00      	nop
 80057a4:	3770      	adds	r7, #112	; 0x70
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	40008000 	.word	0x40008000

080057b0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b09c      	sub	sp, #112	; 0x70
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80057be:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057c8:	2b22      	cmp	r3, #34	; 0x22
 80057ca:	f040 80be 	bne.w	800594a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057dc:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80057de:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80057e2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80057e6:	4013      	ands	r3, r2
 80057e8:	b29a      	uxth	r2, r3
 80057ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80057ec:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057f2:	1c9a      	adds	r2, r3, #2
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80057fe:	b29b      	uxth	r3, r3
 8005800:	3b01      	subs	r3, #1
 8005802:	b29a      	uxth	r2, r3
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005810:	b29b      	uxth	r3, r3
 8005812:	2b00      	cmp	r3, #0
 8005814:	f040 80a1 	bne.w	800595a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800581e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005820:	e853 3f00 	ldrex	r3, [r3]
 8005824:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005826:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005828:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800582c:	667b      	str	r3, [r7, #100]	; 0x64
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	461a      	mov	r2, r3
 8005834:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005836:	657b      	str	r3, [r7, #84]	; 0x54
 8005838:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800583a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800583c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800583e:	e841 2300 	strex	r3, r2, [r1]
 8005842:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005844:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005846:	2b00      	cmp	r3, #0
 8005848:	d1e6      	bne.n	8005818 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	3308      	adds	r3, #8
 8005850:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005854:	e853 3f00 	ldrex	r3, [r3]
 8005858:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800585a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585c:	f023 0301 	bic.w	r3, r3, #1
 8005860:	663b      	str	r3, [r7, #96]	; 0x60
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	3308      	adds	r3, #8
 8005868:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800586a:	643a      	str	r2, [r7, #64]	; 0x40
 800586c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800586e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005870:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005872:	e841 2300 	strex	r3, r2, [r1]
 8005876:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800587a:	2b00      	cmp	r3, #0
 800587c:	d1e5      	bne.n	800584a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2220      	movs	r2, #32
 8005882:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a33      	ldr	r2, [pc, #204]	; (8005964 <UART_RxISR_16BIT+0x1b4>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d01f      	beq.n	80058dc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d018      	beq.n	80058dc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b0:	6a3b      	ldr	r3, [r7, #32]
 80058b2:	e853 3f00 	ldrex	r3, [r3]
 80058b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80058be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	461a      	mov	r2, r3
 80058c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058ca:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058d0:	e841 2300 	strex	r3, r2, [r1]
 80058d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80058d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d1e6      	bne.n	80058aa <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d12e      	bne.n	8005942 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	e853 3f00 	ldrex	r3, [r3]
 80058f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	f023 0310 	bic.w	r3, r3, #16
 80058fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	461a      	mov	r2, r3
 8005906:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005908:	61bb      	str	r3, [r7, #24]
 800590a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800590c:	6979      	ldr	r1, [r7, #20]
 800590e:	69ba      	ldr	r2, [r7, #24]
 8005910:	e841 2300 	strex	r3, r2, [r1]
 8005914:	613b      	str	r3, [r7, #16]
   return(result);
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d1e6      	bne.n	80058ea <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	69db      	ldr	r3, [r3, #28]
 8005922:	f003 0310 	and.w	r3, r3, #16
 8005926:	2b10      	cmp	r3, #16
 8005928:	d103      	bne.n	8005932 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	2210      	movs	r2, #16
 8005930:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005938:	4619      	mov	r1, r3
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f7ff f85e 	bl	80049fc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005940:	e00b      	b.n	800595a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 fd6e 	bl	8006424 <HAL_UART_RxCpltCallback>
}
 8005948:	e007      	b.n	800595a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	699a      	ldr	r2, [r3, #24]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f042 0208 	orr.w	r2, r2, #8
 8005958:	619a      	str	r2, [r3, #24]
}
 800595a:	bf00      	nop
 800595c:	3770      	adds	r7, #112	; 0x70
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
 8005962:	bf00      	nop
 8005964:	40008000 	.word	0x40008000

08005968 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b0ac      	sub	sp, #176	; 0xb0
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005976:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	69db      	ldr	r3, [r3, #28]
 8005980:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800599e:	2b22      	cmp	r3, #34	; 0x22
 80059a0:	f040 8182 	bne.w	8005ca8 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80059aa:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80059ae:	e125      	b.n	8005bfc <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059b6:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80059ba:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80059be:	b2d9      	uxtb	r1, r3
 80059c0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80059c4:	b2da      	uxtb	r2, r3
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059ca:	400a      	ands	r2, r1
 80059cc:	b2d2      	uxtb	r2, r2
 80059ce:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059d4:	1c5a      	adds	r2, r3, #1
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	3b01      	subs	r3, #1
 80059e4:	b29a      	uxth	r2, r3
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	69db      	ldr	r3, [r3, #28]
 80059f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80059f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80059fa:	f003 0307 	and.w	r3, r3, #7
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d053      	beq.n	8005aaa <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005a02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a06:	f003 0301 	and.w	r3, r3, #1
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d011      	beq.n	8005a32 <UART_RxISR_8BIT_FIFOEN+0xca>
 8005a0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005a12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d00b      	beq.n	8005a32 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a28:	f043 0201 	orr.w	r2, r3, #1
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a36:	f003 0302 	and.w	r3, r3, #2
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d011      	beq.n	8005a62 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8005a3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a42:	f003 0301 	and.w	r3, r3, #1
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00b      	beq.n	8005a62 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	2202      	movs	r2, #2
 8005a50:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a58:	f043 0204 	orr.w	r2, r3, #4
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a66:	f003 0304 	and.w	r3, r3, #4
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d011      	beq.n	8005a92 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8005a6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a72:	f003 0301 	and.w	r3, r3, #1
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00b      	beq.n	8005a92 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2204      	movs	r2, #4
 8005a80:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a88:	f043 0202 	orr.w	r2, r3, #2
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d006      	beq.n	8005aaa <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f7fe ffa4 	bl	80049ea <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	f040 80a2 	bne.w	8005bfc <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005abe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ac0:	e853 3f00 	ldrex	r3, [r3]
 8005ac4:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8005ac6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ac8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005acc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ada:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005adc:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ade:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8005ae0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005ae2:	e841 2300 	strex	r3, r2, [r1]
 8005ae6:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8005ae8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d1e4      	bne.n	8005ab8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	3308      	adds	r3, #8
 8005af4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005af8:	e853 3f00 	ldrex	r3, [r3]
 8005afc:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8005afe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b04:	f023 0301 	bic.w	r3, r3, #1
 8005b08:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	3308      	adds	r3, #8
 8005b12:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005b16:	66ba      	str	r2, [r7, #104]	; 0x68
 8005b18:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b1a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8005b1c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005b1e:	e841 2300 	strex	r3, r2, [r1]
 8005b22:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005b24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d1e1      	bne.n	8005aee <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2220      	movs	r2, #32
 8005b2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a5f      	ldr	r2, [pc, #380]	; (8005cc0 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d021      	beq.n	8005b8c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d01a      	beq.n	8005b8c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b5e:	e853 3f00 	ldrex	r3, [r3]
 8005b62:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005b64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b66:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005b6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	461a      	mov	r2, r3
 8005b74:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005b78:	657b      	str	r3, [r7, #84]	; 0x54
 8005b7a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b7c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005b7e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005b80:	e841 2300 	strex	r3, r2, [r1]
 8005b84:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005b86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d1e4      	bne.n	8005b56 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d130      	bne.n	8005bf6 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2200      	movs	r2, #0
 8005b98:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ba2:	e853 3f00 	ldrex	r3, [r3]
 8005ba6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005baa:	f023 0310 	bic.w	r3, r3, #16
 8005bae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005bbc:	643b      	str	r3, [r7, #64]	; 0x40
 8005bbe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005bc2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005bc4:	e841 2300 	strex	r3, r2, [r1]
 8005bc8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d1e4      	bne.n	8005b9a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	69db      	ldr	r3, [r3, #28]
 8005bd6:	f003 0310 	and.w	r3, r3, #16
 8005bda:	2b10      	cmp	r3, #16
 8005bdc:	d103      	bne.n	8005be6 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	2210      	movs	r2, #16
 8005be4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005bec:	4619      	mov	r1, r3
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f7fe ff04 	bl	80049fc <HAL_UARTEx_RxEventCallback>
 8005bf4:	e002      	b.n	8005bfc <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 fc14 	bl	8006424 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005bfc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d006      	beq.n	8005c12 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8005c04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c08:	f003 0320 	and.w	r3, r3, #32
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	f47f aecf 	bne.w	80059b0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005c18:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005c1c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d049      	beq.n	8005cb8 <UART_RxISR_8BIT_FIFOEN+0x350>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005c2a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d242      	bcs.n	8005cb8 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	3308      	adds	r3, #8
 8005c38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c3a:	6a3b      	ldr	r3, [r7, #32]
 8005c3c:	e853 3f00 	ldrex	r3, [r3]
 8005c40:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	3308      	adds	r3, #8
 8005c52:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005c56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c58:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c5a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c5e:	e841 2300 	strex	r3, r2, [r1]
 8005c62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d1e3      	bne.n	8005c32 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a15      	ldr	r2, [pc, #84]	; (8005cc4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8005c6e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	e853 3f00 	ldrex	r3, [r3]
 8005c7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	f043 0320 	orr.w	r3, r3, #32
 8005c84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005c92:	61bb      	str	r3, [r7, #24]
 8005c94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c96:	6979      	ldr	r1, [r7, #20]
 8005c98:	69ba      	ldr	r2, [r7, #24]
 8005c9a:	e841 2300 	strex	r3, r2, [r1]
 8005c9e:	613b      	str	r3, [r7, #16]
   return(result);
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d1e4      	bne.n	8005c70 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005ca6:	e007      	b.n	8005cb8 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	699a      	ldr	r2, [r3, #24]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f042 0208 	orr.w	r2, r2, #8
 8005cb6:	619a      	str	r2, [r3, #24]
}
 8005cb8:	bf00      	nop
 8005cba:	37b0      	adds	r7, #176	; 0xb0
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}
 8005cc0:	40008000 	.word	0x40008000
 8005cc4:	080055f9 	.word	0x080055f9

08005cc8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b0ae      	sub	sp, #184	; 0xb8
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005cd6:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	69db      	ldr	r3, [r3, #28]
 8005ce0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cfe:	2b22      	cmp	r3, #34	; 0x22
 8005d00:	f040 8186 	bne.w	8006010 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005d0a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005d0e:	e129      	b.n	8005f64 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d16:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8005d22:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8005d26:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	b29a      	uxth	r2, r3
 8005d2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d32:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d38:	1c9a      	adds	r2, r3, #2
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	3b01      	subs	r3, #1
 8005d48:	b29a      	uxth	r2, r3
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	69db      	ldr	r3, [r3, #28]
 8005d56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005d5a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005d5e:	f003 0307 	and.w	r3, r3, #7
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d053      	beq.n	8005e0e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005d66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005d6a:	f003 0301 	and.w	r3, r3, #1
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d011      	beq.n	8005d96 <UART_RxISR_16BIT_FIFOEN+0xce>
 8005d72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d00b      	beq.n	8005d96 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	2201      	movs	r2, #1
 8005d84:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005d8c:	f043 0201 	orr.w	r2, r3, #1
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d96:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005d9a:	f003 0302 	and.w	r3, r3, #2
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d011      	beq.n	8005dc6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8005da2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005da6:	f003 0301 	and.w	r3, r3, #1
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00b      	beq.n	8005dc6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	2202      	movs	r2, #2
 8005db4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dbc:	f043 0204 	orr.w	r2, r3, #4
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005dc6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005dca:	f003 0304 	and.w	r3, r3, #4
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d011      	beq.n	8005df6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8005dd2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005dd6:	f003 0301 	and.w	r3, r3, #1
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d00b      	beq.n	8005df6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	2204      	movs	r2, #4
 8005de4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dec:	f043 0202 	orr.w	r2, r3, #2
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d006      	beq.n	8005e0e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e00:	6878      	ldr	r0, [r7, #4]
 8005e02:	f7fe fdf2 	bl	80049ea <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005e14:	b29b      	uxth	r3, r3
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	f040 80a4 	bne.w	8005f64 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e24:	e853 3f00 	ldrex	r3, [r3]
 8005e28:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005e2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	461a      	mov	r2, r3
 8005e3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005e3e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e42:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e44:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005e46:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005e4a:	e841 2300 	strex	r3, r2, [r1]
 8005e4e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005e50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d1e2      	bne.n	8005e1c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	3308      	adds	r3, #8
 8005e5c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e60:	e853 3f00 	ldrex	r3, [r3]
 8005e64:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005e66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e6c:	f023 0301 	bic.w	r3, r3, #1
 8005e70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	3308      	adds	r3, #8
 8005e7a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8005e7e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005e80:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e82:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005e84:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005e86:	e841 2300 	strex	r3, r2, [r1]
 8005e8a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005e8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d1e1      	bne.n	8005e56 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2220      	movs	r2, #32
 8005e96:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4a5f      	ldr	r2, [pc, #380]	; (8006028 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d021      	beq.n	8005ef4 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d01a      	beq.n	8005ef4 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ec6:	e853 3f00 	ldrex	r3, [r3]
 8005eca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005ecc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ece:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005ed2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	461a      	mov	r2, r3
 8005edc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005ee0:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ee2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005ee6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ee8:	e841 2300 	strex	r3, r2, [r1]
 8005eec:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005eee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d1e4      	bne.n	8005ebe <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d130      	bne.n	8005f5e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f0a:	e853 3f00 	ldrex	r3, [r3]
 8005f0e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f12:	f023 0310 	bic.w	r3, r3, #16
 8005f16:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	461a      	mov	r2, r3
 8005f20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005f24:	647b      	str	r3, [r7, #68]	; 0x44
 8005f26:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f28:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f2c:	e841 2300 	strex	r3, r2, [r1]
 8005f30:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d1e4      	bne.n	8005f02 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	69db      	ldr	r3, [r3, #28]
 8005f3e:	f003 0310 	and.w	r3, r3, #16
 8005f42:	2b10      	cmp	r3, #16
 8005f44:	d103      	bne.n	8005f4e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	2210      	movs	r2, #16
 8005f4c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005f54:	4619      	mov	r1, r3
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f7fe fd50 	bl	80049fc <HAL_UARTEx_RxEventCallback>
 8005f5c:	e002      	b.n	8005f64 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 fa60 	bl	8006424 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005f64:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d006      	beq.n	8005f7a <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8005f6c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005f70:	f003 0320 	and.w	r3, r3, #32
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	f47f aecb 	bne.w	8005d10 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005f80:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005f84:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d049      	beq.n	8006020 <UART_RxISR_16BIT_FIFOEN+0x358>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005f92:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d242      	bcs.n	8006020 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	3308      	adds	r3, #8
 8005fa0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa4:	e853 3f00 	ldrex	r3, [r3]
 8005fa8:	623b      	str	r3, [r7, #32]
   return(result);
 8005faa:	6a3b      	ldr	r3, [r7, #32]
 8005fac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	3308      	adds	r3, #8
 8005fba:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8005fbe:	633a      	str	r2, [r7, #48]	; 0x30
 8005fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fc6:	e841 2300 	strex	r3, r2, [r1]
 8005fca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d1e3      	bne.n	8005f9a <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a15      	ldr	r2, [pc, #84]	; (800602c <UART_RxISR_16BIT_FIFOEN+0x364>)
 8005fd6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	e853 3f00 	ldrex	r3, [r3]
 8005fe4:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f043 0320 	orr.w	r3, r3, #32
 8005fec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ffa:	61fb      	str	r3, [r7, #28]
 8005ffc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ffe:	69b9      	ldr	r1, [r7, #24]
 8006000:	69fa      	ldr	r2, [r7, #28]
 8006002:	e841 2300 	strex	r3, r2, [r1]
 8006006:	617b      	str	r3, [r7, #20]
   return(result);
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d1e4      	bne.n	8005fd8 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800600e:	e007      	b.n	8006020 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	699a      	ldr	r2, [r3, #24]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f042 0208 	orr.w	r2, r2, #8
 800601e:	619a      	str	r2, [r3, #24]
}
 8006020:	bf00      	nop
 8006022:	37b8      	adds	r7, #184	; 0xb8
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}
 8006028:	40008000 	.word	0x40008000
 800602c:	080057b1 	.word	0x080057b1

08006030 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006030:	b480      	push	{r7}
 8006032:	b083      	sub	sp, #12
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006038:	bf00      	nop
 800603a:	370c      	adds	r7, #12
 800603c:	46bd      	mov	sp, r7
 800603e:	bc80      	pop	{r7}
 8006040:	4770      	bx	lr

08006042 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006042:	b480      	push	{r7}
 8006044:	b083      	sub	sp, #12
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800604a:	bf00      	nop
 800604c:	370c      	adds	r7, #12
 800604e:	46bd      	mov	sp, r7
 8006050:	bc80      	pop	{r7}
 8006052:	4770      	bx	lr

08006054 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006054:	b480      	push	{r7}
 8006056:	b083      	sub	sp, #12
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800605c:	bf00      	nop
 800605e:	370c      	adds	r7, #12
 8006060:	46bd      	mov	sp, r7
 8006062:	bc80      	pop	{r7}
 8006064:	4770      	bx	lr

08006066 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006066:	b480      	push	{r7}
 8006068:	b085      	sub	sp, #20
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006074:	2b01      	cmp	r3, #1
 8006076:	d101      	bne.n	800607c <HAL_UARTEx_DisableFifoMode+0x16>
 8006078:	2302      	movs	r3, #2
 800607a:	e027      	b.n	80060cc <HAL_UARTEx_DisableFifoMode+0x66>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2224      	movs	r2, #36	; 0x24
 8006088:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f022 0201 	bic.w	r2, r2, #1
 80060a2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80060aa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2200      	movs	r2, #0
 80060b0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	68fa      	ldr	r2, [r7, #12]
 80060b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2220      	movs	r2, #32
 80060be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80060ca:	2300      	movs	r3, #0
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3714      	adds	r7, #20
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bc80      	pop	{r7}
 80060d4:	4770      	bx	lr

080060d6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80060d6:	b580      	push	{r7, lr}
 80060d8:	b084      	sub	sp, #16
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
 80060de:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80060e6:	2b01      	cmp	r3, #1
 80060e8:	d101      	bne.n	80060ee <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80060ea:	2302      	movs	r3, #2
 80060ec:	e02d      	b.n	800614a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2201      	movs	r2, #1
 80060f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2224      	movs	r2, #36	; 0x24
 80060fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f022 0201 	bic.w	r2, r2, #1
 8006114:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	683a      	ldr	r2, [r7, #0]
 8006126:	430a      	orrs	r2, r1
 8006128:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 f850 	bl	80061d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	68fa      	ldr	r2, [r7, #12]
 8006136:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2220      	movs	r2, #32
 800613c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006148:	2300      	movs	r3, #0
}
 800614a:	4618      	mov	r0, r3
 800614c:	3710      	adds	r7, #16
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}

08006152 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006152:	b580      	push	{r7, lr}
 8006154:	b084      	sub	sp, #16
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
 800615a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006162:	2b01      	cmp	r3, #1
 8006164:	d101      	bne.n	800616a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006166:	2302      	movs	r3, #2
 8006168:	e02d      	b.n	80061c6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2201      	movs	r2, #1
 800616e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2224      	movs	r2, #36	; 0x24
 8006176:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f022 0201 	bic.w	r2, r2, #1
 8006190:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	683a      	ldr	r2, [r7, #0]
 80061a2:	430a      	orrs	r2, r1
 80061a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	f000 f812 	bl	80061d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2220      	movs	r2, #32
 80061b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80061c4:	2300      	movs	r3, #0
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3710      	adds	r7, #16
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
	...

080061d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b085      	sub	sp, #20
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d108      	bne.n	80061f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80061f0:	e031      	b.n	8006256 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80061f2:	2308      	movs	r3, #8
 80061f4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80061f6:	2308      	movs	r3, #8
 80061f8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	689b      	ldr	r3, [r3, #8]
 8006200:	0e5b      	lsrs	r3, r3, #25
 8006202:	b2db      	uxtb	r3, r3
 8006204:	f003 0307 	and.w	r3, r3, #7
 8006208:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	0f5b      	lsrs	r3, r3, #29
 8006212:	b2db      	uxtb	r3, r3
 8006214:	f003 0307 	and.w	r3, r3, #7
 8006218:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800621a:	7bbb      	ldrb	r3, [r7, #14]
 800621c:	7b3a      	ldrb	r2, [r7, #12]
 800621e:	4910      	ldr	r1, [pc, #64]	; (8006260 <UARTEx_SetNbDataToProcess+0x90>)
 8006220:	5c8a      	ldrb	r2, [r1, r2]
 8006222:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006226:	7b3a      	ldrb	r2, [r7, #12]
 8006228:	490e      	ldr	r1, [pc, #56]	; (8006264 <UARTEx_SetNbDataToProcess+0x94>)
 800622a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800622c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006230:	b29a      	uxth	r2, r3
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006238:	7bfb      	ldrb	r3, [r7, #15]
 800623a:	7b7a      	ldrb	r2, [r7, #13]
 800623c:	4908      	ldr	r1, [pc, #32]	; (8006260 <UARTEx_SetNbDataToProcess+0x90>)
 800623e:	5c8a      	ldrb	r2, [r1, r2]
 8006240:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006244:	7b7a      	ldrb	r2, [r7, #13]
 8006246:	4907      	ldr	r1, [pc, #28]	; (8006264 <UARTEx_SetNbDataToProcess+0x94>)
 8006248:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800624a:	fb93 f3f2 	sdiv	r3, r3, r2
 800624e:	b29a      	uxth	r2, r3
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006256:	bf00      	nop
 8006258:	3714      	adds	r7, #20
 800625a:	46bd      	mov	sp, r7
 800625c:	bc80      	pop	{r7}
 800625e:	4770      	bx	lr
 8006260:	0800a514 	.word	0x0800a514
 8006264:	0800a51c 	.word	0x0800a51c

08006268 <serialPutStr>:

#include "Uart.h"


void serialPutStr(const char *data)
{
 8006268:	b590      	push	{r4, r7, lr}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
   //Get exclusive access
  //osAcquireMutex(&uartMutex);
  HAL_UART_Transmit(Get_DebugHandle(),(uint8_t *)data, strlen(data),DEBUG_UART_TIMEOUT);
 8006270:	f7fa fc5e 	bl	8000b30 <Get_DebugHandle>
 8006274:	4604      	mov	r4, r0
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f7f9 ff82 	bl	8000180 <strlen>
 800627c:	4603      	mov	r3, r0
 800627e:	b29a      	uxth	r2, r3
 8006280:	230a      	movs	r3, #10
 8006282:	6879      	ldr	r1, [r7, #4]
 8006284:	4620      	mov	r0, r4
 8006286:	f7fd ffb1 	bl	80041ec <HAL_UART_Transmit>
  //osReleaseMutex(&uartMutex);

}
 800628a:	bf00      	nop
 800628c:	370c      	adds	r7, #12
 800628e:	46bd      	mov	sp, r7
 8006290:	bd90      	pop	{r4, r7, pc}
	...

08006294 <terminalTaskHandler>:



/* USER CODE END Header_terminalTaskHandler */
void terminalTaskHandler(void const * argument)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b084      	sub	sp, #16
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	int tCommandReady = 0;
 800629c:	2300      	movs	r3, #0
 800629e:	60fb      	str	r3, [r7, #12]
	char tRxedChar;
	HAL_UART_Receive_IT(Get_DebugHandle(),(uint8_t*)uartData,UART_RECEIVE_SIZE);
 80062a0:	f7fa fc46 	bl	8000b30 <Get_DebugHandle>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2201      	movs	r2, #1
 80062a8:	490f      	ldr	r1, [pc, #60]	; (80062e8 <terminalTaskHandler+0x54>)
 80062aa:	4618      	mov	r0, r3
 80062ac:	f7fe f824 	bl	80042f8 <HAL_UART_Receive_IT>
	/* Infinite loop */
	for(;;)
	{
		/* Process Terminal Commands */
		if(xQueueReceive(Get_TerminalQueueHandle(),&tRxedChar,QUEUE_TIMEOUT))
 80062b0:	f7fa fc48 	bl	8000b44 <Get_TerminalQueueHandle>
 80062b4:	f107 030b 	add.w	r3, r7, #11
 80062b8:	220a      	movs	r2, #10
 80062ba:	4619      	mov	r1, r3
 80062bc:	f000 fd06 	bl	8006ccc <xQueueReceive>
 80062c0:	4603      	mov	r3, r0
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d00c      	beq.n	80062e0 <terminalTaskHandler+0x4c>
		{
			tCommandReady = CommandLineBuildCommand(tRxedChar);
 80062c6:	7afb      	ldrb	r3, [r7, #11]
 80062c8:	4618      	mov	r0, r3
 80062ca:	f000 f811 	bl	80062f0 <CommandLineBuildCommand>
 80062ce:	60f8      	str	r0, [r7, #12]
			if(tCommandReady)
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d004      	beq.n	80062e0 <terminalTaskHandler+0x4c>
			{
				CommandLineProcessCommand(gCommandBuffer);
 80062d6:	4805      	ldr	r0, [pc, #20]	; (80062ec <terminalTaskHandler+0x58>)
 80062d8:	f000 f852 	bl	8006380 <CommandLineProcessCommand>
				tCommandReady = 0;
 80062dc:	2300      	movs	r3, #0
 80062de:	60fb      	str	r3, [r7, #12]
			}
		}
		osDelay(1);
 80062e0:	2001      	movs	r0, #1
 80062e2:	f000 f931 	bl	8006548 <osDelay>
		if(xQueueReceive(Get_TerminalQueueHandle(),&tRxedChar,QUEUE_TIMEOUT))
 80062e6:	e7e3      	b.n	80062b0 <terminalTaskHandler+0x1c>
 80062e8:	20000a80 	.word	0x20000a80
 80062ec:	20000a84 	.word	0x20000a84

080062f0 <CommandLineBuildCommand>:
}


static uint16_t commandBuilderIdx = 0;
int CommandLineBuildCommand(char nextChar)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b083      	sub	sp, #12
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	4603      	mov	r3, r0
 80062f8:	71fb      	strb	r3, [r7, #7]
	/* Don't store any new line characters or spaces. */
	if ((nextChar == '\n') || (nextChar == ' ') || (nextChar == '\t'))
 80062fa:	79fb      	ldrb	r3, [r7, #7]
 80062fc:	2b0a      	cmp	r3, #10
 80062fe:	d005      	beq.n	800630c <CommandLineBuildCommand+0x1c>
 8006300:	79fb      	ldrb	r3, [r7, #7]
 8006302:	2b20      	cmp	r3, #32
 8006304:	d002      	beq.n	800630c <CommandLineBuildCommand+0x1c>
 8006306:	79fb      	ldrb	r3, [r7, #7]
 8006308:	2b09      	cmp	r3, #9
 800630a:	d101      	bne.n	8006310 <CommandLineBuildCommand+0x20>
	{
		return false;
 800630c:	2300      	movs	r3, #0
 800630e:	e02d      	b.n	800636c <CommandLineBuildCommand+0x7c>
	}
	/* The completed command has been received. Replace the final carriage
	 * return character with a NULL character to help with processing the
	 * command. */
	if (nextChar == '\r')
 8006310:	79fb      	ldrb	r3, [r7, #7]
 8006312:	2b0d      	cmp	r3, #13
 8006314:	d10a      	bne.n	800632c <CommandLineBuildCommand+0x3c>
	{
		gCommandBuffer[commandBuilderIdx] = '\0';
 8006316:	4b18      	ldr	r3, [pc, #96]	; (8006378 <CommandLineBuildCommand+0x88>)
 8006318:	881b      	ldrh	r3, [r3, #0]
 800631a:	461a      	mov	r2, r3
 800631c:	4b17      	ldr	r3, [pc, #92]	; (800637c <CommandLineBuildCommand+0x8c>)
 800631e:	2100      	movs	r1, #0
 8006320:	5499      	strb	r1, [r3, r2]
		commandBuilderIdx = 0;
 8006322:	4b15      	ldr	r3, [pc, #84]	; (8006378 <CommandLineBuildCommand+0x88>)
 8006324:	2200      	movs	r2, #0
 8006326:	801a      	strh	r2, [r3, #0]
		return true;
 8006328:	2301      	movs	r3, #1
 800632a:	e01f      	b.n	800636c <CommandLineBuildCommand+0x7c>
	}
	/* Convert the incoming character to uppercase. This matches the case
	 * of commands in the command table. Then store the received character
	 * in the command buffer. */
	gCommandBuffer[commandBuilderIdx] = TO_UPPER(nextChar);
 800632c:	79fb      	ldrb	r3, [r7, #7]
 800632e:	2b60      	cmp	r3, #96	; 0x60
 8006330:	d906      	bls.n	8006340 <CommandLineBuildCommand+0x50>
 8006332:	79fb      	ldrb	r3, [r7, #7]
 8006334:	2b7a      	cmp	r3, #122	; 0x7a
 8006336:	d803      	bhi.n	8006340 <CommandLineBuildCommand+0x50>
 8006338:	79fb      	ldrb	r3, [r7, #7]
 800633a:	3b20      	subs	r3, #32
 800633c:	b2db      	uxtb	r3, r3
 800633e:	e000      	b.n	8006342 <CommandLineBuildCommand+0x52>
 8006340:	79fb      	ldrb	r3, [r7, #7]
 8006342:	4a0d      	ldr	r2, [pc, #52]	; (8006378 <CommandLineBuildCommand+0x88>)
 8006344:	8812      	ldrh	r2, [r2, #0]
 8006346:	4611      	mov	r1, r2
 8006348:	4a0c      	ldr	r2, [pc, #48]	; (800637c <CommandLineBuildCommand+0x8c>)
 800634a:	5453      	strb	r3, [r2, r1]
	commandBuilderIdx++;
 800634c:	4b0a      	ldr	r3, [pc, #40]	; (8006378 <CommandLineBuildCommand+0x88>)
 800634e:	881b      	ldrh	r3, [r3, #0]
 8006350:	3301      	adds	r3, #1
 8006352:	b29a      	uxth	r2, r3
 8006354:	4b08      	ldr	r3, [pc, #32]	; (8006378 <CommandLineBuildCommand+0x88>)
 8006356:	801a      	strh	r2, [r3, #0]
	/* If the command is too long, reset the index and process
	 * the current command buffer. */
	if (commandBuilderIdx >= MAX_COMMAND_LEN)
 8006358:	4b07      	ldr	r3, [pc, #28]	; (8006378 <CommandLineBuildCommand+0x88>)
 800635a:	881b      	ldrh	r3, [r3, #0]
 800635c:	2b77      	cmp	r3, #119	; 0x77
 800635e:	d904      	bls.n	800636a <CommandLineBuildCommand+0x7a>
	{
		commandBuilderIdx = 0;
 8006360:	4b05      	ldr	r3, [pc, #20]	; (8006378 <CommandLineBuildCommand+0x88>)
 8006362:	2200      	movs	r2, #0
 8006364:	801a      	strh	r2, [r3, #0]
		return true;
 8006366:	2301      	movs	r3, #1
 8006368:	e000      	b.n	800636c <CommandLineBuildCommand+0x7c>
	}

	return false;
 800636a:	2300      	movs	r3, #0

}
 800636c:	4618      	mov	r0, r3
 800636e:	370c      	adds	r7, #12
 8006370:	46bd      	mov	sp, r7
 8006372:	bc80      	pop	{r7}
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop
 8006378:	20000b68 	.word	0x20000b68
 800637c:	20000a84 	.word	0x20000a84

08006380 <CommandLineProcessCommand>:

void CommandLineProcessCommand(char * buffer)
{
 8006380:	b590      	push	{r4, r7, lr}
 8006382:	b087      	sub	sp, #28
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]

	int idx;
	int CommandFound = false;
 8006388:	2300      	movs	r3, #0
 800638a:	613b      	str	r3, [r7, #16]
	char *Com= strtok(buffer,"+");
 800638c:	4921      	ldr	r1, [pc, #132]	; (8006414 <CommandLineProcessCommand+0x94>)
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f002 fff0 	bl	8009374 <strtok>
 8006394:	60f8      	str	r0, [r7, #12]
	char *Arg = strtok(NULL,"+");
 8006396:	491f      	ldr	r1, [pc, #124]	; (8006414 <CommandLineProcessCommand+0x94>)
 8006398:	2000      	movs	r0, #0
 800639a:	f002 ffeb 	bl	8009374 <strtok>
 800639e:	60b8      	str	r0, [r7, #8]

	/* Search for the command in the command table until it is found or
	 * the end of the table is reached. If the command is found, break
	 * out of the loop. */
	for (idx = 0; gCommandTable[idx].name != NULL; idx++)
 80063a0:	2300      	movs	r3, #0
 80063a2:	617b      	str	r3, [r7, #20]
 80063a4:	e020      	b.n	80063e8 <CommandLineProcessCommand+0x68>
	{
		if (strncmp(gCommandTable[idx].name, buffer,strlen(gCommandTable[idx].name)) == 0)
 80063a6:	4a1c      	ldr	r2, [pc, #112]	; (8006418 <CommandLineProcessCommand+0x98>)
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 80063ae:	4a1a      	ldr	r2, [pc, #104]	; (8006418 <CommandLineProcessCommand+0x98>)
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80063b6:	4618      	mov	r0, r3
 80063b8:	f7f9 fee2 	bl	8000180 <strlen>
 80063bc:	4603      	mov	r3, r0
 80063be:	461a      	mov	r2, r3
 80063c0:	6879      	ldr	r1, [r7, #4]
 80063c2:	4620      	mov	r0, r4
 80063c4:	f002 ffc1 	bl	800934a <strncmp>
 80063c8:	4603      	mov	r3, r0
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d109      	bne.n	80063e2 <CommandLineProcessCommand+0x62>
		{
			CommandFound = true;
 80063ce:	2301      	movs	r3, #1
 80063d0:	613b      	str	r3, [r7, #16]
			(*gCommandTable[idx].function)(Arg);
 80063d2:	4a11      	ldr	r2, [pc, #68]	; (8006418 <CommandLineProcessCommand+0x98>)
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	00db      	lsls	r3, r3, #3
 80063d8:	4413      	add	r3, r2
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	68b8      	ldr	r0, [r7, #8]
 80063de:	4798      	blx	r3
			break;
 80063e0:	e008      	b.n	80063f4 <CommandLineProcessCommand+0x74>
	for (idx = 0; gCommandTable[idx].name != NULL; idx++)
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	3301      	adds	r3, #1
 80063e6:	617b      	str	r3, [r7, #20]
 80063e8:	4a0b      	ldr	r2, [pc, #44]	; (8006418 <CommandLineProcessCommand+0x98>)
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d1d8      	bne.n	80063a6 <CommandLineProcessCommand+0x26>
		}
	}
	/* If the command was found, call the command function. Otherwise,
	 * output an error message. */
	if (CommandFound==false)
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d107      	bne.n	800640a <CommandLineProcessCommand+0x8a>
	{
		snprintf(TerminalMsgBuffer, sizeof(TerminalMsgBuffer), "ERROR,Command not found\n");
 80063fa:	4a08      	ldr	r2, [pc, #32]	; (800641c <CommandLineProcessCommand+0x9c>)
 80063fc:	2164      	movs	r1, #100	; 0x64
 80063fe:	4808      	ldr	r0, [pc, #32]	; (8006420 <CommandLineProcessCommand+0xa0>)
 8006400:	f002 ff2c 	bl	800925c <sniprintf>
		serialPutStr(TerminalMsgBuffer);
 8006404:	4806      	ldr	r0, [pc, #24]	; (8006420 <CommandLineProcessCommand+0xa0>)
 8006406:	f7ff ff2f 	bl	8006268 <serialPutStr>
	}
}
 800640a:	bf00      	nop
 800640c:	371c      	adds	r7, #28
 800640e:	46bd      	mov	sp, r7
 8006410:	bd90      	pop	{r4, r7, pc}
 8006412:	bf00      	nop
 8006414:	0800a424 	.word	0x0800a424
 8006418:	0800a524 	.word	0x0800a524
 800641c:	0800a428 	.word	0x0800a428
 8006420:	20000b00 	.word	0x20000b00

08006424 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b082      	sub	sp, #8
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]

	if(huart->Instance==USART2)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a0c      	ldr	r2, [pc, #48]	; (8006464 <HAL_UART_RxCpltCallback+0x40>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d112      	bne.n	800645c <HAL_UART_RxCpltCallback+0x38>
	{
		HAL_UART_Receive_IT(Get_DebugHandle(),(uint8_t*)uartData,UART_RECEIVE_SIZE);
 8006436:	f7fa fb7b 	bl	8000b30 <Get_DebugHandle>
 800643a:	4603      	mov	r3, r0
 800643c:	2201      	movs	r2, #1
 800643e:	490a      	ldr	r1, [pc, #40]	; (8006468 <HAL_UART_RxCpltCallback+0x44>)
 8006440:	4618      	mov	r0, r3
 8006442:	f7fd ff59 	bl	80042f8 <HAL_UART_Receive_IT>
		cValuetoPost = (char)uartData[0];
 8006446:	4b08      	ldr	r3, [pc, #32]	; (8006468 <HAL_UART_RxCpltCallback+0x44>)
 8006448:	781a      	ldrb	r2, [r3, #0]
 800644a:	4b08      	ldr	r3, [pc, #32]	; (800646c <HAL_UART_RxCpltCallback+0x48>)
 800644c:	701a      	strb	r2, [r3, #0]
		xQueueSendToBackFromISR(Get_TerminalQueueHandle(),(void*)&cValuetoPost,&xHigherPrioritTaskWoken);
 800644e:	f7fa fb79 	bl	8000b44 <Get_TerminalQueueHandle>
 8006452:	2300      	movs	r3, #0
 8006454:	4a06      	ldr	r2, [pc, #24]	; (8006470 <HAL_UART_RxCpltCallback+0x4c>)
 8006456:	4905      	ldr	r1, [pc, #20]	; (800646c <HAL_UART_RxCpltCallback+0x48>)
 8006458:	f000 fba0 	bl	8006b9c <xQueueGenericSendFromISR>
	}
}
 800645c:	bf00      	nop
 800645e:	3708      	adds	r7, #8
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}
 8006464:	40004400 	.word	0x40004400
 8006468:	20000a80 	.word	0x20000a80
 800646c:	20000a7c 	.word	0x20000a7c
 8006470:	20000b64 	.word	0x20000b64

08006474 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8006474:	b480      	push	{r7}
 8006476:	b085      	sub	sp, #20
 8006478:	af00      	add	r7, sp, #0
 800647a:	4603      	mov	r3, r0
 800647c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800647e:	2300      	movs	r3, #0
 8006480:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8006482:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006486:	2b84      	cmp	r3, #132	; 0x84
 8006488:	d005      	beq.n	8006496 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800648a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	4413      	add	r3, r2
 8006492:	3303      	adds	r3, #3
 8006494:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006496:	68fb      	ldr	r3, [r7, #12]
}
 8006498:	4618      	mov	r0, r3
 800649a:	3714      	adds	r7, #20
 800649c:	46bd      	mov	sp, r7
 800649e:	bc80      	pop	{r7}
 80064a0:	4770      	bx	lr

080064a2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80064a2:	b580      	push	{r7, lr}
 80064a4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80064a6:	f001 f83b 	bl	8007520 <vTaskStartScheduler>
  
  return osOK;
 80064aa:	2300      	movs	r3, #0
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	bd80      	pop	{r7, pc}

080064b0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80064b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80064b2:	b089      	sub	sp, #36	; 0x24
 80064b4:	af04      	add	r7, sp, #16
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	695b      	ldr	r3, [r3, #20]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d020      	beq.n	8006504 <osThreadCreate+0x54>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	699b      	ldr	r3, [r3, #24]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d01c      	beq.n	8006504 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	685c      	ldr	r4, [r3, #4]
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681d      	ldr	r5, [r3, #0]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	691e      	ldr	r6, [r3, #16]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80064dc:	4618      	mov	r0, r3
 80064de:	f7ff ffc9 	bl	8006474 <makeFreeRtosPriority>
 80064e2:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	695b      	ldr	r3, [r3, #20]
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80064ec:	9202      	str	r2, [sp, #8]
 80064ee:	9301      	str	r3, [sp, #4]
 80064f0:	9100      	str	r1, [sp, #0]
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	4632      	mov	r2, r6
 80064f6:	4629      	mov	r1, r5
 80064f8:	4620      	mov	r0, r4
 80064fa:	f000 fe33 	bl	8007164 <xTaskCreateStatic>
 80064fe:	4603      	mov	r3, r0
 8006500:	60fb      	str	r3, [r7, #12]
 8006502:	e01c      	b.n	800653e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	685c      	ldr	r4, [r3, #4]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006510:	b29e      	uxth	r6, r3
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8006518:	4618      	mov	r0, r3
 800651a:	f7ff ffab 	bl	8006474 <makeFreeRtosPriority>
 800651e:	4602      	mov	r2, r0
 8006520:	f107 030c 	add.w	r3, r7, #12
 8006524:	9301      	str	r3, [sp, #4]
 8006526:	9200      	str	r2, [sp, #0]
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	4632      	mov	r2, r6
 800652c:	4629      	mov	r1, r5
 800652e:	4620      	mov	r0, r4
 8006530:	f000 fe75 	bl	800721e <xTaskCreate>
 8006534:	4603      	mov	r3, r0
 8006536:	2b01      	cmp	r3, #1
 8006538:	d001      	beq.n	800653e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800653a:	2300      	movs	r3, #0
 800653c:	e000      	b.n	8006540 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800653e:	68fb      	ldr	r3, [r7, #12]
}
 8006540:	4618      	mov	r0, r3
 8006542:	3714      	adds	r7, #20
 8006544:	46bd      	mov	sp, r7
 8006546:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006548 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b084      	sub	sp, #16
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d001      	beq.n	800655e <osDelay+0x16>
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	e000      	b.n	8006560 <osDelay+0x18>
 800655e:	2301      	movs	r3, #1
 8006560:	4618      	mov	r0, r3
 8006562:	f000 ffa9 	bl	80074b8 <vTaskDelay>
  
  return osOK;
 8006566:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8006568:	4618      	mov	r0, r3
 800656a:	3710      	adds	r7, #16
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}

08006570 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8006570:	b590      	push	{r4, r7, lr}
 8006572:	b085      	sub	sp, #20
 8006574:	af02      	add	r7, sp, #8
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d011      	beq.n	80065a6 <osMessageCreate+0x36>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00d      	beq.n	80065a6 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6818      	ldr	r0, [r3, #0]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6859      	ldr	r1, [r3, #4]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	689a      	ldr	r2, [r3, #8]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	68db      	ldr	r3, [r3, #12]
 800659a:	2400      	movs	r4, #0
 800659c:	9400      	str	r4, [sp, #0]
 800659e:	f000 f927 	bl	80067f0 <xQueueGenericCreateStatic>
 80065a2:	4603      	mov	r3, r0
 80065a4:	e008      	b.n	80065b8 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6818      	ldr	r0, [r3, #0]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	2200      	movs	r2, #0
 80065b0:	4619      	mov	r1, r3
 80065b2:	f000 f995 	bl	80068e0 <xQueueGenericCreate>
 80065b6:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	370c      	adds	r7, #12
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd90      	pop	{r4, r7, pc}

080065c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80065c0:	b480      	push	{r7}
 80065c2:	b083      	sub	sp, #12
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f103 0208 	add.w	r2, r3, #8
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f04f 32ff 	mov.w	r2, #4294967295
 80065d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f103 0208 	add.w	r2, r3, #8
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f103 0208 	add.w	r2, r3, #8
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2200      	movs	r2, #0
 80065f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80065f4:	bf00      	nop
 80065f6:	370c      	adds	r7, #12
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bc80      	pop	{r7}
 80065fc:	4770      	bx	lr

080065fe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80065fe:	b480      	push	{r7}
 8006600:	b083      	sub	sp, #12
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800660c:	bf00      	nop
 800660e:	370c      	adds	r7, #12
 8006610:	46bd      	mov	sp, r7
 8006612:	bc80      	pop	{r7}
 8006614:	4770      	bx	lr

08006616 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006616:	b480      	push	{r7}
 8006618:	b085      	sub	sp, #20
 800661a:	af00      	add	r7, sp, #0
 800661c:	6078      	str	r0, [r7, #4]
 800661e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	685b      	ldr	r3, [r3, #4]
 8006624:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	689a      	ldr	r2, [r3, #8]
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	683a      	ldr	r2, [r7, #0]
 800663a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	683a      	ldr	r2, [r7, #0]
 8006640:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	687a      	ldr	r2, [r7, #4]
 8006646:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	1c5a      	adds	r2, r3, #1
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	601a      	str	r2, [r3, #0]
}
 8006652:	bf00      	nop
 8006654:	3714      	adds	r7, #20
 8006656:	46bd      	mov	sp, r7
 8006658:	bc80      	pop	{r7}
 800665a:	4770      	bx	lr

0800665c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800665c:	b480      	push	{r7}
 800665e:	b085      	sub	sp, #20
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006672:	d103      	bne.n	800667c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	691b      	ldr	r3, [r3, #16]
 8006678:	60fb      	str	r3, [r7, #12]
 800667a:	e00c      	b.n	8006696 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	3308      	adds	r3, #8
 8006680:	60fb      	str	r3, [r7, #12]
 8006682:	e002      	b.n	800668a <vListInsert+0x2e>
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	60fb      	str	r3, [r7, #12]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	68ba      	ldr	r2, [r7, #8]
 8006692:	429a      	cmp	r2, r3
 8006694:	d2f6      	bcs.n	8006684 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	685a      	ldr	r2, [r3, #4]
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	683a      	ldr	r2, [r7, #0]
 80066a4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	68fa      	ldr	r2, [r7, #12]
 80066aa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	683a      	ldr	r2, [r7, #0]
 80066b0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	1c5a      	adds	r2, r3, #1
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	601a      	str	r2, [r3, #0]
}
 80066c2:	bf00      	nop
 80066c4:	3714      	adds	r7, #20
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bc80      	pop	{r7}
 80066ca:	4770      	bx	lr

080066cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80066cc:	b480      	push	{r7}
 80066ce:	b085      	sub	sp, #20
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	691b      	ldr	r3, [r3, #16]
 80066d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	6892      	ldr	r2, [r2, #8]
 80066e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	687a      	ldr	r2, [r7, #4]
 80066ea:	6852      	ldr	r2, [r2, #4]
 80066ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d103      	bne.n	8006700 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	689a      	ldr	r2, [r3, #8]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	1e5a      	subs	r2, r3, #1
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
}
 8006714:	4618      	mov	r0, r3
 8006716:	3714      	adds	r7, #20
 8006718:	46bd      	mov	sp, r7
 800671a:	bc80      	pop	{r7}
 800671c:	4770      	bx	lr
	...

08006720 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b084      	sub	sp, #16
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d10a      	bne.n	800674a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006738:	f383 8811 	msr	BASEPRI, r3
 800673c:	f3bf 8f6f 	isb	sy
 8006740:	f3bf 8f4f 	dsb	sy
 8006744:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006746:	bf00      	nop
 8006748:	e7fe      	b.n	8006748 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800674a:	f002 f867 	bl	800881c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006756:	68f9      	ldr	r1, [r7, #12]
 8006758:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800675a:	fb01 f303 	mul.w	r3, r1, r3
 800675e:	441a      	add	r2, r3
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2200      	movs	r2, #0
 8006768:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681a      	ldr	r2, [r3, #0]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800677a:	3b01      	subs	r3, #1
 800677c:	68f9      	ldr	r1, [r7, #12]
 800677e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006780:	fb01 f303 	mul.w	r3, r1, r3
 8006784:	441a      	add	r2, r3
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	22ff      	movs	r2, #255	; 0xff
 800678e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	22ff      	movs	r2, #255	; 0xff
 8006796:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d114      	bne.n	80067ca <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	691b      	ldr	r3, [r3, #16]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d01a      	beq.n	80067de <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	3310      	adds	r3, #16
 80067ac:	4618      	mov	r0, r3
 80067ae:	f001 f949 	bl	8007a44 <xTaskRemoveFromEventList>
 80067b2:	4603      	mov	r3, r0
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d012      	beq.n	80067de <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80067b8:	4b0c      	ldr	r3, [pc, #48]	; (80067ec <xQueueGenericReset+0xcc>)
 80067ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067be:	601a      	str	r2, [r3, #0]
 80067c0:	f3bf 8f4f 	dsb	sy
 80067c4:	f3bf 8f6f 	isb	sy
 80067c8:	e009      	b.n	80067de <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	3310      	adds	r3, #16
 80067ce:	4618      	mov	r0, r3
 80067d0:	f7ff fef6 	bl	80065c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	3324      	adds	r3, #36	; 0x24
 80067d8:	4618      	mov	r0, r3
 80067da:	f7ff fef1 	bl	80065c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80067de:	f002 f84d 	bl	800887c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80067e2:	2301      	movs	r3, #1
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	3710      	adds	r7, #16
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}
 80067ec:	e000ed04 	.word	0xe000ed04

080067f0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b08e      	sub	sp, #56	; 0x38
 80067f4:	af02      	add	r7, sp, #8
 80067f6:	60f8      	str	r0, [r7, #12]
 80067f8:	60b9      	str	r1, [r7, #8]
 80067fa:	607a      	str	r2, [r7, #4]
 80067fc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d10a      	bne.n	800681a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8006804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006808:	f383 8811 	msr	BASEPRI, r3
 800680c:	f3bf 8f6f 	isb	sy
 8006810:	f3bf 8f4f 	dsb	sy
 8006814:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006816:	bf00      	nop
 8006818:	e7fe      	b.n	8006818 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d10a      	bne.n	8006836 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006824:	f383 8811 	msr	BASEPRI, r3
 8006828:	f3bf 8f6f 	isb	sy
 800682c:	f3bf 8f4f 	dsb	sy
 8006830:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006832:	bf00      	nop
 8006834:	e7fe      	b.n	8006834 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d002      	beq.n	8006842 <xQueueGenericCreateStatic+0x52>
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d001      	beq.n	8006846 <xQueueGenericCreateStatic+0x56>
 8006842:	2301      	movs	r3, #1
 8006844:	e000      	b.n	8006848 <xQueueGenericCreateStatic+0x58>
 8006846:	2300      	movs	r3, #0
 8006848:	2b00      	cmp	r3, #0
 800684a:	d10a      	bne.n	8006862 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800684c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006850:	f383 8811 	msr	BASEPRI, r3
 8006854:	f3bf 8f6f 	isb	sy
 8006858:	f3bf 8f4f 	dsb	sy
 800685c:	623b      	str	r3, [r7, #32]
}
 800685e:	bf00      	nop
 8006860:	e7fe      	b.n	8006860 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d102      	bne.n	800686e <xQueueGenericCreateStatic+0x7e>
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d101      	bne.n	8006872 <xQueueGenericCreateStatic+0x82>
 800686e:	2301      	movs	r3, #1
 8006870:	e000      	b.n	8006874 <xQueueGenericCreateStatic+0x84>
 8006872:	2300      	movs	r3, #0
 8006874:	2b00      	cmp	r3, #0
 8006876:	d10a      	bne.n	800688e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800687c:	f383 8811 	msr	BASEPRI, r3
 8006880:	f3bf 8f6f 	isb	sy
 8006884:	f3bf 8f4f 	dsb	sy
 8006888:	61fb      	str	r3, [r7, #28]
}
 800688a:	bf00      	nop
 800688c:	e7fe      	b.n	800688c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800688e:	2348      	movs	r3, #72	; 0x48
 8006890:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	2b48      	cmp	r3, #72	; 0x48
 8006896:	d00a      	beq.n	80068ae <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8006898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800689c:	f383 8811 	msr	BASEPRI, r3
 80068a0:	f3bf 8f6f 	isb	sy
 80068a4:	f3bf 8f4f 	dsb	sy
 80068a8:	61bb      	str	r3, [r7, #24]
}
 80068aa:	bf00      	nop
 80068ac:	e7fe      	b.n	80068ac <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80068ae:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80068b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d00d      	beq.n	80068d6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80068ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068bc:	2201      	movs	r2, #1
 80068be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80068c2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80068c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c8:	9300      	str	r3, [sp, #0]
 80068ca:	4613      	mov	r3, r2
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	68b9      	ldr	r1, [r7, #8]
 80068d0:	68f8      	ldr	r0, [r7, #12]
 80068d2:	f000 f845 	bl	8006960 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80068d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80068d8:	4618      	mov	r0, r3
 80068da:	3730      	adds	r7, #48	; 0x30
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}

080068e0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b08a      	sub	sp, #40	; 0x28
 80068e4:	af02      	add	r7, sp, #8
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	60b9      	str	r1, [r7, #8]
 80068ea:	4613      	mov	r3, r2
 80068ec:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d10a      	bne.n	800690a <xQueueGenericCreate+0x2a>
	__asm volatile
 80068f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f8:	f383 8811 	msr	BASEPRI, r3
 80068fc:	f3bf 8f6f 	isb	sy
 8006900:	f3bf 8f4f 	dsb	sy
 8006904:	613b      	str	r3, [r7, #16]
}
 8006906:	bf00      	nop
 8006908:	e7fe      	b.n	8006908 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d102      	bne.n	8006916 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006910:	2300      	movs	r3, #0
 8006912:	61fb      	str	r3, [r7, #28]
 8006914:	e004      	b.n	8006920 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	68ba      	ldr	r2, [r7, #8]
 800691a:	fb02 f303 	mul.w	r3, r2, r3
 800691e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006920:	69fb      	ldr	r3, [r7, #28]
 8006922:	3348      	adds	r3, #72	; 0x48
 8006924:	4618      	mov	r0, r3
 8006926:	f002 f879 	bl	8008a1c <pvPortMalloc>
 800692a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800692c:	69bb      	ldr	r3, [r7, #24]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d011      	beq.n	8006956 <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006932:	69bb      	ldr	r3, [r7, #24]
 8006934:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	3348      	adds	r3, #72	; 0x48
 800693a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	2200      	movs	r2, #0
 8006940:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006944:	79fa      	ldrb	r2, [r7, #7]
 8006946:	69bb      	ldr	r3, [r7, #24]
 8006948:	9300      	str	r3, [sp, #0]
 800694a:	4613      	mov	r3, r2
 800694c:	697a      	ldr	r2, [r7, #20]
 800694e:	68b9      	ldr	r1, [r7, #8]
 8006950:	68f8      	ldr	r0, [r7, #12]
 8006952:	f000 f805 	bl	8006960 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006956:	69bb      	ldr	r3, [r7, #24]
	}
 8006958:	4618      	mov	r0, r3
 800695a:	3720      	adds	r7, #32
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b084      	sub	sp, #16
 8006964:	af00      	add	r7, sp, #0
 8006966:	60f8      	str	r0, [r7, #12]
 8006968:	60b9      	str	r1, [r7, #8]
 800696a:	607a      	str	r2, [r7, #4]
 800696c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d103      	bne.n	800697c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006974:	69bb      	ldr	r3, [r7, #24]
 8006976:	69ba      	ldr	r2, [r7, #24]
 8006978:	601a      	str	r2, [r3, #0]
 800697a:	e002      	b.n	8006982 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800697c:	69bb      	ldr	r3, [r7, #24]
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006982:	69bb      	ldr	r3, [r7, #24]
 8006984:	68fa      	ldr	r2, [r7, #12]
 8006986:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006988:	69bb      	ldr	r3, [r7, #24]
 800698a:	68ba      	ldr	r2, [r7, #8]
 800698c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800698e:	2101      	movs	r1, #1
 8006990:	69b8      	ldr	r0, [r7, #24]
 8006992:	f7ff fec5 	bl	8006720 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006996:	bf00      	nop
 8006998:	3710      	adds	r7, #16
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}
	...

080069a0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b08e      	sub	sp, #56	; 0x38
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	60f8      	str	r0, [r7, #12]
 80069a8:	60b9      	str	r1, [r7, #8]
 80069aa:	607a      	str	r2, [r7, #4]
 80069ac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80069ae:	2300      	movs	r3, #0
 80069b0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80069b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d10a      	bne.n	80069d2 <xQueueGenericSend+0x32>
	__asm volatile
 80069bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c0:	f383 8811 	msr	BASEPRI, r3
 80069c4:	f3bf 8f6f 	isb	sy
 80069c8:	f3bf 8f4f 	dsb	sy
 80069cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80069ce:	bf00      	nop
 80069d0:	e7fe      	b.n	80069d0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d103      	bne.n	80069e0 <xQueueGenericSend+0x40>
 80069d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d101      	bne.n	80069e4 <xQueueGenericSend+0x44>
 80069e0:	2301      	movs	r3, #1
 80069e2:	e000      	b.n	80069e6 <xQueueGenericSend+0x46>
 80069e4:	2300      	movs	r3, #0
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d10a      	bne.n	8006a00 <xQueueGenericSend+0x60>
	__asm volatile
 80069ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ee:	f383 8811 	msr	BASEPRI, r3
 80069f2:	f3bf 8f6f 	isb	sy
 80069f6:	f3bf 8f4f 	dsb	sy
 80069fa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80069fc:	bf00      	nop
 80069fe:	e7fe      	b.n	80069fe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	2b02      	cmp	r3, #2
 8006a04:	d103      	bne.n	8006a0e <xQueueGenericSend+0x6e>
 8006a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d101      	bne.n	8006a12 <xQueueGenericSend+0x72>
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e000      	b.n	8006a14 <xQueueGenericSend+0x74>
 8006a12:	2300      	movs	r3, #0
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d10a      	bne.n	8006a2e <xQueueGenericSend+0x8e>
	__asm volatile
 8006a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a1c:	f383 8811 	msr	BASEPRI, r3
 8006a20:	f3bf 8f6f 	isb	sy
 8006a24:	f3bf 8f4f 	dsb	sy
 8006a28:	623b      	str	r3, [r7, #32]
}
 8006a2a:	bf00      	nop
 8006a2c:	e7fe      	b.n	8006a2c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006a2e:	f001 f9cb 	bl	8007dc8 <xTaskGetSchedulerState>
 8006a32:	4603      	mov	r3, r0
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d102      	bne.n	8006a3e <xQueueGenericSend+0x9e>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d101      	bne.n	8006a42 <xQueueGenericSend+0xa2>
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e000      	b.n	8006a44 <xQueueGenericSend+0xa4>
 8006a42:	2300      	movs	r3, #0
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d10a      	bne.n	8006a5e <xQueueGenericSend+0xbe>
	__asm volatile
 8006a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a4c:	f383 8811 	msr	BASEPRI, r3
 8006a50:	f3bf 8f6f 	isb	sy
 8006a54:	f3bf 8f4f 	dsb	sy
 8006a58:	61fb      	str	r3, [r7, #28]
}
 8006a5a:	bf00      	nop
 8006a5c:	e7fe      	b.n	8006a5c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a5e:	f001 fedd 	bl	800881c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d302      	bcc.n	8006a74 <xQueueGenericSend+0xd4>
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	2b02      	cmp	r3, #2
 8006a72:	d129      	bne.n	8006ac8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006a74:	683a      	ldr	r2, [r7, #0]
 8006a76:	68b9      	ldr	r1, [r7, #8]
 8006a78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a7a:	f000 fa07 	bl	8006e8c <prvCopyDataToQueue>
 8006a7e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d010      	beq.n	8006aaa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8a:	3324      	adds	r3, #36	; 0x24
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f000 ffd9 	bl	8007a44 <xTaskRemoveFromEventList>
 8006a92:	4603      	mov	r3, r0
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d013      	beq.n	8006ac0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006a98:	4b3f      	ldr	r3, [pc, #252]	; (8006b98 <xQueueGenericSend+0x1f8>)
 8006a9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a9e:	601a      	str	r2, [r3, #0]
 8006aa0:	f3bf 8f4f 	dsb	sy
 8006aa4:	f3bf 8f6f 	isb	sy
 8006aa8:	e00a      	b.n	8006ac0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d007      	beq.n	8006ac0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006ab0:	4b39      	ldr	r3, [pc, #228]	; (8006b98 <xQueueGenericSend+0x1f8>)
 8006ab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ab6:	601a      	str	r2, [r3, #0]
 8006ab8:	f3bf 8f4f 	dsb	sy
 8006abc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006ac0:	f001 fedc 	bl	800887c <vPortExitCritical>
				return pdPASS;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	e063      	b.n	8006b90 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d103      	bne.n	8006ad6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006ace:	f001 fed5 	bl	800887c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	e05c      	b.n	8006b90 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d106      	bne.n	8006aea <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006adc:	f107 0314 	add.w	r3, r7, #20
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f001 f811 	bl	8007b08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006aea:	f001 fec7 	bl	800887c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006aee:	f000 fd87 	bl	8007600 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006af2:	f001 fe93 	bl	800881c <vPortEnterCritical>
 8006af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006afc:	b25b      	sxtb	r3, r3
 8006afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b02:	d103      	bne.n	8006b0c <xQueueGenericSend+0x16c>
 8006b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b06:	2200      	movs	r2, #0
 8006b08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b12:	b25b      	sxtb	r3, r3
 8006b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b18:	d103      	bne.n	8006b22 <xQueueGenericSend+0x182>
 8006b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b22:	f001 feab 	bl	800887c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006b26:	1d3a      	adds	r2, r7, #4
 8006b28:	f107 0314 	add.w	r3, r7, #20
 8006b2c:	4611      	mov	r1, r2
 8006b2e:	4618      	mov	r0, r3
 8006b30:	f001 f800 	bl	8007b34 <xTaskCheckForTimeOut>
 8006b34:	4603      	mov	r3, r0
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d124      	bne.n	8006b84 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006b3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b3c:	f000 fa9e 	bl	800707c <prvIsQueueFull>
 8006b40:	4603      	mov	r3, r0
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d018      	beq.n	8006b78 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b48:	3310      	adds	r3, #16
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	4611      	mov	r1, r2
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f000 ff28 	bl	80079a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006b54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b56:	f000 fa29 	bl	8006fac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006b5a:	f000 fd5f 	bl	800761c <xTaskResumeAll>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	f47f af7c 	bne.w	8006a5e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006b66:	4b0c      	ldr	r3, [pc, #48]	; (8006b98 <xQueueGenericSend+0x1f8>)
 8006b68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b6c:	601a      	str	r2, [r3, #0]
 8006b6e:	f3bf 8f4f 	dsb	sy
 8006b72:	f3bf 8f6f 	isb	sy
 8006b76:	e772      	b.n	8006a5e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006b78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b7a:	f000 fa17 	bl	8006fac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b7e:	f000 fd4d 	bl	800761c <xTaskResumeAll>
 8006b82:	e76c      	b.n	8006a5e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006b84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006b86:	f000 fa11 	bl	8006fac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b8a:	f000 fd47 	bl	800761c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006b8e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3738      	adds	r7, #56	; 0x38
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}
 8006b98:	e000ed04 	.word	0xe000ed04

08006b9c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b08e      	sub	sp, #56	; 0x38
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	60f8      	str	r0, [r7, #12]
 8006ba4:	60b9      	str	r1, [r7, #8]
 8006ba6:	607a      	str	r2, [r7, #4]
 8006ba8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d10a      	bne.n	8006bca <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb8:	f383 8811 	msr	BASEPRI, r3
 8006bbc:	f3bf 8f6f 	isb	sy
 8006bc0:	f3bf 8f4f 	dsb	sy
 8006bc4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006bc6:	bf00      	nop
 8006bc8:	e7fe      	b.n	8006bc8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d103      	bne.n	8006bd8 <xQueueGenericSendFromISR+0x3c>
 8006bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d101      	bne.n	8006bdc <xQueueGenericSendFromISR+0x40>
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e000      	b.n	8006bde <xQueueGenericSendFromISR+0x42>
 8006bdc:	2300      	movs	r3, #0
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d10a      	bne.n	8006bf8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be6:	f383 8811 	msr	BASEPRI, r3
 8006bea:	f3bf 8f6f 	isb	sy
 8006bee:	f3bf 8f4f 	dsb	sy
 8006bf2:	623b      	str	r3, [r7, #32]
}
 8006bf4:	bf00      	nop
 8006bf6:	e7fe      	b.n	8006bf6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	2b02      	cmp	r3, #2
 8006bfc:	d103      	bne.n	8006c06 <xQueueGenericSendFromISR+0x6a>
 8006bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d101      	bne.n	8006c0a <xQueueGenericSendFromISR+0x6e>
 8006c06:	2301      	movs	r3, #1
 8006c08:	e000      	b.n	8006c0c <xQueueGenericSendFromISR+0x70>
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d10a      	bne.n	8006c26 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c14:	f383 8811 	msr	BASEPRI, r3
 8006c18:	f3bf 8f6f 	isb	sy
 8006c1c:	f3bf 8f4f 	dsb	sy
 8006c20:	61fb      	str	r3, [r7, #28]
}
 8006c22:	bf00      	nop
 8006c24:	e7fe      	b.n	8006c24 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c26:	f001 febb 	bl	80089a0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006c2a:	f3ef 8211 	mrs	r2, BASEPRI
 8006c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c32:	f383 8811 	msr	BASEPRI, r3
 8006c36:	f3bf 8f6f 	isb	sy
 8006c3a:	f3bf 8f4f 	dsb	sy
 8006c3e:	61ba      	str	r2, [r7, #24]
 8006c40:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006c42:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006c44:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d302      	bcc.n	8006c58 <xQueueGenericSendFromISR+0xbc>
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	2b02      	cmp	r3, #2
 8006c56:	d12c      	bne.n	8006cb2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006c62:	683a      	ldr	r2, [r7, #0]
 8006c64:	68b9      	ldr	r1, [r7, #8]
 8006c66:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c68:	f000 f910 	bl	8006e8c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006c6c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c74:	d112      	bne.n	8006c9c <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d016      	beq.n	8006cac <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c80:	3324      	adds	r3, #36	; 0x24
 8006c82:	4618      	mov	r0, r3
 8006c84:	f000 fede 	bl	8007a44 <xTaskRemoveFromEventList>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d00e      	beq.n	8006cac <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d00b      	beq.n	8006cac <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	601a      	str	r2, [r3, #0]
 8006c9a:	e007      	b.n	8006cac <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006c9c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006ca0:	3301      	adds	r3, #1
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	b25a      	sxtb	r2, r3
 8006ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006cac:	2301      	movs	r3, #1
 8006cae:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006cb0:	e001      	b.n	8006cb6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	637b      	str	r3, [r7, #52]	; 0x34
 8006cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006cc0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3738      	adds	r7, #56	; 0x38
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b08c      	sub	sp, #48	; 0x30
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	60b9      	str	r1, [r7, #8]
 8006cd6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d10a      	bne.n	8006cfc <xQueueReceive+0x30>
	__asm volatile
 8006ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cea:	f383 8811 	msr	BASEPRI, r3
 8006cee:	f3bf 8f6f 	isb	sy
 8006cf2:	f3bf 8f4f 	dsb	sy
 8006cf6:	623b      	str	r3, [r7, #32]
}
 8006cf8:	bf00      	nop
 8006cfa:	e7fe      	b.n	8006cfa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d103      	bne.n	8006d0a <xQueueReceive+0x3e>
 8006d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d101      	bne.n	8006d0e <xQueueReceive+0x42>
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	e000      	b.n	8006d10 <xQueueReceive+0x44>
 8006d0e:	2300      	movs	r3, #0
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d10a      	bne.n	8006d2a <xQueueReceive+0x5e>
	__asm volatile
 8006d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d18:	f383 8811 	msr	BASEPRI, r3
 8006d1c:	f3bf 8f6f 	isb	sy
 8006d20:	f3bf 8f4f 	dsb	sy
 8006d24:	61fb      	str	r3, [r7, #28]
}
 8006d26:	bf00      	nop
 8006d28:	e7fe      	b.n	8006d28 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d2a:	f001 f84d 	bl	8007dc8 <xTaskGetSchedulerState>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d102      	bne.n	8006d3a <xQueueReceive+0x6e>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d101      	bne.n	8006d3e <xQueueReceive+0x72>
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	e000      	b.n	8006d40 <xQueueReceive+0x74>
 8006d3e:	2300      	movs	r3, #0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d10a      	bne.n	8006d5a <xQueueReceive+0x8e>
	__asm volatile
 8006d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d48:	f383 8811 	msr	BASEPRI, r3
 8006d4c:	f3bf 8f6f 	isb	sy
 8006d50:	f3bf 8f4f 	dsb	sy
 8006d54:	61bb      	str	r3, [r7, #24]
}
 8006d56:	bf00      	nop
 8006d58:	e7fe      	b.n	8006d58 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d5a:	f001 fd5f 	bl	800881c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d62:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d01f      	beq.n	8006daa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006d6a:	68b9      	ldr	r1, [r7, #8]
 8006d6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d6e:	f000 f8f7 	bl	8006f60 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d74:	1e5a      	subs	r2, r3, #1
 8006d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d78:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d7c:	691b      	ldr	r3, [r3, #16]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d00f      	beq.n	8006da2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d84:	3310      	adds	r3, #16
 8006d86:	4618      	mov	r0, r3
 8006d88:	f000 fe5c 	bl	8007a44 <xTaskRemoveFromEventList>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d007      	beq.n	8006da2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006d92:	4b3d      	ldr	r3, [pc, #244]	; (8006e88 <xQueueReceive+0x1bc>)
 8006d94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d98:	601a      	str	r2, [r3, #0]
 8006d9a:	f3bf 8f4f 	dsb	sy
 8006d9e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006da2:	f001 fd6b 	bl	800887c <vPortExitCritical>
				return pdPASS;
 8006da6:	2301      	movs	r3, #1
 8006da8:	e069      	b.n	8006e7e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d103      	bne.n	8006db8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006db0:	f001 fd64 	bl	800887c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006db4:	2300      	movs	r3, #0
 8006db6:	e062      	b.n	8006e7e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d106      	bne.n	8006dcc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006dbe:	f107 0310 	add.w	r3, r7, #16
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f000 fea0 	bl	8007b08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006dcc:	f001 fd56 	bl	800887c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006dd0:	f000 fc16 	bl	8007600 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006dd4:	f001 fd22 	bl	800881c <vPortEnterCritical>
 8006dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006dde:	b25b      	sxtb	r3, r3
 8006de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006de4:	d103      	bne.n	8006dee <xQueueReceive+0x122>
 8006de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de8:	2200      	movs	r2, #0
 8006dea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006df4:	b25b      	sxtb	r3, r3
 8006df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dfa:	d103      	bne.n	8006e04 <xQueueReceive+0x138>
 8006dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e04:	f001 fd3a 	bl	800887c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e08:	1d3a      	adds	r2, r7, #4
 8006e0a:	f107 0310 	add.w	r3, r7, #16
 8006e0e:	4611      	mov	r1, r2
 8006e10:	4618      	mov	r0, r3
 8006e12:	f000 fe8f 	bl	8007b34 <xTaskCheckForTimeOut>
 8006e16:	4603      	mov	r3, r0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d123      	bne.n	8006e64 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e1e:	f000 f917 	bl	8007050 <prvIsQueueEmpty>
 8006e22:	4603      	mov	r3, r0
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d017      	beq.n	8006e58 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e2a:	3324      	adds	r3, #36	; 0x24
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	4611      	mov	r1, r2
 8006e30:	4618      	mov	r0, r3
 8006e32:	f000 fdb7 	bl	80079a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006e36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e38:	f000 f8b8 	bl	8006fac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006e3c:	f000 fbee 	bl	800761c <xTaskResumeAll>
 8006e40:	4603      	mov	r3, r0
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d189      	bne.n	8006d5a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006e46:	4b10      	ldr	r3, [pc, #64]	; (8006e88 <xQueueReceive+0x1bc>)
 8006e48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e4c:	601a      	str	r2, [r3, #0]
 8006e4e:	f3bf 8f4f 	dsb	sy
 8006e52:	f3bf 8f6f 	isb	sy
 8006e56:	e780      	b.n	8006d5a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006e58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e5a:	f000 f8a7 	bl	8006fac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e5e:	f000 fbdd 	bl	800761c <xTaskResumeAll>
 8006e62:	e77a      	b.n	8006d5a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006e64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e66:	f000 f8a1 	bl	8006fac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e6a:	f000 fbd7 	bl	800761c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e70:	f000 f8ee 	bl	8007050 <prvIsQueueEmpty>
 8006e74:	4603      	mov	r3, r0
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	f43f af6f 	beq.w	8006d5a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006e7c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3730      	adds	r7, #48	; 0x30
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	bf00      	nop
 8006e88:	e000ed04 	.word	0xe000ed04

08006e8c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b086      	sub	sp, #24
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	60b9      	str	r1, [r7, #8]
 8006e96:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d10d      	bne.n	8006ec6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d14d      	bne.n	8006f4e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f000 ffa4 	bl	8007e04 <xTaskPriorityDisinherit>
 8006ebc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	609a      	str	r2, [r3, #8]
 8006ec4:	e043      	b.n	8006f4e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d119      	bne.n	8006f00 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	6858      	ldr	r0, [r3, #4]
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	68b9      	ldr	r1, [r7, #8]
 8006ed8:	f002 f89b 	bl	8009012 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	685a      	ldr	r2, [r3, #4]
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee4:	441a      	add	r2, r3
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	685a      	ldr	r2, [r3, #4]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d32b      	bcc.n	8006f4e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681a      	ldr	r2, [r3, #0]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	605a      	str	r2, [r3, #4]
 8006efe:	e026      	b.n	8006f4e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	68d8      	ldr	r0, [r3, #12]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f08:	461a      	mov	r2, r3
 8006f0a:	68b9      	ldr	r1, [r7, #8]
 8006f0c:	f002 f881 	bl	8009012 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	68da      	ldr	r2, [r3, #12]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f18:	425b      	negs	r3, r3
 8006f1a:	441a      	add	r2, r3
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	68da      	ldr	r2, [r3, #12]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d207      	bcs.n	8006f3c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	689a      	ldr	r2, [r3, #8]
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f34:	425b      	negs	r3, r3
 8006f36:	441a      	add	r2, r3
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2b02      	cmp	r3, #2
 8006f40:	d105      	bne.n	8006f4e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d002      	beq.n	8006f4e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	3b01      	subs	r3, #1
 8006f4c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	1c5a      	adds	r2, r3, #1
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006f56:	697b      	ldr	r3, [r7, #20]
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3718      	adds	r7, #24
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b082      	sub	sp, #8
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d018      	beq.n	8006fa4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	68da      	ldr	r2, [r3, #12]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f7a:	441a      	add	r2, r3
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	68da      	ldr	r2, [r3, #12]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	429a      	cmp	r2, r3
 8006f8a:	d303      	bcc.n	8006f94 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	68d9      	ldr	r1, [r3, #12]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	6838      	ldr	r0, [r7, #0]
 8006fa0:	f002 f837 	bl	8009012 <memcpy>
	}
}
 8006fa4:	bf00      	nop
 8006fa6:	3708      	adds	r7, #8
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}

08006fac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b084      	sub	sp, #16
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006fb4:	f001 fc32 	bl	800881c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fbe:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006fc0:	e011      	b.n	8006fe6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d012      	beq.n	8006ff0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	3324      	adds	r3, #36	; 0x24
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f000 fd38 	bl	8007a44 <xTaskRemoveFromEventList>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d001      	beq.n	8006fde <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006fda:	f000 fe0d 	bl	8007bf8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006fde:	7bfb      	ldrb	r3, [r7, #15]
 8006fe0:	3b01      	subs	r3, #1
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006fe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	dce9      	bgt.n	8006fc2 <prvUnlockQueue+0x16>
 8006fee:	e000      	b.n	8006ff2 <prvUnlockQueue+0x46>
					break;
 8006ff0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	22ff      	movs	r2, #255	; 0xff
 8006ff6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006ffa:	f001 fc3f 	bl	800887c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006ffe:	f001 fc0d 	bl	800881c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007008:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800700a:	e011      	b.n	8007030 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	691b      	ldr	r3, [r3, #16]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d012      	beq.n	800703a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	3310      	adds	r3, #16
 8007018:	4618      	mov	r0, r3
 800701a:	f000 fd13 	bl	8007a44 <xTaskRemoveFromEventList>
 800701e:	4603      	mov	r3, r0
 8007020:	2b00      	cmp	r3, #0
 8007022:	d001      	beq.n	8007028 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007024:	f000 fde8 	bl	8007bf8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007028:	7bbb      	ldrb	r3, [r7, #14]
 800702a:	3b01      	subs	r3, #1
 800702c:	b2db      	uxtb	r3, r3
 800702e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007030:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007034:	2b00      	cmp	r3, #0
 8007036:	dce9      	bgt.n	800700c <prvUnlockQueue+0x60>
 8007038:	e000      	b.n	800703c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800703a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	22ff      	movs	r2, #255	; 0xff
 8007040:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007044:	f001 fc1a 	bl	800887c <vPortExitCritical>
}
 8007048:	bf00      	nop
 800704a:	3710      	adds	r7, #16
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}

08007050 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b084      	sub	sp, #16
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007058:	f001 fbe0 	bl	800881c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007060:	2b00      	cmp	r3, #0
 8007062:	d102      	bne.n	800706a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007064:	2301      	movs	r3, #1
 8007066:	60fb      	str	r3, [r7, #12]
 8007068:	e001      	b.n	800706e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800706a:	2300      	movs	r3, #0
 800706c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800706e:	f001 fc05 	bl	800887c <vPortExitCritical>

	return xReturn;
 8007072:	68fb      	ldr	r3, [r7, #12]
}
 8007074:	4618      	mov	r0, r3
 8007076:	3710      	adds	r7, #16
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}

0800707c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007084:	f001 fbca 	bl	800881c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007090:	429a      	cmp	r2, r3
 8007092:	d102      	bne.n	800709a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007094:	2301      	movs	r3, #1
 8007096:	60fb      	str	r3, [r7, #12]
 8007098:	e001      	b.n	800709e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800709a:	2300      	movs	r3, #0
 800709c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800709e:	f001 fbed 	bl	800887c <vPortExitCritical>

	return xReturn;
 80070a2:	68fb      	ldr	r3, [r7, #12]
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3710      	adds	r7, #16
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}

080070ac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80070ac:	b480      	push	{r7}
 80070ae:	b085      	sub	sp, #20
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80070b6:	2300      	movs	r3, #0
 80070b8:	60fb      	str	r3, [r7, #12]
 80070ba:	e014      	b.n	80070e6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80070bc:	4a0e      	ldr	r2, [pc, #56]	; (80070f8 <vQueueAddToRegistry+0x4c>)
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d10b      	bne.n	80070e0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80070c8:	490b      	ldr	r1, [pc, #44]	; (80070f8 <vQueueAddToRegistry+0x4c>)
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	683a      	ldr	r2, [r7, #0]
 80070ce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80070d2:	4a09      	ldr	r2, [pc, #36]	; (80070f8 <vQueueAddToRegistry+0x4c>)
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	00db      	lsls	r3, r3, #3
 80070d8:	4413      	add	r3, r2
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80070de:	e006      	b.n	80070ee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	3301      	adds	r3, #1
 80070e4:	60fb      	str	r3, [r7, #12]
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	2b07      	cmp	r3, #7
 80070ea:	d9e7      	bls.n	80070bc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80070ec:	bf00      	nop
 80070ee:	bf00      	nop
 80070f0:	3714      	adds	r7, #20
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bc80      	pop	{r7}
 80070f6:	4770      	bx	lr
 80070f8:	20000b6c 	.word	0x20000b6c

080070fc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b086      	sub	sp, #24
 8007100:	af00      	add	r7, sp, #0
 8007102:	60f8      	str	r0, [r7, #12]
 8007104:	60b9      	str	r1, [r7, #8]
 8007106:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800710c:	f001 fb86 	bl	800881c <vPortEnterCritical>
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007116:	b25b      	sxtb	r3, r3
 8007118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800711c:	d103      	bne.n	8007126 <vQueueWaitForMessageRestricted+0x2a>
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	2200      	movs	r2, #0
 8007122:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800712c:	b25b      	sxtb	r3, r3
 800712e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007132:	d103      	bne.n	800713c <vQueueWaitForMessageRestricted+0x40>
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	2200      	movs	r2, #0
 8007138:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800713c:	f001 fb9e 	bl	800887c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007144:	2b00      	cmp	r3, #0
 8007146:	d106      	bne.n	8007156 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007148:	697b      	ldr	r3, [r7, #20]
 800714a:	3324      	adds	r3, #36	; 0x24
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	68b9      	ldr	r1, [r7, #8]
 8007150:	4618      	mov	r0, r3
 8007152:	f000 fc4b 	bl	80079ec <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007156:	6978      	ldr	r0, [r7, #20]
 8007158:	f7ff ff28 	bl	8006fac <prvUnlockQueue>
	}
 800715c:	bf00      	nop
 800715e:	3718      	adds	r7, #24
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}

08007164 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007164:	b580      	push	{r7, lr}
 8007166:	b08e      	sub	sp, #56	; 0x38
 8007168:	af04      	add	r7, sp, #16
 800716a:	60f8      	str	r0, [r7, #12]
 800716c:	60b9      	str	r1, [r7, #8]
 800716e:	607a      	str	r2, [r7, #4]
 8007170:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007174:	2b00      	cmp	r3, #0
 8007176:	d10a      	bne.n	800718e <xTaskCreateStatic+0x2a>
	__asm volatile
 8007178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800717c:	f383 8811 	msr	BASEPRI, r3
 8007180:	f3bf 8f6f 	isb	sy
 8007184:	f3bf 8f4f 	dsb	sy
 8007188:	623b      	str	r3, [r7, #32]
}
 800718a:	bf00      	nop
 800718c:	e7fe      	b.n	800718c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800718e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007190:	2b00      	cmp	r3, #0
 8007192:	d10a      	bne.n	80071aa <xTaskCreateStatic+0x46>
	__asm volatile
 8007194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007198:	f383 8811 	msr	BASEPRI, r3
 800719c:	f3bf 8f6f 	isb	sy
 80071a0:	f3bf 8f4f 	dsb	sy
 80071a4:	61fb      	str	r3, [r7, #28]
}
 80071a6:	bf00      	nop
 80071a8:	e7fe      	b.n	80071a8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80071aa:	23b4      	movs	r3, #180	; 0xb4
 80071ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	2bb4      	cmp	r3, #180	; 0xb4
 80071b2:	d00a      	beq.n	80071ca <xTaskCreateStatic+0x66>
	__asm volatile
 80071b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b8:	f383 8811 	msr	BASEPRI, r3
 80071bc:	f3bf 8f6f 	isb	sy
 80071c0:	f3bf 8f4f 	dsb	sy
 80071c4:	61bb      	str	r3, [r7, #24]
}
 80071c6:	bf00      	nop
 80071c8:	e7fe      	b.n	80071c8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80071ca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80071cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d01e      	beq.n	8007210 <xTaskCreateStatic+0xac>
 80071d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d01b      	beq.n	8007210 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80071d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071da:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80071dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071e0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80071e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e4:	2202      	movs	r2, #2
 80071e6:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80071ea:	2300      	movs	r3, #0
 80071ec:	9303      	str	r3, [sp, #12]
 80071ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f0:	9302      	str	r3, [sp, #8]
 80071f2:	f107 0314 	add.w	r3, r7, #20
 80071f6:	9301      	str	r3, [sp, #4]
 80071f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071fa:	9300      	str	r3, [sp, #0]
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	687a      	ldr	r2, [r7, #4]
 8007200:	68b9      	ldr	r1, [r7, #8]
 8007202:	68f8      	ldr	r0, [r7, #12]
 8007204:	f000 f850 	bl	80072a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007208:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800720a:	f000 f8eb 	bl	80073e4 <prvAddNewTaskToReadyList>
 800720e:	e001      	b.n	8007214 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007210:	2300      	movs	r3, #0
 8007212:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007214:	697b      	ldr	r3, [r7, #20]
	}
 8007216:	4618      	mov	r0, r3
 8007218:	3728      	adds	r7, #40	; 0x28
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}

0800721e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800721e:	b580      	push	{r7, lr}
 8007220:	b08c      	sub	sp, #48	; 0x30
 8007222:	af04      	add	r7, sp, #16
 8007224:	60f8      	str	r0, [r7, #12]
 8007226:	60b9      	str	r1, [r7, #8]
 8007228:	603b      	str	r3, [r7, #0]
 800722a:	4613      	mov	r3, r2
 800722c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800722e:	88fb      	ldrh	r3, [r7, #6]
 8007230:	009b      	lsls	r3, r3, #2
 8007232:	4618      	mov	r0, r3
 8007234:	f001 fbf2 	bl	8008a1c <pvPortMalloc>
 8007238:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d00e      	beq.n	800725e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007240:	20b4      	movs	r0, #180	; 0xb4
 8007242:	f001 fbeb 	bl	8008a1c <pvPortMalloc>
 8007246:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007248:	69fb      	ldr	r3, [r7, #28]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d003      	beq.n	8007256 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800724e:	69fb      	ldr	r3, [r7, #28]
 8007250:	697a      	ldr	r2, [r7, #20]
 8007252:	631a      	str	r2, [r3, #48]	; 0x30
 8007254:	e005      	b.n	8007262 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007256:	6978      	ldr	r0, [r7, #20]
 8007258:	f001 fca4 	bl	8008ba4 <vPortFree>
 800725c:	e001      	b.n	8007262 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800725e:	2300      	movs	r3, #0
 8007260:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007262:	69fb      	ldr	r3, [r7, #28]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d017      	beq.n	8007298 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007268:	69fb      	ldr	r3, [r7, #28]
 800726a:	2200      	movs	r2, #0
 800726c:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007270:	88fa      	ldrh	r2, [r7, #6]
 8007272:	2300      	movs	r3, #0
 8007274:	9303      	str	r3, [sp, #12]
 8007276:	69fb      	ldr	r3, [r7, #28]
 8007278:	9302      	str	r3, [sp, #8]
 800727a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800727c:	9301      	str	r3, [sp, #4]
 800727e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007280:	9300      	str	r3, [sp, #0]
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	68b9      	ldr	r1, [r7, #8]
 8007286:	68f8      	ldr	r0, [r7, #12]
 8007288:	f000 f80e 	bl	80072a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800728c:	69f8      	ldr	r0, [r7, #28]
 800728e:	f000 f8a9 	bl	80073e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007292:	2301      	movs	r3, #1
 8007294:	61bb      	str	r3, [r7, #24]
 8007296:	e002      	b.n	800729e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007298:	f04f 33ff 	mov.w	r3, #4294967295
 800729c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800729e:	69bb      	ldr	r3, [r7, #24]
	}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3720      	adds	r7, #32
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b088      	sub	sp, #32
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	60f8      	str	r0, [r7, #12]
 80072b0:	60b9      	str	r1, [r7, #8]
 80072b2:	607a      	str	r2, [r7, #4]
 80072b4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80072b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80072c0:	3b01      	subs	r3, #1
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	4413      	add	r3, r2
 80072c6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80072c8:	69bb      	ldr	r3, [r7, #24]
 80072ca:	f023 0307 	bic.w	r3, r3, #7
 80072ce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80072d0:	69bb      	ldr	r3, [r7, #24]
 80072d2:	f003 0307 	and.w	r3, r3, #7
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d00a      	beq.n	80072f0 <prvInitialiseNewTask+0x48>
	__asm volatile
 80072da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072de:	f383 8811 	msr	BASEPRI, r3
 80072e2:	f3bf 8f6f 	isb	sy
 80072e6:	f3bf 8f4f 	dsb	sy
 80072ea:	617b      	str	r3, [r7, #20]
}
 80072ec:	bf00      	nop
 80072ee:	e7fe      	b.n	80072ee <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d01f      	beq.n	8007336 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80072f6:	2300      	movs	r3, #0
 80072f8:	61fb      	str	r3, [r7, #28]
 80072fa:	e012      	b.n	8007322 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80072fc:	68ba      	ldr	r2, [r7, #8]
 80072fe:	69fb      	ldr	r3, [r7, #28]
 8007300:	4413      	add	r3, r2
 8007302:	7819      	ldrb	r1, [r3, #0]
 8007304:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007306:	69fb      	ldr	r3, [r7, #28]
 8007308:	4413      	add	r3, r2
 800730a:	3334      	adds	r3, #52	; 0x34
 800730c:	460a      	mov	r2, r1
 800730e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007310:	68ba      	ldr	r2, [r7, #8]
 8007312:	69fb      	ldr	r3, [r7, #28]
 8007314:	4413      	add	r3, r2
 8007316:	781b      	ldrb	r3, [r3, #0]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d006      	beq.n	800732a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800731c:	69fb      	ldr	r3, [r7, #28]
 800731e:	3301      	adds	r3, #1
 8007320:	61fb      	str	r3, [r7, #28]
 8007322:	69fb      	ldr	r3, [r7, #28]
 8007324:	2b0f      	cmp	r3, #15
 8007326:	d9e9      	bls.n	80072fc <prvInitialiseNewTask+0x54>
 8007328:	e000      	b.n	800732c <prvInitialiseNewTask+0x84>
			{
				break;
 800732a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800732c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800732e:	2200      	movs	r2, #0
 8007330:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007334:	e003      	b.n	800733e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007338:	2200      	movs	r2, #0
 800733a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800733e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007340:	2b06      	cmp	r3, #6
 8007342:	d901      	bls.n	8007348 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007344:	2306      	movs	r3, #6
 8007346:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800734a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800734c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800734e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007350:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007352:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007356:	2200      	movs	r2, #0
 8007358:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800735a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800735c:	3304      	adds	r3, #4
 800735e:	4618      	mov	r0, r3
 8007360:	f7ff f94d 	bl	80065fe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007366:	3318      	adds	r3, #24
 8007368:	4618      	mov	r0, r3
 800736a:	f7ff f948 	bl	80065fe <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800736e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007370:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007372:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007376:	f1c3 0207 	rsb	r2, r3, #7
 800737a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800737c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800737e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007380:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007382:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007386:	2200      	movs	r2, #0
 8007388:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800738c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800738e:	2200      	movs	r2, #0
 8007390:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007396:	334c      	adds	r3, #76	; 0x4c
 8007398:	2260      	movs	r2, #96	; 0x60
 800739a:	2100      	movs	r1, #0
 800739c:	4618      	mov	r0, r3
 800739e:	f001 fe46 	bl	800902e <memset>
 80073a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a4:	4a0c      	ldr	r2, [pc, #48]	; (80073d8 <prvInitialiseNewTask+0x130>)
 80073a6:	651a      	str	r2, [r3, #80]	; 0x50
 80073a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073aa:	4a0c      	ldr	r2, [pc, #48]	; (80073dc <prvInitialiseNewTask+0x134>)
 80073ac:	655a      	str	r2, [r3, #84]	; 0x54
 80073ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b0:	4a0b      	ldr	r2, [pc, #44]	; (80073e0 <prvInitialiseNewTask+0x138>)
 80073b2:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80073b4:	683a      	ldr	r2, [r7, #0]
 80073b6:	68f9      	ldr	r1, [r7, #12]
 80073b8:	69b8      	ldr	r0, [r7, #24]
 80073ba:	f001 f93f 	bl	800863c <pxPortInitialiseStack>
 80073be:	4602      	mov	r2, r0
 80073c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073c2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80073c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d002      	beq.n	80073d0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80073ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073ce:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80073d0:	bf00      	nop
 80073d2:	3720      	adds	r7, #32
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}
 80073d8:	0800ab84 	.word	0x0800ab84
 80073dc:	0800aba4 	.word	0x0800aba4
 80073e0:	0800ab64 	.word	0x0800ab64

080073e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b082      	sub	sp, #8
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80073ec:	f001 fa16 	bl	800881c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80073f0:	4b2a      	ldr	r3, [pc, #168]	; (800749c <prvAddNewTaskToReadyList+0xb8>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	3301      	adds	r3, #1
 80073f6:	4a29      	ldr	r2, [pc, #164]	; (800749c <prvAddNewTaskToReadyList+0xb8>)
 80073f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80073fa:	4b29      	ldr	r3, [pc, #164]	; (80074a0 <prvAddNewTaskToReadyList+0xbc>)
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d109      	bne.n	8007416 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007402:	4a27      	ldr	r2, [pc, #156]	; (80074a0 <prvAddNewTaskToReadyList+0xbc>)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007408:	4b24      	ldr	r3, [pc, #144]	; (800749c <prvAddNewTaskToReadyList+0xb8>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	2b01      	cmp	r3, #1
 800740e:	d110      	bne.n	8007432 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007410:	f000 fc18 	bl	8007c44 <prvInitialiseTaskLists>
 8007414:	e00d      	b.n	8007432 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007416:	4b23      	ldr	r3, [pc, #140]	; (80074a4 <prvAddNewTaskToReadyList+0xc0>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d109      	bne.n	8007432 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800741e:	4b20      	ldr	r3, [pc, #128]	; (80074a0 <prvAddNewTaskToReadyList+0xbc>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007428:	429a      	cmp	r2, r3
 800742a:	d802      	bhi.n	8007432 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800742c:	4a1c      	ldr	r2, [pc, #112]	; (80074a0 <prvAddNewTaskToReadyList+0xbc>)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007432:	4b1d      	ldr	r3, [pc, #116]	; (80074a8 <prvAddNewTaskToReadyList+0xc4>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	3301      	adds	r3, #1
 8007438:	4a1b      	ldr	r2, [pc, #108]	; (80074a8 <prvAddNewTaskToReadyList+0xc4>)
 800743a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007440:	2201      	movs	r2, #1
 8007442:	409a      	lsls	r2, r3
 8007444:	4b19      	ldr	r3, [pc, #100]	; (80074ac <prvAddNewTaskToReadyList+0xc8>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4313      	orrs	r3, r2
 800744a:	4a18      	ldr	r2, [pc, #96]	; (80074ac <prvAddNewTaskToReadyList+0xc8>)
 800744c:	6013      	str	r3, [r2, #0]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007452:	4613      	mov	r3, r2
 8007454:	009b      	lsls	r3, r3, #2
 8007456:	4413      	add	r3, r2
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	4a15      	ldr	r2, [pc, #84]	; (80074b0 <prvAddNewTaskToReadyList+0xcc>)
 800745c:	441a      	add	r2, r3
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	3304      	adds	r3, #4
 8007462:	4619      	mov	r1, r3
 8007464:	4610      	mov	r0, r2
 8007466:	f7ff f8d6 	bl	8006616 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800746a:	f001 fa07 	bl	800887c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800746e:	4b0d      	ldr	r3, [pc, #52]	; (80074a4 <prvAddNewTaskToReadyList+0xc0>)
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d00e      	beq.n	8007494 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007476:	4b0a      	ldr	r3, [pc, #40]	; (80074a0 <prvAddNewTaskToReadyList+0xbc>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007480:	429a      	cmp	r2, r3
 8007482:	d207      	bcs.n	8007494 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007484:	4b0b      	ldr	r3, [pc, #44]	; (80074b4 <prvAddNewTaskToReadyList+0xd0>)
 8007486:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800748a:	601a      	str	r2, [r3, #0]
 800748c:	f3bf 8f4f 	dsb	sy
 8007490:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007494:	bf00      	nop
 8007496:	3708      	adds	r7, #8
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}
 800749c:	20000cac 	.word	0x20000cac
 80074a0:	20000bac 	.word	0x20000bac
 80074a4:	20000cb8 	.word	0x20000cb8
 80074a8:	20000cc8 	.word	0x20000cc8
 80074ac:	20000cb4 	.word	0x20000cb4
 80074b0:	20000bb0 	.word	0x20000bb0
 80074b4:	e000ed04 	.word	0xe000ed04

080074b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80074c0:	2300      	movs	r3, #0
 80074c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d017      	beq.n	80074fa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80074ca:	4b13      	ldr	r3, [pc, #76]	; (8007518 <vTaskDelay+0x60>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d00a      	beq.n	80074e8 <vTaskDelay+0x30>
	__asm volatile
 80074d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d6:	f383 8811 	msr	BASEPRI, r3
 80074da:	f3bf 8f6f 	isb	sy
 80074de:	f3bf 8f4f 	dsb	sy
 80074e2:	60bb      	str	r3, [r7, #8]
}
 80074e4:	bf00      	nop
 80074e6:	e7fe      	b.n	80074e6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80074e8:	f000 f88a 	bl	8007600 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80074ec:	2100      	movs	r1, #0
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 fd0e 	bl	8007f10 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80074f4:	f000 f892 	bl	800761c <xTaskResumeAll>
 80074f8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d107      	bne.n	8007510 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007500:	4b06      	ldr	r3, [pc, #24]	; (800751c <vTaskDelay+0x64>)
 8007502:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007506:	601a      	str	r2, [r3, #0]
 8007508:	f3bf 8f4f 	dsb	sy
 800750c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007510:	bf00      	nop
 8007512:	3710      	adds	r7, #16
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}
 8007518:	20000cd4 	.word	0x20000cd4
 800751c:	e000ed04 	.word	0xe000ed04

08007520 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b08a      	sub	sp, #40	; 0x28
 8007524:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007526:	2300      	movs	r3, #0
 8007528:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800752a:	2300      	movs	r3, #0
 800752c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800752e:	463a      	mov	r2, r7
 8007530:	1d39      	adds	r1, r7, #4
 8007532:	f107 0308 	add.w	r3, r7, #8
 8007536:	4618      	mov	r0, r3
 8007538:	f7f9 f802 	bl	8000540 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800753c:	6839      	ldr	r1, [r7, #0]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	68ba      	ldr	r2, [r7, #8]
 8007542:	9202      	str	r2, [sp, #8]
 8007544:	9301      	str	r3, [sp, #4]
 8007546:	2300      	movs	r3, #0
 8007548:	9300      	str	r3, [sp, #0]
 800754a:	2300      	movs	r3, #0
 800754c:	460a      	mov	r2, r1
 800754e:	4924      	ldr	r1, [pc, #144]	; (80075e0 <vTaskStartScheduler+0xc0>)
 8007550:	4824      	ldr	r0, [pc, #144]	; (80075e4 <vTaskStartScheduler+0xc4>)
 8007552:	f7ff fe07 	bl	8007164 <xTaskCreateStatic>
 8007556:	4603      	mov	r3, r0
 8007558:	4a23      	ldr	r2, [pc, #140]	; (80075e8 <vTaskStartScheduler+0xc8>)
 800755a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800755c:	4b22      	ldr	r3, [pc, #136]	; (80075e8 <vTaskStartScheduler+0xc8>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d002      	beq.n	800756a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007564:	2301      	movs	r3, #1
 8007566:	617b      	str	r3, [r7, #20]
 8007568:	e001      	b.n	800756e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800756a:	2300      	movs	r3, #0
 800756c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	2b01      	cmp	r3, #1
 8007572:	d102      	bne.n	800757a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007574:	f000 fd32 	bl	8007fdc <xTimerCreateTimerTask>
 8007578:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	2b01      	cmp	r3, #1
 800757e:	d11b      	bne.n	80075b8 <vTaskStartScheduler+0x98>
	__asm volatile
 8007580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007584:	f383 8811 	msr	BASEPRI, r3
 8007588:	f3bf 8f6f 	isb	sy
 800758c:	f3bf 8f4f 	dsb	sy
 8007590:	613b      	str	r3, [r7, #16]
}
 8007592:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007594:	4b15      	ldr	r3, [pc, #84]	; (80075ec <vTaskStartScheduler+0xcc>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	334c      	adds	r3, #76	; 0x4c
 800759a:	4a15      	ldr	r2, [pc, #84]	; (80075f0 <vTaskStartScheduler+0xd0>)
 800759c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800759e:	4b15      	ldr	r3, [pc, #84]	; (80075f4 <vTaskStartScheduler+0xd4>)
 80075a0:	f04f 32ff 	mov.w	r2, #4294967295
 80075a4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80075a6:	4b14      	ldr	r3, [pc, #80]	; (80075f8 <vTaskStartScheduler+0xd8>)
 80075a8:	2201      	movs	r2, #1
 80075aa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80075ac:	4b13      	ldr	r3, [pc, #76]	; (80075fc <vTaskStartScheduler+0xdc>)
 80075ae:	2200      	movs	r2, #0
 80075b0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80075b2:	f001 f8c1 	bl	8008738 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80075b6:	e00e      	b.n	80075d6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075be:	d10a      	bne.n	80075d6 <vTaskStartScheduler+0xb6>
	__asm volatile
 80075c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c4:	f383 8811 	msr	BASEPRI, r3
 80075c8:	f3bf 8f6f 	isb	sy
 80075cc:	f3bf 8f4f 	dsb	sy
 80075d0:	60fb      	str	r3, [r7, #12]
}
 80075d2:	bf00      	nop
 80075d4:	e7fe      	b.n	80075d4 <vTaskStartScheduler+0xb4>
}
 80075d6:	bf00      	nop
 80075d8:	3718      	adds	r7, #24
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}
 80075de:	bf00      	nop
 80075e0:	0800a444 	.word	0x0800a444
 80075e4:	08007c11 	.word	0x08007c11
 80075e8:	20000cd0 	.word	0x20000cd0
 80075ec:	20000bac 	.word	0x20000bac
 80075f0:	20000010 	.word	0x20000010
 80075f4:	20000ccc 	.word	0x20000ccc
 80075f8:	20000cb8 	.word	0x20000cb8
 80075fc:	20000cb0 	.word	0x20000cb0

08007600 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007600:	b480      	push	{r7}
 8007602:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007604:	4b04      	ldr	r3, [pc, #16]	; (8007618 <vTaskSuspendAll+0x18>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	3301      	adds	r3, #1
 800760a:	4a03      	ldr	r2, [pc, #12]	; (8007618 <vTaskSuspendAll+0x18>)
 800760c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800760e:	bf00      	nop
 8007610:	46bd      	mov	sp, r7
 8007612:	bc80      	pop	{r7}
 8007614:	4770      	bx	lr
 8007616:	bf00      	nop
 8007618:	20000cd4 	.word	0x20000cd4

0800761c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b084      	sub	sp, #16
 8007620:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007622:	2300      	movs	r3, #0
 8007624:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007626:	2300      	movs	r3, #0
 8007628:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800762a:	4b41      	ldr	r3, [pc, #260]	; (8007730 <xTaskResumeAll+0x114>)
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d10a      	bne.n	8007648 <xTaskResumeAll+0x2c>
	__asm volatile
 8007632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007636:	f383 8811 	msr	BASEPRI, r3
 800763a:	f3bf 8f6f 	isb	sy
 800763e:	f3bf 8f4f 	dsb	sy
 8007642:	603b      	str	r3, [r7, #0]
}
 8007644:	bf00      	nop
 8007646:	e7fe      	b.n	8007646 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007648:	f001 f8e8 	bl	800881c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800764c:	4b38      	ldr	r3, [pc, #224]	; (8007730 <xTaskResumeAll+0x114>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	3b01      	subs	r3, #1
 8007652:	4a37      	ldr	r2, [pc, #220]	; (8007730 <xTaskResumeAll+0x114>)
 8007654:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007656:	4b36      	ldr	r3, [pc, #216]	; (8007730 <xTaskResumeAll+0x114>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d161      	bne.n	8007722 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800765e:	4b35      	ldr	r3, [pc, #212]	; (8007734 <xTaskResumeAll+0x118>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d05d      	beq.n	8007722 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007666:	e02e      	b.n	80076c6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007668:	4b33      	ldr	r3, [pc, #204]	; (8007738 <xTaskResumeAll+0x11c>)
 800766a:	68db      	ldr	r3, [r3, #12]
 800766c:	68db      	ldr	r3, [r3, #12]
 800766e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	3318      	adds	r3, #24
 8007674:	4618      	mov	r0, r3
 8007676:	f7ff f829 	bl	80066cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	3304      	adds	r3, #4
 800767e:	4618      	mov	r0, r3
 8007680:	f7ff f824 	bl	80066cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007688:	2201      	movs	r2, #1
 800768a:	409a      	lsls	r2, r3
 800768c:	4b2b      	ldr	r3, [pc, #172]	; (800773c <xTaskResumeAll+0x120>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4313      	orrs	r3, r2
 8007692:	4a2a      	ldr	r2, [pc, #168]	; (800773c <xTaskResumeAll+0x120>)
 8007694:	6013      	str	r3, [r2, #0]
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800769a:	4613      	mov	r3, r2
 800769c:	009b      	lsls	r3, r3, #2
 800769e:	4413      	add	r3, r2
 80076a0:	009b      	lsls	r3, r3, #2
 80076a2:	4a27      	ldr	r2, [pc, #156]	; (8007740 <xTaskResumeAll+0x124>)
 80076a4:	441a      	add	r2, r3
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	3304      	adds	r3, #4
 80076aa:	4619      	mov	r1, r3
 80076ac:	4610      	mov	r0, r2
 80076ae:	f7fe ffb2 	bl	8006616 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076b6:	4b23      	ldr	r3, [pc, #140]	; (8007744 <xTaskResumeAll+0x128>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076bc:	429a      	cmp	r2, r3
 80076be:	d302      	bcc.n	80076c6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80076c0:	4b21      	ldr	r3, [pc, #132]	; (8007748 <xTaskResumeAll+0x12c>)
 80076c2:	2201      	movs	r2, #1
 80076c4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80076c6:	4b1c      	ldr	r3, [pc, #112]	; (8007738 <xTaskResumeAll+0x11c>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d1cc      	bne.n	8007668 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d001      	beq.n	80076d8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80076d4:	f000 fb58 	bl	8007d88 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80076d8:	4b1c      	ldr	r3, [pc, #112]	; (800774c <xTaskResumeAll+0x130>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d010      	beq.n	8007706 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80076e4:	f000 f844 	bl	8007770 <xTaskIncrementTick>
 80076e8:	4603      	mov	r3, r0
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d002      	beq.n	80076f4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80076ee:	4b16      	ldr	r3, [pc, #88]	; (8007748 <xTaskResumeAll+0x12c>)
 80076f0:	2201      	movs	r2, #1
 80076f2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	3b01      	subs	r3, #1
 80076f8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d1f1      	bne.n	80076e4 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8007700:	4b12      	ldr	r3, [pc, #72]	; (800774c <xTaskResumeAll+0x130>)
 8007702:	2200      	movs	r2, #0
 8007704:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007706:	4b10      	ldr	r3, [pc, #64]	; (8007748 <xTaskResumeAll+0x12c>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d009      	beq.n	8007722 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800770e:	2301      	movs	r3, #1
 8007710:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007712:	4b0f      	ldr	r3, [pc, #60]	; (8007750 <xTaskResumeAll+0x134>)
 8007714:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007718:	601a      	str	r2, [r3, #0]
 800771a:	f3bf 8f4f 	dsb	sy
 800771e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007722:	f001 f8ab 	bl	800887c <vPortExitCritical>

	return xAlreadyYielded;
 8007726:	68bb      	ldr	r3, [r7, #8]
}
 8007728:	4618      	mov	r0, r3
 800772a:	3710      	adds	r7, #16
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}
 8007730:	20000cd4 	.word	0x20000cd4
 8007734:	20000cac 	.word	0x20000cac
 8007738:	20000c6c 	.word	0x20000c6c
 800773c:	20000cb4 	.word	0x20000cb4
 8007740:	20000bb0 	.word	0x20000bb0
 8007744:	20000bac 	.word	0x20000bac
 8007748:	20000cc0 	.word	0x20000cc0
 800774c:	20000cbc 	.word	0x20000cbc
 8007750:	e000ed04 	.word	0xe000ed04

08007754 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007754:	b480      	push	{r7}
 8007756:	b083      	sub	sp, #12
 8007758:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800775a:	4b04      	ldr	r3, [pc, #16]	; (800776c <xTaskGetTickCount+0x18>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007760:	687b      	ldr	r3, [r7, #4]
}
 8007762:	4618      	mov	r0, r3
 8007764:	370c      	adds	r7, #12
 8007766:	46bd      	mov	sp, r7
 8007768:	bc80      	pop	{r7}
 800776a:	4770      	bx	lr
 800776c:	20000cb0 	.word	0x20000cb0

08007770 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b086      	sub	sp, #24
 8007774:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007776:	2300      	movs	r3, #0
 8007778:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800777a:	4b4e      	ldr	r3, [pc, #312]	; (80078b4 <xTaskIncrementTick+0x144>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	2b00      	cmp	r3, #0
 8007780:	f040 8088 	bne.w	8007894 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007784:	4b4c      	ldr	r3, [pc, #304]	; (80078b8 <xTaskIncrementTick+0x148>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	3301      	adds	r3, #1
 800778a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800778c:	4a4a      	ldr	r2, [pc, #296]	; (80078b8 <xTaskIncrementTick+0x148>)
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d120      	bne.n	80077da <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007798:	4b48      	ldr	r3, [pc, #288]	; (80078bc <xTaskIncrementTick+0x14c>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d00a      	beq.n	80077b8 <xTaskIncrementTick+0x48>
	__asm volatile
 80077a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a6:	f383 8811 	msr	BASEPRI, r3
 80077aa:	f3bf 8f6f 	isb	sy
 80077ae:	f3bf 8f4f 	dsb	sy
 80077b2:	603b      	str	r3, [r7, #0]
}
 80077b4:	bf00      	nop
 80077b6:	e7fe      	b.n	80077b6 <xTaskIncrementTick+0x46>
 80077b8:	4b40      	ldr	r3, [pc, #256]	; (80078bc <xTaskIncrementTick+0x14c>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	60fb      	str	r3, [r7, #12]
 80077be:	4b40      	ldr	r3, [pc, #256]	; (80078c0 <xTaskIncrementTick+0x150>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a3e      	ldr	r2, [pc, #248]	; (80078bc <xTaskIncrementTick+0x14c>)
 80077c4:	6013      	str	r3, [r2, #0]
 80077c6:	4a3e      	ldr	r2, [pc, #248]	; (80078c0 <xTaskIncrementTick+0x150>)
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	6013      	str	r3, [r2, #0]
 80077cc:	4b3d      	ldr	r3, [pc, #244]	; (80078c4 <xTaskIncrementTick+0x154>)
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	3301      	adds	r3, #1
 80077d2:	4a3c      	ldr	r2, [pc, #240]	; (80078c4 <xTaskIncrementTick+0x154>)
 80077d4:	6013      	str	r3, [r2, #0]
 80077d6:	f000 fad7 	bl	8007d88 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80077da:	4b3b      	ldr	r3, [pc, #236]	; (80078c8 <xTaskIncrementTick+0x158>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	693a      	ldr	r2, [r7, #16]
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d348      	bcc.n	8007876 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80077e4:	4b35      	ldr	r3, [pc, #212]	; (80078bc <xTaskIncrementTick+0x14c>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d104      	bne.n	80077f8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077ee:	4b36      	ldr	r3, [pc, #216]	; (80078c8 <xTaskIncrementTick+0x158>)
 80077f0:	f04f 32ff 	mov.w	r2, #4294967295
 80077f4:	601a      	str	r2, [r3, #0]
					break;
 80077f6:	e03e      	b.n	8007876 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077f8:	4b30      	ldr	r3, [pc, #192]	; (80078bc <xTaskIncrementTick+0x14c>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	68db      	ldr	r3, [r3, #12]
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007808:	693a      	ldr	r2, [r7, #16]
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	429a      	cmp	r2, r3
 800780e:	d203      	bcs.n	8007818 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007810:	4a2d      	ldr	r2, [pc, #180]	; (80078c8 <xTaskIncrementTick+0x158>)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007816:	e02e      	b.n	8007876 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	3304      	adds	r3, #4
 800781c:	4618      	mov	r0, r3
 800781e:	f7fe ff55 	bl	80066cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007826:	2b00      	cmp	r3, #0
 8007828:	d004      	beq.n	8007834 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	3318      	adds	r3, #24
 800782e:	4618      	mov	r0, r3
 8007830:	f7fe ff4c 	bl	80066cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007838:	2201      	movs	r2, #1
 800783a:	409a      	lsls	r2, r3
 800783c:	4b23      	ldr	r3, [pc, #140]	; (80078cc <xTaskIncrementTick+0x15c>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4313      	orrs	r3, r2
 8007842:	4a22      	ldr	r2, [pc, #136]	; (80078cc <xTaskIncrementTick+0x15c>)
 8007844:	6013      	str	r3, [r2, #0]
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800784a:	4613      	mov	r3, r2
 800784c:	009b      	lsls	r3, r3, #2
 800784e:	4413      	add	r3, r2
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	4a1f      	ldr	r2, [pc, #124]	; (80078d0 <xTaskIncrementTick+0x160>)
 8007854:	441a      	add	r2, r3
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	3304      	adds	r3, #4
 800785a:	4619      	mov	r1, r3
 800785c:	4610      	mov	r0, r2
 800785e:	f7fe feda 	bl	8006616 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007866:	4b1b      	ldr	r3, [pc, #108]	; (80078d4 <xTaskIncrementTick+0x164>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800786c:	429a      	cmp	r2, r3
 800786e:	d3b9      	bcc.n	80077e4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007870:	2301      	movs	r3, #1
 8007872:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007874:	e7b6      	b.n	80077e4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007876:	4b17      	ldr	r3, [pc, #92]	; (80078d4 <xTaskIncrementTick+0x164>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800787c:	4914      	ldr	r1, [pc, #80]	; (80078d0 <xTaskIncrementTick+0x160>)
 800787e:	4613      	mov	r3, r2
 8007880:	009b      	lsls	r3, r3, #2
 8007882:	4413      	add	r3, r2
 8007884:	009b      	lsls	r3, r3, #2
 8007886:	440b      	add	r3, r1
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	2b01      	cmp	r3, #1
 800788c:	d907      	bls.n	800789e <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800788e:	2301      	movs	r3, #1
 8007890:	617b      	str	r3, [r7, #20]
 8007892:	e004      	b.n	800789e <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007894:	4b10      	ldr	r3, [pc, #64]	; (80078d8 <xTaskIncrementTick+0x168>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	3301      	adds	r3, #1
 800789a:	4a0f      	ldr	r2, [pc, #60]	; (80078d8 <xTaskIncrementTick+0x168>)
 800789c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800789e:	4b0f      	ldr	r3, [pc, #60]	; (80078dc <xTaskIncrementTick+0x16c>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d001      	beq.n	80078aa <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 80078a6:	2301      	movs	r3, #1
 80078a8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80078aa:	697b      	ldr	r3, [r7, #20]
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3718      	adds	r7, #24
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}
 80078b4:	20000cd4 	.word	0x20000cd4
 80078b8:	20000cb0 	.word	0x20000cb0
 80078bc:	20000c64 	.word	0x20000c64
 80078c0:	20000c68 	.word	0x20000c68
 80078c4:	20000cc4 	.word	0x20000cc4
 80078c8:	20000ccc 	.word	0x20000ccc
 80078cc:	20000cb4 	.word	0x20000cb4
 80078d0:	20000bb0 	.word	0x20000bb0
 80078d4:	20000bac 	.word	0x20000bac
 80078d8:	20000cbc 	.word	0x20000cbc
 80078dc:	20000cc0 	.word	0x20000cc0

080078e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80078e0:	b480      	push	{r7}
 80078e2:	b087      	sub	sp, #28
 80078e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80078e6:	4b29      	ldr	r3, [pc, #164]	; (800798c <vTaskSwitchContext+0xac>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d003      	beq.n	80078f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80078ee:	4b28      	ldr	r3, [pc, #160]	; (8007990 <vTaskSwitchContext+0xb0>)
 80078f0:	2201      	movs	r2, #1
 80078f2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80078f4:	e044      	b.n	8007980 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80078f6:	4b26      	ldr	r3, [pc, #152]	; (8007990 <vTaskSwitchContext+0xb0>)
 80078f8:	2200      	movs	r2, #0
 80078fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078fc:	4b25      	ldr	r3, [pc, #148]	; (8007994 <vTaskSwitchContext+0xb4>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	fab3 f383 	clz	r3, r3
 8007908:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800790a:	7afb      	ldrb	r3, [r7, #11]
 800790c:	f1c3 031f 	rsb	r3, r3, #31
 8007910:	617b      	str	r3, [r7, #20]
 8007912:	4921      	ldr	r1, [pc, #132]	; (8007998 <vTaskSwitchContext+0xb8>)
 8007914:	697a      	ldr	r2, [r7, #20]
 8007916:	4613      	mov	r3, r2
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	4413      	add	r3, r2
 800791c:	009b      	lsls	r3, r3, #2
 800791e:	440b      	add	r3, r1
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d10a      	bne.n	800793c <vTaskSwitchContext+0x5c>
	__asm volatile
 8007926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800792a:	f383 8811 	msr	BASEPRI, r3
 800792e:	f3bf 8f6f 	isb	sy
 8007932:	f3bf 8f4f 	dsb	sy
 8007936:	607b      	str	r3, [r7, #4]
}
 8007938:	bf00      	nop
 800793a:	e7fe      	b.n	800793a <vTaskSwitchContext+0x5a>
 800793c:	697a      	ldr	r2, [r7, #20]
 800793e:	4613      	mov	r3, r2
 8007940:	009b      	lsls	r3, r3, #2
 8007942:	4413      	add	r3, r2
 8007944:	009b      	lsls	r3, r3, #2
 8007946:	4a14      	ldr	r2, [pc, #80]	; (8007998 <vTaskSwitchContext+0xb8>)
 8007948:	4413      	add	r3, r2
 800794a:	613b      	str	r3, [r7, #16]
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	685a      	ldr	r2, [r3, #4]
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	605a      	str	r2, [r3, #4]
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	685a      	ldr	r2, [r3, #4]
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	3308      	adds	r3, #8
 800795e:	429a      	cmp	r2, r3
 8007960:	d104      	bne.n	800796c <vTaskSwitchContext+0x8c>
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	685a      	ldr	r2, [r3, #4]
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	605a      	str	r2, [r3, #4]
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	68db      	ldr	r3, [r3, #12]
 8007972:	4a0a      	ldr	r2, [pc, #40]	; (800799c <vTaskSwitchContext+0xbc>)
 8007974:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007976:	4b09      	ldr	r3, [pc, #36]	; (800799c <vTaskSwitchContext+0xbc>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	334c      	adds	r3, #76	; 0x4c
 800797c:	4a08      	ldr	r2, [pc, #32]	; (80079a0 <vTaskSwitchContext+0xc0>)
 800797e:	6013      	str	r3, [r2, #0]
}
 8007980:	bf00      	nop
 8007982:	371c      	adds	r7, #28
 8007984:	46bd      	mov	sp, r7
 8007986:	bc80      	pop	{r7}
 8007988:	4770      	bx	lr
 800798a:	bf00      	nop
 800798c:	20000cd4 	.word	0x20000cd4
 8007990:	20000cc0 	.word	0x20000cc0
 8007994:	20000cb4 	.word	0x20000cb4
 8007998:	20000bb0 	.word	0x20000bb0
 800799c:	20000bac 	.word	0x20000bac
 80079a0:	20000010 	.word	0x20000010

080079a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b084      	sub	sp, #16
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
 80079ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d10a      	bne.n	80079ca <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80079b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b8:	f383 8811 	msr	BASEPRI, r3
 80079bc:	f3bf 8f6f 	isb	sy
 80079c0:	f3bf 8f4f 	dsb	sy
 80079c4:	60fb      	str	r3, [r7, #12]
}
 80079c6:	bf00      	nop
 80079c8:	e7fe      	b.n	80079c8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80079ca:	4b07      	ldr	r3, [pc, #28]	; (80079e8 <vTaskPlaceOnEventList+0x44>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	3318      	adds	r3, #24
 80079d0:	4619      	mov	r1, r3
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f7fe fe42 	bl	800665c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80079d8:	2101      	movs	r1, #1
 80079da:	6838      	ldr	r0, [r7, #0]
 80079dc:	f000 fa98 	bl	8007f10 <prvAddCurrentTaskToDelayedList>
}
 80079e0:	bf00      	nop
 80079e2:	3710      	adds	r7, #16
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}
 80079e8:	20000bac 	.word	0x20000bac

080079ec <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b086      	sub	sp, #24
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	60f8      	str	r0, [r7, #12]
 80079f4:	60b9      	str	r1, [r7, #8]
 80079f6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d10a      	bne.n	8007a14 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80079fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a02:	f383 8811 	msr	BASEPRI, r3
 8007a06:	f3bf 8f6f 	isb	sy
 8007a0a:	f3bf 8f4f 	dsb	sy
 8007a0e:	617b      	str	r3, [r7, #20]
}
 8007a10:	bf00      	nop
 8007a12:	e7fe      	b.n	8007a12 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007a14:	4b0a      	ldr	r3, [pc, #40]	; (8007a40 <vTaskPlaceOnEventListRestricted+0x54>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	3318      	adds	r3, #24
 8007a1a:	4619      	mov	r1, r3
 8007a1c:	68f8      	ldr	r0, [r7, #12]
 8007a1e:	f7fe fdfa 	bl	8006616 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d002      	beq.n	8007a2e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007a28:	f04f 33ff 	mov.w	r3, #4294967295
 8007a2c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007a2e:	6879      	ldr	r1, [r7, #4]
 8007a30:	68b8      	ldr	r0, [r7, #8]
 8007a32:	f000 fa6d 	bl	8007f10 <prvAddCurrentTaskToDelayedList>
	}
 8007a36:	bf00      	nop
 8007a38:	3718      	adds	r7, #24
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
 8007a3e:	bf00      	nop
 8007a40:	20000bac 	.word	0x20000bac

08007a44 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b086      	sub	sp, #24
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	68db      	ldr	r3, [r3, #12]
 8007a50:	68db      	ldr	r3, [r3, #12]
 8007a52:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d10a      	bne.n	8007a70 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a5e:	f383 8811 	msr	BASEPRI, r3
 8007a62:	f3bf 8f6f 	isb	sy
 8007a66:	f3bf 8f4f 	dsb	sy
 8007a6a:	60fb      	str	r3, [r7, #12]
}
 8007a6c:	bf00      	nop
 8007a6e:	e7fe      	b.n	8007a6e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	3318      	adds	r3, #24
 8007a74:	4618      	mov	r0, r3
 8007a76:	f7fe fe29 	bl	80066cc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a7a:	4b1d      	ldr	r3, [pc, #116]	; (8007af0 <xTaskRemoveFromEventList+0xac>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d11c      	bne.n	8007abc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	3304      	adds	r3, #4
 8007a86:	4618      	mov	r0, r3
 8007a88:	f7fe fe20 	bl	80066cc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a90:	2201      	movs	r2, #1
 8007a92:	409a      	lsls	r2, r3
 8007a94:	4b17      	ldr	r3, [pc, #92]	; (8007af4 <xTaskRemoveFromEventList+0xb0>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	4a16      	ldr	r2, [pc, #88]	; (8007af4 <xTaskRemoveFromEventList+0xb0>)
 8007a9c:	6013      	str	r3, [r2, #0]
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007aa2:	4613      	mov	r3, r2
 8007aa4:	009b      	lsls	r3, r3, #2
 8007aa6:	4413      	add	r3, r2
 8007aa8:	009b      	lsls	r3, r3, #2
 8007aaa:	4a13      	ldr	r2, [pc, #76]	; (8007af8 <xTaskRemoveFromEventList+0xb4>)
 8007aac:	441a      	add	r2, r3
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	3304      	adds	r3, #4
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	4610      	mov	r0, r2
 8007ab6:	f7fe fdae 	bl	8006616 <vListInsertEnd>
 8007aba:	e005      	b.n	8007ac8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	3318      	adds	r3, #24
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	480e      	ldr	r0, [pc, #56]	; (8007afc <xTaskRemoveFromEventList+0xb8>)
 8007ac4:	f7fe fda7 	bl	8006616 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007acc:	4b0c      	ldr	r3, [pc, #48]	; (8007b00 <xTaskRemoveFromEventList+0xbc>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d905      	bls.n	8007ae2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007ada:	4b0a      	ldr	r3, [pc, #40]	; (8007b04 <xTaskRemoveFromEventList+0xc0>)
 8007adc:	2201      	movs	r2, #1
 8007ade:	601a      	str	r2, [r3, #0]
 8007ae0:	e001      	b.n	8007ae6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007ae6:	697b      	ldr	r3, [r7, #20]
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3718      	adds	r7, #24
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}
 8007af0:	20000cd4 	.word	0x20000cd4
 8007af4:	20000cb4 	.word	0x20000cb4
 8007af8:	20000bb0 	.word	0x20000bb0
 8007afc:	20000c6c 	.word	0x20000c6c
 8007b00:	20000bac 	.word	0x20000bac
 8007b04:	20000cc0 	.word	0x20000cc0

08007b08 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007b10:	4b06      	ldr	r3, [pc, #24]	; (8007b2c <vTaskInternalSetTimeOutState+0x24>)
 8007b12:	681a      	ldr	r2, [r3, #0]
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007b18:	4b05      	ldr	r3, [pc, #20]	; (8007b30 <vTaskInternalSetTimeOutState+0x28>)
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	605a      	str	r2, [r3, #4]
}
 8007b20:	bf00      	nop
 8007b22:	370c      	adds	r7, #12
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bc80      	pop	{r7}
 8007b28:	4770      	bx	lr
 8007b2a:	bf00      	nop
 8007b2c:	20000cc4 	.word	0x20000cc4
 8007b30:	20000cb0 	.word	0x20000cb0

08007b34 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b088      	sub	sp, #32
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d10a      	bne.n	8007b5a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b48:	f383 8811 	msr	BASEPRI, r3
 8007b4c:	f3bf 8f6f 	isb	sy
 8007b50:	f3bf 8f4f 	dsb	sy
 8007b54:	613b      	str	r3, [r7, #16]
}
 8007b56:	bf00      	nop
 8007b58:	e7fe      	b.n	8007b58 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d10a      	bne.n	8007b76 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b64:	f383 8811 	msr	BASEPRI, r3
 8007b68:	f3bf 8f6f 	isb	sy
 8007b6c:	f3bf 8f4f 	dsb	sy
 8007b70:	60fb      	str	r3, [r7, #12]
}
 8007b72:	bf00      	nop
 8007b74:	e7fe      	b.n	8007b74 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007b76:	f000 fe51 	bl	800881c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007b7a:	4b1d      	ldr	r3, [pc, #116]	; (8007bf0 <xTaskCheckForTimeOut+0xbc>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	69ba      	ldr	r2, [r7, #24]
 8007b86:	1ad3      	subs	r3, r2, r3
 8007b88:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b92:	d102      	bne.n	8007b9a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007b94:	2300      	movs	r3, #0
 8007b96:	61fb      	str	r3, [r7, #28]
 8007b98:	e023      	b.n	8007be2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681a      	ldr	r2, [r3, #0]
 8007b9e:	4b15      	ldr	r3, [pc, #84]	; (8007bf4 <xTaskCheckForTimeOut+0xc0>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	d007      	beq.n	8007bb6 <xTaskCheckForTimeOut+0x82>
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	69ba      	ldr	r2, [r7, #24]
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d302      	bcc.n	8007bb6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	61fb      	str	r3, [r7, #28]
 8007bb4:	e015      	b.n	8007be2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	697a      	ldr	r2, [r7, #20]
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d20b      	bcs.n	8007bd8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	681a      	ldr	r2, [r3, #0]
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	1ad2      	subs	r2, r2, r3
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f7ff ff9b 	bl	8007b08 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	61fb      	str	r3, [r7, #28]
 8007bd6:	e004      	b.n	8007be2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007bde:	2301      	movs	r3, #1
 8007be0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007be2:	f000 fe4b 	bl	800887c <vPortExitCritical>

	return xReturn;
 8007be6:	69fb      	ldr	r3, [r7, #28]
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3720      	adds	r7, #32
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}
 8007bf0:	20000cb0 	.word	0x20000cb0
 8007bf4:	20000cc4 	.word	0x20000cc4

08007bf8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007bfc:	4b03      	ldr	r3, [pc, #12]	; (8007c0c <vTaskMissedYield+0x14>)
 8007bfe:	2201      	movs	r2, #1
 8007c00:	601a      	str	r2, [r3, #0]
}
 8007c02:	bf00      	nop
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bc80      	pop	{r7}
 8007c08:	4770      	bx	lr
 8007c0a:	bf00      	nop
 8007c0c:	20000cc0 	.word	0x20000cc0

08007c10 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b082      	sub	sp, #8
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007c18:	f000 f854 	bl	8007cc4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007c1c:	4b07      	ldr	r3, [pc, #28]	; (8007c3c <prvIdleTask+0x2c>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	2b01      	cmp	r3, #1
 8007c22:	d907      	bls.n	8007c34 <prvIdleTask+0x24>
			{
				taskYIELD();
 8007c24:	4b06      	ldr	r3, [pc, #24]	; (8007c40 <prvIdleTask+0x30>)
 8007c26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c2a:	601a      	str	r2, [r3, #0]
 8007c2c:	f3bf 8f4f 	dsb	sy
 8007c30:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8007c34:	f7f8 fc7e 	bl	8000534 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8007c38:	e7ee      	b.n	8007c18 <prvIdleTask+0x8>
 8007c3a:	bf00      	nop
 8007c3c:	20000bb0 	.word	0x20000bb0
 8007c40:	e000ed04 	.word	0xe000ed04

08007c44 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b082      	sub	sp, #8
 8007c48:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	607b      	str	r3, [r7, #4]
 8007c4e:	e00c      	b.n	8007c6a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	4613      	mov	r3, r2
 8007c54:	009b      	lsls	r3, r3, #2
 8007c56:	4413      	add	r3, r2
 8007c58:	009b      	lsls	r3, r3, #2
 8007c5a:	4a12      	ldr	r2, [pc, #72]	; (8007ca4 <prvInitialiseTaskLists+0x60>)
 8007c5c:	4413      	add	r3, r2
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f7fe fcae 	bl	80065c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	3301      	adds	r3, #1
 8007c68:	607b      	str	r3, [r7, #4]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2b06      	cmp	r3, #6
 8007c6e:	d9ef      	bls.n	8007c50 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007c70:	480d      	ldr	r0, [pc, #52]	; (8007ca8 <prvInitialiseTaskLists+0x64>)
 8007c72:	f7fe fca5 	bl	80065c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007c76:	480d      	ldr	r0, [pc, #52]	; (8007cac <prvInitialiseTaskLists+0x68>)
 8007c78:	f7fe fca2 	bl	80065c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007c7c:	480c      	ldr	r0, [pc, #48]	; (8007cb0 <prvInitialiseTaskLists+0x6c>)
 8007c7e:	f7fe fc9f 	bl	80065c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007c82:	480c      	ldr	r0, [pc, #48]	; (8007cb4 <prvInitialiseTaskLists+0x70>)
 8007c84:	f7fe fc9c 	bl	80065c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007c88:	480b      	ldr	r0, [pc, #44]	; (8007cb8 <prvInitialiseTaskLists+0x74>)
 8007c8a:	f7fe fc99 	bl	80065c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007c8e:	4b0b      	ldr	r3, [pc, #44]	; (8007cbc <prvInitialiseTaskLists+0x78>)
 8007c90:	4a05      	ldr	r2, [pc, #20]	; (8007ca8 <prvInitialiseTaskLists+0x64>)
 8007c92:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007c94:	4b0a      	ldr	r3, [pc, #40]	; (8007cc0 <prvInitialiseTaskLists+0x7c>)
 8007c96:	4a05      	ldr	r2, [pc, #20]	; (8007cac <prvInitialiseTaskLists+0x68>)
 8007c98:	601a      	str	r2, [r3, #0]
}
 8007c9a:	bf00      	nop
 8007c9c:	3708      	adds	r7, #8
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	20000bb0 	.word	0x20000bb0
 8007ca8:	20000c3c 	.word	0x20000c3c
 8007cac:	20000c50 	.word	0x20000c50
 8007cb0:	20000c6c 	.word	0x20000c6c
 8007cb4:	20000c80 	.word	0x20000c80
 8007cb8:	20000c98 	.word	0x20000c98
 8007cbc:	20000c64 	.word	0x20000c64
 8007cc0:	20000c68 	.word	0x20000c68

08007cc4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b082      	sub	sp, #8
 8007cc8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007cca:	e019      	b.n	8007d00 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007ccc:	f000 fda6 	bl	800881c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cd0:	4b10      	ldr	r3, [pc, #64]	; (8007d14 <prvCheckTasksWaitingTermination+0x50>)
 8007cd2:	68db      	ldr	r3, [r3, #12]
 8007cd4:	68db      	ldr	r3, [r3, #12]
 8007cd6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	3304      	adds	r3, #4
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f7fe fcf5 	bl	80066cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007ce2:	4b0d      	ldr	r3, [pc, #52]	; (8007d18 <prvCheckTasksWaitingTermination+0x54>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	3b01      	subs	r3, #1
 8007ce8:	4a0b      	ldr	r2, [pc, #44]	; (8007d18 <prvCheckTasksWaitingTermination+0x54>)
 8007cea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007cec:	4b0b      	ldr	r3, [pc, #44]	; (8007d1c <prvCheckTasksWaitingTermination+0x58>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	3b01      	subs	r3, #1
 8007cf2:	4a0a      	ldr	r2, [pc, #40]	; (8007d1c <prvCheckTasksWaitingTermination+0x58>)
 8007cf4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007cf6:	f000 fdc1 	bl	800887c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f000 f810 	bl	8007d20 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007d00:	4b06      	ldr	r3, [pc, #24]	; (8007d1c <prvCheckTasksWaitingTermination+0x58>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d1e1      	bne.n	8007ccc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007d08:	bf00      	nop
 8007d0a:	bf00      	nop
 8007d0c:	3708      	adds	r7, #8
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}
 8007d12:	bf00      	nop
 8007d14:	20000c80 	.word	0x20000c80
 8007d18:	20000cac 	.word	0x20000cac
 8007d1c:	20000c94 	.word	0x20000c94

08007d20 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b084      	sub	sp, #16
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	334c      	adds	r3, #76	; 0x4c
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f001 fa29 	bl	8009184 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d108      	bne.n	8007d4e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d40:	4618      	mov	r0, r3
 8007d42:	f000 ff2f 	bl	8008ba4 <vPortFree>
				vPortFree( pxTCB );
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f000 ff2c 	bl	8008ba4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007d4c:	e018      	b.n	8007d80 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d103      	bne.n	8007d60 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f000 ff23 	bl	8008ba4 <vPortFree>
	}
 8007d5e:	e00f      	b.n	8007d80 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007d66:	2b02      	cmp	r3, #2
 8007d68:	d00a      	beq.n	8007d80 <prvDeleteTCB+0x60>
	__asm volatile
 8007d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d6e:	f383 8811 	msr	BASEPRI, r3
 8007d72:	f3bf 8f6f 	isb	sy
 8007d76:	f3bf 8f4f 	dsb	sy
 8007d7a:	60fb      	str	r3, [r7, #12]
}
 8007d7c:	bf00      	nop
 8007d7e:	e7fe      	b.n	8007d7e <prvDeleteTCB+0x5e>
	}
 8007d80:	bf00      	nop
 8007d82:	3710      	adds	r7, #16
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b083      	sub	sp, #12
 8007d8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d8e:	4b0c      	ldr	r3, [pc, #48]	; (8007dc0 <prvResetNextTaskUnblockTime+0x38>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d104      	bne.n	8007da2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007d98:	4b0a      	ldr	r3, [pc, #40]	; (8007dc4 <prvResetNextTaskUnblockTime+0x3c>)
 8007d9a:	f04f 32ff 	mov.w	r2, #4294967295
 8007d9e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007da0:	e008      	b.n	8007db4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007da2:	4b07      	ldr	r3, [pc, #28]	; (8007dc0 <prvResetNextTaskUnblockTime+0x38>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	68db      	ldr	r3, [r3, #12]
 8007da8:	68db      	ldr	r3, [r3, #12]
 8007daa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	4a04      	ldr	r2, [pc, #16]	; (8007dc4 <prvResetNextTaskUnblockTime+0x3c>)
 8007db2:	6013      	str	r3, [r2, #0]
}
 8007db4:	bf00      	nop
 8007db6:	370c      	adds	r7, #12
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bc80      	pop	{r7}
 8007dbc:	4770      	bx	lr
 8007dbe:	bf00      	nop
 8007dc0:	20000c64 	.word	0x20000c64
 8007dc4:	20000ccc 	.word	0x20000ccc

08007dc8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007dc8:	b480      	push	{r7}
 8007dca:	b083      	sub	sp, #12
 8007dcc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007dce:	4b0b      	ldr	r3, [pc, #44]	; (8007dfc <xTaskGetSchedulerState+0x34>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d102      	bne.n	8007ddc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	607b      	str	r3, [r7, #4]
 8007dda:	e008      	b.n	8007dee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ddc:	4b08      	ldr	r3, [pc, #32]	; (8007e00 <xTaskGetSchedulerState+0x38>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d102      	bne.n	8007dea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007de4:	2302      	movs	r3, #2
 8007de6:	607b      	str	r3, [r7, #4]
 8007de8:	e001      	b.n	8007dee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007dea:	2300      	movs	r3, #0
 8007dec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007dee:	687b      	ldr	r3, [r7, #4]
	}
 8007df0:	4618      	mov	r0, r3
 8007df2:	370c      	adds	r7, #12
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bc80      	pop	{r7}
 8007df8:	4770      	bx	lr
 8007dfa:	bf00      	nop
 8007dfc:	20000cb8 	.word	0x20000cb8
 8007e00:	20000cd4 	.word	0x20000cd4

08007e04 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b086      	sub	sp, #24
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007e10:	2300      	movs	r3, #0
 8007e12:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d06e      	beq.n	8007ef8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007e1a:	4b3a      	ldr	r3, [pc, #232]	; (8007f04 <xTaskPriorityDisinherit+0x100>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	693a      	ldr	r2, [r7, #16]
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d00a      	beq.n	8007e3a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8007e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e28:	f383 8811 	msr	BASEPRI, r3
 8007e2c:	f3bf 8f6f 	isb	sy
 8007e30:	f3bf 8f4f 	dsb	sy
 8007e34:	60fb      	str	r3, [r7, #12]
}
 8007e36:	bf00      	nop
 8007e38:	e7fe      	b.n	8007e38 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d10a      	bne.n	8007e58 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8007e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e46:	f383 8811 	msr	BASEPRI, r3
 8007e4a:	f3bf 8f6f 	isb	sy
 8007e4e:	f3bf 8f4f 	dsb	sy
 8007e52:	60bb      	str	r3, [r7, #8]
}
 8007e54:	bf00      	nop
 8007e56:	e7fe      	b.n	8007e56 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e5c:	1e5a      	subs	r2, r3, #1
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e66:	693b      	ldr	r3, [r7, #16]
 8007e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e6a:	429a      	cmp	r2, r3
 8007e6c:	d044      	beq.n	8007ef8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007e6e:	693b      	ldr	r3, [r7, #16]
 8007e70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d140      	bne.n	8007ef8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	3304      	adds	r3, #4
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f7fe fc26 	bl	80066cc <uxListRemove>
 8007e80:	4603      	mov	r3, r0
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d115      	bne.n	8007eb2 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e8a:	491f      	ldr	r1, [pc, #124]	; (8007f08 <xTaskPriorityDisinherit+0x104>)
 8007e8c:	4613      	mov	r3, r2
 8007e8e:	009b      	lsls	r3, r3, #2
 8007e90:	4413      	add	r3, r2
 8007e92:	009b      	lsls	r3, r3, #2
 8007e94:	440b      	add	r3, r1
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d10a      	bne.n	8007eb2 <xTaskPriorityDisinherit+0xae>
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ea0:	2201      	movs	r2, #1
 8007ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ea6:	43da      	mvns	r2, r3
 8007ea8:	4b18      	ldr	r3, [pc, #96]	; (8007f0c <xTaskPriorityDisinherit+0x108>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4013      	ands	r3, r2
 8007eae:	4a17      	ldr	r2, [pc, #92]	; (8007f0c <xTaskPriorityDisinherit+0x108>)
 8007eb0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007eba:	693b      	ldr	r3, [r7, #16]
 8007ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ebe:	f1c3 0207 	rsb	r2, r3, #7
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eca:	2201      	movs	r2, #1
 8007ecc:	409a      	lsls	r2, r3
 8007ece:	4b0f      	ldr	r3, [pc, #60]	; (8007f0c <xTaskPriorityDisinherit+0x108>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	4a0d      	ldr	r2, [pc, #52]	; (8007f0c <xTaskPriorityDisinherit+0x108>)
 8007ed6:	6013      	str	r3, [r2, #0]
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007edc:	4613      	mov	r3, r2
 8007ede:	009b      	lsls	r3, r3, #2
 8007ee0:	4413      	add	r3, r2
 8007ee2:	009b      	lsls	r3, r3, #2
 8007ee4:	4a08      	ldr	r2, [pc, #32]	; (8007f08 <xTaskPriorityDisinherit+0x104>)
 8007ee6:	441a      	add	r2, r3
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	3304      	adds	r3, #4
 8007eec:	4619      	mov	r1, r3
 8007eee:	4610      	mov	r0, r2
 8007ef0:	f7fe fb91 	bl	8006616 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007ef8:	697b      	ldr	r3, [r7, #20]
	}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3718      	adds	r7, #24
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}
 8007f02:	bf00      	nop
 8007f04:	20000bac 	.word	0x20000bac
 8007f08:	20000bb0 	.word	0x20000bb0
 8007f0c:	20000cb4 	.word	0x20000cb4

08007f10 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b084      	sub	sp, #16
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007f1a:	4b29      	ldr	r3, [pc, #164]	; (8007fc0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f20:	4b28      	ldr	r3, [pc, #160]	; (8007fc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	3304      	adds	r3, #4
 8007f26:	4618      	mov	r0, r3
 8007f28:	f7fe fbd0 	bl	80066cc <uxListRemove>
 8007f2c:	4603      	mov	r3, r0
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d10b      	bne.n	8007f4a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007f32:	4b24      	ldr	r3, [pc, #144]	; (8007fc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f38:	2201      	movs	r2, #1
 8007f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f3e:	43da      	mvns	r2, r3
 8007f40:	4b21      	ldr	r3, [pc, #132]	; (8007fc8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4013      	ands	r3, r2
 8007f46:	4a20      	ldr	r2, [pc, #128]	; (8007fc8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007f48:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f50:	d10a      	bne.n	8007f68 <prvAddCurrentTaskToDelayedList+0x58>
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d007      	beq.n	8007f68 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f58:	4b1a      	ldr	r3, [pc, #104]	; (8007fc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	3304      	adds	r3, #4
 8007f5e:	4619      	mov	r1, r3
 8007f60:	481a      	ldr	r0, [pc, #104]	; (8007fcc <prvAddCurrentTaskToDelayedList+0xbc>)
 8007f62:	f7fe fb58 	bl	8006616 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007f66:	e026      	b.n	8007fb6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007f68:	68fa      	ldr	r2, [r7, #12]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	4413      	add	r3, r2
 8007f6e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007f70:	4b14      	ldr	r3, [pc, #80]	; (8007fc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	68ba      	ldr	r2, [r7, #8]
 8007f76:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007f78:	68ba      	ldr	r2, [r7, #8]
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	429a      	cmp	r2, r3
 8007f7e:	d209      	bcs.n	8007f94 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f80:	4b13      	ldr	r3, [pc, #76]	; (8007fd0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007f82:	681a      	ldr	r2, [r3, #0]
 8007f84:	4b0f      	ldr	r3, [pc, #60]	; (8007fc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	3304      	adds	r3, #4
 8007f8a:	4619      	mov	r1, r3
 8007f8c:	4610      	mov	r0, r2
 8007f8e:	f7fe fb65 	bl	800665c <vListInsert>
}
 8007f92:	e010      	b.n	8007fb6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007f94:	4b0f      	ldr	r3, [pc, #60]	; (8007fd4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007f96:	681a      	ldr	r2, [r3, #0]
 8007f98:	4b0a      	ldr	r3, [pc, #40]	; (8007fc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	3304      	adds	r3, #4
 8007f9e:	4619      	mov	r1, r3
 8007fa0:	4610      	mov	r0, r2
 8007fa2:	f7fe fb5b 	bl	800665c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007fa6:	4b0c      	ldr	r3, [pc, #48]	; (8007fd8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	68ba      	ldr	r2, [r7, #8]
 8007fac:	429a      	cmp	r2, r3
 8007fae:	d202      	bcs.n	8007fb6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8007fb0:	4a09      	ldr	r2, [pc, #36]	; (8007fd8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	6013      	str	r3, [r2, #0]
}
 8007fb6:	bf00      	nop
 8007fb8:	3710      	adds	r7, #16
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	bd80      	pop	{r7, pc}
 8007fbe:	bf00      	nop
 8007fc0:	20000cb0 	.word	0x20000cb0
 8007fc4:	20000bac 	.word	0x20000bac
 8007fc8:	20000cb4 	.word	0x20000cb4
 8007fcc:	20000c98 	.word	0x20000c98
 8007fd0:	20000c68 	.word	0x20000c68
 8007fd4:	20000c64 	.word	0x20000c64
 8007fd8:	20000ccc 	.word	0x20000ccc

08007fdc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b08a      	sub	sp, #40	; 0x28
 8007fe0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007fe6:	f000 fae9 	bl	80085bc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007fea:	4b1c      	ldr	r3, [pc, #112]	; (800805c <xTimerCreateTimerTask+0x80>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d021      	beq.n	8008036 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007ffa:	1d3a      	adds	r2, r7, #4
 8007ffc:	f107 0108 	add.w	r1, r7, #8
 8008000:	f107 030c 	add.w	r3, r7, #12
 8008004:	4618      	mov	r0, r3
 8008006:	f7f8 fab3 	bl	8000570 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800800a:	6879      	ldr	r1, [r7, #4]
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	68fa      	ldr	r2, [r7, #12]
 8008010:	9202      	str	r2, [sp, #8]
 8008012:	9301      	str	r3, [sp, #4]
 8008014:	2302      	movs	r3, #2
 8008016:	9300      	str	r3, [sp, #0]
 8008018:	2300      	movs	r3, #0
 800801a:	460a      	mov	r2, r1
 800801c:	4910      	ldr	r1, [pc, #64]	; (8008060 <xTimerCreateTimerTask+0x84>)
 800801e:	4811      	ldr	r0, [pc, #68]	; (8008064 <xTimerCreateTimerTask+0x88>)
 8008020:	f7ff f8a0 	bl	8007164 <xTaskCreateStatic>
 8008024:	4603      	mov	r3, r0
 8008026:	4a10      	ldr	r2, [pc, #64]	; (8008068 <xTimerCreateTimerTask+0x8c>)
 8008028:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800802a:	4b0f      	ldr	r3, [pc, #60]	; (8008068 <xTimerCreateTimerTask+0x8c>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d001      	beq.n	8008036 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008032:	2301      	movs	r3, #1
 8008034:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d10a      	bne.n	8008052 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800803c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008040:	f383 8811 	msr	BASEPRI, r3
 8008044:	f3bf 8f6f 	isb	sy
 8008048:	f3bf 8f4f 	dsb	sy
 800804c:	613b      	str	r3, [r7, #16]
}
 800804e:	bf00      	nop
 8008050:	e7fe      	b.n	8008050 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008052:	697b      	ldr	r3, [r7, #20]
}
 8008054:	4618      	mov	r0, r3
 8008056:	3718      	adds	r7, #24
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}
 800805c:	20000d08 	.word	0x20000d08
 8008060:	0800a44c 	.word	0x0800a44c
 8008064:	080081a1 	.word	0x080081a1
 8008068:	20000d0c 	.word	0x20000d0c

0800806c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b08a      	sub	sp, #40	; 0x28
 8008070:	af00      	add	r7, sp, #0
 8008072:	60f8      	str	r0, [r7, #12]
 8008074:	60b9      	str	r1, [r7, #8]
 8008076:	607a      	str	r2, [r7, #4]
 8008078:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800807a:	2300      	movs	r3, #0
 800807c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d10a      	bne.n	800809a <xTimerGenericCommand+0x2e>
	__asm volatile
 8008084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008088:	f383 8811 	msr	BASEPRI, r3
 800808c:	f3bf 8f6f 	isb	sy
 8008090:	f3bf 8f4f 	dsb	sy
 8008094:	623b      	str	r3, [r7, #32]
}
 8008096:	bf00      	nop
 8008098:	e7fe      	b.n	8008098 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800809a:	4b1a      	ldr	r3, [pc, #104]	; (8008104 <xTimerGenericCommand+0x98>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d02a      	beq.n	80080f8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	2b05      	cmp	r3, #5
 80080b2:	dc18      	bgt.n	80080e6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80080b4:	f7ff fe88 	bl	8007dc8 <xTaskGetSchedulerState>
 80080b8:	4603      	mov	r3, r0
 80080ba:	2b02      	cmp	r3, #2
 80080bc:	d109      	bne.n	80080d2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80080be:	4b11      	ldr	r3, [pc, #68]	; (8008104 <xTimerGenericCommand+0x98>)
 80080c0:	6818      	ldr	r0, [r3, #0]
 80080c2:	f107 0114 	add.w	r1, r7, #20
 80080c6:	2300      	movs	r3, #0
 80080c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80080ca:	f7fe fc69 	bl	80069a0 <xQueueGenericSend>
 80080ce:	6278      	str	r0, [r7, #36]	; 0x24
 80080d0:	e012      	b.n	80080f8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80080d2:	4b0c      	ldr	r3, [pc, #48]	; (8008104 <xTimerGenericCommand+0x98>)
 80080d4:	6818      	ldr	r0, [r3, #0]
 80080d6:	f107 0114 	add.w	r1, r7, #20
 80080da:	2300      	movs	r3, #0
 80080dc:	2200      	movs	r2, #0
 80080de:	f7fe fc5f 	bl	80069a0 <xQueueGenericSend>
 80080e2:	6278      	str	r0, [r7, #36]	; 0x24
 80080e4:	e008      	b.n	80080f8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80080e6:	4b07      	ldr	r3, [pc, #28]	; (8008104 <xTimerGenericCommand+0x98>)
 80080e8:	6818      	ldr	r0, [r3, #0]
 80080ea:	f107 0114 	add.w	r1, r7, #20
 80080ee:	2300      	movs	r3, #0
 80080f0:	683a      	ldr	r2, [r7, #0]
 80080f2:	f7fe fd53 	bl	8006b9c <xQueueGenericSendFromISR>
 80080f6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80080f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3728      	adds	r7, #40	; 0x28
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}
 8008102:	bf00      	nop
 8008104:	20000d08 	.word	0x20000d08

08008108 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b088      	sub	sp, #32
 800810c:	af02      	add	r7, sp, #8
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008112:	4b22      	ldr	r3, [pc, #136]	; (800819c <prvProcessExpiredTimer+0x94>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	68db      	ldr	r3, [r3, #12]
 8008118:	68db      	ldr	r3, [r3, #12]
 800811a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	3304      	adds	r3, #4
 8008120:	4618      	mov	r0, r3
 8008122:	f7fe fad3 	bl	80066cc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800812c:	f003 0304 	and.w	r3, r3, #4
 8008130:	2b00      	cmp	r3, #0
 8008132:	d022      	beq.n	800817a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	699a      	ldr	r2, [r3, #24]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	18d1      	adds	r1, r2, r3
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	683a      	ldr	r2, [r7, #0]
 8008140:	6978      	ldr	r0, [r7, #20]
 8008142:	f000 f8cf 	bl	80082e4 <prvInsertTimerInActiveList>
 8008146:	4603      	mov	r3, r0
 8008148:	2b00      	cmp	r3, #0
 800814a:	d01f      	beq.n	800818c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800814c:	2300      	movs	r3, #0
 800814e:	9300      	str	r3, [sp, #0]
 8008150:	2300      	movs	r3, #0
 8008152:	687a      	ldr	r2, [r7, #4]
 8008154:	2100      	movs	r1, #0
 8008156:	6978      	ldr	r0, [r7, #20]
 8008158:	f7ff ff88 	bl	800806c <xTimerGenericCommand>
 800815c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	2b00      	cmp	r3, #0
 8008162:	d113      	bne.n	800818c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008168:	f383 8811 	msr	BASEPRI, r3
 800816c:	f3bf 8f6f 	isb	sy
 8008170:	f3bf 8f4f 	dsb	sy
 8008174:	60fb      	str	r3, [r7, #12]
}
 8008176:	bf00      	nop
 8008178:	e7fe      	b.n	8008178 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008180:	f023 0301 	bic.w	r3, r3, #1
 8008184:	b2da      	uxtb	r2, r3
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	6a1b      	ldr	r3, [r3, #32]
 8008190:	6978      	ldr	r0, [r7, #20]
 8008192:	4798      	blx	r3
}
 8008194:	bf00      	nop
 8008196:	3718      	adds	r7, #24
 8008198:	46bd      	mov	sp, r7
 800819a:	bd80      	pop	{r7, pc}
 800819c:	20000d00 	.word	0x20000d00

080081a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b084      	sub	sp, #16
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80081a8:	f107 0308 	add.w	r3, r7, #8
 80081ac:	4618      	mov	r0, r3
 80081ae:	f000 f857 	bl	8008260 <prvGetNextExpireTime>
 80081b2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	4619      	mov	r1, r3
 80081b8:	68f8      	ldr	r0, [r7, #12]
 80081ba:	f000 f803 	bl	80081c4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80081be:	f000 f8d3 	bl	8008368 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80081c2:	e7f1      	b.n	80081a8 <prvTimerTask+0x8>

080081c4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b084      	sub	sp, #16
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80081ce:	f7ff fa17 	bl	8007600 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80081d2:	f107 0308 	add.w	r3, r7, #8
 80081d6:	4618      	mov	r0, r3
 80081d8:	f000 f864 	bl	80082a4 <prvSampleTimeNow>
 80081dc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d130      	bne.n	8008246 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d10a      	bne.n	8008200 <prvProcessTimerOrBlockTask+0x3c>
 80081ea:	687a      	ldr	r2, [r7, #4]
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	429a      	cmp	r2, r3
 80081f0:	d806      	bhi.n	8008200 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80081f2:	f7ff fa13 	bl	800761c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80081f6:	68f9      	ldr	r1, [r7, #12]
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f7ff ff85 	bl	8008108 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80081fe:	e024      	b.n	800824a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d008      	beq.n	8008218 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008206:	4b13      	ldr	r3, [pc, #76]	; (8008254 <prvProcessTimerOrBlockTask+0x90>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d101      	bne.n	8008214 <prvProcessTimerOrBlockTask+0x50>
 8008210:	2301      	movs	r3, #1
 8008212:	e000      	b.n	8008216 <prvProcessTimerOrBlockTask+0x52>
 8008214:	2300      	movs	r3, #0
 8008216:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008218:	4b0f      	ldr	r3, [pc, #60]	; (8008258 <prvProcessTimerOrBlockTask+0x94>)
 800821a:	6818      	ldr	r0, [r3, #0]
 800821c:	687a      	ldr	r2, [r7, #4]
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	1ad3      	subs	r3, r2, r3
 8008222:	683a      	ldr	r2, [r7, #0]
 8008224:	4619      	mov	r1, r3
 8008226:	f7fe ff69 	bl	80070fc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800822a:	f7ff f9f7 	bl	800761c <xTaskResumeAll>
 800822e:	4603      	mov	r3, r0
 8008230:	2b00      	cmp	r3, #0
 8008232:	d10a      	bne.n	800824a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008234:	4b09      	ldr	r3, [pc, #36]	; (800825c <prvProcessTimerOrBlockTask+0x98>)
 8008236:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800823a:	601a      	str	r2, [r3, #0]
 800823c:	f3bf 8f4f 	dsb	sy
 8008240:	f3bf 8f6f 	isb	sy
}
 8008244:	e001      	b.n	800824a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008246:	f7ff f9e9 	bl	800761c <xTaskResumeAll>
}
 800824a:	bf00      	nop
 800824c:	3710      	adds	r7, #16
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}
 8008252:	bf00      	nop
 8008254:	20000d04 	.word	0x20000d04
 8008258:	20000d08 	.word	0x20000d08
 800825c:	e000ed04 	.word	0xe000ed04

08008260 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008260:	b480      	push	{r7}
 8008262:	b085      	sub	sp, #20
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008268:	4b0d      	ldr	r3, [pc, #52]	; (80082a0 <prvGetNextExpireTime+0x40>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d101      	bne.n	8008276 <prvGetNextExpireTime+0x16>
 8008272:	2201      	movs	r2, #1
 8008274:	e000      	b.n	8008278 <prvGetNextExpireTime+0x18>
 8008276:	2200      	movs	r2, #0
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d105      	bne.n	8008290 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008284:	4b06      	ldr	r3, [pc, #24]	; (80082a0 <prvGetNextExpireTime+0x40>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	68db      	ldr	r3, [r3, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	60fb      	str	r3, [r7, #12]
 800828e:	e001      	b.n	8008294 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008290:	2300      	movs	r3, #0
 8008292:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008294:	68fb      	ldr	r3, [r7, #12]
}
 8008296:	4618      	mov	r0, r3
 8008298:	3714      	adds	r7, #20
 800829a:	46bd      	mov	sp, r7
 800829c:	bc80      	pop	{r7}
 800829e:	4770      	bx	lr
 80082a0:	20000d00 	.word	0x20000d00

080082a4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b084      	sub	sp, #16
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80082ac:	f7ff fa52 	bl	8007754 <xTaskGetTickCount>
 80082b0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80082b2:	4b0b      	ldr	r3, [pc, #44]	; (80082e0 <prvSampleTimeNow+0x3c>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	68fa      	ldr	r2, [r7, #12]
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d205      	bcs.n	80082c8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80082bc:	f000 f91a 	bl	80084f4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2201      	movs	r2, #1
 80082c4:	601a      	str	r2, [r3, #0]
 80082c6:	e002      	b.n	80082ce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2200      	movs	r2, #0
 80082cc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80082ce:	4a04      	ldr	r2, [pc, #16]	; (80082e0 <prvSampleTimeNow+0x3c>)
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80082d4:	68fb      	ldr	r3, [r7, #12]
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3710      	adds	r7, #16
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}
 80082de:	bf00      	nop
 80082e0:	20000d10 	.word	0x20000d10

080082e4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b086      	sub	sp, #24
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	60f8      	str	r0, [r7, #12]
 80082ec:	60b9      	str	r1, [r7, #8]
 80082ee:	607a      	str	r2, [r7, #4]
 80082f0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80082f2:	2300      	movs	r3, #0
 80082f4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	68ba      	ldr	r2, [r7, #8]
 80082fa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	68fa      	ldr	r2, [r7, #12]
 8008300:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008302:	68ba      	ldr	r2, [r7, #8]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	429a      	cmp	r2, r3
 8008308:	d812      	bhi.n	8008330 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800830a:	687a      	ldr	r2, [r7, #4]
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	1ad2      	subs	r2, r2, r3
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	699b      	ldr	r3, [r3, #24]
 8008314:	429a      	cmp	r2, r3
 8008316:	d302      	bcc.n	800831e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008318:	2301      	movs	r3, #1
 800831a:	617b      	str	r3, [r7, #20]
 800831c:	e01b      	b.n	8008356 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800831e:	4b10      	ldr	r3, [pc, #64]	; (8008360 <prvInsertTimerInActiveList+0x7c>)
 8008320:	681a      	ldr	r2, [r3, #0]
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	3304      	adds	r3, #4
 8008326:	4619      	mov	r1, r3
 8008328:	4610      	mov	r0, r2
 800832a:	f7fe f997 	bl	800665c <vListInsert>
 800832e:	e012      	b.n	8008356 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008330:	687a      	ldr	r2, [r7, #4]
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	429a      	cmp	r2, r3
 8008336:	d206      	bcs.n	8008346 <prvInsertTimerInActiveList+0x62>
 8008338:	68ba      	ldr	r2, [r7, #8]
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	429a      	cmp	r2, r3
 800833e:	d302      	bcc.n	8008346 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008340:	2301      	movs	r3, #1
 8008342:	617b      	str	r3, [r7, #20]
 8008344:	e007      	b.n	8008356 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008346:	4b07      	ldr	r3, [pc, #28]	; (8008364 <prvInsertTimerInActiveList+0x80>)
 8008348:	681a      	ldr	r2, [r3, #0]
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	3304      	adds	r3, #4
 800834e:	4619      	mov	r1, r3
 8008350:	4610      	mov	r0, r2
 8008352:	f7fe f983 	bl	800665c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008356:	697b      	ldr	r3, [r7, #20]
}
 8008358:	4618      	mov	r0, r3
 800835a:	3718      	adds	r7, #24
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}
 8008360:	20000d04 	.word	0x20000d04
 8008364:	20000d00 	.word	0x20000d00

08008368 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b08c      	sub	sp, #48	; 0x30
 800836c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800836e:	e0ae      	b.n	80084ce <prvProcessReceivedCommands+0x166>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008370:	68bb      	ldr	r3, [r7, #8]
 8008372:	2b00      	cmp	r3, #0
 8008374:	f2c0 80aa 	blt.w	80084cc <prvProcessReceivedCommands+0x164>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800837c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837e:	695b      	ldr	r3, [r3, #20]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d004      	beq.n	800838e <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008386:	3304      	adds	r3, #4
 8008388:	4618      	mov	r0, r3
 800838a:	f7fe f99f 	bl	80066cc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800838e:	1d3b      	adds	r3, r7, #4
 8008390:	4618      	mov	r0, r3
 8008392:	f7ff ff87 	bl	80082a4 <prvSampleTimeNow>
 8008396:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	2b09      	cmp	r3, #9
 800839c:	f200 8097 	bhi.w	80084ce <prvProcessReceivedCommands+0x166>
 80083a0:	a201      	add	r2, pc, #4	; (adr r2, 80083a8 <prvProcessReceivedCommands+0x40>)
 80083a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083a6:	bf00      	nop
 80083a8:	080083d1 	.word	0x080083d1
 80083ac:	080083d1 	.word	0x080083d1
 80083b0:	080083d1 	.word	0x080083d1
 80083b4:	08008445 	.word	0x08008445
 80083b8:	08008459 	.word	0x08008459
 80083bc:	080084a3 	.word	0x080084a3
 80083c0:	080083d1 	.word	0x080083d1
 80083c4:	080083d1 	.word	0x080083d1
 80083c8:	08008445 	.word	0x08008445
 80083cc:	08008459 	.word	0x08008459
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80083d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80083d6:	f043 0301 	orr.w	r3, r3, #1
 80083da:	b2da      	uxtb	r2, r3
 80083dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80083e2:	68fa      	ldr	r2, [r7, #12]
 80083e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e6:	699b      	ldr	r3, [r3, #24]
 80083e8:	18d1      	adds	r1, r2, r3
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	6a3a      	ldr	r2, [r7, #32]
 80083ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80083f0:	f7ff ff78 	bl	80082e4 <prvInsertTimerInActiveList>
 80083f4:	4603      	mov	r3, r0
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d069      	beq.n	80084ce <prvProcessReceivedCommands+0x166>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80083fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083fc:	6a1b      	ldr	r3, [r3, #32]
 80083fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008400:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008404:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008408:	f003 0304 	and.w	r3, r3, #4
 800840c:	2b00      	cmp	r3, #0
 800840e:	d05e      	beq.n	80084ce <prvProcessReceivedCommands+0x166>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008410:	68fa      	ldr	r2, [r7, #12]
 8008412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008414:	699b      	ldr	r3, [r3, #24]
 8008416:	441a      	add	r2, r3
 8008418:	2300      	movs	r3, #0
 800841a:	9300      	str	r3, [sp, #0]
 800841c:	2300      	movs	r3, #0
 800841e:	2100      	movs	r1, #0
 8008420:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008422:	f7ff fe23 	bl	800806c <xTimerGenericCommand>
 8008426:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8008428:	69fb      	ldr	r3, [r7, #28]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d14f      	bne.n	80084ce <prvProcessReceivedCommands+0x166>
	__asm volatile
 800842e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008432:	f383 8811 	msr	BASEPRI, r3
 8008436:	f3bf 8f6f 	isb	sy
 800843a:	f3bf 8f4f 	dsb	sy
 800843e:	61bb      	str	r3, [r7, #24]
}
 8008440:	bf00      	nop
 8008442:	e7fe      	b.n	8008442 <prvProcessReceivedCommands+0xda>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008446:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800844a:	f023 0301 	bic.w	r3, r3, #1
 800844e:	b2da      	uxtb	r2, r3
 8008450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008452:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					break;
 8008456:	e03a      	b.n	80084ce <prvProcessReceivedCommands+0x166>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800845a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800845e:	f043 0301 	orr.w	r3, r3, #1
 8008462:	b2da      	uxtb	r2, r3
 8008464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008466:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800846a:	68fa      	ldr	r2, [r7, #12]
 800846c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800846e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008472:	699b      	ldr	r3, [r3, #24]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d10a      	bne.n	800848e <prvProcessReceivedCommands+0x126>
	__asm volatile
 8008478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800847c:	f383 8811 	msr	BASEPRI, r3
 8008480:	f3bf 8f6f 	isb	sy
 8008484:	f3bf 8f4f 	dsb	sy
 8008488:	617b      	str	r3, [r7, #20]
}
 800848a:	bf00      	nop
 800848c:	e7fe      	b.n	800848c <prvProcessReceivedCommands+0x124>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800848e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008490:	699a      	ldr	r2, [r3, #24]
 8008492:	6a3b      	ldr	r3, [r7, #32]
 8008494:	18d1      	adds	r1, r2, r3
 8008496:	6a3b      	ldr	r3, [r7, #32]
 8008498:	6a3a      	ldr	r2, [r7, #32]
 800849a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800849c:	f7ff ff22 	bl	80082e4 <prvInsertTimerInActiveList>
					break;
 80084a0:	e015      	b.n	80084ce <prvProcessReceivedCommands+0x166>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80084a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80084a8:	f003 0302 	and.w	r3, r3, #2
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d103      	bne.n	80084b8 <prvProcessReceivedCommands+0x150>
						{
							vPortFree( pxTimer );
 80084b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80084b2:	f000 fb77 	bl	8008ba4 <vPortFree>
 80084b6:	e00a      	b.n	80084ce <prvProcessReceivedCommands+0x166>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80084b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80084be:	f023 0301 	bic.w	r3, r3, #1
 80084c2:	b2da      	uxtb	r2, r3
 80084c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80084ca:	e000      	b.n	80084ce <prvProcessReceivedCommands+0x166>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80084cc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80084ce:	4b08      	ldr	r3, [pc, #32]	; (80084f0 <prvProcessReceivedCommands+0x188>)
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f107 0108 	add.w	r1, r7, #8
 80084d6:	2200      	movs	r2, #0
 80084d8:	4618      	mov	r0, r3
 80084da:	f7fe fbf7 	bl	8006ccc <xQueueReceive>
 80084de:	4603      	mov	r3, r0
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	f47f af45 	bne.w	8008370 <prvProcessReceivedCommands+0x8>
	}
}
 80084e6:	bf00      	nop
 80084e8:	bf00      	nop
 80084ea:	3728      	adds	r7, #40	; 0x28
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}
 80084f0:	20000d08 	.word	0x20000d08

080084f4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b088      	sub	sp, #32
 80084f8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80084fa:	e048      	b.n	800858e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80084fc:	4b2d      	ldr	r3, [pc, #180]	; (80085b4 <prvSwitchTimerLists+0xc0>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	68db      	ldr	r3, [r3, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008506:	4b2b      	ldr	r3, [pc, #172]	; (80085b4 <prvSwitchTimerLists+0xc0>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	68db      	ldr	r3, [r3, #12]
 800850c:	68db      	ldr	r3, [r3, #12]
 800850e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	3304      	adds	r3, #4
 8008514:	4618      	mov	r0, r3
 8008516:	f7fe f8d9 	bl	80066cc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	6a1b      	ldr	r3, [r3, #32]
 800851e:	68f8      	ldr	r0, [r7, #12]
 8008520:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008528:	f003 0304 	and.w	r3, r3, #4
 800852c:	2b00      	cmp	r3, #0
 800852e:	d02e      	beq.n	800858e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	699b      	ldr	r3, [r3, #24]
 8008534:	693a      	ldr	r2, [r7, #16]
 8008536:	4413      	add	r3, r2
 8008538:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800853a:	68ba      	ldr	r2, [r7, #8]
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	429a      	cmp	r2, r3
 8008540:	d90e      	bls.n	8008560 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	68ba      	ldr	r2, [r7, #8]
 8008546:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	68fa      	ldr	r2, [r7, #12]
 800854c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800854e:	4b19      	ldr	r3, [pc, #100]	; (80085b4 <prvSwitchTimerLists+0xc0>)
 8008550:	681a      	ldr	r2, [r3, #0]
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	3304      	adds	r3, #4
 8008556:	4619      	mov	r1, r3
 8008558:	4610      	mov	r0, r2
 800855a:	f7fe f87f 	bl	800665c <vListInsert>
 800855e:	e016      	b.n	800858e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008560:	2300      	movs	r3, #0
 8008562:	9300      	str	r3, [sp, #0]
 8008564:	2300      	movs	r3, #0
 8008566:	693a      	ldr	r2, [r7, #16]
 8008568:	2100      	movs	r1, #0
 800856a:	68f8      	ldr	r0, [r7, #12]
 800856c:	f7ff fd7e 	bl	800806c <xTimerGenericCommand>
 8008570:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d10a      	bne.n	800858e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800857c:	f383 8811 	msr	BASEPRI, r3
 8008580:	f3bf 8f6f 	isb	sy
 8008584:	f3bf 8f4f 	dsb	sy
 8008588:	603b      	str	r3, [r7, #0]
}
 800858a:	bf00      	nop
 800858c:	e7fe      	b.n	800858c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800858e:	4b09      	ldr	r3, [pc, #36]	; (80085b4 <prvSwitchTimerLists+0xc0>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d1b1      	bne.n	80084fc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008598:	4b06      	ldr	r3, [pc, #24]	; (80085b4 <prvSwitchTimerLists+0xc0>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800859e:	4b06      	ldr	r3, [pc, #24]	; (80085b8 <prvSwitchTimerLists+0xc4>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	4a04      	ldr	r2, [pc, #16]	; (80085b4 <prvSwitchTimerLists+0xc0>)
 80085a4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80085a6:	4a04      	ldr	r2, [pc, #16]	; (80085b8 <prvSwitchTimerLists+0xc4>)
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	6013      	str	r3, [r2, #0]
}
 80085ac:	bf00      	nop
 80085ae:	3718      	adds	r7, #24
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}
 80085b4:	20000d00 	.word	0x20000d00
 80085b8:	20000d04 	.word	0x20000d04

080085bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b082      	sub	sp, #8
 80085c0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80085c2:	f000 f92b 	bl	800881c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80085c6:	4b15      	ldr	r3, [pc, #84]	; (800861c <prvCheckForValidListAndQueue+0x60>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d120      	bne.n	8008610 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80085ce:	4814      	ldr	r0, [pc, #80]	; (8008620 <prvCheckForValidListAndQueue+0x64>)
 80085d0:	f7fd fff6 	bl	80065c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80085d4:	4813      	ldr	r0, [pc, #76]	; (8008624 <prvCheckForValidListAndQueue+0x68>)
 80085d6:	f7fd fff3 	bl	80065c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80085da:	4b13      	ldr	r3, [pc, #76]	; (8008628 <prvCheckForValidListAndQueue+0x6c>)
 80085dc:	4a10      	ldr	r2, [pc, #64]	; (8008620 <prvCheckForValidListAndQueue+0x64>)
 80085de:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80085e0:	4b12      	ldr	r3, [pc, #72]	; (800862c <prvCheckForValidListAndQueue+0x70>)
 80085e2:	4a10      	ldr	r2, [pc, #64]	; (8008624 <prvCheckForValidListAndQueue+0x68>)
 80085e4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80085e6:	2300      	movs	r3, #0
 80085e8:	9300      	str	r3, [sp, #0]
 80085ea:	4b11      	ldr	r3, [pc, #68]	; (8008630 <prvCheckForValidListAndQueue+0x74>)
 80085ec:	4a11      	ldr	r2, [pc, #68]	; (8008634 <prvCheckForValidListAndQueue+0x78>)
 80085ee:	210c      	movs	r1, #12
 80085f0:	200a      	movs	r0, #10
 80085f2:	f7fe f8fd 	bl	80067f0 <xQueueGenericCreateStatic>
 80085f6:	4603      	mov	r3, r0
 80085f8:	4a08      	ldr	r2, [pc, #32]	; (800861c <prvCheckForValidListAndQueue+0x60>)
 80085fa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80085fc:	4b07      	ldr	r3, [pc, #28]	; (800861c <prvCheckForValidListAndQueue+0x60>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d005      	beq.n	8008610 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008604:	4b05      	ldr	r3, [pc, #20]	; (800861c <prvCheckForValidListAndQueue+0x60>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	490b      	ldr	r1, [pc, #44]	; (8008638 <prvCheckForValidListAndQueue+0x7c>)
 800860a:	4618      	mov	r0, r3
 800860c:	f7fe fd4e 	bl	80070ac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008610:	f000 f934 	bl	800887c <vPortExitCritical>
}
 8008614:	bf00      	nop
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
 800861a:	bf00      	nop
 800861c:	20000d08 	.word	0x20000d08
 8008620:	20000cd8 	.word	0x20000cd8
 8008624:	20000cec 	.word	0x20000cec
 8008628:	20000d00 	.word	0x20000d00
 800862c:	20000d04 	.word	0x20000d04
 8008630:	20000d8c 	.word	0x20000d8c
 8008634:	20000d14 	.word	0x20000d14
 8008638:	0800a454 	.word	0x0800a454

0800863c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800863c:	b480      	push	{r7}
 800863e:	b085      	sub	sp, #20
 8008640:	af00      	add	r7, sp, #0
 8008642:	60f8      	str	r0, [r7, #12]
 8008644:	60b9      	str	r1, [r7, #8]
 8008646:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	3b04      	subs	r3, #4
 800864c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008654:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	3b04      	subs	r3, #4
 800865a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	f023 0201 	bic.w	r2, r3, #1
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	3b04      	subs	r3, #4
 800866a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800866c:	4a08      	ldr	r2, [pc, #32]	; (8008690 <pxPortInitialiseStack+0x54>)
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	3b14      	subs	r3, #20
 8008676:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008678:	687a      	ldr	r2, [r7, #4]
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	3b20      	subs	r3, #32
 8008682:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008684:	68fb      	ldr	r3, [r7, #12]
}
 8008686:	4618      	mov	r0, r3
 8008688:	3714      	adds	r7, #20
 800868a:	46bd      	mov	sp, r7
 800868c:	bc80      	pop	{r7}
 800868e:	4770      	bx	lr
 8008690:	08008695 	.word	0x08008695

08008694 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008694:	b480      	push	{r7}
 8008696:	b085      	sub	sp, #20
 8008698:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800869a:	2300      	movs	r3, #0
 800869c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800869e:	4b12      	ldr	r3, [pc, #72]	; (80086e8 <prvTaskExitError+0x54>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086a6:	d00a      	beq.n	80086be <prvTaskExitError+0x2a>
	__asm volatile
 80086a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ac:	f383 8811 	msr	BASEPRI, r3
 80086b0:	f3bf 8f6f 	isb	sy
 80086b4:	f3bf 8f4f 	dsb	sy
 80086b8:	60fb      	str	r3, [r7, #12]
}
 80086ba:	bf00      	nop
 80086bc:	e7fe      	b.n	80086bc <prvTaskExitError+0x28>
	__asm volatile
 80086be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c2:	f383 8811 	msr	BASEPRI, r3
 80086c6:	f3bf 8f6f 	isb	sy
 80086ca:	f3bf 8f4f 	dsb	sy
 80086ce:	60bb      	str	r3, [r7, #8]
}
 80086d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80086d2:	bf00      	nop
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d0fc      	beq.n	80086d4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80086da:	bf00      	nop
 80086dc:	bf00      	nop
 80086de:	3714      	adds	r7, #20
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bc80      	pop	{r7}
 80086e4:	4770      	bx	lr
 80086e6:	bf00      	nop
 80086e8:	2000000c 	.word	0x2000000c
 80086ec:	00000000 	.word	0x00000000

080086f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80086f0:	4b07      	ldr	r3, [pc, #28]	; (8008710 <pxCurrentTCBConst2>)
 80086f2:	6819      	ldr	r1, [r3, #0]
 80086f4:	6808      	ldr	r0, [r1, #0]
 80086f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80086fa:	f380 8809 	msr	PSP, r0
 80086fe:	f3bf 8f6f 	isb	sy
 8008702:	f04f 0000 	mov.w	r0, #0
 8008706:	f380 8811 	msr	BASEPRI, r0
 800870a:	f04e 0e0d 	orr.w	lr, lr, #13
 800870e:	4770      	bx	lr

08008710 <pxCurrentTCBConst2>:
 8008710:	20000bac 	.word	0x20000bac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008714:	bf00      	nop
 8008716:	bf00      	nop

08008718 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008718:	4806      	ldr	r0, [pc, #24]	; (8008734 <prvPortStartFirstTask+0x1c>)
 800871a:	6800      	ldr	r0, [r0, #0]
 800871c:	6800      	ldr	r0, [r0, #0]
 800871e:	f380 8808 	msr	MSP, r0
 8008722:	b662      	cpsie	i
 8008724:	b661      	cpsie	f
 8008726:	f3bf 8f4f 	dsb	sy
 800872a:	f3bf 8f6f 	isb	sy
 800872e:	df00      	svc	0
 8008730:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008732:	bf00      	nop
 8008734:	e000ed08 	.word	0xe000ed08

08008738 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b084      	sub	sp, #16
 800873c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800873e:	4b32      	ldr	r3, [pc, #200]	; (8008808 <xPortStartScheduler+0xd0>)
 8008740:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	781b      	ldrb	r3, [r3, #0]
 8008746:	b2db      	uxtb	r3, r3
 8008748:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	22ff      	movs	r2, #255	; 0xff
 800874e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	781b      	ldrb	r3, [r3, #0]
 8008754:	b2db      	uxtb	r3, r3
 8008756:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008758:	78fb      	ldrb	r3, [r7, #3]
 800875a:	b2db      	uxtb	r3, r3
 800875c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008760:	b2da      	uxtb	r2, r3
 8008762:	4b2a      	ldr	r3, [pc, #168]	; (800880c <xPortStartScheduler+0xd4>)
 8008764:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008766:	4b2a      	ldr	r3, [pc, #168]	; (8008810 <xPortStartScheduler+0xd8>)
 8008768:	2207      	movs	r2, #7
 800876a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800876c:	e009      	b.n	8008782 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800876e:	4b28      	ldr	r3, [pc, #160]	; (8008810 <xPortStartScheduler+0xd8>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	3b01      	subs	r3, #1
 8008774:	4a26      	ldr	r2, [pc, #152]	; (8008810 <xPortStartScheduler+0xd8>)
 8008776:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008778:	78fb      	ldrb	r3, [r7, #3]
 800877a:	b2db      	uxtb	r3, r3
 800877c:	005b      	lsls	r3, r3, #1
 800877e:	b2db      	uxtb	r3, r3
 8008780:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008782:	78fb      	ldrb	r3, [r7, #3]
 8008784:	b2db      	uxtb	r3, r3
 8008786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800878a:	2b80      	cmp	r3, #128	; 0x80
 800878c:	d0ef      	beq.n	800876e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800878e:	4b20      	ldr	r3, [pc, #128]	; (8008810 <xPortStartScheduler+0xd8>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f1c3 0307 	rsb	r3, r3, #7
 8008796:	2b04      	cmp	r3, #4
 8008798:	d00a      	beq.n	80087b0 <xPortStartScheduler+0x78>
	__asm volatile
 800879a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800879e:	f383 8811 	msr	BASEPRI, r3
 80087a2:	f3bf 8f6f 	isb	sy
 80087a6:	f3bf 8f4f 	dsb	sy
 80087aa:	60bb      	str	r3, [r7, #8]
}
 80087ac:	bf00      	nop
 80087ae:	e7fe      	b.n	80087ae <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80087b0:	4b17      	ldr	r3, [pc, #92]	; (8008810 <xPortStartScheduler+0xd8>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	021b      	lsls	r3, r3, #8
 80087b6:	4a16      	ldr	r2, [pc, #88]	; (8008810 <xPortStartScheduler+0xd8>)
 80087b8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80087ba:	4b15      	ldr	r3, [pc, #84]	; (8008810 <xPortStartScheduler+0xd8>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80087c2:	4a13      	ldr	r2, [pc, #76]	; (8008810 <xPortStartScheduler+0xd8>)
 80087c4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	b2da      	uxtb	r2, r3
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80087ce:	4b11      	ldr	r3, [pc, #68]	; (8008814 <xPortStartScheduler+0xdc>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4a10      	ldr	r2, [pc, #64]	; (8008814 <xPortStartScheduler+0xdc>)
 80087d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80087d8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80087da:	4b0e      	ldr	r3, [pc, #56]	; (8008814 <xPortStartScheduler+0xdc>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4a0d      	ldr	r2, [pc, #52]	; (8008814 <xPortStartScheduler+0xdc>)
 80087e0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80087e4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80087e6:	f000 f8b9 	bl	800895c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80087ea:	4b0b      	ldr	r3, [pc, #44]	; (8008818 <xPortStartScheduler+0xe0>)
 80087ec:	2200      	movs	r2, #0
 80087ee:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80087f0:	f7ff ff92 	bl	8008718 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80087f4:	f7ff f874 	bl	80078e0 <vTaskSwitchContext>
	prvTaskExitError();
 80087f8:	f7ff ff4c 	bl	8008694 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80087fc:	2300      	movs	r3, #0
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3710      	adds	r7, #16
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}
 8008806:	bf00      	nop
 8008808:	e000e400 	.word	0xe000e400
 800880c:	20000dd4 	.word	0x20000dd4
 8008810:	20000dd8 	.word	0x20000dd8
 8008814:	e000ed20 	.word	0xe000ed20
 8008818:	2000000c 	.word	0x2000000c

0800881c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800881c:	b480      	push	{r7}
 800881e:	b083      	sub	sp, #12
 8008820:	af00      	add	r7, sp, #0
	__asm volatile
 8008822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008826:	f383 8811 	msr	BASEPRI, r3
 800882a:	f3bf 8f6f 	isb	sy
 800882e:	f3bf 8f4f 	dsb	sy
 8008832:	607b      	str	r3, [r7, #4]
}
 8008834:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008836:	4b0f      	ldr	r3, [pc, #60]	; (8008874 <vPortEnterCritical+0x58>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	3301      	adds	r3, #1
 800883c:	4a0d      	ldr	r2, [pc, #52]	; (8008874 <vPortEnterCritical+0x58>)
 800883e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008840:	4b0c      	ldr	r3, [pc, #48]	; (8008874 <vPortEnterCritical+0x58>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	2b01      	cmp	r3, #1
 8008846:	d10f      	bne.n	8008868 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008848:	4b0b      	ldr	r3, [pc, #44]	; (8008878 <vPortEnterCritical+0x5c>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	b2db      	uxtb	r3, r3
 800884e:	2b00      	cmp	r3, #0
 8008850:	d00a      	beq.n	8008868 <vPortEnterCritical+0x4c>
	__asm volatile
 8008852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008856:	f383 8811 	msr	BASEPRI, r3
 800885a:	f3bf 8f6f 	isb	sy
 800885e:	f3bf 8f4f 	dsb	sy
 8008862:	603b      	str	r3, [r7, #0]
}
 8008864:	bf00      	nop
 8008866:	e7fe      	b.n	8008866 <vPortEnterCritical+0x4a>
	}
}
 8008868:	bf00      	nop
 800886a:	370c      	adds	r7, #12
 800886c:	46bd      	mov	sp, r7
 800886e:	bc80      	pop	{r7}
 8008870:	4770      	bx	lr
 8008872:	bf00      	nop
 8008874:	2000000c 	.word	0x2000000c
 8008878:	e000ed04 	.word	0xe000ed04

0800887c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800887c:	b480      	push	{r7}
 800887e:	b083      	sub	sp, #12
 8008880:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008882:	4b11      	ldr	r3, [pc, #68]	; (80088c8 <vPortExitCritical+0x4c>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d10a      	bne.n	80088a0 <vPortExitCritical+0x24>
	__asm volatile
 800888a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800888e:	f383 8811 	msr	BASEPRI, r3
 8008892:	f3bf 8f6f 	isb	sy
 8008896:	f3bf 8f4f 	dsb	sy
 800889a:	607b      	str	r3, [r7, #4]
}
 800889c:	bf00      	nop
 800889e:	e7fe      	b.n	800889e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80088a0:	4b09      	ldr	r3, [pc, #36]	; (80088c8 <vPortExitCritical+0x4c>)
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	3b01      	subs	r3, #1
 80088a6:	4a08      	ldr	r2, [pc, #32]	; (80088c8 <vPortExitCritical+0x4c>)
 80088a8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80088aa:	4b07      	ldr	r3, [pc, #28]	; (80088c8 <vPortExitCritical+0x4c>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d105      	bne.n	80088be <vPortExitCritical+0x42>
 80088b2:	2300      	movs	r3, #0
 80088b4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	f383 8811 	msr	BASEPRI, r3
}
 80088bc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80088be:	bf00      	nop
 80088c0:	370c      	adds	r7, #12
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bc80      	pop	{r7}
 80088c6:	4770      	bx	lr
 80088c8:	2000000c 	.word	0x2000000c
 80088cc:	00000000 	.word	0x00000000

080088d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80088d0:	f3ef 8009 	mrs	r0, PSP
 80088d4:	f3bf 8f6f 	isb	sy
 80088d8:	4b0d      	ldr	r3, [pc, #52]	; (8008910 <pxCurrentTCBConst>)
 80088da:	681a      	ldr	r2, [r3, #0]
 80088dc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80088e0:	6010      	str	r0, [r2, #0]
 80088e2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80088e6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80088ea:	f380 8811 	msr	BASEPRI, r0
 80088ee:	f7fe fff7 	bl	80078e0 <vTaskSwitchContext>
 80088f2:	f04f 0000 	mov.w	r0, #0
 80088f6:	f380 8811 	msr	BASEPRI, r0
 80088fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80088fe:	6819      	ldr	r1, [r3, #0]
 8008900:	6808      	ldr	r0, [r1, #0]
 8008902:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008906:	f380 8809 	msr	PSP, r0
 800890a:	f3bf 8f6f 	isb	sy
 800890e:	4770      	bx	lr

08008910 <pxCurrentTCBConst>:
 8008910:	20000bac 	.word	0x20000bac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008914:	bf00      	nop
 8008916:	bf00      	nop

08008918 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b082      	sub	sp, #8
 800891c:	af00      	add	r7, sp, #0
	__asm volatile
 800891e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008922:	f383 8811 	msr	BASEPRI, r3
 8008926:	f3bf 8f6f 	isb	sy
 800892a:	f3bf 8f4f 	dsb	sy
 800892e:	607b      	str	r3, [r7, #4]
}
 8008930:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008932:	f7fe ff1d 	bl	8007770 <xTaskIncrementTick>
 8008936:	4603      	mov	r3, r0
 8008938:	2b00      	cmp	r3, #0
 800893a:	d003      	beq.n	8008944 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800893c:	4b06      	ldr	r3, [pc, #24]	; (8008958 <SysTick_Handler+0x40>)
 800893e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008942:	601a      	str	r2, [r3, #0]
 8008944:	2300      	movs	r3, #0
 8008946:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	f383 8811 	msr	BASEPRI, r3
}
 800894e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008950:	bf00      	nop
 8008952:	3708      	adds	r7, #8
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}
 8008958:	e000ed04 	.word	0xe000ed04

0800895c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800895c:	b480      	push	{r7}
 800895e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008960:	4b0a      	ldr	r3, [pc, #40]	; (800898c <vPortSetupTimerInterrupt+0x30>)
 8008962:	2200      	movs	r2, #0
 8008964:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008966:	4b0a      	ldr	r3, [pc, #40]	; (8008990 <vPortSetupTimerInterrupt+0x34>)
 8008968:	2200      	movs	r2, #0
 800896a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800896c:	4b09      	ldr	r3, [pc, #36]	; (8008994 <vPortSetupTimerInterrupt+0x38>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4a09      	ldr	r2, [pc, #36]	; (8008998 <vPortSetupTimerInterrupt+0x3c>)
 8008972:	fba2 2303 	umull	r2, r3, r2, r3
 8008976:	099b      	lsrs	r3, r3, #6
 8008978:	4a08      	ldr	r2, [pc, #32]	; (800899c <vPortSetupTimerInterrupt+0x40>)
 800897a:	3b01      	subs	r3, #1
 800897c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800897e:	4b03      	ldr	r3, [pc, #12]	; (800898c <vPortSetupTimerInterrupt+0x30>)
 8008980:	2207      	movs	r2, #7
 8008982:	601a      	str	r2, [r3, #0]
}
 8008984:	bf00      	nop
 8008986:	46bd      	mov	sp, r7
 8008988:	bc80      	pop	{r7}
 800898a:	4770      	bx	lr
 800898c:	e000e010 	.word	0xe000e010
 8008990:	e000e018 	.word	0xe000e018
 8008994:	20000000 	.word	0x20000000
 8008998:	10624dd3 	.word	0x10624dd3
 800899c:	e000e014 	.word	0xe000e014

080089a0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80089a0:	b480      	push	{r7}
 80089a2:	b085      	sub	sp, #20
 80089a4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80089a6:	f3ef 8305 	mrs	r3, IPSR
 80089aa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	2b0f      	cmp	r3, #15
 80089b0:	d914      	bls.n	80089dc <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80089b2:	4a16      	ldr	r2, [pc, #88]	; (8008a0c <vPortValidateInterruptPriority+0x6c>)
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	4413      	add	r3, r2
 80089b8:	781b      	ldrb	r3, [r3, #0]
 80089ba:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80089bc:	4b14      	ldr	r3, [pc, #80]	; (8008a10 <vPortValidateInterruptPriority+0x70>)
 80089be:	781b      	ldrb	r3, [r3, #0]
 80089c0:	7afa      	ldrb	r2, [r7, #11]
 80089c2:	429a      	cmp	r2, r3
 80089c4:	d20a      	bcs.n	80089dc <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80089c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089ca:	f383 8811 	msr	BASEPRI, r3
 80089ce:	f3bf 8f6f 	isb	sy
 80089d2:	f3bf 8f4f 	dsb	sy
 80089d6:	607b      	str	r3, [r7, #4]
}
 80089d8:	bf00      	nop
 80089da:	e7fe      	b.n	80089da <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80089dc:	4b0d      	ldr	r3, [pc, #52]	; (8008a14 <vPortValidateInterruptPriority+0x74>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80089e4:	4b0c      	ldr	r3, [pc, #48]	; (8008a18 <vPortValidateInterruptPriority+0x78>)
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	429a      	cmp	r2, r3
 80089ea:	d90a      	bls.n	8008a02 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80089ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f0:	f383 8811 	msr	BASEPRI, r3
 80089f4:	f3bf 8f6f 	isb	sy
 80089f8:	f3bf 8f4f 	dsb	sy
 80089fc:	603b      	str	r3, [r7, #0]
}
 80089fe:	bf00      	nop
 8008a00:	e7fe      	b.n	8008a00 <vPortValidateInterruptPriority+0x60>
	}
 8008a02:	bf00      	nop
 8008a04:	3714      	adds	r7, #20
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bc80      	pop	{r7}
 8008a0a:	4770      	bx	lr
 8008a0c:	e000e3f0 	.word	0xe000e3f0
 8008a10:	20000dd4 	.word	0x20000dd4
 8008a14:	e000ed0c 	.word	0xe000ed0c
 8008a18:	20000dd8 	.word	0x20000dd8

08008a1c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b08a      	sub	sp, #40	; 0x28
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008a24:	2300      	movs	r3, #0
 8008a26:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008a28:	f7fe fdea 	bl	8007600 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008a2c:	4b58      	ldr	r3, [pc, #352]	; (8008b90 <pvPortMalloc+0x174>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d101      	bne.n	8008a38 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008a34:	f000 f910 	bl	8008c58 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008a38:	4b56      	ldr	r3, [pc, #344]	; (8008b94 <pvPortMalloc+0x178>)
 8008a3a:	681a      	ldr	r2, [r3, #0]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	4013      	ands	r3, r2
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	f040 808e 	bne.w	8008b62 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d01d      	beq.n	8008a88 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008a4c:	2208      	movs	r2, #8
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	4413      	add	r3, r2
 8008a52:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f003 0307 	and.w	r3, r3, #7
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d014      	beq.n	8008a88 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f023 0307 	bic.w	r3, r3, #7
 8008a64:	3308      	adds	r3, #8
 8008a66:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f003 0307 	and.w	r3, r3, #7
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d00a      	beq.n	8008a88 <pvPortMalloc+0x6c>
	__asm volatile
 8008a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a76:	f383 8811 	msr	BASEPRI, r3
 8008a7a:	f3bf 8f6f 	isb	sy
 8008a7e:	f3bf 8f4f 	dsb	sy
 8008a82:	617b      	str	r3, [r7, #20]
}
 8008a84:	bf00      	nop
 8008a86:	e7fe      	b.n	8008a86 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d069      	beq.n	8008b62 <pvPortMalloc+0x146>
 8008a8e:	4b42      	ldr	r3, [pc, #264]	; (8008b98 <pvPortMalloc+0x17c>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	687a      	ldr	r2, [r7, #4]
 8008a94:	429a      	cmp	r2, r3
 8008a96:	d864      	bhi.n	8008b62 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008a98:	4b40      	ldr	r3, [pc, #256]	; (8008b9c <pvPortMalloc+0x180>)
 8008a9a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008a9c:	4b3f      	ldr	r3, [pc, #252]	; (8008b9c <pvPortMalloc+0x180>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008aa2:	e004      	b.n	8008aae <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	687a      	ldr	r2, [r7, #4]
 8008ab4:	429a      	cmp	r2, r3
 8008ab6:	d903      	bls.n	8008ac0 <pvPortMalloc+0xa4>
 8008ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d1f1      	bne.n	8008aa4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008ac0:	4b33      	ldr	r3, [pc, #204]	; (8008b90 <pvPortMalloc+0x174>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ac6:	429a      	cmp	r2, r3
 8008ac8:	d04b      	beq.n	8008b62 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008aca:	6a3b      	ldr	r3, [r7, #32]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	2208      	movs	r2, #8
 8008ad0:	4413      	add	r3, r2
 8008ad2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad6:	681a      	ldr	r2, [r3, #0]
 8008ad8:	6a3b      	ldr	r3, [r7, #32]
 8008ada:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ade:	685a      	ldr	r2, [r3, #4]
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	1ad2      	subs	r2, r2, r3
 8008ae4:	2308      	movs	r3, #8
 8008ae6:	005b      	lsls	r3, r3, #1
 8008ae8:	429a      	cmp	r2, r3
 8008aea:	d91f      	bls.n	8008b2c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008aec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	4413      	add	r3, r2
 8008af2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008af4:	69bb      	ldr	r3, [r7, #24]
 8008af6:	f003 0307 	and.w	r3, r3, #7
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d00a      	beq.n	8008b14 <pvPortMalloc+0xf8>
	__asm volatile
 8008afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b02:	f383 8811 	msr	BASEPRI, r3
 8008b06:	f3bf 8f6f 	isb	sy
 8008b0a:	f3bf 8f4f 	dsb	sy
 8008b0e:	613b      	str	r3, [r7, #16]
}
 8008b10:	bf00      	nop
 8008b12:	e7fe      	b.n	8008b12 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b16:	685a      	ldr	r2, [r3, #4]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	1ad2      	subs	r2, r2, r3
 8008b1c:	69bb      	ldr	r3, [r7, #24]
 8008b1e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b22:	687a      	ldr	r2, [r7, #4]
 8008b24:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008b26:	69b8      	ldr	r0, [r7, #24]
 8008b28:	f000 f8f8 	bl	8008d1c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008b2c:	4b1a      	ldr	r3, [pc, #104]	; (8008b98 <pvPortMalloc+0x17c>)
 8008b2e:	681a      	ldr	r2, [r3, #0]
 8008b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	1ad3      	subs	r3, r2, r3
 8008b36:	4a18      	ldr	r2, [pc, #96]	; (8008b98 <pvPortMalloc+0x17c>)
 8008b38:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008b3a:	4b17      	ldr	r3, [pc, #92]	; (8008b98 <pvPortMalloc+0x17c>)
 8008b3c:	681a      	ldr	r2, [r3, #0]
 8008b3e:	4b18      	ldr	r3, [pc, #96]	; (8008ba0 <pvPortMalloc+0x184>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	429a      	cmp	r2, r3
 8008b44:	d203      	bcs.n	8008b4e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008b46:	4b14      	ldr	r3, [pc, #80]	; (8008b98 <pvPortMalloc+0x17c>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4a15      	ldr	r2, [pc, #84]	; (8008ba0 <pvPortMalloc+0x184>)
 8008b4c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b50:	685a      	ldr	r2, [r3, #4]
 8008b52:	4b10      	ldr	r3, [pc, #64]	; (8008b94 <pvPortMalloc+0x178>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	431a      	orrs	r2, r3
 8008b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b5a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b5e:	2200      	movs	r2, #0
 8008b60:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008b62:	f7fe fd5b 	bl	800761c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b66:	69fb      	ldr	r3, [r7, #28]
 8008b68:	f003 0307 	and.w	r3, r3, #7
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d00a      	beq.n	8008b86 <pvPortMalloc+0x16a>
	__asm volatile
 8008b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b74:	f383 8811 	msr	BASEPRI, r3
 8008b78:	f3bf 8f6f 	isb	sy
 8008b7c:	f3bf 8f4f 	dsb	sy
 8008b80:	60fb      	str	r3, [r7, #12]
}
 8008b82:	bf00      	nop
 8008b84:	e7fe      	b.n	8008b84 <pvPortMalloc+0x168>
	return pvReturn;
 8008b86:	69fb      	ldr	r3, [r7, #28]
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3728      	adds	r7, #40	; 0x28
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}
 8008b90:	200019e4 	.word	0x200019e4
 8008b94:	200019f0 	.word	0x200019f0
 8008b98:	200019e8 	.word	0x200019e8
 8008b9c:	200019dc 	.word	0x200019dc
 8008ba0:	200019ec 	.word	0x200019ec

08008ba4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b086      	sub	sp, #24
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d048      	beq.n	8008c48 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008bb6:	2308      	movs	r3, #8
 8008bb8:	425b      	negs	r3, r3
 8008bba:	697a      	ldr	r2, [r7, #20]
 8008bbc:	4413      	add	r3, r2
 8008bbe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	685a      	ldr	r2, [r3, #4]
 8008bc8:	4b21      	ldr	r3, [pc, #132]	; (8008c50 <vPortFree+0xac>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	4013      	ands	r3, r2
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d10a      	bne.n	8008be8 <vPortFree+0x44>
	__asm volatile
 8008bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd6:	f383 8811 	msr	BASEPRI, r3
 8008bda:	f3bf 8f6f 	isb	sy
 8008bde:	f3bf 8f4f 	dsb	sy
 8008be2:	60fb      	str	r3, [r7, #12]
}
 8008be4:	bf00      	nop
 8008be6:	e7fe      	b.n	8008be6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008be8:	693b      	ldr	r3, [r7, #16]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d00a      	beq.n	8008c06 <vPortFree+0x62>
	__asm volatile
 8008bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf4:	f383 8811 	msr	BASEPRI, r3
 8008bf8:	f3bf 8f6f 	isb	sy
 8008bfc:	f3bf 8f4f 	dsb	sy
 8008c00:	60bb      	str	r3, [r7, #8]
}
 8008c02:	bf00      	nop
 8008c04:	e7fe      	b.n	8008c04 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	685a      	ldr	r2, [r3, #4]
 8008c0a:	4b11      	ldr	r3, [pc, #68]	; (8008c50 <vPortFree+0xac>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	4013      	ands	r3, r2
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d019      	beq.n	8008c48 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d115      	bne.n	8008c48 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008c1c:	693b      	ldr	r3, [r7, #16]
 8008c1e:	685a      	ldr	r2, [r3, #4]
 8008c20:	4b0b      	ldr	r3, [pc, #44]	; (8008c50 <vPortFree+0xac>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	43db      	mvns	r3, r3
 8008c26:	401a      	ands	r2, r3
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008c2c:	f7fe fce8 	bl	8007600 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	685a      	ldr	r2, [r3, #4]
 8008c34:	4b07      	ldr	r3, [pc, #28]	; (8008c54 <vPortFree+0xb0>)
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	4413      	add	r3, r2
 8008c3a:	4a06      	ldr	r2, [pc, #24]	; (8008c54 <vPortFree+0xb0>)
 8008c3c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008c3e:	6938      	ldr	r0, [r7, #16]
 8008c40:	f000 f86c 	bl	8008d1c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008c44:	f7fe fcea 	bl	800761c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008c48:	bf00      	nop
 8008c4a:	3718      	adds	r7, #24
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}
 8008c50:	200019f0 	.word	0x200019f0
 8008c54:	200019e8 	.word	0x200019e8

08008c58 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b085      	sub	sp, #20
 8008c5c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008c5e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008c62:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008c64:	4b27      	ldr	r3, [pc, #156]	; (8008d04 <prvHeapInit+0xac>)
 8008c66:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f003 0307 	and.w	r3, r3, #7
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d00c      	beq.n	8008c8c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	3307      	adds	r3, #7
 8008c76:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	f023 0307 	bic.w	r3, r3, #7
 8008c7e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008c80:	68ba      	ldr	r2, [r7, #8]
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	1ad3      	subs	r3, r2, r3
 8008c86:	4a1f      	ldr	r2, [pc, #124]	; (8008d04 <prvHeapInit+0xac>)
 8008c88:	4413      	add	r3, r2
 8008c8a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008c90:	4a1d      	ldr	r2, [pc, #116]	; (8008d08 <prvHeapInit+0xb0>)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008c96:	4b1c      	ldr	r3, [pc, #112]	; (8008d08 <prvHeapInit+0xb0>)
 8008c98:	2200      	movs	r2, #0
 8008c9a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	68ba      	ldr	r2, [r7, #8]
 8008ca0:	4413      	add	r3, r2
 8008ca2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008ca4:	2208      	movs	r2, #8
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	1a9b      	subs	r3, r3, r2
 8008caa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f023 0307 	bic.w	r3, r3, #7
 8008cb2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	4a15      	ldr	r2, [pc, #84]	; (8008d0c <prvHeapInit+0xb4>)
 8008cb8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008cba:	4b14      	ldr	r3, [pc, #80]	; (8008d0c <prvHeapInit+0xb4>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008cc2:	4b12      	ldr	r3, [pc, #72]	; (8008d0c <prvHeapInit+0xb4>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	68fa      	ldr	r2, [r7, #12]
 8008cd2:	1ad2      	subs	r2, r2, r3
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008cd8:	4b0c      	ldr	r3, [pc, #48]	; (8008d0c <prvHeapInit+0xb4>)
 8008cda:	681a      	ldr	r2, [r3, #0]
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	4a0a      	ldr	r2, [pc, #40]	; (8008d10 <prvHeapInit+0xb8>)
 8008ce6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	685b      	ldr	r3, [r3, #4]
 8008cec:	4a09      	ldr	r2, [pc, #36]	; (8008d14 <prvHeapInit+0xbc>)
 8008cee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008cf0:	4b09      	ldr	r3, [pc, #36]	; (8008d18 <prvHeapInit+0xc0>)
 8008cf2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008cf6:	601a      	str	r2, [r3, #0]
}
 8008cf8:	bf00      	nop
 8008cfa:	3714      	adds	r7, #20
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bc80      	pop	{r7}
 8008d00:	4770      	bx	lr
 8008d02:	bf00      	nop
 8008d04:	20000ddc 	.word	0x20000ddc
 8008d08:	200019dc 	.word	0x200019dc
 8008d0c:	200019e4 	.word	0x200019e4
 8008d10:	200019ec 	.word	0x200019ec
 8008d14:	200019e8 	.word	0x200019e8
 8008d18:	200019f0 	.word	0x200019f0

08008d1c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b085      	sub	sp, #20
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008d24:	4b27      	ldr	r3, [pc, #156]	; (8008dc4 <prvInsertBlockIntoFreeList+0xa8>)
 8008d26:	60fb      	str	r3, [r7, #12]
 8008d28:	e002      	b.n	8008d30 <prvInsertBlockIntoFreeList+0x14>
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	60fb      	str	r3, [r7, #12]
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	687a      	ldr	r2, [r7, #4]
 8008d36:	429a      	cmp	r2, r3
 8008d38:	d8f7      	bhi.n	8008d2a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	685b      	ldr	r3, [r3, #4]
 8008d42:	68ba      	ldr	r2, [r7, #8]
 8008d44:	4413      	add	r3, r2
 8008d46:	687a      	ldr	r2, [r7, #4]
 8008d48:	429a      	cmp	r2, r3
 8008d4a:	d108      	bne.n	8008d5e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	685a      	ldr	r2, [r3, #4]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	685b      	ldr	r3, [r3, #4]
 8008d54:	441a      	add	r2, r3
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	68ba      	ldr	r2, [r7, #8]
 8008d68:	441a      	add	r2, r3
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	429a      	cmp	r2, r3
 8008d70:	d118      	bne.n	8008da4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681a      	ldr	r2, [r3, #0]
 8008d76:	4b14      	ldr	r3, [pc, #80]	; (8008dc8 <prvInsertBlockIntoFreeList+0xac>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	429a      	cmp	r2, r3
 8008d7c:	d00d      	beq.n	8008d9a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	685a      	ldr	r2, [r3, #4]
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	685b      	ldr	r3, [r3, #4]
 8008d88:	441a      	add	r2, r3
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	681a      	ldr	r2, [r3, #0]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	601a      	str	r2, [r3, #0]
 8008d98:	e008      	b.n	8008dac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008d9a:	4b0b      	ldr	r3, [pc, #44]	; (8008dc8 <prvInsertBlockIntoFreeList+0xac>)
 8008d9c:	681a      	ldr	r2, [r3, #0]
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	601a      	str	r2, [r3, #0]
 8008da2:	e003      	b.n	8008dac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681a      	ldr	r2, [r3, #0]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008dac:	68fa      	ldr	r2, [r7, #12]
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	429a      	cmp	r2, r3
 8008db2:	d002      	beq.n	8008dba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	687a      	ldr	r2, [r7, #4]
 8008db8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008dba:	bf00      	nop
 8008dbc:	3714      	adds	r7, #20
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bc80      	pop	{r7}
 8008dc2:	4770      	bx	lr
 8008dc4:	200019dc 	.word	0x200019dc
 8008dc8:	200019e4 	.word	0x200019e4

08008dcc <__errno>:
 8008dcc:	4b01      	ldr	r3, [pc, #4]	; (8008dd4 <__errno+0x8>)
 8008dce:	6818      	ldr	r0, [r3, #0]
 8008dd0:	4770      	bx	lr
 8008dd2:	bf00      	nop
 8008dd4:	20000010 	.word	0x20000010

08008dd8 <std>:
 8008dd8:	2300      	movs	r3, #0
 8008dda:	b510      	push	{r4, lr}
 8008ddc:	4604      	mov	r4, r0
 8008dde:	e9c0 3300 	strd	r3, r3, [r0]
 8008de2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008de6:	6083      	str	r3, [r0, #8]
 8008de8:	8181      	strh	r1, [r0, #12]
 8008dea:	6643      	str	r3, [r0, #100]	; 0x64
 8008dec:	81c2      	strh	r2, [r0, #14]
 8008dee:	6183      	str	r3, [r0, #24]
 8008df0:	4619      	mov	r1, r3
 8008df2:	2208      	movs	r2, #8
 8008df4:	305c      	adds	r0, #92	; 0x5c
 8008df6:	f000 f91a 	bl	800902e <memset>
 8008dfa:	4b05      	ldr	r3, [pc, #20]	; (8008e10 <std+0x38>)
 8008dfc:	6263      	str	r3, [r4, #36]	; 0x24
 8008dfe:	4b05      	ldr	r3, [pc, #20]	; (8008e14 <std+0x3c>)
 8008e00:	62a3      	str	r3, [r4, #40]	; 0x28
 8008e02:	4b05      	ldr	r3, [pc, #20]	; (8008e18 <std+0x40>)
 8008e04:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008e06:	4b05      	ldr	r3, [pc, #20]	; (8008e1c <std+0x44>)
 8008e08:	6224      	str	r4, [r4, #32]
 8008e0a:	6323      	str	r3, [r4, #48]	; 0x30
 8008e0c:	bd10      	pop	{r4, pc}
 8008e0e:	bf00      	nop
 8008e10:	080092c5 	.word	0x080092c5
 8008e14:	080092e7 	.word	0x080092e7
 8008e18:	0800931f 	.word	0x0800931f
 8008e1c:	08009343 	.word	0x08009343

08008e20 <_cleanup_r>:
 8008e20:	4901      	ldr	r1, [pc, #4]	; (8008e28 <_cleanup_r+0x8>)
 8008e22:	f000 b8af 	b.w	8008f84 <_fwalk_reent>
 8008e26:	bf00      	nop
 8008e28:	080095b1 	.word	0x080095b1

08008e2c <__sfmoreglue>:
 8008e2c:	b570      	push	{r4, r5, r6, lr}
 8008e2e:	2268      	movs	r2, #104	; 0x68
 8008e30:	1e4d      	subs	r5, r1, #1
 8008e32:	4355      	muls	r5, r2
 8008e34:	460e      	mov	r6, r1
 8008e36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008e3a:	f000 f921 	bl	8009080 <_malloc_r>
 8008e3e:	4604      	mov	r4, r0
 8008e40:	b140      	cbz	r0, 8008e54 <__sfmoreglue+0x28>
 8008e42:	2100      	movs	r1, #0
 8008e44:	e9c0 1600 	strd	r1, r6, [r0]
 8008e48:	300c      	adds	r0, #12
 8008e4a:	60a0      	str	r0, [r4, #8]
 8008e4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008e50:	f000 f8ed 	bl	800902e <memset>
 8008e54:	4620      	mov	r0, r4
 8008e56:	bd70      	pop	{r4, r5, r6, pc}

08008e58 <__sfp_lock_acquire>:
 8008e58:	4801      	ldr	r0, [pc, #4]	; (8008e60 <__sfp_lock_acquire+0x8>)
 8008e5a:	f000 b8d8 	b.w	800900e <__retarget_lock_acquire_recursive>
 8008e5e:	bf00      	nop
 8008e60:	200019f5 	.word	0x200019f5

08008e64 <__sfp_lock_release>:
 8008e64:	4801      	ldr	r0, [pc, #4]	; (8008e6c <__sfp_lock_release+0x8>)
 8008e66:	f000 b8d3 	b.w	8009010 <__retarget_lock_release_recursive>
 8008e6a:	bf00      	nop
 8008e6c:	200019f5 	.word	0x200019f5

08008e70 <__sinit_lock_acquire>:
 8008e70:	4801      	ldr	r0, [pc, #4]	; (8008e78 <__sinit_lock_acquire+0x8>)
 8008e72:	f000 b8cc 	b.w	800900e <__retarget_lock_acquire_recursive>
 8008e76:	bf00      	nop
 8008e78:	200019f6 	.word	0x200019f6

08008e7c <__sinit_lock_release>:
 8008e7c:	4801      	ldr	r0, [pc, #4]	; (8008e84 <__sinit_lock_release+0x8>)
 8008e7e:	f000 b8c7 	b.w	8009010 <__retarget_lock_release_recursive>
 8008e82:	bf00      	nop
 8008e84:	200019f6 	.word	0x200019f6

08008e88 <__sinit>:
 8008e88:	b510      	push	{r4, lr}
 8008e8a:	4604      	mov	r4, r0
 8008e8c:	f7ff fff0 	bl	8008e70 <__sinit_lock_acquire>
 8008e90:	69a3      	ldr	r3, [r4, #24]
 8008e92:	b11b      	cbz	r3, 8008e9c <__sinit+0x14>
 8008e94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e98:	f7ff bff0 	b.w	8008e7c <__sinit_lock_release>
 8008e9c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008ea0:	6523      	str	r3, [r4, #80]	; 0x50
 8008ea2:	4b13      	ldr	r3, [pc, #76]	; (8008ef0 <__sinit+0x68>)
 8008ea4:	4a13      	ldr	r2, [pc, #76]	; (8008ef4 <__sinit+0x6c>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	62a2      	str	r2, [r4, #40]	; 0x28
 8008eaa:	42a3      	cmp	r3, r4
 8008eac:	bf04      	itt	eq
 8008eae:	2301      	moveq	r3, #1
 8008eb0:	61a3      	streq	r3, [r4, #24]
 8008eb2:	4620      	mov	r0, r4
 8008eb4:	f000 f820 	bl	8008ef8 <__sfp>
 8008eb8:	6060      	str	r0, [r4, #4]
 8008eba:	4620      	mov	r0, r4
 8008ebc:	f000 f81c 	bl	8008ef8 <__sfp>
 8008ec0:	60a0      	str	r0, [r4, #8]
 8008ec2:	4620      	mov	r0, r4
 8008ec4:	f000 f818 	bl	8008ef8 <__sfp>
 8008ec8:	2200      	movs	r2, #0
 8008eca:	60e0      	str	r0, [r4, #12]
 8008ecc:	2104      	movs	r1, #4
 8008ece:	6860      	ldr	r0, [r4, #4]
 8008ed0:	f7ff ff82 	bl	8008dd8 <std>
 8008ed4:	68a0      	ldr	r0, [r4, #8]
 8008ed6:	2201      	movs	r2, #1
 8008ed8:	2109      	movs	r1, #9
 8008eda:	f7ff ff7d 	bl	8008dd8 <std>
 8008ede:	68e0      	ldr	r0, [r4, #12]
 8008ee0:	2202      	movs	r2, #2
 8008ee2:	2112      	movs	r1, #18
 8008ee4:	f7ff ff78 	bl	8008dd8 <std>
 8008ee8:	2301      	movs	r3, #1
 8008eea:	61a3      	str	r3, [r4, #24]
 8008eec:	e7d2      	b.n	8008e94 <__sinit+0xc>
 8008eee:	bf00      	nop
 8008ef0:	0800abc4 	.word	0x0800abc4
 8008ef4:	08008e21 	.word	0x08008e21

08008ef8 <__sfp>:
 8008ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008efa:	4607      	mov	r7, r0
 8008efc:	f7ff ffac 	bl	8008e58 <__sfp_lock_acquire>
 8008f00:	4b1e      	ldr	r3, [pc, #120]	; (8008f7c <__sfp+0x84>)
 8008f02:	681e      	ldr	r6, [r3, #0]
 8008f04:	69b3      	ldr	r3, [r6, #24]
 8008f06:	b913      	cbnz	r3, 8008f0e <__sfp+0x16>
 8008f08:	4630      	mov	r0, r6
 8008f0a:	f7ff ffbd 	bl	8008e88 <__sinit>
 8008f0e:	3648      	adds	r6, #72	; 0x48
 8008f10:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008f14:	3b01      	subs	r3, #1
 8008f16:	d503      	bpl.n	8008f20 <__sfp+0x28>
 8008f18:	6833      	ldr	r3, [r6, #0]
 8008f1a:	b30b      	cbz	r3, 8008f60 <__sfp+0x68>
 8008f1c:	6836      	ldr	r6, [r6, #0]
 8008f1e:	e7f7      	b.n	8008f10 <__sfp+0x18>
 8008f20:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008f24:	b9d5      	cbnz	r5, 8008f5c <__sfp+0x64>
 8008f26:	4b16      	ldr	r3, [pc, #88]	; (8008f80 <__sfp+0x88>)
 8008f28:	60e3      	str	r3, [r4, #12]
 8008f2a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008f2e:	6665      	str	r5, [r4, #100]	; 0x64
 8008f30:	f000 f86c 	bl	800900c <__retarget_lock_init_recursive>
 8008f34:	f7ff ff96 	bl	8008e64 <__sfp_lock_release>
 8008f38:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008f3c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008f40:	6025      	str	r5, [r4, #0]
 8008f42:	61a5      	str	r5, [r4, #24]
 8008f44:	2208      	movs	r2, #8
 8008f46:	4629      	mov	r1, r5
 8008f48:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008f4c:	f000 f86f 	bl	800902e <memset>
 8008f50:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008f54:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008f58:	4620      	mov	r0, r4
 8008f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f5c:	3468      	adds	r4, #104	; 0x68
 8008f5e:	e7d9      	b.n	8008f14 <__sfp+0x1c>
 8008f60:	2104      	movs	r1, #4
 8008f62:	4638      	mov	r0, r7
 8008f64:	f7ff ff62 	bl	8008e2c <__sfmoreglue>
 8008f68:	4604      	mov	r4, r0
 8008f6a:	6030      	str	r0, [r6, #0]
 8008f6c:	2800      	cmp	r0, #0
 8008f6e:	d1d5      	bne.n	8008f1c <__sfp+0x24>
 8008f70:	f7ff ff78 	bl	8008e64 <__sfp_lock_release>
 8008f74:	230c      	movs	r3, #12
 8008f76:	603b      	str	r3, [r7, #0]
 8008f78:	e7ee      	b.n	8008f58 <__sfp+0x60>
 8008f7a:	bf00      	nop
 8008f7c:	0800abc4 	.word	0x0800abc4
 8008f80:	ffff0001 	.word	0xffff0001

08008f84 <_fwalk_reent>:
 8008f84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f88:	4606      	mov	r6, r0
 8008f8a:	4688      	mov	r8, r1
 8008f8c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008f90:	2700      	movs	r7, #0
 8008f92:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008f96:	f1b9 0901 	subs.w	r9, r9, #1
 8008f9a:	d505      	bpl.n	8008fa8 <_fwalk_reent+0x24>
 8008f9c:	6824      	ldr	r4, [r4, #0]
 8008f9e:	2c00      	cmp	r4, #0
 8008fa0:	d1f7      	bne.n	8008f92 <_fwalk_reent+0xe>
 8008fa2:	4638      	mov	r0, r7
 8008fa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fa8:	89ab      	ldrh	r3, [r5, #12]
 8008faa:	2b01      	cmp	r3, #1
 8008fac:	d907      	bls.n	8008fbe <_fwalk_reent+0x3a>
 8008fae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008fb2:	3301      	adds	r3, #1
 8008fb4:	d003      	beq.n	8008fbe <_fwalk_reent+0x3a>
 8008fb6:	4629      	mov	r1, r5
 8008fb8:	4630      	mov	r0, r6
 8008fba:	47c0      	blx	r8
 8008fbc:	4307      	orrs	r7, r0
 8008fbe:	3568      	adds	r5, #104	; 0x68
 8008fc0:	e7e9      	b.n	8008f96 <_fwalk_reent+0x12>
	...

08008fc4 <__libc_init_array>:
 8008fc4:	b570      	push	{r4, r5, r6, lr}
 8008fc6:	4d0d      	ldr	r5, [pc, #52]	; (8008ffc <__libc_init_array+0x38>)
 8008fc8:	4c0d      	ldr	r4, [pc, #52]	; (8009000 <__libc_init_array+0x3c>)
 8008fca:	1b64      	subs	r4, r4, r5
 8008fcc:	10a4      	asrs	r4, r4, #2
 8008fce:	2600      	movs	r6, #0
 8008fd0:	42a6      	cmp	r6, r4
 8008fd2:	d109      	bne.n	8008fe8 <__libc_init_array+0x24>
 8008fd4:	4d0b      	ldr	r5, [pc, #44]	; (8009004 <__libc_init_array+0x40>)
 8008fd6:	4c0c      	ldr	r4, [pc, #48]	; (8009008 <__libc_init_array+0x44>)
 8008fd8:	f001 f9e6 	bl	800a3a8 <_init>
 8008fdc:	1b64      	subs	r4, r4, r5
 8008fde:	10a4      	asrs	r4, r4, #2
 8008fe0:	2600      	movs	r6, #0
 8008fe2:	42a6      	cmp	r6, r4
 8008fe4:	d105      	bne.n	8008ff2 <__libc_init_array+0x2e>
 8008fe6:	bd70      	pop	{r4, r5, r6, pc}
 8008fe8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fec:	4798      	blx	r3
 8008fee:	3601      	adds	r6, #1
 8008ff0:	e7ee      	b.n	8008fd0 <__libc_init_array+0xc>
 8008ff2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ff6:	4798      	blx	r3
 8008ff8:	3601      	adds	r6, #1
 8008ffa:	e7f2      	b.n	8008fe2 <__libc_init_array+0x1e>
 8008ffc:	0800acb4 	.word	0x0800acb4
 8009000:	0800acb4 	.word	0x0800acb4
 8009004:	0800acb4 	.word	0x0800acb4
 8009008:	0800acb8 	.word	0x0800acb8

0800900c <__retarget_lock_init_recursive>:
 800900c:	4770      	bx	lr

0800900e <__retarget_lock_acquire_recursive>:
 800900e:	4770      	bx	lr

08009010 <__retarget_lock_release_recursive>:
 8009010:	4770      	bx	lr

08009012 <memcpy>:
 8009012:	440a      	add	r2, r1
 8009014:	4291      	cmp	r1, r2
 8009016:	f100 33ff 	add.w	r3, r0, #4294967295
 800901a:	d100      	bne.n	800901e <memcpy+0xc>
 800901c:	4770      	bx	lr
 800901e:	b510      	push	{r4, lr}
 8009020:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009024:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009028:	4291      	cmp	r1, r2
 800902a:	d1f9      	bne.n	8009020 <memcpy+0xe>
 800902c:	bd10      	pop	{r4, pc}

0800902e <memset>:
 800902e:	4402      	add	r2, r0
 8009030:	4603      	mov	r3, r0
 8009032:	4293      	cmp	r3, r2
 8009034:	d100      	bne.n	8009038 <memset+0xa>
 8009036:	4770      	bx	lr
 8009038:	f803 1b01 	strb.w	r1, [r3], #1
 800903c:	e7f9      	b.n	8009032 <memset+0x4>
	...

08009040 <sbrk_aligned>:
 8009040:	b570      	push	{r4, r5, r6, lr}
 8009042:	4e0e      	ldr	r6, [pc, #56]	; (800907c <sbrk_aligned+0x3c>)
 8009044:	460c      	mov	r4, r1
 8009046:	6831      	ldr	r1, [r6, #0]
 8009048:	4605      	mov	r5, r0
 800904a:	b911      	cbnz	r1, 8009052 <sbrk_aligned+0x12>
 800904c:	f000 f8f6 	bl	800923c <_sbrk_r>
 8009050:	6030      	str	r0, [r6, #0]
 8009052:	4621      	mov	r1, r4
 8009054:	4628      	mov	r0, r5
 8009056:	f000 f8f1 	bl	800923c <_sbrk_r>
 800905a:	1c43      	adds	r3, r0, #1
 800905c:	d00a      	beq.n	8009074 <sbrk_aligned+0x34>
 800905e:	1cc4      	adds	r4, r0, #3
 8009060:	f024 0403 	bic.w	r4, r4, #3
 8009064:	42a0      	cmp	r0, r4
 8009066:	d007      	beq.n	8009078 <sbrk_aligned+0x38>
 8009068:	1a21      	subs	r1, r4, r0
 800906a:	4628      	mov	r0, r5
 800906c:	f000 f8e6 	bl	800923c <_sbrk_r>
 8009070:	3001      	adds	r0, #1
 8009072:	d101      	bne.n	8009078 <sbrk_aligned+0x38>
 8009074:	f04f 34ff 	mov.w	r4, #4294967295
 8009078:	4620      	mov	r0, r4
 800907a:	bd70      	pop	{r4, r5, r6, pc}
 800907c:	200019fc 	.word	0x200019fc

08009080 <_malloc_r>:
 8009080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009084:	1ccd      	adds	r5, r1, #3
 8009086:	f025 0503 	bic.w	r5, r5, #3
 800908a:	3508      	adds	r5, #8
 800908c:	2d0c      	cmp	r5, #12
 800908e:	bf38      	it	cc
 8009090:	250c      	movcc	r5, #12
 8009092:	2d00      	cmp	r5, #0
 8009094:	4607      	mov	r7, r0
 8009096:	db01      	blt.n	800909c <_malloc_r+0x1c>
 8009098:	42a9      	cmp	r1, r5
 800909a:	d905      	bls.n	80090a8 <_malloc_r+0x28>
 800909c:	230c      	movs	r3, #12
 800909e:	603b      	str	r3, [r7, #0]
 80090a0:	2600      	movs	r6, #0
 80090a2:	4630      	mov	r0, r6
 80090a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090a8:	4e2e      	ldr	r6, [pc, #184]	; (8009164 <_malloc_r+0xe4>)
 80090aa:	f000 fae9 	bl	8009680 <__malloc_lock>
 80090ae:	6833      	ldr	r3, [r6, #0]
 80090b0:	461c      	mov	r4, r3
 80090b2:	bb34      	cbnz	r4, 8009102 <_malloc_r+0x82>
 80090b4:	4629      	mov	r1, r5
 80090b6:	4638      	mov	r0, r7
 80090b8:	f7ff ffc2 	bl	8009040 <sbrk_aligned>
 80090bc:	1c43      	adds	r3, r0, #1
 80090be:	4604      	mov	r4, r0
 80090c0:	d14d      	bne.n	800915e <_malloc_r+0xde>
 80090c2:	6834      	ldr	r4, [r6, #0]
 80090c4:	4626      	mov	r6, r4
 80090c6:	2e00      	cmp	r6, #0
 80090c8:	d140      	bne.n	800914c <_malloc_r+0xcc>
 80090ca:	6823      	ldr	r3, [r4, #0]
 80090cc:	4631      	mov	r1, r6
 80090ce:	4638      	mov	r0, r7
 80090d0:	eb04 0803 	add.w	r8, r4, r3
 80090d4:	f000 f8b2 	bl	800923c <_sbrk_r>
 80090d8:	4580      	cmp	r8, r0
 80090da:	d13a      	bne.n	8009152 <_malloc_r+0xd2>
 80090dc:	6821      	ldr	r1, [r4, #0]
 80090de:	3503      	adds	r5, #3
 80090e0:	1a6d      	subs	r5, r5, r1
 80090e2:	f025 0503 	bic.w	r5, r5, #3
 80090e6:	3508      	adds	r5, #8
 80090e8:	2d0c      	cmp	r5, #12
 80090ea:	bf38      	it	cc
 80090ec:	250c      	movcc	r5, #12
 80090ee:	4629      	mov	r1, r5
 80090f0:	4638      	mov	r0, r7
 80090f2:	f7ff ffa5 	bl	8009040 <sbrk_aligned>
 80090f6:	3001      	adds	r0, #1
 80090f8:	d02b      	beq.n	8009152 <_malloc_r+0xd2>
 80090fa:	6823      	ldr	r3, [r4, #0]
 80090fc:	442b      	add	r3, r5
 80090fe:	6023      	str	r3, [r4, #0]
 8009100:	e00e      	b.n	8009120 <_malloc_r+0xa0>
 8009102:	6822      	ldr	r2, [r4, #0]
 8009104:	1b52      	subs	r2, r2, r5
 8009106:	d41e      	bmi.n	8009146 <_malloc_r+0xc6>
 8009108:	2a0b      	cmp	r2, #11
 800910a:	d916      	bls.n	800913a <_malloc_r+0xba>
 800910c:	1961      	adds	r1, r4, r5
 800910e:	42a3      	cmp	r3, r4
 8009110:	6025      	str	r5, [r4, #0]
 8009112:	bf18      	it	ne
 8009114:	6059      	strne	r1, [r3, #4]
 8009116:	6863      	ldr	r3, [r4, #4]
 8009118:	bf08      	it	eq
 800911a:	6031      	streq	r1, [r6, #0]
 800911c:	5162      	str	r2, [r4, r5]
 800911e:	604b      	str	r3, [r1, #4]
 8009120:	4638      	mov	r0, r7
 8009122:	f104 060b 	add.w	r6, r4, #11
 8009126:	f000 fab1 	bl	800968c <__malloc_unlock>
 800912a:	f026 0607 	bic.w	r6, r6, #7
 800912e:	1d23      	adds	r3, r4, #4
 8009130:	1af2      	subs	r2, r6, r3
 8009132:	d0b6      	beq.n	80090a2 <_malloc_r+0x22>
 8009134:	1b9b      	subs	r3, r3, r6
 8009136:	50a3      	str	r3, [r4, r2]
 8009138:	e7b3      	b.n	80090a2 <_malloc_r+0x22>
 800913a:	6862      	ldr	r2, [r4, #4]
 800913c:	42a3      	cmp	r3, r4
 800913e:	bf0c      	ite	eq
 8009140:	6032      	streq	r2, [r6, #0]
 8009142:	605a      	strne	r2, [r3, #4]
 8009144:	e7ec      	b.n	8009120 <_malloc_r+0xa0>
 8009146:	4623      	mov	r3, r4
 8009148:	6864      	ldr	r4, [r4, #4]
 800914a:	e7b2      	b.n	80090b2 <_malloc_r+0x32>
 800914c:	4634      	mov	r4, r6
 800914e:	6876      	ldr	r6, [r6, #4]
 8009150:	e7b9      	b.n	80090c6 <_malloc_r+0x46>
 8009152:	230c      	movs	r3, #12
 8009154:	603b      	str	r3, [r7, #0]
 8009156:	4638      	mov	r0, r7
 8009158:	f000 fa98 	bl	800968c <__malloc_unlock>
 800915c:	e7a1      	b.n	80090a2 <_malloc_r+0x22>
 800915e:	6025      	str	r5, [r4, #0]
 8009160:	e7de      	b.n	8009120 <_malloc_r+0xa0>
 8009162:	bf00      	nop
 8009164:	200019f8 	.word	0x200019f8

08009168 <cleanup_glue>:
 8009168:	b538      	push	{r3, r4, r5, lr}
 800916a:	460c      	mov	r4, r1
 800916c:	6809      	ldr	r1, [r1, #0]
 800916e:	4605      	mov	r5, r0
 8009170:	b109      	cbz	r1, 8009176 <cleanup_glue+0xe>
 8009172:	f7ff fff9 	bl	8009168 <cleanup_glue>
 8009176:	4621      	mov	r1, r4
 8009178:	4628      	mov	r0, r5
 800917a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800917e:	f000 ba8b 	b.w	8009698 <_free_r>
	...

08009184 <_reclaim_reent>:
 8009184:	4b2c      	ldr	r3, [pc, #176]	; (8009238 <_reclaim_reent+0xb4>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	4283      	cmp	r3, r0
 800918a:	b570      	push	{r4, r5, r6, lr}
 800918c:	4604      	mov	r4, r0
 800918e:	d051      	beq.n	8009234 <_reclaim_reent+0xb0>
 8009190:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009192:	b143      	cbz	r3, 80091a6 <_reclaim_reent+0x22>
 8009194:	68db      	ldr	r3, [r3, #12]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d14a      	bne.n	8009230 <_reclaim_reent+0xac>
 800919a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800919c:	6819      	ldr	r1, [r3, #0]
 800919e:	b111      	cbz	r1, 80091a6 <_reclaim_reent+0x22>
 80091a0:	4620      	mov	r0, r4
 80091a2:	f000 fa79 	bl	8009698 <_free_r>
 80091a6:	6961      	ldr	r1, [r4, #20]
 80091a8:	b111      	cbz	r1, 80091b0 <_reclaim_reent+0x2c>
 80091aa:	4620      	mov	r0, r4
 80091ac:	f000 fa74 	bl	8009698 <_free_r>
 80091b0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80091b2:	b111      	cbz	r1, 80091ba <_reclaim_reent+0x36>
 80091b4:	4620      	mov	r0, r4
 80091b6:	f000 fa6f 	bl	8009698 <_free_r>
 80091ba:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80091bc:	b111      	cbz	r1, 80091c4 <_reclaim_reent+0x40>
 80091be:	4620      	mov	r0, r4
 80091c0:	f000 fa6a 	bl	8009698 <_free_r>
 80091c4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80091c6:	b111      	cbz	r1, 80091ce <_reclaim_reent+0x4a>
 80091c8:	4620      	mov	r0, r4
 80091ca:	f000 fa65 	bl	8009698 <_free_r>
 80091ce:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80091d0:	b111      	cbz	r1, 80091d8 <_reclaim_reent+0x54>
 80091d2:	4620      	mov	r0, r4
 80091d4:	f000 fa60 	bl	8009698 <_free_r>
 80091d8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80091da:	b111      	cbz	r1, 80091e2 <_reclaim_reent+0x5e>
 80091dc:	4620      	mov	r0, r4
 80091de:	f000 fa5b 	bl	8009698 <_free_r>
 80091e2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80091e4:	b111      	cbz	r1, 80091ec <_reclaim_reent+0x68>
 80091e6:	4620      	mov	r0, r4
 80091e8:	f000 fa56 	bl	8009698 <_free_r>
 80091ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091ee:	b111      	cbz	r1, 80091f6 <_reclaim_reent+0x72>
 80091f0:	4620      	mov	r0, r4
 80091f2:	f000 fa51 	bl	8009698 <_free_r>
 80091f6:	69a3      	ldr	r3, [r4, #24]
 80091f8:	b1e3      	cbz	r3, 8009234 <_reclaim_reent+0xb0>
 80091fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80091fc:	4620      	mov	r0, r4
 80091fe:	4798      	blx	r3
 8009200:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009202:	b1b9      	cbz	r1, 8009234 <_reclaim_reent+0xb0>
 8009204:	4620      	mov	r0, r4
 8009206:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800920a:	f7ff bfad 	b.w	8009168 <cleanup_glue>
 800920e:	5949      	ldr	r1, [r1, r5]
 8009210:	b941      	cbnz	r1, 8009224 <_reclaim_reent+0xa0>
 8009212:	3504      	adds	r5, #4
 8009214:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009216:	2d80      	cmp	r5, #128	; 0x80
 8009218:	68d9      	ldr	r1, [r3, #12]
 800921a:	d1f8      	bne.n	800920e <_reclaim_reent+0x8a>
 800921c:	4620      	mov	r0, r4
 800921e:	f000 fa3b 	bl	8009698 <_free_r>
 8009222:	e7ba      	b.n	800919a <_reclaim_reent+0x16>
 8009224:	680e      	ldr	r6, [r1, #0]
 8009226:	4620      	mov	r0, r4
 8009228:	f000 fa36 	bl	8009698 <_free_r>
 800922c:	4631      	mov	r1, r6
 800922e:	e7ef      	b.n	8009210 <_reclaim_reent+0x8c>
 8009230:	2500      	movs	r5, #0
 8009232:	e7ef      	b.n	8009214 <_reclaim_reent+0x90>
 8009234:	bd70      	pop	{r4, r5, r6, pc}
 8009236:	bf00      	nop
 8009238:	20000010 	.word	0x20000010

0800923c <_sbrk_r>:
 800923c:	b538      	push	{r3, r4, r5, lr}
 800923e:	4d06      	ldr	r5, [pc, #24]	; (8009258 <_sbrk_r+0x1c>)
 8009240:	2300      	movs	r3, #0
 8009242:	4604      	mov	r4, r0
 8009244:	4608      	mov	r0, r1
 8009246:	602b      	str	r3, [r5, #0]
 8009248:	f7f7 ff7a 	bl	8001140 <_sbrk>
 800924c:	1c43      	adds	r3, r0, #1
 800924e:	d102      	bne.n	8009256 <_sbrk_r+0x1a>
 8009250:	682b      	ldr	r3, [r5, #0]
 8009252:	b103      	cbz	r3, 8009256 <_sbrk_r+0x1a>
 8009254:	6023      	str	r3, [r4, #0]
 8009256:	bd38      	pop	{r3, r4, r5, pc}
 8009258:	20001a00 	.word	0x20001a00

0800925c <sniprintf>:
 800925c:	b40c      	push	{r2, r3}
 800925e:	b530      	push	{r4, r5, lr}
 8009260:	4b17      	ldr	r3, [pc, #92]	; (80092c0 <sniprintf+0x64>)
 8009262:	1e0c      	subs	r4, r1, #0
 8009264:	681d      	ldr	r5, [r3, #0]
 8009266:	b09d      	sub	sp, #116	; 0x74
 8009268:	da08      	bge.n	800927c <sniprintf+0x20>
 800926a:	238b      	movs	r3, #139	; 0x8b
 800926c:	602b      	str	r3, [r5, #0]
 800926e:	f04f 30ff 	mov.w	r0, #4294967295
 8009272:	b01d      	add	sp, #116	; 0x74
 8009274:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009278:	b002      	add	sp, #8
 800927a:	4770      	bx	lr
 800927c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009280:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009284:	bf14      	ite	ne
 8009286:	f104 33ff 	addne.w	r3, r4, #4294967295
 800928a:	4623      	moveq	r3, r4
 800928c:	9304      	str	r3, [sp, #16]
 800928e:	9307      	str	r3, [sp, #28]
 8009290:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009294:	9002      	str	r0, [sp, #8]
 8009296:	9006      	str	r0, [sp, #24]
 8009298:	f8ad 3016 	strh.w	r3, [sp, #22]
 800929c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800929e:	ab21      	add	r3, sp, #132	; 0x84
 80092a0:	a902      	add	r1, sp, #8
 80092a2:	4628      	mov	r0, r5
 80092a4:	9301      	str	r3, [sp, #4]
 80092a6:	f000 fa9d 	bl	80097e4 <_svfiprintf_r>
 80092aa:	1c43      	adds	r3, r0, #1
 80092ac:	bfbc      	itt	lt
 80092ae:	238b      	movlt	r3, #139	; 0x8b
 80092b0:	602b      	strlt	r3, [r5, #0]
 80092b2:	2c00      	cmp	r4, #0
 80092b4:	d0dd      	beq.n	8009272 <sniprintf+0x16>
 80092b6:	9b02      	ldr	r3, [sp, #8]
 80092b8:	2200      	movs	r2, #0
 80092ba:	701a      	strb	r2, [r3, #0]
 80092bc:	e7d9      	b.n	8009272 <sniprintf+0x16>
 80092be:	bf00      	nop
 80092c0:	20000010 	.word	0x20000010

080092c4 <__sread>:
 80092c4:	b510      	push	{r4, lr}
 80092c6:	460c      	mov	r4, r1
 80092c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092cc:	f000 fe76 	bl	8009fbc <_read_r>
 80092d0:	2800      	cmp	r0, #0
 80092d2:	bfab      	itete	ge
 80092d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80092d6:	89a3      	ldrhlt	r3, [r4, #12]
 80092d8:	181b      	addge	r3, r3, r0
 80092da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80092de:	bfac      	ite	ge
 80092e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80092e2:	81a3      	strhlt	r3, [r4, #12]
 80092e4:	bd10      	pop	{r4, pc}

080092e6 <__swrite>:
 80092e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092ea:	461f      	mov	r7, r3
 80092ec:	898b      	ldrh	r3, [r1, #12]
 80092ee:	05db      	lsls	r3, r3, #23
 80092f0:	4605      	mov	r5, r0
 80092f2:	460c      	mov	r4, r1
 80092f4:	4616      	mov	r6, r2
 80092f6:	d505      	bpl.n	8009304 <__swrite+0x1e>
 80092f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092fc:	2302      	movs	r3, #2
 80092fe:	2200      	movs	r2, #0
 8009300:	f000 f9a4 	bl	800964c <_lseek_r>
 8009304:	89a3      	ldrh	r3, [r4, #12]
 8009306:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800930a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800930e:	81a3      	strh	r3, [r4, #12]
 8009310:	4632      	mov	r2, r6
 8009312:	463b      	mov	r3, r7
 8009314:	4628      	mov	r0, r5
 8009316:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800931a:	f000 b887 	b.w	800942c <_write_r>

0800931e <__sseek>:
 800931e:	b510      	push	{r4, lr}
 8009320:	460c      	mov	r4, r1
 8009322:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009326:	f000 f991 	bl	800964c <_lseek_r>
 800932a:	1c43      	adds	r3, r0, #1
 800932c:	89a3      	ldrh	r3, [r4, #12]
 800932e:	bf15      	itete	ne
 8009330:	6560      	strne	r0, [r4, #84]	; 0x54
 8009332:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009336:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800933a:	81a3      	strheq	r3, [r4, #12]
 800933c:	bf18      	it	ne
 800933e:	81a3      	strhne	r3, [r4, #12]
 8009340:	bd10      	pop	{r4, pc}

08009342 <__sclose>:
 8009342:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009346:	f000 b8a1 	b.w	800948c <_close_r>

0800934a <strncmp>:
 800934a:	b510      	push	{r4, lr}
 800934c:	4603      	mov	r3, r0
 800934e:	b172      	cbz	r2, 800936e <strncmp+0x24>
 8009350:	3901      	subs	r1, #1
 8009352:	1884      	adds	r4, r0, r2
 8009354:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009358:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800935c:	4290      	cmp	r0, r2
 800935e:	d101      	bne.n	8009364 <strncmp+0x1a>
 8009360:	42a3      	cmp	r3, r4
 8009362:	d101      	bne.n	8009368 <strncmp+0x1e>
 8009364:	1a80      	subs	r0, r0, r2
 8009366:	bd10      	pop	{r4, pc}
 8009368:	2800      	cmp	r0, #0
 800936a:	d1f3      	bne.n	8009354 <strncmp+0xa>
 800936c:	e7fa      	b.n	8009364 <strncmp+0x1a>
 800936e:	4610      	mov	r0, r2
 8009370:	e7f9      	b.n	8009366 <strncmp+0x1c>
	...

08009374 <strtok>:
 8009374:	4b16      	ldr	r3, [pc, #88]	; (80093d0 <strtok+0x5c>)
 8009376:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800937a:	681f      	ldr	r7, [r3, #0]
 800937c:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800937e:	4605      	mov	r5, r0
 8009380:	460e      	mov	r6, r1
 8009382:	b9ec      	cbnz	r4, 80093c0 <strtok+0x4c>
 8009384:	2050      	movs	r0, #80	; 0x50
 8009386:	f000 f973 	bl	8009670 <malloc>
 800938a:	4602      	mov	r2, r0
 800938c:	65b8      	str	r0, [r7, #88]	; 0x58
 800938e:	b920      	cbnz	r0, 800939a <strtok+0x26>
 8009390:	4b10      	ldr	r3, [pc, #64]	; (80093d4 <strtok+0x60>)
 8009392:	4811      	ldr	r0, [pc, #68]	; (80093d8 <strtok+0x64>)
 8009394:	2157      	movs	r1, #87	; 0x57
 8009396:	f000 f85b 	bl	8009450 <__assert_func>
 800939a:	e9c0 4400 	strd	r4, r4, [r0]
 800939e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80093a2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80093a6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80093aa:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80093ae:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80093b2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80093b6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80093ba:	6184      	str	r4, [r0, #24]
 80093bc:	7704      	strb	r4, [r0, #28]
 80093be:	6244      	str	r4, [r0, #36]	; 0x24
 80093c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80093c2:	4631      	mov	r1, r6
 80093c4:	4628      	mov	r0, r5
 80093c6:	2301      	movs	r3, #1
 80093c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093cc:	f000 b806 	b.w	80093dc <__strtok_r>
 80093d0:	20000010 	.word	0x20000010
 80093d4:	0800abc8 	.word	0x0800abc8
 80093d8:	0800abdf 	.word	0x0800abdf

080093dc <__strtok_r>:
 80093dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093de:	b908      	cbnz	r0, 80093e4 <__strtok_r+0x8>
 80093e0:	6810      	ldr	r0, [r2, #0]
 80093e2:	b188      	cbz	r0, 8009408 <__strtok_r+0x2c>
 80093e4:	4604      	mov	r4, r0
 80093e6:	4620      	mov	r0, r4
 80093e8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80093ec:	460f      	mov	r7, r1
 80093ee:	f817 6b01 	ldrb.w	r6, [r7], #1
 80093f2:	b91e      	cbnz	r6, 80093fc <__strtok_r+0x20>
 80093f4:	b965      	cbnz	r5, 8009410 <__strtok_r+0x34>
 80093f6:	6015      	str	r5, [r2, #0]
 80093f8:	4628      	mov	r0, r5
 80093fa:	e005      	b.n	8009408 <__strtok_r+0x2c>
 80093fc:	42b5      	cmp	r5, r6
 80093fe:	d1f6      	bne.n	80093ee <__strtok_r+0x12>
 8009400:	2b00      	cmp	r3, #0
 8009402:	d1f0      	bne.n	80093e6 <__strtok_r+0xa>
 8009404:	6014      	str	r4, [r2, #0]
 8009406:	7003      	strb	r3, [r0, #0]
 8009408:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800940a:	461c      	mov	r4, r3
 800940c:	e00c      	b.n	8009428 <__strtok_r+0x4c>
 800940e:	b915      	cbnz	r5, 8009416 <__strtok_r+0x3a>
 8009410:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009414:	460e      	mov	r6, r1
 8009416:	f816 5b01 	ldrb.w	r5, [r6], #1
 800941a:	42ab      	cmp	r3, r5
 800941c:	d1f7      	bne.n	800940e <__strtok_r+0x32>
 800941e:	2b00      	cmp	r3, #0
 8009420:	d0f3      	beq.n	800940a <__strtok_r+0x2e>
 8009422:	2300      	movs	r3, #0
 8009424:	f804 3c01 	strb.w	r3, [r4, #-1]
 8009428:	6014      	str	r4, [r2, #0]
 800942a:	e7ed      	b.n	8009408 <__strtok_r+0x2c>

0800942c <_write_r>:
 800942c:	b538      	push	{r3, r4, r5, lr}
 800942e:	4d07      	ldr	r5, [pc, #28]	; (800944c <_write_r+0x20>)
 8009430:	4604      	mov	r4, r0
 8009432:	4608      	mov	r0, r1
 8009434:	4611      	mov	r1, r2
 8009436:	2200      	movs	r2, #0
 8009438:	602a      	str	r2, [r5, #0]
 800943a:	461a      	mov	r2, r3
 800943c:	f7f7 fe34 	bl	80010a8 <_write>
 8009440:	1c43      	adds	r3, r0, #1
 8009442:	d102      	bne.n	800944a <_write_r+0x1e>
 8009444:	682b      	ldr	r3, [r5, #0]
 8009446:	b103      	cbz	r3, 800944a <_write_r+0x1e>
 8009448:	6023      	str	r3, [r4, #0]
 800944a:	bd38      	pop	{r3, r4, r5, pc}
 800944c:	20001a00 	.word	0x20001a00

08009450 <__assert_func>:
 8009450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009452:	4614      	mov	r4, r2
 8009454:	461a      	mov	r2, r3
 8009456:	4b09      	ldr	r3, [pc, #36]	; (800947c <__assert_func+0x2c>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	4605      	mov	r5, r0
 800945c:	68d8      	ldr	r0, [r3, #12]
 800945e:	b14c      	cbz	r4, 8009474 <__assert_func+0x24>
 8009460:	4b07      	ldr	r3, [pc, #28]	; (8009480 <__assert_func+0x30>)
 8009462:	9100      	str	r1, [sp, #0]
 8009464:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009468:	4906      	ldr	r1, [pc, #24]	; (8009484 <__assert_func+0x34>)
 800946a:	462b      	mov	r3, r5
 800946c:	f000 f8dc 	bl	8009628 <fiprintf>
 8009470:	f000 fe76 	bl	800a160 <abort>
 8009474:	4b04      	ldr	r3, [pc, #16]	; (8009488 <__assert_func+0x38>)
 8009476:	461c      	mov	r4, r3
 8009478:	e7f3      	b.n	8009462 <__assert_func+0x12>
 800947a:	bf00      	nop
 800947c:	20000010 	.word	0x20000010
 8009480:	0800ac3c 	.word	0x0800ac3c
 8009484:	0800ac49 	.word	0x0800ac49
 8009488:	0800ac77 	.word	0x0800ac77

0800948c <_close_r>:
 800948c:	b538      	push	{r3, r4, r5, lr}
 800948e:	4d06      	ldr	r5, [pc, #24]	; (80094a8 <_close_r+0x1c>)
 8009490:	2300      	movs	r3, #0
 8009492:	4604      	mov	r4, r0
 8009494:	4608      	mov	r0, r1
 8009496:	602b      	str	r3, [r5, #0]
 8009498:	f7f7 fe22 	bl	80010e0 <_close>
 800949c:	1c43      	adds	r3, r0, #1
 800949e:	d102      	bne.n	80094a6 <_close_r+0x1a>
 80094a0:	682b      	ldr	r3, [r5, #0]
 80094a2:	b103      	cbz	r3, 80094a6 <_close_r+0x1a>
 80094a4:	6023      	str	r3, [r4, #0]
 80094a6:	bd38      	pop	{r3, r4, r5, pc}
 80094a8:	20001a00 	.word	0x20001a00

080094ac <__sflush_r>:
 80094ac:	898a      	ldrh	r2, [r1, #12]
 80094ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094b0:	4605      	mov	r5, r0
 80094b2:	0710      	lsls	r0, r2, #28
 80094b4:	460c      	mov	r4, r1
 80094b6:	d457      	bmi.n	8009568 <__sflush_r+0xbc>
 80094b8:	684b      	ldr	r3, [r1, #4]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	dc04      	bgt.n	80094c8 <__sflush_r+0x1c>
 80094be:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	dc01      	bgt.n	80094c8 <__sflush_r+0x1c>
 80094c4:	2000      	movs	r0, #0
 80094c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80094ca:	2e00      	cmp	r6, #0
 80094cc:	d0fa      	beq.n	80094c4 <__sflush_r+0x18>
 80094ce:	2300      	movs	r3, #0
 80094d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80094d4:	682f      	ldr	r7, [r5, #0]
 80094d6:	602b      	str	r3, [r5, #0]
 80094d8:	d032      	beq.n	8009540 <__sflush_r+0x94>
 80094da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80094dc:	89a3      	ldrh	r3, [r4, #12]
 80094de:	075a      	lsls	r2, r3, #29
 80094e0:	d505      	bpl.n	80094ee <__sflush_r+0x42>
 80094e2:	6863      	ldr	r3, [r4, #4]
 80094e4:	1ac0      	subs	r0, r0, r3
 80094e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80094e8:	b10b      	cbz	r3, 80094ee <__sflush_r+0x42>
 80094ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80094ec:	1ac0      	subs	r0, r0, r3
 80094ee:	2300      	movs	r3, #0
 80094f0:	4602      	mov	r2, r0
 80094f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80094f4:	6a21      	ldr	r1, [r4, #32]
 80094f6:	4628      	mov	r0, r5
 80094f8:	47b0      	blx	r6
 80094fa:	1c43      	adds	r3, r0, #1
 80094fc:	89a3      	ldrh	r3, [r4, #12]
 80094fe:	d106      	bne.n	800950e <__sflush_r+0x62>
 8009500:	6829      	ldr	r1, [r5, #0]
 8009502:	291d      	cmp	r1, #29
 8009504:	d82c      	bhi.n	8009560 <__sflush_r+0xb4>
 8009506:	4a29      	ldr	r2, [pc, #164]	; (80095ac <__sflush_r+0x100>)
 8009508:	40ca      	lsrs	r2, r1
 800950a:	07d6      	lsls	r6, r2, #31
 800950c:	d528      	bpl.n	8009560 <__sflush_r+0xb4>
 800950e:	2200      	movs	r2, #0
 8009510:	6062      	str	r2, [r4, #4]
 8009512:	04d9      	lsls	r1, r3, #19
 8009514:	6922      	ldr	r2, [r4, #16]
 8009516:	6022      	str	r2, [r4, #0]
 8009518:	d504      	bpl.n	8009524 <__sflush_r+0x78>
 800951a:	1c42      	adds	r2, r0, #1
 800951c:	d101      	bne.n	8009522 <__sflush_r+0x76>
 800951e:	682b      	ldr	r3, [r5, #0]
 8009520:	b903      	cbnz	r3, 8009524 <__sflush_r+0x78>
 8009522:	6560      	str	r0, [r4, #84]	; 0x54
 8009524:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009526:	602f      	str	r7, [r5, #0]
 8009528:	2900      	cmp	r1, #0
 800952a:	d0cb      	beq.n	80094c4 <__sflush_r+0x18>
 800952c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009530:	4299      	cmp	r1, r3
 8009532:	d002      	beq.n	800953a <__sflush_r+0x8e>
 8009534:	4628      	mov	r0, r5
 8009536:	f000 f8af 	bl	8009698 <_free_r>
 800953a:	2000      	movs	r0, #0
 800953c:	6360      	str	r0, [r4, #52]	; 0x34
 800953e:	e7c2      	b.n	80094c6 <__sflush_r+0x1a>
 8009540:	6a21      	ldr	r1, [r4, #32]
 8009542:	2301      	movs	r3, #1
 8009544:	4628      	mov	r0, r5
 8009546:	47b0      	blx	r6
 8009548:	1c41      	adds	r1, r0, #1
 800954a:	d1c7      	bne.n	80094dc <__sflush_r+0x30>
 800954c:	682b      	ldr	r3, [r5, #0]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d0c4      	beq.n	80094dc <__sflush_r+0x30>
 8009552:	2b1d      	cmp	r3, #29
 8009554:	d001      	beq.n	800955a <__sflush_r+0xae>
 8009556:	2b16      	cmp	r3, #22
 8009558:	d101      	bne.n	800955e <__sflush_r+0xb2>
 800955a:	602f      	str	r7, [r5, #0]
 800955c:	e7b2      	b.n	80094c4 <__sflush_r+0x18>
 800955e:	89a3      	ldrh	r3, [r4, #12]
 8009560:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009564:	81a3      	strh	r3, [r4, #12]
 8009566:	e7ae      	b.n	80094c6 <__sflush_r+0x1a>
 8009568:	690f      	ldr	r7, [r1, #16]
 800956a:	2f00      	cmp	r7, #0
 800956c:	d0aa      	beq.n	80094c4 <__sflush_r+0x18>
 800956e:	0793      	lsls	r3, r2, #30
 8009570:	680e      	ldr	r6, [r1, #0]
 8009572:	bf08      	it	eq
 8009574:	694b      	ldreq	r3, [r1, #20]
 8009576:	600f      	str	r7, [r1, #0]
 8009578:	bf18      	it	ne
 800957a:	2300      	movne	r3, #0
 800957c:	1bf6      	subs	r6, r6, r7
 800957e:	608b      	str	r3, [r1, #8]
 8009580:	2e00      	cmp	r6, #0
 8009582:	dd9f      	ble.n	80094c4 <__sflush_r+0x18>
 8009584:	6a21      	ldr	r1, [r4, #32]
 8009586:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800958a:	4633      	mov	r3, r6
 800958c:	463a      	mov	r2, r7
 800958e:	4628      	mov	r0, r5
 8009590:	47e0      	blx	ip
 8009592:	2800      	cmp	r0, #0
 8009594:	dc06      	bgt.n	80095a4 <__sflush_r+0xf8>
 8009596:	89a3      	ldrh	r3, [r4, #12]
 8009598:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800959c:	81a3      	strh	r3, [r4, #12]
 800959e:	f04f 30ff 	mov.w	r0, #4294967295
 80095a2:	e790      	b.n	80094c6 <__sflush_r+0x1a>
 80095a4:	4407      	add	r7, r0
 80095a6:	1a36      	subs	r6, r6, r0
 80095a8:	e7ea      	b.n	8009580 <__sflush_r+0xd4>
 80095aa:	bf00      	nop
 80095ac:	20400001 	.word	0x20400001

080095b0 <_fflush_r>:
 80095b0:	b538      	push	{r3, r4, r5, lr}
 80095b2:	690b      	ldr	r3, [r1, #16]
 80095b4:	4605      	mov	r5, r0
 80095b6:	460c      	mov	r4, r1
 80095b8:	b913      	cbnz	r3, 80095c0 <_fflush_r+0x10>
 80095ba:	2500      	movs	r5, #0
 80095bc:	4628      	mov	r0, r5
 80095be:	bd38      	pop	{r3, r4, r5, pc}
 80095c0:	b118      	cbz	r0, 80095ca <_fflush_r+0x1a>
 80095c2:	6983      	ldr	r3, [r0, #24]
 80095c4:	b90b      	cbnz	r3, 80095ca <_fflush_r+0x1a>
 80095c6:	f7ff fc5f 	bl	8008e88 <__sinit>
 80095ca:	4b14      	ldr	r3, [pc, #80]	; (800961c <_fflush_r+0x6c>)
 80095cc:	429c      	cmp	r4, r3
 80095ce:	d11b      	bne.n	8009608 <_fflush_r+0x58>
 80095d0:	686c      	ldr	r4, [r5, #4]
 80095d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d0ef      	beq.n	80095ba <_fflush_r+0xa>
 80095da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80095dc:	07d0      	lsls	r0, r2, #31
 80095de:	d404      	bmi.n	80095ea <_fflush_r+0x3a>
 80095e0:	0599      	lsls	r1, r3, #22
 80095e2:	d402      	bmi.n	80095ea <_fflush_r+0x3a>
 80095e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095e6:	f7ff fd12 	bl	800900e <__retarget_lock_acquire_recursive>
 80095ea:	4628      	mov	r0, r5
 80095ec:	4621      	mov	r1, r4
 80095ee:	f7ff ff5d 	bl	80094ac <__sflush_r>
 80095f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80095f4:	07da      	lsls	r2, r3, #31
 80095f6:	4605      	mov	r5, r0
 80095f8:	d4e0      	bmi.n	80095bc <_fflush_r+0xc>
 80095fa:	89a3      	ldrh	r3, [r4, #12]
 80095fc:	059b      	lsls	r3, r3, #22
 80095fe:	d4dd      	bmi.n	80095bc <_fflush_r+0xc>
 8009600:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009602:	f7ff fd05 	bl	8009010 <__retarget_lock_release_recursive>
 8009606:	e7d9      	b.n	80095bc <_fflush_r+0xc>
 8009608:	4b05      	ldr	r3, [pc, #20]	; (8009620 <_fflush_r+0x70>)
 800960a:	429c      	cmp	r4, r3
 800960c:	d101      	bne.n	8009612 <_fflush_r+0x62>
 800960e:	68ac      	ldr	r4, [r5, #8]
 8009610:	e7df      	b.n	80095d2 <_fflush_r+0x22>
 8009612:	4b04      	ldr	r3, [pc, #16]	; (8009624 <_fflush_r+0x74>)
 8009614:	429c      	cmp	r4, r3
 8009616:	bf08      	it	eq
 8009618:	68ec      	ldreq	r4, [r5, #12]
 800961a:	e7da      	b.n	80095d2 <_fflush_r+0x22>
 800961c:	0800ab84 	.word	0x0800ab84
 8009620:	0800aba4 	.word	0x0800aba4
 8009624:	0800ab64 	.word	0x0800ab64

08009628 <fiprintf>:
 8009628:	b40e      	push	{r1, r2, r3}
 800962a:	b503      	push	{r0, r1, lr}
 800962c:	4601      	mov	r1, r0
 800962e:	ab03      	add	r3, sp, #12
 8009630:	4805      	ldr	r0, [pc, #20]	; (8009648 <fiprintf+0x20>)
 8009632:	f853 2b04 	ldr.w	r2, [r3], #4
 8009636:	6800      	ldr	r0, [r0, #0]
 8009638:	9301      	str	r3, [sp, #4]
 800963a:	f000 f9fb 	bl	8009a34 <_vfiprintf_r>
 800963e:	b002      	add	sp, #8
 8009640:	f85d eb04 	ldr.w	lr, [sp], #4
 8009644:	b003      	add	sp, #12
 8009646:	4770      	bx	lr
 8009648:	20000010 	.word	0x20000010

0800964c <_lseek_r>:
 800964c:	b538      	push	{r3, r4, r5, lr}
 800964e:	4d07      	ldr	r5, [pc, #28]	; (800966c <_lseek_r+0x20>)
 8009650:	4604      	mov	r4, r0
 8009652:	4608      	mov	r0, r1
 8009654:	4611      	mov	r1, r2
 8009656:	2200      	movs	r2, #0
 8009658:	602a      	str	r2, [r5, #0]
 800965a:	461a      	mov	r2, r3
 800965c:	f7f7 fd64 	bl	8001128 <_lseek>
 8009660:	1c43      	adds	r3, r0, #1
 8009662:	d102      	bne.n	800966a <_lseek_r+0x1e>
 8009664:	682b      	ldr	r3, [r5, #0]
 8009666:	b103      	cbz	r3, 800966a <_lseek_r+0x1e>
 8009668:	6023      	str	r3, [r4, #0]
 800966a:	bd38      	pop	{r3, r4, r5, pc}
 800966c:	20001a00 	.word	0x20001a00

08009670 <malloc>:
 8009670:	4b02      	ldr	r3, [pc, #8]	; (800967c <malloc+0xc>)
 8009672:	4601      	mov	r1, r0
 8009674:	6818      	ldr	r0, [r3, #0]
 8009676:	f7ff bd03 	b.w	8009080 <_malloc_r>
 800967a:	bf00      	nop
 800967c:	20000010 	.word	0x20000010

08009680 <__malloc_lock>:
 8009680:	4801      	ldr	r0, [pc, #4]	; (8009688 <__malloc_lock+0x8>)
 8009682:	f7ff bcc4 	b.w	800900e <__retarget_lock_acquire_recursive>
 8009686:	bf00      	nop
 8009688:	200019f4 	.word	0x200019f4

0800968c <__malloc_unlock>:
 800968c:	4801      	ldr	r0, [pc, #4]	; (8009694 <__malloc_unlock+0x8>)
 800968e:	f7ff bcbf 	b.w	8009010 <__retarget_lock_release_recursive>
 8009692:	bf00      	nop
 8009694:	200019f4 	.word	0x200019f4

08009698 <_free_r>:
 8009698:	b538      	push	{r3, r4, r5, lr}
 800969a:	4605      	mov	r5, r0
 800969c:	2900      	cmp	r1, #0
 800969e:	d041      	beq.n	8009724 <_free_r+0x8c>
 80096a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096a4:	1f0c      	subs	r4, r1, #4
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	bfb8      	it	lt
 80096aa:	18e4      	addlt	r4, r4, r3
 80096ac:	f7ff ffe8 	bl	8009680 <__malloc_lock>
 80096b0:	4a1d      	ldr	r2, [pc, #116]	; (8009728 <_free_r+0x90>)
 80096b2:	6813      	ldr	r3, [r2, #0]
 80096b4:	b933      	cbnz	r3, 80096c4 <_free_r+0x2c>
 80096b6:	6063      	str	r3, [r4, #4]
 80096b8:	6014      	str	r4, [r2, #0]
 80096ba:	4628      	mov	r0, r5
 80096bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80096c0:	f7ff bfe4 	b.w	800968c <__malloc_unlock>
 80096c4:	42a3      	cmp	r3, r4
 80096c6:	d908      	bls.n	80096da <_free_r+0x42>
 80096c8:	6820      	ldr	r0, [r4, #0]
 80096ca:	1821      	adds	r1, r4, r0
 80096cc:	428b      	cmp	r3, r1
 80096ce:	bf01      	itttt	eq
 80096d0:	6819      	ldreq	r1, [r3, #0]
 80096d2:	685b      	ldreq	r3, [r3, #4]
 80096d4:	1809      	addeq	r1, r1, r0
 80096d6:	6021      	streq	r1, [r4, #0]
 80096d8:	e7ed      	b.n	80096b6 <_free_r+0x1e>
 80096da:	461a      	mov	r2, r3
 80096dc:	685b      	ldr	r3, [r3, #4]
 80096de:	b10b      	cbz	r3, 80096e4 <_free_r+0x4c>
 80096e0:	42a3      	cmp	r3, r4
 80096e2:	d9fa      	bls.n	80096da <_free_r+0x42>
 80096e4:	6811      	ldr	r1, [r2, #0]
 80096e6:	1850      	adds	r0, r2, r1
 80096e8:	42a0      	cmp	r0, r4
 80096ea:	d10b      	bne.n	8009704 <_free_r+0x6c>
 80096ec:	6820      	ldr	r0, [r4, #0]
 80096ee:	4401      	add	r1, r0
 80096f0:	1850      	adds	r0, r2, r1
 80096f2:	4283      	cmp	r3, r0
 80096f4:	6011      	str	r1, [r2, #0]
 80096f6:	d1e0      	bne.n	80096ba <_free_r+0x22>
 80096f8:	6818      	ldr	r0, [r3, #0]
 80096fa:	685b      	ldr	r3, [r3, #4]
 80096fc:	6053      	str	r3, [r2, #4]
 80096fe:	4401      	add	r1, r0
 8009700:	6011      	str	r1, [r2, #0]
 8009702:	e7da      	b.n	80096ba <_free_r+0x22>
 8009704:	d902      	bls.n	800970c <_free_r+0x74>
 8009706:	230c      	movs	r3, #12
 8009708:	602b      	str	r3, [r5, #0]
 800970a:	e7d6      	b.n	80096ba <_free_r+0x22>
 800970c:	6820      	ldr	r0, [r4, #0]
 800970e:	1821      	adds	r1, r4, r0
 8009710:	428b      	cmp	r3, r1
 8009712:	bf04      	itt	eq
 8009714:	6819      	ldreq	r1, [r3, #0]
 8009716:	685b      	ldreq	r3, [r3, #4]
 8009718:	6063      	str	r3, [r4, #4]
 800971a:	bf04      	itt	eq
 800971c:	1809      	addeq	r1, r1, r0
 800971e:	6021      	streq	r1, [r4, #0]
 8009720:	6054      	str	r4, [r2, #4]
 8009722:	e7ca      	b.n	80096ba <_free_r+0x22>
 8009724:	bd38      	pop	{r3, r4, r5, pc}
 8009726:	bf00      	nop
 8009728:	200019f8 	.word	0x200019f8

0800972c <__ssputs_r>:
 800972c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009730:	688e      	ldr	r6, [r1, #8]
 8009732:	429e      	cmp	r6, r3
 8009734:	4682      	mov	sl, r0
 8009736:	460c      	mov	r4, r1
 8009738:	4690      	mov	r8, r2
 800973a:	461f      	mov	r7, r3
 800973c:	d838      	bhi.n	80097b0 <__ssputs_r+0x84>
 800973e:	898a      	ldrh	r2, [r1, #12]
 8009740:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009744:	d032      	beq.n	80097ac <__ssputs_r+0x80>
 8009746:	6825      	ldr	r5, [r4, #0]
 8009748:	6909      	ldr	r1, [r1, #16]
 800974a:	eba5 0901 	sub.w	r9, r5, r1
 800974e:	6965      	ldr	r5, [r4, #20]
 8009750:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009754:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009758:	3301      	adds	r3, #1
 800975a:	444b      	add	r3, r9
 800975c:	106d      	asrs	r5, r5, #1
 800975e:	429d      	cmp	r5, r3
 8009760:	bf38      	it	cc
 8009762:	461d      	movcc	r5, r3
 8009764:	0553      	lsls	r3, r2, #21
 8009766:	d531      	bpl.n	80097cc <__ssputs_r+0xa0>
 8009768:	4629      	mov	r1, r5
 800976a:	f7ff fc89 	bl	8009080 <_malloc_r>
 800976e:	4606      	mov	r6, r0
 8009770:	b950      	cbnz	r0, 8009788 <__ssputs_r+0x5c>
 8009772:	230c      	movs	r3, #12
 8009774:	f8ca 3000 	str.w	r3, [sl]
 8009778:	89a3      	ldrh	r3, [r4, #12]
 800977a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800977e:	81a3      	strh	r3, [r4, #12]
 8009780:	f04f 30ff 	mov.w	r0, #4294967295
 8009784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009788:	6921      	ldr	r1, [r4, #16]
 800978a:	464a      	mov	r2, r9
 800978c:	f7ff fc41 	bl	8009012 <memcpy>
 8009790:	89a3      	ldrh	r3, [r4, #12]
 8009792:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009796:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800979a:	81a3      	strh	r3, [r4, #12]
 800979c:	6126      	str	r6, [r4, #16]
 800979e:	6165      	str	r5, [r4, #20]
 80097a0:	444e      	add	r6, r9
 80097a2:	eba5 0509 	sub.w	r5, r5, r9
 80097a6:	6026      	str	r6, [r4, #0]
 80097a8:	60a5      	str	r5, [r4, #8]
 80097aa:	463e      	mov	r6, r7
 80097ac:	42be      	cmp	r6, r7
 80097ae:	d900      	bls.n	80097b2 <__ssputs_r+0x86>
 80097b0:	463e      	mov	r6, r7
 80097b2:	6820      	ldr	r0, [r4, #0]
 80097b4:	4632      	mov	r2, r6
 80097b6:	4641      	mov	r1, r8
 80097b8:	f000 fd3e 	bl	800a238 <memmove>
 80097bc:	68a3      	ldr	r3, [r4, #8]
 80097be:	1b9b      	subs	r3, r3, r6
 80097c0:	60a3      	str	r3, [r4, #8]
 80097c2:	6823      	ldr	r3, [r4, #0]
 80097c4:	4433      	add	r3, r6
 80097c6:	6023      	str	r3, [r4, #0]
 80097c8:	2000      	movs	r0, #0
 80097ca:	e7db      	b.n	8009784 <__ssputs_r+0x58>
 80097cc:	462a      	mov	r2, r5
 80097ce:	f000 fd4d 	bl	800a26c <_realloc_r>
 80097d2:	4606      	mov	r6, r0
 80097d4:	2800      	cmp	r0, #0
 80097d6:	d1e1      	bne.n	800979c <__ssputs_r+0x70>
 80097d8:	6921      	ldr	r1, [r4, #16]
 80097da:	4650      	mov	r0, sl
 80097dc:	f7ff ff5c 	bl	8009698 <_free_r>
 80097e0:	e7c7      	b.n	8009772 <__ssputs_r+0x46>
	...

080097e4 <_svfiprintf_r>:
 80097e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097e8:	4698      	mov	r8, r3
 80097ea:	898b      	ldrh	r3, [r1, #12]
 80097ec:	061b      	lsls	r3, r3, #24
 80097ee:	b09d      	sub	sp, #116	; 0x74
 80097f0:	4607      	mov	r7, r0
 80097f2:	460d      	mov	r5, r1
 80097f4:	4614      	mov	r4, r2
 80097f6:	d50e      	bpl.n	8009816 <_svfiprintf_r+0x32>
 80097f8:	690b      	ldr	r3, [r1, #16]
 80097fa:	b963      	cbnz	r3, 8009816 <_svfiprintf_r+0x32>
 80097fc:	2140      	movs	r1, #64	; 0x40
 80097fe:	f7ff fc3f 	bl	8009080 <_malloc_r>
 8009802:	6028      	str	r0, [r5, #0]
 8009804:	6128      	str	r0, [r5, #16]
 8009806:	b920      	cbnz	r0, 8009812 <_svfiprintf_r+0x2e>
 8009808:	230c      	movs	r3, #12
 800980a:	603b      	str	r3, [r7, #0]
 800980c:	f04f 30ff 	mov.w	r0, #4294967295
 8009810:	e0d1      	b.n	80099b6 <_svfiprintf_r+0x1d2>
 8009812:	2340      	movs	r3, #64	; 0x40
 8009814:	616b      	str	r3, [r5, #20]
 8009816:	2300      	movs	r3, #0
 8009818:	9309      	str	r3, [sp, #36]	; 0x24
 800981a:	2320      	movs	r3, #32
 800981c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009820:	f8cd 800c 	str.w	r8, [sp, #12]
 8009824:	2330      	movs	r3, #48	; 0x30
 8009826:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80099d0 <_svfiprintf_r+0x1ec>
 800982a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800982e:	f04f 0901 	mov.w	r9, #1
 8009832:	4623      	mov	r3, r4
 8009834:	469a      	mov	sl, r3
 8009836:	f813 2b01 	ldrb.w	r2, [r3], #1
 800983a:	b10a      	cbz	r2, 8009840 <_svfiprintf_r+0x5c>
 800983c:	2a25      	cmp	r2, #37	; 0x25
 800983e:	d1f9      	bne.n	8009834 <_svfiprintf_r+0x50>
 8009840:	ebba 0b04 	subs.w	fp, sl, r4
 8009844:	d00b      	beq.n	800985e <_svfiprintf_r+0x7a>
 8009846:	465b      	mov	r3, fp
 8009848:	4622      	mov	r2, r4
 800984a:	4629      	mov	r1, r5
 800984c:	4638      	mov	r0, r7
 800984e:	f7ff ff6d 	bl	800972c <__ssputs_r>
 8009852:	3001      	adds	r0, #1
 8009854:	f000 80aa 	beq.w	80099ac <_svfiprintf_r+0x1c8>
 8009858:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800985a:	445a      	add	r2, fp
 800985c:	9209      	str	r2, [sp, #36]	; 0x24
 800985e:	f89a 3000 	ldrb.w	r3, [sl]
 8009862:	2b00      	cmp	r3, #0
 8009864:	f000 80a2 	beq.w	80099ac <_svfiprintf_r+0x1c8>
 8009868:	2300      	movs	r3, #0
 800986a:	f04f 32ff 	mov.w	r2, #4294967295
 800986e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009872:	f10a 0a01 	add.w	sl, sl, #1
 8009876:	9304      	str	r3, [sp, #16]
 8009878:	9307      	str	r3, [sp, #28]
 800987a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800987e:	931a      	str	r3, [sp, #104]	; 0x68
 8009880:	4654      	mov	r4, sl
 8009882:	2205      	movs	r2, #5
 8009884:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009888:	4851      	ldr	r0, [pc, #324]	; (80099d0 <_svfiprintf_r+0x1ec>)
 800988a:	f7f6 fc81 	bl	8000190 <memchr>
 800988e:	9a04      	ldr	r2, [sp, #16]
 8009890:	b9d8      	cbnz	r0, 80098ca <_svfiprintf_r+0xe6>
 8009892:	06d0      	lsls	r0, r2, #27
 8009894:	bf44      	itt	mi
 8009896:	2320      	movmi	r3, #32
 8009898:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800989c:	0711      	lsls	r1, r2, #28
 800989e:	bf44      	itt	mi
 80098a0:	232b      	movmi	r3, #43	; 0x2b
 80098a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80098a6:	f89a 3000 	ldrb.w	r3, [sl]
 80098aa:	2b2a      	cmp	r3, #42	; 0x2a
 80098ac:	d015      	beq.n	80098da <_svfiprintf_r+0xf6>
 80098ae:	9a07      	ldr	r2, [sp, #28]
 80098b0:	4654      	mov	r4, sl
 80098b2:	2000      	movs	r0, #0
 80098b4:	f04f 0c0a 	mov.w	ip, #10
 80098b8:	4621      	mov	r1, r4
 80098ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80098be:	3b30      	subs	r3, #48	; 0x30
 80098c0:	2b09      	cmp	r3, #9
 80098c2:	d94e      	bls.n	8009962 <_svfiprintf_r+0x17e>
 80098c4:	b1b0      	cbz	r0, 80098f4 <_svfiprintf_r+0x110>
 80098c6:	9207      	str	r2, [sp, #28]
 80098c8:	e014      	b.n	80098f4 <_svfiprintf_r+0x110>
 80098ca:	eba0 0308 	sub.w	r3, r0, r8
 80098ce:	fa09 f303 	lsl.w	r3, r9, r3
 80098d2:	4313      	orrs	r3, r2
 80098d4:	9304      	str	r3, [sp, #16]
 80098d6:	46a2      	mov	sl, r4
 80098d8:	e7d2      	b.n	8009880 <_svfiprintf_r+0x9c>
 80098da:	9b03      	ldr	r3, [sp, #12]
 80098dc:	1d19      	adds	r1, r3, #4
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	9103      	str	r1, [sp, #12]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	bfbb      	ittet	lt
 80098e6:	425b      	neglt	r3, r3
 80098e8:	f042 0202 	orrlt.w	r2, r2, #2
 80098ec:	9307      	strge	r3, [sp, #28]
 80098ee:	9307      	strlt	r3, [sp, #28]
 80098f0:	bfb8      	it	lt
 80098f2:	9204      	strlt	r2, [sp, #16]
 80098f4:	7823      	ldrb	r3, [r4, #0]
 80098f6:	2b2e      	cmp	r3, #46	; 0x2e
 80098f8:	d10c      	bne.n	8009914 <_svfiprintf_r+0x130>
 80098fa:	7863      	ldrb	r3, [r4, #1]
 80098fc:	2b2a      	cmp	r3, #42	; 0x2a
 80098fe:	d135      	bne.n	800996c <_svfiprintf_r+0x188>
 8009900:	9b03      	ldr	r3, [sp, #12]
 8009902:	1d1a      	adds	r2, r3, #4
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	9203      	str	r2, [sp, #12]
 8009908:	2b00      	cmp	r3, #0
 800990a:	bfb8      	it	lt
 800990c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009910:	3402      	adds	r4, #2
 8009912:	9305      	str	r3, [sp, #20]
 8009914:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80099d4 <_svfiprintf_r+0x1f0>
 8009918:	7821      	ldrb	r1, [r4, #0]
 800991a:	2203      	movs	r2, #3
 800991c:	4650      	mov	r0, sl
 800991e:	f7f6 fc37 	bl	8000190 <memchr>
 8009922:	b140      	cbz	r0, 8009936 <_svfiprintf_r+0x152>
 8009924:	2340      	movs	r3, #64	; 0x40
 8009926:	eba0 000a 	sub.w	r0, r0, sl
 800992a:	fa03 f000 	lsl.w	r0, r3, r0
 800992e:	9b04      	ldr	r3, [sp, #16]
 8009930:	4303      	orrs	r3, r0
 8009932:	3401      	adds	r4, #1
 8009934:	9304      	str	r3, [sp, #16]
 8009936:	f814 1b01 	ldrb.w	r1, [r4], #1
 800993a:	4827      	ldr	r0, [pc, #156]	; (80099d8 <_svfiprintf_r+0x1f4>)
 800993c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009940:	2206      	movs	r2, #6
 8009942:	f7f6 fc25 	bl	8000190 <memchr>
 8009946:	2800      	cmp	r0, #0
 8009948:	d038      	beq.n	80099bc <_svfiprintf_r+0x1d8>
 800994a:	4b24      	ldr	r3, [pc, #144]	; (80099dc <_svfiprintf_r+0x1f8>)
 800994c:	bb1b      	cbnz	r3, 8009996 <_svfiprintf_r+0x1b2>
 800994e:	9b03      	ldr	r3, [sp, #12]
 8009950:	3307      	adds	r3, #7
 8009952:	f023 0307 	bic.w	r3, r3, #7
 8009956:	3308      	adds	r3, #8
 8009958:	9303      	str	r3, [sp, #12]
 800995a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800995c:	4433      	add	r3, r6
 800995e:	9309      	str	r3, [sp, #36]	; 0x24
 8009960:	e767      	b.n	8009832 <_svfiprintf_r+0x4e>
 8009962:	fb0c 3202 	mla	r2, ip, r2, r3
 8009966:	460c      	mov	r4, r1
 8009968:	2001      	movs	r0, #1
 800996a:	e7a5      	b.n	80098b8 <_svfiprintf_r+0xd4>
 800996c:	2300      	movs	r3, #0
 800996e:	3401      	adds	r4, #1
 8009970:	9305      	str	r3, [sp, #20]
 8009972:	4619      	mov	r1, r3
 8009974:	f04f 0c0a 	mov.w	ip, #10
 8009978:	4620      	mov	r0, r4
 800997a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800997e:	3a30      	subs	r2, #48	; 0x30
 8009980:	2a09      	cmp	r2, #9
 8009982:	d903      	bls.n	800998c <_svfiprintf_r+0x1a8>
 8009984:	2b00      	cmp	r3, #0
 8009986:	d0c5      	beq.n	8009914 <_svfiprintf_r+0x130>
 8009988:	9105      	str	r1, [sp, #20]
 800998a:	e7c3      	b.n	8009914 <_svfiprintf_r+0x130>
 800998c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009990:	4604      	mov	r4, r0
 8009992:	2301      	movs	r3, #1
 8009994:	e7f0      	b.n	8009978 <_svfiprintf_r+0x194>
 8009996:	ab03      	add	r3, sp, #12
 8009998:	9300      	str	r3, [sp, #0]
 800999a:	462a      	mov	r2, r5
 800999c:	4b10      	ldr	r3, [pc, #64]	; (80099e0 <_svfiprintf_r+0x1fc>)
 800999e:	a904      	add	r1, sp, #16
 80099a0:	4638      	mov	r0, r7
 80099a2:	f3af 8000 	nop.w
 80099a6:	1c42      	adds	r2, r0, #1
 80099a8:	4606      	mov	r6, r0
 80099aa:	d1d6      	bne.n	800995a <_svfiprintf_r+0x176>
 80099ac:	89ab      	ldrh	r3, [r5, #12]
 80099ae:	065b      	lsls	r3, r3, #25
 80099b0:	f53f af2c 	bmi.w	800980c <_svfiprintf_r+0x28>
 80099b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80099b6:	b01d      	add	sp, #116	; 0x74
 80099b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099bc:	ab03      	add	r3, sp, #12
 80099be:	9300      	str	r3, [sp, #0]
 80099c0:	462a      	mov	r2, r5
 80099c2:	4b07      	ldr	r3, [pc, #28]	; (80099e0 <_svfiprintf_r+0x1fc>)
 80099c4:	a904      	add	r1, sp, #16
 80099c6:	4638      	mov	r0, r7
 80099c8:	f000 f9d2 	bl	8009d70 <_printf_i>
 80099cc:	e7eb      	b.n	80099a6 <_svfiprintf_r+0x1c2>
 80099ce:	bf00      	nop
 80099d0:	0800ac78 	.word	0x0800ac78
 80099d4:	0800ac7e 	.word	0x0800ac7e
 80099d8:	0800ac82 	.word	0x0800ac82
 80099dc:	00000000 	.word	0x00000000
 80099e0:	0800972d 	.word	0x0800972d

080099e4 <__sfputc_r>:
 80099e4:	6893      	ldr	r3, [r2, #8]
 80099e6:	3b01      	subs	r3, #1
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	b410      	push	{r4}
 80099ec:	6093      	str	r3, [r2, #8]
 80099ee:	da07      	bge.n	8009a00 <__sfputc_r+0x1c>
 80099f0:	6994      	ldr	r4, [r2, #24]
 80099f2:	42a3      	cmp	r3, r4
 80099f4:	db01      	blt.n	80099fa <__sfputc_r+0x16>
 80099f6:	290a      	cmp	r1, #10
 80099f8:	d102      	bne.n	8009a00 <__sfputc_r+0x1c>
 80099fa:	bc10      	pop	{r4}
 80099fc:	f000 baf0 	b.w	8009fe0 <__swbuf_r>
 8009a00:	6813      	ldr	r3, [r2, #0]
 8009a02:	1c58      	adds	r0, r3, #1
 8009a04:	6010      	str	r0, [r2, #0]
 8009a06:	7019      	strb	r1, [r3, #0]
 8009a08:	4608      	mov	r0, r1
 8009a0a:	bc10      	pop	{r4}
 8009a0c:	4770      	bx	lr

08009a0e <__sfputs_r>:
 8009a0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a10:	4606      	mov	r6, r0
 8009a12:	460f      	mov	r7, r1
 8009a14:	4614      	mov	r4, r2
 8009a16:	18d5      	adds	r5, r2, r3
 8009a18:	42ac      	cmp	r4, r5
 8009a1a:	d101      	bne.n	8009a20 <__sfputs_r+0x12>
 8009a1c:	2000      	movs	r0, #0
 8009a1e:	e007      	b.n	8009a30 <__sfputs_r+0x22>
 8009a20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a24:	463a      	mov	r2, r7
 8009a26:	4630      	mov	r0, r6
 8009a28:	f7ff ffdc 	bl	80099e4 <__sfputc_r>
 8009a2c:	1c43      	adds	r3, r0, #1
 8009a2e:	d1f3      	bne.n	8009a18 <__sfputs_r+0xa>
 8009a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009a34 <_vfiprintf_r>:
 8009a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a38:	460d      	mov	r5, r1
 8009a3a:	b09d      	sub	sp, #116	; 0x74
 8009a3c:	4614      	mov	r4, r2
 8009a3e:	4698      	mov	r8, r3
 8009a40:	4606      	mov	r6, r0
 8009a42:	b118      	cbz	r0, 8009a4c <_vfiprintf_r+0x18>
 8009a44:	6983      	ldr	r3, [r0, #24]
 8009a46:	b90b      	cbnz	r3, 8009a4c <_vfiprintf_r+0x18>
 8009a48:	f7ff fa1e 	bl	8008e88 <__sinit>
 8009a4c:	4b89      	ldr	r3, [pc, #548]	; (8009c74 <_vfiprintf_r+0x240>)
 8009a4e:	429d      	cmp	r5, r3
 8009a50:	d11b      	bne.n	8009a8a <_vfiprintf_r+0x56>
 8009a52:	6875      	ldr	r5, [r6, #4]
 8009a54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a56:	07d9      	lsls	r1, r3, #31
 8009a58:	d405      	bmi.n	8009a66 <_vfiprintf_r+0x32>
 8009a5a:	89ab      	ldrh	r3, [r5, #12]
 8009a5c:	059a      	lsls	r2, r3, #22
 8009a5e:	d402      	bmi.n	8009a66 <_vfiprintf_r+0x32>
 8009a60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009a62:	f7ff fad4 	bl	800900e <__retarget_lock_acquire_recursive>
 8009a66:	89ab      	ldrh	r3, [r5, #12]
 8009a68:	071b      	lsls	r3, r3, #28
 8009a6a:	d501      	bpl.n	8009a70 <_vfiprintf_r+0x3c>
 8009a6c:	692b      	ldr	r3, [r5, #16]
 8009a6e:	b9eb      	cbnz	r3, 8009aac <_vfiprintf_r+0x78>
 8009a70:	4629      	mov	r1, r5
 8009a72:	4630      	mov	r0, r6
 8009a74:	f000 fb06 	bl	800a084 <__swsetup_r>
 8009a78:	b1c0      	cbz	r0, 8009aac <_vfiprintf_r+0x78>
 8009a7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009a7c:	07dc      	lsls	r4, r3, #31
 8009a7e:	d50e      	bpl.n	8009a9e <_vfiprintf_r+0x6a>
 8009a80:	f04f 30ff 	mov.w	r0, #4294967295
 8009a84:	b01d      	add	sp, #116	; 0x74
 8009a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a8a:	4b7b      	ldr	r3, [pc, #492]	; (8009c78 <_vfiprintf_r+0x244>)
 8009a8c:	429d      	cmp	r5, r3
 8009a8e:	d101      	bne.n	8009a94 <_vfiprintf_r+0x60>
 8009a90:	68b5      	ldr	r5, [r6, #8]
 8009a92:	e7df      	b.n	8009a54 <_vfiprintf_r+0x20>
 8009a94:	4b79      	ldr	r3, [pc, #484]	; (8009c7c <_vfiprintf_r+0x248>)
 8009a96:	429d      	cmp	r5, r3
 8009a98:	bf08      	it	eq
 8009a9a:	68f5      	ldreq	r5, [r6, #12]
 8009a9c:	e7da      	b.n	8009a54 <_vfiprintf_r+0x20>
 8009a9e:	89ab      	ldrh	r3, [r5, #12]
 8009aa0:	0598      	lsls	r0, r3, #22
 8009aa2:	d4ed      	bmi.n	8009a80 <_vfiprintf_r+0x4c>
 8009aa4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009aa6:	f7ff fab3 	bl	8009010 <__retarget_lock_release_recursive>
 8009aaa:	e7e9      	b.n	8009a80 <_vfiprintf_r+0x4c>
 8009aac:	2300      	movs	r3, #0
 8009aae:	9309      	str	r3, [sp, #36]	; 0x24
 8009ab0:	2320      	movs	r3, #32
 8009ab2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ab6:	f8cd 800c 	str.w	r8, [sp, #12]
 8009aba:	2330      	movs	r3, #48	; 0x30
 8009abc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009c80 <_vfiprintf_r+0x24c>
 8009ac0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ac4:	f04f 0901 	mov.w	r9, #1
 8009ac8:	4623      	mov	r3, r4
 8009aca:	469a      	mov	sl, r3
 8009acc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ad0:	b10a      	cbz	r2, 8009ad6 <_vfiprintf_r+0xa2>
 8009ad2:	2a25      	cmp	r2, #37	; 0x25
 8009ad4:	d1f9      	bne.n	8009aca <_vfiprintf_r+0x96>
 8009ad6:	ebba 0b04 	subs.w	fp, sl, r4
 8009ada:	d00b      	beq.n	8009af4 <_vfiprintf_r+0xc0>
 8009adc:	465b      	mov	r3, fp
 8009ade:	4622      	mov	r2, r4
 8009ae0:	4629      	mov	r1, r5
 8009ae2:	4630      	mov	r0, r6
 8009ae4:	f7ff ff93 	bl	8009a0e <__sfputs_r>
 8009ae8:	3001      	adds	r0, #1
 8009aea:	f000 80aa 	beq.w	8009c42 <_vfiprintf_r+0x20e>
 8009aee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009af0:	445a      	add	r2, fp
 8009af2:	9209      	str	r2, [sp, #36]	; 0x24
 8009af4:	f89a 3000 	ldrb.w	r3, [sl]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	f000 80a2 	beq.w	8009c42 <_vfiprintf_r+0x20e>
 8009afe:	2300      	movs	r3, #0
 8009b00:	f04f 32ff 	mov.w	r2, #4294967295
 8009b04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b08:	f10a 0a01 	add.w	sl, sl, #1
 8009b0c:	9304      	str	r3, [sp, #16]
 8009b0e:	9307      	str	r3, [sp, #28]
 8009b10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b14:	931a      	str	r3, [sp, #104]	; 0x68
 8009b16:	4654      	mov	r4, sl
 8009b18:	2205      	movs	r2, #5
 8009b1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b1e:	4858      	ldr	r0, [pc, #352]	; (8009c80 <_vfiprintf_r+0x24c>)
 8009b20:	f7f6 fb36 	bl	8000190 <memchr>
 8009b24:	9a04      	ldr	r2, [sp, #16]
 8009b26:	b9d8      	cbnz	r0, 8009b60 <_vfiprintf_r+0x12c>
 8009b28:	06d1      	lsls	r1, r2, #27
 8009b2a:	bf44      	itt	mi
 8009b2c:	2320      	movmi	r3, #32
 8009b2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b32:	0713      	lsls	r3, r2, #28
 8009b34:	bf44      	itt	mi
 8009b36:	232b      	movmi	r3, #43	; 0x2b
 8009b38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b3c:	f89a 3000 	ldrb.w	r3, [sl]
 8009b40:	2b2a      	cmp	r3, #42	; 0x2a
 8009b42:	d015      	beq.n	8009b70 <_vfiprintf_r+0x13c>
 8009b44:	9a07      	ldr	r2, [sp, #28]
 8009b46:	4654      	mov	r4, sl
 8009b48:	2000      	movs	r0, #0
 8009b4a:	f04f 0c0a 	mov.w	ip, #10
 8009b4e:	4621      	mov	r1, r4
 8009b50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b54:	3b30      	subs	r3, #48	; 0x30
 8009b56:	2b09      	cmp	r3, #9
 8009b58:	d94e      	bls.n	8009bf8 <_vfiprintf_r+0x1c4>
 8009b5a:	b1b0      	cbz	r0, 8009b8a <_vfiprintf_r+0x156>
 8009b5c:	9207      	str	r2, [sp, #28]
 8009b5e:	e014      	b.n	8009b8a <_vfiprintf_r+0x156>
 8009b60:	eba0 0308 	sub.w	r3, r0, r8
 8009b64:	fa09 f303 	lsl.w	r3, r9, r3
 8009b68:	4313      	orrs	r3, r2
 8009b6a:	9304      	str	r3, [sp, #16]
 8009b6c:	46a2      	mov	sl, r4
 8009b6e:	e7d2      	b.n	8009b16 <_vfiprintf_r+0xe2>
 8009b70:	9b03      	ldr	r3, [sp, #12]
 8009b72:	1d19      	adds	r1, r3, #4
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	9103      	str	r1, [sp, #12]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	bfbb      	ittet	lt
 8009b7c:	425b      	neglt	r3, r3
 8009b7e:	f042 0202 	orrlt.w	r2, r2, #2
 8009b82:	9307      	strge	r3, [sp, #28]
 8009b84:	9307      	strlt	r3, [sp, #28]
 8009b86:	bfb8      	it	lt
 8009b88:	9204      	strlt	r2, [sp, #16]
 8009b8a:	7823      	ldrb	r3, [r4, #0]
 8009b8c:	2b2e      	cmp	r3, #46	; 0x2e
 8009b8e:	d10c      	bne.n	8009baa <_vfiprintf_r+0x176>
 8009b90:	7863      	ldrb	r3, [r4, #1]
 8009b92:	2b2a      	cmp	r3, #42	; 0x2a
 8009b94:	d135      	bne.n	8009c02 <_vfiprintf_r+0x1ce>
 8009b96:	9b03      	ldr	r3, [sp, #12]
 8009b98:	1d1a      	adds	r2, r3, #4
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	9203      	str	r2, [sp, #12]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	bfb8      	it	lt
 8009ba2:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ba6:	3402      	adds	r4, #2
 8009ba8:	9305      	str	r3, [sp, #20]
 8009baa:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8009c84 <_vfiprintf_r+0x250>
 8009bae:	7821      	ldrb	r1, [r4, #0]
 8009bb0:	2203      	movs	r2, #3
 8009bb2:	4650      	mov	r0, sl
 8009bb4:	f7f6 faec 	bl	8000190 <memchr>
 8009bb8:	b140      	cbz	r0, 8009bcc <_vfiprintf_r+0x198>
 8009bba:	2340      	movs	r3, #64	; 0x40
 8009bbc:	eba0 000a 	sub.w	r0, r0, sl
 8009bc0:	fa03 f000 	lsl.w	r0, r3, r0
 8009bc4:	9b04      	ldr	r3, [sp, #16]
 8009bc6:	4303      	orrs	r3, r0
 8009bc8:	3401      	adds	r4, #1
 8009bca:	9304      	str	r3, [sp, #16]
 8009bcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bd0:	482d      	ldr	r0, [pc, #180]	; (8009c88 <_vfiprintf_r+0x254>)
 8009bd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009bd6:	2206      	movs	r2, #6
 8009bd8:	f7f6 fada 	bl	8000190 <memchr>
 8009bdc:	2800      	cmp	r0, #0
 8009bde:	d03f      	beq.n	8009c60 <_vfiprintf_r+0x22c>
 8009be0:	4b2a      	ldr	r3, [pc, #168]	; (8009c8c <_vfiprintf_r+0x258>)
 8009be2:	bb1b      	cbnz	r3, 8009c2c <_vfiprintf_r+0x1f8>
 8009be4:	9b03      	ldr	r3, [sp, #12]
 8009be6:	3307      	adds	r3, #7
 8009be8:	f023 0307 	bic.w	r3, r3, #7
 8009bec:	3308      	adds	r3, #8
 8009bee:	9303      	str	r3, [sp, #12]
 8009bf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bf2:	443b      	add	r3, r7
 8009bf4:	9309      	str	r3, [sp, #36]	; 0x24
 8009bf6:	e767      	b.n	8009ac8 <_vfiprintf_r+0x94>
 8009bf8:	fb0c 3202 	mla	r2, ip, r2, r3
 8009bfc:	460c      	mov	r4, r1
 8009bfe:	2001      	movs	r0, #1
 8009c00:	e7a5      	b.n	8009b4e <_vfiprintf_r+0x11a>
 8009c02:	2300      	movs	r3, #0
 8009c04:	3401      	adds	r4, #1
 8009c06:	9305      	str	r3, [sp, #20]
 8009c08:	4619      	mov	r1, r3
 8009c0a:	f04f 0c0a 	mov.w	ip, #10
 8009c0e:	4620      	mov	r0, r4
 8009c10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c14:	3a30      	subs	r2, #48	; 0x30
 8009c16:	2a09      	cmp	r2, #9
 8009c18:	d903      	bls.n	8009c22 <_vfiprintf_r+0x1ee>
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d0c5      	beq.n	8009baa <_vfiprintf_r+0x176>
 8009c1e:	9105      	str	r1, [sp, #20]
 8009c20:	e7c3      	b.n	8009baa <_vfiprintf_r+0x176>
 8009c22:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c26:	4604      	mov	r4, r0
 8009c28:	2301      	movs	r3, #1
 8009c2a:	e7f0      	b.n	8009c0e <_vfiprintf_r+0x1da>
 8009c2c:	ab03      	add	r3, sp, #12
 8009c2e:	9300      	str	r3, [sp, #0]
 8009c30:	462a      	mov	r2, r5
 8009c32:	4b17      	ldr	r3, [pc, #92]	; (8009c90 <_vfiprintf_r+0x25c>)
 8009c34:	a904      	add	r1, sp, #16
 8009c36:	4630      	mov	r0, r6
 8009c38:	f3af 8000 	nop.w
 8009c3c:	4607      	mov	r7, r0
 8009c3e:	1c78      	adds	r0, r7, #1
 8009c40:	d1d6      	bne.n	8009bf0 <_vfiprintf_r+0x1bc>
 8009c42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c44:	07d9      	lsls	r1, r3, #31
 8009c46:	d405      	bmi.n	8009c54 <_vfiprintf_r+0x220>
 8009c48:	89ab      	ldrh	r3, [r5, #12]
 8009c4a:	059a      	lsls	r2, r3, #22
 8009c4c:	d402      	bmi.n	8009c54 <_vfiprintf_r+0x220>
 8009c4e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c50:	f7ff f9de 	bl	8009010 <__retarget_lock_release_recursive>
 8009c54:	89ab      	ldrh	r3, [r5, #12]
 8009c56:	065b      	lsls	r3, r3, #25
 8009c58:	f53f af12 	bmi.w	8009a80 <_vfiprintf_r+0x4c>
 8009c5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c5e:	e711      	b.n	8009a84 <_vfiprintf_r+0x50>
 8009c60:	ab03      	add	r3, sp, #12
 8009c62:	9300      	str	r3, [sp, #0]
 8009c64:	462a      	mov	r2, r5
 8009c66:	4b0a      	ldr	r3, [pc, #40]	; (8009c90 <_vfiprintf_r+0x25c>)
 8009c68:	a904      	add	r1, sp, #16
 8009c6a:	4630      	mov	r0, r6
 8009c6c:	f000 f880 	bl	8009d70 <_printf_i>
 8009c70:	e7e4      	b.n	8009c3c <_vfiprintf_r+0x208>
 8009c72:	bf00      	nop
 8009c74:	0800ab84 	.word	0x0800ab84
 8009c78:	0800aba4 	.word	0x0800aba4
 8009c7c:	0800ab64 	.word	0x0800ab64
 8009c80:	0800ac78 	.word	0x0800ac78
 8009c84:	0800ac7e 	.word	0x0800ac7e
 8009c88:	0800ac82 	.word	0x0800ac82
 8009c8c:	00000000 	.word	0x00000000
 8009c90:	08009a0f 	.word	0x08009a0f

08009c94 <_printf_common>:
 8009c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c98:	4616      	mov	r6, r2
 8009c9a:	4699      	mov	r9, r3
 8009c9c:	688a      	ldr	r2, [r1, #8]
 8009c9e:	690b      	ldr	r3, [r1, #16]
 8009ca0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	bfb8      	it	lt
 8009ca8:	4613      	movlt	r3, r2
 8009caa:	6033      	str	r3, [r6, #0]
 8009cac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009cb0:	4607      	mov	r7, r0
 8009cb2:	460c      	mov	r4, r1
 8009cb4:	b10a      	cbz	r2, 8009cba <_printf_common+0x26>
 8009cb6:	3301      	adds	r3, #1
 8009cb8:	6033      	str	r3, [r6, #0]
 8009cba:	6823      	ldr	r3, [r4, #0]
 8009cbc:	0699      	lsls	r1, r3, #26
 8009cbe:	bf42      	ittt	mi
 8009cc0:	6833      	ldrmi	r3, [r6, #0]
 8009cc2:	3302      	addmi	r3, #2
 8009cc4:	6033      	strmi	r3, [r6, #0]
 8009cc6:	6825      	ldr	r5, [r4, #0]
 8009cc8:	f015 0506 	ands.w	r5, r5, #6
 8009ccc:	d106      	bne.n	8009cdc <_printf_common+0x48>
 8009cce:	f104 0a19 	add.w	sl, r4, #25
 8009cd2:	68e3      	ldr	r3, [r4, #12]
 8009cd4:	6832      	ldr	r2, [r6, #0]
 8009cd6:	1a9b      	subs	r3, r3, r2
 8009cd8:	42ab      	cmp	r3, r5
 8009cda:	dc26      	bgt.n	8009d2a <_printf_common+0x96>
 8009cdc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009ce0:	1e13      	subs	r3, r2, #0
 8009ce2:	6822      	ldr	r2, [r4, #0]
 8009ce4:	bf18      	it	ne
 8009ce6:	2301      	movne	r3, #1
 8009ce8:	0692      	lsls	r2, r2, #26
 8009cea:	d42b      	bmi.n	8009d44 <_printf_common+0xb0>
 8009cec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009cf0:	4649      	mov	r1, r9
 8009cf2:	4638      	mov	r0, r7
 8009cf4:	47c0      	blx	r8
 8009cf6:	3001      	adds	r0, #1
 8009cf8:	d01e      	beq.n	8009d38 <_printf_common+0xa4>
 8009cfa:	6823      	ldr	r3, [r4, #0]
 8009cfc:	68e5      	ldr	r5, [r4, #12]
 8009cfe:	6832      	ldr	r2, [r6, #0]
 8009d00:	f003 0306 	and.w	r3, r3, #6
 8009d04:	2b04      	cmp	r3, #4
 8009d06:	bf08      	it	eq
 8009d08:	1aad      	subeq	r5, r5, r2
 8009d0a:	68a3      	ldr	r3, [r4, #8]
 8009d0c:	6922      	ldr	r2, [r4, #16]
 8009d0e:	bf0c      	ite	eq
 8009d10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009d14:	2500      	movne	r5, #0
 8009d16:	4293      	cmp	r3, r2
 8009d18:	bfc4      	itt	gt
 8009d1a:	1a9b      	subgt	r3, r3, r2
 8009d1c:	18ed      	addgt	r5, r5, r3
 8009d1e:	2600      	movs	r6, #0
 8009d20:	341a      	adds	r4, #26
 8009d22:	42b5      	cmp	r5, r6
 8009d24:	d11a      	bne.n	8009d5c <_printf_common+0xc8>
 8009d26:	2000      	movs	r0, #0
 8009d28:	e008      	b.n	8009d3c <_printf_common+0xa8>
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	4652      	mov	r2, sl
 8009d2e:	4649      	mov	r1, r9
 8009d30:	4638      	mov	r0, r7
 8009d32:	47c0      	blx	r8
 8009d34:	3001      	adds	r0, #1
 8009d36:	d103      	bne.n	8009d40 <_printf_common+0xac>
 8009d38:	f04f 30ff 	mov.w	r0, #4294967295
 8009d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d40:	3501      	adds	r5, #1
 8009d42:	e7c6      	b.n	8009cd2 <_printf_common+0x3e>
 8009d44:	18e1      	adds	r1, r4, r3
 8009d46:	1c5a      	adds	r2, r3, #1
 8009d48:	2030      	movs	r0, #48	; 0x30
 8009d4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009d4e:	4422      	add	r2, r4
 8009d50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009d54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009d58:	3302      	adds	r3, #2
 8009d5a:	e7c7      	b.n	8009cec <_printf_common+0x58>
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	4622      	mov	r2, r4
 8009d60:	4649      	mov	r1, r9
 8009d62:	4638      	mov	r0, r7
 8009d64:	47c0      	blx	r8
 8009d66:	3001      	adds	r0, #1
 8009d68:	d0e6      	beq.n	8009d38 <_printf_common+0xa4>
 8009d6a:	3601      	adds	r6, #1
 8009d6c:	e7d9      	b.n	8009d22 <_printf_common+0x8e>
	...

08009d70 <_printf_i>:
 8009d70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d74:	7e0f      	ldrb	r7, [r1, #24]
 8009d76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009d78:	2f78      	cmp	r7, #120	; 0x78
 8009d7a:	4691      	mov	r9, r2
 8009d7c:	4680      	mov	r8, r0
 8009d7e:	460c      	mov	r4, r1
 8009d80:	469a      	mov	sl, r3
 8009d82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009d86:	d807      	bhi.n	8009d98 <_printf_i+0x28>
 8009d88:	2f62      	cmp	r7, #98	; 0x62
 8009d8a:	d80a      	bhi.n	8009da2 <_printf_i+0x32>
 8009d8c:	2f00      	cmp	r7, #0
 8009d8e:	f000 80d8 	beq.w	8009f42 <_printf_i+0x1d2>
 8009d92:	2f58      	cmp	r7, #88	; 0x58
 8009d94:	f000 80a3 	beq.w	8009ede <_printf_i+0x16e>
 8009d98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009d9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009da0:	e03a      	b.n	8009e18 <_printf_i+0xa8>
 8009da2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009da6:	2b15      	cmp	r3, #21
 8009da8:	d8f6      	bhi.n	8009d98 <_printf_i+0x28>
 8009daa:	a101      	add	r1, pc, #4	; (adr r1, 8009db0 <_printf_i+0x40>)
 8009dac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009db0:	08009e09 	.word	0x08009e09
 8009db4:	08009e1d 	.word	0x08009e1d
 8009db8:	08009d99 	.word	0x08009d99
 8009dbc:	08009d99 	.word	0x08009d99
 8009dc0:	08009d99 	.word	0x08009d99
 8009dc4:	08009d99 	.word	0x08009d99
 8009dc8:	08009e1d 	.word	0x08009e1d
 8009dcc:	08009d99 	.word	0x08009d99
 8009dd0:	08009d99 	.word	0x08009d99
 8009dd4:	08009d99 	.word	0x08009d99
 8009dd8:	08009d99 	.word	0x08009d99
 8009ddc:	08009f29 	.word	0x08009f29
 8009de0:	08009e4d 	.word	0x08009e4d
 8009de4:	08009f0b 	.word	0x08009f0b
 8009de8:	08009d99 	.word	0x08009d99
 8009dec:	08009d99 	.word	0x08009d99
 8009df0:	08009f4b 	.word	0x08009f4b
 8009df4:	08009d99 	.word	0x08009d99
 8009df8:	08009e4d 	.word	0x08009e4d
 8009dfc:	08009d99 	.word	0x08009d99
 8009e00:	08009d99 	.word	0x08009d99
 8009e04:	08009f13 	.word	0x08009f13
 8009e08:	682b      	ldr	r3, [r5, #0]
 8009e0a:	1d1a      	adds	r2, r3, #4
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	602a      	str	r2, [r5, #0]
 8009e10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009e18:	2301      	movs	r3, #1
 8009e1a:	e0a3      	b.n	8009f64 <_printf_i+0x1f4>
 8009e1c:	6820      	ldr	r0, [r4, #0]
 8009e1e:	6829      	ldr	r1, [r5, #0]
 8009e20:	0606      	lsls	r6, r0, #24
 8009e22:	f101 0304 	add.w	r3, r1, #4
 8009e26:	d50a      	bpl.n	8009e3e <_printf_i+0xce>
 8009e28:	680e      	ldr	r6, [r1, #0]
 8009e2a:	602b      	str	r3, [r5, #0]
 8009e2c:	2e00      	cmp	r6, #0
 8009e2e:	da03      	bge.n	8009e38 <_printf_i+0xc8>
 8009e30:	232d      	movs	r3, #45	; 0x2d
 8009e32:	4276      	negs	r6, r6
 8009e34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e38:	485e      	ldr	r0, [pc, #376]	; (8009fb4 <_printf_i+0x244>)
 8009e3a:	230a      	movs	r3, #10
 8009e3c:	e019      	b.n	8009e72 <_printf_i+0x102>
 8009e3e:	680e      	ldr	r6, [r1, #0]
 8009e40:	602b      	str	r3, [r5, #0]
 8009e42:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009e46:	bf18      	it	ne
 8009e48:	b236      	sxthne	r6, r6
 8009e4a:	e7ef      	b.n	8009e2c <_printf_i+0xbc>
 8009e4c:	682b      	ldr	r3, [r5, #0]
 8009e4e:	6820      	ldr	r0, [r4, #0]
 8009e50:	1d19      	adds	r1, r3, #4
 8009e52:	6029      	str	r1, [r5, #0]
 8009e54:	0601      	lsls	r1, r0, #24
 8009e56:	d501      	bpl.n	8009e5c <_printf_i+0xec>
 8009e58:	681e      	ldr	r6, [r3, #0]
 8009e5a:	e002      	b.n	8009e62 <_printf_i+0xf2>
 8009e5c:	0646      	lsls	r6, r0, #25
 8009e5e:	d5fb      	bpl.n	8009e58 <_printf_i+0xe8>
 8009e60:	881e      	ldrh	r6, [r3, #0]
 8009e62:	4854      	ldr	r0, [pc, #336]	; (8009fb4 <_printf_i+0x244>)
 8009e64:	2f6f      	cmp	r7, #111	; 0x6f
 8009e66:	bf0c      	ite	eq
 8009e68:	2308      	moveq	r3, #8
 8009e6a:	230a      	movne	r3, #10
 8009e6c:	2100      	movs	r1, #0
 8009e6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009e72:	6865      	ldr	r5, [r4, #4]
 8009e74:	60a5      	str	r5, [r4, #8]
 8009e76:	2d00      	cmp	r5, #0
 8009e78:	bfa2      	ittt	ge
 8009e7a:	6821      	ldrge	r1, [r4, #0]
 8009e7c:	f021 0104 	bicge.w	r1, r1, #4
 8009e80:	6021      	strge	r1, [r4, #0]
 8009e82:	b90e      	cbnz	r6, 8009e88 <_printf_i+0x118>
 8009e84:	2d00      	cmp	r5, #0
 8009e86:	d04d      	beq.n	8009f24 <_printf_i+0x1b4>
 8009e88:	4615      	mov	r5, r2
 8009e8a:	fbb6 f1f3 	udiv	r1, r6, r3
 8009e8e:	fb03 6711 	mls	r7, r3, r1, r6
 8009e92:	5dc7      	ldrb	r7, [r0, r7]
 8009e94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009e98:	4637      	mov	r7, r6
 8009e9a:	42bb      	cmp	r3, r7
 8009e9c:	460e      	mov	r6, r1
 8009e9e:	d9f4      	bls.n	8009e8a <_printf_i+0x11a>
 8009ea0:	2b08      	cmp	r3, #8
 8009ea2:	d10b      	bne.n	8009ebc <_printf_i+0x14c>
 8009ea4:	6823      	ldr	r3, [r4, #0]
 8009ea6:	07de      	lsls	r6, r3, #31
 8009ea8:	d508      	bpl.n	8009ebc <_printf_i+0x14c>
 8009eaa:	6923      	ldr	r3, [r4, #16]
 8009eac:	6861      	ldr	r1, [r4, #4]
 8009eae:	4299      	cmp	r1, r3
 8009eb0:	bfde      	ittt	le
 8009eb2:	2330      	movle	r3, #48	; 0x30
 8009eb4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009eb8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009ebc:	1b52      	subs	r2, r2, r5
 8009ebe:	6122      	str	r2, [r4, #16]
 8009ec0:	f8cd a000 	str.w	sl, [sp]
 8009ec4:	464b      	mov	r3, r9
 8009ec6:	aa03      	add	r2, sp, #12
 8009ec8:	4621      	mov	r1, r4
 8009eca:	4640      	mov	r0, r8
 8009ecc:	f7ff fee2 	bl	8009c94 <_printf_common>
 8009ed0:	3001      	adds	r0, #1
 8009ed2:	d14c      	bne.n	8009f6e <_printf_i+0x1fe>
 8009ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ed8:	b004      	add	sp, #16
 8009eda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ede:	4835      	ldr	r0, [pc, #212]	; (8009fb4 <_printf_i+0x244>)
 8009ee0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009ee4:	6829      	ldr	r1, [r5, #0]
 8009ee6:	6823      	ldr	r3, [r4, #0]
 8009ee8:	f851 6b04 	ldr.w	r6, [r1], #4
 8009eec:	6029      	str	r1, [r5, #0]
 8009eee:	061d      	lsls	r5, r3, #24
 8009ef0:	d514      	bpl.n	8009f1c <_printf_i+0x1ac>
 8009ef2:	07df      	lsls	r7, r3, #31
 8009ef4:	bf44      	itt	mi
 8009ef6:	f043 0320 	orrmi.w	r3, r3, #32
 8009efa:	6023      	strmi	r3, [r4, #0]
 8009efc:	b91e      	cbnz	r6, 8009f06 <_printf_i+0x196>
 8009efe:	6823      	ldr	r3, [r4, #0]
 8009f00:	f023 0320 	bic.w	r3, r3, #32
 8009f04:	6023      	str	r3, [r4, #0]
 8009f06:	2310      	movs	r3, #16
 8009f08:	e7b0      	b.n	8009e6c <_printf_i+0xfc>
 8009f0a:	6823      	ldr	r3, [r4, #0]
 8009f0c:	f043 0320 	orr.w	r3, r3, #32
 8009f10:	6023      	str	r3, [r4, #0]
 8009f12:	2378      	movs	r3, #120	; 0x78
 8009f14:	4828      	ldr	r0, [pc, #160]	; (8009fb8 <_printf_i+0x248>)
 8009f16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009f1a:	e7e3      	b.n	8009ee4 <_printf_i+0x174>
 8009f1c:	0659      	lsls	r1, r3, #25
 8009f1e:	bf48      	it	mi
 8009f20:	b2b6      	uxthmi	r6, r6
 8009f22:	e7e6      	b.n	8009ef2 <_printf_i+0x182>
 8009f24:	4615      	mov	r5, r2
 8009f26:	e7bb      	b.n	8009ea0 <_printf_i+0x130>
 8009f28:	682b      	ldr	r3, [r5, #0]
 8009f2a:	6826      	ldr	r6, [r4, #0]
 8009f2c:	6961      	ldr	r1, [r4, #20]
 8009f2e:	1d18      	adds	r0, r3, #4
 8009f30:	6028      	str	r0, [r5, #0]
 8009f32:	0635      	lsls	r5, r6, #24
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	d501      	bpl.n	8009f3c <_printf_i+0x1cc>
 8009f38:	6019      	str	r1, [r3, #0]
 8009f3a:	e002      	b.n	8009f42 <_printf_i+0x1d2>
 8009f3c:	0670      	lsls	r0, r6, #25
 8009f3e:	d5fb      	bpl.n	8009f38 <_printf_i+0x1c8>
 8009f40:	8019      	strh	r1, [r3, #0]
 8009f42:	2300      	movs	r3, #0
 8009f44:	6123      	str	r3, [r4, #16]
 8009f46:	4615      	mov	r5, r2
 8009f48:	e7ba      	b.n	8009ec0 <_printf_i+0x150>
 8009f4a:	682b      	ldr	r3, [r5, #0]
 8009f4c:	1d1a      	adds	r2, r3, #4
 8009f4e:	602a      	str	r2, [r5, #0]
 8009f50:	681d      	ldr	r5, [r3, #0]
 8009f52:	6862      	ldr	r2, [r4, #4]
 8009f54:	2100      	movs	r1, #0
 8009f56:	4628      	mov	r0, r5
 8009f58:	f7f6 f91a 	bl	8000190 <memchr>
 8009f5c:	b108      	cbz	r0, 8009f62 <_printf_i+0x1f2>
 8009f5e:	1b40      	subs	r0, r0, r5
 8009f60:	6060      	str	r0, [r4, #4]
 8009f62:	6863      	ldr	r3, [r4, #4]
 8009f64:	6123      	str	r3, [r4, #16]
 8009f66:	2300      	movs	r3, #0
 8009f68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f6c:	e7a8      	b.n	8009ec0 <_printf_i+0x150>
 8009f6e:	6923      	ldr	r3, [r4, #16]
 8009f70:	462a      	mov	r2, r5
 8009f72:	4649      	mov	r1, r9
 8009f74:	4640      	mov	r0, r8
 8009f76:	47d0      	blx	sl
 8009f78:	3001      	adds	r0, #1
 8009f7a:	d0ab      	beq.n	8009ed4 <_printf_i+0x164>
 8009f7c:	6823      	ldr	r3, [r4, #0]
 8009f7e:	079b      	lsls	r3, r3, #30
 8009f80:	d413      	bmi.n	8009faa <_printf_i+0x23a>
 8009f82:	68e0      	ldr	r0, [r4, #12]
 8009f84:	9b03      	ldr	r3, [sp, #12]
 8009f86:	4298      	cmp	r0, r3
 8009f88:	bfb8      	it	lt
 8009f8a:	4618      	movlt	r0, r3
 8009f8c:	e7a4      	b.n	8009ed8 <_printf_i+0x168>
 8009f8e:	2301      	movs	r3, #1
 8009f90:	4632      	mov	r2, r6
 8009f92:	4649      	mov	r1, r9
 8009f94:	4640      	mov	r0, r8
 8009f96:	47d0      	blx	sl
 8009f98:	3001      	adds	r0, #1
 8009f9a:	d09b      	beq.n	8009ed4 <_printf_i+0x164>
 8009f9c:	3501      	adds	r5, #1
 8009f9e:	68e3      	ldr	r3, [r4, #12]
 8009fa0:	9903      	ldr	r1, [sp, #12]
 8009fa2:	1a5b      	subs	r3, r3, r1
 8009fa4:	42ab      	cmp	r3, r5
 8009fa6:	dcf2      	bgt.n	8009f8e <_printf_i+0x21e>
 8009fa8:	e7eb      	b.n	8009f82 <_printf_i+0x212>
 8009faa:	2500      	movs	r5, #0
 8009fac:	f104 0619 	add.w	r6, r4, #25
 8009fb0:	e7f5      	b.n	8009f9e <_printf_i+0x22e>
 8009fb2:	bf00      	nop
 8009fb4:	0800ac89 	.word	0x0800ac89
 8009fb8:	0800ac9a 	.word	0x0800ac9a

08009fbc <_read_r>:
 8009fbc:	b538      	push	{r3, r4, r5, lr}
 8009fbe:	4d07      	ldr	r5, [pc, #28]	; (8009fdc <_read_r+0x20>)
 8009fc0:	4604      	mov	r4, r0
 8009fc2:	4608      	mov	r0, r1
 8009fc4:	4611      	mov	r1, r2
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	602a      	str	r2, [r5, #0]
 8009fca:	461a      	mov	r2, r3
 8009fcc:	f7f7 f84f 	bl	800106e <_read>
 8009fd0:	1c43      	adds	r3, r0, #1
 8009fd2:	d102      	bne.n	8009fda <_read_r+0x1e>
 8009fd4:	682b      	ldr	r3, [r5, #0]
 8009fd6:	b103      	cbz	r3, 8009fda <_read_r+0x1e>
 8009fd8:	6023      	str	r3, [r4, #0]
 8009fda:	bd38      	pop	{r3, r4, r5, pc}
 8009fdc:	20001a00 	.word	0x20001a00

08009fe0 <__swbuf_r>:
 8009fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fe2:	460e      	mov	r6, r1
 8009fe4:	4614      	mov	r4, r2
 8009fe6:	4605      	mov	r5, r0
 8009fe8:	b118      	cbz	r0, 8009ff2 <__swbuf_r+0x12>
 8009fea:	6983      	ldr	r3, [r0, #24]
 8009fec:	b90b      	cbnz	r3, 8009ff2 <__swbuf_r+0x12>
 8009fee:	f7fe ff4b 	bl	8008e88 <__sinit>
 8009ff2:	4b21      	ldr	r3, [pc, #132]	; (800a078 <__swbuf_r+0x98>)
 8009ff4:	429c      	cmp	r4, r3
 8009ff6:	d12b      	bne.n	800a050 <__swbuf_r+0x70>
 8009ff8:	686c      	ldr	r4, [r5, #4]
 8009ffa:	69a3      	ldr	r3, [r4, #24]
 8009ffc:	60a3      	str	r3, [r4, #8]
 8009ffe:	89a3      	ldrh	r3, [r4, #12]
 800a000:	071a      	lsls	r2, r3, #28
 800a002:	d52f      	bpl.n	800a064 <__swbuf_r+0x84>
 800a004:	6923      	ldr	r3, [r4, #16]
 800a006:	b36b      	cbz	r3, 800a064 <__swbuf_r+0x84>
 800a008:	6923      	ldr	r3, [r4, #16]
 800a00a:	6820      	ldr	r0, [r4, #0]
 800a00c:	1ac0      	subs	r0, r0, r3
 800a00e:	6963      	ldr	r3, [r4, #20]
 800a010:	b2f6      	uxtb	r6, r6
 800a012:	4283      	cmp	r3, r0
 800a014:	4637      	mov	r7, r6
 800a016:	dc04      	bgt.n	800a022 <__swbuf_r+0x42>
 800a018:	4621      	mov	r1, r4
 800a01a:	4628      	mov	r0, r5
 800a01c:	f7ff fac8 	bl	80095b0 <_fflush_r>
 800a020:	bb30      	cbnz	r0, 800a070 <__swbuf_r+0x90>
 800a022:	68a3      	ldr	r3, [r4, #8]
 800a024:	3b01      	subs	r3, #1
 800a026:	60a3      	str	r3, [r4, #8]
 800a028:	6823      	ldr	r3, [r4, #0]
 800a02a:	1c5a      	adds	r2, r3, #1
 800a02c:	6022      	str	r2, [r4, #0]
 800a02e:	701e      	strb	r6, [r3, #0]
 800a030:	6963      	ldr	r3, [r4, #20]
 800a032:	3001      	adds	r0, #1
 800a034:	4283      	cmp	r3, r0
 800a036:	d004      	beq.n	800a042 <__swbuf_r+0x62>
 800a038:	89a3      	ldrh	r3, [r4, #12]
 800a03a:	07db      	lsls	r3, r3, #31
 800a03c:	d506      	bpl.n	800a04c <__swbuf_r+0x6c>
 800a03e:	2e0a      	cmp	r6, #10
 800a040:	d104      	bne.n	800a04c <__swbuf_r+0x6c>
 800a042:	4621      	mov	r1, r4
 800a044:	4628      	mov	r0, r5
 800a046:	f7ff fab3 	bl	80095b0 <_fflush_r>
 800a04a:	b988      	cbnz	r0, 800a070 <__swbuf_r+0x90>
 800a04c:	4638      	mov	r0, r7
 800a04e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a050:	4b0a      	ldr	r3, [pc, #40]	; (800a07c <__swbuf_r+0x9c>)
 800a052:	429c      	cmp	r4, r3
 800a054:	d101      	bne.n	800a05a <__swbuf_r+0x7a>
 800a056:	68ac      	ldr	r4, [r5, #8]
 800a058:	e7cf      	b.n	8009ffa <__swbuf_r+0x1a>
 800a05a:	4b09      	ldr	r3, [pc, #36]	; (800a080 <__swbuf_r+0xa0>)
 800a05c:	429c      	cmp	r4, r3
 800a05e:	bf08      	it	eq
 800a060:	68ec      	ldreq	r4, [r5, #12]
 800a062:	e7ca      	b.n	8009ffa <__swbuf_r+0x1a>
 800a064:	4621      	mov	r1, r4
 800a066:	4628      	mov	r0, r5
 800a068:	f000 f80c 	bl	800a084 <__swsetup_r>
 800a06c:	2800      	cmp	r0, #0
 800a06e:	d0cb      	beq.n	800a008 <__swbuf_r+0x28>
 800a070:	f04f 37ff 	mov.w	r7, #4294967295
 800a074:	e7ea      	b.n	800a04c <__swbuf_r+0x6c>
 800a076:	bf00      	nop
 800a078:	0800ab84 	.word	0x0800ab84
 800a07c:	0800aba4 	.word	0x0800aba4
 800a080:	0800ab64 	.word	0x0800ab64

0800a084 <__swsetup_r>:
 800a084:	4b32      	ldr	r3, [pc, #200]	; (800a150 <__swsetup_r+0xcc>)
 800a086:	b570      	push	{r4, r5, r6, lr}
 800a088:	681d      	ldr	r5, [r3, #0]
 800a08a:	4606      	mov	r6, r0
 800a08c:	460c      	mov	r4, r1
 800a08e:	b125      	cbz	r5, 800a09a <__swsetup_r+0x16>
 800a090:	69ab      	ldr	r3, [r5, #24]
 800a092:	b913      	cbnz	r3, 800a09a <__swsetup_r+0x16>
 800a094:	4628      	mov	r0, r5
 800a096:	f7fe fef7 	bl	8008e88 <__sinit>
 800a09a:	4b2e      	ldr	r3, [pc, #184]	; (800a154 <__swsetup_r+0xd0>)
 800a09c:	429c      	cmp	r4, r3
 800a09e:	d10f      	bne.n	800a0c0 <__swsetup_r+0x3c>
 800a0a0:	686c      	ldr	r4, [r5, #4]
 800a0a2:	89a3      	ldrh	r3, [r4, #12]
 800a0a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a0a8:	0719      	lsls	r1, r3, #28
 800a0aa:	d42c      	bmi.n	800a106 <__swsetup_r+0x82>
 800a0ac:	06dd      	lsls	r5, r3, #27
 800a0ae:	d411      	bmi.n	800a0d4 <__swsetup_r+0x50>
 800a0b0:	2309      	movs	r3, #9
 800a0b2:	6033      	str	r3, [r6, #0]
 800a0b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a0b8:	81a3      	strh	r3, [r4, #12]
 800a0ba:	f04f 30ff 	mov.w	r0, #4294967295
 800a0be:	e03e      	b.n	800a13e <__swsetup_r+0xba>
 800a0c0:	4b25      	ldr	r3, [pc, #148]	; (800a158 <__swsetup_r+0xd4>)
 800a0c2:	429c      	cmp	r4, r3
 800a0c4:	d101      	bne.n	800a0ca <__swsetup_r+0x46>
 800a0c6:	68ac      	ldr	r4, [r5, #8]
 800a0c8:	e7eb      	b.n	800a0a2 <__swsetup_r+0x1e>
 800a0ca:	4b24      	ldr	r3, [pc, #144]	; (800a15c <__swsetup_r+0xd8>)
 800a0cc:	429c      	cmp	r4, r3
 800a0ce:	bf08      	it	eq
 800a0d0:	68ec      	ldreq	r4, [r5, #12]
 800a0d2:	e7e6      	b.n	800a0a2 <__swsetup_r+0x1e>
 800a0d4:	0758      	lsls	r0, r3, #29
 800a0d6:	d512      	bpl.n	800a0fe <__swsetup_r+0x7a>
 800a0d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a0da:	b141      	cbz	r1, 800a0ee <__swsetup_r+0x6a>
 800a0dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a0e0:	4299      	cmp	r1, r3
 800a0e2:	d002      	beq.n	800a0ea <__swsetup_r+0x66>
 800a0e4:	4630      	mov	r0, r6
 800a0e6:	f7ff fad7 	bl	8009698 <_free_r>
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	6363      	str	r3, [r4, #52]	; 0x34
 800a0ee:	89a3      	ldrh	r3, [r4, #12]
 800a0f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a0f4:	81a3      	strh	r3, [r4, #12]
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	6063      	str	r3, [r4, #4]
 800a0fa:	6923      	ldr	r3, [r4, #16]
 800a0fc:	6023      	str	r3, [r4, #0]
 800a0fe:	89a3      	ldrh	r3, [r4, #12]
 800a100:	f043 0308 	orr.w	r3, r3, #8
 800a104:	81a3      	strh	r3, [r4, #12]
 800a106:	6923      	ldr	r3, [r4, #16]
 800a108:	b94b      	cbnz	r3, 800a11e <__swsetup_r+0x9a>
 800a10a:	89a3      	ldrh	r3, [r4, #12]
 800a10c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a110:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a114:	d003      	beq.n	800a11e <__swsetup_r+0x9a>
 800a116:	4621      	mov	r1, r4
 800a118:	4630      	mov	r0, r6
 800a11a:	f000 f84d 	bl	800a1b8 <__smakebuf_r>
 800a11e:	89a0      	ldrh	r0, [r4, #12]
 800a120:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a124:	f010 0301 	ands.w	r3, r0, #1
 800a128:	d00a      	beq.n	800a140 <__swsetup_r+0xbc>
 800a12a:	2300      	movs	r3, #0
 800a12c:	60a3      	str	r3, [r4, #8]
 800a12e:	6963      	ldr	r3, [r4, #20]
 800a130:	425b      	negs	r3, r3
 800a132:	61a3      	str	r3, [r4, #24]
 800a134:	6923      	ldr	r3, [r4, #16]
 800a136:	b943      	cbnz	r3, 800a14a <__swsetup_r+0xc6>
 800a138:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a13c:	d1ba      	bne.n	800a0b4 <__swsetup_r+0x30>
 800a13e:	bd70      	pop	{r4, r5, r6, pc}
 800a140:	0781      	lsls	r1, r0, #30
 800a142:	bf58      	it	pl
 800a144:	6963      	ldrpl	r3, [r4, #20]
 800a146:	60a3      	str	r3, [r4, #8]
 800a148:	e7f4      	b.n	800a134 <__swsetup_r+0xb0>
 800a14a:	2000      	movs	r0, #0
 800a14c:	e7f7      	b.n	800a13e <__swsetup_r+0xba>
 800a14e:	bf00      	nop
 800a150:	20000010 	.word	0x20000010
 800a154:	0800ab84 	.word	0x0800ab84
 800a158:	0800aba4 	.word	0x0800aba4
 800a15c:	0800ab64 	.word	0x0800ab64

0800a160 <abort>:
 800a160:	b508      	push	{r3, lr}
 800a162:	2006      	movs	r0, #6
 800a164:	f000 f8da 	bl	800a31c <raise>
 800a168:	2001      	movs	r0, #1
 800a16a:	f7f6 ff76 	bl	800105a <_exit>

0800a16e <__swhatbuf_r>:
 800a16e:	b570      	push	{r4, r5, r6, lr}
 800a170:	460e      	mov	r6, r1
 800a172:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a176:	2900      	cmp	r1, #0
 800a178:	b096      	sub	sp, #88	; 0x58
 800a17a:	4614      	mov	r4, r2
 800a17c:	461d      	mov	r5, r3
 800a17e:	da08      	bge.n	800a192 <__swhatbuf_r+0x24>
 800a180:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a184:	2200      	movs	r2, #0
 800a186:	602a      	str	r2, [r5, #0]
 800a188:	061a      	lsls	r2, r3, #24
 800a18a:	d410      	bmi.n	800a1ae <__swhatbuf_r+0x40>
 800a18c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a190:	e00e      	b.n	800a1b0 <__swhatbuf_r+0x42>
 800a192:	466a      	mov	r2, sp
 800a194:	f000 f8de 	bl	800a354 <_fstat_r>
 800a198:	2800      	cmp	r0, #0
 800a19a:	dbf1      	blt.n	800a180 <__swhatbuf_r+0x12>
 800a19c:	9a01      	ldr	r2, [sp, #4]
 800a19e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a1a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a1a6:	425a      	negs	r2, r3
 800a1a8:	415a      	adcs	r2, r3
 800a1aa:	602a      	str	r2, [r5, #0]
 800a1ac:	e7ee      	b.n	800a18c <__swhatbuf_r+0x1e>
 800a1ae:	2340      	movs	r3, #64	; 0x40
 800a1b0:	2000      	movs	r0, #0
 800a1b2:	6023      	str	r3, [r4, #0]
 800a1b4:	b016      	add	sp, #88	; 0x58
 800a1b6:	bd70      	pop	{r4, r5, r6, pc}

0800a1b8 <__smakebuf_r>:
 800a1b8:	898b      	ldrh	r3, [r1, #12]
 800a1ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a1bc:	079d      	lsls	r5, r3, #30
 800a1be:	4606      	mov	r6, r0
 800a1c0:	460c      	mov	r4, r1
 800a1c2:	d507      	bpl.n	800a1d4 <__smakebuf_r+0x1c>
 800a1c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a1c8:	6023      	str	r3, [r4, #0]
 800a1ca:	6123      	str	r3, [r4, #16]
 800a1cc:	2301      	movs	r3, #1
 800a1ce:	6163      	str	r3, [r4, #20]
 800a1d0:	b002      	add	sp, #8
 800a1d2:	bd70      	pop	{r4, r5, r6, pc}
 800a1d4:	ab01      	add	r3, sp, #4
 800a1d6:	466a      	mov	r2, sp
 800a1d8:	f7ff ffc9 	bl	800a16e <__swhatbuf_r>
 800a1dc:	9900      	ldr	r1, [sp, #0]
 800a1de:	4605      	mov	r5, r0
 800a1e0:	4630      	mov	r0, r6
 800a1e2:	f7fe ff4d 	bl	8009080 <_malloc_r>
 800a1e6:	b948      	cbnz	r0, 800a1fc <__smakebuf_r+0x44>
 800a1e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1ec:	059a      	lsls	r2, r3, #22
 800a1ee:	d4ef      	bmi.n	800a1d0 <__smakebuf_r+0x18>
 800a1f0:	f023 0303 	bic.w	r3, r3, #3
 800a1f4:	f043 0302 	orr.w	r3, r3, #2
 800a1f8:	81a3      	strh	r3, [r4, #12]
 800a1fa:	e7e3      	b.n	800a1c4 <__smakebuf_r+0xc>
 800a1fc:	4b0d      	ldr	r3, [pc, #52]	; (800a234 <__smakebuf_r+0x7c>)
 800a1fe:	62b3      	str	r3, [r6, #40]	; 0x28
 800a200:	89a3      	ldrh	r3, [r4, #12]
 800a202:	6020      	str	r0, [r4, #0]
 800a204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a208:	81a3      	strh	r3, [r4, #12]
 800a20a:	9b00      	ldr	r3, [sp, #0]
 800a20c:	6163      	str	r3, [r4, #20]
 800a20e:	9b01      	ldr	r3, [sp, #4]
 800a210:	6120      	str	r0, [r4, #16]
 800a212:	b15b      	cbz	r3, 800a22c <__smakebuf_r+0x74>
 800a214:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a218:	4630      	mov	r0, r6
 800a21a:	f000 f8ad 	bl	800a378 <_isatty_r>
 800a21e:	b128      	cbz	r0, 800a22c <__smakebuf_r+0x74>
 800a220:	89a3      	ldrh	r3, [r4, #12]
 800a222:	f023 0303 	bic.w	r3, r3, #3
 800a226:	f043 0301 	orr.w	r3, r3, #1
 800a22a:	81a3      	strh	r3, [r4, #12]
 800a22c:	89a0      	ldrh	r0, [r4, #12]
 800a22e:	4305      	orrs	r5, r0
 800a230:	81a5      	strh	r5, [r4, #12]
 800a232:	e7cd      	b.n	800a1d0 <__smakebuf_r+0x18>
 800a234:	08008e21 	.word	0x08008e21

0800a238 <memmove>:
 800a238:	4288      	cmp	r0, r1
 800a23a:	b510      	push	{r4, lr}
 800a23c:	eb01 0402 	add.w	r4, r1, r2
 800a240:	d902      	bls.n	800a248 <memmove+0x10>
 800a242:	4284      	cmp	r4, r0
 800a244:	4623      	mov	r3, r4
 800a246:	d807      	bhi.n	800a258 <memmove+0x20>
 800a248:	1e43      	subs	r3, r0, #1
 800a24a:	42a1      	cmp	r1, r4
 800a24c:	d008      	beq.n	800a260 <memmove+0x28>
 800a24e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a252:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a256:	e7f8      	b.n	800a24a <memmove+0x12>
 800a258:	4402      	add	r2, r0
 800a25a:	4601      	mov	r1, r0
 800a25c:	428a      	cmp	r2, r1
 800a25e:	d100      	bne.n	800a262 <memmove+0x2a>
 800a260:	bd10      	pop	{r4, pc}
 800a262:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a266:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a26a:	e7f7      	b.n	800a25c <memmove+0x24>

0800a26c <_realloc_r>:
 800a26c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a270:	4680      	mov	r8, r0
 800a272:	4614      	mov	r4, r2
 800a274:	460e      	mov	r6, r1
 800a276:	b921      	cbnz	r1, 800a282 <_realloc_r+0x16>
 800a278:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a27c:	4611      	mov	r1, r2
 800a27e:	f7fe beff 	b.w	8009080 <_malloc_r>
 800a282:	b92a      	cbnz	r2, 800a290 <_realloc_r+0x24>
 800a284:	f7ff fa08 	bl	8009698 <_free_r>
 800a288:	4625      	mov	r5, r4
 800a28a:	4628      	mov	r0, r5
 800a28c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a290:	f000 f882 	bl	800a398 <_malloc_usable_size_r>
 800a294:	4284      	cmp	r4, r0
 800a296:	4607      	mov	r7, r0
 800a298:	d802      	bhi.n	800a2a0 <_realloc_r+0x34>
 800a29a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a29e:	d812      	bhi.n	800a2c6 <_realloc_r+0x5a>
 800a2a0:	4621      	mov	r1, r4
 800a2a2:	4640      	mov	r0, r8
 800a2a4:	f7fe feec 	bl	8009080 <_malloc_r>
 800a2a8:	4605      	mov	r5, r0
 800a2aa:	2800      	cmp	r0, #0
 800a2ac:	d0ed      	beq.n	800a28a <_realloc_r+0x1e>
 800a2ae:	42bc      	cmp	r4, r7
 800a2b0:	4622      	mov	r2, r4
 800a2b2:	4631      	mov	r1, r6
 800a2b4:	bf28      	it	cs
 800a2b6:	463a      	movcs	r2, r7
 800a2b8:	f7fe feab 	bl	8009012 <memcpy>
 800a2bc:	4631      	mov	r1, r6
 800a2be:	4640      	mov	r0, r8
 800a2c0:	f7ff f9ea 	bl	8009698 <_free_r>
 800a2c4:	e7e1      	b.n	800a28a <_realloc_r+0x1e>
 800a2c6:	4635      	mov	r5, r6
 800a2c8:	e7df      	b.n	800a28a <_realloc_r+0x1e>

0800a2ca <_raise_r>:
 800a2ca:	291f      	cmp	r1, #31
 800a2cc:	b538      	push	{r3, r4, r5, lr}
 800a2ce:	4604      	mov	r4, r0
 800a2d0:	460d      	mov	r5, r1
 800a2d2:	d904      	bls.n	800a2de <_raise_r+0x14>
 800a2d4:	2316      	movs	r3, #22
 800a2d6:	6003      	str	r3, [r0, #0]
 800a2d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a2dc:	bd38      	pop	{r3, r4, r5, pc}
 800a2de:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a2e0:	b112      	cbz	r2, 800a2e8 <_raise_r+0x1e>
 800a2e2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a2e6:	b94b      	cbnz	r3, 800a2fc <_raise_r+0x32>
 800a2e8:	4620      	mov	r0, r4
 800a2ea:	f000 f831 	bl	800a350 <_getpid_r>
 800a2ee:	462a      	mov	r2, r5
 800a2f0:	4601      	mov	r1, r0
 800a2f2:	4620      	mov	r0, r4
 800a2f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2f8:	f000 b818 	b.w	800a32c <_kill_r>
 800a2fc:	2b01      	cmp	r3, #1
 800a2fe:	d00a      	beq.n	800a316 <_raise_r+0x4c>
 800a300:	1c59      	adds	r1, r3, #1
 800a302:	d103      	bne.n	800a30c <_raise_r+0x42>
 800a304:	2316      	movs	r3, #22
 800a306:	6003      	str	r3, [r0, #0]
 800a308:	2001      	movs	r0, #1
 800a30a:	e7e7      	b.n	800a2dc <_raise_r+0x12>
 800a30c:	2400      	movs	r4, #0
 800a30e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a312:	4628      	mov	r0, r5
 800a314:	4798      	blx	r3
 800a316:	2000      	movs	r0, #0
 800a318:	e7e0      	b.n	800a2dc <_raise_r+0x12>
	...

0800a31c <raise>:
 800a31c:	4b02      	ldr	r3, [pc, #8]	; (800a328 <raise+0xc>)
 800a31e:	4601      	mov	r1, r0
 800a320:	6818      	ldr	r0, [r3, #0]
 800a322:	f7ff bfd2 	b.w	800a2ca <_raise_r>
 800a326:	bf00      	nop
 800a328:	20000010 	.word	0x20000010

0800a32c <_kill_r>:
 800a32c:	b538      	push	{r3, r4, r5, lr}
 800a32e:	4d07      	ldr	r5, [pc, #28]	; (800a34c <_kill_r+0x20>)
 800a330:	2300      	movs	r3, #0
 800a332:	4604      	mov	r4, r0
 800a334:	4608      	mov	r0, r1
 800a336:	4611      	mov	r1, r2
 800a338:	602b      	str	r3, [r5, #0]
 800a33a:	f7f6 fe7e 	bl	800103a <_kill>
 800a33e:	1c43      	adds	r3, r0, #1
 800a340:	d102      	bne.n	800a348 <_kill_r+0x1c>
 800a342:	682b      	ldr	r3, [r5, #0]
 800a344:	b103      	cbz	r3, 800a348 <_kill_r+0x1c>
 800a346:	6023      	str	r3, [r4, #0]
 800a348:	bd38      	pop	{r3, r4, r5, pc}
 800a34a:	bf00      	nop
 800a34c:	20001a00 	.word	0x20001a00

0800a350 <_getpid_r>:
 800a350:	f7f6 be6c 	b.w	800102c <_getpid>

0800a354 <_fstat_r>:
 800a354:	b538      	push	{r3, r4, r5, lr}
 800a356:	4d07      	ldr	r5, [pc, #28]	; (800a374 <_fstat_r+0x20>)
 800a358:	2300      	movs	r3, #0
 800a35a:	4604      	mov	r4, r0
 800a35c:	4608      	mov	r0, r1
 800a35e:	4611      	mov	r1, r2
 800a360:	602b      	str	r3, [r5, #0]
 800a362:	f7f6 fec8 	bl	80010f6 <_fstat>
 800a366:	1c43      	adds	r3, r0, #1
 800a368:	d102      	bne.n	800a370 <_fstat_r+0x1c>
 800a36a:	682b      	ldr	r3, [r5, #0]
 800a36c:	b103      	cbz	r3, 800a370 <_fstat_r+0x1c>
 800a36e:	6023      	str	r3, [r4, #0]
 800a370:	bd38      	pop	{r3, r4, r5, pc}
 800a372:	bf00      	nop
 800a374:	20001a00 	.word	0x20001a00

0800a378 <_isatty_r>:
 800a378:	b538      	push	{r3, r4, r5, lr}
 800a37a:	4d06      	ldr	r5, [pc, #24]	; (800a394 <_isatty_r+0x1c>)
 800a37c:	2300      	movs	r3, #0
 800a37e:	4604      	mov	r4, r0
 800a380:	4608      	mov	r0, r1
 800a382:	602b      	str	r3, [r5, #0]
 800a384:	f7f6 fec6 	bl	8001114 <_isatty>
 800a388:	1c43      	adds	r3, r0, #1
 800a38a:	d102      	bne.n	800a392 <_isatty_r+0x1a>
 800a38c:	682b      	ldr	r3, [r5, #0]
 800a38e:	b103      	cbz	r3, 800a392 <_isatty_r+0x1a>
 800a390:	6023      	str	r3, [r4, #0]
 800a392:	bd38      	pop	{r3, r4, r5, pc}
 800a394:	20001a00 	.word	0x20001a00

0800a398 <_malloc_usable_size_r>:
 800a398:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a39c:	1f18      	subs	r0, r3, #4
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	bfbc      	itt	lt
 800a3a2:	580b      	ldrlt	r3, [r1, r0]
 800a3a4:	18c0      	addlt	r0, r0, r3
 800a3a6:	4770      	bx	lr

0800a3a8 <_init>:
 800a3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3aa:	bf00      	nop
 800a3ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3ae:	bc08      	pop	{r3}
 800a3b0:	469e      	mov	lr, r3
 800a3b2:	4770      	bx	lr

0800a3b4 <_fini>:
 800a3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3b6:	bf00      	nop
 800a3b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3ba:	bc08      	pop	{r3}
 800a3bc:	469e      	mov	lr, r3
 800a3be:	4770      	bx	lr
